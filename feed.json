{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2025/05/02/whl-wen-jian-ming-hou-zhui/",
            "url": "https://0xdadream.github.io/2025/05/02/whl-wen-jian-ming-hou-zhui/",
            "title": "whl文件名后缀",
            "date_published": "2025-05-02T04:25:00.000Z",
            "content_html": "<h1 id=\"whl文件名后缀\"><a href=\"#whl文件名后缀\" class=\"headerlink\" title=\"whl文件名后缀\"></a>whl文件名后缀</h1><h2 id=\"1-Wheel-文件名的基本格式\"><a href=\"#1-Wheel-文件名的基本格式\" class=\"headerlink\" title=\"1. Wheel 文件名的基本格式\"></a>1. Wheel 文件名的基本格式</h2><p>Wheel 名称遵循 PEP 427 规范，通用格式为：</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\"><span class=\"token punctuation\">{</span>distribution<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>build tag<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>python tag<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>abi tag<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>platform tag<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>whl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>distribution</strong>：包名</li>\n<li><strong>version</strong>：包版本</li>\n<li><strong>build tag</strong>（可选）：构建号</li>\n<li><strong>python tag</strong>：支持的 Python 解释器及版本</li>\n<li><strong>abi tag</strong>：二进制兼容的 ABI（应用二进制接口）</li>\n<li><strong>platform tag</strong>：目标操作系统和硬件平台</li>\n</ul>\n<p>例子：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">mypkg-1.2.3-1-cp39-cp39-manylinux2014_x86_64.whl\n       │    │   │    │            └──── platform tag\n       │    │   │    └──────────────── abi tag\n       │    │   └─────────────────────── python tag\n       │    └─────────────────────────── build tag\n       └─────────────────────────────── distribution-version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"2-build-tag\"><a href=\"#2-build-tag\" class=\"headerlink\" title=\"2. build tag\"></a>2. build tag</h2><ul>\n<li>格式：一个整数，有时候也会带字母或其他标识</li>\n<li>用途：同一版本的多次编译时区分，比如针对不同源或依赖变动的二进制重构</li>\n<li>示例：<ul>\n<li><code>mypkg-1.0-1-...</code> 与 <code>mypkg-1.0-2-...</code> 表示同一版本的第 1 次和第 2 次构建</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-python-tag\"><a href=\"#3-python-tag\" class=\"headerlink\" title=\"3. python tag\"></a>3. python tag</h2><p>指明哪些 Python 解释器及版本可以安装该 Wheel。常见格式及含义：</p>\n<table>\n<thead>\n<tr>\n<th>tag 示例</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>py3</code></td>\n<td>支持所有 Python 3.x</td>\n</tr>\n<tr>\n<td><code>py36</code> 、<code>py37</code>…</td>\n<td>专用于 Python 3.6、3.7 等</td>\n</tr>\n<tr>\n<td><code>py2.py3</code></td>\n<td>同时支持 Python 2.x 和 3.x</td>\n</tr>\n<tr>\n<td><code>cp39</code></td>\n<td>CPython 3.9</td>\n</tr>\n<tr>\n<td><code>cp310</code></td>\n<td>CPython 3.10</td>\n</tr>\n<tr>\n<td><code>pp37</code></td>\n<td>PyPy 3.7</td>\n</tr>\n<tr>\n<td><code>jy37</code></td>\n<td>Jython 2.7（标识为 <code>jy27</code>）等</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>前缀</strong><ul>\n<li><code>py</code>：纯 Python 实现</li>\n<li><code>cp</code>：CPython（二进制扩展）</li>\n<li><code>pp</code>：PyPy</li>\n<li><code>jy</code>：Jython</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-abi-tag\"><a href=\"#4-abi-tag\" class=\"headerlink\" title=\"4. abi tag\"></a>4. abi tag</h2><p>ABI（Application Binary Interface）决定了编译的 C 扩展与解释器的二进制兼容性。常见 ABI tag：</p>\n<table>\n<thead>\n<tr>\n<th>tag 示例</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>none</code></td>\n<td>纯 Python 包，不含 C 扩展</td>\n</tr>\n<tr>\n<td><code>abi3</code></td>\n<td>使用了稳定的“limited API”（PEP 384），跨多个 CPython 版本兼容</td>\n</tr>\n<tr>\n<td><code>cp39</code></td>\n<td>针对 CPython 3.9 标准 ABI 编译</td>\n</tr>\n<tr>\n<td><code>cp39m</code></td>\n<td>CPython 3.9 + pymalloc enabled（<code>m</code>）</td>\n</tr>\n<tr>\n<td><code>cp310d</code></td>\n<td>CPython 3.10 Debug build（<code>d</code>）</td>\n</tr>\n</tbody></table>\n<ul>\n<li>如果 <code>python tag</code> 与 <code>abi tag</code> 一致（如 <code>cp39-cp39</code>），表示该包针对该版本的标准 ABI 编译</li>\n<li>带后缀的如 <code>m</code>、<code>d</code>、<code>u</code> 等表示特定的编译选项</li>\n</ul>\n<hr>\n<h2 id=\"5-platform-tag\"><a href=\"#5-platform-tag\" class=\"headerlink\" title=\"5. platform tag\"></a>5. platform tag</h2><p>描述该 Wheel 的目标操作系统、系统版本和 CPU 架构。常见平台 tag 及示例：</p>\n<table>\n<thead>\n<tr>\n<th>platform tag 示例</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>manylinux1_x86_64</code></td>\n<td>Linux x86_64，符合 Manylinux1 标准</td>\n</tr>\n<tr>\n<td><code>manylinux2014_aarch64</code></td>\n<td>Linux ARM64，符合 Manylinux2014 标准</td>\n</tr>\n<tr>\n<td><code>win_amd64</code></td>\n<td>Windows 64 位</td>\n</tr>\n<tr>\n<td><code>win32</code></td>\n<td>Windows 32 位</td>\n</tr>\n<tr>\n<td><code>macosx_10_9_x86_64</code></td>\n<td>macOS 10.9+ on x86_64</td>\n</tr>\n<tr>\n<td><code>macosx_11_0_arm64</code></td>\n<td>macOS 11+ on Apple Silicon (ARM64)</td>\n</tr>\n<tr>\n<td><code>any</code></td>\n<td>平台无关（纯 Python 包）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>manylinux</strong> 系列：用于在大多数 Linux 发行版上安装二进制扩展</li>\n<li><strong>macosx</strong>：通常还会带上最低支持的 macOS 版本号</li>\n<li><strong>any</strong>：完全纯 Python，无平台限制</li>\n</ul>\n<hr>\n<h2 id=\"6-综合示例解析\"><a href=\"#6-综合示例解析\" class=\"headerlink\" title=\"6. 综合示例解析\"></a>6. 综合示例解析</h2><table>\n<thead>\n<tr>\n<th>Wheel 名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>requests-2.28.1-py3-none-any.whl</code></td>\n<td>纯 Python 包 <code>requests</code> v2.28.1，支持所有 Python 3，平台无关</td>\n</tr>\n<tr>\n<td><code>numpy-1.24.0-cp39-cp39-manylinux2014_x86_64.whl</code></td>\n<td><code>numpy</code> v1.24.0，CPython 3.9 标准 ABI，Linux x86_64 二进制</td>\n</tr>\n<tr>\n<td><code>Pillow-9.3.0-cp310-cp310-win_amd64.whl</code></td>\n<td><code>Pillow</code> v9.3.0，CPython 3.10，Windows 64 位</td>\n</tr>\n<tr>\n<td><code>somepkg-0.1.0-2-cp38-abi3-manylinux1_x86_64.whl</code></td>\n<td><code>somepkg</code> v0.1.0，第 2 次构建，CPython 3.8 编译但使用 abi3，Linux x86_64</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"7-为什么要了解这些后缀\"><a href=\"#7-为什么要了解这些后缀\" class=\"headerlink\" title=\"7. 为什么要了解这些后缀\"></a>7. 为什么要了解这些后缀</h2><ol>\n<li><strong>避免安装失败</strong><ul>\n<li><code>pip install package.whl</code> 时，若当前环境的 Python 版本、ABI 或平台与 Wheel 不匹配，安装会被跳过或报错。</li>\n</ul>\n</li>\n<li><strong>提高下载速度</strong><ul>\n<li>选择预编译好的 <code>.whl</code>，可免去源码编译时间，尤其是大型 C 扩展库（如 NumPy、SciPy）。</li>\n</ul>\n</li>\n<li><strong>跨平台兼容</strong><ul>\n<li>理解 <code>manylinux</code>、<code>macosx</code>、<code>win</code> 等标签，有助于在不同系统间无痛部署。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"8-查找可用的-Wheel\"><a href=\"#8-查找可用的-Wheel\" class=\"headerlink\" title=\"8. 查找可用的 Wheel\"></a>8. 查找可用的 Wheel</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip index versions PACKAGE_NAME<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> PACKAGE_NAME --only-binary<span class=\"token operator\">=</span>:all:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>第一个命令列出所有可用版本及对应的 Wheel</li>\n<li>第二个命令强制只使用二进制 Wheel 安装</li>\n</ul>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/04/10/linux-an-zhuang-conda-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/04/10/linux-an-zhuang-conda-jiao-cheng/",
            "title": "Linux安装Conda教程",
            "date_published": "2025-04-10T05:25:00.000Z",
            "content_html": "<h1 id=\"Linux安装Conda教程\"><a href=\"#Linux安装Conda教程\" class=\"headerlink\" title=\"Linux安装Conda教程\"></a>Linux安装Conda教程</h1><h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h2><h3 id=\"1-1-系统要求\"><a href=\"#1-1-系统要求\" class=\"headerlink\" title=\"1.1 系统要求\"></a>1.1 系统要求</h3><ul>\n<li>操作系统：大多数 Linux 发行版（如 Ubuntu、Debian、CentOS、Fedora 等）都可使用。</li>\n<li>权限：建议使用普通用户（避免使用 root 权限直接安装）来安装并管理 conda 环境。</li>\n<li>网络连接：需要下载安装脚本，可以使用 <code>wget</code> 或 <code>curl</code> 工具。</li>\n</ul>\n<h3 id=\"1-2-安装前依赖（可选）\"><a href=\"#1-2-安装前依赖（可选）\" class=\"headerlink\" title=\"1.2 安装前依赖（可选）\"></a>1.2 安装前依赖（可选）</h3><p>大多数 Linux 系统都自带 <code>bash</code> 和基本工具。如果你的系统缺少 wget 或 curl，可以使用包管理器安装，例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Ubuntu / Debian 系统</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">wget</span> <span class=\"token function\">curl</span>\n\n<span class=\"token comment\"># CentOS / Fedora 系统</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token function\">wget</span> <span class=\"token function\">curl</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"2-下载-Miniconda-安装脚本\"><a href=\"#2-下载-Miniconda-安装脚本\" class=\"headerlink\" title=\"2. 下载 Miniconda 安装脚本\"></a>2. 下载 Miniconda 安装脚本</h2><p>Miniconda 提供了适用于 Linux 的安装脚本。可以按以下步骤操作：</p>\n<h3 id=\"2-1-选择合适的安装程序\"><a href=\"#2-1-选择合适的安装程序\" class=\"headerlink\" title=\"2.1 选择合适的安装程序\"></a>2.1 选择合适的安装程序</h3><p>对于大多数 64 位系统，下载最新的 Miniconda3 版本。安装脚本文件名为 <code>Miniconda3-latest-Linux-x86_64.sh</code>。</p>\n<h3 id=\"2-2-使用-wget-或-curl-下载\"><a href=\"#2-2-使用-wget-或-curl-下载\" class=\"headerlink\" title=\"2.2 使用 wget 或 curl 下载\"></a>2.2 使用 wget 或 curl 下载</h3><p>使用 <code>wget</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或使用 <code>curl</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"3-验证安装包完整性（可选）\"><a href=\"#3-验证安装包完整性（可选）\" class=\"headerlink\" title=\"3. 验证安装包完整性（可选）\"></a>3. 验证安装包完整性（可选）</h2><p>为确保下载的文件未被破坏或篡改，可以检查 SHA256 校验和。你需要从 Miniconda 官方页面 查看对应版本的正确 SHA256 值，然后执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sha256sum Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>比较输出结果和官方提供的校验和。如果一致，则可以继续安装。</p>\n<hr>\n<h2 id=\"4-安装-Miniconda\"><a href=\"#4-安装-Miniconda\" class=\"headerlink\" title=\"4. 安装 Miniconda\"></a>4. 安装 Miniconda</h2><h3 id=\"4-1-赋予执行权限\"><a href=\"#4-1-赋予执行权限\" class=\"headerlink\" title=\"4.1 赋予执行权限\"></a>4.1 赋予执行权限</h3><p>首先为下载的脚本添加执行权限：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-2-运行安装脚本\"><a href=\"#4-2-运行安装脚本\" class=\"headerlink\" title=\"4.2 运行安装脚本\"></a>4.2 运行安装脚本</h3><p>使用 bash 执行安装脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-3-安装过程中注意事项\"><a href=\"#4-3-安装过程中注意事项\" class=\"headerlink\" title=\"4.3 安装过程中注意事项\"></a>4.3 安装过程中注意事项</h3><ol>\n<li><strong>阅读许可协议</strong>：安装脚本开始时会显示许可协议，需要按下 <code>Enter</code> 浏览内容，然后输入 <code>yes</code> 接受许可协议。</li>\n<li><strong>选择安装路径</strong>：脚本默认建议安装到用户主目录下的 <code>miniconda3</code> 目录。你可以按回车键接受默认设置，也可以输入自定义路径。</li>\n<li><strong>初始化 conda</strong>：安装过程中会询问是否初始化 conda（即修改 shell 启动文件，如 <code>~/.bashrc</code>）。推荐选择 “yes”，这样每次登录时都会自动加载 conda 环境配置。</li>\n</ol>\n<p>安装完成后，安装脚本会显示 “installation finished.” 的提示。</p>\n<hr>\n<h2 id=\"5-激活-conda-环境\"><a href=\"#5-激活-conda-环境\" class=\"headerlink\" title=\"5. 激活 conda 环境\"></a>5. 激活 conda 环境</h2><p>如果安装时选择了初始化，则会自动在 <code>~/.bashrc</code> 中添加必要的配置，通常类似如下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span>\n<span class=\"token comment\"># !! Contents within this block are managed by 'conda init' !!</span>\n<span class=\"token assign-left variable\">__conda_setup</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>'/home/your_username/miniconda3/bin/conda<span class=\"token string\">' '</span>shell.bash<span class=\"token string\">' '</span>hook' <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> /dev/null<span class=\"token variable\">)</span></span>\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\">$__conda_setup</span>\"</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> <span class=\"token string\">\"/home/your_username/miniconda3/etc/profile.d/conda.sh\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        <span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"/home/your_username/miniconda3/etc/profile.d/conda.sh\"</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"/home/your_username/miniconda3/bin:<span class=\"token environment constant\">$PATH</span>\"</span>\n    <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token builtin class-name\">unset</span> __conda_setup\n<span class=\"token comment\"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你没有选择自动初始化，可以手动执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/miniconda3/etc/profile.d/conda.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者直接将 conda 的路径添加到你的 PATH 环境变量中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=~</span>/miniconda3/bin:<span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>建议将上述命令添加到 <code>~/.bashrc</code> 或其他相应的 shell 配置文件中。</p>\n<hr>\n<h2 id=\"6-验证安装\"><a href=\"#6-验证安装\" class=\"headerlink\" title=\"6. 验证安装\"></a>6. 验证安装</h2><p>打开一个新的终端或在当前终端执行激活命令后，运行以下命令检查 conda 是否安装成功：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda <span class=\"token parameter variable\">--version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>正常情况下，会输出类似 <code>conda 4.x.x</code> 版本信息。</p>\n<hr>\n<h2 id=\"7-基本使用\"><a href=\"#7-基本使用\" class=\"headerlink\" title=\"7. 基本使用\"></a>7. 基本使用</h2><h3 id=\"7-1-创建虚拟环境\"><a href=\"#7-1-创建虚拟环境\" class=\"headerlink\" title=\"7.1 创建虚拟环境\"></a>7.1 创建虚拟环境</h3><p>例如，创建一个名为 <code>myenv</code> 的环境，并安装 Python 3.9：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> myenv <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-2-激活虚拟环境\"><a href=\"#7-2-激活虚拟环境\" class=\"headerlink\" title=\"7.2 激活虚拟环境\"></a>7.2 激活虚拟环境</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate myenv<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>激活后，命令提示符中会显示环境名称。</p>\n<h3 id=\"7-3-安装其他包\"><a href=\"#7-3-安装其他包\" class=\"headerlink\" title=\"7.3 安装其他包\"></a>7.3 安装其他包</h3><p>可以直接使用 conda 安装需要的包，例如安装 numpy：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda <span class=\"token function\">install</span> numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此外，也可以使用 pip 安装不在 conda 仓库里的包，但推荐先查找 conda 仓库，因为 conda 可能已经进行了优化和依赖管理。</p>\n<h3 id=\"7-4-更新-conda\"><a href=\"#7-4-更新-conda\" class=\"headerlink\" title=\"7.4 更新 conda\"></a>7.4 更新 conda</h3><p>建议定期更新 conda 以确保使用最新的功能和安全补丁：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda update conda<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"8-常见问题排查\"><a href=\"#8-常见问题排查\" class=\"headerlink\" title=\"8. 常见问题排查\"></a>8. 常见问题排查</h2><h3 id=\"8-1-conda-命令未找到\"><a href=\"#8-1-conda-命令未找到\" class=\"headerlink\" title=\"8.1 conda 命令未找到\"></a>8.1 conda 命令未找到</h3><ul>\n<li><p>请确保你的 <code>~/.bashrc</code> 文件已正确载入，可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>检查是否正确添加了 conda 的安装路径至 PATH 环境变量中。</p>\n</li>\n</ul>\n<h3 id=\"8-2-安装或更新失败\"><a href=\"#8-2-安装或更新失败\" class=\"headerlink\" title=\"8.2 安装或更新失败\"></a>8.2 安装或更新失败</h3><ul>\n<li>检查网络连接或国内用户是否需要配置代理或使用镜像源（例如清华、阿里等提供的 conda 镜像）。</li>\n<li>参考官方文档（conda 官方文档）获取更多帮助和说明。</li>\n</ul>\n<hr>\n<h2 id=\"9-参考资料\"><a href=\"#9-参考资料\" class=\"headerlink\" title=\"9. 参考资料\"></a>9. 参考资料</h2><ul>\n<li></li>\n<li></li>\n</ul>\n",
            "tags": [
                "conda"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/",
            "title": "安装WSL子系统教程",
            "date_published": "2025-04-10T04:25:00.000Z",
            "content_html": "<h1 id=\"安装WSL子系统教程\"><a href=\"#安装WSL子系统教程\" class=\"headerlink\" title=\"安装WSL子系统教程\"></a>安装WSL子系统教程</h1><hr>\n<h2 id=\"1-前提条件与准备工作\"><a href=\"#1-前提条件与准备工作\" class=\"headerlink\" title=\"1. 前提条件与准备工作\"></a>1. 前提条件与准备工作</h2><ul>\n<li><strong>操作系统要求</strong>：<ul>\n<li>Windows 10：要求版本 2004 及 Build 19041 以上，或</li>\n<li>Windows 11</li>\n</ul>\n</li>\n<li><strong>网络环境</strong>：部分地区需要设置代理。</li>\n<li><strong>管理员权限</strong>：安装及部分配置需要以管理员身份运行 PowerShell 或 CMD。</li>\n<li><strong>存储空间及磁盘规划</strong>：WSL 会在系统盘或你指定的目录中保存 Linux 文件系统，提前规划好存储位置与空间。</li>\n</ul>\n<hr>\n<h2 id=\"2-WSL-安装方法\"><a href=\"#2-WSL-安装方法\" class=\"headerlink\" title=\"2. WSL 安装方法\"></a>2. WSL 安装方法</h2><h3 id=\"2-1-一键安装（推荐）\"><a href=\"#2-1-一键安装（推荐）\" class=\"headerlink\" title=\"2.1 一键安装（推荐）\"></a>2.1 一键安装（推荐）</h3><p>适用于 Windows 10 21H2 及之后版本以及 Windows 11。步骤如下：</p>\n<ol>\n<li><p><strong>打开 PowerShell（管理员模式）</strong>：<br> 在开始菜单搜索 “PowerShell”，右键选择“以管理员身份运行”。</p>\n</li>\n<li><p><strong>执行安装命令</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令会自动启用 WSL 相关组件、虚拟机平台，并默认安装最新的 WSL 版本（通常为 WSL2）和默认 Linux 发行版（一般为 Ubuntu）。</p>\n</li>\n<li><p><strong>重启电脑</strong>：安装完成后系统会提示重启以完成配置。</p>\n</li>\n</ol>\n<h3 id=\"2-2-手动安装\"><a href=\"#2-2-手动安装\" class=\"headerlink\" title=\"2.2 手动安装\"></a>2.2 手动安装</h3><p>对于需要更多自定义选项的用户，手动安装步骤如下：</p>\n<h4 id=\"（1）启用-WSL-和虚拟机平台功能\"><a href=\"#（1）启用-WSL-和虚拟机平台功能\" class=\"headerlink\" title=\"（1）启用 WSL 和虚拟机平台功能\"></a>（1）启用 WSL 和虚拟机平台功能</h4><p>在管理员模式下打开 PowerShell，依次执行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">dism<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">/</span>online <span class=\"token operator\">/</span><span class=\"token function\">enable-feature</span> <span class=\"token operator\">/</span>featurename:Microsoft-Windows-Subsystem-Linux <span class=\"token operator\">/</span>all <span class=\"token operator\">/</span>norestart\ndism<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">/</span>online <span class=\"token operator\">/</span><span class=\"token function\">enable-feature</span> <span class=\"token operator\">/</span>featurename:VirtualMachinePlatform <span class=\"token operator\">/</span>all <span class=\"token operator\">/</span>norestart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>执行后重启计算机。</p>\n<h4 id=\"（2）安装-WSL2-内核更新包\"><a href=\"#（2）安装-WSL2-内核更新包\" class=\"headerlink\" title=\"（2）安装 WSL2 内核更新包\"></a>（2）安装 WSL2 内核更新包</h4><p>前往 WSL2 内核更新包下载链接 ，下载并运行安装包，更新 Linux 内核。</p>\n<h4 id=\"（3）设置默认-WSL-版本为-WSL2\"><a href=\"#（3）设置默认-WSL-版本为-WSL2\" class=\"headerlink\" title=\"（3）设置默认 WSL 版本为 WSL2\"></a>（3）设置默认 WSL 版本为 WSL2</h4><p>再次打开 PowerShell（无需管理员模式也可），执行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-default</span><span class=\"token operator\">-</span>version 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"（4）安装-Linux-发行版\"><a href=\"#（4）安装-Linux-发行版\" class=\"headerlink\" title=\"（4）安装 Linux 发行版\"></a>（4）安装 Linux 发行版</h4><p>有两种方式：</p>\n<ul>\n<li><p><strong>通过 Microsoft Store</strong>：搜索 <code>Ubuntu</code>、<code>Debian</code> 等，选择版本（如 Ubuntu 22.04 LTS），点击“获取”安装，推荐这个，然后再执行命令行安装。</p>\n</li>\n<li><p><strong>命令行安装</strong>：查看支持的在线发行版列表：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>list <span class=\"token operator\">--</span>online<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装指定版本（例如 Ubuntu 20.04）：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>install <span class=\"token operator\">-</span>d Ubuntu-20<span class=\"token punctuation\">.</span>04<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"3-Linux-发行版安装及首次使用\"><a href=\"#3-Linux-发行版安装及首次使用\" class=\"headerlink\" title=\"3. Linux 发行版安装及首次使用\"></a>3. Linux 发行版安装及首次使用</h2><ol>\n<li><p><strong>首次启动</strong>：安装完成后，从“开始菜单”启动对应 Linux 发行版。</p>\n</li>\n<li><p><strong>创建用户</strong>：系统会提示你为 Linux 系统创建用户名（须为小写）和密码，这样你就可以使用 <code>sudo</code> 提权操作。</p>\n</li>\n<li><p><strong>更新系统</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装常用软件</strong>：根据需要安装 <code>git</code>、<code>vim</code>、<code>python3</code> 等：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span> <span class=\"token function\">vim</span> python3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"4-WSL-版本切换：WSL1-与-WSL2\"><a href=\"#4-WSL-版本切换：WSL1-与-WSL2\" class=\"headerlink\" title=\"4. WSL 版本切换：WSL1 与 WSL2\"></a>4. WSL 版本切换：WSL1 与 WSL2</h2><p>WSL 中各发行版可以独立设置为 WSL1 或 WSL2。查看所有已安装发行版及其版本：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>l <span class=\"token operator\">-</span>v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-pgsql\" data-language=\"pgsql\"><code class=\"language-pgsql\"> NAME            STATE           VERSION\n* Ubuntu-22.04    Running         2\n  Ubuntu-20.04    Stopped         2\n  Debian          Stopped         1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h3><ul>\n<li><p><strong>将发行版切换为 WSL2</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> &lt;发行版名称&gt; 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> Debian 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>将发行版切换为 WSL1</strong>（如有需求）：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> &lt;发行版名称&gt; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>设置默认安装版本</strong>：在安装新发行版时，可以用下面命令设置默认版本：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-default</span><span class=\"token operator\">-</span>version 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p>切换版本过程中，转换时间与系统数据量有关，部分较大发行版可能需要几分钟。</p>\n<hr>\n<h2 id=\"5-附加功能与进阶用法\"><a href=\"#5-附加功能与进阶用法\" class=\"headerlink\" title=\"5. 附加功能与进阶用法\"></a>5. 附加功能与进阶用法</h2><h3 id=\"5-1-Windows-与-WSL-文件共享\"><a href=\"#5-1-Windows-与-WSL-文件共享\" class=\"headerlink\" title=\"5.1 Windows 与 WSL 文件共享\"></a>5.1 Windows 与 WSL 文件共享</h3><ul>\n<li><p><strong>WSL 文件系统访问</strong>：<br> 在 WSL 中可通过 <code>/mnt/c/</code> 等路径访问 Windows 磁盘。例如访问 <code>C:\\Users\\YourName</code>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">cd <span class=\"token operator\">/</span>mnt/c/Users/YourName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>在 Windows 中访问 WSL 文件</strong>：<br> 可使用 File Explorer 直接访问：在地址栏输入 <code>\\\\wsl$</code>，会显示所有已安装的 WSL 发行版及其文件系统。</p>\n</li>\n<li><p><strong>同步代码与项目文件</strong>：<br> 可以将项目文件放在 Windows 共享目录中，再在 WSL 中编辑、执行，这样两个系统间文件同步简单且快速。</p>\n</li>\n</ul>\n<h3 id=\"5-2-WSL-GUI-应用（WSLg）\"><a href=\"#5-2-WSL-GUI-应用（WSLg）\" class=\"headerlink\" title=\"5.2 WSL GUI 应用（WSLg）\"></a>5.2 WSL GUI 应用（WSLg）</h3><p>在最新版本的 Windows 10 和 Windows 11 上，WSL 支持 Linux 图形界面应用（WSLg）。配置方法如下：</p>\n<ol>\n<li><p><strong>确保 WSL 更新至最新版本</strong>：执行</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>启动 GUI 应用</strong>（如 Firefox）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> firefox\nfirefox <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>WSLg 会自动启动并显示 Linux GUI 应用，无需额外配置 X 服务器。</p>\n<h3 id=\"5-3-代理设置\"><a href=\"#5-3-代理设置\" class=\"headerlink\" title=\"5.3 代理设置\"></a>5.3 代理设置</h3><p>如果你处于网络环境受限或想加快下载速度，可以设置代理。</p>\n<h4 id=\"（1）设置-Windows-系统代理\"><a href=\"#（1）设置-Windows-系统代理\" class=\"headerlink\" title=\"（1）设置 Windows 系统代理\"></a>（1）设置 Windows 系统代理</h4><p>如果使用科学上网工具（如 Clash、V2Ray、VPN），确保系统代理已启用。可在 Windows 设置 → 网络和 Internet → 代理中配置，也可以通过命令设置环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setx http_proxy http://127.0.0.1:7890 /m\nsetx https_proxy http://127.0.0.1:7890 /m<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"（2）在-WSL-中设置代理\"><a href=\"#（2）在-WSL-中设置代理\" class=\"headerlink\" title=\"（2）在 WSL 中设置代理\"></a>（2）在 WSL 中设置代理</h4><p>在 WSL 中使用环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:7890\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:7890\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>若需要全局生效，在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 文件末尾加入以上配置，并执行 <code>source ~/.bashrc</code> 使其生效。</p>\n<h4 id=\"（3）apt-专用代理配置\"><a href=\"#（3）apt-专用代理配置\" class=\"headerlink\" title=\"（3）apt 专用代理配置\"></a>（3）apt 专用代理配置</h4><p>创建或编辑 apt 配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/apt/apt.conf.d/proxy.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加内容：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Acquire<span class=\"token double-colon punctuation\">::</span>http<span class=\"token double-colon punctuation\">::</span>Proxy <span class=\"token string\">\"http://127.0.0.1:7890\"</span><span class=\"token punctuation\">;</span>\nAcquire<span class=\"token double-colon punctuation\">::</span>https<span class=\"token double-colon punctuation\">::</span>Proxy <span class=\"token string\">\"http://127.0.0.1:7890\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>保存后，<code>sudo apt update</code> 将走代理。</p>\n<h3 id=\"5-4-多实例安装（同一版本多个副本）\"><a href=\"#5-4-多实例安装（同一版本多个副本）\" class=\"headerlink\" title=\"5.4 多实例安装（同一版本多个副本）\"></a>5.4 多实例安装（同一版本多个副本）</h3><p>WSL 允许你导入同一 Linux 发行版的多个副本，便于隔离不同任务。操作步骤如下：</p>\n<ol>\n<li><p><strong>导出已有实例</strong><br> 假设已安装 <code>Ubuntu-20.04</code>，用以下命令导出为 <code>.tar</code> 文件：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>export Ubuntu-20<span class=\"token punctuation\">.</span>04 D:\\wsl-backups\\ubuntu-20<span class=\"token punctuation\">.</span>04<span class=\"token punctuation\">.</span>tar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>导入为新实例</strong><br> 用新名称（例如 <code>Ubuntu-Dev</code>）创建副本：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>import Ubuntu-Dev D:\\WSL\\Ubuntu-Dev D:\\wsl-backups\\ubuntu-20<span class=\"token punctuation\">.</span>04<span class=\"token punctuation\">.</span>tar <span class=\"token operator\">--</span>version 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>启动新实例</strong><br> 使用下面命令启动新导入的实例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>d Ubuntu-Dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<p>这样你就可以在同一台机器上同时运行多个独立的 Linux 环境。</p>\n<hr>\n<h2 id=\"6-常用命令与管理技巧\"><a href=\"#6-常用命令与管理技巧\" class=\"headerlink\" title=\"6. 常用命令与管理技巧\"></a>6. 常用命令与管理技巧</h2><ul>\n<li><p><strong>查看已安装发行版及版本</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>l <span class=\"token operator\">-</span>v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>启动指定发行版</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>d &lt;发行版名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>设置默认发行版（直接运行 wsl 时启动的系统）</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>setdefault &lt;发行版名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>切换 WSL 版本</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> &lt;发行版名称&gt; <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">|</span>2<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>更新 WSL 内核</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>关闭所有运行中的 WSL 实例</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>shutdown<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>卸载某个发行版</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>unregister &lt;发行版名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/04/08/pycharm-bao-cun-xu-ke-zheng-shu-ju-shi-chu-cuo/",
            "url": "https://0xdadream.github.io/2025/04/08/pycharm-bao-cun-xu-ke-zheng-shu-ju-shi-chu-cuo/",
            "title": "pycharm保存许可证数据时出错",
            "date_published": "2025-04-08T04:25:00.000Z",
            "content_html": "<h1 id=\"pycharm保存许可证数据时出错\"><a href=\"#pycharm保存许可证数据时出错\" class=\"headerlink\" title=\"pycharm保存许可证数据时出错\"></a>pycharm保存许可证数据时出错</h1><p>报错</p>\n<p> C:\\Users\\xxx\\AppData\\Roaming\\JetBrains\\PyCharm2024.2\\pycharm.key (拒绝访问)</p>\n<p>去这个目录下把这个文件改成<code>pycharm.key.bak</code>做一个备份，然后新建一个文件空<code>pycharm.key</code>，不创建好像也能自己创建，我没试过</p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/04/07/google-nei-rong-zai-xin-biao-qian-ye-da-kai/",
            "url": "https://0xdadream.github.io/2025/04/07/google-nei-rong-zai-xin-biao-qian-ye-da-kai/",
            "title": "Google内容在新标签页打开",
            "date_published": "2025-04-07T04:25:00.000Z",
            "content_html": "<h1 id=\"Google内容在新标签页打开\"><a href=\"#Google内容在新标签页打开\" class=\"headerlink\" title=\"Google内容在新标签页打开\"></a>Google内容在新标签页打开</h1><p>进入<code>google.com</code>，右下角找到设置，搜索设置，找到在新的浏览器窗口中打开所选的每条搜索结果勾选</p>\n",
            "tags": [
                "tips"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/04/05/clash-verge-jie-dian-quan-bu-chao-shi/",
            "url": "https://0xdadream.github.io/2025/04/05/clash-verge-jie-dian-quan-bu-chao-shi/",
            "title": "clash_verge节点全部超时",
            "date_published": "2025-04-05T04:25:00.000Z",
            "content_html": "<h1 id=\"clash-verge节点全部超时\"><a href=\"#clash-verge节点全部超时\" class=\"headerlink\" title=\"clash_verge节点全部超时\"></a>clash_verge节点全部超时</h1><p>clash_verge正常使用需要确保本地计算机系统时间与服务器上是一致，如果存在一定时差会导致全部服务器连接超时，一般都是标准北京时间可以到系统的 “日期和时间” 设置中同步一下标准时间。</p>\n<p>或者</p>\n<p>关闭DNS，到设置-&gt;DNS覆写-&gt;关闭DNS</p>\n",
            "tags": [
                "wall"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/04/03/jie-jue-bao-cuo-jinja2.exceptions.templatenotfound-index.html/",
            "url": "https://0xdadream.github.io/2025/04/03/jie-jue-bao-cuo-jinja2.exceptions.templatenotfound-index.html/",
            "title": "解决报错jinja2.exceptions.TemplateNotFound_index.html",
            "date_published": "2025-04-03T04:25:00.000Z",
            "content_html": "<h1 id=\"解决报错jinja2-exceptions-TemplateNotFound-index-html\"><a href=\"#解决报错jinja2-exceptions-TemplateNotFound-index-html\" class=\"headerlink\" title=\"解决报错jinja2.exceptions.TemplateNotFound_index.html\"></a>解决报错jinja2.exceptions.TemplateNotFound_index.html</h1><p>templates文件夹需要和xxx.py需要再一级文件夹</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/03/24/bian-yi-shi-bao-cuo-rootminiconda3compiler-compatld/",
            "url": "https://0xdadream.github.io/2025/03/24/bian-yi-shi-bao-cuo-rootminiconda3compiler-compatld/",
            "title": "编译时报错rootminiconda3compiler_compatld",
            "date_published": "2025-03-24T04:25:00.000Z",
            "content_html": "<h1 id=\"编译时报错rootminiconda3compiler-compatld\"><a href=\"#编译时报错rootminiconda3compiler-compatld\" class=\"headerlink\" title=\"编译时报错rootminiconda3compiler_compatld\"></a>编译时报错rootminiconda3compiler_compatld</h1><h2 id=\"报错描述\"><a href=\"#报错描述\" class=\"headerlink\" title=\"报错描述\"></a>报错描述</h2><p>在执行make安装编译时报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/root/miniconda3/compiler_compat/ld: cannot <span class=\"token function\">find</span> -lpbc: No such <span class=\"token function\">file</span> or directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>这个是由于conda环境自带有编译库，你安装的库可能没有</p>\n<h4 id=\"方法-1：退出-Conda-环境\"><a href=\"#方法-1：退出-Conda-环境\" class=\"headerlink\" title=\"方法 1：退出 Conda 环境\"></a><strong>方法 1：退出 Conda 环境</strong></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda deactivate  <span class=\"token comment\"># 确保编译时不在 Conda 环境中</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>退出 Conda 环境后，编译工具链会直接使用系统的 <code>ld</code> 和库路径。</p>\n<h4 id=\"方法-2：手动指定链接器路径\"><a href=\"#方法-2：手动指定链接器路径\" class=\"headerlink\" title=\"方法 2：手动指定链接器路径\"></a><strong>方法 2：手动指定链接器路径</strong></h4><p>在编译命令中强制使用系统链接器（覆盖 Conda 的默认设置）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 示例：在编译时指定系统 ld</span>\ngcc <span class=\"token punctuation\">..</span>. -B/usr/bin <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>或直接调用系统链接器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/usr/bin/ld <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"方法-3：临时移除-Conda-的干扰\"><a href=\"#方法-3：临时移除-Conda-的干扰\" class=\"headerlink\" title=\"方法 3：临时移除 Conda 的干扰\"></a><strong>方法 3：临时移除 Conda 的干扰</strong></h4><p>重命名或删除 <code>compiler_compat</code> 目录（需谨慎操作）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> /root/miniconda3/compiler_compat /root/miniconda3/compiler_compat.bak<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>操作后重新编译，但可能影响 Conda 环境内其他包的编译行为。</p>\n<hr>\n<h3 id=\"验证当前使用的-ld\"><a href=\"#验证当前使用的-ld\" class=\"headerlink\" title=\"验证当前使用的 ld\"></a><strong>验证当前使用的 <code>ld</code></strong></h3><p>检查编译时实际调用的 <code>ld</code> 路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看编译过程中使用的 ld 路径</span>\ngcc <span class=\"token parameter variable\">-v</span> <span class=\"token punctuation\">..</span>. <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> COLLECT_LTO_WRAPPER<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/",
            "title": "文件链接全教程",
            "date_published": "2025-03-12T04:25:00.000Z",
            "content_html": "<h1 id=\"文件链接全教程\"><a href=\"#文件链接全教程\" class=\"headerlink\" title=\"文件链接全教程\"></a>文件链接全教程</h1><h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><h3 id=\"1-链接基础概念\"><a href=\"#1-链接基础概念\" class=\"headerlink\" title=\"1. 链接基础概念\"></a>1. 链接基础概念</h3><p>在 Windows 中，“链接”实际上有几种形式，主要包括以下几类：</p>\n<ul>\n<li>符号链接（Symbolic Link，软链接）<ul>\n<li><strong>概念：</strong> 符号链接是一个特殊文件，其中保存了目标文件或目录的路径。它类似于 Linux 中的软链接，并且看起来和普通文件或文件夹没有区别。</li>\n<li>特点：<ul>\n<li>可用于文件和目录</li>\n<li>可以跨分区甚至跨网络路径（UNC）</li>\n<li>如果目标被删除或移动，符号链接会失效</li>\n<li>从 Windows Vista 开始支持，最新 Windows（如 Windows 10/11）中在开发人员模式下可不需要管理员权限创建</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>硬链接（Hard Link）<ul>\n<li><strong>概念：</strong> 硬链接是指向同一数据实体（数据块或 NTFS 中的文件记录）的另一个目录项。每个硬链接都与目标文件共享同一份数据。</li>\n<li>特点：<ul>\n<li>仅适用于文件，不能用于目录</li>\n<li>必须在同一 NTFS 卷内（不能跨分区）</li>\n<li>删除其中一个链接不会影响其它链接或数据本身，只有当所有硬链接都删除后数据才会释放</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>目录联接（Junction Point）<ul>\n<li><strong>概念：</strong> 目录联接也称为“联接”，用于将一个目录指向另一个目录。在早期版本中常用来兼容旧版 Windows。</li>\n<li>特点：<ul>\n<li>只适用于目录</li>\n<li>创建时会自动转换为绝对路径</li>\n<li>适用于同一台计算机，支持跨盘符（但不支持网络路径）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-创建链接的方法\"><a href=\"#2-创建链接的方法\" class=\"headerlink\" title=\"2. 创建链接的方法\"></a>2. 创建链接的方法</h3><p>在 Windows 中创建链接主要有两种方式：通过 CMD 命令行（使用 <code>mklink</code> 命令）和通过 PowerShell（使用 <code>New-Item</code> 命令）。</p>\n<h4 id=\"2-1-使用-CMD-命令创建链接\"><a href=\"#2-1-使用-CMD-命令创建链接\" class=\"headerlink\" title=\"2.1 使用 CMD 命令创建链接\"></a>2.1 使用 CMD 命令创建链接</h4><p><strong>命令语法：</strong></p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink [[/D] | [/H] | [/J]] Link Target<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>默认（无参数）</strong>：创建文件的符号链接</li>\n<li><strong>/D</strong>：创建目录的符号链接</li>\n<li><strong>/H</strong>：创建硬链接（仅用于文件）</li>\n<li><strong>/J</strong>：创建目录联接（Junction，适用于目录）</li>\n</ul>\n<p><strong>示例：</strong></p>\n<ol>\n<li><p><strong>创建文件的符号链接</strong><br> 假设有一个文件 <code>C:\\Data\\original.txt</code>，我们在同目录下创建一个名为 <code>link.txt</code> 的符号链接：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink C:\\Data\\link.txt C:\\Data\\original.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时，<code>link.txt</code> 实际上保存了 <code>original.txt</code> 的路径，当你打开 <code>link.txt</code> 时，系统会自动访问 <code>original.txt</code>。</p>\n</li>\n<li><p><strong>创建目录的符号链接</strong><br> 假设有一个目录 <code>C:\\Data\\SourceFolder</code>，希望在 <code>C:\\Data</code> 下创建一个符号链接目录 <code>LinkFolder</code>：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /D C:\\Data\\LinkFolder C:\\Data\\SourceFolder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样，在资源管理器中打开 <code>LinkFolder</code> 就等同于打开 <code>SourceFolder</code>。</p>\n</li>\n<li><p><strong>创建文件的硬链接</strong><br> 依然以文件 <code>C:\\Data\\original.txt</code> 为例，创建一个硬链接 <code>hardlink.txt</code>：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /H C:\\Data\\hardlink.txt C:\\Data\\original.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>硬链接与原文件共享同一数据块，因此修改任一文件都会同步改变内容，但请注意：</p>\n<ul>\n<li>硬链接只能用于文件</li>\n<li>必须在同一卷内</li>\n</ul>\n</li>\n<li><p><strong>创建目录联接（Junction）</strong><br> 使用 /J 参数来创建目录联接，适用于目录，但和符号链接不同的是，Junction 通常保存绝对路径：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /J C:\\Data\\JunctionFolder C:\\Data\\SourceFolder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用 Junction 时，删除链接不会删除目标目录中的数据。</p>\n</li>\n</ol>\n<p><em>注意：</em></p>\n<ul>\n<li>创建符号链接和某些操作可能需要以<strong>管理员身份</strong>运行 CMD。</li>\n<li>Windows 10 及以后版本如果开启“开发人员模式”，可以允许普通用户创建符号链接。</li>\n</ul>\n<hr>\n<h4 id=\"2-2-使用-PowerShell-创建链接\"><a href=\"#2-2-使用-PowerShell-创建链接\" class=\"headerlink\" title=\"2.2 使用 PowerShell 创建链接\"></a>2.2 使用 PowerShell 创建链接</h4><p>PowerShell 提供了更现代的 <code>New-Item</code> 命令来创建不同类型的链接。</p>\n<p><strong>语法及示例：</strong></p>\n<ol>\n<li><p><strong>创建文件或目录的符号链接：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType SymbolicLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\Link.txt\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\original.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者创建目录符号链接：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType SymbolicLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\LinkFolder\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\SourceFolder\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>PowerShell 中的 <code>SymbolicLink</code> 同样创建的是软链接，和 CMD 中 <code>mklink</code> 默认行为一致。</p>\n</li>\n<li><p><strong>创建文件的硬链接：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType HardLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\hardlink.txt\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\original.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会为 <code>original.txt</code> 创建一个硬链接，注意硬链接只能用于文件，且必须在同一卷内。</p>\n</li>\n<li><p><strong>创建目录联接（Junction）：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType Junction <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\JunctionFolder\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\SourceFolder\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令会创建一个指向目录的联接，与符号链接在某些场景下效果类似，但内部处理略有差异。</p>\n</li>\n</ol>\n<p><em>提示：</em></p>\n<ul>\n<li>PowerShell 命令执行时也可能需要管理员权限，具体取决于目标路径所在的位置（例如系统文件夹或 Program Files）。</li>\n<li>在使用相对路径创建符号链接时，系统会将其转换为绝对路径存储在 NTFS 中。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用场景与注意事项\"><a href=\"#3-使用场景与注意事项\" class=\"headerlink\" title=\"3. 使用场景与注意事项\"></a>3. 使用场景与注意事项</h3><h4 id=\"3-1-常见使用场景\"><a href=\"#3-1-常见使用场景\" class=\"headerlink\" title=\"3.1 常见使用场景\"></a>3.1 常见使用场景</h4><ul>\n<li><p><strong>数据备份和增量备份</strong><br> 利用硬链接可以在不占用额外磁盘空间的情况下创建多个访问入口。例如，备份软件（如 Windows 版的“时间机器”）就会使用硬链接来实现增量备份。</p>\n</li>\n<li><p><strong>移动或重定向系统目录</strong><br> 为了节省系统盘空间或实现重装系统不丢失用户数据，可以将如 <code>C:\\Users</code> 目录复制到其他分区，然后使用 Junction 将原位置重定向到新位置：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">robocopy \"C:\\Users\" \"D:\\Users\" /E /COPYALL /XJ\nrmdir \"C:\\Users\" /S /Q\nmklink /J \"C:\\Users\" \"D:\\Users\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>开发环境下共享资源</strong><br> 当多个项目需要使用同一份库或模型文件时，可以通过符号链接或硬链接共享文件，避免重复存储。</p>\n</li>\n</ul>\n<h4 id=\"3-2-注意事项\"><a href=\"#3-2-注意事项\" class=\"headerlink\" title=\"3.2 注意事项\"></a>3.2 注意事项</h4><ul>\n<li><p><strong>权限问题</strong></p>\n<ul>\n<li>在 Windows 中，创建符号链接通常需要管理员权限；不过在 Windows 10 开发人员模式下可允许普通用户创建符号链接。</li>\n<li>硬链接不需要额外的权限，但目标文件必须在同一 NTFS 卷内。</li>\n</ul>\n</li>\n<li><p><strong>目标失效风险</strong></p>\n<ul>\n<li>符号链接依赖于目标路径。如果目标移动或删除，符号链接会成为“悬挂链接”（无效链接）。</li>\n<li>硬链接与目标数据直接关联，即使原始文件名被删除，只要至少还有一个硬链接存在，数据依然可用。</li>\n</ul>\n</li>\n<li><p><strong>跨分区限制</strong></p>\n<ul>\n<li>硬链接只能在同一卷内使用，而符号链接和 Junction 则可以跨卷（但符号链接可以支持网络路径，而 Junction 则不行）。</li>\n</ul>\n</li>\n<li><p><strong>命令使用环境</strong></p>\n<ul>\n<li>使用 <code>mklink</code> 命令时建议打开<strong>管理员命令提示符</strong>。</li>\n<li>使用 PowerShell 时，若涉及系统目录或受保护区域，建议以管理员身份运行 PowerShell。</li>\n</ul>\n</li>\n<li><p>查看链接和删除</p>\n<p>直接在资源管理器操作</p>\n</li>\n</ul>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><p><a href=\"https://0xdadream.github.io/2025/02/20/arc-zai-comfyui-bao-cuo/\">Arc在comfyui报错 | 逐梦</a></p>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/03/09/comfyui-bao-cuo-huggingface/",
            "url": "https://0xdadream.github.io/2025/03/09/comfyui-bao-cuo-huggingface/",
            "title": "comfyui报错huggingface",
            "date_published": "2025-03-09T13:25:00.000Z",
            "content_html": "<h1 id=\"comfyui报错huggingface\"><a href=\"#comfyui报错huggingface\" class=\"headerlink\" title=\"comfyui报错huggingface\"></a>comfyui报错huggingface</h1><p>报错信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">huggingface_hub.errors.LocalEntryNotFoundError: An error happened <span class=\"token keyword\">while</span> trying to <span class=\"token function\">locate</span> the <span class=\"token function\">file</span> on the Hub and we cannot <span class=\"token function\">find</span> the requested files <span class=\"token keyword\">in</span> the <span class=\"token builtin class-name\">local</span> cache. Please check your connection and try again or <span class=\"token function\">make</span> sure your Internet connection is on.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解决方法</p>\n<p>到<code>main.py</code>代码前面添加</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">\"HF_ENDPOINT\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"https://hf-mirror.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>换镜像</p>\n",
            "tags": [
                "comfyui"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/",
            "url": "https://0xdadream.github.io/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/",
            "title": "pycharm显示显示表格",
            "date_published": "2025-02-21T07:25:00.000Z",
            "content_html": "<h1 id=\"pycharm显示显示表格\"><a href=\"#pycharm显示显示表格\" class=\"headerlink\" title=\"pycharm显示显示表格\"></a>pycharm显示显示表格</h1><p>当以pycharm打开<code>.csv</code>文件时，可能不能显示表格，在文件中右键，选择关联文件，找到csv关联即可</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/20/arc-zai-comfyui-bao-cuo/",
            "url": "https://0xdadream.github.io/2025/02/20/arc-zai-comfyui-bao-cuo/",
            "title": "Arc在comfyui报错",
            "date_published": "2025-02-20T04:25:00.000Z",
            "content_html": "<h1 id=\"Arc在comfyui报错\"><a href=\"#Arc在comfyui报错\" class=\"headerlink\" title=\"Arc在comfyui报错\"></a>Arc在comfyui报错</h1><h2 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Current platform can NOT allocate memory block with size larger than 4GB<span class=\"token operator\">!</span> Tried to allocate <span class=\"token number\">8.00</span> GiB <span class=\"token punctuation\">(</span>GPU <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token number\">15.56</span> GiB total capacity<span class=\"token punctuation\">;</span> <span class=\"token number\">2.08</span> GiB already allocated<span class=\"token punctuation\">;</span> <span class=\"token number\">2.12</span> GiB reserved <span class=\"token keyword\">in</span> total by PyTorch<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>目前的解决办法都不太行，我的做法是回到<code>IPEX-2.1</code>版本</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://github.com/intel/intel-extension-for-pytorch/issues/325#issuecomment-2604803076\">Arrays larger than 4 GB crashes · Issue #325 · intel/intel-extension-for-pytorch</a></p>\n",
            "tags": [
                "intel"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/19/conda-huan-yuan/",
            "url": "https://0xdadream.github.io/2025/02/19/conda-huan-yuan/",
            "title": "conda换源",
            "date_published": "2025-02-19T08:25:00.000Z",
            "content_html": "<h1 id=\"conda换源\"><a href=\"#conda换源\" class=\"headerlink\" title=\"conda换源\"></a>conda换源</h1><p>由于网络连接原因，使用 Anaconda 或 Miniconda 时，默认的官方源速度较慢。为提高下载速度，您可以将 Conda 的源更换为国内的镜像源。以下是详细的操作步骤：</p>\n<p><strong>1. 生成 <code>.condarc</code> 配置文件：</strong></p>\n<p>在 Windows 系统中，用户目录下可能没有 <code>.condarc</code> 文件。您可以通过以下命令生成该文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda config <span class=\"token parameter variable\">--set</span> show_channel_urls <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行后，<code>.condarc</code> 文件将被创建在用户主目录下。在 Windows 上，用户主目录通常位于 <code>C:\\Users\\用户名\\</code>。</p>\n<p><strong>2. 编辑 <code>.condarc</code> 文件：</strong></p>\n<p>使用文本编辑器打开 <code>.condarc</code> 文件，将其内容替换为以下内容：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">channels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> defaults\n<span class=\"token key atrule\">show_channel_urls</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">default_channels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/main\n  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/r\n  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/msys2\n<span class=\"token key atrule\">custom_channels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">conda-forge</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">msys2</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">bioconda</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">menpo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">pytorch</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">pytorch-lts</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">simpleitk</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述配置将 Conda 的源更换为北京外国语大学的镜像站。您也可以选择其他国内镜像源，如清华大学、上海交通大学等。具体的镜像源配置可以参考清华大学开源软件镜像站的官方文档。 </p>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/?utm_source=chatgpt.com\">mirrors.tuna.tsinghua.edu.cn</a></p>\n<p><strong>3. 清理索引缓存：</strong></p>\n<p>更换源后，建议清理 Conda 的索引缓存，以确保使用新的镜像源：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda clean <span class=\"token parameter variable\">-i</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>4. 测试新的源：</strong></p>\n<p>创建一个新的 Conda 环境，并安装一个包，以验证新的源是否生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> test_env numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果安装过程顺利且速度较快，则说明源更换成功。</p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li><strong>备份原始配置：</strong> 在更改 <code>.condarc</code> 文件之前，建议备份原始配置，以防需要恢复。</li>\n<li><strong>恢复默认源：</strong> 如果需要恢复默认源，可以删除 <code>.condarc</code> 文件，或者执行以下命令：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda config --remove-key channels<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>通过以上步骤，您可以成功将 Conda 的源更换为国内镜像源，从而提高包的下载速度和稳定性。</p>\n",
            "tags": [
                "conda",
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/",
            "title": "ArcA770使用comfyui教程",
            "date_published": "2025-02-18T10:11:00.000Z",
            "content_html": "<h1 id=\"ArcA770使用comfyui教程\"><a href=\"#ArcA770使用comfyui教程\" class=\"headerlink\" title=\"ArcA770使用comfyui教程\"></a>ArcA770使用comfyui教程</h1><h3 id=\"1-前置配置\"><a href=\"#1-前置配置\" class=\"headerlink\" title=\"1. 前置配置\"></a><strong>1. 前置配置</strong></h3><ul>\n<li>conda</li>\n<li>更新驱动</li>\n<li>安装<strong>Visual Studio Build Tools</strong></li>\n<li>安装oneAPI</li>\n<li>安装IPEX</li>\n<li>具体看链接<a href=\"https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/\">Intel显卡运行AI配置教程 | 逐梦</a></li>\n</ul>\n<hr>\n<h3 id=\"2-配置Python\"><a href=\"#2-配置Python\" class=\"headerlink\" title=\"2. 配置Python\"></a><strong>2. 配置Python</strong></h3><ul>\n<li><p><strong>Python环境</strong>：<br>建议使用<strong>Python 3.10或更高版本</strong>，并通过虚拟环境（如<code>venv</code>或<code>conda</code>）隔离依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> comfyui <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.11</span>  这里comfyui就是安装IPEX的环境\nconda activate comfyui<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"3-安装ComfyUI及依赖库\"><a href=\"#3-安装ComfyUI及依赖库\" class=\"headerlink\" title=\"3. 安装ComfyUI及依赖库\"></a><strong>3. 安装ComfyUI及依赖库</strong></h3><ul>\n<li><p><strong>克隆ComfyUI仓库</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> xxxx <span class=\"token comment\">#工作目录</span>\n<span class=\"token function\">git</span> clone https://github.com/comfyanonymous/ComfyUI.git\n<span class=\"token builtin class-name\">cd</span> ComfyUI\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt <span class=\"token comment\"># 安装依赖</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"4-验证显卡识别与性能调优\"><a href=\"#4-验证显卡识别与性能调优\" class=\"headerlink\" title=\"4. 验证显卡识别与性能调优\"></a><strong>4. 验证显卡识别与性能调优</strong></h3><ul>\n<li><strong>显存与算力优化</strong>：<ul>\n<li>启用Intel的<strong>XMX引擎</strong>（AI加速单元）和<strong>XeSS技术</strong>（超分辨率），可通过设置环境变量优化显存分配410。</li>\n<li>调整ComfyUI配置文件，指定使用<code>XPU</code>（Intel GPU）而非默认的CUDA。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"5-启动comfyui\"><a href=\"#5-启动comfyui\" class=\"headerlink\" title=\"5.启动comfyui\"></a><strong>5.启动comfyui</strong></h3><p>接着上面的目录执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python main.py --use-pytorch-cross-attention <span class=\"token parameter variable\">--highvram</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"快捷脚本\"><a href=\"#快捷脚本\" class=\"headerlink\" title=\"快捷脚本\"></a>快捷脚本</h4><h5 id=\"cmd\"><a href=\"#cmd\" class=\"headerlink\" title=\"cmd\"></a>cmd</h5><pre class=\"line-numbers language-bat\" data-language=\"bat\"><code class=\"language-bat\">call \"E:\\conda\\Scripts\\activate.bat\" deepl  \ncall \"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\"\npython main.py --use-pytorch-cross-attention --highvram<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>保存为<code>.bat</code>文件</p>\n<p>powershell</p>\n<p>没搞出来</p>\n",
            "tags": [
                "intel"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/",
            "title": "Intel显卡运行AI配置教程",
            "date_published": "2025-02-18T08:11:00.000Z",
            "content_html": "<h1 id=\"Intel显卡运行AI配置教程\"><a href=\"#Intel显卡运行AI配置教程\" class=\"headerlink\" title=\"Intel显卡运行AI配置教程\"></a><strong>Intel显卡运行AI配置教程</strong></h1><h2 id=\"最新\"><a href=\"#最新\" class=\"headerlink\" title=\"最新\"></a>最新</h2><p>最近pytorch已经支持Arc显卡了，不需要再安装oneAPI和IPEX，当然以前的版本仍需要（2.5及以前），但是我本地本来是安装过这些组件的，我也不知道不安装会不会报错，可以参考官方文档<a href=\"https://www.intel.com/content/www/us/en/developer/articles/tool/pytorch-prerequisites-for-intel-gpu/2-6.html\">PyTorch Prerequisites for Intel® GPUs</a>，pytorch开发者确实说过免去了那些复杂的操作，可以开箱即用</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接在conda环境中执行即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate deepl\npip3 <span class=\"token function\">install</span> <span class=\"token parameter variable\">--pre</span> torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/xpu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出true就是成功了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\ntorch<span class=\"token punctuation\">.</span>xpu<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># torch.xpu is the API for Intel GPU support</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>训练测试代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torchvision\n\nLR <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span>\nDOWNLOAD <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nDATA <span class=\"token operator\">=</span> <span class=\"token string\">\"datasets/cifar10/\"</span>\n\ntransform <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>\n        torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\ntrain_dataset <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span>\n    root<span class=\"token operator\">=</span>DATA<span class=\"token punctuation\">,</span>\n    train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    transform<span class=\"token operator\">=</span>transform<span class=\"token punctuation\">,</span>\n    download<span class=\"token operator\">=</span>DOWNLOAD<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\ntrain_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token operator\">=</span>train_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\ntrain_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>resnet50<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncriterion <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noptimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>LR<span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\ncriterion <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Initiating training\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> batch_idx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\n    target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\n    optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    loss <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n    loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>batch_idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n         iteration_loss <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Iteration [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>batch_idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>train_len<span class=\"token punctuation\">}</span></span><span class=\"token string\">], Loss: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>iteration_loss<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.4f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\ntorch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"model_state_dict\"</span><span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"optimizer_state_dict\"</span><span class=\"token punctuation\">:</span> optimizer<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"checkpoint.pth\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution finished\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>适用硬件</strong></p>\n<ul>\n<li>Intel Arc系列显卡（如A770 16G）驱动为6559</li>\n<li>win11</li>\n<li>oneAPI==2025.0.1</li>\n<li>torch==2.3.110</li>\n</ul>\n<hr>\n<h2 id=\"1-安装Miniconda并配置Python虚拟环境\"><a href=\"#1-安装Miniconda并配置Python虚拟环境\" class=\"headerlink\" title=\"1. 安装Miniconda并配置Python虚拟环境\"></a><strong>1. 安装Miniconda并配置Python虚拟环境</strong></h2><p>可以参考这个<a href=\"https://0xdadream.github.io/2024/08/12/conda-an-zhuang-ji-shi-yong/\">conda安装及使用 | 逐梦</a></p>\n<h3 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a><strong>步骤说明</strong></h3><ol>\n<li><p><strong>下载Miniconda</strong></p>\n<ul>\n<li>访问 <a href=\"https://docs.conda.io/en/latest/miniconda.html\">Miniconda官网</a>，选择对应操作系统的安装包（建议Python 3.11版本）。</li>\n</ul>\n</li>\n<li><p><strong>安装Miniconda</strong></p>\n<ul>\n<li><p>Windows：双击安装包，按提示操作，勾选“Add to PATH”选项。</p>\n</li>\n<li><p>Linux/macOS：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> Miniconda3-latest-Linux-x86_64.sh  <span class=\"token comment\"># 根据文件名调整  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>创建Python 3.11虚拟环境</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> intel-ai <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.11</span>  \nconda activate intel-ai  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"2-更新Intel显卡驱动\"><a href=\"#2-更新Intel显卡驱动\" class=\"headerlink\" title=\"2. 更新Intel显卡驱动\"></a><strong>2. 更新Intel显卡驱动</strong></h2><h3 id=\"关键操作\"><a href=\"#关键操作\" class=\"headerlink\" title=\"关键操作\"></a><strong>关键操作</strong></h3><ol>\n<li><p><strong>下载最新驱动</strong></p>\n<ul>\n<li>访问 <a href=\"https://www.intel.cn/content/www/cn/zh/download-center/home.html\">Intel驱动下载页</a>，选择Arc系列显卡的最新驱动（如<strong>32.0.101.6559</strong>）。</li>\n</ul>\n</li>\n<li><p><strong>安装驱动</strong></p>\n<ul>\n<li><p>Windows：运行安装程序，按提示完成安装。</p>\n</li>\n<li><p>Linux：使用包管理器（如Ubuntu/Debian）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> intel-opencl-icd intel-level-zero-gpu level-zero  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>验证驱动状态</strong></p>\n<ul>\n<li><p>Windows：按 <code>Win + X</code> &gt; 设备管理器 &gt; 显示适配器，确认显卡型号正确。</p>\n</li>\n<li><p>Linux：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lspci <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> intel  <span class=\"token comment\"># 确认显卡识别  </span>\nclinfo  <span class=\"token comment\"># 检查OpenCL支持  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"3-安装Visual-Studio-Build-Tools（仅Windows）\"><a href=\"#3-安装Visual-Studio-Build-Tools（仅Windows）\" class=\"headerlink\" title=\"3. 安装Visual Studio Build Tools（仅Windows）\"></a><strong>3. 安装Visual Studio Build Tools（仅Windows）</strong></h2><h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a><strong>操作步骤</strong></h3><ol>\n<li><strong>下载Visual Studio 2022</strong><ul>\n<li>访问 <a href=\"https://visualstudio.microsoft.com/\">Visual Studio官网</a>，下载社区版。</li>\n</ul>\n</li>\n<li><strong>安装C++桌面开发组件</strong><ul>\n<li>在安装界面勾选：<ul>\n<li><strong>使用C++的桌面开发</strong></li>\n<li><strong>Windows 10/11 SDK</strong></li>\n<li><strong>C++ CMake工具</strong></li>\n<li>默认也行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>验证安装</strong><ul>\n<li>打开命令提示符，运行 <code>cl</code> 命令，确认返回编译器版本信息。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"4-安装Intel-oneAPI工具包\"><a href=\"#4-安装Intel-oneAPI工具包\" class=\"headerlink\" title=\"4. 安装Intel oneAPI工具包\"></a><strong>4. 安装Intel oneAPI工具包</strong></h2><h3 id=\"步骤说明-1\"><a href=\"#步骤说明-1\" class=\"headerlink\" title=\"步骤说明\"></a><strong>步骤说明</strong></h3><ol>\n<li><p><strong>下载oneAPI Base Toolkit</strong></p>\n<ul>\n<li>访问 <a href=\"https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/toolkits.html\">oneAPI官网</a>，选择Base Toolkit-&gt;windows-&gt;offline installer，然后点击右边往下一点Continue as a Guest (download starts immediately) →下载</li>\n</ul>\n</li>\n<li><p><strong>安装oneAPI</strong></p>\n<ul>\n<li>Windows：运行安装程序，默认勾选所有组件，一直点就行了。</li>\n<li>Linux：使用包管理器或脚本安装。</li>\n</ul>\n</li>\n<li><p><strong>激活oneAPI环境变量</strong></p>\n<ul>\n<li><p>Windows：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">call <span class=\"token string\">\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\"</span>   <span class=\"token comment\"># cmd使用</span>\ncmd.exe <span class=\"token string\">\"/K\"</span> <span class=\"token string\">'\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\" &amp;&amp; powershell'</span> <span class=\"token comment\"># powershell使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>Linux：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /opt/intel/oneapi/setvars.sh  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"5-安装Intel-Extension-for-PyTorch-IPEX\"><a href=\"#5-安装Intel-Extension-for-PyTorch-IPEX\" class=\"headerlink\" title=\"5. 安装Intel Extension for PyTorch (IPEX)\"></a><strong>5. 安装Intel Extension for PyTorch (IPEX)</strong></h2><h3 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a><strong>操作命令</strong></h3><ol>\n<li><p><strong>激活虚拟环境与oneAPI</strong></p>\n<p>powershell中执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> xxx <span class=\"token comment\">#最好切换到工作目录</span>\nconda create <span class=\"token parameter variable\">-n</span> intel-ai <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.11</span>  <span class=\"token comment\"># 前面创建过环境没有再次创建</span>\nconda activate intel-ai <span class=\"token comment\"># 激活环境 </span>\nconda <span class=\"token function\">install</span> libjepg-turbo <span class=\"token comment\">#提前安装这两个库以免报错</span>\nconda <span class=\"token function\">install</span> libpng \ncmd.exe <span class=\"token string\">\"/K\"</span> <span class=\"token string\">'\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\" &amp;&amp; powershell'</span>  <span class=\"token comment\"># 根据操作系统执行上述对应的oneAPI激活命令</span>\nconda activate intel-ai <span class=\"token comment\"># 再次激活环境</span>\nconda <span class=\"token function\">install</span> pkg-config libuv <span class=\"token comment\"># 安装一些依赖</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>安装PyTorch与IPEX</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装PyTorch CPU版本（IPEX会自动启用GPU支持）  </span>\npip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">torch</span><span class=\"token operator\">==</span><span class=\"token number\">2.3</span>.1.post0+cxx11.abi <span class=\"token assign-left variable\">torchvision</span><span class=\"token operator\">==</span><span class=\"token number\">0.18</span>.1.post0+cxx11.abi <span class=\"token assign-left variable\">torchaudio</span><span class=\"token operator\">==</span><span class=\"token number\">2.3</span>.1.post0+cxx11.abi intel-extension-for-pytorch<span class=\"token operator\">==</span><span class=\"token number\">2.3</span>.110.post0+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">torch</span><span class=\"token operator\">==</span><span class=\"token number\">2.5</span>.1+cxx11.abi <span class=\"token assign-left variable\">torchvision</span><span class=\"token operator\">==</span><span class=\"token number\">0.20</span>.1+cxx11.abi <span class=\"token assign-left variable\">torchaudio</span><span class=\"token operator\">==</span><span class=\"token number\">2.5</span>.1+cxx11.abi intel-extension-for-pytorch<span class=\"token operator\">==</span><span class=\"token number\">2.5</span>.10+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/\n<span class=\"token comment\"># 最新版实测也能用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"6-验证IPEX安装与显卡识别\"><a href=\"#6-验证IPEX安装与显卡识别\" class=\"headerlink\" title=\"6. 验证IPEX安装与显卡识别\"></a><strong>6. 验证IPEX安装与显卡识别</strong></h2><h3 id=\"验证步骤\"><a href=\"#验证步骤\" class=\"headerlink\" title=\"验证步骤\"></a><strong>验证步骤</strong></h3><ol>\n<li><p><strong>运行Python脚本检查GPU支持</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch  \n<span class=\"token keyword\">import</span> intel_extension_for_pytorch <span class=\"token keyword\">as</span> ipex  \n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"PyTorch版本: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>torch<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"IPEX版本: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ipex<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Intel GPU是否可用: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>torch<span class=\"token punctuation\">.</span>xpu<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"检测到的Intel GPU设备: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>torch<span class=\"token punctuation\">.</span>xpu<span class=\"token punctuation\">.</span>get_device_name<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"import torch; import intel_extension_for_pytorch as ipex; print('PyTorch版本:', torch.__version__); print('IPEX版本:', ipex.__version__); print('Intel GPU是否可用:', torch.xpu.is_available()); print('检测到的Intel GPU设备:', torch.xpu.get_device_name(0))\"</span>\n<span class=\"token comment\"># 一键脚本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>预期输出</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PyTorch版本: <span class=\"token number\">2.1</span>.0  \nIPEX版本: <span class=\"token number\">2.1</span>.0  \nIntel GPU是否可用: True  \n检测到的Intel GPU设备: Intel<span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Arc<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> A770 Graphics  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>官方脚本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"import torch; import intel_extension_for_pytorch as ipex; print(torch.__version__); print(ipex.__version__); [print(f'[{i}]: {torch.xpu.get_device_properties(i)}') for i in range(torch.xpu.device_count())];\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>至此已经安装成功了</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"7-常见问题解决\"><a href=\"#7-常见问题解决\" class=\"headerlink\" title=\"7. 常见问题解决\"></a><strong>7. 常见问题解决</strong></h2><p>遇到问题大多数时候都是各种版本不匹配，例如<code>raise err OSError: [WinError 126] 找不到指定的模块。</code>，尽量使用教程相同版本。</p>\n<p>报错信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">E:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs<span class=\"token punctuation\">\\</span>deepll<span class=\"token punctuation\">\\</span>Lib<span class=\"token punctuation\">\\</span>site-packages<span class=\"token punctuation\">\\</span>torchvision<span class=\"token punctuation\">\\</span>io<span class=\"token punctuation\">\\</span>image.py:14: UserWarning: Failed to load image Python extension: <span class=\"token string\">'Could not find module '</span>E:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs<span class=\"token punctuation\">\\</span>deepll<span class=\"token punctuation\">\\</span>Lib<span class=\"token punctuation\">\\</span>site-packages<span class=\"token punctuation\">\\</span>torchvision<span class=\"token punctuation\">\\</span>image.pyd<span class=\"token string\">' (or one of its dependencies). Try using the full path with constructor syntax.'</span>If you don't plan on using image functionality from <span class=\"token variable\"><span class=\"token variable\">`</span>torchvision.io<span class=\"token variable\">`</span></span>, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have <span class=\"token variable\"><span class=\"token variable\">`</span>libjpeg<span class=\"token variable\">`</span></span> or <span class=\"token variable\"><span class=\"token variable\">`</span>libpng<span class=\"token variable\">`</span></span> installed before building <span class=\"token variable\"><span class=\"token variable\">`</span>torchvision<span class=\"token variable\">`</span></span> from source?\n  warn<span class=\"token punctuation\">(</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>解决方案</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate deepl <span class=\"token comment\"># 激活对应环境</span>\nconda <span class=\"token function\">install</span> libjepg-turbo\nconda <span class=\"token function\">install</span> libpng<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>若有其他缺少库报错，安装对应库即可，可以参考文章<a href=\"https://0xdadream.github.io/2025/02/18/python-ku-bao-cuo-hui-zong/\">python库报错汇总 | 逐梦</a></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>通过本教程，你已成功配置Intel显卡的AI开发环境，并验证了IPEX的GPU加速支持。接下来可尝试运行AI模型（如Stable Diffusion、LLM推理），并通过环境变量 <code>LIBOMPTARGET_PLUGIN=LEVEL0</code> 或 <code>SYCL_CACHE_PERSISTENT=1</code> 进一步优化性能。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit-download.html\">获取英特尔® oneAPI Base Toolkit</a></p>\n<p><a href=\"https://intel.github.io/intel-extension-for-pytorch/\">Welcome to Intel® Extension for PyTorch* Documentation!</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1dKaMeXE3B/?vd_source=b809bacd004cf290c08f612fa076f2eb\">intel arc 显卡 ComfyUI 安装教程_哔哩哔哩_bilibili</a></p>\n<p><a href=\"https://blog.csdn.net/yunying985/article/details/140589680\">AI绘画 | 只要10步让你在英特尔A770显卡下安装ComfyUI运行StableDiffusion3最新开源模型_arc a750 安装comfyui-CSDN博客</a></p>\n<p><a href=\"https://pytorch.org/docs/main/notes/get_start_xpu.html\">Getting Started on Intel GPU — PyTorch main documentation</a></p>\n",
            "tags": [
                "intel"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/18/python-ku-bao-cuo-hui-zong/",
            "url": "https://0xdadream.github.io/2025/02/18/python-ku-bao-cuo-hui-zong/",
            "title": "python库报错汇总",
            "date_published": "2025-02-18T06:25:00.000Z",
            "content_html": "<h1 id=\"python库报错汇总\"><a href=\"#python库报错汇总\" class=\"headerlink\" title=\"python库报错汇总\"></a>python库报错汇总</h1><p>形如<code>ModuleNotFoundError: No module named 'xxx'</code>的报错</p>\n<p>首先先试一试<code>pip install xxx</code>能安装就能解决，没有就看下面，只是我遇到的</p>\n<h2 id=\"ModuleNotFoundError-No-module-named-‘cv2’\"><a href=\"#ModuleNotFoundError-No-module-named-‘cv2’\" class=\"headerlink\" title=\"ModuleNotFoundError: No module named ‘cv2’\"></a>ModuleNotFoundError: No module named ‘cv2’</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> opencv-contrib-python <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"ModuleNotFoundError-No-module-named-‘colour-io’-‘colour’-is-not-a-package\"><a href=\"#ModuleNotFoundError-No-module-named-‘colour-io’-‘colour’-is-not-a-package\" class=\"headerlink\" title=\"ModuleNotFoundError: No module named ‘colour.io’; ‘colour’ is not a package\"></a>ModuleNotFoundError: No module named ‘colour.io’; ‘colour’ is not a package</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> colour-science<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"No-module-named-‘cpuinfo’\"><a href=\"#No-module-named-‘cpuinfo’\" class=\"headerlink\" title=\"No module named ‘cpuinfo’\"></a>No module named ‘cpuinfo’</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> py-cpuinfo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"ModuleNotFoundError-No-module-named-‘imageio‘\"><a href=\"#ModuleNotFoundError-No-module-named-‘imageio‘\" class=\"headerlink\" title=\"ModuleNotFoundError: No module named ‘imageio‘\"></a>ModuleNotFoundError: No module named ‘imageio‘</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> imgaug<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"解决ModuleNotFoundError-No-module-named-‘skimage‘\"><a href=\"#解决ModuleNotFoundError-No-module-named-‘skimage‘\" class=\"headerlink\" title=\"解决ModuleNotFoundError: No module named ‘skimage‘\"></a>解决ModuleNotFoundError: No module named ‘skimage‘</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> scikit-image<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"No-module-named-‘open-clip‘\"><a href=\"#No-module-named-‘open-clip‘\" class=\"headerlink\" title=\"No module named ‘open_clip‘\"></a>No module named ‘open_clip‘</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> open_clip_torch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"ERROR-No-matching-distribution-found-for-triton\"><a href=\"#ERROR-No-matching-distribution-found-for-triton\" class=\"headerlink\" title=\"ERROR: No matching distribution found for triton\"></a>ERROR: No matching distribution found for triton</h2><p>到<a href=\"https://hf-mirror.com/madbuda/triton-windows-builds\">madbuda/triton-windows-builds · HF Mirror</a>下载对应windows构建包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> 下载目录\npip <span class=\"token function\">install</span> triton-3.0.0-cp311-cp311-win_amd64.whl  <span class=\"token comment\"># 文件名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"ImportError-cannot-import-name-‘soft-unicode‘-from-‘markupsafe‘\"><a href=\"#ImportError-cannot-import-name-‘soft-unicode‘-from-‘markupsafe‘\" class=\"headerlink\" title=\"ImportError: cannot import name ‘soft_unicode‘ from ‘markupsafe‘\"></a>ImportError: cannot import name ‘soft_unicode‘ from ‘markupsafe‘</h2><p>执行命令重新安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">markupsafe</span><span class=\"token operator\">==</span><span class=\"token number\">2.0</span>.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>ERROR: Could not install packages due to an OSError: [WinError 5] 拒绝访问。： ‘E:\\conda\\envs\\deepl\\Lib\\site-packages\\cv2\\cv2.pyd’ Consider using the <code>--user</code> option or check the permissions.</p>\n<p>如他说添加<code>--user</code>参数</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/15/powershell-pei-zhi-mu-lu/",
            "url": "https://0xdadream.github.io/2025/02/15/powershell-pei-zhi-mu-lu/",
            "title": "powershell配置目录",
            "date_published": "2025-02-15T13:25:00.000Z",
            "content_html": "<h1 id=\"powershell配置目录\"><a href=\"#powershell配置目录\" class=\"headerlink\" title=\"powershell配置目录\"></a>powershell配置目录</h1><p>执行命令<code>$PROFILE</code>会得到类似于<code>C:\\Users\\xxx\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1</code>的目录</p>\n<p>这个目录的文件就是你的powershell预执行的命令，相当于每次启动powershell都行执行一遍</p>\n<p>然后这个目录还会存powershell的安装的插件文件，备份这个文件，即使卸载重装配置也不会变，但是要注意不同版本命令可能不一样。</p>\n",
            "tags": [
                "命令行"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/15/conda-zai-powershell7.5-zhi-xing-chu-xian-wen-ti/",
            "url": "https://0xdadream.github.io/2025/02/15/conda-zai-powershell7.5-zhi-xing-chu-xian-wen-ti/",
            "title": "conda在powershell7.5执行出现问题",
            "date_published": "2025-02-15T04:25:00.000Z",
            "content_html": "<h1 id=\"conda在powershell7-5执行出现问题\"><a href=\"#conda在powershell7-5执行出现问题\" class=\"headerlink\" title=\"conda在powershell7.5执行出现问题\"></a>conda在powershell7.5执行出现问题</h1><h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>执行命令结果如下，不能达到预期</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda\nusage: conda-script.py <span class=\"token punctuation\">[</span>-h<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-v<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--no-plugins<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>-V<span class=\"token punctuation\">]</span> COMMAND <span class=\"token punctuation\">..</span>.\nconda-script.py: error: argument COMMAND: invalid choice: <span class=\"token string\">''</span> <span class=\"token punctuation\">(</span>choose from <span class=\"token string\">'activate'</span>, <span class=\"token string\">'clean'</span>, <span class=\"token string\">'commands'</span>, <span class=\"token string\">'compare'</span>, <span class=\"token string\">'config'</span>, <span class=\"token string\">'create'</span>, <span class=\"token string\">'deactivate'</span>, <span class=\"token string\">'env'</span>, <span class=\"token string\">'export'</span>, <span class=\"token string\">'info'</span>, <span class=\"token string\">'init'</span>, <span class=\"token string\">'install'</span>, <span class=\"token string\">'list'</span>, <span class=\"token string\">'notices'</span>, <span class=\"token string\">'package'</span>, <span class=\"token string\">'build'</span>, <span class=\"token string\">'content-trust'</span>, <span class=\"token string\">'convert'</span>, <span class=\"token string\">'debug'</span>, <span class=\"token string\">'develop'</span>, <span class=\"token string\">'doctor'</span>, <span class=\"token string\">'index'</span>, <span class=\"token string\">'inspect'</span>, <span class=\"token string\">'metapackage'</span>, <span class=\"token string\">'render'</span>, <span class=\"token string\">'repoquery'</span>, <span class=\"token string\">'skeleton'</span>, <span class=\"token string\">'pack'</span>, <span class=\"token string\">'repo'</span>, <span class=\"token string\">'token'</span>, <span class=\"token string\">'server'</span>, <span class=\"token string\">'remove'</span>, <span class=\"token string\">'uninstall'</span>, <span class=\"token string\">'rename'</span>, <span class=\"token string\">'run'</span>, <span class=\"token string\">'search'</span>, <span class=\"token string\">'update'</span>, <span class=\"token string\">'upgrade'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>升级版本后引起的问题，具体等修复</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>powershell版本降级，到<a href=\"https://github.com/PowerShell/PowerShell/releases/tag/v7.4.7\">Release v7.4.7 Release of PowerShell · PowerShell/PowerShell</a>下载msi文件，安装老版本，7.5无所谓删不删，若要删除建议先备份”C:\\Users\\xxx\\Documents\\PowerShell”目录下的文件，这是所有配置文件，微软商店下载的powershell和github安装的powershell共用这个配置文件</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://github.com/PowerShell/PowerShell/issues/24942\">标题： PowerShell 7.5.0 中的 Conda 环境激活问题 ·问题 #24942 ·PowerShell/PowerShell</a></p>\n<p><a href=\"https://github.com/PowerShell/PowerShell/issues/24869\">Conda does not run as expected on PowerShell 7.5.0 · Issue #24869 · PowerShell/PowerShell</a></p>\n<p><a href=\"https://github.com/conda/conda/issues/14292\">在 Powershell 7.5 预览版 4 上，在“conda activate base”之后，“Env：_CE_CONDA”和“Env：_CE_M”再次出现。·问题 #14292 ·conda/康达</a></p>\n",
            "tags": [
                "conda",
                "powershell"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/12/emby-shi-yong/",
            "url": "https://0xdadream.github.io/2025/02/12/emby-shi-yong/",
            "title": "emby使用",
            "date_published": "2025-02-12T04:25:00.000Z",
            "content_html": "<h1 id=\"emby使用\"><a href=\"#emby使用\" class=\"headerlink\" title=\"emby使用\"></a>emby使用</h1><h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h2><ul>\n<li><p>核对信息</p>\n<p>确认你已获得完整的信息：</p>\n<ul>\n<li>服务器地址（通常为一个 URL 或 IP 地址）</li>\n<li>端口号（如果提供了非默认端口，需要特别注意）</li>\n<li>连接协议（通常为 http 或 https）</li>\n<li>如有账号和密码或令牌信息，也要一并准备好</li>\n</ul>\n</li>\n<li><p><strong>网络要求</strong><br>由于“机场节点”往往用于突破网络限制，确保你的设备已根据要求连接 VPN 或配置代理（如果提供方有说明需要）。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-在-Emby-客户端中添加服务器\"><a href=\"#2-在-Emby-客户端中添加服务器\" class=\"headerlink\" title=\"2. 在 Emby 客户端中添加服务器\"></a>2. 在 Emby 客户端中添加服务器</h2><h3 id=\"（1）安装-Emby-客户端\"><a href=\"#（1）安装-Emby-客户端\" class=\"headerlink\" title=\"（1）安装 Emby 客户端\"></a>（1）安装 Emby 客户端</h3><ul>\n<li>到<a href=\"https://t.me/GentleSecretary\">Telegram: Contact @GentleSecretary</a>搜索emby下载对应版本（首选）</li>\n<li>在安卓手机上，可从 Google Play 商店或其他应用市场下载安装官方 Emby 客户端（这个需要开会员）</li>\n<li>也可以使用第三方支持 Emby 协议的播放器（如 Infuse、Fileball 等）</li>\n</ul>\n<h3 id=\"（2）进入服务器设置\"><a href=\"#（2）进入服务器设置\" class=\"headerlink\" title=\"（2）进入服务器设置\"></a>（2）进入服务器设置</h3><ul>\n<li>打开 Emby 客户端后，进入【设置】或【服务器设置】页面，或者直接弹出填写页面。</li>\n<li>选择“添加服务器”或“连接到服务器”的选项。</li>\n</ul>\n<h3 id=\"（3）填写服务器地址\"><a href=\"#（3）填写服务器地址\" class=\"headerlink\" title=\"（3）填写服务器地址\"></a>（3）填写服务器地址</h3><ul>\n<li><p>在“服务器地址”栏中输入你获得的地址，格式一般为：</p>\n<ul>\n<li><code>http://服务器地址:端口</code> 或者 <code>https://服务器地址:端口</code><br>例如，如果你的地址为 <code>http://123.45.67.89</code>，而端口为 8096，则填写：</li>\n<li><code>http://123.45.67.89:8096</code></li>\n</ul>\n</li>\n<li><p>注意：建议去除地址末尾多余的斜杠“/”，以免影响连接。（参考“线路说明”中对地址格式的建议 </p>\n<p><a href=\"https://wiki.freeembyguide.eu.org/docs/guide/server\">wiki.freeembyguide.eu.org</a>）</p>\n</li>\n</ul>\n<h3 id=\"（4）连接测试\"><a href=\"#（4）连接测试\" class=\"headerlink\" title=\"（4）连接测试\"></a>（4）连接测试</h3><ul>\n<li>填写后，点击“连接”或“测试连接”。</li>\n<li>如果服务器运行正常且网络环境（或 VPN/代理）配置正确，客户端会自动加载媒体库。</li>\n</ul>\n<hr>\n<h2 id=\"3-登录与账号验证\"><a href=\"#3-登录与账号验证\" class=\"headerlink\" title=\"3. 登录与账号验证\"></a>3. 登录与账号验证</h2><ul>\n<li>如果该 Emby 机场服务要求身份验证，系统会提示你输入账号和密码。</li>\n<li>输入正确的账号信息后，继续操作即可访问媒体资源。</li>\n</ul>\n<hr>\n<h2 id=\"4-高级设置（仅适用于管理人员或自建服务器）\"><a href=\"#4-高级设置（仅适用于管理人员或自建服务器）\" class=\"headerlink\" title=\"4. 高级设置（仅适用于管理人员或自建服务器）\"></a>4. 高级设置（仅适用于管理人员或自建服务器）</h2><p>如果你自己搭建 Emby 服务器并挂接了硬盘存储，可能还需要：</p>\n<ul>\n<li><p>配置媒体库</p>\n<p>在 Emby 服务器管理后台，设置媒体库的路径为硬盘挂载目录。这样服务器才能正确扫描并整理硬盘中的影音文件。（更多细节可参考 CSDN 上关于挂接硬盘的说明 </p>\n<p><a href=\"https://wenku.csdn.net/answer/7f9bf651623542dea45bafc64aed261c\">wenku.csdn.net</a>）</p>\n</li>\n<li><p><strong>网络加速和直连设置</strong><br>有些机场节点提供多条优化线路（直连或代理），如果遇到播放卡顿或加载慢的情况，可尝试切换线路或调整客户端的播放质量设置。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-常见问题及排查\"><a href=\"#5-常见问题及排查\" class=\"headerlink\" title=\"5. 常见问题及排查\"></a>5. 常见问题及排查</h2><ul>\n<li>无法连接服务器<ul>\n<li>检查网络环境，确保已开启必要的 VPN/代理。</li>\n<li>再次核对地址和端口是否输入正确。</li>\n</ul>\n</li>\n<li>播放卡顿或加载缓慢<ul>\n<li>可能与服务器负载或网络带宽有关，尝试使用代理访问。</li>\n<li>查看是否有备用线路，或者联系服务提供方反馈问题。</li>\n</ul>\n</li>\n<li>SSL 证书错误<ul>\n<li>如果使用 https 出现证书问题，确认是否需要手动安装信任证书，或联系服务提供方了解详细要求。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "emby"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/11/google-hacking-shi-yong-gai-jin-ban/",
            "url": "https://0xdadream.github.io/2025/02/11/google-hacking-shi-yong-gai-jin-ban/",
            "title": "google hacking使用-改进版",
            "date_published": "2025-02-11T04:25:00.000Z",
            "content_html": "<h1 id=\"google-hacking使用-改进版\"><a href=\"#google-hacking使用-改进版\" class=\"headerlink\" title=\"google hacking使用-改进版\"></a>google hacking使用-改进版</h1><p>以下是 <strong>Google Hacking 的完整语法列表</strong>和<strong>高级组合示例</strong>，涵盖渗透测试、信息收集、漏洞挖掘等场景的实用技巧。所有语法均基于 Google 搜索引擎的合法功能，但请严格遵守法律和道德规范。</p>\n<hr>\n<h3 id=\"一、完整-Google-Hacking-语法列表\"><a href=\"#一、完整-Google-Hacking-语法列表\" class=\"headerlink\" title=\"一、完整 Google Hacking 语法列表\"></a><strong>一、完整 Google Hacking 语法列表</strong></h3><h4 id=\"1-基础操作符\"><a href=\"#1-基础操作符\" class=\"headerlink\" title=\"1. 基础操作符\"></a><strong>1. 基础操作符</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>site:</code></td>\n<td align=\"left\">限定搜索特定域名或子域名</td>\n<td align=\"left\"><code>site:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>intitle:</code></td>\n<td align=\"left\">标题包含关键词</td>\n<td align=\"left\"><code>intitle:\"login\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>allintitle:</code></td>\n<td align=\"left\">标题包含所有指定关键词</td>\n<td align=\"left\"><code>allintitle:\"admin\" \"dashboard\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>inurl:</code></td>\n<td align=\"left\">URL 路径包含关键词</td>\n<td align=\"left\"><code>inurl:/admin</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>allinurl:</code></td>\n<td align=\"left\">URL 路径包含所有指定关键词</td>\n<td align=\"left\"><code>allinurl:login.php?user=</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>filetype:</code></td>\n<td align=\"left\">搜索特定文件类型</td>\n<td align=\"left\"><code>filetype:pdf \"confidential\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>ext:</code></td>\n<td align=\"left\">按文件扩展名搜索（同 <code>filetype:</code>）</td>\n<td align=\"left\"><code>ext:sql \"password\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>intext:</code></td>\n<td align=\"left\">正文内容包含关键词</td>\n<td align=\"left\"><code>intext:\"数据库密码\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>allintext:</code></td>\n<td align=\"left\">正文包含所有指定关键词</td>\n<td align=\"left\"><code>allintext:\"username\" \"password\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>cache:</code></td>\n<td align=\"left\">查看 Google 缓存的页面</td>\n<td align=\"left\"><code>cache:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>related:</code></td>\n<td align=\"left\">查找类似网站</td>\n<td align=\"left\"><code>related:github.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>info:</code></td>\n<td align=\"left\">获取网站的 Google 摘要信息</td>\n<td align=\"left\"><code>info:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>define:</code></td>\n<td align=\"left\">搜索词语定义</td>\n<td align=\"left\"><code>define:SQL注入</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"2-逻辑操作符\"><a href=\"#2-逻辑操作符\" class=\"headerlink\" title=\"2. 逻辑操作符\"></a><strong>2. 逻辑操作符</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>AND</code> 或空格</td>\n<td align=\"left\">同时满足多个条件</td>\n<td align=\"left\"><code>site:example.com 密码</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>OR</code></td>\n<td align=\"left\">满足任意一个条件</td>\n<td align=\"left\"><code>漏洞 OR 后门</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">排除关键词</td>\n<td align=\"left\"><code>登录 -site:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>()</code></td>\n<td align=\"left\">组合复杂逻辑</td>\n<td align=\"left\"><code>(inurl:admin OR intitle:admin) -论坛</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"3-高级操作符\"><a href=\"#3-高级操作符\" class=\"headerlink\" title=\"3. 高级操作符\"></a><strong>3. 高级操作符</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">通配符（匹配任意字符）</td>\n<td align=\"left\"><code>\"username:* password:*\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\"...\"</code></td>\n<td align=\"left\">精确匹配短语</td>\n<td align=\"left\"><code>\"您的密码错误\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>..</code></td>\n<td align=\"left\">数值范围搜索</td>\n<td align=\"left\"><code>价格 $100..$500</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>AROUND(N)</code></td>\n<td align=\"left\">关键词间距不超过 N 个词</td>\n<td align=\"left\"><code>\"密码\" AROUND(5) \"泄露\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>weather:</code></td>\n<td align=\"left\">搜索某地天气</td>\n<td align=\"left\"><code>weather:北京</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>stocks:</code></td>\n<td align=\"left\">搜索股票代码</td>\n<td align=\"left\"><code>stocks:GOOG</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"4-隐藏功能\"><a href=\"#4-隐藏功能\" class=\"headerlink\" title=\"4. 隐藏功能\"></a><strong>4. 隐藏功能</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>时间筛选</strong></td>\n<td align=\"left\">限定时间范围（通过搜索工具栏）</td>\n<td align=\"left\">最近一年、自定义日期</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>图片搜索</strong></td>\n<td align=\"left\">通过图片反向搜索敏感信息</td>\n<td align=\"left\">上传图片查找来源</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>地图数据</strong></td>\n<td align=\"left\">搜索暴露的地理标记信息</td>\n<td align=\"left\"><code>intitle:\"security camera\" site:google.com/maps</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"二、组合示例大全（按场景分类）\"><a href=\"#二、组合示例大全（按场景分类）\" class=\"headerlink\" title=\"二、组合示例大全（按场景分类）\"></a><strong>二、组合示例大全</strong>（按场景分类）</h3><h4 id=\"1-敏感文件泄露\"><a href=\"#1-敏感文件泄露\" class=\"headerlink\" title=\"1. 敏感文件泄露\"></a><strong>1. 敏感文件泄露</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>数据库备份</strong></td>\n<td align=\"left\"><code>filetype:sql \"DROP TABLE\" site:example.com</code></td>\n<td align=\"left\">搜索 SQL 备份文件</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>配置文件</strong></td>\n<td align=\"left\"><code>intitle:\"index of\" \"config.php\"</code></td>\n<td align=\"left\">查找 PHP 配置文件</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>日志文件</strong></td>\n<td align=\"left\"><code>ext:log \"error\" \"password\"</code></td>\n<td align=\"left\">包含密码的日志文件</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>密钥文件</strong></td>\n<td align=\"left\"><code>filetype:key private</code></td>\n<td align=\"left\">私钥文件泄露</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-后台与登录页面\"><a href=\"#2-后台与登录页面\" class=\"headerlink\" title=\"2. 后台与登录页面\"></a><strong>2. 后台与登录页面</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>管理员后台</strong></td>\n<td align=\"left\"><code>intitle:\"admin login\" inurl:/admin</code></td>\n<td align=\"left\">未授权访问的管理页面</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>默认密码</strong></td>\n<td align=\"left\"><code>\"默认密码\" site:routerlogin.net</code></td>\n<td align=\"left\">设备默认凭据</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>弱口令提示</strong></td>\n<td align=\"left\"><code>intext:\"用户名或密码错误\" inurl:login</code></td>\n<td align=\"left\">登录页面错误信息</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-漏洞利用\"><a href=\"#3-漏洞利用\" class=\"headerlink\" title=\"3. 漏洞利用\"></a><strong>3. 漏洞利用</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>SQL 注入点</strong></td>\n<td align=\"left\"><code>inurl:\"id=\" &amp; intext:\"Warning: mysql\"</code></td>\n<td align=\"left\">存在报错信息的注入点</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>目录遍历</strong></td>\n<td align=\"left\"><code>intitle:\"index of /\" \"parent directory\"</code></td>\n<td align=\"left\">开放目录列表</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>API 接口暴露</strong></td>\n<td align=\"left\"><code>inurl:/api/v1 intext:\"apikey\"</code></td>\n<td align=\"left\">泄露的 API 密钥</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-设备与系统\"><a href=\"#4-设备与系统\" class=\"headerlink\" title=\"4. 设备与系统\"></a><strong>4. 设备与系统</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>网络摄像头</strong></td>\n<td align=\"left\"><code>inurl:/view.shtml intitle:\"Live View\"</code></td>\n<td align=\"left\">公开的摄像头流</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>路由器管理</strong></td>\n<td align=\"left\"><code>intitle:\"RouterOS\" \"admin\"</code></td>\n<td align=\"left\">未授权的路由器配置页面</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>打印机控制台</strong></td>\n<td align=\"left\"><code>inurl:\"/hp/device/this.LCDispatcher\"</code></td>\n<td align=\"left\">惠普打印机管理界面</td>\n</tr>\n</tbody></table>\n<h4 id=\"5-开源情报（OSINT）\"><a href=\"#5-开源情报（OSINT）\" class=\"headerlink\" title=\"5. 开源情报（OSINT）\"></a><strong>5. 开源情报（OSINT）</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>员工信息</strong></td>\n<td align=\"left\"><code>site:linkedin.com \"CTO\" \"example.com\"</code></td>\n<td align=\"left\">通过 LinkedIn 收集员工职位</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>文档元数据</strong></td>\n<td align=\"left\"><code>filetype:docx \"作者：张三\"</code></td>\n<td align=\"left\">从 Office 文档提取创建者信息</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>GitHub 泄露</strong></td>\n<td align=\"left\"><code>\"github.com\" \"password\" extension:env</code></td>\n<td align=\"left\">GitHub 中的敏感环境变量文件</td>\n</tr>\n</tbody></table>\n<h4 id=\"6-错误信息泄露\"><a href=\"#6-错误信息泄露\" class=\"headerlink\" title=\"6. 错误信息泄露\"></a><strong>6. 错误信息泄露</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>调试模式</strong></td>\n<td align=\"left\"><code>intext:\"DEBUG MODE\" \"PHP\"</code></td>\n<td align=\"left\">开启调试模式的网站</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>数据库报错</strong></td>\n<td align=\"left\"><code>\"ORA-12541: TNS 无监听程序\"</code></td>\n<td align=\"left\">Oracle 数据库错误信息</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>堆栈跟踪</strong></td>\n<td align=\"left\"><code>intext:\"at java.lang.Thread\"</code></td>\n<td align=\"left\">Java 应用崩溃日志</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"三、高阶组合技巧\"><a href=\"#三、高阶组合技巧\" class=\"headerlink\" title=\"三、高阶组合技巧\"></a><strong>三、高阶组合技巧</strong></h3><h4 id=\"1-通配符与模糊搜索\"><a href=\"#1-通配符与模糊搜索\" class=\"headerlink\" title=\"1. 通配符与模糊搜索\"></a><strong>1. 通配符与模糊搜索</strong></h4><ul>\n<li>搜索带参数的 URL：<br><code>inurl:*.php?id= *</code></li>\n<li>查找密码重置链接：<br><code>\"password reset\" site:example.com inurl:token=*</code></li>\n</ul>\n<h4 id=\"2-时间范围限定\"><a href=\"#2-时间范围限定\" class=\"headerlink\" title=\"2. 时间范围限定\"></a><strong>2. 时间范围限定</strong></h4><ul>\n<li>查找近期泄露的数据库：<br><code>filetype:sql \"INSERT INTO users\" after:2023-01-01</code></li>\n</ul>\n<h4 id=\"3-混合逻辑精准定位\"><a href=\"#3-混合逻辑精准定位\" class=\"headerlink\" title=\"3. 混合逻辑精准定位\"></a><strong>3. 混合逻辑精准定位</strong></h4><ul>\n<li>排除干扰结果：<br><code>(intitle:\"管理后台\" OR inurl:/admin) -site:gov.cn</code></li>\n<li>组合文件类型与关键词：<br><code>filetype:xls \"员工工资\" site:example.com</code></li>\n</ul>\n<h4 id=\"4-利用错误消息\"><a href=\"#4-利用错误消息\" class=\"headerlink\" title=\"4. 利用错误消息\"></a><strong>4. 利用错误消息</strong></h4><ul>\n<li>发现 SQL 注入漏洞：<br><code>\"You have an error in your SQL syntax\"</code></li>\n<li>识别配置错误：<br><code>\"Access denied for user 'root'@'localhost'\"</code></li>\n</ul>\n<hr>\n<h3 id=\"四、防御建议（补充）\"><a href=\"#四、防御建议（补充）\" class=\"headerlink\" title=\"四、防御建议（补充）\"></a><strong>四、防御建议（补充）</strong></h3><ol>\n<li><strong>robots.txt 配置</strong>：禁止爬虫访问敏感路径（如 <code>/admin</code>、<code>/config</code>）。</li>\n<li><strong>文件权限控制</strong>：避免将备份文件（<code>.bak</code>、<code>.sql</code>）存放在 Web 目录。</li>\n<li><strong>错误信息隐藏</strong>：自定义错误页面，避免暴露堆栈跟踪。</li>\n<li><strong>定期搜索自身</strong>：用 <code>site:yourdomain.com</code> 检查公开信息泄露。</li>\n</ol>\n<hr>\n<h3 id=\"五、工具增强\"><a href=\"#五、工具增强\" class=\"headerlink\" title=\"五、工具增强\"></a><strong>五、工具增强</strong></h3><ul>\n<li><strong>Google Dork 自动化</strong>：<ul>\n<li><a href=\"https://www.exploit-db.com/google-hacking-database\">GHDB</a>：直接搜索预定义的漏洞语法。</li>\n<li><a href=\"https://github.com/...\">DorkGenius</a>：自动生成高级 Dork 语句。</li>\n</ul>\n</li>\n<li><strong>监控与告警</strong>：<ul>\n<li>使用 <code>Google Alerts</code> 监控公司关键词（如 <code>site:example.com password</code>）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"六、合法与道德提醒\"><a href=\"#六、合法与道德提醒\" class=\"headerlink\" title=\"六、合法与道德提醒\"></a><strong>六、合法与道德提醒</strong></h3><ul>\n<li><strong>仅用于授权测试</strong>：渗透前需获得书面许可。</li>\n<li><strong>漏洞报告</strong>：发现漏洞后联系管理员，参考《<a href=\"https://www.rfc-editor.org/rfc/rfc9116\">漏洞披露规范</a>》。</li>\n<li><strong>避免敏感数据</strong>：示例中的关键词均为演示用途，请勿针对真实系统测试。</li>\n</ul>\n<h3 id=\"七、语法解析与示例\"><a href=\"#七、语法解析与示例\" class=\"headerlink\" title=\"七、语法解析与示例\"></a>七、<strong>语法解析与示例</strong></h3><h4 id=\"1-index-of-admin\"><a href=\"#1-index-of-admin\" class=\"headerlink\" title=\"1. index of /admin\"></a><strong>1. <code>index of /admin</code></strong></h4><ul>\n<li><strong>用途</strong>：搜索开放目录列表中的 <code>/admin</code> 目录（常见管理后台路径）。</li>\n<li><strong>风险</strong>：暴露后台登录页面、未授权访问管理界面。</li>\n<li><strong>防御</strong>：禁用目录列表（Apache: <code>Options -Indexes</code>），设置访问权限（如 IP 白名单）。</li>\n</ul>\n<h4 id=\"2-index-of-passwd\"><a href=\"#2-index-of-passwd\" class=\"headerlink\" title=\"2. index of /passwd\"></a><strong>2. <code>index of /passwd</code></strong></h4><ul>\n<li><strong>用途</strong>：查找 Unix/Linux 系统中的 <code>/etc/passwd</code> 文件（用户账户信息）。</li>\n<li><strong>风险</strong>：泄露用户名、UID/GID 等敏感信息（现代系统密码存储在 <code>/etc/shadow</code>）。</li>\n<li><strong>防御</strong>：确保 <code>/etc/passwd</code> 文件权限为 <code>644</code>，禁止 Web 访问系统文件。</li>\n</ul>\n<h4 id=\"3-index-of-password\"><a href=\"#3-index-of-password\" class=\"headerlink\" title=\"3. index of /password\"></a><strong>3. <code>index of /password</code></strong></h4><ul>\n<li><strong>用途</strong>：搜索包含 “password” 关键词的目录或文件（如明文密码文件）。</li>\n<li><strong>风险</strong>：直接获取明文密码或哈希值。</li>\n<li><strong>防御</strong>：避免在代码或文件中明文存储密码，使用环境变量或密钥管理服务。</li>\n</ul>\n<h4 id=\"4-index-of-mail\"><a href=\"#4-index-of-mail\" class=\"headerlink\" title=\"4. index of /mail\"></a><strong>4. <code>index of /mail</code></strong></h4><ul>\n<li><strong>用途</strong>：查找邮件服务器或邮件存储目录（如 <code>/var/mail</code>）。</li>\n<li><strong>风险</strong>：泄露用户邮件内容、账户信息。</li>\n<li><strong>防御</strong>：限制邮件目录的 Web 访问权限，加密存储敏感数据。</li>\n</ul>\n<h4 id=\"5-“index-of-“-passwd\"><a href=\"#5-“index-of-“-passwd\" class=\"headerlink\" title=\"5. “index of /“ +passwd\"></a><strong>5. <code>“index of /“ +passwd</code></strong></h4><ul>\n<li><strong>用途</strong>：在根目录下搜索 <code>passwd</code> 文件。</li>\n<li><strong>示例结果</strong>：可能发现 <code>/etc/passwd</code> 被错误链接到 Web 根目录。</li>\n<li><strong>防御</strong>：检查 Web 目录中是否存在符号链接到系统文件。</li>\n</ul>\n<h4 id=\"6-“index-of-“-password-txt\"><a href=\"#6-“index-of-“-password-txt\" class=\"headerlink\" title=\"6. “index of /“ +password.txt\"></a><strong>6. <code>“index of /“ +password.txt</code></strong></h4><ul>\n<li><strong>用途</strong>：查找 Web 根目录下的 <code>password.txt</code> 文件。</li>\n<li><strong>风险</strong>：明文密码文件可直接下载。</li>\n<li><strong>防御</strong>：删除测试或临时文件，禁用目录列表。</li>\n</ul>\n<h4 id=\"7-“index-of-“-htaccess\"><a href=\"#7-“index-of-“-htaccess\" class=\"headerlink\" title=\"7. “index of /“ +.htaccess\"></a><strong>7. <code>“index of /“ +.htaccess</code></strong></h4><ul>\n<li><strong>用途</strong>：暴露 Apache 服务器的 <code>.htaccess</code> 配置文件。</li>\n<li><strong>风险</strong>：泄露重定向规则、认证凭据（如 <code>AuthUserFile</code> 路径）。</li>\n<li><strong>防御</strong>：限制 <code>.htaccess</code> 文件权限（如 <code>600</code>），避免存储敏感信息。</li>\n</ul>\n<h4 id=\"8-“index-of-root”\"><a href=\"#8-“index-of-root”\" class=\"headerlink\" title=\"8. “index of /root”\"></a><strong>8. <code>“index of /root”</code></strong></h4><ul>\n<li><strong>用途</strong>：搜索 Unix 系统超级用户（root）的主目录。</li>\n<li><strong>风险</strong>：泄露 root 用户的 SSH 密钥、脚本或日志。</li>\n<li><strong>防御</strong>：确保 <code>/root</code> 目录权限为 <code>700</code>，禁止 Web 服务器访问。</li>\n</ul>\n<h4 id=\"9-“index-of-cgi-bin”\"><a href=\"#9-“index-of-cgi-bin”\" class=\"headerlink\" title=\"9. “index of /cgi-bin”\"></a><strong>9. <code>“index of /cgi-bin”</code></strong></h4><ul>\n<li><strong>用途</strong>：查找 CGI 脚本目录（常见于老旧系统）。</li>\n<li><strong>风险</strong>：利用 CGI 漏洞（如 Shellshock）执行远程代码。</li>\n<li><strong>防御</strong>：升级或禁用 CGI 模块，设置严格的脚本权限。</li>\n</ul>\n<h4 id=\"10-“index-of-logs”\"><a href=\"#10-“index-of-logs”\" class=\"headerlink\" title=\"10. “index of /logs”\"></a><strong>10. <code>“index of /logs”</code></strong></h4><ul>\n<li><strong>用途</strong>：暴露日志文件目录（如访问日志、错误日志）。</li>\n<li><strong>风险</strong>：日志中可能包含敏感信息（如 SQL 错误中的数据库密码）。</li>\n<li><strong>防御</strong>：将日志存储在非 Web 目录，定期清理并加密存档。</li>\n</ul>\n<h4 id=\"11-“index-of-config”\"><a href=\"#11-“index-of-config”\" class=\"headerlink\" title=\"11. “index of /config”\"></a><strong>11. <code>“index of /config”</code></strong></h4><ul>\n<li><strong>用途</strong>：查找配置文件目录（如数据库连接信息）。</li>\n<li><strong>风险</strong>：泄露 <code>config.php</code>、<code>settings.ini</code> 等文件。</li>\n<li><strong>防御</strong>：将配置文件移出 Web 目录，使用环境变量注入配置。</li>\n</ul>\n",
            "tags": [
                "google"
            ]
        }
    ]
}