{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2024/08/09/git-shi-yong/",
            "url": "https://0xdadream.github.io/2024/08/09/git-shi-yong/",
            "title": "git使用",
            "date_published": "2024-08-09T01:25:00.000Z",
            "content_html": "<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h3 id=\"1-安装-Git\"><a href=\"#1-安装-Git\" class=\"headerlink\" title=\"1. 安装 Git\"></a>1. 安装 Git</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><ol>\n<li>从 <a href=\"https://git-scm.com/download/win\">Git 官方网站</a> 下载 Git 安装程序。</li>\n<li>双击安装程序并按照提示完成安装。</li>\n</ol>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><ol>\n<li><p>使用包管理器安装 Git（以 Ubuntu 为例）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"2-配置-Git\"><a href=\"#2-配置-Git\" class=\"headerlink\" title=\"2. 配置 Git\"></a>2. 配置 Git</h3><p>安装完成后，配置用户名和邮箱：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"你的名字\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-创建-SSH-Key\"><a href=\"#3-创建-SSH-Key\" class=\"headerlink\" title=\"3. 创建 SSH Key\"></a>3. 创建 SSH Key</h3><p>如果需要使用 SSH 方式连接 GitHub，生成 SSH key 并添加到 GitHub。</p>\n<h4 id=\"生成-SSH-Key\"><a href=\"#生成-SSH-Key\" class=\"headerlink\" title=\"生成 SSH Key\"></a>生成 SSH Key</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh-keygen -t rsa -C \"你的邮箱\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>按提示操作，默认保存位置即可。生成完成后，使用以下命令查看公钥：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"添加-SSH-Key-到-GitHub\"><a href=\"#添加-SSH-Key-到-GitHub\" class=\"headerlink\" title=\"添加 SSH Key 到 GitHub\"></a>添加 SSH Key 到 GitHub</h4><ol>\n<li>登录 GitHub，进入 <a href=\"https://github.com/settings/keys\">SSH and GPG keys</a> 页面。</li>\n<li>点击 “New SSH key”，粘贴上一步生成的公钥内容，点击 “Add SSH key”。</li>\n</ol>\n<h3 id=\"4-创建-Git-仓库\"><a href=\"#4-创建-Git-仓库\" class=\"headerlink\" title=\"4. 创建 Git 仓库\"></a>4. 创建 Git 仓库</h3><h4 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h4><ol>\n<li><p>创建一个新的目录并进入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> my_project\n<span class=\"token builtin class-name\">cd</span> my_project<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>初始化 Git 仓库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h4><ol>\n<li><p>登录 GitHub，点击右上角 “+”，选择 “New repository”。</p>\n</li>\n<li><p>填写仓库名和描述，点击 “Create repository”。</p>\n</li>\n<li><p><code>.gitignore</code> 文件用于告诉 Git 哪些文件或目录不应该被添加到版本控制中。它在 Git 项目中非常重要，特别是当你的项目包含一些不需要共享的文件，如编译后的二进制文件、临时文件、或包含敏感信息的配置文件。</p>\n<p><code>.gitignore</code> 文件通常放在项目的根目录下，但你也可以在子目录中添加 <code>.gitignore</code> 文件，作用范围仅限于该目录及其子目录。</p>\n<p><code>.gitignore</code> 文件的语法</p>\n<ul>\n<li><p><strong>忽略特定文件或目录</strong>：在 <code>.gitignore</code> 中直接写上文件名或目录名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 忽略文件</span>\nsecret.txt\n\n<span class=\"token comment\"># 忽略目录</span>\n/logs/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>通配符</strong>：使用 <code>*</code> 代表任意字符，<code>?</code> 代表单个字符，<code>[abc]</code> 代表匹配集合中的任意一个字符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 忽略所有 .log 文件</span>\n*.log\n\n<span class=\"token comment\"># 忽略以 \"temp\" 开头的文件</span>\ntemp*\n\n<span class=\"token comment\"># 忽略名为 \"backup\" 或 \"bak\" 的文件</span>\n*.<span class=\"token punctuation\">[</span>bB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>aA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>kK<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>排除规则</strong>：以 <code>!</code> 开头的行用于排除某些文件或目录，这些文件即使符合前面的忽略规则也不会被忽略。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 忽略所有 .log 文件，但不忽略 important.log</span>\n*.log\n<span class=\"token operator\">!</span>important.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>指定路径</strong>：使用斜杠 <code>/</code> 来表示目录路径。以斜杠开头表示从根目录开始匹配。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 只忽略根目录下的 \"config.json\"，不忽略其他目录中的 \"config.json\"</span>\n/config.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-关联本地仓库与远程仓库\"><a href=\"#5-关联本地仓库与远程仓库\" class=\"headerlink\" title=\"5. 关联本地仓库与远程仓库\"></a>5. 关联本地仓库与远程仓库</h3><p>在本地仓库中，执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:你的用户名/仓库名.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>git remote add</code> 是一个 Git 命令，用于向你的本地仓库添加一个远程仓库。一个远程仓库是一个托管在某个服务器上的 Git 仓库，你可以将本地的更改推送到远程仓库，也可以从远程仓库拉取更新。</p>\n<p><code>origin</code> 是这个远程仓库的名字。你可以把它理解为远程仓库的一个别名，便于你以后引用这个远程仓库。在大多数情况下，<code>origin</code> 是默认的名字，用于指向你克隆的或第一次关联的远程仓库。</p>\n<p>通过执行这条命令，你告诉 Git：**这个本地仓库的远程仓库是位于 GitHub 上的 <code>git@github.com:你的用户名/仓库名.git</code> 这个位置，并且将它命名为 <code>origin</code>**。</p>\n<p>之后，你可以使用类似 <code>git push origin master</code> 的命令将本地的代码推送到 GitHub 上的远程仓库，或者使用 <code>git pull origin master</code> 从 GitHub 上拉取更新。</p>\n<h3 id=\"6-基本-Git-操作\"><a href=\"#6-基本-Git-操作\" class=\"headerlink\" title=\"6. 基本 Git 操作\"></a>6. 基本 Git 操作</h3><h4 id=\"添加文件并提交\"><a href=\"#添加文件并提交\" class=\"headerlink\" title=\"添加文件并提交\"></a>添加文件并提交</h4><p>提交前的工作目录是工作区（文件操作的区域）</p>\n<p>添加文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这条命令用于将指定的文件添加到 Git 的暂存区（Stage）。暂存区是一个临时区域，你可以在其中暂时存放那些你准备提交到仓库的更改。文件在添加到暂存区之前，可以进行修改，而这些修改不会立即提交到仓库中。</p>\n<p>或添加所有文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>提交到本地仓库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"提交信息\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这条命令用于将暂存区中的所有内容提交到本地 Git 仓库，并为此次提交添加一条消息。<code>-m \"提交信息\"</code> 选项允许你在命令行中直接输入一条提交信息，而不需要进入编辑器。</p>\n<h4 id=\"查看暂存区的文件\"><a href=\"#查看暂存区的文件\" class=\"headerlink\" title=\"查看暂存区的文件\"></a>查看暂存区的文件</h4><p><code>git status</code> 命令会显示工作区和暂存区的状态，包括哪些文件被修改但尚未添加到暂存区，以及哪些文件已经被添加到暂存区。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出中，暂存区中的文件会显示在 <code>Changes to be committed</code> 部分。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Changes to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git restore --staged &lt;file&gt;...\"</span> to unstage<span class=\"token punctuation\">)</span>\n        modified:   index.html\n        new file:   style.css<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这意味着 <code>index.html</code> 文件已被修改并添加到暂存区，而 <code>style.css</code> 是一个新文件，也已经被添加到暂存区。</p>\n<h4 id=\"使用-git-diff-cached-查看暂存区的更改\"><a href=\"#使用-git-diff-cached-查看暂存区的更改\" class=\"headerlink\" title=\"使用 git diff --cached 查看暂存区的更改\"></a>使用 <code>git diff --cached</code> 查看暂存区的更改</h4><p><code>git diff --cached</code> 命令会显示暂存区中的更改细节。这个命令的输出与 <code>git diff</code> 类似，但只显示暂存区中的内容，而不包括工作区中尚未添加到暂存区的修改。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token parameter variable\">--cached</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者你也可以使用 <code>git diff --staged</code>，效果是一样的。</p>\n<p>这个命令将显示具体的代码差异，即哪些行被修改、添加或删除。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">diff</span> <span class=\"token parameter variable\">--git</span> a/index.html b/index.html\nindex 83b2d7e<span class=\"token punctuation\">..</span>e39a4ff <span class=\"token number\">100644</span>\n--- a/index.html\n+++ b/index.html\n@@ -12,7 +12,7 @@\n   <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">&gt;</span>My Website<span class=\"token operator\">&lt;</span>/title<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>/head<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">&gt;</span>\n-  <span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span>Hello, World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span>\n+  <span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span>Welcome to My Website<span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span>\n <span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"从-Git-暂存区移除文件\"><a href=\"#从-Git-暂存区移除文件\" class=\"headerlink\" title=\"从 Git 暂存区移除文件\"></a>从 Git 暂存区移除文件</h4><h5 id=\"使用-git-restore-staged\"><a href=\"#使用-git-restore-staged\" class=\"headerlink\" title=\"使用 git restore --staged\"></a>使用 <code>git restore --staged</code></h5><p>用于将文件从暂存区移除，并恢复到工作区的状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> restore <span class=\"token parameter variable\">--staged</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"使用-git-reset\"><a href=\"#使用-git-reset\" class=\"headerlink\" title=\"使用 git reset\"></a>使用 <code>git reset</code></h5><p>用于回滚或取消更改。使用 <code>git reset</code> 也可以将文件从暂存区移除。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"移除所有文件\"><a href=\"#移除所有文件\" class=\"headerlink\" title=\"移除所有文件\"></a>移除所有文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将把暂存区中的所有文件全部移除，同时保留它们在工作区中的修改。</p>\n<h4 id=\"恢复工作区文件\"><a href=\"#恢复工作区文件\" class=\"headerlink\" title=\"恢复工作区文件\"></a>恢复工作区文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -- test.txt\n<span class=\"token function\">git</span> checkout <span class=\"token comment\"># 直接还原为最新版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>是用于丢弃工作区中对 <code>txt</code> 文件的所有未提交更改的命令。具体来说，它将 <code>txt</code> 文件恢复到最后一次提交时的状态。</p>\n<h4 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h4><h5 id=\"使用-git-reset-回退版本\"><a href=\"#使用-git-reset-回退版本\" class=\"headerlink\" title=\"使用 git reset 回退版本\"></a>使用 <code>git reset</code> 回退版本</h5><p><code>git reset</code> 用于回退到某个特定的提交，并且可以选择性地影响暂存区和工作区。</p>\n<p>常用选项：</p>\n<ul>\n<li><code>--soft</code>：仅移动 <code>HEAD</code>，不影响暂存区和工作区。回退后的所有更改都保留在暂存区中。（HEAD为当前版本）</li>\n<li><code>--mixed</code>（默认选项）：移动 <code>HEAD</code>，并重置暂存区，但保留工作区的更改。回退后的更改仍在工作区，但不在暂存区。</li>\n<li><code>--hard</code>：移动 <code>HEAD</code>，同时重置暂存区和工作区。回退后的所有更改都被删除，不可恢复。</li>\n</ul>\n<p>假设你想回退到特定的提交 <code>abc123</code>。</p>\n<ul>\n<li><p><strong>软回退：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将把当前分支指针（<code>HEAD</code>）移到 <code>abc123</code>，但保持工作区和暂存区的所有更改。</p>\n</li>\n<li><p><strong>混合回退：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--mixed</span> abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将回退到 <code>abc123</code>，并将暂存区重置为该提交的状态，但保留工作区的更改。</p>\n</li>\n<li><p><strong>硬回退：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将回退到 <code>abc123</code>，并删除所有在 <code>abc123</code> 之后的更改。这个操作不可逆，因此使用前请务必确认。</p>\n</li>\n</ul>\n<h5 id=\"使用-git-revert-进行安全回退\"><a href=\"#使用-git-revert-进行安全回退\" class=\"headerlink\" title=\"使用 git revert 进行安全回退\"></a>使用 <code>git revert</code> 进行安全回退</h5><p><code>git revert</code> 用于生成一个新的提交，该提交会撤销指定的历史提交，而不会改变项目的提交历史。<code>git revert</code> 是一种“安全”的回退方式，因为它保留了所有历史记录。</p>\n<p>假设你想撤销提交 <code>abc123</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> revert abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将生成一个新的提交，它的作用是撤销 <code>abc123</code> 所做的更改，而不会影响 <code>abc123</code> 之前或之后的其他提交。</p>\n<h5 id=\"使用-git-checkout-回退到特定提交（仅查看）\"><a href=\"#使用-git-checkout-回退到特定提交（仅查看）\" class=\"headerlink\" title=\"使用 git checkout 回退到特定提交（仅查看）\"></a>使用 <code>git checkout</code> 回退到特定提交（仅查看）</h5><p><code>git checkout</code> 主要用于切换分支或查看特定提交。你可以暂时回退到某个提交，但不修改当前分支的状态。</p>\n<p>假设你想查看 <code>abc123</code> 提交的状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将把工作区和暂存区切换到 <code>abc123</code> 提交的状态，但不会更改当前分支的指针。如果你想回到最新的状态，可以使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（假设你在 <code>master</code> 分支上）</p>\n<h5 id=\"如何找到提交的哈希值\"><a href=\"#如何找到提交的哈希值\" class=\"headerlink\" title=\"如何找到提交的哈希值\"></a>如何找到提交的哈希值</h5><p>在执行版本回退前，你需要知道要回退到的提交的哈希值（类似 <code>abc123</code>）。可以使用以下命令查看提交历史：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline <span class=\"token comment\"># 显示一行</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD^ <span class=\"token comment\"># 回退上一个版本</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD^^ <span class=\"token comment\"># 同理</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD~10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这将显示所有提交的日志，包括提交哈希、作者、日期和提交信息。</p>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><p><code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的</p>\n<h4 id=\"推送到远程仓库\"><a href=\"#推送到远程仓库\" class=\"headerlink\" title=\"推送到远程仓库\"></a>推送到远程仓库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin master\n<span class=\"token function\">git</span> remote <span class=\"token parameter variable\">-v</span> <span class=\"token comment\">#查看远程库信息</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">rm</span> origin <span class=\"token comment\"># 删除关联</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:你的用户名/仓库名.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"拉取更新\"><a href=\"#拉取更新\" class=\"headerlink\" title=\"拉取更新\"></a>拉取更新</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-分支管理\"><a href=\"#7-分支管理\" class=\"headerlink\" title=\"7. 分支管理\"></a>7. 分支管理</h3><h4 id=\"1-创建分支\"><a href=\"#1-创建分支\" class=\"headerlink\" title=\"1. 创建分支\"></a>1. 创建分支</h4><p>要创建一个新的分支，使用 <code>git branch</code> 命令。新分支会基于你当前所在的分支创建。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会创建一个名为 <code>feature/new-feature</code> 的新分支，但不会切换到该分支。</p>\n<h4 id=\"2-切换分支\"><a href=\"#2-切换分支\" class=\"headerlink\" title=\"2. 切换分支\"></a>2. 切换分支</h4><p>使用 <code>git checkout</code> 或 <code>git switch</code> 来切换到其他分支。在 Git 2.23 之后，Git 引入了 <code>git switch</code>，它专门用于切换分支，更加直观和安全。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> switch feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将切换到 <code>feature/new-feature</code> 分支，并更新工作区和暂存区以匹配该分支的状态。</p>\n<h4 id=\"3-创建并切换到新分支\"><a href=\"#3-创建并切换到新分支\" class=\"headerlink\" title=\"3. 创建并切换到新分支\"></a>3. 创建并切换到新分支</h4><p>可以使用 <code>git checkout -b</code> 或 <code>git switch -c</code> 在创建新分支的同时切换到该分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> switch <span class=\"token parameter variable\">-c</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将创建 <code>feature/new-feature</code> 分支并立即切换到该分支。</p>\n<h4 id=\"4-查看分支\"><a href=\"#4-查看分支\" class=\"headerlink\" title=\"4. 查看分支\"></a>4. 查看分支</h4><p>要查看所有分支，可以使用 <code>git branch</code> 命令。当前所在的分支会以 <code>*</code> 标记。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">  develop\n* feature/new-feature\n  master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这表明你当前在 <code>feature/new-feature</code> 分支上。</p>\n<h4 id=\"5-合并分支\"><a href=\"#5-合并分支\" class=\"headerlink\" title=\"5. 合并分支\"></a>5. 合并分支</h4><p>当你完成了在某个分支上的工作并希望将其合并回主分支（例如 <code>master</code> 或 <code>develop</code>），你可以使用 <code>git merge</code> 命令。</p>\n<p>合并分支的步骤：</p>\n<ol>\n<li><p>切换到目标分支（通常是 master 或 develop）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>合并工作分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> merge feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将把 <code>feature/new-feature</code>分支的更改合并到 <code>master</code>分支中。如果没有冲突，Git 会自动完成合并。如果有冲突，需要手动解决后再完成合并。</p>\n</li>\n</ol>\n<h4 id=\"6-处理合并冲突\"><a href=\"#6-处理合并冲突\" class=\"headerlink\" title=\"6. 处理合并冲突\"></a>6. 处理合并冲突</h4><p>当 Git 无法自动合并两个分支时，会提示合并冲突。此时，需要手动编辑冲突的文件，解决冲突后再继续合并。</p>\n<ol>\n<li><p>打开冲突文件，找到冲突标记：</p>\n<pre class=\"line-numbers language-diff\" data-language=\"diff\"><code class=\"language-diff\"><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n</span></span>当前分支的代码\n=======\n被合并分支的代码\n<span class=\"token inserted-arrow inserted\"><span class=\"token prefix inserted\">&gt;</span><span class=\"token line\">&gt;&gt;&gt;&gt;&gt;&gt; feature/new-feature</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>手动解决冲突</strong>，编辑文件使其符合预期。</p>\n</li>\n<li><p>标记冲突为已解决并提交：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> 冲突文件\n<span class=\"token function\">git</span> commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"7-删除分支\"><a href=\"#7-删除分支\" class=\"headerlink\" title=\"7. 删除分支\"></a>7. 删除分支</h4><p>当一个分支的工作完成且不再需要时，可以将其删除。</p>\n<p>删除本地分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果分支尚未合并，Git 会阻止删除，以防丢失更改。要强制删除，可以使用 <code>-D</code> 选项：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除远程分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将删除远程仓库中的 <code>feature/new-feature</code> 分支。</p>\n<h4 id=\"8-远程分支\"><a href=\"#8-远程分支\" class=\"headerlink\" title=\"8. 远程分支\"></a>8. 远程分支</h4><p>远程分支是托管在远程仓库中的分支，例如 GitHub、GitLab 上的分支。通常，当你推送分支到远程仓库时，该分支会自动在远程仓库中创建。</p>\n<p>查看远程分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-r</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将列出所有远程分支。</p>\n<p>推送本地分支到远程：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将 <code>feature/new-feature</code> 分支推送到远程仓库的 <code>origin</code>（默认远程名称）上。</p>\n<h4 id=\"9-跟踪远程分支\"><a href=\"#9-跟踪远程分支\" class=\"headerlink\" title=\"9. 跟踪远程分支\"></a>9. 跟踪远程分支</h4><p>你可以将本地分支与远程分支关联，使推送和拉取更方便。</p>\n<h4 id=\"创建跟踪分支：\"><a href=\"#创建跟踪分支：\" class=\"headerlink\" title=\"创建跟踪分支：\"></a>创建跟踪分支：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> feature/new-feature origin/feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者，如果分支已经存在：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"10-更新远程分支\"><a href=\"#10-更新远程分支\" class=\"headerlink\" title=\"10. 更新远程分支\"></a>10. 更新远程分支</h4><p>要同步本地仓库与远程仓库的状态，使用 <code>git fetch</code> 或 <code>git pull</code>。</p>\n<p>拉取更新并合并：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将从远程 <code>master</code> 分支拉取最新的更改并合并到当前分支。</p>\n<p>仅获取更新（不合并）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> fetch origin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将更新本地的远程分支信息，但不合并更改。</p>\n<h3 id=\"8-存储进度\"><a href=\"#8-存储进度\" class=\"headerlink\" title=\"8.存储进度\"></a>8.存储进度</h3><p><code>git stash</code> 允许你将当前的工作进度（包括工作区和暂存区的更改）暂时存储起来，以便可以在一个干净的工作区中进行其他操作。之后，你可以随时恢复这些存储的更改。</p>\n<h4 id=\"1-基本命令：git-stash\"><a href=\"#1-基本命令：git-stash\" class=\"headerlink\" title=\"1. 基本命令：git stash\"></a>1. 基本命令：<code>git stash</code></h4><h5 id=\"1-1-存储当前工作区和暂存区的更改\"><a href=\"#1-1-存储当前工作区和暂存区的更改\" class=\"headerlink\" title=\"1.1 存储当前工作区和暂存区的更改\"></a>1.1 存储当前工作区和暂存区的更改</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将当前分支的工作区和暂存区的所有更改存储起来，工作区将恢复到最后一次提交时的状态。存储的更改会被放入一个“栈”中，供以后恢复使用。</p>\n<h5 id=\"1-2-存储时添加描述信息\"><a href=\"#1-2-存储时添加描述信息\" class=\"headerlink\" title=\"1.2 存储时添加描述信息\"></a>1.2 存储时添加描述信息</h5><p>你可以为存储的更改添加描述信息，以便更容易区分多个存储。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash save <span class=\"token string\">\"描述信息\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"2-查看存储：git-stash-list\"><a href=\"#2-查看存储：git-stash-list\" class=\"headerlink\" title=\"2. 查看存储：git stash list\"></a>2. 查看存储：<code>git stash list</code></h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会列出所有的存储记录，每一条记录都有唯一的索引和描述信息。输出示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">stash@<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span>: WIP on master: 5d1e76a 修复首页布局\nstash@<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>: WIP on master: 2a7b8d9 添加新功能<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>stash@{0}</code> 是最顶部的存储记录，<code>stash@{1}</code> 是次存储记录，依此类推。</p>\n<h4 id=\"3-恢复存储：git-stash-pop-和-git-stash-apply\"><a href=\"#3-恢复存储：git-stash-pop-和-git-stash-apply\" class=\"headerlink\" title=\"3. 恢复存储：git stash pop 和 git stash apply\"></a>3. 恢复存储：<code>git stash pop</code> 和 <code>git stash apply</code></h4><h5 id=\"3-1-git-stash-pop\"><a href=\"#3-1-git-stash-pop\" class=\"headerlink\" title=\"3.1 git stash pop\"></a>3.1 <code>git stash pop</code></h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将最近存储的更改恢复到工作区和暂存区，并将该存储记录从列表中删除。如果有冲突，Git 会提示手动解决冲突。</p>\n<h5 id=\"3-2-git-stash-apply\"><a href=\"#3-2-git-stash-apply\" class=\"headerlink\" title=\"3.2 git stash apply\"></a>3.2 <code>git stash apply</code></h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash apply<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将最近的存储恢复到工作区和暂存区，但不会删除该存储记录。如果你需要多次应用存储，使用 <code>apply</code> 比 <code>pop</code> 更合适。</p>\n<h4 id=\"3-3-恢复特定存储\"><a href=\"#3-3-恢复特定存储\" class=\"headerlink\" title=\"3.3 恢复特定存储\"></a>3.3 恢复特定存储</h4><p>如果有多个存储记录，你可以指定恢复某个特定的存储。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash apply stash@<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会恢复索引为 <code>stash@{1}</code> 的存储，并保留存储记录。</p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/07/27/shi-yong-cloudflare-de-r2-chuang-jian-tu-chuang/",
            "url": "https://0xdadream.github.io/2024/07/27/shi-yong-cloudflare-de-r2-chuang-jian-tu-chuang/",
            "title": "使用cloudflare的R2创建图床",
            "date_published": "2024-07-27T07:25:00.000Z",
            "content_html": "<h1 id=\"使用cloudflare的R2创建图床\"><a href=\"#使用cloudflare的R2创建图床\" class=\"headerlink\" title=\"使用cloudflare的R2创建图床\"></a>使用cloudflare的R2创建图床</h1><h2 id=\"创建存储桶\"><a href=\"#创建存储桶\" class=\"headerlink\" title=\"创建存储桶\"></a>创建存储桶</h2><p>首先有一个cloudflare账号并且成功开通R2服务</p>\n<p>依次点击R2-&gt;创建存储桶</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/8c361d6ac6f76ad87da98ce758a4261a.png\"></p>\n<p>进入创建的桶，点击设置，下滑点击连接到域，example.com为你在cloudflare上托管的域名，会自动添加记录</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/e02d80f0f528eb474a327a3ee2aac1cc.png\"></p>\n<p>等待初始化成功就可以上传图片了并通过url访问了</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/592642fec58d64822ca9dd28855095c9.png\"></p>\n<p>上传图片后点进去就能看到url</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/33de127f3053a3537919fae0a5b35c61.png\"></p>\n<h2 id=\"安装PicGo\"><a href=\"#安装PicGo\" class=\"headerlink\" title=\"安装PicGo\"></a>安装PicGo</h2><p>这个用于管理图片上传和浏览</p>\n<p>github仓库地址<a href=\"https://github.com/Molunerfinn/PicGo\">Releases · Molunerfinn/PicGo (github.com)</a>下载安装</p>\n<p>要先下载node.js环境，看往期文章</p>\n<p>完成后打开软件进入插件搜索<code>S3</code></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/9db03c02e835473d6d06852a17c625b4.png\"></p>\n<p>配置picgo</p>\n<p>先创建API令牌</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/658d705739daffbba58141c804c382d5.png\"></p>\n<p>然后像这样设置，创建完成记得保存密钥</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/3532bc2477a125fef6ac1db367b602d0.png\"></p>\n<p>保存密钥后关闭</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/5d17e288bc348b17904a78a2b0d48ae0.png\"></p>\n<p>打开软件，+号添加配置</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/22d21e489a73ad311ebd53ec422faee8.png\"></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/3ca6c26f83e255df9dce765281e8a034.png\"></p>\n<p>找到这个S3API</p>\n<p>如下填写</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/e2d3e9e11a19b0a3e1e2c6a7538ee923.png\"></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/2b5992966ed9d88fe80c8f1b8d242fac.png\"></p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/07/27/powershell-ti-quan/",
            "url": "https://0xdadream.github.io/2024/07/27/powershell-ti-quan/",
            "title": "powershell提权",
            "date_published": "2024-07-27T02:25:00.000Z",
            "content_html": "<h1 id=\"powershell提权\"><a href=\"#powershell提权\" class=\"headerlink\" title=\"powershell提权\"></a>powershell提权</h1><p>安装gsudo</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">winget <span class=\"token function\">install</span> gerardog.gsudo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><a href=\"https://gerardog.github.io/gsudo/docs/install\">How to Install | gsudo Documentation (gerardog.github.io)</a></p>\n",
            "tags": [
                "windows",
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/07/27/ming-ling-xing-shu-ru-python-tiao-zhuan-wei-ruan-shang-dian/",
            "url": "https://0xdadream.github.io/2024/07/27/ming-ling-xing-shu-ru-python-tiao-zhuan-wei-ruan-shang-dian/",
            "title": "命令行输入python跳转微软商店",
            "date_published": "2024-07-27T01:25:00.000Z",
            "content_html": "<h1 id=\"命令行输入python跳转微软商店\"><a href=\"#命令行输入python跳转微软商店\" class=\"headerlink\" title=\"命令行输入python跳转微软商店\"></a>命令行输入python跳转微软商店</h1><p>删除环境变量</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/644f05c4b54d27b5796941ad33aea87a.png\"></p>\n",
            "tags": [
                "bug"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/07/20/linux-mei-hua-ming-ling-xing/",
            "url": "https://0xdadream.github.io/2024/07/20/linux-mei-hua-ming-ling-xing/",
            "title": "linux美化命令行",
            "date_published": "2024-07-19T22:25:00.000Z",
            "content_html": "<h1 id=\"linux美化命令行\"><a href=\"#linux美化命令行\" class=\"headerlink\" title=\"linux美化命令行\"></a>linux美化命令行</h1><h2 id=\"centos8\"><a href=\"#centos8\" class=\"headerlink\" title=\"centos8\"></a>centos8</h2><h3 id=\"安装和配置-Zsh\"><a href=\"#安装和配置-Zsh\" class=\"headerlink\" title=\"安装和配置 Zsh\"></a>安装和配置 Zsh</h3><p>首先，安装 Zsh：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">zsh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将默认 shell 更改为 Zsh：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chsh <span class=\"token parameter variable\">-s</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">which</span> <span class=\"token function\">zsh</span><span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>重新登录以使更改生效，或者使用以下命令启动 Zsh：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">zsh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装和配置-Oh-My-Zsh\"><a href=\"#安装和配置-Oh-My-Zsh\" class=\"headerlink\" title=\"安装和配置 Oh My Zsh\"></a>安装和配置 Oh My Zsh</h3><p>下载并安装 Oh My Zsh：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sh</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装并启用-Powerline\"><a href=\"#安装并启用-Powerline\" class=\"headerlink\" title=\"安装并启用 Powerline\"></a>安装并启用 Powerline</h3><p>安装 Powerline 及其字体支持：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> epel-release\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> powerline powerline-fonts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>编辑 <code>~/.zshrc</code> 文件以启用 Powerline：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在文件末尾添加以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> /usr/share/powerline/zsh/powerline.zsh <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">source</span> /usr/share/powerline/zsh/powerline.zsh\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>保存并退出，然后重新加载 <code>~/.zshrc</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装并配置插件\"><a href=\"#安装并配置插件\" class=\"headerlink\" title=\"安装并配置插件\"></a>安装并配置插件</h3><h4 id=\"安装-zsh-syntax-highlighting-插件\"><a href=\"#安装-zsh-syntax-highlighting-插件\" class=\"headerlink\" title=\"安装 zsh-syntax-highlighting 插件\"></a>安装 zsh-syntax-highlighting 插件</h4><p>该插件提供命令语法高亮：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安装-zsh-autosuggestions-插件\"><a href=\"#安装-zsh-autosuggestions-插件\" class=\"headerlink\" title=\"安装 zsh-autosuggestions 插件\"></a>安装 zsh-autosuggestions 插件</h4><p>该插件提供命令自动建议：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安装-fzf-插件\"><a href=\"#安装-fzf-插件\" class=\"headerlink\" title=\"安装 fzf 插件\"></a>安装 fzf 插件</h4><p>该插件提供模糊搜索功能：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span> <span class=\"token number\">1</span> https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Ctrl+R开启搜索</p>\n<h4 id=\"安装-zsh-history-substring-search-插件\"><a href=\"#安装-zsh-history-substring-search-插件\" class=\"headerlink\" title=\"安装 zsh-history-substring-search 插件\"></a>安装 zsh-history-substring-search 插件</h4><p>该插件提供历史记录子字符串搜索：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-history-substring-search ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>上箭头键（↑）</strong>：在历史记录中查找当前输入的子字符串的上一条记录</p>\n<p><strong>下箭头键（↓）</strong>：在历史记录中查找当前输入的子字符串的下一条记录</p>\n<h3 id=\"安装-z-插件\"><a href=\"#安装-z-插件\" class=\"headerlink\" title=\"安装 z 插件\"></a>安装 <code>z</code> 插件</h3><p>克隆 <code>z</code> 插件仓库，用于目录跳转的非常方便的工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/rupa/z.git /var/local/z<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里不能放在<code>~</code>目录，有报错，没有目录自己创建</p>\n<p><code>z &lt;部分目录名&gt;</code>：跳转到包含指定部分目录名的路径中访问频率最高的目录</p>\n<p><code>z -l &lt;部分目录名&gt;</code>：列出包含指定部分目录名的所有目录，并按访问频率排序</p>\n<p><code>z -c &lt;部分目录名&gt;</code>：列出包含指定部分目录名的所有目录，并按访问时间排序</p>\n<h4 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h4><p>编辑 <code>~/.zshrc</code> 文件，添加并启用插件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到 <code>plugins</code> 这一行，并将其修改为如下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">git</span>\n    zsh-syntax-highlighting\n    zsh-autosuggestions\n    zsh-history-substring-search\n    z\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在文件末尾添加以下内容以启用 <code>zsh-history-substring-search</code> 和 <code>fzf</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\n<span class=\"token builtin class-name\">source</span> ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh\n<span class=\"token builtin class-name\">source</span> ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n\n<span class=\"token comment\"># z 插件配置</span>\n<span class=\"token builtin class-name\">source</span> /var/local/z/z.sh\n\n<span class=\"token comment\"># zsh-history-substring-search configuration</span>\nbindkey <span class=\"token string\">'^[[A'</span> history-substring-search-up\nbindkey <span class=\"token string\">'^[[B'</span> history-substring-search-down\n\n<span class=\"token comment\"># fzf configuration</span>\n<span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> ~/.fzf.zsh <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">source</span> ~/.fzf.zsh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存并退出，然后重新加载 <code>~/.zshrc</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装并配置-Powerlevel10k-主题\"><a href=\"#安装并配置-Powerlevel10k-主题\" class=\"headerlink\" title=\"安装并配置 Powerlevel10k 主题\"></a>安装并配置 Powerlevel10k 主题</h3><p>Powerlevel10k 是一个高性能的 Zsh 主题，提供了丰富的美化选项：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/romkatv/powerlevel10k.git <span class=\"token variable\">${ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom}</span>/themes/powerlevel10k<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编辑 <code>~/.zshrc</code> 文件，设置 Powerlevel10k 主题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 <code>ZSH_THEME</code> 行修改为：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">ZSH_THEME</span><span class=\"token operator\">=</span><span class=\"token string\">\"powerlevel10k/powerlevel10k\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>保存并退出，然后重新加载 <code>~/.zshrc</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第一次启动时，Powerlevel10k 会引导你完成配置，选择你喜欢的配置选项即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">p10k configure <span class=\"token comment\"># 重新配置主题</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"Zsh-别名\"><a href=\"#Zsh-别名\" class=\"headerlink\" title=\"Zsh 别名\"></a>Zsh 别名</h4><p><strong>编辑 <code>~/.zshrc</code> 文件</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>添加常用别名</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">ll</span><span class=\"token operator\">=</span><span class=\"token string\">'ls -la'</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gs</span><span class=\"token operator\">=</span><span class=\"token string\">'git status'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>保存并应用更改</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"一键脚本\"><a href=\"#一键脚本\" class=\"headerlink\" title=\"一键脚本\"></a>一键脚本</h3><p>创建文件zsh-setup.sh</p>\n<p><code>vim zsh-setup.sh</code>，将下面代码粘贴进来</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 更新系统并安装 Zsh</span>\n<span class=\"token function\">sudo</span> yum update <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">zsh</span>\n\n<span class=\"token comment\"># 将默认 shell 更改为 Zsh</span>\nchsh <span class=\"token parameter variable\">-s</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">which</span> <span class=\"token function\">zsh</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 安装 Oh My Zsh</span>\n<span class=\"token function\">sh</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span>\n\n<span class=\"token comment\"># 安装 Powerline 和字体支持</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> epel-release\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> powerline powerline-fonts\n\n<span class=\"token comment\"># 配置 Powerline</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;&gt;</span> ~/.zshrc <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'EOF'\nif [ -f /usr/share/powerline/zsh/powerline.zsh ]; then\n    source /usr/share/powerline/zsh/powerline.zsh\nfi\nEOF</span>\n\n<span class=\"token comment\"># 安装 zsh-syntax-highlighting 插件</span>\n<span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting\n\n<span class=\"token comment\"># 安装 zsh-autosuggestions 插件</span>\n<span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions\n\n<span class=\"token comment\"># 安装 fzf 插件</span>\n<span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span> <span class=\"token number\">1</span> https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install <span class=\"token parameter variable\">--all</span>\n\n<span class=\"token comment\"># 安装 zsh-history-substring-search 插件</span>\n<span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-history-substring-search ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search\n\n<span class=\"token comment\"># 安装 z 插件</span>\n<span class=\"token function\">git</span> clone https://github.com/rupa/z.git /var/local/z\n\n<span class=\"token comment\"># 配置插件</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;&gt;</span> ~/.zshrc <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'EOF'\nplugins=(\n    git\n    zsh-syntax-highlighting\n    zsh-autosuggestions\n    zsh-history-substring-search\n    z\n)\n\nsource ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\nsource ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh\nsource ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n\n# z 插件配置\nsource /var/local/z/z.sh\n\n# zsh-history-substring-search configuration\nbindkey '^[[A' history-substring-search-up\nbindkey '^[[B' history-substring-search-down\n\n# fzf configuration\n[ -f ~/.fzf.zsh ] &amp;&amp; source ~/.fzf.zsh\nEOF</span>\n\n<span class=\"token comment\"># 安装 Powerlevel10k 主题</span>\n<span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/romkatv/powerlevel10k.git <span class=\"token variable\">${ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom}</span>/themes/powerlevel10k\n\n<span class=\"token comment\"># 配置 Powerlevel10k 主题</span>\n<span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ZSH_THEME=\".*\"/ZSH_THEME=\"powerlevel10k\\/powerlevel10k\"/'</span> ~/.zshrc\n\n<span class=\"token comment\"># 重新加载 Zsh 配置</span>\n<span class=\"token builtin class-name\">source</span> ~/.zshrc\n\n<span class=\"token comment\"># 提示用户重新登录以使更改生效</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Please log out and log back in to apply the changes.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>chmod +x zsh-setup.sh</code>赋予执行权限</p>\n<p><code>./zsh-setup.sh</code>执行两次脚本，再执行<code>source ~/.zshrc</code></p>\n<h2 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h2><p>和centos基本一致，将yum换成apt安装命令即可</p>\n<p>一键脚本也是将yum换成apt</p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/07/03/centos8-guan-fang-yuan-shi-xiao/",
            "url": "https://0xdadream.github.io/2024/07/03/centos8-guan-fang-yuan-shi-xiao/",
            "title": "centos8官方源失效",
            "date_published": "2024-07-03T01:25:00.000Z",
            "content_html": "<h1 id=\"centos8官方源失效\"><a href=\"#centos8官方源失效\" class=\"headerlink\" title=\"centos8官方源失效\"></a>centos8官方源失效</h1><p>当你运行yum的下载命令时有如下报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">CentOS Stream <span class=\"token number\">8</span> - AppStream                                                                           \nErrors during downloading metadata <span class=\"token keyword\">for</span> repository <span class=\"token string\">'appstream'</span><span class=\"token builtin class-name\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这表明官方源已经失效，只能更换源，这里更换国内的阿里镜像源，当然在这之前你可以试试ping各类网站，试试是不是自己网络问题</p>\n<h2 id=\"更换源\"><a href=\"#更换源\" class=\"headerlink\" title=\"更换源\"></a>更换源</h2><h3 id=\"重置-yum配置\"><a href=\"#重置-yum配置\" class=\"headerlink\" title=\"重置 yum配置\"></a>重置 yum配置</h3><p>如果之前进行了许多更改，可能需要重置yum配置以确保没有配置错误。</p>\n<h4 id=\"备份并重新创建-yum-配置文件\"><a href=\"#备份并重新创建-yum-配置文件\" class=\"headerlink\" title=\"备份并重新创建 yum 配置文件\"></a>备份并重新创建 yum 配置文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /etc/yum.repos.d /etc/yum.repos.d.bak\n<span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /etc/yum.repos.d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"下载阿里源\"><a href=\"#下载阿里源\" class=\"headerlink\" title=\"下载阿里源\"></a>下载阿里源</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> <span class=\"token parameter variable\">-O</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>若是本地网络，下载再上传</p>\n<h4 id=\"清理-yum-缓存并重建缓存\"><a href=\"#清理-yum-缓存并重建缓存\" class=\"headerlink\" title=\"清理 yum 缓存并重建缓存\"></a>清理 yum 缓存并重建缓存</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum clean all\n<span class=\"token function\">sudo</span> yum makecache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"添加一个非官方源（国外）\"><a href=\"#添加一个非官方源（国外）\" class=\"headerlink\" title=\"添加一个非官方源（国外）\"></a>添加一个非官方源（国外）</h2><h3 id=\"在-CentOS-8-x-上安装-EPEL-存储库\"><a href=\"#在-CentOS-8-x-上安装-EPEL-存储库\" class=\"headerlink\" title=\"在 CentOS 8.x 上安装 EPEL 存储库\"></a>在 CentOS 8.x 上安装 EPEL 存储库</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token parameter variable\">-i</span>  <span class=\"token comment\">#切换到root</span>\nyum search epel  <span class=\"token comment\">#搜索</span>\nyum <span class=\"token function\">install</span> epel-release <span class=\"token comment\"># 安装</span>\nyum config-manager --set-enabled epel <span class=\"token comment\">#启用 EPEL 存储库</span>\nyum config-manager --set-enabled PowerTools \nyum update <span class=\"token comment\">#更新源</span>\nyum repolist <span class=\"token comment\">#查看已安装的库</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用-EPEL-存储库\"><a href=\"#使用-EPEL-存储库\" class=\"headerlink\" title=\"使用 EPEL 存储库\"></a>使用 EPEL 存储库</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo yum --disablerepo=\"*\" --enablerepo=\"epel\" list available | grep 'package'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>**<code>yum</code>**： 这是 CentOS 和 RHEL 系统上用于管理软件包的命令行工具</p>\n<p>**<code>--disablerepo=\"\\*\"</code>**： 这个选项禁用所有配置的存储库，<code>*</code> 是一个通配符，表示所有存储库都将被禁用</p>\n<p>**<code>--enablerepo=\"epel\"</code>**： 这个选项仅启用 EPEL 存储库，这样可以确保命令只查询并显示 EPEL 存储库中的软件包</p>\n<p>**<code>list available</code>**： 这个子命令列出所有可用的软件包，它会显示在启用的存储库中可供安装的软件包列表</p>\n<p>**<code>grep 'package'</code>**：匹配包名</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">--enablerepo</span><span class=\"token operator\">=</span><span class=\"token string\">\"epel\"</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">&gt;</span> <span class=\"token comment\"># 从 EPEL 存储库安装软件包</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"安装并启用-REMI-存储库\"><a href=\"#安装并启用-REMI-存储库\" class=\"headerlink\" title=\"安装并启用 REMI 存储库\"></a>安装并启用 REMI 存储库</h2><p>在终端中执行以下命令，在 CentOS 8上安装 REMI 存储库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> https://rpms.remirepo.net/enterprise/remi-release-8.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>检查已启用的存储库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum repolist<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>您可以安装 yum-config-manager，这将帮助您从命令行快速启用和禁用存储库，前面config-manager报错就可以安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> dnf-utils<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行时启用存储库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">--enablerepo</span><span class=\"token operator\">=</span>remi <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>package<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://help.aliyun.com/zh/ecs/user-guide/change-centos-8-repository-addresses\">CentOS 8 EOL如何切换源？_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p>\n<p><a href=\"https://www.cyberciti.biz/faq/how-to-enable-and-install-epel-repo-on-centos-8-x/\">如何在 CentOS 8 上启用和安装 EPEL Repo - nixCraft (cyberciti.biz)</a></p>\n<p><a href=\"https://computingforgeeks.com/how-to-install-epel-repository-on-rhel-8-centos-8/\">如何在 RHEL 8 或 CentOS 8 上安装 EPEL 存储库 |ComputingForGeeks的</a></p>\n<p><a href=\"https://computingforgeeks.com/install-and-enable-remi-repository-on-centos-rhel/\">在 CentOS 8 上安装并启用 REMI 存储库 |RHEL 8 |ComputingForGeeks的</a></p>\n",
            "tags": [
                "bug"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/06/27/powershell-mei-hua/",
            "url": "https://0xdadream.github.io/2024/06/27/powershell-mei-hua/",
            "title": "powershell美化",
            "date_published": "2024-06-27T01:11:00.000Z",
            "content_html": "<h1 id=\"powershell美化\"><a href=\"#powershell美化\" class=\"headerlink\" title=\"powershell美化\"></a>powershell美化</h1><h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>除了安装命令，其他都是测试命令，后续再写进配置文件</p>\n<h2 id=\"安装主题控件\"><a href=\"#安装主题控件\" class=\"headerlink\" title=\"安装主题控件\"></a>安装主题控件</h2><p>安装主题oh-my-posh，powershell中执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">winget <span class=\"token function\">install</span> JanDeDobbeleer.OhMyPosh <span class=\"token parameter variable\">-s</span> winget\noh-my-posh init pwsh <span class=\"token operator\">|</span> Invoke-Expression <span class=\"token comment\"># 查看效果，这里可能不能显示符号</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>点击加号旁边进入设置，左边点击powershell，向下滑点击外观，将字体改成nerd类型的字体，也能到<a href=\"https://www.nerdfonts.com/font-downloads\">Nerd Fonts - Iconic font aggregator, glyphs/icons collection, &amp; fonts patcher</a>下载字体</p>\n<p>也能直接改默认</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Get-PoshThemes <span class=\"token comment\"># 查看主题</span>\n<span class=\"token comment\"># 选择并应用一个主题</span>\noh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">\"<span class=\"token variable\">$env</span>:POSH_THEMES_PATH<span class=\"token entity\" title=\"\\t\">\\t</span>heme.json\"</span> <span class=\"token operator\">|</span> Invoke-Expression\n<span class=\"token comment\"># 将 $env:POSH_THEMES_PATH\\theme.json 替换为实际的主题文件路径,运行$env:POSH_THEMES_PATH可以看到主题的绝对路径</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"powershell模块管理基础命令\"><a href=\"#powershell模块管理基础命令\" class=\"headerlink\" title=\"powershell模块管理基础命令\"></a>powershell模块管理基础命令</h2><h3 id=\"1-安装模块\"><a href=\"#1-安装模块\" class=\"headerlink\" title=\"1. 安装模块\"></a>1. 安装模块</h3><p>使用 <code>Install-Module</code> 命令从 PowerShell Gallery 安装模块：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Install-Module</span> <span class=\"token operator\">-</span>Name ModuleName <span class=\"token operator\">-</span>Force<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-导入模块\"><a href=\"#2-导入模块\" class=\"headerlink\" title=\"2. 导入模块\"></a>2. 导入模块</h3><p>使用 <code>Import-Module</code> 命令加载模块，使其命令可用：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Import-Module</span> <span class=\"token operator\">-</span>Name ModuleName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-查看已安装模块\"><a href=\"#3-查看已安装模块\" class=\"headerlink\" title=\"3. 查看已安装模块\"></a>3. 查看已安装模块</h3><p>使用 <code>Get-Module</code> 查看当前会话中已加载的模块，或者使用 <code>-ListAvailable</code> 参数查看系统上所有已安装的模块：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 查看当前会话中已加载的模块</span>\n<span class=\"token function\">Get-Module</span>\n\n<span class=\"token comment\"># 查看系统上所有已安装的模块</span>\n<span class=\"token function\">Get-Module</span> <span class=\"token operator\">-</span>ListAvailable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-获取模块命令\"><a href=\"#4-获取模块命令\" class=\"headerlink\" title=\"4. 获取模块命令\"></a>4. 获取模块命令</h3><p>使用 <code>Get-Command</code> 查看某个模块中的所有命令：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Get-Command</span> <span class=\"token operator\">-</span>Module ModuleName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-查看模块信息\"><a href=\"#5-查看模块信息\" class=\"headerlink\" title=\"5. 查看模块信息\"></a>5. 查看模块信息</h3><p>使用 <code>Get-Module</code> 查看模块的详细信息：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Get-Module</span> <span class=\"token operator\">-</span>Name ModuleName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-更新模块\"><a href=\"#6-更新模块\" class=\"headerlink\" title=\"6. 更新模块\"></a>6. 更新模块</h3><p>使用 <code>Update-Module</code> 更新已安装的模块：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Update-Module</span> <span class=\"token operator\">-</span>Name ModuleName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-卸载模块\"><a href=\"#7-卸载模块\" class=\"headerlink\" title=\"7. 卸载模块\"></a>7. 卸载模块</h3><p>使用 <code>Remove-Module</code> 卸载模块，从当前会话中移除：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Remove-Module</span> <span class=\"token operator\">-</span>Name ModuleName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"8-查找模块\"><a href=\"#8-查找模块\" class=\"headerlink\" title=\"8. 查找模块\"></a>8. 查找模块</h3><p>使用 <code>Find-Module</code> 从 PowerShell Gallery 查找模块：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Find-Module</span> <span class=\"token operator\">-</span>Name ModuleName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"9-保存模块\"><a href=\"#9-保存模块\" class=\"headerlink\" title=\"9. 保存模块\"></a>9. 保存模块</h3><p>使用 <code>Save-Module</code> 将模块保存到本地文件夹，而不是直接安装：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Save-Module</span> <span class=\"token operator\">-</span>Name ModuleName <span class=\"token operator\">-</span>Path C:\\Path\\To\\Save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"10-发布模块\"><a href=\"#10-发布模块\" class=\"headerlink\" title=\"10. 发布模块\"></a>10. 发布模块</h3><p>使用 <code>Publish-Module</code> 将模块发布到 PowerShell Gallery（需要先进行配置和认证）：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Publish-Module</span> <span class=\"token operator\">-</span>Name ModuleName <span class=\"token operator\">-</span>NuGetApiKey <span class=\"token string\">'YourApiKey'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"示例：安装和使用-PSReadLine-模块\"><a href=\"#示例：安装和使用-PSReadLine-模块\" class=\"headerlink\" title=\"示例：安装和使用 PSReadLine 模块\"></a>示例：安装和使用 <code>PSReadLine</code> 模块</h3><p>下面是一个完整的示例，展示了如何安装、导入和使用 <code>PSReadLine</code> 模块：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># 安装 PSReadLine 模块</span>\n<span class=\"token function\">Install-Module</span> <span class=\"token operator\">-</span>Name PSReadLine <span class=\"token operator\">-</span>Force\n\n<span class=\"token comment\"># 导入 PSReadLine 模块</span>\n<span class=\"token function\">Import-Module</span> <span class=\"token operator\">-</span>Name PSReadLine\n\n<span class=\"token comment\"># 查看 PSReadLine 模块中的命令</span>\n<span class=\"token function\">Get-Command</span> <span class=\"token operator\">-</span>Module PSReadLine\n\n<span class=\"token comment\"># 设置 PSReadLine 选项（例如，设置语法高亮颜色）</span>\n<span class=\"token function\">Set-PSReadLineOption</span> <span class=\"token operator\">-</span>PredictionSource History\n\n<span class=\"token comment\"># 卸载 PSReadLine 模块（从当前会话中移除）</span>\n<span class=\"token function\">Remove-Module</span> <span class=\"token operator\">-</span>Name PSReadLine<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"安装插件（可选）\"><a href=\"#安装插件（可选）\" class=\"headerlink\" title=\"安装插件（可选）\"></a>安装插件（可选）</h2><p>首先设置PSGallery为受信任存储库</p>\n<p>要将<code>PSGallery</code>设置为受信任的存储库，可以运行以下命令：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-PSRepository</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">'PSGallery'</span> <span class=\"token operator\">-</span>InstallationPolicy Truste<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"PSReadLine\"><a href=\"#PSReadLine\" class=\"headerlink\" title=\"PSReadLine\"></a>PSReadLine</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Install-Module <span class=\"token parameter variable\">-Name</span> PSReadLine <span class=\"token parameter variable\">-Scope</span> CurrentUser <span class=\"token parameter variable\">-Force</span> <span class=\"token parameter variable\">-SkipPublisherCheck</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>我的配置附上</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Import-Module</span> PSReadLine\n<span class=\"token comment\"># 设置 PSReadLine 的编辑模式为 Emacs 风格</span>\n<span class=\"token comment\"># 禁用提示音</span>\n<span class=\"token comment\"># 设置历史预测源为命令历史</span>\n<span class=\"token comment\"># 设置预测视图样式为列表视图</span>\n<span class=\"token comment\"># 启用工具提示功能</span>\n<span class=\"token comment\"># 防止保存历史记录中的重复命令</span>\n<span class=\"token function\">Set-PSReadLineOption</span> <span class=\"token operator\">-</span>EditMode Emacs `\n                     <span class=\"token operator\">-</span>BellStyle None `\n                     <span class=\"token operator\">-</span>PredictionSource History `\n                     <span class=\"token operator\">-</span>PredictionViewStyle ListView `\n                     <span class=\"token operator\">-</span>ShowToolTips `\n                     <span class=\"token operator\">-</span>HistoryNoDuplicates `\n                     <span class=\"token operator\">-</span>Colors @<span class=\"token punctuation\">{</span> <span class=\"token comment\"># 设置不同元素的颜色，如命令、参数、运算符、变量、字符串、数字、成员、类型、和默认颜色</span>\n                         Command = <span class=\"token string\">'Cyan'</span>\n                         Parameter = <span class=\"token string\">'Yellow'</span>\n                         Operator = <span class=\"token string\">'Red'</span>\n                         Variable = <span class=\"token string\">'Green'</span>\n                         String = <span class=\"token string\">'Magenta'</span>\n                         Number = <span class=\"token string\">'White'</span>\n                         Member = <span class=\"token string\">'DarkYellow'</span>\n                         <span class=\"token function\">Type</span> = <span class=\"token string\">'DarkCyan'</span>\n                         Default = <span class=\"token string\">'Gray'</span>\n                     <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\"># 增量搜索，你在键入时会动态显示匹配项</span>\n<span class=\"token function\">Set-PSReadLineKeyHandler</span> <span class=\"token operator\">-</span>Chord Ctrl+R <span class=\"token operator\">-</span><span class=\"token keyword\">Function</span> ReverseSearchHistory\n<span class=\"token comment\"># 逐步搜索，每按一次快捷键会找到下一个匹配项</span>\n<span class=\"token comment\">#Set-PSReadLineKeyHandler -Chord 'Ctrl+r' -Function HistorySearchBackward </span>\n\n<span class=\"token comment\"># Shows navigable menu of all options when hitting Tab</span>\n<span class=\"token function\">Set-PSReadLineKeyHandler</span> <span class=\"token operator\">-</span>Key Tab <span class=\"token operator\">-</span><span class=\"token keyword\">Function</span> Complete\n<span class=\"token comment\">#Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"z\"><a href=\"#z\" class=\"headerlink\" title=\"z\"></a>z</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Install-Module</span> <span class=\"token operator\">-</span>Name Z <span class=\"token operator\">-</span>Scope CurrentUser <span class=\"token operator\">-</span>Force <span class=\"token operator\">-</span>SkipPublisherCheck <span class=\"token comment\"># 安装</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，使用以下命令导入 <code>z</code> 模块：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Import-Module</span> Z<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"使用-Z-模块\"><a href=\"#使用-Z-模块\" class=\"headerlink\" title=\"使用 Z 模块\"></a>使用 Z 模块</h4><h5 id=\"切换到目录\"><a href=\"#切换到目录\" class=\"headerlink\" title=\"切换到目录\"></a>切换到目录</h5><p>使用 <code>z</code> 命令加上目录的部分名称，可以快速切换到该目录：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">z foldername<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如，假设你经常访问名为 <code>Projects</code> 的目录，你可以通过以下命令快速跳转到该目录：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">z projects<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"显示目录历史\"><a href=\"#显示目录历史\" class=\"headerlink\" title=\"显示目录历史\"></a>显示目录历史</h5><p>使用 <code>-l</code> 参数列出所有之前访问过的目录历史：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">z <span class=\"token operator\">-</span>l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"posh-git\"><a href=\"#posh-git\" class=\"headerlink\" title=\"posh-git\"></a>posh-git</h3><pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Install-Module</span> posh-git <span class=\"token operator\">-</span>Scope CurrentUser <span class=\"token operator\">-</span>Force <span class=\"token comment\"># 安装</span>\n<span class=\"token function\">Import-Module</span> posh-git <span class=\"token comment\"># 导入</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>该模块管理和监视 Git 仓库的状态，进入git目录就能看到</p>\n<h3 id=\"PSFzf\"><a href=\"#PSFzf\" class=\"headerlink\" title=\"PSFzf\"></a>PSFzf</h3><p>提供了在命令行中进行快速模糊搜索和选择的功能</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Set-PsFzfOption <span class=\"token parameter variable\">-PSReadLineChordProvider</span> <span class=\"token string\">'Ctrl+f'</span> <span class=\"token parameter variable\">-PSReadLineChordReverseHistory</span> <span class=\"token string\">'Ctrl+r'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>Set-PsFzfOption</code> 命令用于配置 <code>PSFzf</code> 模块的选项，以定制键绑定和其他行为，将 <code>Ctrl+f</code> 设置为启动模糊搜索，<code>Ctrl+r</code> 设置为反向搜索历史记录的功能，使用这个可以不用上面那个，或者换个快捷键</p>\n<h2 id=\"添加别名\"><a href=\"#添加别名\" class=\"headerlink\" title=\"添加别名\"></a>添加别名</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Set-Alias ll <span class=\"token function\">ls</span>\nSet-Alias g <span class=\"token function\">git</span>\nSet-Alias <span class=\"token function\">grep</span> findstr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>我的部分别名</p>\n<h2 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$env</span>:http_proxy<span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:10809\"</span>\n<span class=\"token variable\">$env</span>:puser <span class=\"token operator\">=</span> <span class=\"token string\">\"C:\\Users\\xxx\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>上面的用处是在命令行执行<code>$env:http_proxy</code>就可以改变powershell的代理端口，执行<code>cat $env:puser</code>可以查看powershell的配置文件</p>\n<h2 id=\"加入配置文件\"><a href=\"#加入配置文件\" class=\"headerlink\" title=\"加入配置文件\"></a>加入配置文件</h2><p>执行<code>$PROFILE</code>可以得到配置文件目录，可以按目录创建文件，编辑文件，我的部分代码如下</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># Oh My Posh configuration</span>\noh-my-posh init pwsh <span class=\"token operator\">--</span>config <span class=\"token string\">\"C:\\Users\\xxx\\AppData\\Local\\Programs\\oh-my-posh\\themes\\night-owl.omp.json\"</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Invoke-Expression</span>\n\n<span class=\"token comment\"># Import other modules</span>\n<span class=\"token function\">Import-Module</span> z\n<span class=\"token function\">Import-Module</span> posh-git\n<span class=\"token comment\">#Icons</span>\n<span class=\"token function\">Import-Module</span> Terminal-Icons\n\n<span class=\"token comment\"># PSReadLine options</span>\n<span class=\"token function\">Import-Module</span> PSReadLine\n<span class=\"token comment\"># 设置 PSReadLine 的编辑模式为 Emacs 风格</span>\n<span class=\"token comment\"># 禁用提示音</span>\n<span class=\"token comment\"># 设置历史预测源为命令历史</span>\n<span class=\"token comment\"># 设置预测视图样式为列表视图</span>\n<span class=\"token comment\"># 启用工具提示功能</span>\n<span class=\"token comment\"># 防止保存历史记录中的重复命令</span>\n<span class=\"token function\">Set-PSReadLineOption</span> <span class=\"token operator\">-</span>EditMode Emacs `\n                     <span class=\"token operator\">-</span>BellStyle None `\n                     <span class=\"token operator\">-</span>PredictionSource History `\n                     <span class=\"token operator\">-</span>PredictionViewStyle ListView `\n                     <span class=\"token operator\">-</span>ShowToolTips `\n                     <span class=\"token operator\">-</span>HistoryNoDuplicates `\n                     <span class=\"token operator\">-</span>Colors @<span class=\"token punctuation\">{</span> <span class=\"token comment\"># 设置不同元素的颜色，如命令、参数、运算符、变量、字符串、数字、成员、类型、函数和默认颜色</span>\n                         Command = <span class=\"token string\">'Cyan'</span>\n                         Parameter = <span class=\"token string\">'Yellow'</span>\n                         Operator = <span class=\"token string\">'Red'</span>\n                         Variable = <span class=\"token string\">'Green'</span>\n                         String = <span class=\"token string\">'Magenta'</span>\n                         Number = <span class=\"token string\">'White'</span>\n                         Member = <span class=\"token string\">'DarkYellow'</span>\n                         <span class=\"token function\">Type</span> = <span class=\"token string\">'DarkCyan'</span>\n<span class=\"token comment\">#                         Function = 'Blue'</span>\n                         Default = <span class=\"token string\">'Gray'</span>\n                     <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 增量搜索，你在键入时会动态显示匹配项</span>\n<span class=\"token comment\">#Set-PSReadLineKeyHandler -Chord Ctrl+R -Function ReverseSearchHistory</span>\n<span class=\"token comment\"># 逐步搜索，每按一次快捷键会找到下一个匹配项#</span>\n<span class=\"token comment\">#Set-PSReadLineKeyHandler -Chord 'Ctrl+r' -Function HistorySearchBackward </span>\n\n<span class=\"token comment\"># Shows navigable menu of all options when hitting Tab</span>\n<span class=\"token function\">Set-PSReadLineKeyHandler</span> <span class=\"token operator\">-</span>Key Tab <span class=\"token operator\">-</span><span class=\"token keyword\">Function</span> Complete\n<span class=\"token comment\">#Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete</span>\n\n<span class=\"token comment\">#Utilities</span>\n<span class=\"token keyword\">function</span> which <span class=\"token punctuation\">(</span><span class=\"token variable\">$command</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Get-Command</span> <span class=\"token operator\">-</span>Name <span class=\"token variable\">$command</span> <span class=\"token operator\">-</span>ErrorAction SilentlyContinue <span class=\"token punctuation\">|</span>\n\t <span class=\"token function\">Select-Object</span> <span class=\"token operator\">-</span>ExpandProperty Path <span class=\"token operator\">-</span>ErrorAction SilentlyContinue\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">#Fzf</span>\n<span class=\"token function\">Import-Module</span> PSFzf\n<span class=\"token function\">Set-PsFzfOption</span> <span class=\"token operator\">-</span>PSReadLineChordProvider <span class=\"token string\">'Ctrl+f'</span> <span class=\"token operator\">-</span>PSReadLineChordReverseHistory <span class=\"token string\">'Ctrl+r'</span>\n\n<span class=\"token comment\"># Alias</span>\n<span class=\"token function\">Set-Alias</span> ll <span class=\"token function\">ls</span>\n<span class=\"token function\">Set-Alias</span> g git\n<span class=\"token function\">Set-Alias</span> grep findstr\n\n<span class=\"token comment\">#env</span>\n<span class=\"token variable\">$env</span>:http_proxy=<span class=\"token string\">\"http://127.0.0.1:10809\"</span> <span class=\"token comment\">#启动改变代理</span>\n<span class=\"token variable\">$env</span>:puser = <span class=\"token string\">\"C:\\Users\\xxx\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中which函数实现了linux上的函数功能，其他的前面有讲，保存，启动powershell</p>\n<h2 id=\"vscode图标不显示\"><a href=\"#vscode图标不显示\" class=\"headerlink\" title=\"vscode图标不显示\"></a>vscode图标不显示</h2><p>更改字体为CaskaydiaCove Nerd Font Mono，改成可显示就行，右上角文件-&gt;首选项-&gt;设置，搜索<code>terminal font</code>，两个都改了吧</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/08/042de8724389e36cbf3332d529f917ec.png\"></p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/06/27/hexo-shang-chuan-tu-pian/",
            "url": "https://0xdadream.github.io/2024/06/27/hexo-shang-chuan-tu-pian/",
            "title": "hexo上传图片",
            "date_published": "2024-06-26T20:11:00.000Z",
            "content_html": "<h1 id=\"hexo上传图片\"><a href=\"#hexo上传图片\" class=\"headerlink\" title=\"hexo上传图片\"></a>hexo上传图片</h1><p>我是hexo5.4.0，暂时没找到好的办法</p>\n<p>笨办法就是放在source里的images文件夹里，使用路径<code>images/xxx.png</code></p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/06/23/githubpage-tian-jia-yu-ming/",
            "url": "https://0xdadream.github.io/2024/06/23/githubpage-tian-jia-yu-ming/",
            "title": "githubpage添加域名",
            "date_published": "2024-06-22T20:11:00.000Z",
            "content_html": "<h1 id=\"githubpage添加域名\"><a href=\"#githubpage添加域名\" class=\"headerlink\" title=\"githubpage添加域名\"></a>githubpage添加域名</h1><h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>到域名解析商添加记录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">一条A记录 主机记录@ 你的博客IP<span class=\"token punctuation\">(</span>ping xxx.github.io<span class=\"token punctuation\">)</span>\n一条CNAME记录 主机记录www xxx.github.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"绑定github\"><a href=\"#绑定github\" class=\"headerlink\" title=\"绑定github\"></a>绑定github</h2><p>进入page项目的仓库，点击settings，设置Custom domain，输入自己的域名，检测通过后，到source文件夹下创建<code>CNAME.txt</code>内容为<code>你的域名</code></p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/06/23/hexo-qian-yi/",
            "url": "https://0xdadream.github.io/2024/06/23/hexo-qian-yi/",
            "title": "hexo迁移",
            "date_published": "2024-06-22T20:11:00.000Z",
            "content_html": "<h1 id=\"hexo迁移\"><a href=\"#hexo迁移\" class=\"headerlink\" title=\"hexo迁移\"></a>hexo迁移</h1><h2 id=\"直接更换电脑\"><a href=\"#直接更换电脑\" class=\"headerlink\" title=\"直接更换电脑\"></a>直接更换电脑</h2><h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><p>安装git和node，自行搜索安装，node推荐安装在github上的nvm，方便切换版本</p>\n<h3 id=\"本机与github建立连接\"><a href=\"#本机与github建立连接\" class=\"headerlink\" title=\"本机与github建立连接\"></a>本机与github建立连接</h3><p>设置git配置信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"你的GitHub用户名\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"你的GitHub注册邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>生成ssh密钥文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"你的GitHub注册邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后连续三次回车</p>\n<p><code>c/Users/youuser/.ssh/id_rsa.pub</code>里面的内容即是双方通信的密钥</p>\n<p>将密钥复制到github-&gt;右上角头像-&gt;settings-&gt;SSH and GPG keys，保存</p>\n<p>本机测试连接</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@github.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>创建一个文件夹用于存放博客文件，cd 进入该目录，执行命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli <span class=\"token comment\">#安装hexo</span>\n<span class=\"token function\">npm</span> update hexo <span class=\"token parameter variable\">-g</span> <span class=\"token comment\">#升级hexo</span>\nhexo init  --no-install <span class=\"token comment\">#初始化blog，需要先创建一个博客主文件夹，在文件夹里执行，就是上面创建的，或者</span>\nhexo init blog<span class=\"token punctuation\">(</span>文件夹名<span class=\"token punctuation\">)</span> --no-install <span class=\"token comment\">#--no-install是阻止项目克隆下来后，自动安装依赖，不使用会自动安装最新版本hexo，具体自己影响实测</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo@5.4.0 <span class=\"token comment\">#安装想要的hexo版本，我的这个主题这个版本合适</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>旧电脑在博客主目录执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> list <span class=\"token comment\"># 查看安装过的插件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>新电脑执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token comment\">#安装包名字，不加版本默认最新 </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>也能把旧电脑的<code>package.json</code>文件复制到新电脑，在主目录下执行<code>npm install</code>安装插件</p>\n<h3 id=\"移植文件\"><a href=\"#移植文件\" class=\"headerlink\" title=\"移植文件\"></a>移植文件</h3><p>将<code>source</code> <code>themes</code> <code>_config.yml</code>从旧电脑复制过来</p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo g <span class=\"token comment\">#生成静态文件</span>\nhexo s <span class=\"token comment\">#测试网页</span>\nhexo d <span class=\"token comment\">#没问题部署</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/01/28/v2rayn-lu-you-gui-ze/",
            "url": "https://0xdadream.github.io/2024/01/28/v2rayn-lu-you-gui-ze/",
            "title": "v2rayn路由规则",
            "date_published": "2024-01-28T15:41:00.000Z",
            "content_html": "<h1 id=\"v2rayn路由规则\"><a href=\"#v2rayn路由规则\" class=\"headerlink\" title=\"v2rayn路由规则\"></a>v2rayn路由规则</h1><p>大体可以看这篇文章<a href=\"https://www.v2fly.org/config/routing.html\">Routing 路由 | V2Fly.org</a></p>\n<p>本次测试所用版本为6.33</p>\n<p>设置-&gt;路由设置-&gt;启用高级功能-&gt;高级功能-&gt;添加规则集-&gt;(随便写个别名)添加规则</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">proxy  <span class=\"token comment\"># 代理的domain和IP</span>\ndirect <span class=\"token comment\"># 直连的</span>\nblock <span class=\"token comment\"># 阻塞的，一般为屏蔽广告IP</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>假如我想代理一些domain和IP，选择proxy，端口不写应该就是全部，写法</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">80</span>\n<span class=\"token number\">1</span>-1234<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>enabled启用，勾选保存时Domain，IP，进程名自动排序</p>\n<p>domain写法</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">domain:完整域名\nkeyword:域名关键字\nregexp:正则表达式\nfull:完全匹配字符串\ngeosite:域名集 <span class=\"token comment\"># 官方网站查看</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><a href=\"https://github.com/Loyalsoldier/v2ray-rules-dat\">Loyalsoldier/v2ray-rules-dat: 🦄 🎃 👻 V2Ray 路由规则文件加强版，可代替 V2Ray 官方 geoip.dat 和 geosite.dat，兼容 Shadowsocks-windows、Xray-core、Trojan-Go、leaf 和 hysteria。Enhanced edition of V2Ray rules dat files, compatible with Xray-core, Shadowsocks-windows, Trojan-Go, leaf and hysteria. (github.com)</a></p>\n<p>IP写法</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">geoip:IP集 <span class=\"token comment\"># 官方网站查看</span>\n单个IP\nIP段,如:192.166.23.22/23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/01/28/x-ui-mian-ban-bu-shu-jie-dian-tao-cf/",
            "url": "https://0xdadream.github.io/2024/01/28/x-ui-mian-ban-bu-shu-jie-dian-tao-cf/",
            "title": "x-ui面板部署代理+套CF",
            "date_published": "2024-01-28T15:41:00.000Z",
            "content_html": "<h1 id=\"x-ui面板部署代理-套CF\"><a href=\"#x-ui面板部署代理-套CF\" class=\"headerlink\" title=\"x-ui面板部署代理+套CF\"></a>x-ui面板部署代理+套CF</h1><p>项目链接<a href=\"https://github.com/vaxilu/x-ui\">vaxilu/x-ui: 支持多协议多用户的 xray 面板 (github.com)</a></p>\n<h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h2><p>确定防火墙是否关闭，或者手动开放端口，不能不能登录面板</p>\n<p>更新系统依赖</p>\n<p>Ubuntu：<code>apt update -y</code>    centos  ：<code>yum update -y</code></p>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h2><p>执行命令运行脚本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-Ls</span> https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装/更新完成后需要强制修改端口与账户密码——输入<code>y</code>按照提示输出信息</p>\n<p>完成后进入网址<code>主机IP:你输入的端口号</code>，输入账号密码</p>\n<p>进入主页面，选择面板设置，更改面板url根路径，更改后重启，再次进入时使用地址<code>主机IP:你输入的端口号/更改的根路径</code>，其他根据自身更改</p>\n<h2 id=\"3-SSL证书申请\"><a href=\"#3-SSL证书申请\" class=\"headerlink\" title=\"3. SSL证书申请\"></a>3. SSL证书申请</h2><p>输入<code>x-ui</code>进入面板管理，选择16回车</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">******使用说明******\n该脚本将使用Acme脚本申请证书,使用时需保证:\n<span class=\"token number\">1</span>.知晓Cloudflare 注册邮箱\n<span class=\"token number\">2</span>.知晓Cloudflare Global API Key\n<span class=\"token number\">3</span>.域名已通过Cloudflare进行解析到当前服务器\n<span class=\"token number\">4</span>.该脚本申请证书默认安装路径为/root/cert目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>准备好这些东西，cloudflare直接邮箱注册<a href=\"https://cloudflare.com/%EF%BC%8CAPI\">https://cloudflare.com/，API</a> KEY</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/06/38a0e932300ad70a71f61f02d2d631b9.png\"></p>\n<p>之后依次输入</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/06/be5c4f0e3840c67e1f522a704e1530ae.png\"></p>\n<p>注意输入的域名为你解析到CF上的域名，不是A记录的域名，如下图1的位置</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/06/628eb2922e95e2f6f9b3e9a28233fd46.png\"></p>\n<p>之后进入面板设置</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/06/a19a96035e892f12c79b7eb0450983b2.png\"></p>\n<p>将<code>/root/cert/xxx</code>填入框中，上面是cer，下面是key，之后进入cloudflare，改成这样，打开上面图2标记的小云朵，这样流量就被cf代理了</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/06/92a55c17564e4c3ba2779fefa41c6d7e.png\"></p>\n<h2 id=\"4-创建代理\"><a href=\"#4-创建代理\" class=\"headerlink\" title=\"4. 创建代理\"></a>4. 创建代理</h2><p>接上面标记的那张图，将你的主机IP解析到这个域名的A记录下，名称随意填写，相当于得到了一个三级域名——<code>名称.域名</code>，例如<code>test.example.com</code></p>\n<p>进入x-ui 面板入站列表-添加入站</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/06/15cddfb0eaadb83728413babe85da1a8.png\"></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/06/6796d0ebb5a7dc37dd4029c7afad2d94.png\"></p>\n<p>这里的域名就是你自己解析到的域名，名称+域名，添加，分享二维码就可以使用了</p>\n<h2 id=\"5-套CF优选IP\"><a href=\"#5-套CF优选IP\" class=\"headerlink\" title=\"5. 套CF优选IP\"></a>5. 套CF优选IP</h2><p><a href=\"https://github.com/badafans/better-cloudflare-ip\">badafans/better-cloudflare-ip: 查找适合自己当前网络环境的优选cloudflare anycast IP (github.com)</a></p>\n<p><a href=\"https://github.com/XIU2/CloudflareSpeedTest\">XIU2/CloudflareSpeedTest: 🌩「自选优选 IP」测试 Cloudflare CDN 延迟和速度，获取最快 IP ！当然也支持其他 CDN / 网站 IP ~ (github.com)</a></p>\n<p>两款工具</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/06/50fe30940fc75ca875f94f0279944f66.png\"></p>\n<p>将优选得到的地址填写上去，将原来的地址写到伪装域名，需要优选443这个端口的地址</p>\n<h2 id=\"6-其他类型的代理\"><a href=\"#6-其他类型的代理\" class=\"headerlink\" title=\"6.其他类型的代理\"></a>6.其他类型的代理</h2><p>上面也可以不用443端口，这要添加一条规则</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/06/125b23e45290caf95b4d3303a39b1b53.png\"></p>\n<p>然后就可以优选443的地址，端口改写443</p>\n<p>也能直接使用其他的端口，下面就不需要打开tls</p>\n<p>也可以网络直接选择tcp，选择reality，这种是直连，要看你的服务器网络质量</p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/01/20/ssh-lian-jie-bao-cuo/",
            "url": "https://0xdadream.github.io/2024/01/20/ssh-lian-jie-bao-cuo/",
            "title": "SSH连接报错",
            "date_published": "2024-01-20T03:37:00.000Z",
            "content_html": "<h1 id=\"SSH连接报错\"><a href=\"#SSH连接报错\" class=\"headerlink\" title=\"SSH连接报错\"></a>SSH连接报错</h1><p>当时git提交时出现连接失败等提示，试一试命令<code>ssh -T git@github.com</code>，若报错如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh: connect to <span class=\"token function\">host</span> github.com port <span class=\"token number\">22</span>: Connection timed out<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>则试一试<code>ssh -T -p 443 git@ssh.github.com</code>，若成功则修改<code>~/.ssh/config</code>文件，添加</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Host github.com\nHostname ssh.github.com\nPort <span class=\"token number\">443</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>再次<code>ssh -T git@github.com</code>成功，则可以进行提交，这是由于22端口处于某种原因出现了问题，之后仍然可以修改为原配置。</p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/01/20/shi-yong-zhu-ti-matery-jiang-ji-hexo-ban-ben/",
            "url": "https://0xdadream.github.io/2024/01/20/shi-yong-zhu-ti-matery-jiang-ji-hexo-ban-ben/",
            "title": "使用主题matery而降级hexo版本",
            "date_published": "2024-01-20T01:41:00.000Z",
            "content_html": "<h1 id=\"使用主题matery而降级hexo版本\"><a href=\"#使用主题matery而降级hexo版本\" class=\"headerlink\" title=\"使用主题matery而降级hexo版本\"></a>使用主题matery而降级hexo版本</h1><p>遇到问题按时间顺序</p>\n<ul>\n<li><p>升级hexo到7.0.0后代码块显示异常</p>\n<p>考虑hexo切换版本和升级matery版本，matery更新到创作者最新版本，hexo降级出现问题</p>\n</li>\n<li><p>hexo降级失败，因为node.js版本过高</p>\n<p>降级node.js版本，使用工具nvm管理node.js版本，我使用的node.js版本为16….</p>\n</li>\n<li><p>hexo降级的具体过程</p>\n<p>先删除原博客文件夹，或者改名，依次执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-cli <span class=\"token parameter variable\">-g</span> <span class=\"token comment\">#安装hexo大框架，用来初始化，这里全局安装是为了后面初始化使用hexo</span>\n\nhexo init  --no-install <span class=\"token comment\">#初始化blog，需要先创建一个博客主文件夹，在文件夹里执行，或者</span>\nhexo init blog<span class=\"token punctuation\">(</span>文件夹名<span class=\"token punctuation\">)</span> --no-install <span class=\"token comment\">#--no-install是阻止项目克隆下来后，自动安装依赖，不使用会自动安装最新版本hexo，具体自己影响实测</span>\n\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo@5.4.0 <span class=\"token comment\">#安装想要的hexo版本，我的这个主题这个版本合适</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>hexo s后代码仍然异常</p>\n<p>修改主目录_config.yml中的代码为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">highlight:\n  enable: <span class=\"token boolean\">false</span>\n  line_number: <span class=\"token boolean\">true</span>\n  auto_detect: <span class=\"token boolean\">false</span>\n  tab_replace: <span class=\"token string\">''</span>\n  wrap: <span class=\"token boolean\">true</span>\n  hljs: <span class=\"token boolean\">false</span>\nprismjs:\n  enable: <span class=\"token boolean\">true</span>\n  preprocess: <span class=\"token boolean\">true</span>\n  line_number: <span class=\"token boolean\">true</span>\n  tab_replace: <span class=\"token string\">''</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>hexo s再次执行可见已经正常，再安装以前安装的插件</p>\n</li>\n</ul>\n<p>注：因为主题版本更新，我直接全删了重建的，不删修改版本的可以先卸载原来的组件如hexo，主目录下的_config.yml有点不同，需要自己注意。</p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/01/20/npm-jian-jie/",
            "url": "https://0xdadream.github.io/2024/01/20/npm-jian-jie/",
            "title": "NPM简介",
            "date_published": "2024-01-20T01:15:00.000Z",
            "content_html": "<h1 id=\"NPM简介\"><a href=\"#NPM简介\" class=\"headerlink\" title=\"NPM简介\"></a>NPM简介</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题</p>\n<h2 id=\"NPM命令\"><a href=\"#NPM命令\" class=\"headerlink\" title=\"NPM命令\"></a>NPM命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> 模块名 <span class=\"token parameter variable\">-g</span>  <span class=\"token comment\">#全局安装，相当于加了一个环境变量，能全局调用</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> 模块名 <span class=\"token comment\">#普通安装，一般安装在当前文件夹</span>\n\n<span class=\"token function\">npm</span> list <span class=\"token parameter variable\">-g</span> <span class=\"token comment\">#列出已安装全局模块</span>\n<span class=\"token function\">npm</span> list\n\n<span class=\"token function\">npm</span> list 模块 <span class=\"token comment\">#显示模块版本号</span>\n\n<span class=\"token function\">npm</span> uninstall 模块名 <span class=\"token parameter variable\">-g</span>  <span class=\"token comment\">#全局卸载</span>\n<span class=\"token function\">npm</span> uninstall 模块名 <span class=\"token comment\">#普通卸载</span>\n\n<span class=\"token function\">npm</span> search 关键字 <span class=\"token comment\">#搜索模块</span>\n\n<span class=\"token function\">npm</span> view 模块名 versions  <span class=\"token comment\">#列出该模块所有版本</span>\n\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> 模块名@版本号 <span class=\"token comment\">#安装具体版本，一般只能安装一个版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "tip",
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/01/20/node.js-ban-ben-wen-ti/",
            "url": "https://0xdadream.github.io/2024/01/20/node.js-ban-ben-wen-ti/",
            "title": "node.js版本问题",
            "date_published": "2024-01-20T00:11:00.000Z",
            "content_html": "<h1 id=\"node-js版本问题\"><a href=\"#node-js版本问题\" class=\"headerlink\" title=\"node.js版本问题\"></a>node.js版本问题</h1><p>起因是我想给node.js版本降级，卸载了新版，安装旧版后发现npm仍然是最新版本</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>安装nvm(<a href=\"https://github.com/coreybutler/nvm-windows\">coreybutler/nvm-windows: A node.js version management utility for Windows. Ironically written in Go. (github.com)</a>)，这是一款管理node.js版本的工具</p>\n<h2 id=\"安装流程\"><a href=\"#安装流程\" class=\"headerlink\" title=\"安装流程\"></a>安装流程</h2><p>进入github选择nvm-setup下载，然后傻瓜式安装</p>\n<h2 id=\"部分命令\"><a href=\"#部分命令\" class=\"headerlink\" title=\"部分命令\"></a>部分命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nvm  <span class=\"token comment\">#查看命令面板</span>\nnvm <span class=\"token function\">ls</span> available <span class=\"token comment\">#列出可用的最新的部分node.js版本</span>\nnvm <span class=\"token function\">install</span> 版本号 <span class=\"token comment\"># 安装想要的版本</span>\nnvm uninstall 版本号 <span class=\"token comment\"># 卸载想要的版本</span>\nnvm list <span class=\"token comment\">#列出已经安装的版本</span>\nnvm use 版本号 <span class=\"token comment\">#启用版本</span>\n<span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span> <span class=\"token comment\">#查看版本号</span>\n<span class=\"token function\">npm</span> <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "tip",
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/01/14/hexo-sheng-ji/",
            "url": "https://0xdadream.github.io/2024/01/14/hexo-sheng-ji/",
            "title": "hexo升级及升级后的问题",
            "date_published": "2024-01-13T20:11:00.000Z",
            "content_html": "<h1 id=\"hexo升级及升级后的问题\"><a href=\"#hexo升级及升级后的问题\" class=\"headerlink\" title=\"hexo升级及升级后的问题\"></a>hexo升级及升级后的问题</h1><h2 id=\"hexo升级\"><a href=\"#hexo升级\" class=\"headerlink\" title=\"hexo升级\"></a>hexo升级</h2><p>首先升级node.js，去官网下载最新安装包，接着执行以下命令升级hexo</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> npm-check-updates <span class=\"token comment\"># 安装更新工具</span>\nncu <span class=\"token comment\"># 检查npm软件包更新，需在项目根目录下执行</span>\nncu <span class=\"token parameter variable\">-u</span> <span class=\"token comment\"># 更新package.json配置</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token comment\"># 安装package.json配置的版本</span>\nhexo version <span class=\"token comment\"># 更新后检查hexo版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"升级后的问题\"><a href=\"#升级后的问题\" class=\"headerlink\" title=\"升级后的问题\"></a>升级后的问题</h2><p>升级后执行hexo d部署提交时报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">at ChildProcess.<span class=\"token operator\">&lt;</span>anonymous<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">(</span>D:<span class=\"token punctuation\">\\</span>blog<span class=\"token punctuation\">\\</span>node_modules<span class=\"token punctuation\">\\</span>_hexo-util@1.9.0@hexo-util<span class=\"token punctuation\">\\</span>lib<span class=\"token punctuation\">\\</span>spawn.js:51:21<span class=\"token punctuation\">)</span>\n    at ChildProcess.emit <span class=\"token punctuation\">(</span>events.js:310:20<span class=\"token punctuation\">)</span>\n    at ChildProcess.cp.emit <span class=\"token punctuation\">(</span>D:<span class=\"token punctuation\">\\</span>blog<span class=\"token punctuation\">\\</span>node_modules<span class=\"token punctuation\">\\</span>_cross-spawn@7.0.2@cross-spawn<span class=\"token punctuation\">\\</span>lib<span class=\"token punctuation\">\\</span>enoent.js:34:29<span class=\"token punctuation\">)</span>\n    at Process.ChildProcess._handle.onexit <span class=\"token punctuation\">(</span>internal/child_process.js:275:12<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这时候你需要执行<code>ssh -T git@github.com</code>测试是否连接正常，若失败报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class=\"token operator\">!</span>     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class=\"token operator\">!</span> Someone could be\neavesdropping on you right now <span class=\"token punctuation\">(</span>man-in-the-middle attack<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span> It is also\npossible that a <span class=\"token function\">host</span> key has just been changed. The fingerprint <span class=\"token keyword\">for</span> the RSA\nkey sent by the remote <span class=\"token function\">host</span> is <span class=\"token punctuation\">[</span>truncated<span class=\"token punctuation\">]</span>. Please contact your system\nadministrator. Add correct <span class=\"token function\">host</span> key <span class=\"token keyword\">in</span> /home/username/.ssh/known_hosts to\nget rid of this message. Offending RSA key <span class=\"token keyword\">in</span>\n/home/username/.ssh/known_hosts:24 Password authentication is disabled to\navoid man-in-the-middle attacks. Keyboard-interactive authentication is\ndisabled to avoid man-in-the-middle attacks. Agent forwarding is disabled to\navoid man-in-the-middle attacks.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>则先去github重新绑定秘钥（如果原来的掉了），步骤和安装是一样，然后去<code>c/Users/youuser/.ssh</code>下删除<code>c:\\users\\username\\.ssh\\known_hosts</code>这个文件，重新执行<code>ssh -T git@github.com</code>，选择yes，连接成功，再进行hexo d提交。</p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2023/05/15/stable-diffusion-bu-shu-zai-ubuntu/",
            "url": "https://0xdadream.github.io/2023/05/15/stable-diffusion-bu-shu-zai-ubuntu/",
            "title": "stable-diffusion部署在centos",
            "date_published": "2023-05-14T20:11:00.000Z",
            "content_html": "<h1 id=\"stable-diffusion部署在centos\"><a href=\"#stable-diffusion部署在centos\" class=\"headerlink\" title=\"stable-diffusion部署在centos\"></a>stable-diffusion部署在centos</h1><h2 id=\"安装python环境\"><a href=\"#安装python环境\" class=\"headerlink\" title=\"安装python环境\"></a>安装python环境</h2><p>版本推荐python3.10.6</p>\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><p>sudo apt install git </p>\n<h2 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h2><p>到普通用户目录执行<code>git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</code>把项目下载</p>\n<p>执行./webui.sh下载依赖最后启动</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>先安装pytorch</p>\n<p>launch.py</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">找到torch_command = os.environ.get('TORCH_COMMAND', \"pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 --extra-index-url https://download.pytorch.org/whl/cu117\")，并修改\n\n修改后：torch_command = os.environ.get('TORCH_COMMAND', \"pip install torch==1.13.1 torchvision==0.14.1\") <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">ln <span class=\"token operator\">-</span>s <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python3 <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>python\nln <span class=\"token operator\">-</span>s <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>pip3 <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>pip\n<span class=\"token literal-property property\">https</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token constant\">AUTOMATIC1111</span><span class=\"token operator\">/</span>stable<span class=\"token operator\">-</span>diffusion<span class=\"token operator\">-</span>webui<span class=\"token punctuation\">.</span>git\n<span class=\"token constant\">COMMANDLINE_ARGS</span><span class=\"token operator\">=</span><span class=\"token operator\">--</span>skip<span class=\"token operator\">-</span>torch<span class=\"token operator\">-</span>cuda<span class=\"token operator\">-</span>test <span class=\"token operator\">--</span>precision full <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>half <span class=\"token operator\">--</span>lowvram<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>weibu.py中将shared.demo.launch()第一行</p>\n<p>改为share=True</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install -r requirements.txt\npip install -r requirements_versions.txt\npip install basicsr\npip install facexlib\n\npip install -r requirements.txt\npython setup.py develop\n\n# If you want to enhance the background (non-face) regions with Real-ESRGAN,\n# you also need to install the realesrgan package\npip install realesrgan\n\n--skip-torch-cuda-test --upcast-sampling --use-cpu interrogate\n./webui.sh --listen --no-half<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">add-apt-repository ppa:deadsnakes/ppa\napt update\napt install python3.10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Failed to build these modules: _ctypes\nyum install libffi-devel<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ ./configure --prefix=/usr/local/python3 --enable-optimizations\n$ make\n$ make install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yum install -y xz-devel\npip install backports.lzma\nyum install mesa-libGL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/home/hero/stable-diffusion-webui/venv/bin/python3 -m pip install --upgrade torchvision==0.2.2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">systemctl status firewalld\nsystemctl stop firewalld\nyum install -y iptables-services\nsystemctl start iptables\nsystemctl status iptables\ncp -a /etc/sysconfig/iptables /etc/sysconfig/iptables.bak\niptables -I INPUT -p tcp --dport 7860 -m state --state NEW -j ACCEPT\niptables-save &gt; /etc/sysconfig/iptables\nsystemctl enable iptables.service\nsystemctl enable iptables.service\nsystemctl reboot\nnetstat -tulpen\niptables -L\niptables -A INPUT -p tcp --dport 7860 -j ACCEPT\niptables -A OUTPUT -p tcp --sport 7860 -j ACCEPT\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">~/stable-diffusion-webui/webui.sh --listen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vi /etc/sysconfig/iptables<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2023/03/23/python-diao-yong-datetime.now-ti-shi-wei-zhao-dao-mo-kuai/",
            "url": "https://0xdadream.github.io/2023/03/23/python-diao-yong-datetime.now-ti-shi-wei-zhao-dao-mo-kuai/",
            "title": "python调用datetime.now()提示未找到模块",
            "date_published": "2023-03-22T20:11:00.000Z",
            "content_html": "<h1 id=\"python调用datetime-now-提示未找到模块\"><a href=\"#python调用datetime-now-提示未找到模块\" class=\"headerlink\" title=\"python调用datetime.now()提示未找到模块\"></a>python调用datetime.now()提示未找到模块</h1><p>首先确定导入了模块<code>from datetime import datetime</code></p>\n<p>如果还是报错，那么可能存在一个<code>datetime.py</code>的文件覆盖了原模块</p>\n<p>可以直接使用<code>datetime.datetime.now()</code>来调用，或者将那个<code>datetime.py</code>改名</p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2023/03/23/jia-gu-wen-yun-chong-zhi-shi-li/",
            "url": "https://0xdadream.github.io/2023/03/23/jia-gu-wen-yun-chong-zhi-shi-li/",
            "title": "甲骨文云重置实例",
            "date_published": "2023-03-22T20:11:00.000Z",
            "content_html": "<h1 id=\"甲骨文云重置实例\"><a href=\"#甲骨文云重置实例\" class=\"headerlink\" title=\"甲骨文云重置实例\"></a>甲骨文云重置实例</h1><p>来自<a href=\"https://v2rayssr.com/oracle-centos.html\">https://v2rayssr.com/oracle-centos.html</a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>1、甲骨文（oracle）机器一台（始终免费），若是没有，请看下面博文链接：</p>\n<ul>\n<li><a href=\"https://v2rayssr.com/oracle.html\">始终免费的VPS！油管8K视频秒开，颠覆你对免费资源的看法。Oracle（甲骨文）免费云服务器注册指南及故障解决！</a></li>\n<li><a href=\"https://v2rayssr.com/oracle-arm.html\">始终免费的 4核 24G内存 的VPS！甲骨文 (oracle) 抢/刷 ARM 实例！一键脚本部署开ARM机器！</a></li>\n</ul>\n<p>2、SSH 连接工具（<a href=\"https://v2rayssr.com/go?url=https://www.hostbuf.com/t/988.html\">FinalShell</a>），VNC 连接工具（<a href=\"https://v2rayssr.com/go?url=https://www.realvnc.com/en/connect/download/viewer/\">VNC® Viewer</a>）</p>\n<p>3、域名一个做好解析，开启 CDN（小云朵），毕竟是建站的</p>\n<h2 id=\"视频教程演示\"><a href=\"#视频教程演示\" class=\"headerlink\" title=\"视频教程演示\"></a>视频教程演示</h2><p><a href=\"https://v2rayssr.com/go?url=https://youtu.be/grebA_WHGXY\"><img src=\"https://v2rayssr.com/wp-content/uploads/2022/07/12232323.png\" alt=\"img\"></a></p>\n<h2 id=\"甲骨文-VPS-安装-CentOS-8\"><a href=\"#甲骨文-VPS-安装-CentOS-8\" class=\"headerlink\" title=\"甲骨文 VPS 安装 CentOS 8\"></a>甲骨文 VPS 安装 CentOS 8</h2><blockquote>\n<p><strong>友情提示：</strong></p>\n<p>下面为 ARM 机器安装演示</p>\n</blockquote>\n<h3 id=\"VPS-设置\"><a href=\"#VPS-设置\" class=\"headerlink\" title=\"VPS 设置\"></a>VPS 设置</h3><p>SSH 连接 VPS，并进入 boot 文件夹，下载 Netboot 启动文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">apt update -y\napt install wget -y\ncd /boot/efi/EFI\nwget https://boot.netboot.xyz/ipxe/netboot.xyz-arm64.efi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>若你是重装系统，请执行下面命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yum update -y\nyum install wget -y\ncd /boot/efi/EFI\nwget https://boot.netboot.xyz/ipxe/netboot.xyz-arm64.efi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"甲骨文控制台设置\"><a href=\"#甲骨文控制台设置\" class=\"headerlink\" title=\"甲骨文控制台设置\"></a>甲骨文控制台设置</h3><p>进入甲骨文控制台，点击实例详情，在左边找到 “控制台连接” ，启动 Cloud Shell 连接</p>\n<h3 id=\"设置-Netboot-引导启动\"><a href=\"#设置-Netboot-引导启动\" class=\"headerlink\" title=\"设置 Netboot 引导启动\"></a>设置 Netboot 引导启动</h3><p>重启 VPS ，并在 Cloud Shell 里面不停按键盘 ESC 键，进入 BIOS ，如图所示</p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/112.jpg\" alt=\"img\"></p>\n<p>选择 Boot Maintenance Manager —— Boot Frome File ，</p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/133.jpg\" alt=\"img\"></p>\n<p>选择 <code>netboot.xyz-arm64.efi</code>，点击回车，进行引导！</p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/1233.jpg\" alt=\"img\"></p>\n<p>在引导的界面，我们选择 <code>Linux Network Installs (arm64)</code></p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/1212.jpg\" alt=\"img\"></p>\n<p>选择你需要安装的系统，选择错误，可以按 ESC 返回上级菜单，我们选择 <code>CentOS</code> —— <code>CentOS 8.0 Stream</code>，点击回车，再次选择 <code>CentOS 8-stream text based installer</code></p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/2323.jpg\" alt=\"img\"></p>\n<p>开始引导安装了以后，我们在 Cloud Shell 里面会看到如下图：</p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/232323.jpg\" alt=\"img\"></p>\n<p>我们选择 1，使用 VNC 可视化进行安装</p>\n<p>设置 VNC 的密码（一定只是6 – 8个字符），确认密码</p>\n<h3 id=\"VNC-连接-VPS\"><a href=\"#VNC-连接-VPS\" class=\"headerlink\" title=\"VNC 连接 VPS\"></a>VNC 连接 VPS</h3><p>现在我们就可以通过 VNC 工具来连接我们的甲骨文 ARM 机器，并进行安装了。</p>\n<p>VNC® Viewer 软件连接地址：<code>VPSIP:1</code> ，输入密码以后，你大致就连接成功了</p>\n<h3 id=\"安装-CentOS-8\"><a href=\"#安装-CentOS-8\" class=\"headerlink\" title=\"安装 CentOS 8\"></a>安装 CentOS 8</h3><p>安装的过程很简单，若是有不明白的地方，请观看 <a href=\"https://v2rayssr.com/go?url=https://youtu.be/grebA_WHGXY\"><strong>视频教程</strong></a></p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/3434.jpg\" alt=\"img\"></p>\n<p>安装完成以后，我们就直接可以从 SSH 工具，登录我们的 <code>CentOS 8-stream</code> 了</p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/444.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>友情提醒：可以更改 VPS 主机名</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hostnamectl set-hostname host.aaa.com --transienthostnamectl set-hostname host.aaa.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h3 id=\"安装宝塔面板\"><a href=\"#安装宝塔面板\" class=\"headerlink\" title=\"安装宝塔面板\"></a>安装宝塔面板</h3><p>安装宝塔面板，相关的插件，设置网站！</p>\n<p>在安装宝塔面板的过程中，或许有下图的错误提示，看着很吓人：</p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/55.jpg\" alt=\"img\"></p>\n<p>其实，这个只是 <code>pip</code> 的版本太低，我们根据提示命令更新下就好了！</p>\n<p>在宝塔面板里面，推荐安装如下运行环境：（LNMP – 编译安装）因为下面版本我安装并没有出错。</p>\n<p><img src=\"https://v2rayssr.com/wp-content/themes/b2/Assets/fontend/images/default-img.jpg\" alt=\"img\"></p>\n<p>编译安装时间有点长，但是更稳定可靠，大家耐心等待，下面是我等待的时间：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">安装[opcache-74]【已完成】耗时12秒安装[exif-74]【已完成】耗时19秒安装[imagemagick-74]【已完成】耗时38秒安装[redis-74]【已完成】耗时74秒安装[fileinfo-74]【已完成】耗时30秒安装[php-7.4]【已完成】耗时179秒安装[mysql-5.7]【已完成】耗时991秒安装[nginx-1.20]【已完成】耗时376秒<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>完成以后，看见监控栏的几项参数，瞬间觉得，哇！甲骨文 YYDS！</p>\n<p><img src=\"https://v2rayssr.com/wp-content/themes/b2/Assets/fontend/images/default-img.jpg\" alt=\"img\"></p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/343434.jpg\" alt=\"img\"></p>\n<p>设置好了 WordPress 以后，我们来看一下 WordPress 的站点健康检测：</p>\n<p><img src=\"https://v2rayssr.com/wp-content/uploads/2022/06/3423.jpg\" alt=\"img\"></p>\n",
            "tags": [
                "tip"
            ]
        }
    ]
}