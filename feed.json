{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2025/01/12/pandas-shi-yong/",
            "url": "https://0xdadream.github.io/2025/01/12/pandas-shi-yong/",
            "title": "pandas使用",
            "date_published": "2025-01-12T04:25:00.000Z",
            "content_html": "<h1 id=\"pandas使用\"><a href=\"#pandas使用\" class=\"headerlink\" title=\"pandas使用\"></a>pandas使用</h1><p><strong>教程框架：</strong></p>\n<ol>\n<li><strong>Pandas 简介与安装</strong><ul>\n<li>什么是 pandas？</li>\n<li>为什么使用 pandas？</li>\n<li>如何安装 pandas？</li>\n</ul>\n</li>\n<li><strong>Pandas 数据结构：Series</strong><ul>\n<li>Series 的创建</li>\n<li>Series 的索引与切片</li>\n<li>Series 的基本操作（算术、逻辑、函数应用）</li>\n<li>Series 的常用属性和方法</li>\n</ul>\n</li>\n<li><strong>Pandas 数据结构：DataFrame</strong><ul>\n<li>DataFrame 的创建</li>\n<li>DataFrame 的索引与选择数据</li>\n<li>DataFrame 的基本操作<ul>\n<li>添加、删除列</li>\n<li>修改数据</li>\n<li>排序</li>\n</ul>\n</li>\n<li>DataFrame 的常用属性和方法</li>\n<li>数据清洗</li>\n</ul>\n</li>\n<li><strong>Pandas 数据操作</strong><ul>\n<li>数据分组 (GroupBy)</li>\n<li>数据聚合 (Aggregation)</li>\n<li>数据合并 (Merge, Join)</li>\n<li>数据连接 (Concat)</li>\n<li>数据透视表 (Pivot Table)</li>\n</ul>\n</li>\n<li><strong>Pandas 文件读写</strong><ul>\n<li>读取 CSV 文件</li>\n<li>读取 Excel 文件</li>\n<li>读取其他类型文件</li>\n<li>写入文件</li>\n</ul>\n</li>\n<li><strong>Pandas 时间序列数据处理</strong><ul>\n<li>时间戳 (Timestamp)</li>\n<li>时间范围 (Date Range)</li>\n<li>时间重采样 (Resampling)</li>\n</ul>\n</li>\n<li><strong>Pandas 高级应用</strong><ul>\n<li>apply 和 applymap 函数</li>\n<li>窗口函数</li>\n<li>数据可视化</li>\n</ul>\n</li>\n<li><strong>总结与进阶</strong><ul>\n<li>常用技巧</li>\n<li>学习资源</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-Pandas-简介与安装\"><a href=\"#1-Pandas-简介与安装\" class=\"headerlink\" title=\"1. Pandas 简介与安装\"></a><strong>1. Pandas 简介与安装</strong></h3><p><strong>1.1 什么是 pandas？</strong></p>\n<p>Pandas 是一个强大的 Python 数据分析库，它提供了高效的数据结构和数据分析工具。Pandas 的核心是两种数据结构：Series 和 DataFrame，它们使得数据处理变得简单快捷。</p>\n<ul>\n<li><strong>Series:</strong> 一维的、带标签的数组，类似于带索引的列表。</li>\n<li><strong>DataFrame:</strong> 二维的、表格型的数据结构，可以看作是 Series 的容器。</li>\n</ul>\n<p><strong>1.2 为什么使用 pandas？</strong></p>\n<ul>\n<li><strong>数据处理能力强:</strong> Pandas 提供了各种数据操作功能，如数据清洗、转换、切片、聚合、合并等。</li>\n<li><strong>高效的数据结构:</strong> Series 和 DataFrame 的设计使得数据操作和分析速度快。</li>\n<li><strong>与 NumPy 集成:</strong> Pandas 基于 NumPy 构建，可以无缝地与 NumPy 数组进行交互。</li>\n<li><strong>文件读写方便:</strong> Pandas 可以轻松读取和写入各种格式的文件，如 CSV、Excel、JSON、SQL 等。</li>\n<li><strong>数据可视化支持:</strong> Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。</li>\n<li><strong>易用性:</strong> Pandas 的 API 设计简洁易懂，上手快。</li>\n</ul>\n<p><strong>1.3 如何安装 pandas？</strong></p>\n<p>推荐使用 pip 来安装 pandas：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">pip install pandas<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你使用的是 Anaconda，pandas 通常会预装，如果没有，也可以用 conda 安装：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">conda install pandas<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>安装验证:</strong></p>\n<p>打开你的 Python 解释器或 Jupyter Notebook，输入以下代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果正确打印出 pandas 的版本号，就说明安装成功了。</p>\n<hr>\n<h3 id=\"2-Pandas-数据结构：Series\"><a href=\"#2-Pandas-数据结构：Series\" class=\"headerlink\" title=\"2. Pandas 数据结构：Series\"></a><strong>2. Pandas 数据结构：Series</strong></h3><p><strong>2.1 Series 的创建</strong></p>\n<p>Series 是一种一维的、带有标签（索引）的数据结构。它可以存储各种数据类型，如整数、浮点数、字符串、布尔值等。</p>\n<p><strong>2.1.1 从列表创建 Series</strong></p>\n<p>最简单的创建方式是从 Python 的列表创建：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>    <span class=\"token number\">10</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">20</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">30</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">40</span>\n<span class=\"token number\">4</span>    <span class=\"token number\">50</span>\ndtype: int64\n<span class=\"token operator\">&lt;</span>class <span class=\"token string\">'pandas.core.series.Series'</span><span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>默认情况下，Series 会自动创建从 0 开始的整数索引。</li>\n<li>dtype: int64 表示数据类型是 64 位整数。</li>\n</ul>\n<p><strong>2.1.2 从 NumPy 数组创建 Series</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\narr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>    <span class=\"token number\">1.1</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">2.2</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">3.3</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">4.4</span>\n<span class=\"token number\">4</span>    <span class=\"token number\">5.5</span>\ndtype: float64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>dtype: float64 表示数据类型是 64 位浮点数。</li>\n</ul>\n<p><strong>2.1.3 从字典创建 Series</strong></p>\n<p>字典的键会成为 Series 的索引，值会成为 Series 的数据：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">}</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a    <span class=\"token number\">100</span>\nb    <span class=\"token number\">200</span>\nc    <span class=\"token number\">300</span>\ndtype: int64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.1.4 自定义索引</strong></p>\n<p>可以在创建 Series 时指定索引：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\nindex <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>index<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">x    <span class=\"token number\">10</span>\ny    <span class=\"token number\">20</span>\nz    <span class=\"token number\">30</span>\ndtype: int64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.2 Series 的索引与切片</strong></p>\n<p>类似于列表和字典，可以使用索引来访问 Series 的元素。</p>\n<p><strong>2.2.1 通过位置索引访问</strong></p>\n<p>使用默认的整数索引：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 b    20</span>\n             <span class=\"token comment\">#      c    30</span>\n             <span class=\"token comment\">#      dtype: int64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.2.2 通过自定义索引访问</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 b    20</span>\n                <span class=\"token comment\">#      c    30</span>\n                <span class=\"token comment\">#      d    40</span>\n                <span class=\"token comment\">#      dtype: int64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.3 Series 的基本操作</strong></p>\n<p><strong>2.3.1 算术运算</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 加法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">*</span> s2<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 乘法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s2 <span class=\"token operator\">/</span> s1<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 除法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Series 会按照索引对齐进行计算。</p>\n<p><strong>2.3.2 逻辑运算</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 布尔值 Series</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>s <span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 选择大于20的元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.3.3 函数应用</strong></p>\n<p>可以使用 apply() 方法将函数应用于 Series 的每个元素：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">**</span><span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.4 Series 的常用属性和方法</strong></p>\n<ul>\n<li>values: 返回 Series 的值，以 NumPy 数组的形式。</li>\n<li>index: 返回 Series 的索引。</li>\n<li>dtype: 返回 Series 的数据类型。</li>\n<li>size: 返回 Series 的元素个数。</li>\n<li>unique(): 返回 Series 中唯一的值。</li>\n<li>value_counts(): 返回每个值出现的次数。</li>\n<li>head(n): 返回前 n 个元素。</li>\n<li>tail(n): 返回后 n 个元素。</li>\n<li>sort_values(): 对 Series 的值进行排序。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 输出 [10 20 10 30 20]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 输出 RangeIndex(start=0, stop=5, step=1)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 输出 int64</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>        <span class=\"token comment\"># 输出 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 输出 [10 20 30]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出 10    2</span>\n                         <span class=\"token comment\">#  20    2</span>\n                         <span class=\"token comment\">#  30    1</span>\n                         <span class=\"token comment\"># dtype: int64</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 输出 0    10</span>\n                         <span class=\"token comment\">#      1    20</span>\n                         <span class=\"token comment\">#      dtype: int64</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 0    10</span>\n                       <span class=\"token comment\">#      2    10</span>\n                       <span class=\"token comment\">#      1    20</span>\n                       <span class=\"token comment\">#      4    20</span>\n                       <span class=\"token comment\">#      3    30</span>\n                       <span class=\"token comment\">#      dtype: int64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"3-Pandas-数据结构：DataFrame\"><a href=\"#3-Pandas-数据结构：DataFrame\" class=\"headerlink\" title=\"3. Pandas 数据结构：DataFrame\"></a><strong>3. Pandas 数据结构：DataFrame</strong></h3><p><strong>3.1 DataFrame 的创建</strong></p>\n<p>DataFrame 是一个二维的表格型数据结构，可以看作是 Series 的容器。它由行和列组成，每一列可以是不同的数据类型。</p>\n<p><strong>3.1.1 从字典创建 DataFrame</strong></p>\n<p>字典的键会成为 DataFrame 的列名，值会成为 DataFrame 的列数据：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">name  age      city\n<span class=\"token number\">0</span>    Alice   <span class=\"token number\">25</span>  New York\n<span class=\"token number\">1</span>      Bob   <span class=\"token number\">30</span>    London\n<span class=\"token number\">2</span>  Charlie   <span class=\"token number\">28</span>     Paris<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.1.2 从列表创建 DataFrame</strong></p>\n<p>可以使用列表的列表或 NumPy 数组创建 DataFrame，需要指定列名：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">name  age      city\n<span class=\"token number\">0</span>    Alice   <span class=\"token number\">25</span>  New York\n<span class=\"token number\">1</span>      Bob   <span class=\"token number\">30</span>    London\n<span class=\"token number\">2</span>  Charlie   <span class=\"token number\">28</span>     Paris<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.1.3 从 Series 创建 DataFrame</strong></p>\n<p>可以将多个 Series 组合成一个 DataFrame：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\nname <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nage <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncity <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> city<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">name  age      city\n<span class=\"token number\">0</span>    Alice   <span class=\"token number\">25</span>  New York\n<span class=\"token number\">1</span>      Bob   <span class=\"token number\">30</span>    London\n<span class=\"token number\">2</span>  Charlie   <span class=\"token number\">28</span>     Paris<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.2 DataFrame 的索引与选择数据</strong></p>\n<p><strong>3.2.1 选择列</strong></p>\n<p>可以使用列名来选择 DataFrame 的一列或多列：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择 'name' 列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择 'name' 和 'age' 列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.2.2 选择行</strong></p>\n<p>可以使用 loc 和 iloc 来选择行：</p>\n<ul>\n<li>loc：通过行标签（索引）选择行。</li>\n<li>iloc：通过行位置（整数索引）选择行。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 通过标签选择 Alice 这行，按标签</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 通过位置选择 第一行，按位置</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择前两行所有列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 通过标签选择 Alice 到 Bob 行的所有列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.2.3 选择特定元素</strong></p>\n<p>可以使用行和列的标签或位置来选择特定的元素：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择第 0 行 'name' 列的元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择第 0 行 第 0 列的元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3 DataFrame 的基本操作</strong></p>\n<p><strong>3.3.1 添加列</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 添加 'gender' 列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3.2 删除列</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'gender'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删除 'gender' 列，axis=1 表示列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3.3 修改数据</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">26</span> <span class=\"token comment\"># 修改第 0 行 'age' 列的值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3.4 排序</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 按 'age' 列降序排序</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.4 DataFrame 的常用属性和方法</strong></p>\n<ul>\n<li>shape: 返回 DataFrame 的形状（行数，列数）。</li>\n<li>index: 返回 DataFrame 的行索引。</li>\n<li>columns: 返回 DataFrame 的列索引。</li>\n<li>dtypes: 返回 DataFrame 每列的数据类型。</li>\n<li>head(n): 返回 DataFrame 的前 n 行。</li>\n<li>tail(n): 返回 DataFrame 的后 n 行。</li>\n<li>info(): 显示 DataFrame 的基本信息，包括列名，数据类型，非空值数量等。</li>\n<li>describe(): 返回 DataFrame 的统计摘要。</li>\n<li>dropna(): 删除包含缺失值的行或列。</li>\n<li>fillna(): 填充缺失值。</li>\n</ul>\n<p><strong>3.5 数据清洗</strong></p>\n<p>数据清洗是数据分析中重要的一步，包括处理缺失值、重复值等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Unknown'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 检测缺失值</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除包含缺失值的行</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>drop_duplicates<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删除重复行</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 用平均值填充年龄缺失值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"4-Pandas-数据操作\"><a href=\"#4-Pandas-数据操作\" class=\"headerlink\" title=\"4. Pandas 数据操作\"></a><strong>4. Pandas 数据操作</strong></h3><p><strong>4.1 数据分组 (GroupBy)</strong></p>\n<p>groupby() 方法允许你根据一个或多个列的值将 DataFrame 分组，然后可以对每个组进行聚合操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'category'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\ngrouped <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'category'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 查看分组情况</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每个分组求和</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每个分组求平均值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.2 数据聚合 (Aggregation)</strong></p>\n<p>聚合操作是对分组后的数据进行汇总计算，如求和、平均值、最大值、最小值等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'category'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ngrouped <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'category'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'max'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'min'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 同时执行多个聚合函数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对指定列执行不同的聚合函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.3 数据合并 (Merge, Join)</strong></p>\n<p>merge() 方法用于将两个 DataFrame 根据共同的列合并在一起，类似于 SQL 的 JOIN 操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndf1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value1'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndf2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value2'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'原始数据'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 内连接(inner join)</span>\nmerged_inner <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'inner'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_inner<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 左连接(left join)</span>\nmerged_left <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'left'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"left join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_left<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 右连接(right join)</span>\nmerged_right <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'right'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_right<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 外连接(outer join)</span>\nmerged_outer <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'outer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outer join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_outer<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.4 数据连接 (Concat)</strong></p>\n<p>concat() 方法用于将两个或多个 DataFrame 沿着指定的轴连接在一起。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndf1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndf2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原始数据:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 垂直连接(默认axis=0)</span>\nconcatenated_vertical <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ignore_index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"垂直连接:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>concatenated_vertical<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 水平连接(axis=1)</span>\nconcatenated_horizontal <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"水平连接:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>concatenated_horizontal<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.5 数据透视表 (Pivot Table)</strong></p>\n<p>pivot_table() 方法用于创建数据透视表，可以根据指定的列对数据进行重塑和汇总。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'date'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2023-01-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-03'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'product'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'sales'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">220</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\npivot_df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>pivot_table<span class=\"token punctuation\">(</span>index<span class=\"token operator\">=</span><span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token string\">'product'</span><span class=\"token punctuation\">,</span> values<span class=\"token operator\">=</span><span class=\"token string\">'sales'</span><span class=\"token punctuation\">,</span> aggfunc<span class=\"token operator\">=</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> fill_value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pivot_df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"5-Pandas-文件读写\"><a href=\"#5-Pandas-文件读写\" class=\"headerlink\" title=\"5. Pandas 文件读写\"></a><strong>5. Pandas 文件读写</strong></h3><p>Pandas 提供了强大的文件读写功能，可以方便地处理各种数据文件。</p>\n<p><strong>5.1 读取 CSV 文件</strong></p>\n<p>CSV (Comma Separated Values) 是一种常见的文本文件格式，用于存储表格数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 读取 CSV 文件</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.csv'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 指定分隔符，如果不是逗号，使用 sep 参数</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取指定列</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.csv'</span><span class=\"token punctuation\">,</span> usecols<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.2 读取 Excel 文件</strong></p>\n<p>Pandas 可以直接读取 Excel 文件（.xls 和 .xlsx）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 读取 Excel 文件</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'data.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取指定 sheet</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'data.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取指定列</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'data.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">,</span> usecols<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.3 读取其他类型文件</strong></p>\n<p>Pandas 还支持读取其他类型的文件，例如：</p>\n<ul>\n<li><strong>JSON</strong>: pd.read_json()</li>\n<li><strong>HTML</strong>: pd.read_html()</li>\n<li><strong>SQL</strong>: pd.read_sql()</li>\n</ul>\n<p><strong>5.4 写入文件</strong></p>\n<p>可以将 DataFrame 写入到不同的文件格式。</p>\n<p><strong>5.4.1 写入 CSV 文件</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 写入 CSV 文件</span>\ndf<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'output.csv'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># index=False 表示不写入行索引</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.4.2 写入 Excel 文件</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 写入 Excel 文件</span>\ndf<span class=\"token punctuation\">.</span>to_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'output.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.4.3 写入其他类型文件</strong></p>\n<ul>\n<li><strong>JSON</strong>: df.to_json()</li>\n<li><strong>HTML</strong>: df.to_html()</li>\n<li><strong>SQL</strong>: df.to_sql()</li>\n</ul>\n<hr>\n<h3 id=\"6-Pandas-时间序列数据处理\"><a href=\"#6-Pandas-时间序列数据处理\" class=\"headerlink\" title=\"6. Pandas 时间序列数据处理\"></a><strong>6. Pandas 时间序列数据处理</strong></h3><p>Pandas 提供了强大的时间序列数据处理能力，可以方便地分析和处理时间序列数据。</p>\n<p><strong>6.1 时间戳 (Timestamp)</strong></p>\n<p>时间戳是表示特定时间点的对象。Pandas 可以使用 pd.Timestamp 创建时间戳。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 创建时间戳</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Timestamp<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-26 12:30:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 从字符串创建时间戳</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>to_datetime<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-26'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>6.2 时间范围 (Date Range)</strong></p>\n<p>pd.date_range() 方法可以创建指定时间范围内的一系列时间戳。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 创建时间范围</span>\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date_range<span class=\"token punctuation\">)</span>\n\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-10-10'</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'W'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date_range<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>periods: 时间戳的数量。</li>\n<li>freq: 时间间隔，如 ‘D’ (天), ‘W’ (周), ‘M’ (月), ‘H’ (小时), ‘T’ (分钟), ‘S’ (秒) 等。</li>\n</ul>\n<p><strong>6.3 时间序列索引</strong></p>\n<p>可以将时间序列数据作为 DataFrame 或 Series 的索引，方便时间序列数据的分析。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token comment\"># 创建时间序列索引</span>\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>date_range<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 使用时间序列索引选择数据</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">[</span><span class=\"token string\">'2023-10-03'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">[</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'2023-10-05'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>6.4 时间重采样 (Resampling)</strong></p>\n<p>resample() 方法可以对时间序列数据进行重采样，例如，将数据从天转换为周或月。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>date_range<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 将日数据重采样为周数据</span>\nweekly_ts <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span><span class=\"token string\">'W'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>weekly_ts<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 将日数据重采样为月数据</span>\nmonthly_ts <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>monthly_ts<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>.mean()：计算重采样后的平均值。</li>\n<li>.sum()：计算重采样后的总和。</li>\n<li>.min()：计算重采样后的最小值。</li>\n<li>.max()：计算重采样后的最大值。</li>\n<li>.first()：计算重采样后的第一个值。</li>\n<li>.last()：计算重采样后的最后一个值。</li>\n</ul>\n<p><strong>6.5 时间序列常用方法</strong></p>\n<ul>\n<li>shift()：移动时间序列数据。</li>\n<li>diff()：计算时间序列数据的差分。</li>\n<li>asfreq()：转换为指定频率。</li>\n<li>rolling()：计算滑动窗口统计量。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>date_range<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 向下移动两个时间单位</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>diff<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计算一阶差分</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>asfreq<span class=\"token punctuation\">(</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> fill_value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#转换为小时频率</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计算窗口为 3 的移动平均</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"7-Pandas-高级应用\"><a href=\"#7-Pandas-高级应用\" class=\"headerlink\" title=\"7. Pandas 高级应用\"></a><strong>7. Pandas 高级应用</strong></h3><p><strong>7.1.1 apply() 函数</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对 Series 应用函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对 DataFrame 的行或列应用函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">row_sum</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>row_sum<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每一行应用求和操作</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>row_sum<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每一列应用求和操作</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>7.1.2 applymap() 函数</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对 DataFrame 的每个元素应用函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_one</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>applymap<span class=\"token punctuation\">(</span>add_one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>7.2 窗口函数</strong></p>\n<p>窗口函数可以对数据窗口进行计算，例如移动平均、滚动求和等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 移动平均</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'rolling_mean'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 累加</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'cumsum'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 窗口最大值</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'rolling_max'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 窗口最小值</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'rolling_min'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>7.3 数据可视化</strong></p>\n<p>Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制折线图</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Random Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Index'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制直方图</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>bins<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Hist Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Frequency'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制散点图</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'x'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Scatter Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制箱线图</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Box Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制饼图</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\nlabels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>pie<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> autopct<span class=\"token operator\">=</span><span class=\"token string\">'%.2f'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Pie Chart Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"8-总结与进阶\"><a href=\"#8-总结与进阶\" class=\"headerlink\" title=\"8. 总结与进阶\"></a><strong>8. 总结与进阶</strong></h3><p><strong>8.1 常用技巧</strong></p>\n<p>在实际使用 pandas 时，以下一些技巧可能会很有帮助：</p>\n<ul>\n<li><p><strong>链式操作：</strong> 可以将多个操作链接在一起，提高代码的可读性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.csv'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 query() 方法：</strong> 可以用更简洁的语法进行数据筛选：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'age &gt; 30 and city == \"New York\"'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 isin() 方法：</strong> 可以检查 Series 或 DataFrame 中的元素是否在给定的列表中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">]</span>\n    df<span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isin<span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 assign() 方法：</strong> 可以添加新的列，同时保留原始 DataFrame：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">(</span>age_plus_ten <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 pipe() 方法：</strong> 可以将 DataFrame 传递给一系列函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">clean_data</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_age</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> df<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">(</span>age_plus_ten <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\ndf<span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>clean_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>add_age<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>8.2 学习资源</strong></p>\n<ul>\n<li><strong>官方文档：</strong> <a href=\"https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/docs/\">pandas documentation</a><ul>\n<li>这是学习 pandas 最权威的资源，包含了所有函数、方法的详细说明和示例。</li>\n</ul>\n</li>\n<li><strong>在线教程：</strong><ul>\n<li><a href=\"https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/docs/user_guide/10min.html\">10 Minutes to pandas</a>: 一个快速上手 pandas 的教程。</li>\n<li><a href=\"https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html\">Pandas Cookbook</a>: 包含各种常见的数据处理问题的解决方案。</li>\n</ul>\n</li>\n<li><strong>书籍：</strong><ul>\n<li>“Python for Data Analysis” by Wes McKinney： pandas 的作者写的书，是学习 pandas 的经典之作。</li>\n</ul>\n</li>\n<li><strong>实践项目：</strong><ul>\n<li>可以尝试一些 Kaggle 上的数据分析项目，将 pandas 应用到实际问题中。</li>\n</ul>\n</li>\n<li><strong>社区：</strong><ul>\n<li>Stack Overflow：在遇到问题时，可以在 Stack Overflow 上搜索或提问。</li>\n<li>GitHub：pandas 也是一个开源项目，可以在 GitHub 上查看源代码，参与贡献。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/01/10/liang-tai-dian-nao-shi-yong-github-pycharm-tong-bu-kai-fa/",
            "url": "https://0xdadream.github.io/2025/01/10/liang-tai-dian-nao-shi-yong-github-pycharm-tong-bu-kai-fa/",
            "title": "两台电脑使用github+pycharm同步开发",
            "date_published": "2025-01-10T04:25:00.000Z",
            "content_html": "<h1 id=\"两台电脑使用github-pycharm同步开发\"><a href=\"#两台电脑使用github-pycharm同步开发\" class=\"headerlink\" title=\"两台电脑使用github+pycharm同步开发\"></a>两台电脑使用github+pycharm同步开发</h1><p>本文介绍如何在两台电脑之间通过 GitHub 和 PyCharm 实现项目的同步开发。</p>\n<hr>\n<h3 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a><strong>一、准备工作</strong></h3><h4 id=\"1-在两台电脑上安装必要工具\"><a href=\"#1-在两台电脑上安装必要工具\" class=\"headerlink\" title=\"1. 在两台电脑上安装必要工具\"></a><strong>1. 在两台电脑上安装必要工具</strong></h4><ul>\n<li><strong>Git</strong>：下载并安装 <a href=\"https://git-scm.com/\">Git</a>。</li>\n<li><strong>PyCharm</strong>：下载并安装 <a href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a>。</li>\n<li><strong>GitHub 账号</strong>：确保已经注册并拥有 GitHub 账号。</li>\n</ul>\n<h4 id=\"2-配置-Git-环境\"><a href=\"#2-配置-Git-环境\" class=\"headerlink\" title=\"2. 配置 Git 环境\"></a><strong>2. 配置 Git 环境</strong></h4><p>在两台电脑上分别配置 Git：</p>\n<ol>\n<li><p><strong>设置用户名和邮箱</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"你的用户名\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 SSH 密钥</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> ed25519 <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>按提示生成密钥（存储在 <code>~/.ssh/id_ed25519</code>）。</p>\n</li>\n<li><p>使用以下命令查看并复制公钥内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/.ssh/id_ed25519.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>登录 GitHub，进入 <strong>Settings &gt; SSH and GPG keys</strong>，点击 <strong>New SSH key</strong>，将公钥粘贴并保存。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>测试连接</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@github.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果返回：</p>\n<pre class=\"line-numbers language-vbnet\" data-language=\"vbnet\"><code class=\"language-vbnet\">Hi <span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span><span class=\"token comment\">! You've successfully authenticated, but GitHub does not provide shell access.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>表示配置成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"二、创建远程仓库并上传项目\"><a href=\"#二、创建远程仓库并上传项目\" class=\"headerlink\" title=\"二、创建远程仓库并上传项目\"></a><strong>二、创建远程仓库并上传项目</strong></h3><h4 id=\"1-创建远程仓库\"><a href=\"#1-创建远程仓库\" class=\"headerlink\" title=\"1. 创建远程仓库\"></a><strong>1. 创建远程仓库</strong></h4><ol>\n<li>登录 GitHub，点击右上角的 <strong>+</strong> &gt; <strong>New repository</strong>。</li>\n<li>填写仓库名称（例如 <code>my_project</code>），选择 <strong>Public</strong> 或 <strong>Private</strong>，然后点击 <strong>Create repository</strong>。</li>\n</ol>\n<h4 id=\"2-将本地项目上传到远程仓库\"><a href=\"#2-将本地项目上传到远程仓库\" class=\"headerlink\" title=\"2. 将本地项目上传到远程仓库\"></a><strong>2. 将本地项目上传到远程仓库</strong></h4><p>在已存在的项目目录中初始化 Git，并推送到远程仓库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /path/to/your/project\n<span class=\"token function\">git</span> init  <span class=\"token comment\"># 初始化</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>  <span class=\"token comment\"># 提交所有文件到暂存区</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit\"</span>  <span class=\"token comment\"># 提交到当前分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-M</span> main <span class=\"token comment\"># 将当前分支重命名为main，github默认分支为main</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project.git  <span class=\"token comment\"># 绑定远程仓库</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin main <span class=\"token comment\"># 将 main 分支推送到远程仓库，并建立本地与远程分支的关联，添加 -u 参数后，本地的 main 分支会与远程的 main 分支关联起来。这样，后续执行 git pull 或 git push 时，不需要再指定分支名称</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"三、在两台电脑上同步项目\"><a href=\"#三、在两台电脑上同步项目\" class=\"headerlink\" title=\"三、在两台电脑上同步项目\"></a><strong>三、在两台电脑上同步项目</strong></h3><h4 id=\"电脑-A-操作\"><a href=\"#电脑-A-操作\" class=\"headerlink\" title=\"电脑 A 操作\"></a><strong>电脑 A 操作</strong></h4><ol>\n<li><p><strong>克隆远程仓库</strong>： 如果电脑 A 尚未有项目代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project.git\n<span class=\"token builtin class-name\">cd</span> my_project<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果电脑 A 已有代码并已推送到远程仓库，则跳过此步骤。</p>\n</li>\n<li><p><strong>用 PyCharm 打开项目</strong>：</p>\n<ul>\n<li>打开 PyCharm，点击 <strong>File &gt; Open</strong>，选择项目目录。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"电脑-B-操作\"><a href=\"#电脑-B-操作\" class=\"headerlink\" title=\"电脑 B 操作\"></a><strong>电脑 B 操作</strong></h4><ol>\n<li><p><strong>克隆远程仓库</strong>： 在电脑 B 的终端中运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project.git\n<span class=\"token builtin class-name\">cd</span> my_project<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>用 PyCharm 打开项目</strong>：</p>\n<ul>\n<li>打开 PyCharm，点击 <strong>File &gt; Open</strong>，选择项目目录。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"四、日常开发流程\"><a href=\"#四、日常开发流程\" class=\"headerlink\" title=\"四、日常开发流程\"></a><strong>四、日常开发流程</strong></h3><h4 id=\"1-在电脑-A-或-B-上修改代码\"><a href=\"#1-在电脑-A-或-B-上修改代码\" class=\"headerlink\" title=\"1. 在电脑 A 或 B 上修改代码\"></a><strong>1. 在电脑 A 或 B 上修改代码</strong></h4><ol>\n<li><p>使用 PyCharm 编辑代码。</p>\n</li>\n<li><p>在终端或 PyCharm 的 Git 工具窗口中提交更改：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"描述本次更改的内容\"</span>\n<span class=\"token function\">git</span> push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"2-在另一台电脑同步代码\"><a href=\"#2-在另一台电脑同步代码\" class=\"headerlink\" title=\"2. 在另一台电脑同步代码\"></a><strong>2. 在另一台电脑同步代码</strong></h4><p>在另一台电脑上拉取最新代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后继续开发。</p>\n<hr>\n<h3 id=\"五、解决冲突\"><a href=\"#五、解决冲突\" class=\"headerlink\" title=\"五、解决冲突\"></a><strong>五、解决冲突</strong></h3><p>如果两台电脑同时修改了同一个文件并提交，可能会出现冲突。解决方法如下：</p>\n<ol>\n<li><p><strong>拉取代码时提示冲突</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Git 会提示冲突的文件。</p>\n</li>\n<li><p><strong>手动解决冲突</strong>： 打开冲突文件，按照以下格式解决冲突：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n你的修改\n=======\n另一台电脑的修改\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; commit-hash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改为期望的代码并保存。</p>\n</li>\n<li><p><strong>标记冲突已解决并提交</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"解决冲突\"</span>\n<span class=\"token function\">git</span> push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"六、PyCharm-中内置-Git-工具的使用\"><a href=\"#六、PyCharm-中内置-Git-工具的使用\" class=\"headerlink\" title=\"六、PyCharm 中内置 Git 工具的使用\"></a><strong>六、PyCharm 中内置 Git 工具的使用</strong></h3><ol>\n<li><strong>提交代码</strong>：<ul>\n<li>在 PyCharm 界面右上角，点击 <strong>Commit</strong>。</li>\n<li>勾选修改的文件，填写提交信息，然后点击 <strong>Commit</strong> 或 <strong>Commit and Push</strong>。</li>\n</ul>\n</li>\n<li><strong>拉取代码</strong>：<ul>\n<li>点击 <strong>Git &gt; Pull</strong>，选择远程分支，点击 <strong>OK</strong>。</li>\n</ul>\n</li>\n<li><strong>查看分支和日志</strong>：<ul>\n<li>点击 <strong>Git &gt; Log</strong>，查看提交历史和分支结构。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"七、注意事项\"><a href=\"#七、注意事项\" class=\"headerlink\" title=\"七、注意事项\"></a><strong>七、注意事项</strong></h3><ol>\n<li><strong>保持代码同步</strong>：每次在另一台电脑开发前，先执行 <code>git pull</code> 拉取最新代码。</li>\n<li><strong>频繁提交</strong>：尽量将每次修改后的小更新提交到远程仓库，避免产生冲突。</li>\n<li><strong>多人协作时注意分支管理</strong>：可以为不同功能创建分支，完成后再合并到主分支。</li>\n</ol>\n<h3 id=\"八、分支管理\"><a href=\"#八、分支管理\" class=\"headerlink\" title=\"八、分支管理\"></a><strong>八、分支管理</strong></h3><p>当开发新功能或进行实验时，可以使用分支来避免影响主分支。</p>\n<h4 id=\"1-创建和切换分支\"><a href=\"#1-创建和切换分支\" class=\"headerlink\" title=\"1. 创建和切换分支\"></a><strong>1. 创建和切换分支</strong></h4><ul>\n<li><p>创建新分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>切换到新分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或直接创建并切换：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"2-合并分支\"><a href=\"#2-合并分支\" class=\"headerlink\" title=\"2. 合并分支\"></a><strong>2. 合并分支</strong></h4><ul>\n<li><p>切换到主分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>合并新功能分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> merge feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"3-删除分支\"><a href=\"#3-删除分支\" class=\"headerlink\" title=\"3. 删除分支\"></a><strong>3. 删除分支</strong></h4><ul>\n<li><p>删除本地分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>删除远程分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"九、处理多人协作的冲突\"><a href=\"#九、处理多人协作的冲突\" class=\"headerlink\" title=\"九、处理多人协作的冲突\"></a><strong>九、处理多人协作的冲突</strong></h3><p>如果你在两台电脑之外，还与其他人协作开发，可以通过以下方式优化工作流。</p>\n<h4 id=\"1-定期拉取最新代码\"><a href=\"#1-定期拉取最新代码\" class=\"headerlink\" title=\"1. 定期拉取最新代码\"></a><strong>1. 定期拉取最新代码</strong></h4><p>在本地开发前，确保代码是最新的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-使用-rebase-整理提交历史\"><a href=\"#2-使用-rebase-整理提交历史\" class=\"headerlink\" title=\"2. 使用 rebase 整理提交历史\"></a><strong>2. 使用 <code>rebase</code> 整理提交历史</strong></h4><p>在同步远程分支时，你可以选择 <code>rebase</code> 方式，使提交历史更加整洁：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull <span class=\"token parameter variable\">--rebase</span> origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-使用标签管理版本\"><a href=\"#3-使用标签管理版本\" class=\"headerlink\" title=\"3. 使用标签管理版本\"></a><strong>3. 使用标签管理版本</strong></h4><p>当一个功能开发完成后，可以添加一个标签：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> v1.0 <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Version 1.0 release\"</span>\n<span class=\"token function\">git</span> push origin v1.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"十、PyCharm-的一些高级-Git-功能\"><a href=\"#十、PyCharm-的一些高级-Git-功能\" class=\"headerlink\" title=\"十、PyCharm 的一些高级 Git 功能\"></a><strong>十、PyCharm 的一些高级 Git 功能</strong></h3><h4 id=\"1-可视化查看分支\"><a href=\"#1-可视化查看分支\" class=\"headerlink\" title=\"1. 可视化查看分支\"></a><strong>1. 可视化查看分支</strong></h4><ul>\n<li>在 PyCharm 界面右下角，点击 <strong>Git 分支名称</strong>，可以查看和切换分支。</li>\n<li>打开 <strong>Git &gt; Log</strong>，可以看到分支结构图和提交历史。</li>\n</ul>\n<h4 id=\"2-解决冲突\"><a href=\"#2-解决冲突\" class=\"headerlink\" title=\"2. 解决冲突\"></a><strong>2. 解决冲突</strong></h4><p>当拉取代码遇到冲突时，PyCharm 提供了图形化工具：</p>\n<ol>\n<li>点击 <strong>Merge Conflicts</strong> 提示框。</li>\n<li>使用 PyCharm 的三栏界面，直观地合并冲突。</li>\n<li>合并完成后，保存并提交。</li>\n</ol>\n<h4 id=\"3-使用变基（Rebase）\"><a href=\"#3-使用变基（Rebase）\" class=\"headerlink\" title=\"3. 使用变基（Rebase）\"></a><strong>3. 使用变基（Rebase）</strong></h4><ul>\n<li>在 PyCharm 中，选择 <strong>VCS &gt; Git &gt; Rebase</strong>，可以直观地重新整理提交。</li>\n</ul>\n<hr>\n<h3 id=\"十一、优化开发体验\"><a href=\"#十一、优化开发体验\" class=\"headerlink\" title=\"十一、优化开发体验\"></a><strong>十一、优化开发体验</strong></h3><h4 id=\"1-配置-gitignore\"><a href=\"#1-配置-gitignore\" class=\"headerlink\" title=\"1. 配置 .gitignore\"></a><strong>1. 配置 <code>.gitignore</code></strong></h4><p>避免将不必要的文件推送到远程仓库。比如 Python 项目常用的 <code>.gitignore</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">__pycache__/\n*.pyc\n*.pyo\n*.log\n.idea/\n.vscode/\n.DS_Store<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将 <code>.gitignore</code> 文件添加到项目根目录，然后提交：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> .gitignore\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Add .gitignore\"</span>\n<span class=\"token function\">git</span> push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-提高拉取速度\"><a href=\"#2-提高拉取速度\" class=\"headerlink\" title=\"2. 提高拉取速度\"></a><strong>2. 提高拉取速度</strong></h4><p>如果仓库较大，可以通过浅克隆（仅克隆最近的提交历史）加快速度：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span> <span class=\"token number\">1</span> git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-使用-SSH-配置多个远程地址\"><a href=\"#3-使用-SSH-配置多个远程地址\" class=\"headerlink\" title=\"3. 使用 SSH 配置多个远程地址\"></a><strong>3. 使用 SSH 配置多个远程地址</strong></h4><p>如果有多个远程仓库，可以配置多个 <code>remote</code> 地址：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> backup git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project_backup.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"十二、代码评审（Code-Review）和协作工具\"><a href=\"#十二、代码评审（Code-Review）和协作工具\" class=\"headerlink\" title=\"十二、代码评审（Code Review）和协作工具\"></a><strong>十二、代码评审（Code Review）和协作工具</strong></h3><p>如果需要团队协作，可以用 GitHub 的 Pull Request 功能：</p>\n<ol>\n<li><p>创建一个新分支进行开发。</p>\n</li>\n<li><p>推送分支到远程：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>在 GitHub 上发起 **Pull Request (PR)**，让团队成员进行代码审查。</p>\n</li>\n<li><p>审查通过后，合并分支。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"十三、备份与恢复操作\"><a href=\"#十三、备份与恢复操作\" class=\"headerlink\" title=\"十三、备份与恢复操作\"></a><strong>十三、备份与恢复操作</strong></h3><h4 id=\"1-创建仓库副本（Fork）\"><a href=\"#1-创建仓库副本（Fork）\" class=\"headerlink\" title=\"1. 创建仓库副本（Fork）\"></a><strong>1. 创建仓库副本（Fork）</strong></h4><ul>\n<li>如果你想备份项目或创建自己的分支，可以直接在 GitHub 上点击 <strong>Fork</strong>。</li>\n</ul>\n<h4 id=\"2-恢复代码\"><a href=\"#2-恢复代码\" class=\"headerlink\" title=\"2. 恢复代码\"></a><strong>2. 恢复代码</strong></h4><ul>\n<li><p>如果需要回滚到某次提交：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> <span class=\"token operator\">&lt;</span>commit-id<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看历史提交记录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"十四、自动化工作流\"><a href=\"#十四、自动化工作流\" class=\"headerlink\" title=\"十四、自动化工作流\"></a><strong>十四、自动化工作流</strong></h3><h4 id=\"1-使用-GitHub-Actions-自动化任务\"><a href=\"#1-使用-GitHub-Actions-自动化任务\" class=\"headerlink\" title=\"1. 使用 GitHub Actions 自动化任务\"></a><strong>1. 使用 GitHub Actions 自动化任务</strong></h4><p>你可以在 GitHub 上配置 <strong>GitHub Actions</strong>，实现以下功能：</p>\n<ul>\n<li>自动运行测试代码。</li>\n<li>部署代码到服务器。</li>\n</ul>\n<p>示例 <code>.github/workflows/main.yml</code> 文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CI/CD Pipeline\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout code\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Python\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>python@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> pip install <span class=\"token punctuation\">-</span>r requirements.txt\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run tests\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> pytest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-使用-PyCharm-的任务管理\"><a href=\"#2-使用-PyCharm-的任务管理\" class=\"headerlink\" title=\"2. 使用 PyCharm 的任务管理\"></a><strong>2. 使用 PyCharm 的任务管理</strong></h4><ul>\n<li>在 PyCharm 中配置 <strong>Tasks &amp; Contexts</strong>，跟踪开发任务和环境状态。</li>\n</ul>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/12/21/geng-gai-windows-powershell-de-zhi-xing-ce-lue/",
            "url": "https://0xdadream.github.io/2024/12/21/geng-gai-windows-powershell-de-zhi-xing-ce-lue/",
            "title": "更改 Windows PowerShell 的执行策略",
            "date_published": "2024-12-21T04:25:00.000Z",
            "content_html": "<h1 id=\"更改-Windows-PowerShell-的执行策略\"><a href=\"#更改-Windows-PowerShell-的执行策略\" class=\"headerlink\" title=\"更改 Windows PowerShell 的执行策略\"></a>更改 Windows PowerShell 的执行策略</h1><h3 id=\"1-打开-PowerShell-以管理员身份运行\"><a href=\"#1-打开-PowerShell-以管理员身份运行\" class=\"headerlink\" title=\"1. 打开 PowerShell 以管理员身份运行\"></a>1. 打开 PowerShell 以管理员身份运行</h3><p>首先，您需要以管理员身份运行 PowerShell：</p>\n<ul>\n<li>按 <code>Win + X</code> 并选择“Windows PowerShell (管理员)”。</li>\n<li>如果您使用的是较新的 Windows 版本，也可以搜索“PowerShell”，右键点击并选择“以管理员身份运行”。</li>\n</ul>\n<h3 id=\"2-检查当前执行策略\"><a href=\"#2-检查当前执行策略\" class=\"headerlink\" title=\"2. 检查当前执行策略\"></a>2. 检查当前执行策略</h3><p>在更改执行策略之前，您可以查看当前的执行策略设置，执行以下命令：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Get-ExecutionPolicy</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该命令将返回当前的执行策略，可能的输出包括：</p>\n<ul>\n<li><code>Restricted</code>（默认策略，不允许执行任何脚本）</li>\n<li><code>RemoteSigned</code>（本地脚本可以运行，下载的脚本需要签名）</li>\n<li><code>Unrestricted</code>（允许所有脚本运行）</li>\n<li><code>ByPass</code>（完全忽略执行策略）</li>\n</ul>\n<h3 id=\"3-修改执行策略\"><a href=\"#3-修改执行策略\" class=\"headerlink\" title=\"3. 修改执行策略\"></a>3. 修改执行策略</h3><p>要更改执行策略，可以使用 <code>Set-ExecutionPolicy</code> 命令。例如，您可以将执行策略更改为 <code>RemoteSigned</code>，这样可以运行本地脚本并允许下载的签名脚本运行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> RemoteSigned<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果您希望设置为不限制脚本执行，可以使用 <code>Unrestricted</code>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> Unrestricted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者，如果您希望脚本完全不受限制（但存在安全风险），可以使用 <code>Bypass</code>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> Bypass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-确认更改\"><a href=\"#4-确认更改\" class=\"headerlink\" title=\"4. 确认更改\"></a>4. 确认更改</h3><p>更改执行策略后，系统会要求您确认。输入 <code>Y</code> 进行确认并按回车。</p>\n<h3 id=\"5-检查执行策略更改是否生效\"><a href=\"#5-检查执行策略更改是否生效\" class=\"headerlink\" title=\"5. 检查执行策略更改是否生效\"></a>5. 检查执行策略更改是否生效</h3><p>再次执行以下命令来确保策略已更新：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Get-ExecutionPolicy</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-了解不同的执行策略\"><a href=\"#6-了解不同的执行策略\" class=\"headerlink\" title=\"6. 了解不同的执行策略\"></a>6. 了解不同的执行策略</h3><ul>\n<li><code>Restricted</code>：不允许运行任何脚本（这是默认设置）。</li>\n<li><code>RemoteSigned</code>：允许本地脚本运行，但从互联网下载的脚本需要有效的签名才能运行。</li>\n<li><code>Unrestricted</code>：允许所有脚本运行，但会在运行下载的脚本时给出警告。</li>\n<li><code>Bypass</code>：完全忽略执行策略（适用于临时需求，但有安全隐患）。</li>\n<li><code>AllSigned</code>：要求所有脚本必须由可信的发布者签名，适用于更严格的安全要求。</li>\n</ul>\n<h3 id=\"7-恢复默认执行策略\"><a href=\"#7-恢复默认执行策略\" class=\"headerlink\" title=\"7. 恢复默认执行策略\"></a>7. 恢复默认执行策略</h3><p>如果您希望恢复默认的执行策略，只需执行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> Restricted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>",
            "tags": [
                "windows",
                "powershell"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/12/13/parsec-jiao-cheng/",
            "url": "https://0xdadream.github.io/2024/12/13/parsec-jiao-cheng/",
            "title": "parsec教程",
            "date_published": "2024-12-13T04:25:00.000Z",
            "content_html": "<h1 id=\"parsec教程\"><a href=\"#parsec教程\" class=\"headerlink\" title=\"parsec教程\"></a>parsec教程</h1><h2 id=\"修改代理\"><a href=\"#修改代理\" class=\"headerlink\" title=\"修改代理\"></a>修改代理</h2><p>找到文件<code>C:\\Users\\用户名\\AppData\\Roaming\\Parsec\\config.josn</code>，修改</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token string\">\"app_proxy\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"value\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>,\n<span class=\"token string\">\"app_proxy_address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"value\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"127.0.0.1\"</span>\n<span class=\"token punctuation\">}</span>,\n<span class=\"token string\">\"app_proxy_port\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"value\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">10808</span>\n<span class=\"token punctuation\">}</span>,<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参照你的代理端口修改</p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/12/11/pycharm-kuai-jie-jian/",
            "url": "https://0xdadream.github.io/2024/12/11/pycharm-kuai-jie-jian/",
            "title": "pycharm快捷键",
            "date_published": "2024-12-11T04:25:00.000Z",
            "content_html": "<h1 id=\"pycharm快捷键\"><a href=\"#pycharm快捷键\" class=\"headerlink\" title=\"pycharm快捷键\"></a>pycharm快捷键</h1><p>pycharm快捷键</p>\n<p>以下是 PyCharm 在 Windows 上高效开发常用的快捷键列表，按照功能分类：</p>\n<hr>\n<h3 id=\"文件与项目管理\"><a href=\"#文件与项目管理\" class=\"headerlink\" title=\"文件与项目管理\"></a><strong>文件与项目管理</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>打开文件/最近文件</td>\n<td><code>Ctrl + E</code></td>\n</tr>\n<tr>\n<td>查找文件</td>\n<td><code>Ctrl + Shift + N</code></td>\n</tr>\n<tr>\n<td>切换到项目视图</td>\n<td><code>Alt + 1</code></td>\n</tr>\n<tr>\n<td>显示/隐藏工具窗口</td>\n<td><code>Alt + #[1-9]</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"代码导航\"><a href=\"#代码导航\" class=\"headerlink\" title=\"代码导航\"></a><strong>代码导航</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>跳转到声明/定义</td>\n<td><code>Ctrl + B</code> 或 <code>Ctrl + 鼠标左键</code></td>\n</tr>\n<tr>\n<td>返回到上一个位置</td>\n<td><code>Ctrl + Alt + 左箭头</code></td>\n</tr>\n<tr>\n<td>前进到下一个位置</td>\n<td><code>Ctrl + Alt + 右箭头</code></td>\n</tr>\n<tr>\n<td>快速导航到符号（类、方法等）</td>\n<td><code>Ctrl + Shift + Alt + N</code></td>\n</tr>\n<tr>\n<td>显示方法列表</td>\n<td><code>Ctrl + F12</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"代码编辑\"><a href=\"#代码编辑\" class=\"headerlink\" title=\"代码编辑\"></a><strong>代码编辑</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>格式化代码</td>\n<td><code>Ctrl + Alt + L</code></td>\n</tr>\n<tr>\n<td>智能补全（代码补全）</td>\n<td><code>Ctrl + 空格</code></td>\n</tr>\n<tr>\n<td>自动导入</td>\n<td><code>Alt + Enter</code></td>\n</tr>\n<tr>\n<td>多光标选择</td>\n<td><code>Alt + 鼠标左键</code> 或 <code>Ctrl + Alt + Shift + J</code></td>\n</tr>\n<tr>\n<td>快速重构（重命名、提取变量等）</td>\n<td><code>Shift + F6</code></td>\n</tr>\n<tr>\n<td>注释/取消注释行代码</td>\n<td><code>Ctrl + /</code></td>\n</tr>\n<tr>\n<td>注释/取消注释块代码</td>\n<td><code>Ctrl + Shift + /</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"运行与调试\"><a href=\"#运行与调试\" class=\"headerlink\" title=\"运行与调试\"></a><strong>运行与调试</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>运行当前文件</td>\n<td><code>Shift + F10</code></td>\n</tr>\n<tr>\n<td>调试当前文件</td>\n<td><code>Shift + F9</code></td>\n</tr>\n<tr>\n<td>添加断点</td>\n<td><code>Ctrl + F8</code></td>\n</tr>\n<tr>\n<td>步入（Step Into）</td>\n<td><code>F7</code></td>\n</tr>\n<tr>\n<td>步过（Step Over）</td>\n<td><code>F8</code></td>\n</tr>\n<tr>\n<td>跳出（Step Out）</td>\n<td><code>Shift + F8</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"搜索与替换\"><a href=\"#搜索与替换\" class=\"headerlink\" title=\"搜索与替换\"></a><strong>搜索与替换</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>全局搜索</td>\n<td><code>Ctrl + Shift + F</code></td>\n</tr>\n<tr>\n<td>替换</td>\n<td><code>Ctrl + R</code></td>\n</tr>\n<tr>\n<td>在文件中搜索</td>\n<td><code>Ctrl + F</code></td>\n</tr>\n<tr>\n<td>查找下一个</td>\n<td><code>F3</code></td>\n</tr>\n<tr>\n<td>查找上一个</td>\n<td><code>Shift + F3</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a><strong>版本控制</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看版本历史（当前文件）</td>\n<td><code>Ctrl + Shift + A</code> 然后输入 <code>File History</code></td>\n</tr>\n<tr>\n<td>提交变更</td>\n<td><code>Ctrl + K</code></td>\n</tr>\n<tr>\n<td>更新项目</td>\n<td><code>Ctrl + T</code></td>\n</tr>\n<tr>\n<td>显示版本控制窗口</td>\n<td><code>Alt + 9</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"通用快捷键\"><a href=\"#通用快捷键\" class=\"headerlink\" title=\"通用快捷键\"></a><strong>通用快捷键</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>搜索动作（如功能、设置等）</td>\n<td><code>Ctrl + Shift + A</code></td>\n</tr>\n<tr>\n<td>打开设置</td>\n<td><code>Ctrl + Alt + S</code></td>\n</tr>\n<tr>\n<td>切换全屏模式</td>\n<td><code>Ctrl + Shift + F11</code></td>\n</tr>\n<tr>\n<td>显示代码提示信息</td>\n<td><code>Ctrl + Q</code></td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/12/06/python-ku-merklelib/",
            "url": "https://0xdadream.github.io/2024/12/06/python-ku-merklelib/",
            "title": "python库merklelib",
            "date_published": "2024-12-06T04:25:00.000Z",
            "content_html": "<h1 id=\"python库merklelib\"><a href=\"#python库merklelib\" class=\"headerlink\" title=\"python库merklelib\"></a>python库merklelib</h1><h2 id=\"报错AttributeError-module-‘collections’-has-no-attribute-‘Iterable’\"><a href=\"#报错AttributeError-module-‘collections’-has-no-attribute-‘Iterable’\" class=\"headerlink\" title=\"报错AttributeError: module ‘collections’ has no attribute ‘Iterable’\"></a>报错AttributeError: module ‘collections’ has no attribute ‘Iterable’</h2><p>该错误发生在 Python 3.10 或更高版本中，因为 <code>collections.Iterable</code> 在 Python 3.10 中已被移至 <code>collections.abc.Iterable</code>。这是 Python 的一个兼容性问题。</p>\n<p>要解决此问题，请将代码中的 <code>collections.Iterable</code> 替换为 <code>collections.abc.Iterable</code>：</p>\n<h3 id=\"修改代码\"><a href=\"#修改代码\" class=\"headerlink\" title=\"修改代码\"></a>修改代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> collections<span class=\"token punctuation\">.</span>abc\n\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> collections<span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span>Iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Your logic here</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你正在使用一个依赖于旧版 <code>collections.Iterable</code> 的库（如 <code>merklelib</code>），可以通过以下方式解决：</p>\n<h3 id=\"解决方法-1：升级相关库\"><a href=\"#解决方法-1：升级相关库\" class=\"headerlink\" title=\"解决方法 1：升级相关库\"></a>解决方法 1：升级相关库</h3><p>检查是否有更新的版本来支持 Python 3.10+。你可以尝试更新库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">--upgrade</span> merklelib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"解决方法-2：兼容性修复\"><a href=\"#解决方法-2：兼容性修复\" class=\"headerlink\" title=\"解决方法 2：兼容性修复\"></a>解决方法 2：兼容性修复</h3><p>如果库尚未更新，你可以手动修复代码：</p>\n<ol>\n<li>打开出错的代码文件（通常在库的安装目录中）。</li>\n<li>找到 <code>collections.Iterable</code> 并替换为 <code>collections.abc.Iterable</code>。</li>\n</ol>\n<p>或者，临时修复可以通过 Monkey Patch：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> collections<span class=\"token punctuation\">.</span>abc\ncollections<span class=\"token punctuation\">.</span>Iterable <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span>Iterable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"解决方法-3：降级-Python-版本\"><a href=\"#解决方法-3：降级-Python-版本\" class=\"headerlink\" title=\"解决方法 3：降级 Python 版本\"></a>解决方法 3：降级 Python 版本</h3><p>如果无法更新库或代码，可以暂时降级到 Python 3.9：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pyenv <span class=\"token function\">install</span> <span class=\"token number\">3.9</span>.12\npyenv global <span class=\"token number\">3.9</span>.12<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>推荐优先升级库或修复代码以适应 Python 的新版本</p>\n",
            "tags": [
                "bug",
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/12/01/wsl-he-windows-hu-xiang-fang-wen/",
            "url": "https://0xdadream.github.io/2024/12/01/wsl-he-windows-hu-xiang-fang-wen/",
            "title": "WSL 与 Windows 互相访问教程",
            "date_published": "2024-12-01T04:25:00.000Z",
            "content_html": "<h1 id=\"WSL-与-Windows-互相访问教程\"><a href=\"#WSL-与-Windows-互相访问教程\" class=\"headerlink\" title=\"WSL 与 Windows 互相访问教程\"></a><strong>WSL 与 Windows 互相访问教程</strong></h1><p>以下教程将介绍如何在 WSL 和 Windows 系统之间互相访问文件并实现无缝交互。</p>\n<hr>\n<h2 id=\"一、Windows-访问-WSL-文件\"><a href=\"#一、Windows-访问-WSL-文件\" class=\"headerlink\" title=\"一、Windows 访问 WSL 文件\"></a><strong>一、Windows 访问 WSL 文件</strong></h2><h3 id=\"方法-1：通过网络路径访问\"><a href=\"#方法-1：通过网络路径访问\" class=\"headerlink\" title=\"方法 1：通过网络路径访问\"></a><strong>方法 1：通过网络路径访问</strong></h3><p>WSL 文件系统挂载在 Windows 网络路径 <code>\\\\wsl$</code> 下，可以直接访问。</p>\n<ol>\n<li><p><strong>打开文件资源管理器或命令行：</strong> 在地址栏或命令行输入以下路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>wsl$<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>发行版名称<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>wsl$<span class=\"token punctuation\">\\</span>Ubuntu<span class=\"token punctuation\">\\</span>home<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>直接访问 WSL 文件：</strong></p>\n<ul>\n<li><p>文件资源管理器中可以像操作普通文件夹一样管理文件。</p>\n</li>\n<li><p>在命令行中可以使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>wsl$<span class=\"token punctuation\">\\</span>Ubuntu<span class=\"token punctuation\">\\</span>home<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>\n<span class=\"token function\">dir</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>优点：</strong></p>\n<ul>\n<li>直接访问，无需额外配置。</li>\n<li>文件路径自动挂载，无权限问题。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"方法-2：通过挂载路径访问\"><a href=\"#方法-2：通过挂载路径访问\" class=\"headerlink\" title=\"方法 2：通过挂载路径访问\"></a><strong>方法 2：通过挂载路径访问</strong></h3><p>WSL 的文件系统实际上存储在 Windows 用户目录下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Local<span class=\"token punctuation\">\\</span>Packages<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>WSL发行版ID<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">\\</span>LocalState<span class=\"token punctuation\">\\</span>rootfs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a><strong>操作步骤：</strong></h4><ol>\n<li><p><strong>定位路径：</strong> 打开资源管理器，导航到上述路径。</p>\n</li>\n<li><p><strong>通过命令行访问：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"C:\\Users\\&lt;用户名&gt;\\AppData\\Local\\Packages\\&lt;发行版ID&gt;\\LocalState<span class=\"token entity\" title=\"\\r\">\\r</span>ootfs\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<p><strong>注意：</strong></p>\n<ul>\n<li><strong>不要直接修改</strong> <code>LocalState</code> 下的文件，可能导致 WSL 文件系统损坏。</li>\n<li>尽量使用 <code>\\\\wsl$</code> 路径，安全可靠。</li>\n</ul>\n<hr>\n<h3 id=\"方法-3：通过-WSL-挂载目录\"><a href=\"#方法-3：通过-WSL-挂载目录\" class=\"headerlink\" title=\"方法 3：通过 WSL 挂载目录\"></a><strong>方法 3：通过 WSL 挂载目录</strong></h3><p>WSL 可以直接挂载 Windows 文件系统，访问路径为 <code>/mnt/&lt;盘符&gt;</code>。</p>\n<ol>\n<li><p>在 WSL 中访问：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>常见操作：</p>\n<ul>\n<li><p>列出文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>复制文件到 WSL：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents/文件.txt ~/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"二、WSL-访问-Windows-文件\"><a href=\"#二、WSL-访问-Windows-文件\" class=\"headerlink\" title=\"二、WSL 访问 Windows 文件\"></a><strong>二、WSL 访问 Windows 文件</strong></h2><h3 id=\"默认挂载的文件路径\"><a href=\"#默认挂载的文件路径\" class=\"headerlink\" title=\"默认挂载的文件路径\"></a><strong>默认挂载的文件路径</strong></h3><p>WSL 会自动挂载 Windows 的文件系统，所有分区挂载在 <code>/mnt/&lt;盘符&gt;</code> 下。例如：</p>\n<ul>\n<li><code>C:\\</code> 对应 <code>/mnt/c</code></li>\n<li><code>D:\\</code> 对应 <code>/mnt/d</code></li>\n</ul>\n<ol>\n<li><p><strong>列出 Windows 文件：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>复制文件到 WSL：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents/文件.txt ~/wsl目录/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>移动文件到 Windows：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> ~/wsl目录/文件.txt /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Desktop/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"三、实现-WSL-和-Windows-共享目录\"><a href=\"#三、实现-WSL-和-Windows-共享目录\" class=\"headerlink\" title=\"三、实现 WSL 和 Windows 共享目录\"></a><strong>三、实现 WSL 和 Windows 共享目录</strong></h2><h3 id=\"方法-1：在-WSL-中创建软链接\"><a href=\"#方法-1：在-WSL-中创建软链接\" class=\"headerlink\" title=\"方法 1：在 WSL 中创建软链接\"></a><strong>方法 1：在 WSL 中创建软链接</strong></h3><p>如果频繁需要访问某些 Windows 目录，可以通过软链接简化路径。</p>\n<ol>\n<li><p><strong>创建链接：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents ~/windows-documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>访问链接：</strong> 直接进入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/windows-documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"方法-2：共享-WSL-的目录给-Windows\"><a href=\"#方法-2：共享-WSL-的目录给-Windows\" class=\"headerlink\" title=\"方法 2：共享 WSL 的目录给 Windows\"></a><strong>方法 2：共享 WSL 的目录给 Windows</strong></h3><p>可以通过设置 WSL 中的目录，让 Windows 使用 <code>\\\\wsl$</code> 访问。</p>\n<ol>\n<li><p><strong>在 WSL 中创建目录：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/shared-folder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>在 Windows 中访问：</strong> 打开资源管理器，导航到：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>wsl$<span class=\"token punctuation\">\\</span>Ubuntu<span class=\"token punctuation\">\\</span>home<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">\\</span>shared-folder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"四、在-WSL-和-Windows-间传输文件\"><a href=\"#四、在-WSL-和-Windows-间传输文件\" class=\"headerlink\" title=\"四、在 WSL 和 Windows 间传输文件\"></a><strong>四、在 WSL 和 Windows 间传输文件</strong></h2><h3 id=\"方法-1：直接复制文件\"><a href=\"#方法-1：直接复制文件\" class=\"headerlink\" title=\"方法 1：直接复制文件\"></a><strong>方法 1：直接复制文件</strong></h3><p>可以使用 <code>cp</code> 或 <code>mv</code> 命令实现文件复制或移动。</p>\n<h4 id=\"从-WSL-复制文件到-Windows：\"><a href=\"#从-WSL-复制文件到-Windows：\" class=\"headerlink\" title=\"从 WSL 复制文件到 Windows：\"></a><strong>从 WSL 复制文件到 Windows：</strong></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> ~/文件.txt /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Desktop/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"从-Windows-复制文件到-WSL：\"><a href=\"#从-Windows-复制文件到-WSL：\" class=\"headerlink\" title=\"从 Windows 复制文件到 WSL：\"></a><strong>从 Windows 复制文件到 WSL：</strong></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Desktop/文件.txt ~/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"方法-2：使用-explorer-exe-打开-WSL-文件夹\"><a href=\"#方法-2：使用-explorer-exe-打开-WSL-文件夹\" class=\"headerlink\" title=\"方法 2：使用 explorer.exe 打开 WSL 文件夹\"></a><strong>方法 2：使用 <code>explorer.exe</code> 打开 WSL 文件夹</strong></h3><p>在 WSL 中可以直接使用 Windows 的资源管理器访问当前目录：</p>\n<ol>\n<li><p>在 WSL 终端中输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">explorer.exe <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>Windows 文件资源管理器会打开 WSL 当前路径。</p>\n</li>\n</ol>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/28/latex-jiao-cheng/",
            "url": "https://0xdadream.github.io/2024/11/28/latex-jiao-cheng/",
            "title": "latex教程",
            "date_published": "2024-11-28T13:25:00.000Z",
            "content_html": "<h1 id=\"latex教程\"><a href=\"#latex教程\" class=\"headerlink\" title=\"latex教程\"></a>latex教程</h1><p>latex教程</p>\n<p>参考网站：</p>\n<p><a href=\"https://zilutian.github.io/latex-tutorial-chinese/\">LaTeX 教程</a></p>\n<p><a href=\"https://www.latexstudio.net/LearnLaTeX/basic/01.html\">LaTeX 基础 | LaTeX 知识库</a></p>\n<p><a href=\"https://www.latexlive.com/\">在线LaTeX公式编辑器-编辑器</a></p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/28/mi-ma-xue-kun-nan-wen-ti/",
            "url": "https://0xdadream.github.io/2024/11/28/mi-ma-xue-kun-nan-wen-ti/",
            "title": "密码学中的困难问题详解",
            "date_published": "2024-11-28T04:25:00.000Z",
            "content_html": "<h1 id=\"密码学中的困难问题详解\"><a href=\"#密码学中的困难问题详解\" class=\"headerlink\" title=\"密码学中的困难问题详解\"></a>密码学中的困难问题详解</h1><p>密码学中的困难问题详解，密码学的安全性依赖于一些数学上已知的困难问题。这些问题被认为在经典计算机或量子计算机上都难以高效解决。以下是密码学中重要的困难问题分类及详解。</p>\n<hr>\n<h2 id=\"一、离散对数类问题\"><a href=\"#一、离散对数类问题\" class=\"headerlink\" title=\"一、离散对数类问题\"></a>一、离散对数类问题</h2><h3 id=\"1-离散对数问题-Discrete-Logarithm-Problem-DLP\"><a href=\"#1-离散对数问题-Discrete-Logarithm-Problem-DLP\" class=\"headerlink\" title=\"1. 离散对数问题 (Discrete Logarithm Problem, DLP)\"></a>1. 离散对数问题 (Discrete Logarithm Problem, DLP)</h3><p>描述为：<br>给定素数 $p$、生成元 $g$ 和 $h$，求 $x$，使得  $h = g^x \\ (\\text{mod } p)$</p>\n<p>该问题是 Diffie-Hellman 密钥交换和 ElGamal 加密算法的基础。</p>\n<h3 id=\"2-椭圆曲线离散对数问题-Elliptic-Curve-Discrete-Logarithm-Problem-ECDLP\"><a href=\"#2-椭圆曲线离散对数问题-Elliptic-Curve-Discrete-Logarithm-Problem-ECDLP\" class=\"headerlink\" title=\"2. 椭圆曲线离散对数问题 (Elliptic Curve Discrete Logarithm Problem, ECDLP)\"></a>2. 椭圆曲线离散对数问题 (Elliptic Curve Discrete Logarithm Problem, ECDLP)</h3><p>描述为：<br>在椭圆曲线群 $E(F_p)$ 上，给定点 $P$ 和 $Q$，求标量 $k$，使得  $Q = kP$</p>\n<p>ECDLP 是椭圆曲线密码（如 ECDH 和 ECDSA）的核心难题。</p>\n<hr>\n<h2 id=\"二、Diffie-Hellman-类问题\"><a href=\"#二、Diffie-Hellman-类问题\" class=\"headerlink\" title=\"二、Diffie-Hellman 类问题\"></a>二、Diffie-Hellman 类问题</h2><h3 id=\"1-计算性-Diffie-Hellman-问题-Computational-Diffie-Hellman-Problem-CDH\"><a href=\"#1-计算性-Diffie-Hellman-问题-Computational-Diffie-Hellman-Problem-CDH\" class=\"headerlink\" title=\"1. 计算性 Diffie-Hellman 问题 (Computational Diffie-Hellman Problem, CDH)\"></a>1. 计算性 Diffie-Hellman 问题 (Computational Diffie-Hellman Problem, CDH)</h3><p>描述为：<br>给定 $g^a$ 和 $g^b$ （模 $p$），计算 $g^{ab}$。<br>CDH 是构造许多密码协议的基础。</p>\n<h3 id=\"2-决定性-Diffie-Hellman-问题-Decisional-Diffie-Hellman-Problem-DDH\"><a href=\"#2-决定性-Diffie-Hellman-问题-Decisional-Diffie-Hellman-Problem-DDH\" class=\"headerlink\" title=\"2. 决定性 Diffie-Hellman 问题 (Decisional Diffie-Hellman Problem, DDH)\"></a>2. 决定性 Diffie-Hellman 问题 (Decisional Diffie-Hellman Problem, DDH)</h3><p>描述为：<br>给定 $g^a$、$g^b$ 和 $g^c$ （模 $p$），判断 $g^c$ 是否等于 $g^{ab}$。<br>DDH 通常用于构造安全多方计算和伪随机数生成器。</p>\n<h3 id=\"3-广义-Diffie-Hellman-问题-Generalized-Diffie-Hellman-Problem-GDH\"><a href=\"#3-广义-Diffie-Hellman-问题-Generalized-Diffie-Hellman-Problem-GDH\" class=\"headerlink\" title=\"3. 广义 Diffie-Hellman 问题 (Generalized Diffie-Hellman Problem, GDH)\"></a>3. 广义 Diffie-Hellman 问题 (Generalized Diffie-Hellman Problem, GDH)</h3><p>描述为：<br>在群 $G$ 中，给定 $g, g^{x_1}, g^{x_2}, \\dots, g^{x_k}$，计算 $g^{x_1x_2\\dots x_k}$。</p>\n<hr>\n<h2 id=\"三、双线性映射相关问题\"><a href=\"#三、双线性映射相关问题\" class=\"headerlink\" title=\"三、双线性映射相关问题\"></a>三、双线性映射相关问题</h2><h3 id=\"1-双线性-Diffie-Hellman-问题-Bilinear-Diffie-Hellman-Problem-BDH\"><a href=\"#1-双线性-Diffie-Hellman-问题-Bilinear-Diffie-Hellman-Problem-BDH\" class=\"headerlink\" title=\"1. 双线性 Diffie-Hellman 问题 (Bilinear Diffie-Hellman Problem, BDH)\"></a>1. 双线性 Diffie-Hellman 问题 (Bilinear Diffie-Hellman Problem, BDH)</h3><p>在双线性映射 $e: G_1 \\times G_1 \\to G_2$ 中，给定 $g, g^a, g^b, g^c \\in G_1$，计算  $e(g, g)^{abc}$</p>\n<p>这是基于双线性对的密码算法（如配对加密）的基础。</p>\n<h3 id=\"2-决定性双线性-Diffie-Hellman-问题-Decisional-Bilinear-Diffie-Hellman-Problem-DBDH\"><a href=\"#2-决定性双线性-Diffie-Hellman-问题-Decisional-Bilinear-Diffie-Hellman-Problem-DBDH\" class=\"headerlink\" title=\"2. 决定性双线性 Diffie-Hellman 问题 (Decisional Bilinear Diffie-Hellman Problem, DBDH)\"></a>2. 决定性双线性 Diffie-Hellman 问题 (Decisional Bilinear Diffie-Hellman Problem, DBDH)</h3><p>在双线性映射 $e: G_1 \\times G_1 \\to G_2$ 中，给定 $g, g^a, g^b, g^c \\in G_1$ 和 $T \\in G_2$，判断 $T = e(g, g)^{abc}$ 是否成立。</p>\n<h3 id=\"3-广义双线性-Diffie-Hellman-问题-Generalized-Bilinear-Diffie-Hellman-Problem-GBDH\"><a href=\"#3-广义双线性-Diffie-Hellman-问题-Generalized-Bilinear-Diffie-Hellman-Problem-GBDH\" class=\"headerlink\" title=\"3. 广义双线性 Diffie-Hellman 问题 (Generalized Bilinear Diffie-Hellman Problem, GBDH)\"></a>3. 广义双线性 Diffie-Hellman 问题 (Generalized Bilinear Diffie-Hellman Problem, GBDH)</h3><p>GBDH 是 BDH 的推广，允许更多参与者和复杂场景。</p>\n<hr>\n<h2 id=\"四、因子分解类问题\"><a href=\"#四、因子分解类问题\" class=\"headerlink\" title=\"四、因子分解类问题\"></a>四、因子分解类问题</h2><h3 id=\"1-整数分解问题-Integer-Factorization-Problem-IFP\"><a href=\"#1-整数分解问题-Integer-Factorization-Problem-IFP\" class=\"headerlink\" title=\"1. 整数分解问题 (Integer Factorization Problem, IFP)\"></a>1. 整数分解问题 (Integer Factorization Problem, IFP)</h3><p>描述为：<br>给定一个整数 $n = p \\cdot q$，其中 $p$ 和 $q$ 是大素数，求出 $p$ 和 $q$。<br>IFP 是 RSA 和许多公钥密码系统的核心难题。</p>\n<h3 id=\"2-积性同余子群问题\"><a href=\"#2-积性同余子群问题\" class=\"headerlink\" title=\"2. 积性同余子群问题\"></a>2. 积性同余子群问题</h3><p>描述为：<br>在模 $n$ 的群中，给定生成元 $g$ 和目标值 $h$，计算 $x$，使得  $h = g^x \\ (\\text{mod } n)$</p>\n<p>这也是基于整数因子分解的密码系统的难题。</p>\n<hr>\n<h2 id=\"五、格密码相关问题\"><a href=\"#五、格密码相关问题\" class=\"headerlink\" title=\"五、格密码相关问题\"></a>五、格密码相关问题</h2><h3 id=\"1-最短向量问题-Shortest-Vector-Problem-SVP\"><a href=\"#1-最短向量问题-Shortest-Vector-Problem-SVP\" class=\"headerlink\" title=\"1. 最短向量问题 (Shortest Vector Problem, SVP)\"></a>1. 最短向量问题 (Shortest Vector Problem, SVP)</h3><p>描述为：<br>在格 $L$ 中，找到长度最短的非零向量 $\\mathbf{v}$，使得 $\\mathbf{v} \\in L$。<br>SVP 是基于格密码（如 NTRU 和 LWE）的核心难题。</p>\n<h3 id=\"2-最近向量问题-Closest-Vector-Problem-CVP\"><a href=\"#2-最近向量问题-Closest-Vector-Problem-CVP\" class=\"headerlink\" title=\"2. 最近向量问题 (Closest Vector Problem, CVP)\"></a>2. 最近向量问题 (Closest Vector Problem, CVP)</h3><p>描述为：<br>在格 $L$ 中，给定任意点 $\\mathbf{t}$，找到格中距离 $\\mathbf{t}$ 最近的点。</p>\n<h3 id=\"3-学习带误差问题-Learning-with-Errors-LWE\"><a href=\"#3-学习带误差问题-Learning-with-Errors-LWE\" class=\"headerlink\" title=\"3. 学习带误差问题 (Learning with Errors, LWE)\"></a>3. 学习带误差问题 (Learning with Errors, LWE)</h3><p>描述为：<br>给定一组方程 $Ax + e = b$，其中 $A$ 是已知矩阵，$e$ 是小噪声，求未知的 $x$。<br>LWE 是后量子密码学的重要基础。</p>\n<hr>\n<h2 id=\"六、后量子密码相关问题\"><a href=\"#六、后量子密码相关问题\" class=\"headerlink\" title=\"六、后量子密码相关问题\"></a>六、后量子密码相关问题</h2><h3 id=\"1-代码破解问题-Code-based-Problem\"><a href=\"#1-代码破解问题-Code-based-Problem\" class=\"headerlink\" title=\"1. 代码破解问题 (Code-based Problem)\"></a>1. 代码破解问题 (Code-based Problem)</h3><p>描述为：<br>在随机线性码中，给定生成矩阵 $G$ 和加密后的数据，恢复原始消息。<br>这是基于纠错码密码系统（如 McEliece 和 Niederreiter）的核心难题。</p>\n<h3 id=\"2-同源性问题-Isogeny-Problem\"><a href=\"#2-同源性问题-Isogeny-Problem\" class=\"headerlink\" title=\"2. 同源性问题 (Isogeny Problem)\"></a>2. 同源性问题 (Isogeny Problem)</h3><p>描述为：<br>在椭圆曲线同源图中，找到从曲线 $E_1$ 到 $E_2$ 的同源映射。<br>这是基于同源密码的核心问题。</p>\n<hr>\n<h2 id=\"七、困难问题间的关系\"><a href=\"#七、困难问题间的关系\" class=\"headerlink\" title=\"七、困难问题间的关系\"></a>七、困难问题间的关系</h2><p>许多困难问题之间具有复杂的数学关系：</p>\n<ol>\n<li><strong>DLP</strong> 是 <strong>CDH</strong> 的基础，<strong>CDH</strong> 是 <strong>DDH</strong> 的前提条件。</li>\n<li><strong>ECDLP</strong> 是 DLP 的椭圆曲线版本，但安全性更高。</li>\n<li><strong>LWE</strong> 和 <strong>SVP</strong> 是格密码中相互关联的问题。</li>\n<li><strong>IFP</strong> 和 <strong>DLP</strong> 是经典密码的两个主要难题。</li>\n</ol>\n",
            "tags": [
                "密码学"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/27/an-zhuang-pypbc/",
            "url": "https://0xdadream.github.io/2024/11/27/an-zhuang-pypbc/",
            "title": "python安装pypbc",
            "date_published": "2024-11-27T04:25:00.000Z",
            "content_html": "<h1 id=\"python安装pypbc\"><a href=\"#python安装pypbc\" class=\"headerlink\" title=\"python安装pypbc\"></a>python安装pypbc</h1><p>python安装pypbc</p>\n<p>首先我是ubuntu22环境，python版本为3.10</p>\n<p>去<a href=\"https://github.com/debatem1/pypbc\">pypbc</a>把代码全部下载，进去目录<code>pypbc</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> pypbc\npip <span class=\"token function\">install</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>多版本使用对应的pip安装即可，执行完就晚装完成了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip list <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> pypbc  <span class=\"token comment\"># 验证安装</span>\npypbc               <span class=\"token number\">0.2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/27/typora-shu-xue-fu-hao/",
            "url": "https://0xdadream.github.io/2024/11/27/typora-shu-xue-fu-hao/",
            "title": "typora数学符号",
            "date_published": "2024-11-26T16:25:00.000Z",
            "content_html": "<h1 id=\"typora数学符号\"><a href=\"#typora数学符号\" class=\"headerlink\" title=\"typora数学符号\"></a>typora数学符号</h1><p>Typora 是一个支持 LaTeX 数学公式的优秀 Markdown 编辑器，可以直接编写数学公式并实时渲染。以下是如何在 Typora 中使用数学公式的详细指南：</p>\n<hr>\n<h2 id=\"1-启用数学公式支持\"><a href=\"#1-启用数学公式支持\" class=\"headerlink\" title=\"1. 启用数学公式支持\"></a>1. <strong>启用数学公式支持</strong></h2><p>默认情况下，Typora 支持 LaTeX 格式的数学公式，无需额外设置。如果未生效，请确保已启用数学渲染：</p>\n<ol>\n<li>打开 Typora。</li>\n<li>点击顶部菜单栏的 <strong>File &gt; Preferences（设置）</strong>。</li>\n<li>在设置中，选择 <strong>Markdown</strong> 选项卡。</li>\n<li>确保勾选了 <strong>Enable MathJax</strong> 或 <strong>Enable Katex</strong>，以支持数学公式渲染。</li>\n</ol>\n<hr>\n<h2 id=\"2-数学公式语法\"><a href=\"#2-数学公式语法\" class=\"headerlink\" title=\"2. 数学公式语法\"></a>2. <strong>数学公式语法</strong></h2><h3 id=\"2-1-行内公式\"><a href=\"#2-1-行内公式\" class=\"headerlink\" title=\"2.1 行内公式\"></a>2.1 行内公式</h3><p>在段落中插入公式，使用单个 <code>$</code> 包裹公式内容：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">行内公式示例：$E = mc^2$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>渲染效果： 行内公式示例：$E = mc^2$</p>\n<hr>\n<h3 id=\"2-2-独立公式\"><a href=\"#2-2-独立公式\" class=\"headerlink\" title=\"2.2 独立公式\"></a>2.2 独立公式</h3><p>单独显示的数学公式，使用双 <code>$</code> 或 <code>$$</code> 包裹公式内容：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">独立公式示例：\n$$\n\\int_a^b f(x)dx = F(b) - F(a)\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>\\int_a^b f(x)dx = F(b) - F(a)<br>$$</p>\n<hr>\n<h2 id=\"3-复杂数学公式\"><a href=\"#3-复杂数学公式\" class=\"headerlink\" title=\"3. 复杂数学公式\"></a>3. <strong>复杂数学公式</strong></h2><h3 id=\"示例-1：矩阵\"><a href=\"#示例-1：矩阵\" class=\"headerlink\" title=\"示例 1：矩阵\"></a>示例 1：矩阵</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">矩阵：\n$$\n\\mathbf{A} = \\begin{bmatrix}\n1 &amp; 2 &amp; 3 \\\\\n4 &amp; 5 &amp; 6 \\\\\n7 &amp; 8 &amp; 9\n\\end{bmatrix}\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>\\mathbf{A} = \\begin{bmatrix}<br>1 &amp; 2 &amp; 3 \\<br>4 &amp; 5 &amp; 6 \\<br>7 &amp; 8 &amp; 9<br>\\end{bmatrix}<br>$$</p>\n<hr>\n<h3 id=\"示例-2：分数和开方\"><a href=\"#示例-2：分数和开方\" class=\"headerlink\" title=\"示例 2：分数和开方\"></a>示例 2：分数和开方</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">分数与开方：\n$$\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}<br>$$</p>\n<hr>\n<h3 id=\"示例-3：求和与极限\"><a href=\"#示例-3：求和与极限\" class=\"headerlink\" title=\"示例 3：求和与极限\"></a>示例 3：求和与极限</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">求和与极限：\n$$\n\\sum_{i=1}^n i = \\frac{n(n+1)}{2}, \\quad \\lim_{x \\to \\infty} \\frac{1}{x} = 0\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>\\sum_{i=1}^n i = \\frac{n(n+1)}{2}, \\quad \\lim_{x \\to \\infty} \\frac{1}{x} = 0<br>$$</p>\n<hr>\n<h3 id=\"示例-4：多行公式对齐\"><a href=\"#示例-4：多行公式对齐\" class=\"headerlink\" title=\"示例 4：多行公式对齐\"></a>示例 4：多行公式对齐</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">多行公式对齐：\n$$\n\\begin{aligned}\ny &amp;= mx + b \\\\\nf(x) &amp;= x^2 + 2x + 1\n\\end{aligned}\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>\\begin{aligned}<br>y &amp;= mx + b \\<br>f(x) &amp;= x^2 + 2x + 1<br>\\end{aligned}<br>$$</p>\n<hr>\n<h2 id=\"4-快捷键\"><a href=\"#4-快捷键\" class=\"headerlink\" title=\"4. 快捷键\"></a>4. <strong>快捷键</strong></h2><ul>\n<li>使用 <strong><code>Ctrl + T</code></strong> 或 <strong><code>Command + T</code></strong> 可以快速切换公式预览。</li>\n<li>如果希望查看公式源代码，按下 <strong><code>Ctrl + /</code></strong> 或 **<code>Command + /</code>**。</li>\n</ul>\n<hr>\n<p>在 Typora 中，如果需要数学公式与文字紧密排列在一起，可以使用 <strong>行内公式</strong> 格式。具体方法如下：</p>\n<p>偏好设置-&gt;markdown-&gt;勾选内联公式</p>\n<hr>\n<h2 id=\"1-使用-实现行内公式\"><a href=\"#1-使用-实现行内公式\" class=\"headerlink\" title=\"1. 使用 $...$ 实现行内公式\"></a><strong>1. 使用 <code>$...$</code> 实现行内公式</strong></h2><p>行内公式会随着文字的排版而排列，可以直接插入到文字之间。例如：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">爱因斯坦的质能方程为 $E=mc^2$，这是能量和质量关系的基础公式。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：\"><a href=\"#渲染效果：\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>爱因斯坦的质能方程为 $E=mc^2$，这是能量和质量关系的基础公式。</p>\n<hr>\n<h2 id=\"2-注意空格与对齐问题\"><a href=\"#2-注意空格与对齐问题\" class=\"headerlink\" title=\"2. 注意空格与对齐问题\"></a><strong>2. 注意空格与对齐问题</strong></h2><h3 id=\"示例-1：在公式与文字之间增加适当的空格\"><a href=\"#示例-1：在公式与文字之间增加适当的空格\" class=\"headerlink\" title=\"示例 1：在公式与文字之间增加适当的空格\"></a>示例 1：在公式与文字之间增加适当的空格</h3><p>当公式两侧紧挨中文字符时，可能需要手动添加空格，以确保渲染结果美观：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">质量 $m$ 和能量 $E$ 之间的关系为 $E = mc^2$。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：-1\"><a href=\"#渲染效果：-1\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>质量 $m$ 和能量 $E$ 之间的关系为 $E = mc^2$。</p>\n<hr>\n<h3 id=\"示例-2：纯英文情况下，公式无需额外空格\"><a href=\"#示例-2：纯英文情况下，公式无需额外空格\" class=\"headerlink\" title=\"示例 2：纯英文情况下，公式无需额外空格\"></a>示例 2：纯英文情况下，公式无需额外空格</h3><p>在纯英文环境中，公式通常与文字自然对齐，无需调整：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">The equation $E=mc^2$ explains the relationship between energy and mass.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：-2\"><a href=\"#渲染效果：-2\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>The equation $E=mc^2$ explains the relationship between energy and mass.</p>\n<hr>\n<h2 id=\"3-混合行内和块级公式\"><a href=\"#3-混合行内和块级公式\" class=\"headerlink\" title=\"3. 混合行内和块级公式\"></a><strong>3. 混合行内和块级公式</strong></h2><p>如果需要同时包含行内和块级公式，可以灵活使用：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">爱因斯坦提出了著名的公式 $E = mc^2$，用于描述能量和质量的关系。\n\n更详细的表达形式为：\n$$\nE = \\int_a^b f(x) dx\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：-3\"><a href=\"#渲染效果：-3\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>爱因斯坦提出了著名的公式 $E = mc^2$，用于描述能量和质量的关系。</p>\n<p>更详细的表达形式为：<br>$$<br>E = \\int_a^b f(x) dx<br>$$</p>\n<hr>\n<h2 id=\"4-Typora-自动调整换行\"><a href=\"#4-Typora-自动调整换行\" class=\"headerlink\" title=\"4. Typora 自动调整换行\"></a><strong>4. Typora 自动调整换行</strong></h2><p>如果文字较多且公式插入后自动换行，可以通过调整文字排版来控制公式位置。例如：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">为了进一步验证公式 $E=mc^2$ 的正确性，我们需要对其进行理论推导，涉及到积分与导数等高等数学内容。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：-4\"><a href=\"#渲染效果：-4\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>为了进一步验证公式 $E=mc^2$ 的正确性，我们需要对其进行理论推导，涉及到积分与导数等高等数学内容。</p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/25/xi-la-zi-mu/",
            "url": "https://0xdadream.github.io/2024/11/25/xi-la-zi-mu/",
            "title": "希腊字母",
            "date_published": "2024-11-25T11:25:00.000Z",
            "content_html": "<h1 id=\"希腊字母\"><a href=\"#希腊字母\" class=\"headerlink\" title=\"希腊字母\"></a>希腊字母</h1><p>以下是数学和科学中常用的 <strong>希腊字母</strong> 及其用途的对照表，包括大写和小写形式：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th><strong>字母</strong></th>\n<th><strong>名称</strong></th>\n<th><strong>发音（英文）</strong></th>\n<th><strong>数学与科学用途</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Αα</td>\n<td>Alpha</td>\n<td>ˈælfə</td>\n<td>表示角度、系数、角速度等</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Ββ</td>\n<td>Beta</td>\n<td>ˈbeɪtə 或 ˈbiːtə</td>\n<td>表示系数、β辐射、概率密度函数中的参数等</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Γγ</td>\n<td>Gamma</td>\n<td>ˈɡæmə</td>\n<td>表示伽马函数、光谱系数、第三角速度等</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Δδ</td>\n<td>Delta</td>\n<td>ˈdɛltə</td>\n<td>表示变化量、偏导数（小写 δ）、有限差分等</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Εε</td>\n<td>Epsilon</td>\n<td>ˈɛpsɪlɒn</td>\n<td>表示小量、误差、介电常数等</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Ζζ</td>\n<td>Zeta</td>\n<td>ˈzeɪtə</td>\n<td>表示黎曼ζ函数、阻尼系数等</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Ηη</td>\n<td>Eta</td>\n<td>ˈiːtə 或 ˈeɪtə</td>\n<td>表示效率、黏滞系数等</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Θθ</td>\n<td>Theta</td>\n<td>ˈθeɪtə</td>\n<td>表示角度、温度、周期等</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Ιι</td>\n<td>Iota</td>\n<td>aɪˈoʊtə</td>\n<td>很少用于数学，通常表示极小值</td>\n</tr>\n<tr>\n<td>10</td>\n<td>Κκ</td>\n<td>Kappa</td>\n<td>ˈkæpə</td>\n<td>表示曲率、波数、热导率等</td>\n</tr>\n<tr>\n<td>11</td>\n<td>Λλ</td>\n<td>Lambda</td>\n<td>ˈlæmdə</td>\n<td>表示波长、特征值、线性密度等</td>\n</tr>\n<tr>\n<td>12</td>\n<td>Μμ</td>\n<td>Mu</td>\n<td>mjuː</td>\n<td>表示摩擦系数、磁导率、平均值等</td>\n</tr>\n<tr>\n<td>13</td>\n<td>Νν</td>\n<td>Nu</td>\n<td>njuː</td>\n<td>表示频率、泊松比等</td>\n</tr>\n<tr>\n<td>14</td>\n<td>Ξξ</td>\n<td>Xi</td>\n<td>zaɪ 或 ksiː</td>\n<td>表示随机变量、配分函数等</td>\n</tr>\n<tr>\n<td>15</td>\n<td>Οο</td>\n<td>Omicron</td>\n<td>ˈɒmɪkrɒn</td>\n<td>很少用于数学与科学</td>\n</tr>\n<tr>\n<td>16</td>\n<td>Ππ</td>\n<td>Pi</td>\n<td>paɪ</td>\n<td>表示圆周率（π\\piπ）、乘积符号（∏\\prod∏）等</td>\n</tr>\n<tr>\n<td>17</td>\n<td>Ρρ</td>\n<td>Rho</td>\n<td>roʊ</td>\n<td>表示密度、电阻率等</td>\n</tr>\n<tr>\n<td>18</td>\n<td>Σσ/ς</td>\n<td>Sigma</td>\n<td>ˈsɪɡmə</td>\n<td>表示求和符号（∑\\sum∑）、标准差等</td>\n</tr>\n<tr>\n<td>19</td>\n<td>Ττ</td>\n<td>Tau</td>\n<td>taʊ</td>\n<td>表示时间常数、剪切应力等</td>\n</tr>\n<tr>\n<td>20</td>\n<td>Υυ</td>\n<td>Upsilon</td>\n<td>ˈʌpsɪlɒn 或 ˈjuːpsɪlɒn</td>\n<td>很少用于数学，偶用于表示介质传播系数</td>\n</tr>\n<tr>\n<td>21</td>\n<td>Φφ</td>\n<td>Phi</td>\n<td>faɪ 或 fiː</td>\n<td>表示黄金比例、角度、磁通量等</td>\n</tr>\n<tr>\n<td>22</td>\n<td>Χχ</td>\n<td>Chi</td>\n<td>kaɪ</td>\n<td>表示卡方分布、特征函数等</td>\n</tr>\n<tr>\n<td>23</td>\n<td>Ψψ</td>\n<td>Psi</td>\n<td>saɪ</td>\n<td>表示波函数、状态函数等</td>\n</tr>\n<tr>\n<td>24</td>\n<td>Ωω</td>\n<td>Omega</td>\n<td>ˈoʊmɪɡə 或 oʊˈmeɪɡə</td>\n<td>表示欧姆（电阻单位）、角速度、复数平面中的极限等</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/25/modulenotfounderror-no-module-named-crypto.cipher/",
            "url": "https://0xdadream.github.io/2024/11/25/modulenotfounderror-no-module-named-crypto.cipher/",
            "title": "Python报错ModuleNotFoundError:No-module-named-Crypto.Cipher",
            "date_published": "2024-11-25T01:25:00.000Z",
            "content_html": "<h1 id=\"Python报错ModuleNotFoundError-No-module-named-‘Crypto-Cipher’\"><a href=\"#Python报错ModuleNotFoundError-No-module-named-‘Crypto-Cipher’\" class=\"headerlink\" title=\"Python报错ModuleNotFoundError: No module named ‘Crypto.Cipher’\"></a>Python报错ModuleNotFoundError: No module named ‘Crypto.Cipher’</h1><p>这个报错通常是因为 Python 中的 <code>Crypto.Cipher</code> 模块不可用，可能是没有正确安装相关库或者使用了错误的模块路径。</p>\n<p>在 Python 中，如果要使用加密相关功能，可以安装并使用 <strong>PyCryptodome</strong>，这是一个常用的加密库。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><h4 id=\"1-安装-pycryptodome\"><a href=\"#1-安装-pycryptodome\" class=\"headerlink\" title=\"1. 安装 pycryptodome\"></a>1. 安装 <code>pycryptodome</code></h4><p>运行以下命令来安装正确的库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> pycryptodome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-检查安装版本是否正确\"><a href=\"#2-检查安装版本是否正确\" class=\"headerlink\" title=\"2. 检查安装版本是否正确\"></a>2. 检查安装版本是否正确</h4><p>确保安装成功，并查看库版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip show pycryptodome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出应类似于：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Name: pycryptodome\nVersion: <span class=\"token number\">3</span>.x.x\nLocation: /path/to/python/site-packages<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-如果问题仍存在\"><a href=\"#3-如果问题仍存在\" class=\"headerlink\" title=\"3. 如果问题仍存在\"></a>3. 如果问题仍存在</h4><ul>\n<li><p>环境问题：确认是否安装在正确的 Python 环境中。你可以通过以下命令检查：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">which</span> python\n<span class=\"token function\">which</span> pip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>模块冲突：如果已经安装了一个名为 crypto的库（旧版本或其他库），可能会导致冲突。尝试卸载：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip uninstall crypto<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h4><p>以下是一个使用 <code>PyCryptodome</code> 的简单示例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Random <span class=\"token keyword\">import</span> get_random_bytes\n\n<span class=\"token comment\"># 生成随机密钥</span>\nkey <span class=\"token operator\">=</span> get_random_bytes<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\ncipher <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> AES<span class=\"token punctuation\">.</span>MODE_EAX<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 加密数据</span>\nplaintext <span class=\"token operator\">=</span> <span class=\"token string\">b'This is a secret message.'</span>\nnonce <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>nonce\nciphertext<span class=\"token punctuation\">,</span> tag <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span>encrypt_and_digest<span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ciphertext:\"</span><span class=\"token punctuation\">,</span> ciphertext<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "bug"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/24/dong-tai-lian-jie-ku/",
            "url": "https://0xdadream.github.io/2024/11/24/dong-tai-lian-jie-ku/",
            "title": "动态链接库",
            "date_published": "2024-11-24T15:25:00.000Z",
            "content_html": "<h1 id=\"动态链接库\"><a href=\"#动态链接库\" class=\"headerlink\" title=\"动态链接库\"></a>动态链接库</h1><hr>\n<h3 id=\"一、-etc-ld-so-conf-d-的作用\"><a href=\"#一、-etc-ld-so-conf-d-的作用\" class=\"headerlink\" title=\"一、/etc/ld.so.conf.d 的作用\"></a><strong>一、<code>/etc/ld.so.conf.d</code> 的作用</strong></h3><ul>\n<li><strong>动态库路径管理</strong>：系统会读取该目录下的 <code>.conf</code> 文件，这些文件指定了动态链接库的额外搜索路径。</li>\n<li><strong>配置动态库缓存</strong>：在运行程序时，动态链接器会从这些路径中查找所需的库。</li>\n</ul>\n<p><strong>默认加载的路径</strong>（视系统配置而定）：</p>\n<ol>\n<li><code>/lib</code></li>\n<li><code>/usr/lib</code></li>\n<li><code>/usr/local/lib</code></li>\n</ol>\n<p>通过 <code>/etc/ld.so.conf.d</code>，可以扩展默认路径。</p>\n<hr>\n<h3 id=\"二、动态库的加载顺序\"><a href=\"#二、动态库的加载顺序\" class=\"headerlink\" title=\"二、动态库的加载顺序\"></a><strong>二、动态库的加载顺序</strong></h3><p>动态链接器按照以下顺序查找动态库：</p>\n<ol>\n<li><strong>环境变量</strong>：<code>LD_LIBRARY_PATH</code>。</li>\n<li><strong>缓存文件</strong>：<code>/etc/ld.so.cache</code>。</li>\n<li><strong>默认路径</strong>：如 <code>/lib</code> 和 <code>/usr/lib</code>。</li>\n</ol>\n<p><strong>注意</strong>：为了提高效率，系统不会直接读取所有路径，而是从 <code>/etc/ld.so.cache</code> 中加载已经缓存的路径信息。</p>\n<hr>\n<h3 id=\"三、-etc-ld-so-conf-d-的文件结构\"><a href=\"#三、-etc-ld-so-conf-d-的文件结构\" class=\"headerlink\" title=\"三、/etc/ld.so.conf.d 的文件结构\"></a><strong>三、<code>/etc/ld.so.conf.d</code> 的文件结构</strong></h3><p>该目录包含多个 <code>.conf</code> 文件，每个文件可以指定一组路径。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 /etc/ld.so.conf.d 内容</span>\n<span class=\"token function\">ls</span> /etc/ld.so.conf.d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">glibc<span class=\"token punctuation\">.</span>conf\nx86_64<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>gnu<span class=\"token punctuation\">.</span>conf\n<span class=\"token keyword\">local</span><span class=\"token punctuation\">.</span>conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>文件示例</strong>：</p>\n<ul>\n<li><p>/etc/ld.so.conf.d/local.conf：</p>\n<pre class=\"line-numbers language-vbnet\" data-language=\"vbnet\"><code class=\"language-vbnet\"><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">lib</span>\n<span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>custom<span class=\"token operator\">/</span><span class=\"token keyword\">lib</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<p>这些路径会被动态链接器添加到库搜索路径中。</p>\n<hr>\n<h3 id=\"四、如何配置动态库路径\"><a href=\"#四、如何配置动态库路径\" class=\"headerlink\" title=\"四、如何配置动态库路径\"></a><strong>四、如何配置动态库路径</strong></h3><h4 id=\"1-添加自定义路径\"><a href=\"#1-添加自定义路径\" class=\"headerlink\" title=\"1. 添加自定义路径\"></a><strong>1. 添加自定义路径</strong></h4><p>假设有一个自定义动态库路径 <code>/home/user/mylibs</code>，以下是配置步骤：</p>\n<ol>\n<li><p><strong>创建配置文件</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/ld.so.conf.d/mylibs.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加如下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/home/user/mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>更新动态库缓存</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>验证是否生效</strong>： 查看是否包含新路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldconfig <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"2-临时配置路径\"><a href=\"#2-临时配置路径\" class=\"headerlink\" title=\"2. 临时配置路径\"></a><strong>2. 临时配置路径</strong></h4><p>如果只是临时测试动态库路径，可以使用 <code>LD_LIBRARY_PATH</code> 环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span>/home/user/mylibs:<span class=\"token variable\">$LD_LIBRARY_PATH</span>\n./myprogram<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：这种方法仅对当前终端会话有效。</p>\n<hr>\n<h3 id=\"五、ldconfig-的作用\"><a href=\"#五、ldconfig-的作用\" class=\"headerlink\" title=\"五、ldconfig 的作用\"></a><strong>五、<code>ldconfig</code> 的作用</strong></h3><p><code>ldconfig</code> 是管理动态库缓存的工具，其作用包括：</p>\n<ol>\n<li><strong>扫描路径</strong>：根据 <code>/etc/ld.so.conf</code> 和 <code>/etc/ld.so.conf.d/</code> 下的配置文件，扫描动态库路径。</li>\n<li><strong>更新缓存</strong>：生成 <code>/etc/ld.so.cache</code> 文件，加速库的加载。</li>\n</ol>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a><strong>常用命令</strong></h4><ol>\n<li><p>更新缓存：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>指定路径更新缓存：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig /home/user/mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看当前缓存的库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldconfig <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"六、动态库配置实例\"><a href=\"#六、动态库配置实例\" class=\"headerlink\" title=\"六、动态库配置实例\"></a><strong>六、动态库配置实例</strong></h3><h4 id=\"1-动态库开发\"><a href=\"#1-动态库开发\" class=\"headerlink\" title=\"1. 动态库开发\"></a><strong>1. 动态库开发</strong></h4><p>创建一个简单动态库：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// hello.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, from dynamic library!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译成动态库：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gcc -fPIC -shared -o libhello.so hello.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将动态库移动到 <code>/opt/mylibs</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/mylibs\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> libhello.so /opt/mylibs/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-配置加载路径\"><a href=\"#2-配置加载路径\" class=\"headerlink\" title=\"2. 配置加载路径\"></a><strong>2. 配置加载路径</strong></h4><p>创建 <code>/etc/ld.so.conf.d/mylibs.conf</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/ld.so.conf.d/mylibs.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>更新缓存：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-使用动态库\"><a href=\"#3-使用动态库\" class=\"headerlink\" title=\"3. 使用动态库\"></a><strong>3. 使用动态库</strong></h4><p>编写一个测试程序：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// main.c</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译并运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gcc <span class=\"token parameter variable\">-o</span> main main.c <span class=\"token parameter variable\">-lhello</span>\n./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Hello, from dynamic library<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"七、排错方法\"><a href=\"#七、排错方法\" class=\"headerlink\" title=\"七、排错方法\"></a><strong>七、排错方法</strong></h3><ol>\n<li><p><strong>检查动态库是否存在</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldconfig <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> libhello<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>验证动态库路径是否正确</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldd ./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>动态库无法加载时</strong>：</p>\n<ul>\n<li>检查是否添加了正确的路径到 <code>/etc/ld.so.conf.d</code>。</li>\n<li>检查是否运行了 <code>ldconfig</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/24/linux-wen-jian-cao-zuo-ming-ling/",
            "url": "https://0xdadream.github.io/2024/11/24/linux-wen-jian-cao-zuo-ming-ling/",
            "title": "linux文件操作命令",
            "date_published": "2024-11-24T01:25:00.000Z",
            "content_html": "<h1 id=\"linux文件操作命令\"><a href=\"#linux文件操作命令\" class=\"headerlink\" title=\"linux文件操作命令\"></a>linux文件操作命令</h1><p>以下是 Linux 系统中与文件操作相关的命令，附带常用参数的详细解释。</p>\n<hr>\n<h2 id=\"1-查看文件和目录\"><a href=\"#1-查看文件和目录\" class=\"headerlink\" title=\"1. 查看文件和目录\"></a><strong>1. 查看文件和目录</strong></h2><h3 id=\"列出目录内容-ls\"><a href=\"#列出目录内容-ls\" class=\"headerlink\" title=\"列出目录内容 (ls)\"></a><strong>列出目录内容 (<code>ls</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>路径<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-l</code>：以详细列表形式显示，包括权限、所有者、文件大小、修改时间等。</li>\n<li><code>-a</code>：显示所有文件，包括以 <code>.</code> 开头的隐藏文件。</li>\n<li><code>-h</code>：配合 <code>-l</code>，以人类可读的文件大小显示（如 <code>1K</code>, <code>1M</code>）。</li>\n<li><code>-r</code>：逆序排列。</li>\n<li><code>-t</code>：按时间排序。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lah</span> /home/user<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"查看当前路径-pwd\"><a href=\"#查看当前路径-pwd\" class=\"headerlink\" title=\"查看当前路径 (pwd)\"></a><strong>查看当前路径 (<code>pwd</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">pwd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>输出当前工作目录的完整路径。</li>\n</ul>\n<hr>\n<h2 id=\"2-创建文件和目录\"><a href=\"#2-创建文件和目录\" class=\"headerlink\" title=\"2. 创建文件和目录\"></a><strong>2. 创建文件和目录</strong></h2><h3 id=\"创建文件-touch\"><a href=\"#创建文件-touch\" class=\"headerlink\" title=\"创建文件 (touch)\"></a><strong>创建文件 (<code>touch</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>功能：创建一个空文件或更新已有文件的时间戳。</li>\n</ul>\n<h3 id=\"创建目录-mkdir\"><a href=\"#创建目录-mkdir\" class=\"headerlink\" title=\"创建目录 (mkdir)\"></a><strong>创建目录 (<code>mkdir</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 目录名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-p</code>：递归创建目录。如果父目录不存在，会自动创建。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /home/user/project/logs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"3-查看文件内容\"><a href=\"#3-查看文件内容\" class=\"headerlink\" title=\"3. 查看文件内容\"></a><strong>3. 查看文件内容</strong></h2><h3 id=\"显示文件内容-cat\"><a href=\"#显示文件内容-cat\" class=\"headerlink\" title=\"显示文件内容 (cat)\"></a><strong>显示文件内容 (<code>cat</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-n</code>：显示行号。</li>\n<li><code>-A</code>：显示所有字符，包括不可见字符。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-n</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"分页查看-less-和-more\"><a href=\"#分页查看-less-和-more\" class=\"headerlink\" title=\"分页查看 (less 和 more)\"></a><strong>分页查看 (<code>less</code> 和 <code>more</code>)</strong></h3><ul>\n<li><p>less：分页查看，支持向前滚动。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">less</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>more：逐页查看，按空格翻页。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">more</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"4-编辑文件\"><a href=\"#4-编辑文件\" class=\"headerlink\" title=\"4. 编辑文件\"></a><strong>4. 编辑文件</strong></h2><h3 id=\"简单编辑器-nano\"><a href=\"#简单编辑器-nano\" class=\"headerlink\" title=\"简单编辑器 (nano)\"></a><strong>简单编辑器 (<code>nano</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用快捷键（如 <code>Ctrl+O</code> 保存，<code>Ctrl+X</code> 退出）。</li>\n</ul>\n<h3 id=\"高级编辑器-vim\"><a href=\"#高级编辑器-vim\" class=\"headerlink\" title=\"高级编辑器 (vim)\"></a><strong>高级编辑器 (<code>vim</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>基本模式：<ul>\n<li>按 <code>i</code> 进入插入模式。</li>\n<li>编辑完成后按 <code>Esc</code>，输入 <code>:wq</code> 保存并退出。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-复制、移动和重命名文件\"><a href=\"#5-复制、移动和重命名文件\" class=\"headerlink\" title=\"5. 复制、移动和重命名文件\"></a><strong>5. 复制、移动和重命名文件</strong></h2><h3 id=\"复制文件和目录-cp\"><a href=\"#复制文件和目录-cp\" class=\"headerlink\" title=\"复制文件和目录 (cp)\"></a><strong>复制文件和目录 (<code>cp</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 源文件 目标文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-r</code>：递归复制目录。</li>\n<li><code>-p</code>：保留文件属性（权限、时间戳等）。</li>\n<li><code>-i</code>：覆盖前提示确认。</li>\n<li><code>-v</code>：显示详细过程。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-rp</span> source_dir/ target_dir/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"移动和重命名-mv\"><a href=\"#移动和重命名-mv\" class=\"headerlink\" title=\"移动和重命名 (mv)\"></a><strong>移动和重命名 (<code>mv</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 源文件 目标文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-i</code>：覆盖前提示确认。</li>\n<li><code>-v</code>：显示详细过程。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> file1.txt file2.txt  <span class=\"token comment\"># 重命名</span>\n<span class=\"token function\">mv</span> file.txt /path/to/dir/  <span class=\"token comment\"># 移动文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"6-删除文件和目录\"><a href=\"#6-删除文件和目录\" class=\"headerlink\" title=\"6. 删除文件和目录\"></a><strong>6. 删除文件和目录</strong></h2><h3 id=\"删除文件和目录-rm\"><a href=\"#删除文件和目录-rm\" class=\"headerlink\" title=\"删除文件和目录 (rm)\"></a><strong>删除文件和目录 (<code>rm</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件/目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-r</code>：递归删除目录及其内容。</li>\n<li><code>-f</code>：强制删除，无需确认。</li>\n<li><code>-i</code>：删除前提示确认。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /tmp/test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"7-搜索文件和内容\"><a href=\"#7-搜索文件和内容\" class=\"headerlink\" title=\"7. 搜索文件和内容\"></a><strong>7. 搜索文件和内容</strong></h2><h3 id=\"查找文件-find\"><a href=\"#查找文件-find\" class=\"headerlink\" title=\"查找文件 (find)\"></a><strong>查找文件 (<code>find</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token punctuation\">[</span>路径<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>条件<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>操作<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用条件：</p>\n<ul>\n<li><code>-name</code>：按文件名查找（支持通配符）。</li>\n<li><code>-type</code>：按类型查找，如 <code>f</code>（文件），<code>d</code>（目录）。</li>\n<li><code>-size</code>：按文件大小查找，如 <code>+1M</code>（大于1MB）。</li>\n<li><code>-mtime</code>：按修改时间查找，如 <code>-7</code>（7天内修改的文件）。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> /home <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"搜索文件内容-grep\"><a href=\"#搜索文件内容-grep\" class=\"headerlink\" title=\"搜索文件内容 (grep)\"></a><strong>搜索文件内容 (<code>grep</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token string\">\"关键字\"</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-i</code>：忽略大小写。</li>\n<li><code>-r</code>：递归搜索目录。</li>\n<li><code>-n</code>：显示行号。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-rn</span> <span class=\"token string\">\"error\"</span> /var/log/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"8-修改文件权限\"><a href=\"#8-修改文件权限\" class=\"headerlink\" title=\"8. 修改文件权限\"></a><strong>8. 修改文件权限</strong></h2><h3 id=\"修改权限-chmod\"><a href=\"#修改权限-chmod\" class=\"headerlink\" title=\"修改权限 (chmod)\"></a><strong>修改权限 (<code>chmod</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>模式<span class=\"token punctuation\">]</span> 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>权限格式：</p>\n<ul>\n<li><code>u</code>：用户，<code>g</code>：组，<code>o</code>：其他，<code>a</code>：全部。</li>\n<li><code>+</code>：添加权限，<code>-</code>：删除权限，<code>=</code>：设置权限。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> u+x script.sh    <span class=\"token comment\"># 给用户添加执行权限</span>\n<span class=\"token function\">chmod</span> <span class=\"token number\">755</span> file.txt     <span class=\"token comment\"># 设置读写执行权限</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"修改所有者-chown\"><a href=\"#修改所有者-chown\" class=\"headerlink\" title=\"修改所有者 (chown)\"></a><strong>修改所有者 (<code>chown</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 用户:组 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> user:group file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"9-压缩和解压文件\"><a href=\"#9-压缩和解压文件\" class=\"headerlink\" title=\"9. 压缩和解压文件\"></a><strong>9. 压缩和解压文件</strong></h2><h3 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a><strong>压缩文件</strong></h3><ul>\n<li><p>tar：创建归档文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czvf</span> archive.tar.gz 文件/目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>zip：压缩为 ZIP 格式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">zip</span> <span class=\"token parameter variable\">-r</span> archive.zip 文件/目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a><strong>解压文件</strong></h3><ul>\n<li><p>tar：解压 .tar.gz文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> archive.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>unzip：解压 ZIP 文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">unzip</span> archive.zip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"10-其他常用操作\"><a href=\"#10-其他常用操作\" class=\"headerlink\" title=\"10. 其他常用操作\"></a><strong>10. 其他常用操作</strong></h2><h3 id=\"统计文件行、词、字符数-wc\"><a href=\"#统计文件行、词、字符数-wc\" class=\"headerlink\" title=\"统计文件行、词、字符数 (wc)\"></a><strong>统计文件行、词、字符数 (<code>wc</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-l</code>：统计行数。</li>\n<li><code>-w</code>：统计单词数。</li>\n<li><code>-c</code>：统计字节数。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"监视文件内容-tail-和-head\"><a href=\"#监视文件内容-tail-和-head\" class=\"headerlink\" title=\"监视文件内容 (tail 和 head)\"></a><strong>监视文件内容 (<code>tail</code> 和 <code>head</code>)</strong></h3><ul>\n<li><p>显示文件头部：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>动态监视文件末尾：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<p>在 Linux 中，<strong>管道符 (<code>|</code>)</strong> 是一种强大的工具，用于将一个命令的输出传递给另一个命令作为输入。以下是管道符的详细介绍和常见使用场景。</p>\n<hr>\n<h2 id=\"管道符语法\"><a href=\"#管道符语法\" class=\"headerlink\" title=\"管道符语法\"></a><strong>管道符语法</strong></h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">command1 <span class=\"token operator\">|</span> command2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>command1</code>：第一个命令，生成输出。</li>\n<li><code>|</code>：管道符，将第一个命令的输出传递给第二个命令。</li>\n<li><code>command2</code>：第二个命令，将接收的输入进行处理。</li>\n</ul>\n<hr>\n<h2 id=\"常见场景和示例\"><a href=\"#常见场景和示例\" class=\"headerlink\" title=\"常见场景和示例\"></a><strong>常见场景和示例</strong></h2><h3 id=\"1-结合-grep-搜索内容\"><a href=\"#1-结合-grep-搜索内容\" class=\"headerlink\" title=\"1. 结合 grep 搜索内容\"></a><strong>1. 结合 <code>grep</code> 搜索内容</strong></h3><ul>\n<li><p>查找某目录中包含特定关键词的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"filename\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>示例：列出当前目录下包含 “log” 的文件名：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-结合-sort-排序\"><a href=\"#2-结合-sort-排序\" class=\"headerlink\" title=\"2. 结合 sort 排序\"></a><strong>2. 结合 <code>sort</code> 排序</strong></h3><ul>\n<li><p>按文件大小排序（结合 ls -l）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-k</span> <span class=\"token number\">5</span> <span class=\"token parameter variable\">-n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>-k 5</code>：按第 5 列（文件大小）排序。</li>\n<li><code>-n</code>：按数值排序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-结合-wc-统计\"><a href=\"#3-结合-wc-统计\" class=\"headerlink\" title=\"3. 结合 wc 统计\"></a><strong>3. 结合 <code>wc</code> 统计</strong></h3><ul>\n<li><p>统计当前目录下的文件数量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>统计文件中的行数、单词数和字符数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">wc</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"4-结合-head-和-tail-查看内容\"><a href=\"#4-结合-head-和-tail-查看内容\" class=\"headerlink\" title=\"4. 结合 head 和 tail 查看内容\"></a><strong>4. 结合 <code>head</code> 和 <code>tail</code> 查看内容</strong></h3><ul>\n<li><p>查看文件的前 10 行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看文件的最后 10 行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"5-结合-cut-提取字段\"><a href=\"#5-结合-cut-提取字段\" class=\"headerlink\" title=\"5. 结合 cut 提取字段\"></a><strong>5. 结合 <code>cut</code> 提取字段</strong></h3><ul>\n<li><p>从 ls -l中提取文件权限：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">' '</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>-d ' '</code>：以空格为分隔符。</li>\n<li><code>-f 1</code>：提取第 1 列。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-结合-awk-进行格式化\"><a href=\"#6-结合-awk-进行格式化\" class=\"headerlink\" title=\"6. 结合 awk 进行格式化\"></a><strong>6. 结合 <code>awk</code> 进行格式化</strong></h3><ul>\n<li><p>提取文件名和大小：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $5, $9}'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>$5</code>：表示文件大小。</li>\n<li><code>$9</code>：表示文件名。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-结合-uniq-去重\"><a href=\"#7-结合-uniq-去重\" class=\"headerlink\" title=\"7. 结合 uniq 去重\"></a><strong>7. 结合 <code>uniq</code> 去重</strong></h3><ul>\n<li><p>统计文件中的唯一单词（结合 sort 和 uniq）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"8-结合-tee-保存和显示\"><a href=\"#8-结合-tee-保存和显示\" class=\"headerlink\" title=\"8. 结合 tee 保存和显示\"></a><strong>8. 结合 <code>tee</code> 保存和显示</strong></h3><ul>\n<li><p>将命令输出保存到文件，同时在终端显示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"9-结合-xargs-执行批量命令\"><a href=\"#9-结合-xargs-执行批量命令\" class=\"headerlink\" title=\"9. 结合 xargs 执行批量命令\"></a><strong>9. 结合 <code>xargs</code> 执行批量命令</strong></h3><ul>\n<li><p>删除包含特定关键词的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"temp\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token function\">rm</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>将文本文件中的内容逐行作为命令行参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> files.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token parameter variable\">-I</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">mv</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> /backup/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"10-动态监控日志文件\"><a href=\"#10-动态监控日志文件\" class=\"headerlink\" title=\"10. 动态监控日志文件\"></a><strong>10. 动态监控日志文件</strong></h3><ul>\n<li><p>监控日志文件中包含错误的行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> /var/log/syslog <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"error\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"管道符结合其他符号\"><a href=\"#管道符结合其他符号\" class=\"headerlink\" title=\"管道符结合其他符号\"></a><strong>管道符结合其他符号</strong></h2><h3 id=\"与重定向符号一起使用\"><a href=\"#与重定向符号一起使用\" class=\"headerlink\" title=\"与重定向符号一起使用\"></a><strong>与重定向符号一起使用</strong></h3><p>将管道符的输出保存到文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"txt\"</span> <span class=\"token operator\">&gt;</span> result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"多重管道\"><a href=\"#多重管道\" class=\"headerlink\" title=\"多重管道\"></a><strong>多重管道</strong></h3><p>将多个命令串联：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"keyword\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-c</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-nr</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>功能：<ol>\n<li>搜索文件中的 <code>keyword</code>。</li>\n<li>排序结果。</li>\n<li>去重并统计出现次数。</li>\n<li>按出现次数逆序排序。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<p>在 Linux 中，<strong>重定向</strong> 是将命令的输出或输入重定向到文件或其他设备的操作。它通常用于保存输出、将错误输出单独处理或读取文件作为输入。</p>\n<hr>\n<h2 id=\"1-输出重定向\"><a href=\"#1-输出重定向\" class=\"headerlink\" title=\"1. 输出重定向\"></a><strong>1. 输出重定向</strong></h2><h3 id=\"标准输出\"><a href=\"#标准输出\" class=\"headerlink\" title=\"标准输出 (>)\"></a><strong>标准输出 (<code>&gt;</code>)</strong></h3><ul>\n<li>将命令的标准输出（正常输出）重定向到文件。</li>\n<li>如果文件已存在，会<strong>覆盖</strong>原文件内容。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 ls 命令的输出保存到 output.txt文件中。</p>\n</li>\n</ul>\n<h3 id=\"追加输出\"><a href=\"#追加输出\" class=\"headerlink\" title=\"追加输出 (>>)\"></a><strong>追加输出 (<code>&gt;&gt;</code>)</strong></h3><ul>\n<li>将命令的标准输出<strong>追加</strong>到文件末尾，而不是覆盖。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"New line\"</span> <span class=\"token operator\">&gt;&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将字符串 “New line” 添加到 output.txt 的末尾。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-错误重定向\"><a href=\"#2-错误重定向\" class=\"headerlink\" title=\"2. 错误重定向\"></a><strong>2. 错误重定向</strong></h2><h3 id=\"标准错误输出-2\"><a href=\"#标准错误输出-2\" class=\"headerlink\" title=\"标准错误输出 (2>)\"></a><strong>标准错误输出 (<code>2&gt;</code>)</strong></h3><ul>\n<li>将命令的错误输出（标准错误）重定向到文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> nonexistent_file <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将错误消息保存到 error.txt。</p>\n</li>\n</ul>\n<h3 id=\"追加错误输出-2\"><a href=\"#追加错误输出-2\" class=\"headerlink\" title=\"追加错误输出 (2>>)\"></a><strong>追加错误输出 (<code>2&gt;&gt;</code>)</strong></h3><ul>\n<li>将错误输出<strong>追加</strong>到文件末尾。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"3-合并标准输出和错误输出\"><a href=\"#3-合并标准输出和错误输出\" class=\"headerlink\" title=\"3. 合并标准输出和错误输出\"></a><strong>3. 合并标准输出和错误输出</strong></h2><h3 id=\"将标准输出和标准错误合并到同一文件\"><a href=\"#将标准输出和标准错误合并到同一文件\" class=\"headerlink\" title=\"将标准输出和标准错误合并到同一文件\"></a><strong>将标准输出和标准错误合并到同一文件</strong></h3><ul>\n<li>使用 <code>&amp;&gt;</code> 将正常输出和错误输出都保存到一个文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> existing_file nonexistent_file <span class=\"token operator\">&amp;&gt;</span> all_output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"追加合并输出\"><a href=\"#追加合并输出\" class=\"headerlink\" title=\"追加合并输出\"></a><strong>追加合并输出</strong></h3><ul>\n<li>使用 <code>&amp;&gt;&gt;</code> 将正常输出和错误输出都追加到一个文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;&gt;&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"4-输入重定向\"><a href=\"#4-输入重定向\" class=\"headerlink\" title=\"4. 输入重定向\"></a><strong>4. 输入重定向</strong></h2><h3 id=\"将文件作为命令的输入\"><a href=\"#将文件作为命令的输入\" class=\"headerlink\" title=\"将文件作为命令的输入 (<)\"></a><strong>将文件作为命令的输入 (<code>&lt;</code>)</strong></h3><ul>\n<li>使用 <code>&lt;</code> 将文件内容作为命令的输入。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">&lt;</span> input.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>统计 input.txt 的行数。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-同时处理输出和错误\"><a href=\"#5-同时处理输出和错误\" class=\"headerlink\" title=\"5. 同时处理输出和错误\"></a><strong>5. 同时处理输出和错误</strong></h2><h3 id=\"将标准输出和错误分别保存到不同文件\"><a href=\"#将标准输出和错误分别保存到不同文件\" class=\"headerlink\" title=\"将标准输出和错误分别保存到不同文件\"></a><strong>将标准输出和错误分别保存到不同文件</strong></h3><ul>\n<li>使用 <code>&gt; file</code> 和 <code>2&gt; error_file</code>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;</span> output.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> existing_file nonexistent_file <span class=\"token operator\">&gt;</span> stdout.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> stderr.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"6-特殊重定向\"><a href=\"#6-特殊重定向\" class=\"headerlink\" title=\"6. 特殊重定向\"></a><strong>6. 特殊重定向</strong></h2><h3 id=\"丢弃输出到-dev-null\"><a href=\"#丢弃输出到-dev-null\" class=\"headerlink\" title=\"丢弃输出到 /dev/null\"></a><strong>丢弃输出到 <code>/dev/null</code></strong></h3><ul>\n<li><p><code>/dev/null</code> 是一个特殊设备文件，重定向到它的内容会被丢弃。</p>\n</li>\n<li><p>丢弃标准输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;</span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>丢弃标准错误：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>同时丢弃标准输出和错误：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;&gt;</span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"7-使用-tee-同时输出到文件和终端\"><a href=\"#7-使用-tee-同时输出到文件和终端\" class=\"headerlink\" title=\"7. 使用 tee 同时输出到文件和终端\"></a><strong>7. 使用 <code>tee</code> 同时输出到文件和终端</strong></h2><ul>\n<li><code>tee</code> 命令可以将输入同时保存到文件和终端。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 <code>ls</code> 的输出显示在终端的同时保存到 <code>output.txt</code>。</p>\n</li>\n<li><p>追加模式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"8-重定向符号总结\"><a href=\"#8-重定向符号总结\" class=\"headerlink\" title=\"8. 重定向符号总结\"></a><strong>8. 重定向符号总结</strong></h2><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&gt;</code></td>\n<td>将标准输出重定向到文件，覆盖文件内容</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>将标准输出追加到文件末尾</td>\n</tr>\n<tr>\n<td><code>2&gt;</code></td>\n<td>将错误输出重定向到文件，覆盖文件内容</td>\n</tr>\n<tr>\n<td><code>2&gt;&gt;</code></td>\n<td>将错误输出追加到文件末尾</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;</code></td>\n<td>将标准输出和错误输出重定向到同一文件</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;&gt;</code></td>\n<td>将标准输出和错误输出追加到同一文件</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>将文件内容作为命令的标准输入</td>\n</tr>\n<tr>\n<td><code>/dev/null</code></td>\n<td>丢弃所有输出</td>\n</tr>\n<tr>\n<td>`</td>\n<td>tee`</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"示例：组合重定向\"><a href=\"#示例：组合重定向\" class=\"headerlink\" title=\"示例：组合重定向\"></a><strong>示例：组合重定向</strong></h3><ol>\n<li><p>同时保存输出和错误到不同文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> existing_file nonexistent_file <span class=\"token operator\">&gt;</span> stdout.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> stderr.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>同时显示输出在终端，并保存到文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>统计某文件夹的文件数量，但丢弃错误：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /path/to/dir <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> /dev/null <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/23/vim-bian-ji-qi/",
            "url": "https://0xdadream.github.io/2024/11/23/vim-bian-ji-qi/",
            "title": "Vim 编辑器详细教程",
            "date_published": "2024-11-23T15:25:00.000Z",
            "content_html": "<h1 id=\"Vim-编辑器详细教程\"><a href=\"#Vim-编辑器详细教程\" class=\"headerlink\" title=\"Vim 编辑器详细教程\"></a>Vim 编辑器详细教程</h1><p>Vim 是一个强大的文本编辑器，以其高效的编辑能力和强大的功能著称，特别适合程序员和文字处理工作者。以下是一个详细的 Vim 教程，从基础操作到高级用法。</p>\n<hr>\n<h2 id=\"1-Vim-基础操作\"><a href=\"#1-Vim-基础操作\" class=\"headerlink\" title=\"1. Vim 基础操作\"></a>1. <strong>Vim 基础操作</strong></h2><h3 id=\"1-1-Vim-的三种模式\"><a href=\"#1-1-Vim-的三种模式\" class=\"headerlink\" title=\"1.1 Vim 的三种模式\"></a>1.1 Vim 的三种模式</h3><ul>\n<li><strong>正常模式</strong>（Normal Mode）：默认进入的模式，用于浏览、操作和执行命令。</li>\n<li><strong>插入模式</strong>（Insert Mode）：用于编辑文本，按 <code>i</code> 进入。</li>\n<li><strong>命令模式</strong>（Command Mode）：执行文件操作或配置命令，按 <code>:</code> 进入。</li>\n<li>ESC：三种模式切换。</li>\n</ul>\n<h3 id=\"1-2-启动和退出-Vim\"><a href=\"#1-2-启动和退出-Vim\" class=\"headerlink\" title=\"1.2 启动和退出 Vim\"></a>1.2 启动和退出 Vim</h3><ul>\n<li><p>启动 Vim：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>退出 Vim：</p>\n<ul>\n<li>保存并退出：<code>:</code> → 输入 <code>wq</code> → 按 <code>Enter</code></li>\n<li>强制退出（不保存）：<code>:</code> → 输入 <code>q!</code> → 按 <code>Enter</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-Vim-基本移动命令\"><a href=\"#2-Vim-基本移动命令\" class=\"headerlink\" title=\"2. Vim 基本移动命令\"></a>2. <strong>Vim 基本移动命令</strong></h2><ul>\n<li>按键快速移动：<ul>\n<li><code>h</code>：向左移动一个字符</li>\n<li><code>l</code>：向右移动一个字符</li>\n<li><code>j</code>：向下移动一行</li>\n<li><code>k</code>：向上移动一行</li>\n</ul>\n</li>\n<li>按单词移动：<ul>\n<li><code>w</code>：跳到下一个单词开头</li>\n<li><code>e</code>：跳到当前或下一个单词末尾</li>\n<li><code>b</code>：跳到当前或前一个单词开头</li>\n</ul>\n</li>\n<li>按行快速移动：<ul>\n<li><code>0</code>：跳到行首</li>\n<li><code>^</code>：跳到行首的第一个非空字符</li>\n<li><code>$</code>：跳到行尾</li>\n</ul>\n</li>\n<li>按页移动：<ul>\n<li><code>Ctrl-d</code>：向下滚动半屏</li>\n<li><code>Ctrl-u</code>：向上滚动半屏</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-文本编辑操作\"><a href=\"#3-文本编辑操作\" class=\"headerlink\" title=\"3. 文本编辑操作\"></a>3. <strong>文本编辑操作</strong></h2><h3 id=\"3-1-插入文本\"><a href=\"#3-1-插入文本\" class=\"headerlink\" title=\"3.1 插入文本\"></a>3.1 插入文本</h3><ul>\n<li><code>i</code>：在光标前插入</li>\n<li><code>I</code>：在行首插入</li>\n<li><code>a</code>：在光标后插入</li>\n<li><code>A</code>：在行尾插入</li>\n<li><code>o</code>：在当前行下插入新行</li>\n<li><code>O</code>：在当前行上插入新行</li>\n</ul>\n<h3 id=\"3-2-删除文本\"><a href=\"#3-2-删除文本\" class=\"headerlink\" title=\"3.2 删除文本\"></a>3.2 删除文本</h3><ul>\n<li><code>x</code>：删除光标处字符</li>\n<li><code>dw</code>：删除当前单词</li>\n<li><code>dd</code>：删除当前行</li>\n<li><code>d$</code>：删除光标到行尾</li>\n<li><code>d0</code>：删除光标到行首</li>\n</ul>\n<h3 id=\"3-3-复制与粘贴\"><a href=\"#3-3-复制与粘贴\" class=\"headerlink\" title=\"3.3 复制与粘贴\"></a>3.3 复制与粘贴</h3><ul>\n<li><code>yy</code>：复制当前行</li>\n<li><code>y$</code>：复制光标到行尾</li>\n<li><code>p</code>：粘贴到光标后</li>\n<li><code>P</code>：粘贴到光标前</li>\n</ul>\n<h3 id=\"3-4-替换文本\"><a href=\"#3-4-替换文本\" class=\"headerlink\" title=\"3.4 替换文本\"></a>3.4 替换文本</h3><ul>\n<li><code>r</code>：替换当前字符</li>\n<li><code>R</code>：进入替换模式</li>\n<li><code>cw</code>：替换当前单词</li>\n<li><code>C</code>：替换光标到行尾内容</li>\n</ul>\n<hr>\n<h2 id=\"4-搜索与替换\"><a href=\"#4-搜索与替换\" class=\"headerlink\" title=\"4. 搜索与替换\"></a>4. <strong>搜索与替换</strong></h2><h3 id=\"4-1-搜索\"><a href=\"#4-1-搜索\" class=\"headerlink\" title=\"4.1 搜索\"></a>4.1 搜索</h3><ul>\n<li><code>/关键词</code>：向下搜索</li>\n<li><code>?关键词</code>：向上搜索</li>\n<li><code>n</code>：跳到下一个匹配</li>\n<li><code>N</code>：跳到上一个匹配</li>\n</ul>\n<h3 id=\"4-2-替换\"><a href=\"#4-2-替换\" class=\"headerlink\" title=\"4.2 替换\"></a>4.2 替换</h3><ul>\n<li>单次替换：<code>:%s/旧文本/新文本/g</code></li>\n<li>确认替换：<code>:%s/旧文本/新文本/gc</code></li>\n</ul>\n<hr>\n<h2 id=\"5-多文件与多窗口\"><a href=\"#5-多文件与多窗口\" class=\"headerlink\" title=\"5. 多文件与多窗口\"></a>5. <strong>多文件与多窗口</strong></h2><h3 id=\"5-1-分屏操作\"><a href=\"#5-1-分屏操作\" class=\"headerlink\" title=\"5.1 分屏操作\"></a>5.1 分屏操作</h3><ul>\n<li><code>:sp 文件名</code>：水平分屏</li>\n<li><code>:vsp 文件名</code>：垂直分屏</li>\n<li><code>Ctrl-w</code> + <code>方向键</code>：切换窗口</li>\n</ul>\n<h3 id=\"5-2-标签页\"><a href=\"#5-2-标签页\" class=\"headerlink\" title=\"5.2 标签页\"></a>5.2 标签页</h3><ul>\n<li><code>:tabnew 文件名</code>：打开新标签页</li>\n<li><code>:tabn</code>：切换到下一个标签页</li>\n<li><code>:tabp</code>：切换到上一个标签页</li>\n</ul>\n<hr>\n<h2 id=\"6-Vim-配置\"><a href=\"#6-Vim-配置\" class=\"headerlink\" title=\"6. Vim 配置\"></a>6. <strong>Vim 配置</strong></h2><h3 id=\"6-1-创建配置文件\"><a href=\"#6-1-创建配置文件\" class=\"headerlink\" title=\"6.1 创建配置文件\"></a>6.1 创建配置文件</h3><p>Vim 配置文件路径：</p>\n<ul>\n<li>Linux: <code>~/.vimrc</code></li>\n<li>Windows: <code>C:\\Users\\&lt;用户名&gt;\\_vimrc</code></li>\n</ul>\n<h3 id=\"6-2-常用配置\"><a href=\"#6-2-常用配置\" class=\"headerlink\" title=\"6.2 常用配置\"></a>6.2 常用配置</h3><pre class=\"line-numbers language-vim\" data-language=\"vim\"><code class=\"language-vim\"><span class=\"token keyword\">set</span> <span class=\"token keyword\">number</span>           <span class=\"token comment\">\" 显示行号</span>\n<span class=\"token keyword\">set</span> <span class=\"token builtin\">tabstop</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>        <span class=\"token comment\">\" 设置 Tab 宽度为 4</span>\n<span class=\"token keyword\">set</span> <span class=\"token builtin\">shiftwidth</span><span class=\"token operator\">=</span><span class=\"token number\">4</span>     <span class=\"token comment\">\" 自动缩进宽度为 4</span>\n<span class=\"token keyword\">set</span> <span class=\"token builtin\">expandtab</span>        <span class=\"token comment\">\" 将 Tab 转为空格</span>\n<span class=\"token keyword\">set</span> <span class=\"token builtin\">autoindent</span>       <span class=\"token comment\">\" 自动缩进</span>\n<span class=\"token keyword\">set</span> <span class=\"token builtin\">hlsearch</span>         <span class=\"token comment\">\" 高亮搜索结果</span>\n<span class=\"token keyword\">set</span> <span class=\"token builtin\">incsearch</span>        <span class=\"token comment\">\" 实时搜索</span>\n<span class=\"token builtin\">syntax</span> <span class=\"token keyword\">on</span>            <span class=\"token comment\">\" 开启语法高亮</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"7-高级功能\"><a href=\"#7-高级功能\" class=\"headerlink\" title=\"7. 高级功能\"></a>7. <strong>高级功能</strong></h2><h3 id=\"7-1-宏录制\"><a href=\"#7-1-宏录制\" class=\"headerlink\" title=\"7.1 宏录制\"></a>7.1 宏录制</h3><ul>\n<li>开始录制：按 <code>q</code> → 输入一个字母（如 <code>a</code>）</li>\n<li>执行操作（如插入文本或删除行）</li>\n<li>结束录制：再次按 <code>q</code></li>\n<li>播放宏：<code>@a</code></li>\n</ul>\n<h3 id=\"7-2-快速跳转\"><a href=\"#7-2-快速跳转\" class=\"headerlink\" title=\"7.2 快速跳转\"></a>7.2 快速跳转</h3><ul>\n<li><code>Ctrl-o</code>：返回上一个光标位置</li>\n<li><code>Ctrl-i</code>：前进到下一个光标位置</li>\n</ul>\n<hr>\n<h2 id=\"8-学习资源\"><a href=\"#8-学习资源\" class=\"headerlink\" title=\"8. 学习资源\"></a>8. <strong>学习资源</strong></h2><ul>\n<li>官方文档：<code>:help</code></li>\n<li>在线教程：<a href=\"https://vim-adventures.com/\">Vim Adventures</a></li>\n</ul>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/23/bian-yi-shi-yong/",
            "url": "https://0xdadream.github.io/2024/11/23/bian-yi-shi-yong/",
            "title": "编译教程",
            "date_published": "2024-11-23T01:25:00.000Z",
            "content_html": "<h1 id=\"编译教程\"><a href=\"#编译教程\" class=\"headerlink\" title=\"编译教程\"></a>编译教程</h1><p>下面是一个<strong>完整的从源码编译安装软件的教程</strong>，涵盖了从环境准备到配置、编译、安装的所有可能会用到的步骤和细节，适用于各种类型的软件包。</p>\n<hr>\n<h2 id=\"一、环境准备\"><a href=\"#一、环境准备\" class=\"headerlink\" title=\"一、环境准备\"></a>一、环境准备</h2><p>在开始编译源码之前，确保系统满足以下条件：</p>\n<h3 id=\"1-安装必要工具\"><a href=\"#1-安装必要工具\" class=\"headerlink\" title=\"1. 安装必要工具\"></a>1. <strong>安装必要工具</strong></h3><p>在 Linux 环境下，通常需要以下工具：</p>\n<ul>\n<li><strong>编译器</strong>: <code>gcc</code> 或 <code>clang</code></li>\n<li><strong>构建工具</strong>: <code>make</code></li>\n<li><strong>其他依赖</strong>: <code>autoconf</code>, <code>automake</code>, <code>libtool</code></li>\n</ul>\n<p>对于基于 Debian 的系统（如 Ubuntu）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> build-essential autoconf automake libtool pkg-config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>对于基于 RHEL 的系统（如 CentOS）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum groupinstall <span class=\"token string\">\"Development Tools\"</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> autoconf automake libtool pkgconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-下载源码\"><a href=\"#2-下载源码\" class=\"headerlink\" title=\"2. 下载源码\"></a>2. <strong>下载源码</strong></h3><p>源码通常以 <code>.tar.gz</code> 或 <code>.tar.bz2</code> 的形式提供：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://example.com/software-1.0.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> software-1.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> software-1.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"二、运行-configure\"><a href=\"#二、运行-configure\" class=\"headerlink\" title=\"二、运行 ./configure\"></a>二、运行 <code>./configure</code></h2><p><code>./configure</code> 是自动生成的配置脚本，用于检查系统环境，生成适合当前系统的编译配置。以下是配置过程的所有选项说明。</p>\n<h3 id=\"1-路径相关选项\"><a href=\"#1-路径相关选项\" class=\"headerlink\" title=\"1. 路径相关选项\"></a>1. <strong>路径相关选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>默认值</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--prefix=DIR</code></td>\n<td>软件安装的根目录</td>\n<td><code>/usr/local</code></td>\n<td><code>--prefix=/opt/myapp</code></td>\n</tr>\n<tr>\n<td><code>--exec-prefix=DIR</code></td>\n<td>架构相关文件的安装路径</td>\n<td><code>$prefix</code></td>\n<td><code>--exec-prefix=/usr</code></td>\n</tr>\n<tr>\n<td><code>--bindir=DIR</code></td>\n<td>可执行文件安装路径</td>\n<td><code>$exec_prefix/bin</code></td>\n<td><code>--bindir=/usr/bin</code></td>\n</tr>\n<tr>\n<td><code>--libdir=DIR</code></td>\n<td>库文件安装路径</td>\n<td><code>$exec_prefix/lib</code></td>\n<td><code>--libdir=/opt/myapp/lib</code></td>\n</tr>\n<tr>\n<td><code>--includedir=DIR</code></td>\n<td>头文件安装路径</td>\n<td><code>$prefix/include</code></td>\n<td><code>--includedir=/opt/include</code></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp <span class=\"token parameter variable\">--bindir</span><span class=\"token operator\">=</span>/opt/myapp/bin <span class=\"token parameter variable\">--libdir</span><span class=\"token operator\">=</span>/opt/myapp/lib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"prefix-的用途\"><a href=\"#prefix-的用途\" class=\"headerlink\" title=\"prefix 的用途\"></a><code>prefix</code> 的用途</h4><p><code>prefix</code> 是通过 <code>./configure --prefix=DIR</code> 选项指定的路径。其主要作用是告诉构建系统，安装的文件应该放在哪个目录下。</p>\n<p><code>$prefix</code> 的默认值通常是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/usr/local<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>那么，安装路径会变成以下结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/opt/myapp/bin       # 可执行文件\n/opt/myapp/lib       # 库文件\n/opt/myapp/include   # 头文件\n/opt/myapp/share     # 共享资源（如文档、手册）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"如何修改-prefix\"><a href=\"#如何修改-prefix\" class=\"headerlink\" title=\"如何修改 $prefix\"></a>如何修改 <code>$prefix</code></h4><p>在配置阶段指定通过 <code>./configure</code> 的 <code>--prefix</code> 参数直接指定：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/custom/path<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果不指定，系统会默认安装到 <code>/usr/local</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token comment\"># 文件安装到 /usr/local/...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"prefix-的实际应用\"><a href=\"#prefix-的实际应用\" class=\"headerlink\" title=\"$prefix 的实际应用\"></a><code>$prefix</code> 的实际应用</h4><p>假设我们正在安装一个名为 <code>myapp</code> 的软件：</p>\n<p>示例 1: 默认安装到 <code>/usr/local</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装完成后，文件路径如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/usr/local/bin/myapp        # 可执行文件\n/usr/local/lib/libmyapp.so  # 动态库\n/usr/local/include/myapp.h  # 头文件\n/usr/local/share/myapp      # 共享数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>示例 2: 自定义安装路径</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装完成后，文件路径如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/opt/myapp/bin/myapp        # 可执行文件\n/opt/myapp/lib/libmyapp.so  # 动态库\n/opt/myapp/include/myapp.h  # 头文件\n/opt/myapp/share/myapp      # 共享数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"为什么-prefix-很重要\"><a href=\"#为什么-prefix-很重要\" class=\"headerlink\" title=\"为什么 $prefix 很重要\"></a>为什么 <code>$prefix</code> 很重要</h4><h5 id=\"1-避免覆盖系统文件\"><a href=\"#1-避免覆盖系统文件\" class=\"headerlink\" title=\"1. 避免覆盖系统文件\"></a>1. 避免覆盖系统文件</h5><p>默认路径 <code>/usr/local</code> 不会影响系统自带的软件，安全且独立。</p>\n<h5 id=\"2-方便不同版本共存\"><a href=\"#2-方便不同版本共存\" class=\"headerlink\" title=\"2. 方便不同版本共存\"></a>2. 方便不同版本共存</h5><p>通过为不同版本指定不同的 <code>--prefix</code>，可以在同一台机器上运行多版本的软件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp-1.0\n./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp-2.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"3-灵活管理软件\"><a href=\"#3-灵活管理软件\" class=\"headerlink\" title=\"3. 灵活管理软件\"></a>3. 灵活管理软件</h5><p>如果安装路径是自定义的，例如 <code>/opt/myapp</code>，删除整个软件只需移除该目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /opt/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"如何查看-prefix-的值\"><a href=\"#如何查看-prefix-的值\" class=\"headerlink\" title=\"如何查看 $prefix 的值\"></a>如何查看 <code>$prefix</code> 的值</h4><p>配置完成后，<code>$prefix</code> 的值通常会被记录在 <code>Makefile</code> 中，你可以通过以下方法查看：</p>\n<h5 id=\"1-直接查看-Makefile\"><a href=\"#1-直接查看-Makefile\" class=\"headerlink\" title=\"1. 直接查看 Makefile\"></a>1. 直接查看 <code>Makefile</code></h5><p>打开 <code>Makefile</code>，找到 <code>prefix</code> 的定义：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">\"^prefix\"</span> Makefile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"2-使用-config-log\"><a href=\"#2-使用-config-log\" class=\"headerlink\" title=\"2. 使用 config.log\"></a>2. 使用 <code>config.log</code></h5><p>查看配置过程生成的日志文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">\"prefix\"</span> config.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-功能启用-禁用选项\"><a href=\"#2-功能启用-禁用选项\" class=\"headerlink\" title=\"2. 功能启用/禁用选项\"></a>2. <strong>功能启用/禁用选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--enable-FEATURE</code></td>\n<td>启用某个功能</td>\n<td><code>--enable-ssl</code></td>\n</tr>\n<tr>\n<td><code>--disable-FEATURE</code></td>\n<td>禁用某个功能</td>\n<td><code>--disable-debug</code></td>\n</tr>\n<tr>\n<td><code>--with-FEATURE</code></td>\n<td>启用功能，并指定路径或配置</td>\n<td><code>--with-ssl=/opt/openssl</code></td>\n</tr>\n<tr>\n<td><code>--without-FEATURE</code></td>\n<td>禁用功能</td>\n<td><code>--without-zlib</code></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure --enable-optimizations --disable-debug --with-ssl<span class=\"token operator\">=</span>/opt/openssl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-编译器相关选项\"><a href=\"#3-编译器相关选项\" class=\"headerlink\" title=\"3. 编译器相关选项\"></a>3. <strong>编译器相关选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>CC=COMPILER</code></td>\n<td>指定 C 编译器</td>\n<td><code>CC=gcc</code></td>\n</tr>\n<tr>\n<td><code>CXX=COMPILER</code></td>\n<td>指定 C++ 编译器</td>\n<td><code>CXX=g++</code></td>\n</tr>\n<tr>\n<td><code>CFLAGS=FLAGS</code></td>\n<td>为 C 编译器设置标志</td>\n<td><code>CFLAGS=\"-O2 -Wall\"</code></td>\n</tr>\n<tr>\n<td><code>CXXFLAGS=FLAGS</code></td>\n<td>为 C++ 编译器设置标志</td>\n<td><code>CXXFLAGS=\"-O2 -Wall\"</code></td>\n</tr>\n<tr>\n<td><code>LDFLAGS=FLAGS</code></td>\n<td>设置链接器标志</td>\n<td><code>LDFLAGS=\"-L/usr/lib\"</code></td>\n</tr>\n<tr>\n<td><code>CPPFLAGS=FLAGS</code></td>\n<td>设置预处理器标志（头文件路径等）</td>\n<td><code>CPPFLAGS=\"-I/usr/include\"</code></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token assign-left variable\">CC</span><span class=\"token operator\">=</span>gcc <span class=\"token assign-left variable\">CFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-O2 -Wall\"</span> <span class=\"token assign-left variable\">LDFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-L/usr/local/lib\"</span> <span class=\"token assign-left variable\">CPPFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-I/usr/local/include\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-调试与日志选项\"><a href=\"#4-调试与日志选项\" class=\"headerlink\" title=\"4. 调试与日志选项\"></a>4. <strong>调试与日志选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--enable-debug</code></td>\n<td>启用调试模式</td>\n<td><code>--enable-debug</code></td>\n</tr>\n<tr>\n<td><code>--disable-debug</code></td>\n<td>禁用调试模式</td>\n<td><code>--disable-debug</code></td>\n</tr>\n<tr>\n<td><code>--quiet</code> 或 <code>--silent</code></td>\n<td>减少输出</td>\n<td><code>--quiet</code></td>\n</tr>\n<tr>\n<td><code>--verbose</code></td>\n<td>显示详细输出</td>\n<td><code>--verbose</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"5-查看所有参数\"><a href=\"#5-查看所有参数\" class=\"headerlink\" title=\"5.查看所有参数\"></a>5.查看所有参数</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">-h</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如得到<code>./configure --python=路径</code>，可以指定安装到指定python版本库中</p>\n<hr>\n<h2 id=\"三、编译源码\"><a href=\"#三、编译源码\" class=\"headerlink\" title=\"三、编译源码\"></a>三、编译源码</h2><p>运行 <code>make</code> 命令开始编译：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p><strong>加速编译</strong><br>利用多核 CPU：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> -j<span class=\"token variable\"><span class=\"token variable\">$(</span>nproc<span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>常见问题</strong><br>如果出现依赖问题，请根据报错信息安装缺失的库。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"四、测试编译结果\"><a href=\"#四、测试编译结果\" class=\"headerlink\" title=\"四、测试编译结果\"></a>四、测试编译结果</h2><p>在安装前，可以运行测试（如果源码支持）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> check<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"五、安装编译结果\"><a href=\"#五、安装编译结果\" class=\"headerlink\" title=\"五、安装编译结果\"></a>五、安装编译结果</h2><p>运行 <code>make install</code> 安装编译完成的文件到目标路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，检查安装路径下是否有生成的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /opt/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"六、卸载（可选）\"><a href=\"#六、卸载（可选）\" class=\"headerlink\" title=\"六、卸载（可选）\"></a>六、卸载（可选）</h2><p>如果需要卸载，使用 <code>make uninstall</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> uninstall<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"七、完整操作示例\"><a href=\"#七、完整操作示例\" class=\"headerlink\" title=\"七、完整操作示例\"></a>七、完整操作示例</h2><p>以下是完整的从下载到安装的操作流程示例：</p>\n<ol>\n<li><p><strong>下载源码</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://example.com/software-1.0.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> software-1.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> software-1.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>运行配置脚本</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp --enable-optimizations --with-ssl<span class=\"token operator\">=</span>/opt/openssl <span class=\"token assign-left variable\">CFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-O2 -Wall\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>编译源码</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> -j<span class=\"token variable\"><span class=\"token variable\">$(</span>nproc<span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>运行测试</strong>（可选）:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装程序</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>验证安装</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/myapp/bin/software <span class=\"token parameter variable\">--version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"八、常见问题及解决方案\"><a href=\"#八、常见问题及解决方案\" class=\"headerlink\" title=\"八、常见问题及解决方案\"></a>八、常见问题及解决方案</h2><h3 id=\"1-缺少依赖库\"><a href=\"#1-缺少依赖库\" class=\"headerlink\" title=\"1. 缺少依赖库\"></a>1. 缺少依赖库</h3><p><strong>错误信息</strong>: <code>configure: error: Missing library xyz</code><br><strong>解决方法</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libxyz-dev  <span class=\"token comment\"># Debian/Ubuntu</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> xyz-devel   <span class=\"token comment\"># CentOS/RHEL</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-权限不足\"><a href=\"#2-权限不足\" class=\"headerlink\" title=\"2. 权限不足\"></a>2. 权限不足</h3><p><strong>错误信息</strong>: <code>Permission denied</code><br><strong>解决方法</strong>:<br>在需要权限的命令前加 <code>sudo</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-环境变量问题\"><a href=\"#3-环境变量问题\" class=\"headerlink\" title=\"3. 环境变量问题\"></a>3. 环境变量问题</h3><p><strong>问题描述</strong>: 安装后无法找到可执行文件。<br><strong>解决方法</strong>: 将安装路径添加到 <code>PATH</code> 中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/opt/myapp/bin:<span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<p>以下是 <code>autoconf</code> 和 <code>automake</code> 的完整使用教程，包括它们的基本概念、工作原理和实际使用步骤。</p>\n<hr>\n<h2 id=\"一、autoconf-和-automake-的简介\"><a href=\"#一、autoconf-和-automake-的简介\" class=\"headerlink\" title=\"一、autoconf 和 automake 的简介\"></a>一、<code>autoconf</code> 和 <code>automake</code> 的简介</h2><h3 id=\"1-什么是-autoconf\"><a href=\"#1-什么是-autoconf\" class=\"headerlink\" title=\"1. 什么是 autoconf\"></a>1. 什么是 <code>autoconf</code></h3><p><code>autoconf</code> 是一种自动生成 <code>configure</code> 脚本的工具，主要用来检测构建系统的环境是否满足软件的依赖需求，并生成相应的配置文件（如 <code>Makefile</code>）。</p>\n<p><strong>功能</strong>:</p>\n<ul>\n<li>提供跨平台兼容性。</li>\n<li>检查依赖工具和库的存在。</li>\n<li>自动生成编译脚本。</li>\n</ul>\n<hr>\n<h3 id=\"2-什么是-automake\"><a href=\"#2-什么是-automake\" class=\"headerlink\" title=\"2. 什么是 automake\"></a>2. 什么是 <code>automake</code></h3><p><code>automake</code> 是一种自动生成 <code>Makefile.in</code> 文件的工具，它依赖于更高层次的构建规则定义文件 <code>Makefile.am</code>。</p>\n<p><strong>功能</strong>:</p>\n<ul>\n<li>简化 <code>Makefile</code> 编写。</li>\n<li>与 <code>autoconf</code> 配合，生成完整的构建系统。</li>\n<li>提供模块化和扩展支持。</li>\n</ul>\n<hr>\n<h2 id=\"二、工作原理\"><a href=\"#二、工作原理\" class=\"headerlink\" title=\"二、工作原理\"></a>二、工作原理</h2><ul>\n<li><code>autoconf</code> 从 <code>configure.ac</code> 或 <code>configure.in</code> 文件生成 <code>configure</code> 脚本。</li>\n<li><code>automake</code> 从 <code>Makefile.am</code> 文件生成 <code>Makefile.in</code> 文件，最终结合 <code>autoconf</code> 的输出生成 <code>Makefile</code>。</li>\n</ul>\n<p><strong>工具链流程</strong>:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">configure.ac --&gt; autoconf --&gt; configure\nMakefile.am  --&gt; automake --&gt; Makefile.in\nconfigure + Makefile.in --&gt; ./configure --&gt; Makefile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"三、安装和准备环境\"><a href=\"#三、安装和准备环境\" class=\"headerlink\" title=\"三、安装和准备环境\"></a>三、安装和准备环境</h2><h3 id=\"1-安装工具\"><a href=\"#1-安装工具\" class=\"headerlink\" title=\"1. 安装工具\"></a>1. 安装工具</h3><p>在 Linux 环境中安装 <code>autoconf</code> 和 <code>automake</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> autoconf automake  <span class=\"token comment\"># Debian/Ubuntu</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> autoconf automake     <span class=\"token comment\"># CentOS</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"2-项目准备\"><a href=\"#2-项目准备\" class=\"headerlink\" title=\"2. 项目准备\"></a>2. 项目准备</h3><p>创建一个简单的 C 项目目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> myproject\n<span class=\"token builtin class-name\">cd</span> myproject\n<span class=\"token function\">mkdir</span> src\n<span class=\"token function\">touch</span> configure.ac Makefile.am src/Makefile.am<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"四、autoconf-和-automake-使用流程\"><a href=\"#四、autoconf-和-automake-使用流程\" class=\"headerlink\" title=\"四、autoconf 和 automake 使用流程\"></a>四、<code>autoconf</code> 和 <code>automake</code> 使用流程</h2><h3 id=\"1-创建-configure-ac-文件\"><a href=\"#1-创建-configure-ac-文件\" class=\"headerlink\" title=\"1. 创建 configure.ac 文件\"></a><strong>1. 创建 <code>configure.ac</code> 文件</strong></h3><p><code>configure.ac</code> 是 <code>autoconf</code> 的核心文件，定义了项目名称、版本、依赖工具等。</p>\n<p>以下是一个简单示例：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [user@example.com])  # 项目名称、版本和维护者\nAM_INIT_AUTOMAKE                                  # 初始化 automake\nAC_PROG_CC                                       # 检测 C 编译器\nAC_CONFIG_FILES([Makefile src/Makefile])         # 配置 Makefile 文件\nAC_OUTPUT                                        # 输出配置文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"2-创建-Makefile-am-文件\"><a href=\"#2-创建-Makefile-am-文件\" class=\"headerlink\" title=\"2. 创建 Makefile.am 文件\"></a><strong>2. 创建 <code>Makefile.am</code> 文件</strong></h3><h4 id=\"顶层目录的-Makefile-am\"><a href=\"#顶层目录的-Makefile-am\" class=\"headerlink\" title=\"顶层目录的 Makefile.am\"></a>顶层目录的 <code>Makefile.am</code></h4><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">SUBDIRS <span class=\"token operator\">=</span> src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"src-Makefile-am\"><a href=\"#src-Makefile-am\" class=\"headerlink\" title=\"src/Makefile.am\"></a><code>src/Makefile.am</code></h4><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">bin_PROGRAMS <span class=\"token operator\">=</span> myapp\nmyapp_SOURCES <span class=\"token operator\">=</span> main.c utils.c utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"3-生成构建脚本和文件\"><a href=\"#3-生成构建脚本和文件\" class=\"headerlink\" title=\"3. 生成构建脚本和文件\"></a><strong>3. 生成构建脚本和文件</strong></h3><ol>\n<li><p><strong>生成 <code>aclocal.m4</code></strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 <code>configure</code> 脚本</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 <code>Makefile.in</code> 文件</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">automake --add-missing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 <code>Makefile</code> 文件</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"4-编译和安装\"><a href=\"#4-编译和安装\" class=\"headerlink\" title=\"4. 编译和安装\"></a><strong>4. 编译和安装</strong></h3><ol>\n<li><p><strong>编译</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>运行程序</strong><br>如果你的程序是一个可执行文件，例如 <code>myapp</code>，可以直接运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./src/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"五、完整示例\"><a href=\"#五、完整示例\" class=\"headerlink\" title=\"五、完整示例\"></a>五、完整示例</h2><p>假设你有以下项目结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">myproject/\n├── configure.ac\n├── Makefile.am\n├── src/\n│   ├── Makefile.am\n│   ├── main.c\n│   ├── utils.c\n│   └── utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下是各个文件的内容：</p>\n<h3 id=\"1-configure-ac\"><a href=\"#1-configure-ac\" class=\"headerlink\" title=\"1. configure.ac\"></a>1. <code>configure.ac</code></h3><pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [user@example.com])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_CONFIG_FILES([Makefile src/Makefile])\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-顶层-Makefile-am\"><a href=\"#2-顶层-Makefile-am\" class=\"headerlink\" title=\"2. 顶层 Makefile.am\"></a>2. 顶层 <code>Makefile.am</code></h3><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">SUBDIRS <span class=\"token operator\">=</span> src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-src-Makefile-am\"><a href=\"#3-src-Makefile-am\" class=\"headerlink\" title=\"3. src/Makefile.am\"></a>3. <code>src/Makefile.am</code></h3><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">bin_PROGRAMS <span class=\"token operator\">=</span> myapp\nmyapp_SOURCES <span class=\"token operator\">=</span> main.c utils.c utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-src-main-c\"><a href=\"#4-src-main-c\" class=\"headerlink\" title=\"4. src/main.c\"></a>4. <code>src/main.c</code></h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"utils.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-src-utils-c\"><a href=\"#5-src-utils-c\" class=\"headerlink\" title=\"5. src/utils.c\"></a>5. <code>src/utils.c</code></h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"utils.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-src-utils-h\"><a href=\"#6-src-utils-h\" class=\"headerlink\" title=\"6. src/utils.h\"></a>6. <code>src/utils.h</code></h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">UTILS_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UTILS_H</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"构建和运行\"><a href=\"#构建和运行\" class=\"headerlink\" title=\"构建和运行\"></a>构建和运行</h3><h4 id=\"1-生成文件\"><a href=\"#1-生成文件\" class=\"headerlink\" title=\"1. 生成文件\"></a>1. 生成文件</h4><p>运行以下命令生成必要的构建文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal\nautoconf\nautomake --add-missing\n./configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"3. 安装\"></a>3. 安装</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"4-运行程序\"><a href=\"#4-运行程序\" class=\"headerlink\" title=\"4. 运行程序\"></a>4. 运行程序</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./src/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"六、常见问题及解决方法\"><a href=\"#六、常见问题及解决方法\" class=\"headerlink\" title=\"六、常见问题及解决方法\"></a>六、常见问题及解决方法</h2><ol>\n<li><strong><code>aclocal: command not found</code></strong><br><strong>原因</strong>: 未安装 <code>automake</code>。<br><strong>解决</strong>: 安装 <code>automake</code>。</li>\n<li><strong><code>configure.ac: no proper invocation of AM_INIT_AUTOMAKE</code></strong><br><strong>原因</strong>: <code>configure.ac</code> 中缺少 <code>AM_INIT_AUTOMAKE</code>。<br><strong>解决</strong>: 添加 <code>AM_INIT_AUTOMAKE</code>。</li>\n<li><strong><code>Makefile.am: required file 'INSTALL' not found</code></strong><br><strong>原因</strong>: 缺少默认的 <code>INSTALL</code> 文件。<br><strong>解决</strong>: 使用 <code>automake --add-missing</code> 自动生成。</li>\n</ol>\n<hr>\n<h2 id=\"一、autoscan\"><a href=\"#一、autoscan\" class=\"headerlink\" title=\"一、autoscan\"></a>一、<code>autoscan</code></h2><h3 id=\"1-什么是-autoscan\"><a href=\"#1-什么是-autoscan\" class=\"headerlink\" title=\"1. 什么是 autoscan\"></a>1. 什么是 <code>autoscan</code></h3><p><code>autoscan</code> 是 <code>autoconf</code> 的一个辅助工具，用于自动生成初始的 <code>configure.ac</code> 文件（或者早期的 <code>configure.in</code> 文件）。它会扫描项目目录中的文件，推测需要哪些检查，并生成一个名为 <code>configure.scan</code> 的模板文件供开发者参考。</p>\n<hr>\n<h3 id=\"2-autoscan-的功能\"><a href=\"#2-autoscan-的功能\" class=\"headerlink\" title=\"2. autoscan 的功能\"></a>2. <code>autoscan</code> 的功能</h3><ul>\n<li>自动检测源码中的依赖，例如头文件、库文件。</li>\n<li>提供一个初步的 <code>configure.ac</code> 文件模板。</li>\n<li>简化了手动编写配置文件的过程。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用方法\"><a href=\"#3-使用方法\" class=\"headerlink\" title=\"3. 使用方法\"></a>3. 使用方法</h3><h4 id=\"1-初始化项目\"><a href=\"#1-初始化项目\" class=\"headerlink\" title=\"(1) 初始化项目\"></a>(1) 初始化项目</h4><p>确保项目目录结构已经创建，并包含至少一个源文件（如 <code>main.c</code>）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> myproject\n<span class=\"token builtin class-name\">cd</span> myproject\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'#include &lt;stdio.h&gt;'</span> <span class=\"token operator\">&gt;</span> main.c\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'int main() { return 0; }'</span> <span class=\"token operator\">&gt;&gt;</span> main.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-运行-autoscan\"><a href=\"#2-运行-autoscan\" class=\"headerlink\" title=\"(2) 运行 autoscan\"></a>(2) 运行 <code>autoscan</code></h4><p>在项目目录中运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoscan<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行完成后，生成一个 <code>configure.scan</code> 文件。</p>\n<h4 id=\"3-修改-configure-scan\"><a href=\"#3-修改-configure-scan\" class=\"headerlink\" title=\"(3) 修改 configure.scan\"></a>(3) 修改 <code>configure.scan</code></h4><p>将 <code>configure.scan</code> 重命名为 <code>configure.ac</code>，并根据实际需求修改内容。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> configure.scan configure.ac<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>示例生成的 <code>configure.scan</code> 文件可能包含以下内容：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([UNKNOWN], [1.0], [bug-report@example.com])\nAC_CONFIG_SRCDIR([main.c])\nAC_CONFIG_HEADERS([config.h])\nAC_PROG_CC\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改后，可添加更多具体的检查内容，例如库依赖、路径配置等。</p>\n<h4 id=\"4-继续构建\"><a href=\"#4-继续构建\" class=\"headerlink\" title=\"(4) 继续构建\"></a>(4) 继续构建</h4><p>生成 <code>configure</code> 脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"4-autoscan-的注意事项\"><a href=\"#4-autoscan-的注意事项\" class=\"headerlink\" title=\"4. autoscan 的注意事项\"></a>4. <code>autoscan</code> 的注意事项</h3><ul>\n<li>它只能作为生成初始配置的工具，输出的 <code>configure.scan</code> 文件需要手动完善。</li>\n<li>如果项目目录中没有 <code>.c</code> 文件或标准构建文件，<code>autoscan</code> 可能无法推断正确的配置。</li>\n</ul>\n<hr>\n<h2 id=\"二、aclocal\"><a href=\"#二、aclocal\" class=\"headerlink\" title=\"二、aclocal\"></a>二、<code>aclocal</code></h2><h3 id=\"1-什么是-aclocal\"><a href=\"#1-什么是-aclocal\" class=\"headerlink\" title=\"1. 什么是 aclocal\"></a>1. 什么是 <code>aclocal</code></h3><p><code>aclocal</code> 是 <code>automake</code> 的辅助工具，专门用于生成 <code>aclocal.m4</code> 文件。<code>aclocal.m4</code> 是一个包含各种宏定义的文件，用于支持 <code>autoconf</code> 和 <code>automake</code> 的功能。</p>\n<p><code>aclocal</code> 会扫描项目目录中的 <code>configure.ac</code> 文件，以及系统中可用的宏定义，生成一个与项目兼容的宏文件。</p>\n<hr>\n<h3 id=\"2-aclocal-的功能\"><a href=\"#2-aclocal-的功能\" class=\"headerlink\" title=\"2. aclocal 的功能\"></a>2. <code>aclocal</code> 的功能</h3><ul>\n<li>根据 <code>configure.ac</code> 的内容，生成或更新 <code>aclocal.m4</code> 文件。</li>\n<li>提供对额外宏库的支持，例如 GNU 库的宏。</li>\n<li>管理自定义宏，以便 <code>autoconf</code> 和 <code>automake</code> 可以正确工作。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用方法-1\"><a href=\"#3-使用方法-1\" class=\"headerlink\" title=\"3. 使用方法\"></a>3. 使用方法</h3><h4 id=\"1-编写-configure-ac\"><a href=\"#1-编写-configure-ac\" class=\"headerlink\" title=\"(1) 编写 configure.ac\"></a>(1) 编写 <code>configure.ac</code></h4><p>假设我们有以下简单的 <code>configure.ac</code> 文件：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [bug-report@example.com])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-运行-aclocal\"><a href=\"#2-运行-aclocal\" class=\"headerlink\" title=\"(2) 运行 aclocal\"></a>(2) 运行 <code>aclocal</code></h4><p>运行以下命令生成或更新 <code>aclocal.m4</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>生成的 <code>aclocal.m4</code> 文件可能包含标准宏，例如对编译器检查、头文件检查等的支持。</p>\n<h4 id=\"3-后续步骤\"><a href=\"#3-后续步骤\" class=\"headerlink\" title=\"(3) 后续步骤\"></a>(3) 后续步骤</h4><p>生成 <code>configure</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"4-自定义宏支持\"><a href=\"#4-自定义宏支持\" class=\"headerlink\" title=\"4. 自定义宏支持\"></a>4. 自定义宏支持</h3><p>如果你需要自定义宏，可以创建一个名为 <code>m4/</code> 的目录，并将宏文件放入其中。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> m4\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'AC_DEFUN([MY_MACRO], [echo \"This is my custom macro\"])'</span> <span class=\"token operator\">&gt;</span> m4/my_macro.m4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>然后在 <code>configure.ac</code> 中引用：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [bug-report@example.com])\nAC_CONFIG_MACRO_DIR([m4])  # 指定宏目录\nAM_INIT_AUTOMAKE\nMY_MACRO\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行以下命令，<code>aclocal</code> 会自动包含自定义宏：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"三、完整实践示例\"><a href=\"#三、完整实践示例\" class=\"headerlink\" title=\"三、完整实践示例\"></a>三、完整实践示例</h2><p>假设我们有一个简单的项目：<br>目录结构如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">myproject/\n├── configure.ac\n├── Makefile.am\n├── src/\n│   ├── main.c\n│   ├── utils.c\n│   └── utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下是构建流程：</p>\n<ol>\n<li><strong>生成初始文件</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoscan\n<span class=\"token function\">mv</span> configure.scan configure.ac<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>完善 <code>configure.ac</code></strong></li>\n</ol>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [bug-report@example.com])\nAC_CONFIG_SRCDIR([src/main.c])\nAC_CONFIG_MACRO_DIR([m4])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>生成宏文件</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li><strong>生成 <code>configure</code> 脚本</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf\nautomake --add-missing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>运行 <code>configure</code> 和编译</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/20/linux-bian-yi-charm-ku/",
            "url": "https://0xdadream.github.io/2024/11/20/linux-bian-yi-charm-ku/",
            "title": "linux编译charm库",
            "date_published": "2024-11-20T01:25:00.000Z",
            "content_html": "<h1 id=\"linux编译charm库\"><a href=\"#linux编译charm库\" class=\"headerlink\" title=\"linux编译charm库\"></a>linux编译charm库</h1><p>在 Windows 的 Linux 子系统 (WSL) 中使用 Ubuntu 编译安装 Charm 库的步骤如下：</p>\n<hr>\n<h3 id=\"基于-WSL-的-Charm-库安装教程\"><a href=\"#基于-WSL-的-Charm-库安装教程\" class=\"headerlink\" title=\"基于 WSL 的 Charm 库安装教程\"></a><strong>基于 WSL 的 Charm 库安装教程</strong></h3><h4 id=\"1-更新系统并安装依赖\"><a href=\"#1-更新系统并安装依赖\" class=\"headerlink\" title=\"1. 更新系统并安装依赖\"></a><strong>1. 更新系统并安装依赖</strong></h4><p>应用商店下载linux后执行<code>wsl --update</code></p>\n<p>在 WSL Ubuntu 中，运行以下命令安装必要的编译工具和库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> build-essential python3 python3-dev python3-pip python3-setuptools <span class=\"token punctuation\">\\</span>\n                     libgmp-dev libssl-dev swig libpbc-dev <span class=\"token function\">git</span> <span class=\"token function\">wget</span> gcc <span class=\"token function\">make</span> m4 flex bison<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的库可以一个一个单独安装，没有就去找源码安装，下面报安装错也能再安装，这里ubuntu版本最好不要太高，openssl我的是3.0.2没问题，gmp最高，openssl，python一般会自带，python我的是python3.10</p>\n<hr>\n<h4 id=\"2-安装-PBC-库\"><a href=\"#2-安装-PBC-库\" class=\"headerlink\" title=\"2. 安装 PBC 库\"></a><strong>2. 安装 PBC 库</strong></h4><p>PBC 是 Charm 的核心依赖之一，需要手动编译安装。</p>\n<ol>\n<li><p><strong>下载源码：</strong></p>\n<p><a href=\"https://crypto.stanford.edu/pbc/download.html\">PBC Library - Pairing-Based Cryptography - Downloads</a>下载第一个</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://crypto.stanford.edu/pbc/files/pbc-0.5.14.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> pbc-0.5.14.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>编译和安装：</strong></p>\n<p>进入解压的目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"/usr/local/lib\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/ld.so.conf.d/libpbc.conf\n<span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"3-下载并安装-Charm-库\"><a href=\"#3-下载并安装-Charm-库\" class=\"headerlink\" title=\"3. 下载并安装 Charm 库\"></a><strong>3. 下载并安装 Charm 库</strong></h4><ol>\n<li><p><strong>下载源码：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/JHUISI/charm.git\n<span class=\"token builtin class-name\">cd</span> charm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>配置安装路径：</strong></p>\n<p>执行 <code>configure.sh</code> 脚本，指定 GMP 和 PBC 的安装路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>编译和安装：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>import charm</code>判断安装是否成功</p>\n</li>\n</ol>\n<hr>\n<p>报错就看报错信息，可以参考官方<a href=\"https://jhuisi.github.io/charm/install_source.html\">Platform Install Manual — Charm-Crypto 0.50 documentation</a></p>\n",
            "tags": [
                "linux",
                "bug"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/10/linux-fang-huo-qiang-gui-ze/",
            "url": "https://0xdadream.github.io/2024/11/10/linux-fang-huo-qiang-gui-ze/",
            "title": "linux防火墙规则",
            "date_published": "2024-11-10T01:25:00.000Z",
            "content_html": "<h1 id=\"linux防火墙规则\"><a href=\"#linux防火墙规则\" class=\"headerlink\" title=\"linux防火墙规则\"></a>linux防火墙规则</h1><h2 id=\"iptables\"><a href=\"#iptables\" class=\"headerlink\" title=\"iptables\"></a>iptables</h2><h4 id=\"1-查看当前防火墙规则\"><a href=\"#1-查看当前防火墙规则\" class=\"headerlink\" title=\"1. 查看当前防火墙规则\"></a>1. 查看当前防火墙规则</h4><p><strong>使用 iptables 查看规则：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-L</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将列出所有的链和规则。<code>-L</code> 参数代表列出（List）。</p>\n<p><strong>查看详细信息：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-L</span> <span class=\"token parameter variable\">-v</span> <span class=\"token parameter variable\">-n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>-v</code> 参数代表详细（Verbose），<code>-n</code> 参数代表不解析服务名称（Numeric）。</p>\n<p><strong>查看特定链的规则：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-L</span> INPUT <span class=\"token parameter variable\">-v</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-配置防火墙规则\"><a href=\"#2-配置防火墙规则\" class=\"headerlink\" title=\"2. 配置防火墙规则\"></a>2. 配置防火墙规则</h4><p><strong>添加规则允许 SSH：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-A</span> INPUT <span class=\"token parameter variable\">-p</span> tcp <span class=\"token parameter variable\">--dport</span> <span class=\"token number\">22</span> <span class=\"token parameter variable\">-j</span> ACCEPT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这条命令将添加一条规则到 <code>INPUT</code> 链，允许所有进入的 TCP 流量到达端口 22（SSH）。</p>\n<p><strong>添加规则拒绝特定 IP：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-A</span> INPUT <span class=\"token parameter variable\">-s</span> <span class=\"token number\">192.168</span>.1.100 <span class=\"token parameter variable\">-j</span> DROP<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这条命令将拒绝来自 IP 地址 <code>192.168.1.100</code> 的所有流量。</p>\n<p><strong>添加规则允许来自特定 IP 的 HTTP 访问：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-A</span> INPUT <span class=\"token parameter variable\">-p</span> tcp <span class=\"token parameter variable\">-s</span> <span class=\"token number\">192.168</span>.1.101 <span class=\"token parameter variable\">--dport</span> <span class=\"token number\">80</span> <span class=\"token parameter variable\">-j</span> ACCEPT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>添加规则允许已建立的连接：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-A</span> INPUT <span class=\"token parameter variable\">-m</span> state <span class=\"token parameter variable\">--state</span> ESTABLISHED,RELATED <span class=\"token parameter variable\">-j</span> ACCEPT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>添加规则允许出站流量：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-A</span> OUTPUT <span class=\"token parameter variable\">-j</span> ACCEPT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-删除防火墙规则\"><a href=\"#3-删除防火墙规则\" class=\"headerlink\" title=\"3. 删除防火墙规则\"></a>3. 删除防火墙规则</h4><p><strong>删除特定规则：</strong> 要删除规则，你需要知道规则的编号。使用 <code>-L --line-numbers</code> 查看规则编号：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-L</span> --line-numbers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后删除规则，例如删除编号为 3 的规则：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-D</span> INPUT <span class=\"token number\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"4-保存防火墙规则\"><a href=\"#4-保存防火墙规则\" class=\"headerlink\" title=\"4. 保存防火墙规则\"></a>4. 保存防火墙规则</h4><p><strong>保存 iptables 规则：</strong> 在 Debian/Ubuntu 上，你可以使用 <code>iptables-persistent</code> 包来保存规则：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> iptables-persistent<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在 CentOS/RHEL 上，你可以使用 <code>service</code> 或 <code>systemctl</code> 命令来保存规则：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> iptables save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl save iptables<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"5-恢复防火墙规则\"><a href=\"#5-恢复防火墙规则\" class=\"headerlink\" title=\"5. 恢复防火墙规则\"></a>5. 恢复防火墙规则</h4><p><strong>在系统启动时恢复 iptables 规则：</strong> 在 Debian/Ubuntu 上，安装 <code>iptables-persistent</code> 后，规则会自动在启动时恢复。在 CentOS/RHEL 上，你需要手动保存规则，并在 <code>/etc/rc.d/rc.local</code> 或使用 <code>systemctl</code> 配置启动脚本中添加恢复规则的命令。</p>\n<h4 id=\"6-重置防火墙规则\"><a href=\"#6-重置防火墙规则\" class=\"headerlink\" title=\"6. 重置防火墙规则\"></a>6. 重置防火墙规则</h4><p><strong>重置 iptables 到默认设置：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-F</span>\n<span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-X</span>\n<span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-F</span>\n<span class=\"token function\">sudo</span> iptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-X</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>-F</code> 代表清空规则，<code>-X</code> 代表清空用户自定义链。</p>\n<h4 id=\"7-防火墙规则的持久化\"><a href=\"#7-防火墙规则的持久化\" class=\"headerlink\" title=\"7. 防火墙规则的持久化\"></a>7. 防火墙规则的持久化</h4><p><strong>Ubuntu/Debian：</strong> 安装 <code>iptables-persistent</code> 包后，它会在 <code>/etc/iptables/rules.v4</code> 文件中保存规则。</p>\n<p><strong>CentOS/RHEL：</strong> 你可以使用 <code>iptables-services</code> 包来管理 iptables 的持久化：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> iptables-services\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> iptables\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> iptables save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"8-查看和管理系统服务\"><a href=\"#8-查看和管理系统服务\" class=\"headerlink\" title=\"8. 查看和管理系统服务\"></a>8. 查看和管理系统服务</h4><p><strong>查看所有服务：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl list-units <span class=\"token parameter variable\">--type</span><span class=\"token operator\">=</span>service<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>启动/停止服务：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl start iptables\n<span class=\"token function\">sudo</span> systemctl stop iptables<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>设置服务开机启动：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> iptables<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>禁用服务开机启动：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl disable iptables<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>以上是 Linux 防火墙规则的完整指南，包括查看、配置、删除、保存、恢复和重置防火墙规则等操作。请根据你的具体需求和 Linux 发行版进行相应的操作。</p>\n<h4 id=\"9-关闭或强制删除防火墙\"><a href=\"#9-关闭或强制删除防火墙\" class=\"headerlink\" title=\"9. 关闭或强制删除防火墙\"></a>9. 关闭或强制删除防火墙</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt-get</span> purge netfilter-persistent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">reboot</span>\n或 <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /etc/iptables <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">reboot</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"firewalld\"><a href=\"#firewalld\" class=\"headerlink\" title=\"firewalld\"></a>firewalld</h2><h4 id=\"1-Firewalld-简介\"><a href=\"#1-Firewalld-简介\" class=\"headerlink\" title=\"1. Firewalld 简介\"></a>1. Firewalld 简介</h4><p><code>Firewalld</code> 是一个动态防火墙管理工具，它提供了基于区域（zone）和服务（service）的简化配置界面，使得管理防火墙规则更加容易。它支持动态更新防火墙规则，可以在运行时添加、删除、修改规则，而不需要重新加载整个防火墙配置。</p>\n<h4 id=\"2-服务的启动、停止和状态查看\"><a href=\"#2-服务的启动、停止和状态查看\" class=\"headerlink\" title=\"2. 服务的启动、停止和状态查看\"></a>2. 服务的启动、停止和状态查看</h4><ul>\n<li><p>启动防火墙：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl start firewalld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>停止防火墙：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl stop firewalld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>设置防火墙开机启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> firewalld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>禁用防火墙开机启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl disable firewalld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看防火墙状态：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status firewalld\n<span class=\"token comment\"># 或者</span>\n<span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--state</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>查看版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"3-查看和设置默认区域\"><a href=\"#3-查看和设置默认区域\" class=\"headerlink\" title=\"3. 查看和设置默认区域\"></a>3. 查看和设置默认区域</h4><ul>\n<li><p>查看默认区域：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd --get-default-zone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看所有可用的区域：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd --get-zones<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看当前活动区域：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd --get-active-zones<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>设置默认区域：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd --set-default-zone<span class=\"token operator\">=</span>your_zone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中your_zone是你想要设置的默认区域的名称，比如public、internal、dmz等。</p>\n</li>\n</ul>\n<h4 id=\"4-使用-firewall-cmd-命令行工具进行规则配置\"><a href=\"#4-使用-firewall-cmd-命令行工具进行规则配置\" class=\"headerlink\" title=\"4. 使用 firewall-cmd 命令行工具进行规则配置\"></a>4. 使用 firewall-cmd 命令行工具进行规则配置</h4><ul>\n<li><p>添加规则开放端口：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp <span class=\"token parameter variable\">--permanent</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>添加规则允许服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>public --add-service<span class=\"token operator\">=</span>http <span class=\"token parameter variable\">--permanent</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>删除规则：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>public --remove-service<span class=\"token operator\">=</span>http <span class=\"token parameter variable\">--permanent</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"5-重新加载防火墙配置\"><a href=\"#5-重新加载防火墙配置\" class=\"headerlink\" title=\"5. 重新加载防火墙配置\"></a>5. 重新加载防火墙配置</h4><p>为了使永久配置生效，需要重新加载 <code>firewalld</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--reload</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"6-查询已开放的端口、已允许的服务\"><a href=\"#6-查询已开放的端口、已允许的服务\" class=\"headerlink\" title=\"6. 查询已开放的端口、已允许的服务\"></a>6. 查询已开放的端口、已允许的服务</h4><ul>\n<li><p>查询特定区域支持的所有特性：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>zone_name --list-all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中，zone_name是你要查询的区域的名称。</p>\n</li>\n<li><p>查询特定区域支持的所有服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>zone_name --list-services<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查询特定区域开放的端口：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>zone_name --list-ports<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"7-绑定接口到特定区域\"><a href=\"#7-绑定接口到特定区域\" class=\"headerlink\" title=\"7. 绑定接口到特定区域\"></a>7. 绑定接口到特定区域</h4><ul>\n<li><p>永久更改接口的区域绑定：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--zone</span><span class=\"token operator\">=</span>home --add-interface<span class=\"token operator\">=</span>eth0 <span class=\"token parameter variable\">--permanent</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>为了使永久更改生效，需要重新加载firewalld</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd <span class=\"token parameter variable\">--reload</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>再次验证更改：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> firewall-cmd --get-active-zones<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/06/flask-jiao-cheng/",
            "url": "https://0xdadream.github.io/2024/11/06/flask-jiao-cheng/",
            "title": "flask教程",
            "date_published": "2024-11-06T01:25:00.000Z",
            "content_html": "<h1 id=\"flask教程\"><a href=\"#flask教程\" class=\"headerlink\" title=\"flask教程\"></a>flask教程</h1><h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><h3 id=\"中型\"><a href=\"#中型\" class=\"headerlink\" title=\"中型\"></a>中型</h3><pre class=\"line-numbers language-dtd\" data-language=\"dtd\"><code class=\"language-dtd\">my_flask_project/\n├── app/                     # 核心应用文件夹\n│   ├── __init__.py          # 应用初始化\n│   ├── routes.py            # 路由定义\n│   ├── models.py            # 数据模型（如需要）\n│   ├── templates/           # HTML 模板\n│   │   └── index.html\n│   └── static/              # 静态文件\n│       ├── css/\n│       │   └── style.css\n│       └── js/\n│           └── script.js\n├── config.py                # 配置文件\n├── run.py                   # 启动文件\n└── requirements.txt         # 依赖文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"app-init-py\"><a href=\"#app-init-py\" class=\"headerlink\" title=\"app/__init__.py\"></a><code>app/__init__.py</code></h4><p>在 <code>__init__.py</code> 中创建并初始化 Flask 应用，加载配置，并从 <code>routes.py</code> 注册路由。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>from_object<span class=\"token punctuation\">(</span><span class=\"token string\">'config.Config'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 加载配置</span>\n\n    <span class=\"token keyword\">with</span> app<span class=\"token punctuation\">.</span>app_context<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 导入并注册路由</span>\n        <span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> routes\n        <span class=\"token keyword\">return</span> app<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>说明</strong>：<code>create_app</code> 函数用于创建和配置应用实例。<code>app.app_context()</code> 确保在应用上下文中导入路由。</li>\n</ul>\n<h4 id=\"app-routes-py\"><a href=\"#app-routes-py\" class=\"headerlink\" title=\"app/routes.py\"></a><code>app/routes.py</code></h4><p>定义项目的路由，所有路由相关的逻辑放在这个文件中。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> render_template<span class=\"token punctuation\">,</span> current_app <span class=\"token keyword\">as</span> app\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>说明</strong>：<code>app.route('/')</code> 是根路径的路由，返回 <code>index.html</code> 模板页面。</li>\n</ul>\n<h4 id=\"app-models-py-（可选）\"><a href=\"#app-models-py-（可选）\" class=\"headerlink\" title=\"app/models.py （可选）\"></a><code>app/models.py</code> （可选）</h4><p>如果项目需要数据库模型，可以在此文件中定义。例如：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask_sqlalchemy <span class=\"token keyword\">import</span> SQLAlchemy\n\ndb <span class=\"token operator\">=</span> SQLAlchemy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    username <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"config-py\"><a href=\"#config-py\" class=\"headerlink\" title=\"config.py\"></a><code>config.py</code></h4><p>配置文件，用于管理全局配置（例如密钥、数据库 URI 等）。将敏感信息存储在环境变量中更安全。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">:</span>\n    SECRET_KEY <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'SECRET_KEY'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">'your_secret_key'</span>\n    SQLALCHEMY_DATABASE_URI <span class=\"token operator\">=</span> <span class=\"token string\">'sqlite:///site.db'</span>\n    SQLALCHEMY_TRACK_MODIFICATIONS <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"app-templates-index-html\"><a href=\"#app-templates-index-html\" class=\"headerlink\" title=\"app/templates/index.html\"></a><code>app/templates/index.html</code></h4><p>HTML 模板文件示例。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>My Flask App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ url_for('static', filename='css/style.css') }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Welcome to My Flask App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Hello, Flask with modular structure!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ url_for('static', filename='js/script.js') }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"app-static-css-style-css\"><a href=\"#app-static-css-style-css\" class=\"headerlink\" title=\"app/static/css/style.css\"></a><code>app/static/css/style.css</code></h4><p>简单的 CSS 文件，用于为页面增加样式。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* static/css/style.css */</span>\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #f0f0f0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"app-static-js-script-js\"><a href=\"#app-static-js-script-js\" class=\"headerlink\" title=\"app/static/js/script.js\"></a><code>app/static/js/script.js</code></h4><p>简单的 JavaScript 文件。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// static/js/script.js</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to My Flask App with modular structure!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"run-py\"><a href=\"#run-py\" class=\"headerlink\" title=\"run.py\"></a><code>run.py</code></h4><p>项目的启动文件，通过调用 <code>create_app</code> 函数启动应用。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> app <span class=\"token keyword\">import</span> create_app\n\napp <span class=\"token operator\">=</span> create_app<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>说明</strong>：<code>run.py</code> 是整个项目的入口文件，使用 <code>app.run(debug=True)</code> 启动应用程序。</li>\n</ul>\n<h4 id=\"requirements-txt\"><a href=\"#requirements-txt\" class=\"headerlink\" title=\"requirements.txt\"></a><code>requirements.txt</code></h4><p>包含项目依赖。</p>\n<h3 id=\"大型\"><a href=\"#大型\" class=\"headerlink\" title=\"大型\"></a>大型</h3><pre class=\"line-numbers language-dtd\" data-language=\"dtd\"><code class=\"language-dtd\">my_flask_project/\n├── app/\n│   ├── __init__.py           # 初始化应用程序和配置\n│   ├── routes.py             # 路由定义\n│   ├── models.py             # 数据库模型定义\n│   ├── templates/            # HTML 模板文件\n│   │   └── base.html\n│   ├── static/               # 静态文件（CSS、JS、图片等）\n│   │   ├── css/\n│   │   │   └── style.css\n│   │   ├── js/\n│   │   └── images/\n│   └── blueprints/           # 各个功能模块的蓝图\n│       ├── __init__.py\n│       ├── user/             # 用户模块\n│       │   ├── __init__.py\n│       │   ├── routes.py\n│       │   └── templates/\n│       └── admin/            # 管理员模块\n│           ├── __init__.py\n│           ├── routes.py\n│           └── templates/\n├── migrations/               # 数据库迁移文件（使用 Flask-Migrate）\n├── tests/                    # 测试代码\n│   ├── __init__.py\n│   └── test_app.py\n├── config.py                 # 配置文件\n├── manage.py                 # 启动、管理和迁移命令\n└── requirements.txt          # 依赖包<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>**<code>app/</code>**：主要应用程序文件夹，包含所有核心代码。</p>\n<ul>\n<li>**<code>__init__.py</code>**：初始化 Flask 应用、加载配置和注册蓝图。</li>\n<li>**<code>routes.py</code>**：定义全局路由。</li>\n<li>**<code>models.py</code>**：定义数据库模型。</li>\n<li>**<code>templates/</code>**：存储 HTML 模板。</li>\n<li>**<code>static/</code>**：存储静态文件，如 CSS、JavaScript 和图片。</li>\n<li>**<code>blueprints/</code>**：存储不同功能模块的蓝图，每个模块可以有自己的 <code>routes.py</code> 和 <code>templates/</code> 文件夹。</li>\n</ul>\n<p>**<code>migrations/</code>**：数据库迁移文件（如使用 Flask-Migrate 时生成）。</p>\n<p>**<code>tests/</code>**：测试文件夹，用于单元测试或集成测试。</p>\n<p>**<code>config.py</code>**：存储配置文件，如数据库连接和应用的全局设置。</p>\n<p>**<code>manage.py</code>**：用于管理项目的文件，可添加自定义命令，如启动服务器、初始化数据库等。</p>\n<p>**<code>requirements.txt</code>**：记录项目的所有依赖包。</p>\n</li>\n</ul>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><h3 id=\"1-基本路由\"><a href=\"#1-基本路由\" class=\"headerlink\" title=\"1. 基本路由\"></a>1. 基本路由</h3><p>最简单的路由是将一个 URL 映射到一个视图函数。可以使用 <code>@app.route()</code> 装饰器来定义路由。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Welcome to the homepage!\"</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">about</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"This is the about page.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>@app.route('/')</code>：当用户访问根路径（如 <code>http://localhost:5000/</code>）时，执行 <code>home</code> 函数。</li>\n<li><code>@app.route('/about')</code>：访问 <code>/about</code> 时，执行 <code>about</code> 函数。</li>\n</ul>\n<h3 id=\"2-动态路由\"><a href=\"#2-动态路由\" class=\"headerlink\" title=\"2. 动态路由\"></a>2. 动态路由</h3><p>可以在路由中添加动态部分，用来接收 URL 中的参数。动态部分用尖括号 <code>&lt;...&gt;</code> 表示，Flask 会自动将 URL 中的值传递给视图函数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/&lt;username&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>访问 <code>/user/john</code> 时，会输出 <code>Hello, john!</code>。</li>\n<li><code>&lt;username&gt;</code> 是一个动态参数，视图函数 <code>show_user</code> 将接收 <code>username</code> 的值。</li>\n</ul>\n<h4 id=\"指定数据类型\"><a href=\"#指定数据类型\" class=\"headerlink\" title=\"指定数据类型\"></a>指定数据类型</h4><p>默认情况下，Flask 会将 URL 参数作为字符串处理。如果需要其他类型的数据，可以在尖括号内指定：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/post/&lt;int:post_id&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_post</span><span class=\"token punctuation\">(</span>post_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Post ID is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>post_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>&lt;int:post_id&gt;</code> 指定了 <code>post_id</code> 必须是整数，访问 <code>/post/5</code> 会返回 <code>Post ID is 5</code>。</li>\n<li>常用的数据类型有：<ul>\n<li><code>&lt;int:variable&gt;</code>：整数</li>\n<li><code>&lt;float:variable&gt;</code>：浮点数</li>\n<li><code>&lt;path:variable&gt;</code>：字符串（允许包含 <code>/</code>）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-多种请求方法\"><a href=\"#3-多种请求方法\" class=\"headerlink\" title=\"3. 多种请求方法\"></a>3. 多种请求方法</h3><p>默认情况下，Flask 路由只响应 <code>GET</code> 请求。如果需要处理其他 HTTP 方法（如 <code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等），可以通过 <code>methods</code> 参数指定。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/submit'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Form submitted!\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Please submit the form.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>methods=['GET', 'POST']</code>：允许 <code>submit</code> 路由响应 <code>GET</code> 和 <code>POST</code> 请求。</li>\n<li>使用 <code>request.method</code> 判断请求类型并做不同的处理。</li>\n</ul>\n<h3 id=\"4-路由别名（URL-别名）\"><a href=\"#4-路由别名（URL-别名）\" class=\"headerlink\" title=\"4. 路由别名（URL 别名）\"></a>4. 路由别名（URL 别名）</h3><p>可以使用 <code>url_for</code> 函数生成路由的 URL，避免硬编码 URL。在视图函数上使用 <code>endpoint</code> 参数，可以给路由一个别名，用于简化 <code>url_for</code> 函数调用。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> url_for\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/profile/&lt;username&gt;'</span><span class=\"token punctuation\">,</span> endpoint<span class=\"token operator\">=</span><span class=\"token string\">'user_profile'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">profile</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"User: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n\n<span class=\"token comment\"># 使用 url_for 动态生成 URL</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/redirect_to_profile'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">redirect_to_profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'user_profile'</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span><span class=\"token string\">'john'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>访问 <code>/redirect_to_profile</code> 会重定向到 <code>/profile/john</code>。</li>\n</ul>\n<h3 id=\"5-重定向与错误处理\"><a href=\"#5-重定向与错误处理\" class=\"headerlink\" title=\"5. 重定向与错误处理\"></a>5. 重定向与错误处理</h3><p>可以通过 <code>redirect</code> 实现重定向，或用 <code>abort</code> 函数处理错误。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> redirect<span class=\"token punctuation\">,</span> abort\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/old-url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">old_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 重定向到新的 URL</span>\n    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'new_url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/new-url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">new_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"This is the new URL.\"</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/secret'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">secret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    abort<span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 返回 403 错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>redirect(url_for('new_url'))</code>：将用户重定向到 <code>new_url</code> 视图。</li>\n<li><code>abort(403)</code>：返回 403 错误页面。</li>\n</ul>\n<h3 id=\"6-带查询参数的路由\"><a href=\"#6-带查询参数的路由\" class=\"headerlink\" title=\"6. 带查询参数的路由\"></a>6. 带查询参数的路由</h3><p>查询参数一般附加在 URL 的末尾，例如 <code>http://localhost:5000/search?query=flask</code>。可以通过 <code>request.args</code> 获取这些参数。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/search'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    query <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Search results for: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>request.args.get('query')</code>：获取查询参数 <code>query</code> 的值。</li>\n</ul>\n<h3 id=\"7-路由分组（蓝图）\"><a href=\"#7-路由分组（蓝图）\" class=\"headerlink\" title=\"7. 路由分组（蓝图）\"></a>7. 路由分组（蓝图）</h3><p>如果应用较大，可以将路由划分为不同的模块（称为“蓝图”），以提高代码组织性。以下是一个简单的蓝图示例。</p>\n<h4 id=\"创建蓝图文件-app-user-py：\"><a href=\"#创建蓝图文件-app-user-py：\" class=\"headerlink\" title=\"创建蓝图文件 app/user.py：\"></a>创建蓝图文件 <code>app/user.py</code>：</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Blueprint\n\nuser_bp <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@user_bp<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/&lt;username&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">profile</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"User Profile for </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"注册蓝图到应用中-app-init-py：\"><a href=\"#注册蓝图到应用中-app-init-py：\" class=\"headerlink\" title=\"注册蓝图到应用中 app/__init__.py：\"></a>注册蓝图到应用中 <code>app/__init__.py</code>：</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>user <span class=\"token keyword\">import</span> user_bp\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>user_bp<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 注册蓝图</span>\n\n    <span class=\"token keyword\">return</span> app<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>url_prefix='/user'</code>：访问 <code>/user/&lt;username&gt;</code> 时，会调用 <code>user_bp</code> 蓝图中的 <code>profile</code> 路由。</li>\n<li>蓝图让大型应用代码更清晰。</li>\n</ul>\n<h3 id=\"8-格式化\"><a href=\"#8-格式化\" class=\"headerlink\" title=\"8. 格式化\"></a>8. 格式化</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> jsonify\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">json_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Flask\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2.0\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-视图函数的装饰器\"><a href=\"#9-视图函数的装饰器\" class=\"headerlink\" title=\"9.视图函数的装饰器\"></a>9.视图函数的装饰器</h3><p>除了 @app.route，Flask 还支持其他装饰器，用于实现更复杂的功能。</p>\n<ul>\n<li>**<code>@app.before_request</code>**：在每个请求处理之前运行的函数。</li>\n<li>**<code>@app.after_request</code>**：在每个请求处理之后运行的函数。</li>\n<li>**<code>@app.teardown_request</code>**：在请求结束后运行的函数，用于清理工作。</li>\n</ul>\n<p>示例装饰器使用：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>before_request</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">before_request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Before request'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>after_request</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">after_request</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'After request'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> response\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>teardown_request</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">teardown_request</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Teardown request'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"完整示例\"><a href=\"#完整示例\" class=\"headerlink\" title=\"完整示例\"></a>完整示例</h3><p>以下是一个包含多种路由定义方式的完整示例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> redirect<span class=\"token punctuation\">,</span> url_for<span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">,</span> jsonify\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Welcome to the homepage!\"</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/&lt;username&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_user</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\">!\"</span></span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/post/&lt;int:post_id&gt;'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_post</span><span class=\"token punctuation\">(</span>post_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Post ID is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>post_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/submit'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Form submitted!\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Please submit the form.\"</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/search'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    query <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Search results for: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>query<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">json_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Flask\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2.0\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/old-url'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">old_url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/secret'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">secret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    abort<span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Flask-模板渲染\"><a href=\"#Flask-模板渲染\" class=\"headerlink\" title=\"Flask 模板渲染\"></a>Flask 模板渲染</h2><p>在 Flask 中，模板渲染是生成动态 HTML 页面的一种方法。Flask 使用 Jinja2 模板引擎来帮助你在 HTML 中插入变量、控制结构（如条件判断、循环）等内容，以便动态生成页面。</p>\n<h3 id=\"1-设置模板文件夹\"><a href=\"#1-设置模板文件夹\" class=\"headerlink\" title=\"1. 设置模板文件夹\"></a>1. 设置模板文件夹</h3><p>在 Flask 项目中，默认的模板文件夹是 <code>templates</code>，建议将所有 HTML 模板文件放在这个文件夹中。Flask 会自动寻找并渲染该目录中的模板文件。</p>\n<h3 id=\"2-创建基本-HTML-模板\"><a href=\"#2-创建基本-HTML-模板\" class=\"headerlink\" title=\"2. 创建基本 HTML 模板\"></a>2. 创建基本 HTML 模板</h3><p>假设我们在 <code>templates/index.html</code> 中创建了一个基本的 HTML 模板文件：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- templates/index.html --&gt;</span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>{{ title }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>{{ heading }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>{{ content }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这个模板中：</p>\n<ul>\n<li><code>{{ title }}</code>、<code>{{ heading }}</code> 和 <code>{{ content }}</code> 是变量占位符，在渲染模板时会被 Flask 替换成实际的值。</li>\n</ul>\n<h3 id=\"3-渲染模板\"><a href=\"#3-渲染模板\" class=\"headerlink\" title=\"3. 渲染模板\"></a>3. 渲染模板</h3><p>在 Flask 中，可以使用 <code>render_template</code> 函数来渲染 HTML 模板，并将变量传递给模板。下面是一个简单的视图函数，渲染上面的 <code>index.html</code> 模板。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"Home Page\"</span><span class=\"token punctuation\">,</span> heading<span class=\"token operator\">=</span><span class=\"token string\">\"Welcome to My Website\"</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"This is the home page content.\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>render_template('index.html', ...)</code>：<code>render_template</code> 函数会在 <code>templates</code> 文件夹中找到 <code>index.html</code> 文件，并将指定变量传入模板。</li>\n<li><code>title=\"Home Page\"</code>：将 <code>title</code> 变量的值传入模板，模板中的 <code>{{ title }}</code> 将被替换为 <code>Home Page</code>。</li>\n</ul>\n<h3 id=\"4-模板变量和控制结构\"><a href=\"#4-模板变量和控制结构\" class=\"headerlink\" title=\"4. 模板变量和控制结构\"></a>4. 模板变量和控制结构</h3><p>Jinja2 模板支持在 HTML 中使用变量、控制结构（条件、循环）等操作。</p>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>使用双大括号 <code>{{ ... }}</code> 在模板中插入变量。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Hello, {{ name }}!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h4><p>使用 <code>{% if ... %}` 和 `{% endif %}</code> 添加条件逻辑：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">{% if user_is_logged_in %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Welcome back, {{ username }}!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n{% else %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Please log in to access your account.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n{% endif %}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h4><p>使用 <code>{% for ... in ... %}` 和 `{% endfor %}</code> 添加循环：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    {% for item in items %}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>{{ item }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    {% endfor %}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-继承与块\"><a href=\"#5-继承与块\" class=\"headerlink\" title=\"5. 继承与块\"></a>5. 继承与块</h3><p>Jinja2 支持模板继承，可以创建一个基础模板供其他模板继承。可以将公共结构（如导航栏、页脚等）放在基础模板中，然后在子模板中覆盖特定部分。</p>\n<h4 id=\"基础模板-templates-base-html\"><a href=\"#基础模板-templates-base-html\" class=\"headerlink\" title=\"基础模板 templates/base.html\"></a>基础模板 <code>templates/base.html</code></h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>{% block title %}My Website{% endblock %}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>My Website<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">&gt;</span></span>\n        {% block content %}{% endblock %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>footer</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>© 2024 My Website<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>footer</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>{% block title %}` 和 `{% block content %}` 是块占位符，子模板可以覆盖这些内容。\n\n#### 子模板 `templates/index.html`\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">{% extends \"base.html\" %}\n\n{% block title %}Home Page{% endblock %}\n\n{% block content %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>Welcome to the Home Page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>This is some content specific to the home page.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n{% endblock %}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n- `{% extends \"base.html\" %}` 表示继承 `base.html` 模板。\n- `{% block title %}Home Page{% endblock %}</code>：覆盖了基础模板中的 <code>title</code> 块。</li>\n<li><code>{% block content %}...{% endblock %}</code>：覆盖了基础模板中的 <code>content</code> 块。</li>\n</ul>\n<h3 id=\"6-使用静态文件\"><a href=\"#6-使用静态文件\" class=\"headerlink\" title=\"6. 使用静态文件\"></a>6. 使用静态文件</h3><p>Flask 默认将静态文件放在 <code>static</code> 文件夹中，例如 CSS、JavaScript 文件等。在模板中，可以通过 <code>url_for('static', filename='...')</code> 生成静态文件的 URL。</p>\n<p>假设有一个 CSS 文件 <code>static/style.css</code>，可以在模板中引入：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- 在 base.html 中引入 CSS 文件 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ url_for('static', filename='style.css') }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-完整示例\"><a href=\"#7-完整示例\" class=\"headerlink\" title=\"7. 完整示例\"></a>7. 完整示例</h3><p>以下是包含基础模板、变量、循环、条件的完整 Flask 应用示例。</p>\n<h4 id=\"项目结构-1\"><a href=\"#项目结构-1\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">my_flask_app<span class=\"token operator\">/</span>\n├── app<span class=\"token punctuation\">.</span>py\n├── templates<span class=\"token operator\">/</span>\n│   ├── <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span>html\n│   ├── index<span class=\"token punctuation\">.</span>html\n└── <span class=\"token keyword\">static</span><span class=\"token operator\">/</span>\n    └── style<span class=\"token punctuation\">.</span>css<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"app-py\"><a href=\"#app-py\" class=\"headerlink\" title=\"app.py\"></a><code>app.py</code></h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Item 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Item 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Item 3\"</span><span class=\"token punctuation\">]</span>\n    user_is_logged_in <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"Home Page\"</span><span class=\"token punctuation\">,</span> items<span class=\"token operator\">=</span>items<span class=\"token punctuation\">,</span> user_is_logged_in<span class=\"token operator\">=</span>user_is_logged_in<span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span><span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"templates-base-html\"><a href=\"#templates-base-html\" class=\"headerlink\" title=\"templates/base.html\"></a><code>templates/base.html</code></h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>{% block title %}My Website{% endblock %}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ url_for('static', filename='style.css') }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>My Website<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>header</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">&gt;</span></span>\n        {% block content %}{% endblock %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>footer</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>© 2024 My Website<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>footer</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"templates-index-html\"><a href=\"#templates-index-html\" class=\"headerlink\" title=\"templates/index.html\"></a><code>templates/index.html</code></h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">{% extends \"base.html\" %}\n\n{% block title %}Home Page{% endblock %}\n\n{% block content %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>Welcome to the Home Page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n    {% if user_is_logged_in %}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Welcome back, {{ username }}!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    {% else %}\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Please log in to access your account.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n    {% endif %}\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n        {% for item in items %}\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>{{ item }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n        {% endfor %}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n{% endblock %}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"static-style-css\"><a href=\"#static-style-css\" class=\"headerlink\" title=\"static/style.css\"></a><code>static/style.css</code></h4><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 示例样式 */</span>\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">header</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">footer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.5em<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Flask-表单处理\"><a href=\"#Flask-表单处理\" class=\"headerlink\" title=\"Flask 表单处理\"></a>Flask 表单处理</h2><p>在 Flask 中，表单处理是一个常见的功能，它涉及接收用户输入、验证数据以及相应地进行处理。Flask 提供了 <code>Flask-WTF</code> 扩展，使得表单的创建、验证和处理变得更加简单和强大。下面将详细介绍如何在 Flask 中处理表单，包括安装 Flask-WTF、创建表单、验证表单、显示表单错误和处理表单数据。</p>\n<h3 id=\"1-安装-Flask-WTF\"><a href=\"#1-安装-Flask-WTF\" class=\"headerlink\" title=\"1. 安装 Flask-WTF\"></a>1. 安装 Flask-WTF</h3><p>在开始之前，你需要确保安装了 <code>Flask-WTF</code>。可以通过 <code>pip</code> 进行安装：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> Flask-WTF<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-创建-Flask-应用\"><a href=\"#2-创建-Flask-应用\" class=\"headerlink\" title=\"2. 创建 Flask 应用\"></a>2. 创建 Flask 应用</h3><p>创建一个简单的 Flask 应用并设置基本配置。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template\n<span class=\"token keyword\">from</span> flask_wtf <span class=\"token keyword\">import</span> FlaskForm\n<span class=\"token keyword\">from</span> wtforms <span class=\"token keyword\">import</span> StringField<span class=\"token punctuation\">,</span> SubmitField\n<span class=\"token keyword\">from</span> wtforms<span class=\"token punctuation\">.</span>validators <span class=\"token keyword\">import</span> DataRequired\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'SECRET_KEY'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'your_secret_key'</span>  <span class=\"token comment\"># 设置安全密钥</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-创建表单类\"><a href=\"#3-创建表单类\" class=\"headerlink\" title=\"3. 创建表单类\"></a>3. 创建表单类</h3><p>使用 <code>Flask-WTF</code> 创建表单类，定义所需的字段和验证规则。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyForm</span><span class=\"token punctuation\">(</span>FlaskForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    username <span class=\"token operator\">=</span> StringField<span class=\"token punctuation\">(</span><span class=\"token string\">'Username'</span><span class=\"token punctuation\">,</span> validators<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>DataRequired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    submit <span class=\"token operator\">=</span> SubmitField<span class=\"token punctuation\">(</span><span class=\"token string\">'Submit'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>StringField</code>：表示一个文本输入字段。</li>\n<li><code>DataRequired()</code>：确保字段不为空。</li>\n</ul>\n<h3 id=\"4-渲染表单\"><a href=\"#4-渲染表单\" class=\"headerlink\" title=\"4. 渲染表单\"></a>4. 渲染表单</h3><p>在视图函数中实例化表单并传递给模板。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    form <span class=\"token operator\">=</span> MyForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>validate_on_submit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 验证表单数据</span>\n        username <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>data  <span class=\"token comment\"># 获取输入的用户名</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\">!'</span></span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> form<span class=\"token operator\">=</span>form<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>validate_on_submit()</code>：检查请求方法是否为 POST 并验证表单数据。</li>\n<li><code>form.username.data</code>：访问用户输入的值。</li>\n</ul>\n<h3 id=\"5-创建模板\"><a href=\"#5-创建模板\" class=\"headerlink\" title=\"5. 创建模板\"></a>5. 创建模板</h3><p>在 <code>templates</code> 文件夹中创建一个模板 <code>index.html</code>，用于显示表单。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- templates/index.html --&gt;</span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Flask Form Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Enter your username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        {{ form.hidden_tag() }}  <span class=\"token comment\">&lt;!-- 防止 CSRF 攻击 --&gt;</span>\n        {{ form.username.label }} {{ form.username(size=20) }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n        {% for error in form.username.errors %}\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>[{{ error }}]<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n        {% endfor %}\n        {{ form.submit() }}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>{{ form.hidden_tag() }}</code>：生成隐藏的 CSRF 令牌，增强安全性。</li>\n<li>使用 <code>{% for error in form.username.errors %}</code> 循环显示字段的验证错误。</li>\n</ul>\n<h3 id=\"6-处理表单错误\"><a href=\"#6-处理表单错误\" class=\"headerlink\" title=\"6. 处理表单错误\"></a>6. 处理表单错误</h3><p>如果表单验证失败，Flask-WTF 会自动将错误信息存储在字段的 <code>errors</code> 属性中。在模板中，可以通过条件判断显示相应的错误消息。</p>\n<h3 id=\"7-完整示例-1\"><a href=\"#7-完整示例-1\" class=\"headerlink\" title=\"7. 完整示例\"></a>7. 完整示例</h3><p>以下是一个完整的 Flask 应用示例，展示了如何使用 Flask-WTF 处理表单。</p>\n<h4 id=\"项目结构-2\"><a href=\"#项目结构-2\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">my_flask_app/\n├── app.py                   <span class=\"token comment\"># Flask 应用主文件</span>\n└── templates/\n    └── index.html          <span class=\"token comment\"># 表单模板</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"app-py-1\"><a href=\"#app-py-1\" class=\"headerlink\" title=\"app.py\"></a><code>app.py</code></h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">码<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> render_template\n<span class=\"token keyword\">from</span> flask_wtf <span class=\"token keyword\">import</span> FlaskForm\n<span class=\"token keyword\">from</span> wtforms <span class=\"token keyword\">import</span> StringField<span class=\"token punctuation\">,</span> SubmitField\n<span class=\"token keyword\">from</span> wtforms<span class=\"token punctuation\">.</span>validators <span class=\"token keyword\">import</span> DataRequired\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'SECRET_KEY'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'your_secret_key'</span>  <span class=\"token comment\"># 设置安全密钥</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyForm</span><span class=\"token punctuation\">(</span>FlaskForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    username <span class=\"token operator\">=</span> StringField<span class=\"token punctuation\">(</span><span class=\"token string\">'Username'</span><span class=\"token punctuation\">,</span> validators<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>DataRequired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    submit <span class=\"token operator\">=</span> SubmitField<span class=\"token punctuation\">(</span><span class=\"token string\">'Submit'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    form <span class=\"token operator\">=</span> MyForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>validate_on_submit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 验证表单数据</span>\n        username <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>data  <span class=\"token comment\"># 获取输入的用户名</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span></span><span class=\"token string\">!'</span></span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span> form<span class=\"token operator\">=</span>form<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"templates-index-html-1\"><a href=\"#templates-index-html-1\" class=\"headerlink\" title=\"templates/index.html\"></a><code>templates/index.html</code></h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>Flask Form Example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Enter your username<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        {{ form.hidden_tag() }}  <span class=\"token comment\">&lt;!-- 防止 CSRF 攻击 --&gt;</span>\n        {{ form.username.label }} {{ form.username(size=20) }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n        {% for error in form.username.errors %}\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>[{{ error }}]<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span>\n        {% endfor %}\n        {{ form.submit() }}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8-添加更多字段和验证器\"><a href=\"#8-添加更多字段和验证器\" class=\"headerlink\" title=\"8. 添加更多字段和验证器\"></a>8. 添加更多字段和验证器</h3><p>可以使用 <code>WTForms</code> 提供的多种字段类型和验证器来扩展表单功能。例如，可以添加 <code>EmailField</code>、<code>PasswordField</code>、<code>SelectField</code> 等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> wtforms <span class=\"token keyword\">import</span> EmailField<span class=\"token punctuation\">,</span> PasswordField<span class=\"token punctuation\">,</span> SelectField\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtendedForm</span><span class=\"token punctuation\">(</span>FlaskForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    username <span class=\"token operator\">=</span> StringField<span class=\"token punctuation\">(</span><span class=\"token string\">'Username'</span><span class=\"token punctuation\">,</span> validators<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>DataRequired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    email <span class=\"token operator\">=</span> EmailField<span class=\"token punctuation\">(</span><span class=\"token string\">'Email'</span><span class=\"token punctuation\">,</span> validators<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>DataRequired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    password <span class=\"token operator\">=</span> PasswordField<span class=\"token punctuation\">(</span><span class=\"token string\">'Password'</span><span class=\"token punctuation\">,</span> validators<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>DataRequired<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    options <span class=\"token operator\">=</span> SelectField<span class=\"token punctuation\">(</span><span class=\"token string\">'Options'</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opt1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Option 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'opt2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Option 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    submit <span class=\"token operator\">=</span> SubmitField<span class=\"token punctuation\">(</span><span class=\"token string\">'Submit'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-处理文件上传\"><a href=\"#9-处理文件上传\" class=\"headerlink\" title=\"9. 处理文件上传\"></a>9. 处理文件上传</h3><p>Flask-WTF 也支持文件上传，可以使用 <code>FileField</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> wtforms <span class=\"token keyword\">import</span> FileField\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UploadForm</span><span class=\"token punctuation\">(</span>FlaskForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> FileField<span class=\"token punctuation\">(</span><span class=\"token string\">'File'</span><span class=\"token punctuation\">)</span>\n    submit <span class=\"token operator\">=</span> SubmitField<span class=\"token punctuation\">(</span><span class=\"token string\">'Upload'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/upload'</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">upload_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    form <span class=\"token operator\">=</span> UploadForm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> form<span class=\"token punctuation\">.</span>validate_on_submit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> form<span class=\"token punctuation\">.</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>data\n        <span class=\"token comment\"># 处理文件上传</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'File </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">}</span></span><span class=\"token string\"> uploaded successfully!'</span></span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'upload.html'</span><span class=\"token punctuation\">,</span> form<span class=\"token operator\">=</span>form<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"10-保护表单安全\"><a href=\"#10-保护表单安全\" class=\"headerlink\" title=\"10. 保护表单安全\"></a>10. 保护表单安全</h3><p>使用 <code>SECRET_KEY</code> 保护表单，防止 CSRF 攻击，确保所有表单都使用 <code>form.hidden_tag()</code> 生成 CSRF 令牌。</p>\n<h2 id=\"出现找不到渲染文件index-html\"><a href=\"#出现找不到渲染文件index-html\" class=\"headerlink\" title=\"出现找不到渲染文件index.html\"></a>出现找不到渲染文件index.html</h2><p>检查目录结构，添加这个template_folder=’app/templates’创建框架</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">app <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">,</span> template_folder<span class=\"token operator\">=</span><span class=\"token string\">'app/templates'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> render_template<span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>直接点说python需要从你的路由所在路径找起， template_folder就是指定路径，加入你的路由在app文件夹下，不用指定路径就能直接找到，在外面，例如和app同级，就可以写路径为<code>.app/templates</code>，记住最重要的是你的路由所在位置算起。</p>\n",
            "tags": [
                "教程",
                "python"
            ]
        }
    ]
}