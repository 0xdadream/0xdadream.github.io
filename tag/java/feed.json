{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦 • All posts by \"java\" tag",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2024/08/15/java-ban-ben/",
            "url": "https://0xdadream.github.io/2024/08/15/java-ban-ben/",
            "title": "Java版本",
            "date_published": "2024-08-14T18:25:00.000Z",
            "content_html": "<h1 id=\"Java版本\"><a href=\"#Java版本\" class=\"headerlink\" title=\"Java版本\"></a>Java版本</h1><p>理解 Java 的版本号、JDK（Java Development Kit），以及相关的概念。下面是对这些概念的详细解释，以及它们之间的区别和作用。</p>\n<h2 id=\"1-Java-版本号\"><a href=\"#1-Java-版本号\" class=\"headerlink\" title=\"1. Java 版本号\"></a>1. Java 版本号</h2><p>Java 版本号标识了 Java 语言和平台的特定版本，每个版本都引入了新的特性、改进和修复。Java 版本号的格式通常是 **<code>&lt;主版本&gt;.&lt;次版本&gt;.&lt;更新版本&gt;</code>**。</p>\n<h4 id=\"版本号的构成\"><a href=\"#版本号的构成\" class=\"headerlink\" title=\"版本号的构成\"></a>版本号的构成</h4><ul>\n<li><strong>主版本</strong>:<ul>\n<li>标识大的版本更新。主版本通常代表语言、平台或 API 级别的重大变化。例如，Java 8、Java 11、Java 17 等都是主版本。</li>\n<li>Java 版本号从 1.x 系列（如 1.0、1.2、1.4、1.5）过渡到直接使用主版本号（如 8、11、17），1.5 对应的是 Java 5。</li>\n</ul>\n</li>\n<li><strong>次版本</strong>:<ul>\n<li>次版本通常是更细粒度的更新，可能引入一些小的特性、性能改进或者 API 变化。</li>\n</ul>\n</li>\n<li><strong>更新版本</strong>:<ul>\n<li>更新版本通常是针对安全性和漏洞修复的补丁版本。例如，Java 11.0.2 代表 Java 11 的第二次更新。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-JDK（Java-Development-Kit）\"><a href=\"#2-JDK（Java-Development-Kit）\" class=\"headerlink\" title=\"2. JDK（Java Development Kit）\"></a>2. JDK（Java Development Kit）</h2><p><strong>JDK</strong> 是开发 Java 应用程序的工具包，它包含了一系列工具、库和编译器，用于开发、编译、调试和运行 Java 应用程序。JDK 是 Java 的核心组件之一，也是每个 Java 开发者必须安装的工具。</p>\n<h4 id=\"JDK-的主要组成部分\"><a href=\"#JDK-的主要组成部分\" class=\"headerlink\" title=\"JDK 的主要组成部分\"></a>JDK 的主要组成部分</h4><ul>\n<li><strong>Java 编译器 (<code>javac</code>)</strong>:<ul>\n<li>编译 Java 源代码（<code>.java</code> 文件）为字节码（<code>.class</code> 文件）。</li>\n</ul>\n</li>\n<li><strong>Java 虚拟机 (<code>java</code>)</strong>:<ul>\n<li>执行编译后的字节码，使得 Java 应用程序可以跨平台运行。</li>\n</ul>\n</li>\n<li><strong>标准类库</strong>:<ul>\n<li>包含 Java API 提供的标准类库，如集合框架、I/O 操作、网络编程等。</li>\n</ul>\n</li>\n<li><strong>开发工具</strong>:<ul>\n<li>包括调试工具（<code>jdb</code>）、文档生成工具（<code>javadoc</code>）、打包工具（<code>jar</code>）等。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-JDK-与-JRE-的区别\"><a href=\"#3-JDK-与-JRE-的区别\" class=\"headerlink\" title=\"3. JDK 与 JRE 的区别\"></a>3. JDK 与 JRE 的区别</h2><p><strong>JRE</strong>（Java Runtime Environment）是 Java 运行环境，它是 JDK 的一个子集，包含 JVM 和标准类库，用于运行 Java 应用程序，但不包括编译器和开发工具。</p>\n<ul>\n<li><strong>JDK</strong>:<ul>\n<li>包含 JRE，用于开发和运行 Java 应用程序。</li>\n<li>适用于开发者。</li>\n</ul>\n</li>\n<li><strong>JRE</strong>:<ul>\n<li>仅用于运行 Java 应用程序。</li>\n<li>适用于最终用户或运行环境。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-Java-SE-Java-EE-Java-ME-的区别\"><a href=\"#4-Java-SE-Java-EE-Java-ME-的区别\" class=\"headerlink\" title=\"4. Java SE, Java EE, Java ME 的区别\"></a>4. Java SE, Java EE, Java ME 的区别</h2><ul>\n<li><strong>Java SE (Standard Edition)</strong>:<ul>\n<li>Java 标准版，包含了开发常规桌面和服务器应用程序所需的基础功能。大多数 Java 开发者都使用 Java SE。</li>\n</ul>\n</li>\n<li><strong>Java EE (Enterprise Edition)</strong>:<ul>\n<li>Java 企业版，基于 Java SE，添加了用于开发大规模分布式企业应用的额外功能，如 Web 服务、企业 JavaBeans (EJB)、Servlets、JSP 等。</li>\n</ul>\n</li>\n<li><strong>Java ME (Micro Edition)</strong>:<ul>\n<li>Java 微型版，专为嵌入式设备、移动设备和小型设备设计，包含适应这些设备的特定功能。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-版本区别与用途\"><a href=\"#5-版本区别与用途\" class=\"headerlink\" title=\"5. 版本区别与用途\"></a>5. 版本区别与用途</h2><p>每个 Java 版本都会引入新的特性和改进，因此理解不同版本的区别对选择合适的开发环境非常重要。</p>\n<ul>\n<li><strong>Java 8 (LTS)</strong>:<ul>\n<li>被广泛使用的 LTS 版本，引入了 Lambda 表达式、Stream API、默认方法等关键特性。</li>\n</ul>\n</li>\n<li><strong>Java 11 (LTS)</strong>:<ul>\n<li>继 Java 8 之后的另一个 LTS 版本，引入了新的 HTTP Client API、局部变量类型推断 (<code>var</code>) 等。</li>\n</ul>\n</li>\n<li><strong>Java 17 (LTS)</strong>:<ul>\n<li>最新的 LTS 版本，包含了大量的新特性和改进，如封闭类、增强的 Switch 表达式等。</li>\n</ul>\n</li>\n<li><strong>非 LTS 版本</strong>:<ul>\n<li>这些版本在发布后的短期内得到支持，主要用于引入和测试新特性。如 Java 9、10、12、13 等。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-常见的-JDK-实现及其特点\"><a href=\"#6-常见的-JDK-实现及其特点\" class=\"headerlink\" title=\"6. 常见的 JDK 实现及其特点\"></a>6. 常见的 JDK 实现及其特点</h2><h3 id=\"1-Oracle-JDK\"><a href=\"#1-Oracle-JDK\" class=\"headerlink\" title=\"1. Oracle JDK\"></a>1. <strong>Oracle JDK</strong></h3><ul>\n<li><strong>Oracle JDK</strong> 是 Oracle 公司官方发布的 Java 开发工具包，是 Java SE（Standard Edition）的参考实现。</li>\n<li>特点:<ul>\n<li>商业版（从 JDK 11 开始），需要商业许可证用于生产环境，但开发和测试用途免费。</li>\n<li>定期更新和安全修补。</li>\n</ul>\n</li>\n<li>版本:<ul>\n<li>LTS（长期支持）版本：8、11、17 等。</li>\n<li>非 LTS 版本：12、13、14、15、16、18、19 等。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-OpenJDK\"><a href=\"#2-OpenJDK\" class=\"headerlink\" title=\"2. OpenJDK\"></a>2. <strong>OpenJDK</strong></h3><ul>\n<li><strong>OpenJDK</strong> 是一个开源的 JDK 实现，由 Oracle 和其他社区成员共同维护，是 Oracle JDK 的基础。</li>\n<li>特点:<ul>\n<li>开源且免费使用。</li>\n<li>与 Oracle JDK 基本相同，但可能缺少一些商业特性。</li>\n</ul>\n</li>\n<li>版本:<ul>\n<li>和 Oracle JDK 同步的版本：8、11、17 等。</li>\n<li>提供最新的非 LTS 版本。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-Adoptium-Eclipse-Temurin\"><a href=\"#3-Adoptium-Eclipse-Temurin\" class=\"headerlink\" title=\"3. Adoptium (Eclipse Temurin)\"></a>3. <strong>Adoptium (Eclipse Temurin)</strong></h3><ul>\n<li><strong>Adoptium</strong> 前身为 AdoptOpenJDK，现在由 Eclipse 基金会管理。</li>\n<li>特点:<ul>\n<li>社区驱动的开源 JDK 发行版。</li>\n<li>提供高质量的二进制构建，适用于不同平台。</li>\n</ul>\n</li>\n<li>版本:<ul>\n<li>支持 LTS 版本：8、11、17 等。</li>\n<li>提供非 LTS 版本。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-Amazon-Corretto\"><a href=\"#4-Amazon-Corretto\" class=\"headerlink\" title=\"4. Amazon Corretto\"></a>4. <strong>Amazon Corretto</strong></h3><ul>\n<li><strong>Amazon Corretto</strong> 是由亚马逊发布的免费、开源的 JDK 发行版。</li>\n<li>特点:<ul>\n<li>亚马逊维护，包含长时间的支持和性能改进。</li>\n<li>完全兼容 OpenJDK。</li>\n</ul>\n</li>\n<li>版本:<ul>\n<li>提供 LTS 版本：8、11、17 等。</li>\n<li>提供非 LTS 版本。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-Azul-Zulu\"><a href=\"#5-Azul-Zulu\" class=\"headerlink\" title=\"5. Azul Zulu\"></a>5. <strong>Azul Zulu</strong></h3><ul>\n<li><strong>Azul Zulu</strong> 是由 Azul 公司发布的一个商业支持的 OpenJDK 发行版。</li>\n<li>特点:<ul>\n<li>商业支持，适用于企业环境。</li>\n<li>提供与不同平台兼容的版本，包括 Windows、Linux、macOS 和嵌入式系统。</li>\n</ul>\n</li>\n<li>版本:<ul>\n<li>支持 LTS 版本：8、11、17 等。</li>\n<li>提供非 LTS 版本。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-GraalVM\"><a href=\"#6-GraalVM\" class=\"headerlink\" title=\"6. GraalVM\"></a>6. <strong>GraalVM</strong></h3><ul>\n<li><strong>GraalVM</strong> 是 Oracle 提供的一个高性能、可扩展的 Java 虚拟机，它也是一个多语言开发环境。</li>\n<li>特点:<ul>\n<li>支持多语言运行时，包括 Java、JavaScript、Python、Ruby 等。</li>\n<li>提供本机映像生成（Native Image）功能。</li>\n</ul>\n</li>\n<li>版本:<ul>\n<li>基于 OpenJDK 构建，版本与 OpenJDK 保持一致。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-Red-Hat-OpenJDK\"><a href=\"#7-Red-Hat-OpenJDK\" class=\"headerlink\" title=\"7. Red Hat OpenJDK\"></a>7. <strong>Red Hat OpenJDK</strong></h3><ul>\n<li><strong>Red Hat OpenJDK</strong> 是由 Red Hat 提供的 OpenJDK 构建，主要针对企业级应用。</li>\n<li>特点:<ul>\n<li>提供商业支持和长期支持。</li>\n<li>常用于 Red Hat Enterprise Linux（RHEL）环境中。</li>\n</ul>\n</li>\n<li>版本:<ul>\n<li>支持 LTS 版本：8、11、17 等。</li>\n<li>提供非 LTS 版本。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"8-SAP-Machine\"><a href=\"#8-SAP-Machine\" class=\"headerlink\" title=\"8. SAP Machine\"></a>8. <strong>SAP Machine</strong></h3><ul>\n<li><strong>SAP Machine</strong> 是 SAP 发布的 OpenJDK 发行版。</li>\n<li>特点:<ul>\n<li>用于 SAP 产品和客户的支持环境。</li>\n<li>完全开源，兼容 OpenJDK。</li>\n</ul>\n</li>\n<li>版本:<ul>\n<li>支持 LTS 版本：8、11、17 等。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"9-Liberica-JDK\"><a href=\"#9-Liberica-JDK\" class=\"headerlink\" title=\"9. Liberica JDK\"></a>9. <strong>Liberica JDK</strong></h3><ul>\n<li><strong>Liberica JDK</strong> 是由 BellSoft 发布的 OpenJDK 发行版。</li>\n<li>特点:<ul>\n<li>提供全功能 JDK，包括完整的 JavaFX 支持。</li>\n<li>提供不同平台和操作系统的兼容版本。</li>\n</ul>\n</li>\n<li>版本:<ul>\n<li>支持 LTS 版本：8、11、17 等。</li>\n<li>提供非 LTS 版本。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-SDK-Software-Development-Kit\"><a href=\"#7-SDK-Software-Development-Kit\" class=\"headerlink\" title=\"7. SDK (Software Development Kit)\"></a>7. SDK (Software Development Kit)</h2><p><strong>SDK</strong> 是软件开发工具包（Software Development Kit）的缩写。它通常包括了一组开发工具、库、示例代码、文档和其他资源，帮助开发者构建应用程序。对于 JVM 生态系统中的 SDK，最常见的例子是 Java 开发工具包（<strong>JDK</strong>，Java Development Kit）。</p>\n<ul>\n<li>JDK: JDK 是 Java 的官方 SDK，包含了开发 Java 应用程序所需的所有工具和库。JDK 中主要包括：<ul>\n<li><strong>Java 编译器（javac）</strong>: 用于将 Java 源代码编译成字节码（.class 文件）。</li>\n<li><strong>Java 运行时环境（JRE）</strong>: 包含 JVM 和标准 Java 类库，负责运行 Java 应用程序。</li>\n<li><strong>其他工具</strong>: 如 <code>javadoc</code>（生成文档的工具）、<code>jdb</code>（Java 调试器）等。</li>\n</ul>\n</li>\n</ul>\n<p>除了 JDK，其他 JVM 语言（如 Scala、Kotlin）也有自己的 SDK，这些 SDK 提供了用于编译、运行和调试这些语言的工具。</p>\n<h2 id=\"8-JVM-工具\"><a href=\"#8-JVM-工具\" class=\"headerlink\" title=\"8. JVM 工具\"></a>8. JVM 工具</h2><p><strong>JVM 工具</strong> 是指那些用于开发、管理和优化基于 JVM 的应用程序的工具。这些工具帮助开发者在 JVM 上构建和管理应用程序，包括编译、运行、调试、打包、依赖管理等方面。</p>\n<ul>\n<li><p><strong>JVM</strong> 是 Java 程序的运行环境。Java 代码在编译器的帮助下转化为字节码，这些字节码由 JVM 来执行。JVM 为不同的操作系统提供了统一的运行环境。</p>\n</li>\n<li><p>Java 程序跨平台性的实现依赖于 JVM。Java 编译器将源代码编译成与平台无关的字节码，JVM 则负责在不同平台上将字节码解释成机器码并执行。因此，只要平台有适配的 JVM，Java 程序就可以在上面运行，无需修改代码。</p>\n</li>\n<li><p>虽然 JVM 是为 Java 设计的，但由于它的通用性，其他语言（如 Scala、Kotlin、Groovy 等）也可以编译为 JVM 字节码，并在 JVM 上运行。因此，JVM 并不局限于 Java 语言，它已经发展为支持多种语言的强大平台。</p>\n</li>\n</ul>\n",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2021/11/06/java-an-zhuang/",
            "url": "https://0xdadream.github.io/2021/11/06/java-an-zhuang/",
            "title": "java安装",
            "date_published": "2021-11-06T13:11:00.000Z",
            "content_html": "<h1 id=\"java安装\"><a href=\"#java安装\" class=\"headerlink\" title=\"java安装\"></a>java安装</h1><ol>\n<li><p>前往<a href=\"https://www.oracle.com/java/technologies/downloads/\">Java Downloads | Oracle</a>下载合适自己计算机版本的JDK</p>\n</li>\n<li><p>一直Next，遇到修改路径自行修改</p>\n</li>\n<li><p>安装成功后，添加环境变量，win+R ，输入contro打开控制面板，系统和安全-&gt;系统-&gt;高级系统设置-&gt;环境变量</p>\n<p>添加两个系统变量<code>CLASSPATH = .;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/9d27d5425c82b6e5da65577583b1bca5.png\"><code>JAVA_HOME = 你的安装目录</code></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/36124fb3c93ef24856dffc4c65bb73ff.png\">添加至Path</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/f0563e12878361dcba1998db038a1723.png\"></p>\n</li>\n<li><p>至此已经成功了，运行<code>java</code>，<code>javac</code>，<code>java --version</code>正常则安装成功</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/96b66c41a6ce153d420f2d16c20aa0c8.png\"></p>\n</li>\n</ol>\n<p>jdk：Java Development Kit，是开发者使用的</p>\n<p>jre： Java Runtime Environment，用来运行java</p>\n<p>注：</p>\n<ol>\n<li><p>jdk集成安装了jre，有些时候jre会没安装，可以到<a href=\"https://www.java.com/en/download/manual.jsp\">Java Downloads for All Operating Systems</a>下载安装包自己安装，当然单独安装jre也行</p>\n</li>\n<li><p>Oracle管理的jdk和jre不用上述的添加环境变量，它会自己添加</p>\n</li>\n</ol>\n",
            "tags": [
                "tip",
                "java"
            ]
        }
    ]
}