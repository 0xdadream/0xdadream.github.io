<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>逐梦 • Posts by &#34;mcp&#34; tag</title>
        <link>https://0xdadream.github.io</link>
        <description>Welcome to my blog</description>
        <language>zh-CN</language>
        <pubDate>Sun, 29 Jun 2025 03:25:00 +0800</pubDate>
        <lastBuildDate>Sun, 29 Jun 2025 03:25:00 +0800</lastBuildDate>
        <category>tip</category>
        <category>intel</category>
        <category>cloudflare</category>
        <category>email</category>
        <category>安装</category>
        <category>AI</category>
        <category>tips</category>
        <category>re</category>
        <category>工具</category>
        <category>conda</category>
        <category>Java</category>
        <category>linux</category>
        <category>教程</category>
        <category>环境</category>
        <category>bug</category>
        <category>web</category>
        <category>wp</category>
        <category>攻防世界</category>
        <category>windows</category>
        <category>net</category>
        <category>BUUCTF</category>
        <category>server</category>
        <category>wall</category>
        <category>comfyui</category>
        <category>tools</category>
        <category>powershell</category>
        <category>sql</category>
        <category>代码审计</category>
        <category>漏洞复现</category>
        <category>emby</category>
        <category>python</category>
        <category>google</category>
        <category>git</category>
        <category>学习</category>
        <category>java</category>
        <category>命令</category>
        <category>远程</category>
        <category>php</category>
        <category>文件上传</category>
        <category>命令行</category>
        <category>下载</category>
        <category>区块链</category>
        <category>汇编</category>
        <category>密码学</category>
        <category>mcp</category>
        <category>i春秋</category>
        <category>证书</category>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/06/29/ben-di-bu-shu-yu-pei-zhi-mcp-fu-wu-qi/</guid>
            <title>本地部署与配置 MCP 服务器</title>
            <link>https://0xdadream.github.io/2025/06/29/ben-di-bu-shu-yu-pei-zhi-mcp-fu-wu-qi/</link>
            <category>mcp</category>
            <pubDate>Sun, 29 Jun 2025 03:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;本地部署与配置-MCP-服务器&#34;&gt;&lt;a href=&#34;#本地部署与配置-MCP-服务器&#34; class=&#34;headerlink&#34; title=&#34;本地部署与配置 MCP 服务器&#34;&gt;&lt;/a&gt;本地部署与配置 MCP 服务器&lt;/h1&gt;&lt;p&gt;本指南将根据您提供的专业指令，演示如何为两个不同技术栈的 MCP 服务器（一个基于 Python/uv，一个基于 Bun/TypeScript）设置项目、运行服务，并在 Cursor 中进行配置。主要针对wsl。&lt;/p&gt;
&lt;h3 id=&#34;项目一：mcp-sequential-thinking-Python-环境&#34;&gt;&lt;a href=&#34;#项目一：mcp-sequential-thinking-Python-环境&#34; class=&#34;headerlink&#34; title=&#34;项目一：mcp_sequential_thinking (Python 环境)&#34;&gt;&lt;/a&gt;&lt;strong&gt;项目一：&lt;code&gt;mcp_sequential_thinking&lt;/code&gt; (Python 环境)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这是一个使用 &lt;code&gt;uv&lt;/code&gt; 作为包管理器的 Python 项目。&lt;/p&gt;
&lt;h4 id=&#34;1-设置项目&#34;&gt;&lt;a href=&#34;#1-设置项目&#34; class=&#34;headerlink&#34; title=&#34;1. 设置项目&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 设置项目&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;首先，克隆项目仓库（此处使用占位符，请替换为实际仓库地址），并创建虚拟环境。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 克隆你的项目
git clone &amp;lt;your-python-mcp-repo-url&amp;gt;
cd &amp;lt;project-folder&amp;gt;

# 创建并激活虚拟环境
uv venv

# 激活环境
# Windows
.venv\Scripts\activate
# Unix/Linux/macOS
source .venv/bin/activate&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-安装依赖&#34;&gt;&lt;a href=&#34;#2-安装依赖&#34; class=&#34;headerlink&#34; title=&#34;2. 安装依赖&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 安装依赖&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;uv&lt;/code&gt; 提供了灵活的依赖安装选项。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 仅安装核心依赖
uv pip install -e .

# (推荐开发) 安装核心及测试工具
uv pip install -e &#34;.[dev]&#34;

# 安装所有可选依赖
uv pip install -e &#34;.[all]&#34;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-运行服务器&#34;&gt;&lt;a href=&#34;#3-运行服务器&#34; class=&#34;headerlink&#34; title=&#34;3. 运行服务器&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 运行服务器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;您可以通过两种方式启动本地服务器。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 方式一：直接通过模块运行
uv run -m mcp_sequential_thinking.server

# 方式二：使用安装后生成的脚本
mcp-sequential-thinking&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动后，请留意终端输出，确认服务器正在监听的 &lt;strong&gt;IP 地址和端口号&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;4-可选-运行测试&#34;&gt;&lt;a href=&#34;#4-可选-运行测试&#34; class=&#34;headerlink&#34; title=&#34;4. (可选) 运行测试&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. (可选) 运行测试&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;确保代码质量，可以运行单元测试。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 运行所有测试
pytest

# 运行测试并生成覆盖率报告
pytest --cov=mcp_sequential_thinking&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;项目二：context7-mcp-Bun-环境&#34;&gt;&lt;a href=&#34;#项目二：context7-mcp-Bun-环境&#34; class=&#34;headerlink&#34; title=&#34;项目二：context7-mcp (Bun 环境)&#34;&gt;&lt;/a&gt;&lt;strong&gt;项目二：&lt;code&gt;context7-mcp&lt;/code&gt; (Bun 环境)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这是一个使用 &lt;code&gt;Bun&lt;/code&gt; 作为运行时和工具链的 TypeScript/JavaScript 项目。&lt;/p&gt;
&lt;h4 id=&#34;1-设置项目-1&#34;&gt;&lt;a href=&#34;#1-设置项目-1&#34; class=&#34;headerlink&#34; title=&#34;1. 设置项目&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 设置项目&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;克隆 &lt;code&gt;context7&lt;/code&gt; 的仓库并使用 &lt;code&gt;bun&lt;/code&gt; 安装依赖。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 克隆 context7 项目
git clone &amp;lt;your-bun-mcp-repo-url&amp;gt;
cd &amp;lt;project-folder&amp;gt;

# 安装依赖
bun i&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-构建项目&#34;&gt;&lt;a href=&#34;#2-构建项目&#34; class=&#34;headerlink&#34; title=&#34;2. 构建项目&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 构建项目&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;bun&lt;/code&gt; 用于将 TypeScript 源代码编译为可执行的 JavaScript。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;bun run build&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此命令通常会在 &lt;code&gt;dist&lt;/code&gt; 目录下生成输出文件。&lt;/p&gt;
&lt;h4 id=&#34;3-运行服务器-1&#34;&gt;&lt;a href=&#34;#3-运行服务器-1&#34; class=&#34;headerlink&#34; title=&#34;3. 运行服务器&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 运行服务器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;构建完成后，运行服务器并可指定参数。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 基本运行方式
bun run dist/index.js

# 高级运行方式：指定传输协议和端口
# 下例将使用 http 协议并在 8080 端口上运行
bun run dist/index.js --transport http --port 8080&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;在-Cursor-中配置本地服务器&#34;&gt;&lt;a href=&#34;#在-Cursor-中配置本地服务器&#34; class=&#34;headerlink&#34; title=&#34;在 Cursor 中配置本地服务器&#34;&gt;&lt;/a&gt;&lt;strong&gt;在 Cursor 中配置本地服务器&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;将本地运行的服务器接入 Cursor 有两种主要方式：&lt;/p&gt;
&lt;h4 id=&#34;方式一：HTTP-连接-推荐&#34;&gt;&lt;a href=&#34;#方式一：HTTP-连接-推荐&#34; class=&#34;headerlink&#34; title=&#34;方式一：HTTP 连接 (推荐)&#34;&gt;&lt;/a&gt;&lt;strong&gt;方式一：HTTP 连接 (推荐)&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;当您的服务器已经在本地终端中成功运行时，可以使用此方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 Cursor 设置，进入 &lt;code&gt;MCP&lt;/code&gt; 配置页。&lt;/li&gt;
&lt;li&gt;点击 “Add Server”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于 &lt;code&gt;context7-mcp&lt;/code&gt; (假设运行在 8080 端口):&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name (名称):&lt;/strong&gt; &lt;code&gt;context7-local-http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type (类型):&lt;/strong&gt; &lt;code&gt;http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URL (地址):&lt;/strong&gt; &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于 &lt;code&gt;mcp_sequential_thinking&lt;/code&gt;:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name (名称):&lt;/strong&gt; &lt;code&gt;sequential-thinking-local-http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type (类型):&lt;/strong&gt; &lt;code&gt;http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URL (地址):&lt;/strong&gt; &lt;code&gt;http://localhost:&amp;lt;YOUR_PYTHON_PORT&amp;gt;&lt;/code&gt; (请替换为 Python 服务器实际监听的端口号)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;方式二：Command-命令-由-Cursor-启动&#34;&gt;&lt;a href=&#34;#方式二：Command-命令-由-Cursor-启动&#34; class=&#34;headerlink&#34; title=&#34;方式二：Command 命令 (由 Cursor 启动)&#34;&gt;&lt;/a&gt;&lt;strong&gt;方式二：Command 命令 (由 Cursor 启动)&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;这种方式让 Cursor 在需要时自动执行命令来启动服务器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开 Cursor 设置，进入 &lt;code&gt;MCP&lt;/code&gt; 配置页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 “Add Server”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;配置示例 (适用于 TypeScript 项目):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name (名称):&lt;/strong&gt; &lt;code&gt;context7-local-cmd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type (类型):&lt;/strong&gt; &lt;code&gt;command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command (命令):&lt;/strong&gt; &lt;code&gt;npx tsx /path/to/folder/context7-mcp/src/index.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;重要提示&lt;/strong&gt;: 您必须将 &lt;code&gt;/path/to/folder/context7-mcp/src/index.ts&lt;/code&gt; 替换为您本地存放 &lt;code&gt;context7&lt;/code&gt; 项目的&lt;strong&gt;绝对路径&lt;/strong&gt;。这种方式更适合直接运行源文件，无需手动 &lt;code&gt;build&lt;/code&gt; 和 &lt;code&gt;run&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;书写形式&#34;&gt;&lt;a href=&#34;#书写形式&#34; class=&#34;headerlink&#34; title=&#34;书写形式&#34;&gt;&lt;/a&gt;书写形式&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;{
  &#34;mcpServers&#34;: {
    &#34;sequential-thinking&#34;: {
      &#34;command&#34;: &#34;/home/hero/mcp-sequential-thinking/.venv/bin/mcp-sequential-thinking&#34;,
      &#34;cwd&#34;: &#34;/home/hero/mcp-sequential-thinking&#34;
    },
    &#34;context7&#34;: {
      &#34;command&#34;: &#34;bun&#34;,
      &#34;args&#34;: [&#34;run&#34;, &#34;/home/hero/context7/src/index.ts&#34;]
    }
  }
} &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自行理解&lt;/p&gt;
&lt;h4 id=&#34;提示词&#34;&gt;&lt;a href=&#34;#提示词&#34; class=&#34;headerlink&#34; title=&#34;提示词&#34;&gt;&lt;/a&gt;提示词&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;你是一位具备顺序逻辑推理能力与跨文件代码理解能力的 AI 助手。我希望你结合 Sequential Thinking 插件的多步骤推理能力，以及 Context7 插件的跨上下文代码理解能力，帮助我更清晰、精准地完成以下任务。

请执行以下策略：
1. 拆分任务为合理的多个思维步骤，并依次处理（Sequential Thinking）。
2. 若任务涉及多个文件或函数，自动调用 Context7 插件提取和关联上下文。
3. 在必要时提供逐步思路、函数关系图、模块依赖路径，并解释推理过程。
4. 保持逻辑清晰，输出建议时标明每一步对应的推理依据。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

 ]]></description>
        </item>
    </channel>
</rss>
