{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦 • All posts by \"mcp\" tag",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2025/06/29/ben-di-bu-shu-yu-pei-zhi-mcp-fu-wu-qi/",
            "url": "https://0xdadream.github.io/2025/06/29/ben-di-bu-shu-yu-pei-zhi-mcp-fu-wu-qi/",
            "title": "本地部署与配置 MCP 服务器",
            "date_published": "2025-06-28T19:25:00.000Z",
            "content_html": "<h1 id=\"本地部署与配置-MCP-服务器\"><a href=\"#本地部署与配置-MCP-服务器\" class=\"headerlink\" title=\"本地部署与配置 MCP 服务器\"></a>本地部署与配置 MCP 服务器</h1><p>本指南将根据您提供的专业指令，演示如何为两个不同技术栈的 MCP 服务器（一个基于 Python/uv，一个基于 Bun/TypeScript）设置项目、运行服务，并在 Cursor 中进行配置。主要针对wsl。</p>\n<h3 id=\"项目一：mcp-sequential-thinking-Python-环境\"><a href=\"#项目一：mcp-sequential-thinking-Python-环境\" class=\"headerlink\" title=\"项目一：mcp_sequential_thinking (Python 环境)\"></a><strong>项目一：<code>mcp_sequential_thinking</code> (Python 环境)</strong></h3><p>这是一个使用 <code>uv</code> 作为包管理器的 Python 项目。</p>\n<h4 id=\"1-设置项目\"><a href=\"#1-设置项目\" class=\"headerlink\" title=\"1. 设置项目\"></a><strong>1. 设置项目</strong></h4><p>首先，克隆项目仓库（此处使用占位符，请替换为实际仓库地址），并创建虚拟环境。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 克隆你的项目\ngit clone &lt;your-python-mcp-repo-url&gt;\ncd &lt;project-folder&gt;\n\n# 创建并激活虚拟环境\nuv venv\n\n# 激活环境\n# Windows\n.venv\\Scripts\\activate\n# Unix/Linux/macOS\nsource .venv/bin/activate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-安装依赖\"><a href=\"#2-安装依赖\" class=\"headerlink\" title=\"2. 安装依赖\"></a><strong>2. 安装依赖</strong></h4><p><code>uv</code> 提供了灵活的依赖安装选项。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 仅安装核心依赖\nuv pip install -e .\n\n# (推荐开发) 安装核心及测试工具\nuv pip install -e \".[dev]\"\n\n# 安装所有可选依赖\nuv pip install -e \".[all]\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-运行服务器\"><a href=\"#3-运行服务器\" class=\"headerlink\" title=\"3. 运行服务器\"></a><strong>3. 运行服务器</strong></h4><p>您可以通过两种方式启动本地服务器。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 方式一：直接通过模块运行\nuv run -m mcp_sequential_thinking.server\n\n# 方式二：使用安装后生成的脚本\nmcp-sequential-thinking<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>启动后，请留意终端输出，确认服务器正在监听的 <strong>IP 地址和端口号</strong>。</p>\n<h4 id=\"4-可选-运行测试\"><a href=\"#4-可选-运行测试\" class=\"headerlink\" title=\"4. (可选) 运行测试\"></a><strong>4. (可选) 运行测试</strong></h4><p>确保代码质量，可以运行单元测试。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 运行所有测试\npytest\n\n# 运行测试并生成覆盖率报告\npytest --cov=mcp_sequential_thinking<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"项目二：context7-mcp-Bun-环境\"><a href=\"#项目二：context7-mcp-Bun-环境\" class=\"headerlink\" title=\"项目二：context7-mcp (Bun 环境)\"></a><strong>项目二：<code>context7-mcp</code> (Bun 环境)</strong></h3><p>这是一个使用 <code>Bun</code> 作为运行时和工具链的 TypeScript/JavaScript 项目。</p>\n<h4 id=\"1-设置项目-1\"><a href=\"#1-设置项目-1\" class=\"headerlink\" title=\"1. 设置项目\"></a><strong>1. 设置项目</strong></h4><p>克隆 <code>context7</code> 的仓库并使用 <code>bun</code> 安装依赖。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 克隆 context7 项目\ngit clone &lt;your-bun-mcp-repo-url&gt;\ncd &lt;project-folder&gt;\n\n# 安装依赖\nbun i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-构建项目\"><a href=\"#2-构建项目\" class=\"headerlink\" title=\"2. 构建项目\"></a><strong>2. 构建项目</strong></h4><p><code>bun</code> 用于将 TypeScript 源代码编译为可执行的 JavaScript。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">bun run build<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令通常会在 <code>dist</code> 目录下生成输出文件。</p>\n<h4 id=\"3-运行服务器-1\"><a href=\"#3-运行服务器-1\" class=\"headerlink\" title=\"3. 运行服务器\"></a><strong>3. 运行服务器</strong></h4><p>构建完成后，运行服务器并可指定参数。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 基本运行方式\nbun run dist/index.js\n\n# 高级运行方式：指定传输协议和端口\n# 下例将使用 http 协议并在 8080 端口上运行\nbun run dist/index.js --transport http --port 8080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"在-Cursor-中配置本地服务器\"><a href=\"#在-Cursor-中配置本地服务器\" class=\"headerlink\" title=\"在 Cursor 中配置本地服务器\"></a><strong>在 Cursor 中配置本地服务器</strong></h3><p>将本地运行的服务器接入 Cursor 有两种主要方式：</p>\n<h4 id=\"方式一：HTTP-连接-推荐\"><a href=\"#方式一：HTTP-连接-推荐\" class=\"headerlink\" title=\"方式一：HTTP 连接 (推荐)\"></a><strong>方式一：HTTP 连接 (推荐)</strong></h4><p>当您的服务器已经在本地终端中成功运行时，可以使用此方法。</p>\n<ol>\n<li>打开 Cursor 设置，进入 <code>MCP</code> 配置页。</li>\n<li>点击 “Add Server”。</li>\n<li><strong>对于 <code>context7-mcp</code> (假设运行在 8080 端口):</strong><ul>\n<li><strong>Name (名称):</strong> <code>context7-local-http</code></li>\n<li><strong>Type (类型):</strong> <code>http</code></li>\n<li><strong>URL (地址):</strong> <code>http://localhost:8080</code></li>\n</ul>\n</li>\n<li><strong>对于 <code>mcp_sequential_thinking</code>:</strong><ul>\n<li><strong>Name (名称):</strong> <code>sequential-thinking-local-http</code></li>\n<li><strong>Type (类型):</strong> <code>http</code></li>\n<li><strong>URL (地址):</strong> <code>http://localhost:&lt;YOUR_PYTHON_PORT&gt;</code> (请替换为 Python 服务器实际监听的端口号)</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"方式二：Command-命令-由-Cursor-启动\"><a href=\"#方式二：Command-命令-由-Cursor-启动\" class=\"headerlink\" title=\"方式二：Command 命令 (由 Cursor 启动)\"></a><strong>方式二：Command 命令 (由 Cursor 启动)</strong></h4><p>这种方式让 Cursor 在需要时自动执行命令来启动服务器。</p>\n<ol>\n<li><p>打开 Cursor 设置，进入 <code>MCP</code> 配置页。</p>\n</li>\n<li><p>点击 “Add Server”。</p>\n</li>\n<li><p><strong>配置示例 (适用于 TypeScript 项目):</strong></p>\n<ul>\n<li><strong>Name (名称):</strong> <code>context7-local-cmd</code></li>\n<li><strong>Type (类型):</strong> <code>command</code></li>\n<li><strong>Command (命令):</strong> <code>npx tsx /path/to/folder/context7-mcp/src/index.ts</code></li>\n</ul>\n<p><strong>重要提示</strong>: 您必须将 <code>/path/to/folder/context7-mcp/src/index.ts</code> 替换为您本地存放 <code>context7</code> 项目的<strong>绝对路径</strong>。这种方式更适合直接运行源文件，无需手动 <code>build</code> 和 <code>run</code>。</p>\n</li>\n</ol>\n<h4 id=\"书写形式\"><a href=\"#书写形式\" class=\"headerlink\" title=\"书写形式\"></a>书写形式</h4><pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">{\n  \"mcpServers\": {\n    \"sequential-thinking\": {\n      \"command\": \"/home/hero/mcp-sequential-thinking/.venv/bin/mcp-sequential-thinking\",\n      \"cwd\": \"/home/hero/mcp-sequential-thinking\"\n    },\n    \"context7\": {\n      \"command\": \"bun\",\n      \"args\": [\"run\", \"/home/hero/context7/src/index.ts\"]\n    }\n  }\n} <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>自行理解</p>\n<h4 id=\"提示词\"><a href=\"#提示词\" class=\"headerlink\" title=\"提示词\"></a>提示词</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">你是一位具备顺序逻辑推理能力与跨文件代码理解能力的 AI 助手。我希望你结合 Sequential Thinking 插件的多步骤推理能力，以及 Context7 插件的跨上下文代码理解能力，帮助我更清晰、精准地完成以下任务。\n\n请执行以下策略：\n1. 拆分任务为合理的多个思维步骤，并依次处理（Sequential Thinking）。\n2. 若任务涉及多个文件或函数，自动调用 Context7 插件提取和关联上下文。\n3. 在必要时提供逐步思路、函数关系图、模块依赖路径，并解释推理过程。\n4. 保持逻辑清晰，输出建议时标明每一步对应的推理依据。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "mcp"
            ]
        }
    ]
}