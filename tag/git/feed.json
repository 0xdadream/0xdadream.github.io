{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦 • All posts by \"git\" tag",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2024/08/09/git-shi-yong/",
            "url": "https://0xdadream.github.io/2024/08/09/git-shi-yong/",
            "title": "",
            "date_published": "2024-08-09T01:25:00.000Z",
            "content_html": "<h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h3 id=\"1-安装-Git\"><a href=\"#1-安装-Git\" class=\"headerlink\" title=\"1. 安装 Git\"></a>1. 安装 Git</h3><h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><ol>\n<li>从 <a href=\"https://git-scm.com/download/win\">Git 官方网站</a> 下载 Git 安装程序。</li>\n<li>双击安装程序并按照提示完成安装。</li>\n</ol>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><ol>\n<li><p>使用包管理器安装 Git（以 Ubuntu 为例）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"2-配置-Git\"><a href=\"#2-配置-Git\" class=\"headerlink\" title=\"2. 配置 Git\"></a>2. 配置 Git</h3><p>安装完成后，配置用户名和邮箱：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"你的名字\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-创建-SSH-Key\"><a href=\"#3-创建-SSH-Key\" class=\"headerlink\" title=\"3. 创建 SSH Key\"></a>3. 创建 SSH Key</h3><p>如果需要使用 SSH 方式连接 GitHub，生成 SSH key 并添加到 GitHub。</p>\n<h4 id=\"生成-SSH-Key\"><a href=\"#生成-SSH-Key\" class=\"headerlink\" title=\"生成 SSH Key\"></a>生成 SSH Key</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh-keygen -t rsa -C \"你的邮箱\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>按提示操作，默认保存位置即可。生成完成后，使用以下命令查看公钥：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"添加-SSH-Key-到-GitHub\"><a href=\"#添加-SSH-Key-到-GitHub\" class=\"headerlink\" title=\"添加 SSH Key 到 GitHub\"></a>添加 SSH Key 到 GitHub</h4><ol>\n<li>登录 GitHub，进入 <a href=\"https://github.com/settings/keys\">SSH and GPG keys</a> 页面。</li>\n<li>点击 “New SSH key”，粘贴上一步生成的公钥内容，点击 “Add SSH key”。</li>\n</ol>\n<h3 id=\"4-创建-Git-仓库\"><a href=\"#4-创建-Git-仓库\" class=\"headerlink\" title=\"4. 创建 Git 仓库\"></a>4. 创建 Git 仓库</h3><h4 id=\"本地仓库\"><a href=\"#本地仓库\" class=\"headerlink\" title=\"本地仓库\"></a>本地仓库</h4><ol>\n<li><p>创建一个新的目录并进入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> my_project\n<span class=\"token builtin class-name\">cd</span> my_project<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>初始化 Git 仓库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h4><ol>\n<li><p>登录 GitHub，点击右上角 “+”，选择 “New repository”。</p>\n</li>\n<li><p>填写仓库名和描述，点击 “Create repository”。</p>\n</li>\n<li><p><code>.gitignore</code> 文件用于告诉 Git 哪些文件或目录不应该被添加到版本控制中。它在 Git 项目中非常重要，特别是当你的项目包含一些不需要共享的文件，如编译后的二进制文件、临时文件、或包含敏感信息的配置文件。</p>\n<p><code>.gitignore</code> 文件通常放在项目的根目录下，但你也可以在子目录中添加 <code>.gitignore</code> 文件，作用范围仅限于该目录及其子目录。</p>\n<p><code>.gitignore</code> 文件的语法</p>\n<ul>\n<li><p><strong>忽略特定文件或目录</strong>：在 <code>.gitignore</code> 中直接写上文件名或目录名。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 忽略文件</span>\nsecret.txt\n\n<span class=\"token comment\"># 忽略目录</span>\n/logs/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>通配符</strong>：使用 <code>*</code> 代表任意字符，<code>?</code> 代表单个字符，<code>[abc]</code> 代表匹配集合中的任意一个字符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 忽略所有 .log 文件</span>\n*.log\n\n<span class=\"token comment\"># 忽略以 \"temp\" 开头的文件</span>\ntemp*\n\n<span class=\"token comment\"># 忽略名为 \"backup\" 或 \"bak\" 的文件</span>\n*.<span class=\"token punctuation\">[</span>bB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>aA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>kK<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>排除规则</strong>：以 <code>!</code> 开头的行用于排除某些文件或目录，这些文件即使符合前面的忽略规则也不会被忽略。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 忽略所有 .log 文件，但不忽略 important.log</span>\n*.log\n<span class=\"token operator\">!</span>important.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>指定路径</strong>：使用斜杠 <code>/</code> 来表示目录路径。以斜杠开头表示从根目录开始匹配。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 只忽略根目录下的 \"config.json\"，不忽略其他目录中的 \"config.json\"</span>\n/config.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"5-关联本地仓库与远程仓库\"><a href=\"#5-关联本地仓库与远程仓库\" class=\"headerlink\" title=\"5. 关联本地仓库与远程仓库\"></a>5. 关联本地仓库与远程仓库</h3><p>在本地仓库中，执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:你的用户名/仓库名.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>git remote add</code> 是一个 Git 命令，用于向你的本地仓库添加一个远程仓库。一个远程仓库是一个托管在某个服务器上的 Git 仓库，你可以将本地的更改推送到远程仓库，也可以从远程仓库拉取更新。</p>\n<p><code>origin</code> 是这个远程仓库的名字。你可以把它理解为远程仓库的一个别名，便于你以后引用这个远程仓库。在大多数情况下，<code>origin</code> 是默认的名字，用于指向你克隆的或第一次关联的远程仓库。</p>\n<p>通过执行这条命令，你告诉 Git：**这个本地仓库的远程仓库是位于 GitHub 上的 <code>git@github.com:你的用户名/仓库名.git</code> 这个位置，并且将它命名为 <code>origin</code>**。</p>\n<p>之后，你可以使用类似 <code>git push origin master</code> 的命令将本地的代码推送到 GitHub 上的远程仓库，或者使用 <code>git pull origin master</code> 从 GitHub 上拉取更新。</p>\n<h3 id=\"6-基本-Git-操作\"><a href=\"#6-基本-Git-操作\" class=\"headerlink\" title=\"6. 基本 Git 操作\"></a>6. 基本 Git 操作</h3><h4 id=\"添加文件并提交\"><a href=\"#添加文件并提交\" class=\"headerlink\" title=\"添加文件并提交\"></a>添加文件并提交</h4><p>提交前的工作目录是工作区（文件操作的区域）</p>\n<p>添加文件到暂存区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这条命令用于将指定的文件添加到 Git 的暂存区（Stage）。暂存区是一个临时区域，你可以在其中暂时存放那些你准备提交到仓库的更改。文件在添加到暂存区之前，可以进行修改，而这些修改不会立即提交到仓库中。</p>\n<p>或添加所有文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>提交到本地仓库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"提交信息\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这条命令用于将暂存区中的所有内容提交到本地 Git 仓库，并为此次提交添加一条消息。<code>-m \"提交信息\"</code> 选项允许你在命令行中直接输入一条提交信息，而不需要进入编辑器。</p>\n<h4 id=\"查看暂存区的文件\"><a href=\"#查看暂存区的文件\" class=\"headerlink\" title=\"查看暂存区的文件\"></a>查看暂存区的文件</h4><p><code>git status</code> 命令会显示工作区和暂存区的状态，包括哪些文件被修改但尚未添加到暂存区，以及哪些文件已经被添加到暂存区。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出中，暂存区中的文件会显示在 <code>Changes to be committed</code> 部分。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Changes to be committed:\n  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git restore --staged &lt;file&gt;...\"</span> to unstage<span class=\"token punctuation\">)</span>\n        modified:   index.html\n        new file:   style.css<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这意味着 <code>index.html</code> 文件已被修改并添加到暂存区，而 <code>style.css</code> 是一个新文件，也已经被添加到暂存区。</p>\n<h4 id=\"使用-git-diff-cached-查看暂存区的更改\"><a href=\"#使用-git-diff-cached-查看暂存区的更改\" class=\"headerlink\" title=\"使用 git diff --cached 查看暂存区的更改\"></a>使用 <code>git diff --cached</code> 查看暂存区的更改</h4><p><code>git diff --cached</code> 命令会显示暂存区中的更改细节。这个命令的输出与 <code>git diff</code> 类似，但只显示暂存区中的内容，而不包括工作区中尚未添加到暂存区的修改。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token parameter variable\">--cached</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者你也可以使用 <code>git diff --staged</code>，效果是一样的。</p>\n<p>这个命令将显示具体的代码差异，即哪些行被修改、添加或删除。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">diff</span> <span class=\"token parameter variable\">--git</span> a/index.html b/index.html\nindex 83b2d7e<span class=\"token punctuation\">..</span>e39a4ff <span class=\"token number\">100644</span>\n--- a/index.html\n+++ b/index.html\n@@ -12,7 +12,7 @@\n   <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">&gt;</span>My Website<span class=\"token operator\">&lt;</span>/title<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>/head<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">&gt;</span>\n-  <span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span>Hello, World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span>\n+  <span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span>Welcome to My Website<span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&gt;</span>\n <span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">&gt;</span>\n <span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"从-Git-暂存区移除文件\"><a href=\"#从-Git-暂存区移除文件\" class=\"headerlink\" title=\"从 Git 暂存区移除文件\"></a>从 Git 暂存区移除文件</h4><h5 id=\"使用-git-restore-staged\"><a href=\"#使用-git-restore-staged\" class=\"headerlink\" title=\"使用 git restore --staged\"></a>使用 <code>git restore --staged</code></h5><p>用于将文件从暂存区移除，并恢复到工作区的状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> restore <span class=\"token parameter variable\">--staged</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"使用-git-reset\"><a href=\"#使用-git-reset\" class=\"headerlink\" title=\"使用 git reset\"></a>使用 <code>git reset</code></h5><p>用于回滚或取消更改。使用 <code>git reset</code> 也可以将文件从暂存区移除。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"移除所有文件\"><a href=\"#移除所有文件\" class=\"headerlink\" title=\"移除所有文件\"></a>移除所有文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将把暂存区中的所有文件全部移除，同时保留它们在工作区中的修改。</p>\n<h4 id=\"恢复工作区文件\"><a href=\"#恢复工作区文件\" class=\"headerlink\" title=\"恢复工作区文件\"></a>恢复工作区文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -- test.txt\n<span class=\"token function\">git</span> checkout <span class=\"token comment\"># 直接还原为最新版本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>是用于丢弃工作区中对 <code>txt</code> 文件的所有未提交更改的命令。具体来说，它将 <code>txt</code> 文件恢复到最后一次提交时的状态。</p>\n<h4 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h4><h5 id=\"使用-git-reset-回退版本\"><a href=\"#使用-git-reset-回退版本\" class=\"headerlink\" title=\"使用 git reset 回退版本\"></a>使用 <code>git reset</code> 回退版本</h5><p><code>git reset</code> 用于回退到某个特定的提交，并且可以选择性地影响暂存区和工作区。</p>\n<p>常用选项：</p>\n<ul>\n<li><code>--soft</code>：仅移动 <code>HEAD</code>，不影响暂存区和工作区。回退后的所有更改都保留在暂存区中。（HEAD为当前版本）</li>\n<li><code>--mixed</code>（默认选项）：移动 <code>HEAD</code>，并重置暂存区，但保留工作区的更改。回退后的更改仍在工作区，但不在暂存区。</li>\n<li><code>--hard</code>：移动 <code>HEAD</code>，同时重置暂存区和工作区。回退后的所有更改都被删除，不可恢复。</li>\n</ul>\n<p>假设你想回退到特定的提交 <code>abc123</code>。</p>\n<ul>\n<li><p><strong>软回退：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将把当前分支指针（<code>HEAD</code>）移到 <code>abc123</code>，但保持工作区和暂存区的所有更改。</p>\n</li>\n<li><p><strong>混合回退：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--mixed</span> abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将回退到 <code>abc123</code>，并将暂存区重置为该提交的状态，但保留工作区的更改。</p>\n</li>\n<li><p><strong>硬回退：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将回退到 <code>abc123</code>，并删除所有在 <code>abc123</code> 之后的更改。这个操作不可逆，因此使用前请务必确认。</p>\n</li>\n</ul>\n<h5 id=\"使用-git-revert-进行安全回退\"><a href=\"#使用-git-revert-进行安全回退\" class=\"headerlink\" title=\"使用 git revert 进行安全回退\"></a>使用 <code>git revert</code> 进行安全回退</h5><p><code>git revert</code> 用于生成一个新的提交，该提交会撤销指定的历史提交，而不会改变项目的提交历史。<code>git revert</code> 是一种“安全”的回退方式，因为它保留了所有历史记录。</p>\n<p>假设你想撤销提交 <code>abc123</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> revert abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将生成一个新的提交，它的作用是撤销 <code>abc123</code> 所做的更改，而不会影响 <code>abc123</code> 之前或之后的其他提交。</p>\n<h5 id=\"使用-git-checkout-回退到特定提交（仅查看）\"><a href=\"#使用-git-checkout-回退到特定提交（仅查看）\" class=\"headerlink\" title=\"使用 git checkout 回退到特定提交（仅查看）\"></a>使用 <code>git checkout</code> 回退到特定提交（仅查看）</h5><p><code>git checkout</code> 主要用于切换分支或查看特定提交。你可以暂时回退到某个提交，但不修改当前分支的状态。</p>\n<p>假设你想查看 <code>abc123</code> 提交的状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout abc123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将把工作区和暂存区切换到 <code>abc123</code> 提交的状态，但不会更改当前分支的指针。如果你想回到最新的状态，可以使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（假设你在 <code>master</code> 分支上）</p>\n<h5 id=\"如何找到提交的哈希值\"><a href=\"#如何找到提交的哈希值\" class=\"headerlink\" title=\"如何找到提交的哈希值\"></a>如何找到提交的哈希值</h5><p>在执行版本回退前，你需要知道要回退到的提交的哈希值（类似 <code>abc123</code>）。可以使用以下命令查看提交历史：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--pretty</span><span class=\"token operator\">=</span>oneline <span class=\"token comment\"># 显示一行</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD^ <span class=\"token comment\"># 回退上一个版本</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD^^ <span class=\"token comment\"># 同理</span>\n<span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD~10<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这将显示所有提交的日志，包括提交哈希、作者、日期和提交信息。</p>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><p><code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的</p>\n<h4 id=\"推送到远程仓库\"><a href=\"#推送到远程仓库\" class=\"headerlink\" title=\"推送到远程仓库\"></a>推送到远程仓库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin master\n<span class=\"token function\">git</span> remote <span class=\"token parameter variable\">-v</span> <span class=\"token comment\">#查看远程库信息</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">rm</span> origin <span class=\"token comment\"># 删除关联</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:你的用户名/仓库名.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"拉取更新\"><a href=\"#拉取更新\" class=\"headerlink\" title=\"拉取更新\"></a>拉取更新</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-分支管理\"><a href=\"#7-分支管理\" class=\"headerlink\" title=\"7. 分支管理\"></a>7. 分支管理</h3><h4 id=\"1-创建分支\"><a href=\"#1-创建分支\" class=\"headerlink\" title=\"1. 创建分支\"></a>1. 创建分支</h4><p>要创建一个新的分支，使用 <code>git branch</code> 命令。新分支会基于你当前所在的分支创建。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会创建一个名为 <code>feature/new-feature</code> 的新分支，但不会切换到该分支。</p>\n<h4 id=\"2-切换分支\"><a href=\"#2-切换分支\" class=\"headerlink\" title=\"2. 切换分支\"></a>2. 切换分支</h4><p>使用 <code>git checkout</code> 或 <code>git switch</code> 来切换到其他分支。在 Git 2.23 之后，Git 引入了 <code>git switch</code>，它专门用于切换分支，更加直观和安全。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> switch feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将切换到 <code>feature/new-feature</code> 分支，并更新工作区和暂存区以匹配该分支的状态。</p>\n<h4 id=\"3-创建并切换到新分支\"><a href=\"#3-创建并切换到新分支\" class=\"headerlink\" title=\"3. 创建并切换到新分支\"></a>3. 创建并切换到新分支</h4><p>可以使用 <code>git checkout -b</code> 或 <code>git switch -c</code> 在创建新分支的同时切换到该分支。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> switch <span class=\"token parameter variable\">-c</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将创建 <code>feature/new-feature</code> 分支并立即切换到该分支。</p>\n<h4 id=\"4-查看分支\"><a href=\"#4-查看分支\" class=\"headerlink\" title=\"4. 查看分支\"></a>4. 查看分支</h4><p>要查看所有分支，可以使用 <code>git branch</code> 命令。当前所在的分支会以 <code>*</code> 标记。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">  develop\n* feature/new-feature\n  master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这表明你当前在 <code>feature/new-feature</code> 分支上。</p>\n<h4 id=\"5-合并分支\"><a href=\"#5-合并分支\" class=\"headerlink\" title=\"5. 合并分支\"></a>5. 合并分支</h4><p>当你完成了在某个分支上的工作并希望将其合并回主分支（例如 <code>master</code> 或 <code>develop</code>），你可以使用 <code>git merge</code> 命令。</p>\n<p>合并分支的步骤：</p>\n<ol>\n<li><p>切换到目标分支（通常是 master 或 develop）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>合并工作分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> merge feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将把 <code>feature/new-feature</code>分支的更改合并到 <code>master</code>分支中。如果没有冲突，Git 会自动完成合并。如果有冲突，需要手动解决后再完成合并。</p>\n</li>\n</ol>\n<h4 id=\"6-处理合并冲突\"><a href=\"#6-处理合并冲突\" class=\"headerlink\" title=\"6. 处理合并冲突\"></a>6. 处理合并冲突</h4><p>当 Git 无法自动合并两个分支时，会提示合并冲突。此时，需要手动编辑冲突的文件，解决冲突后再继续合并。</p>\n<ol>\n<li><p>打开冲突文件，找到冲突标记：</p>\n<pre class=\"line-numbers language-diff\" data-language=\"diff\"><code class=\"language-diff\"><span class=\"token deleted-arrow deleted\"><span class=\"token prefix deleted\">&lt;</span><span class=\"token line\">&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n</span></span>当前分支的代码\n=======\n被合并分支的代码\n<span class=\"token inserted-arrow inserted\"><span class=\"token prefix inserted\">&gt;</span><span class=\"token line\">&gt;&gt;&gt;&gt;&gt;&gt; feature/new-feature</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>手动解决冲突</strong>，编辑文件使其符合预期。</p>\n</li>\n<li><p>标记冲突为已解决并提交：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> 冲突文件\n<span class=\"token function\">git</span> commit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"7-删除分支\"><a href=\"#7-删除分支\" class=\"headerlink\" title=\"7. 删除分支\"></a>7. 删除分支</h4><p>当一个分支的工作完成且不再需要时，可以将其删除。</p>\n<p>删除本地分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果分支尚未合并，Git 会阻止删除，以防丢失更改。要强制删除，可以使用 <code>-D</code> 选项：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除远程分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将删除远程仓库中的 <code>feature/new-feature</code> 分支。</p>\n<h4 id=\"8-远程分支\"><a href=\"#8-远程分支\" class=\"headerlink\" title=\"8. 远程分支\"></a>8. 远程分支</h4><p>远程分支是托管在远程仓库中的分支，例如 GitHub、GitLab 上的分支。通常，当你推送分支到远程仓库时，该分支会自动在远程仓库中创建。</p>\n<p>查看远程分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-r</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将列出所有远程分支。</p>\n<p>推送本地分支到远程：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将 <code>feature/new-feature</code> 分支推送到远程仓库的 <code>origin</code>（默认远程名称）上。</p>\n<h4 id=\"9-跟踪远程分支\"><a href=\"#9-跟踪远程分支\" class=\"headerlink\" title=\"9. 跟踪远程分支\"></a>9. 跟踪远程分支</h4><p>你可以将本地分支与远程分支关联，使推送和拉取更方便。</p>\n<h4 id=\"创建跟踪分支：\"><a href=\"#创建跟踪分支：\" class=\"headerlink\" title=\"创建跟踪分支：\"></a>创建跟踪分支：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> feature/new-feature origin/feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者，如果分支已经存在：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/feature/new-feature<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"10-更新远程分支\"><a href=\"#10-更新远程分支\" class=\"headerlink\" title=\"10. 更新远程分支\"></a>10. 更新远程分支</h4><p>要同步本地仓库与远程仓库的状态，使用 <code>git fetch</code> 或 <code>git pull</code>。</p>\n<p>拉取更新并合并：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将从远程 <code>master</code> 分支拉取最新的更改并合并到当前分支。</p>\n<p>仅获取更新（不合并）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> fetch origin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将更新本地的远程分支信息，但不合并更改。</p>\n<h3 id=\"8-存储进度\"><a href=\"#8-存储进度\" class=\"headerlink\" title=\"8.存储进度\"></a>8.存储进度</h3><p><code>git stash</code> 允许你将当前的工作进度（包括工作区和暂存区的更改）暂时存储起来，以便可以在一个干净的工作区中进行其他操作。之后，你可以随时恢复这些存储的更改。</p>\n<h4 id=\"1-基本命令：git-stash\"><a href=\"#1-基本命令：git-stash\" class=\"headerlink\" title=\"1. 基本命令：git stash\"></a>1. 基本命令：<code>git stash</code></h4><h5 id=\"1-1-存储当前工作区和暂存区的更改\"><a href=\"#1-1-存储当前工作区和暂存区的更改\" class=\"headerlink\" title=\"1.1 存储当前工作区和暂存区的更改\"></a>1.1 存储当前工作区和暂存区的更改</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将当前分支的工作区和暂存区的所有更改存储起来，工作区将恢复到最后一次提交时的状态。存储的更改会被放入一个“栈”中，供以后恢复使用。</p>\n<h5 id=\"1-2-存储时添加描述信息\"><a href=\"#1-2-存储时添加描述信息\" class=\"headerlink\" title=\"1.2 存储时添加描述信息\"></a>1.2 存储时添加描述信息</h5><p>你可以为存储的更改添加描述信息，以便更容易区分多个存储。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash save <span class=\"token string\">\"描述信息\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"2-查看存储：git-stash-list\"><a href=\"#2-查看存储：git-stash-list\" class=\"headerlink\" title=\"2. 查看存储：git stash list\"></a>2. 查看存储：<code>git stash list</code></h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会列出所有的存储记录，每一条记录都有唯一的索引和描述信息。输出示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">stash@<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span>: WIP on master: 5d1e76a 修复首页布局\nstash@<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>: WIP on master: 2a7b8d9 添加新功能<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>stash@{0}</code> 是最顶部的存储记录，<code>stash@{1}</code> 是次存储记录，依此类推。</p>\n<h4 id=\"3-恢复存储：git-stash-pop-和-git-stash-apply\"><a href=\"#3-恢复存储：git-stash-pop-和-git-stash-apply\" class=\"headerlink\" title=\"3. 恢复存储：git stash pop 和 git stash apply\"></a>3. 恢复存储：<code>git stash pop</code> 和 <code>git stash apply</code></h4><h5 id=\"3-1-git-stash-pop\"><a href=\"#3-1-git-stash-pop\" class=\"headerlink\" title=\"3.1 git stash pop\"></a>3.1 <code>git stash pop</code></h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash pop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将最近存储的更改恢复到工作区和暂存区，并将该存储记录从列表中删除。如果有冲突，Git 会提示手动解决冲突。</p>\n<h5 id=\"3-2-git-stash-apply\"><a href=\"#3-2-git-stash-apply\" class=\"headerlink\" title=\"3.2 git stash apply\"></a>3.2 <code>git stash apply</code></h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash apply<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将最近的存储恢复到工作区和暂存区，但不会删除该存储记录。如果你需要多次应用存储，使用 <code>apply</code> 比 <code>pop</code> 更合适。</p>\n<h4 id=\"3-3-恢复特定存储\"><a href=\"#3-3-恢复特定存储\" class=\"headerlink\" title=\"3.3 恢复特定存储\"></a>3.3 恢复特定存储</h4><p>如果有多个存储记录，你可以指定恢复某个特定的存储。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> stash apply stash@<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会恢复索引为 <code>stash@{1}</code> 的存储，并保留存储记录。</p>\n",
            "tags": [
                "git"
            ]
        }
    ]
}