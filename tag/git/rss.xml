<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>逐梦 • Posts by &#34;git&#34; tag</title>
        <link>https://0xdadream.github.io</link>
        <description>Welcome to my blog</description>
        <language>zh-CN</language>
        <pubDate>Fri, 09 Aug 2024 09:25:00 +0800</pubDate>
        <lastBuildDate>Fri, 09 Aug 2024 09:25:00 +0800</lastBuildDate>
        <category>tip</category>
        <category>intel</category>
        <category>cloudflare</category>
        <category>安装</category>
        <category>tips</category>
        <category>re</category>
        <category>工具</category>
        <category>Java</category>
        <category>conda</category>
        <category>linux</category>
        <category>教程</category>
        <category>环境</category>
        <category>bug</category>
        <category>web</category>
        <category>wp</category>
        <category>BUUCTF</category>
        <category>攻防世界</category>
        <category>windows</category>
        <category>server</category>
        <category>comfyui</category>
        <category>powershell</category>
        <category>wall</category>
        <category>tools</category>
        <category>sql</category>
        <category>代码审计</category>
        <category>漏洞复现</category>
        <category>emby</category>
        <category>python</category>
        <category>git</category>
        <category>google</category>
        <category>java</category>
        <category>学习</category>
        <category>命令</category>
        <category>远程</category>
        <category>php</category>
        <category>文件上传</category>
        <category>命令行</category>
        <category>下载</category>
        <category>区块链</category>
        <category>汇编</category>
        <category>密码学</category>
        <category>i春秋</category>
        <category>证书</category>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2024/08/09/git-shi-yong/</guid>
            <title>git使用</title>
            <link>https://0xdadream.github.io/2024/08/09/git-shi-yong/</link>
            <category>git</category>
            <pubDate>Fri, 09 Aug 2024 09:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;git使用&#34;&gt;&lt;a href=&#34;#git使用&#34; class=&#34;headerlink&#34; title=&#34;git使用&#34;&gt;&lt;/a&gt;git使用&lt;/h1&gt;&lt;h3 id=&#34;1-安装-Git&#34;&gt;&lt;a href=&#34;#1-安装-Git&#34; class=&#34;headerlink&#34; title=&#34;1. 安装 Git&#34;&gt;&lt;/a&gt;1. 安装 Git&lt;/h3&gt;&lt;h4 id=&#34;Windows&#34;&gt;&lt;a href=&#34;#Windows&#34; class=&#34;headerlink&#34; title=&#34;Windows&#34;&gt;&lt;/a&gt;Windows&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;从 &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;Git 官方网站&lt;/a&gt; 下载 Git 安装程序。&lt;/li&gt;
&lt;li&gt;双击安装程序并按照提示完成安装。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;Linux&#34;&gt;&lt;a href=&#34;#Linux&#34; class=&#34;headerlink&#34; title=&#34;Linux&#34;&gt;&lt;/a&gt;Linux&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用包管理器安装 Git（以 Ubuntu 为例）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; update
&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-配置-Git&#34;&gt;&lt;a href=&#34;#2-配置-Git&#34; class=&#34;headerlink&#34; title=&#34;2. 配置 Git&#34;&gt;&lt;/a&gt;2. 配置 Git&lt;/h3&gt;&lt;p&gt;安装完成后，配置用户名和邮箱：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; user.name &lt;span class=&#34;token string&#34;&gt;&#34;你的名字&#34;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; user.email &lt;span class=&#34;token string&#34;&gt;&#34;你的邮箱&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置代理&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 设置 HTTP 和 HTTPS 代理&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; http.proxy http://&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;代理地址&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;端口&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; https.proxy http://&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;代理地址&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;端口&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 如果是 SOCKS5 代理&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; http.proxy socks5://&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;代理地址&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;端口&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; https.proxy socks5://&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;代理地址&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;端口&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 示例&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; http.proxy http://127.0.0.1:1080
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; https.proxy socks5://127.0.0.1:1080&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;撤销代理&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 取消 HTTP 和 HTTPS 代理&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--unset&lt;/span&gt; http.proxy
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--unset&lt;/span&gt; https.proxy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;验证&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--get&lt;/span&gt; http.proxy
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--get&lt;/span&gt; https.proxy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在powershell终端设置一次代理就不会改变，其他未测试，可以修改配置文件，如下&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 临时设置（当前终端）&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;http_proxy&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;http://&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;代理地址&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;端口&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;https_proxy&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;http://&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;代理地址&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;端口&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 示例&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;http_proxy&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;http://127.0.0.1:1080
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;https_proxy&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;http://127.0.0.1:1080

&lt;span class=&#34;token comment&#34;&gt;# 永久设置（在 `.bashrc` 或 `.zshrc` 中添加）&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;export http_proxy=http://127.0.0.1:1080&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;export https_proxy=http://127.0.0.1:1080&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.bashrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-创建-SSH-Key&#34;&gt;&lt;a href=&#34;#3-创建-SSH-Key&#34; class=&#34;headerlink&#34; title=&#34;3. 创建 SSH Key&#34;&gt;&lt;/a&gt;3. 创建 SSH Key&lt;/h3&gt;&lt;p&gt;如果需要使用 SSH 方式连接 GitHub，生成 SSH key 并添加到 GitHub。&lt;/p&gt;
&lt;h4 id=&#34;生成-SSH-Key&#34;&gt;&lt;a href=&#34;#生成-SSH-Key&#34; class=&#34;headerlink&#34; title=&#34;生成 SSH Key&#34;&gt;&lt;/a&gt;生成 SSH Key&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;ssh-keygen -t rsa -C &#34;你的邮箱&#34;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;按提示操作，默认保存位置即可。生成完成后，使用以下命令查看公钥：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; ~/.ssh/id_rsa.pub&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;添加-SSH-Key-到-GitHub&#34;&gt;&lt;a href=&#34;#添加-SSH-Key-到-GitHub&#34; class=&#34;headerlink&#34; title=&#34;添加 SSH Key 到 GitHub&#34;&gt;&lt;/a&gt;添加 SSH Key 到 GitHub&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;登录 GitHub，进入 &lt;a href=&#34;https://github.com/settings/keys&#34;&gt;SSH and GPG keys&lt;/a&gt; 页面。&lt;/li&gt;
&lt;li&gt;点击 “New SSH key”，粘贴上一步生成的公钥内容，点击 “Add SSH key”。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-创建-Git-仓库&#34;&gt;&lt;a href=&#34;#4-创建-Git-仓库&#34; class=&#34;headerlink&#34; title=&#34;4. 创建 Git 仓库&#34;&gt;&lt;/a&gt;4. 创建 Git 仓库&lt;/h3&gt;&lt;h4 id=&#34;本地仓库&#34;&gt;&lt;a href=&#34;#本地仓库&#34; class=&#34;headerlink&#34; title=&#34;本地仓库&#34;&gt;&lt;/a&gt;本地仓库&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个新的目录并进入：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; my_project
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; my_project&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;初始化 Git 仓库：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; init&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;远程仓库&#34;&gt;&lt;a href=&#34;#远程仓库&#34; class=&#34;headerlink&#34; title=&#34;远程仓库&#34;&gt;&lt;/a&gt;远程仓库&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;登录 GitHub，点击右上角 “+”，选择 “New repository”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;填写仓库名和描述，点击 “Create repository”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt; 文件用于告诉 Git 哪些文件或目录不应该被添加到版本控制中。它在 Git 项目中非常重要，特别是当你的项目包含一些不需要共享的文件，如编译后的二进制文件、临时文件、或包含敏感信息的配置文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt; 文件通常放在项目的根目录下，但你也可以在子目录中添加 &lt;code&gt;.gitignore&lt;/code&gt; 文件，作用范围仅限于该目录及其子目录。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt; 文件的语法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;忽略特定文件或目录&lt;/strong&gt;：在 &lt;code&gt;.gitignore&lt;/code&gt; 中直接写上文件名或目录名。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 忽略文件&lt;/span&gt;
secret.txt

&lt;span class=&#34;token comment&#34;&gt;# 忽略目录&lt;/span&gt;
/logs/&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;通配符&lt;/strong&gt;：使用 &lt;code&gt;*&lt;/code&gt; 代表任意字符，&lt;code&gt;?&lt;/code&gt; 代表单个字符，&lt;code&gt;[abc]&lt;/code&gt; 代表匹配集合中的任意一个字符。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 忽略所有 .log 文件&lt;/span&gt;
*.log

&lt;span class=&#34;token comment&#34;&gt;# 忽略以 &#34;temp&#34; 开头的文件&lt;/span&gt;
temp*

&lt;span class=&#34;token comment&#34;&gt;# 忽略名为 &#34;backup&#34; 或 &#34;bak&#34; 的文件&lt;/span&gt;
*.&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;bB&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;aA&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;kK&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;排除规则&lt;/strong&gt;：以 &lt;code&gt;!&lt;/code&gt; 开头的行用于排除某些文件或目录，这些文件即使符合前面的忽略规则也不会被忽略。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 忽略所有 .log 文件，但不忽略 important.log&lt;/span&gt;
*.log
&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;important.log&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;指定路径&lt;/strong&gt;：使用斜杠 &lt;code&gt;/&lt;/code&gt; 来表示目录路径。以斜杠开头表示从根目录开始匹配。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 只忽略根目录下的 &#34;config.json&#34;，不忽略其他目录中的 &#34;config.json&#34;&lt;/span&gt;
/config.json&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5-关联本地仓库与远程仓库&#34;&gt;&lt;a href=&#34;#5-关联本地仓库与远程仓库&#34; class=&#34;headerlink&#34; title=&#34;5. 关联本地仓库与远程仓库&#34;&gt;&lt;/a&gt;5. 关联本地仓库与远程仓库&lt;/h3&gt;&lt;p&gt;在本地仓库中，执行以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; origin git@github.com:你的用户名/仓库名.git&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git remote add&lt;/code&gt; 是一个 Git 命令，用于向你的本地仓库添加一个远程仓库。一个远程仓库是一个托管在某个服务器上的 Git 仓库，你可以将本地的更改推送到远程仓库，也可以从远程仓库拉取更新。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; 是这个远程仓库的名字。你可以把它理解为远程仓库的一个别名，便于你以后引用这个远程仓库。在大多数情况下，&lt;code&gt;origin&lt;/code&gt; 是默认的名字，用于指向你克隆的或第一次关联的远程仓库。&lt;/p&gt;
&lt;p&gt;通过执行这条命令，你告诉 Git：**这个本地仓库的远程仓库是位于 GitHub 上的 &lt;code&gt;git@github.com:你的用户名/仓库名.git&lt;/code&gt; 这个位置，并且将它命名为 &lt;code&gt;origin&lt;/code&gt;**。&lt;/p&gt;
&lt;p&gt;之后，你可以使用类似 &lt;code&gt;git push origin master&lt;/code&gt; 的命令将本地的代码推送到 GitHub 上的远程仓库，或者使用 &lt;code&gt;git pull origin master&lt;/code&gt; 从 GitHub 上拉取更新。&lt;/p&gt;
&lt;h3 id=&#34;6-基本-Git-操作&#34;&gt;&lt;a href=&#34;#6-基本-Git-操作&#34; class=&#34;headerlink&#34; title=&#34;6. 基本 Git 操作&#34;&gt;&lt;/a&gt;6. 基本 Git 操作&lt;/h3&gt;&lt;h4 id=&#34;添加文件并提交&#34;&gt;&lt;a href=&#34;#添加文件并提交&#34; class=&#34;headerlink&#34; title=&#34;添加文件并提交&#34;&gt;&lt;/a&gt;添加文件并提交&lt;/h4&gt;&lt;p&gt;提交前的工作目录是工作区（文件操作的区域）&lt;/p&gt;
&lt;p&gt;添加文件到暂存区：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; 文件名&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这条命令用于将指定的文件添加到 Git 的暂存区（Stage）。暂存区是一个临时区域，你可以在其中暂时存放那些你准备提交到仓库的更改。文件在添加到暂存区之前，可以进行修改，而这些修改不会立即提交到仓库中。&lt;/p&gt;
&lt;p&gt;或添加所有文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交到本地仓库：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;提交信息&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这条命令用于将暂存区中的所有内容提交到本地 Git 仓库，并为此次提交添加一条消息。&lt;code&gt;-m &#34;提交信息&#34;&lt;/code&gt; 选项允许你在命令行中直接输入一条提交信息，而不需要进入编辑器。&lt;/p&gt;
&lt;h4 id=&#34;查看暂存区的文件&#34;&gt;&lt;a href=&#34;#查看暂存区的文件&#34; class=&#34;headerlink&#34; title=&#34;查看暂存区的文件&#34;&gt;&lt;/a&gt;查看暂存区的文件&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git status&lt;/code&gt; 命令会显示工作区和暂存区的状态，包括哪些文件被修改但尚未添加到暂存区，以及哪些文件已经被添加到暂存区。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; status&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出中，暂存区中的文件会显示在 &lt;code&gt;Changes to be committed&lt;/code&gt; 部分。例如：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;Changes to be committed:
  &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;token string&#34;&gt;&#34;git restore --staged &amp;lt;file&amp;gt;...&#34;&lt;/span&gt; to unstage&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        modified:   index.html
        new file:   style.css&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这意味着 &lt;code&gt;index.html&lt;/code&gt; 文件已被修改并添加到暂存区，而 &lt;code&gt;style.css&lt;/code&gt; 是一个新文件，也已经被添加到暂存区。&lt;/p&gt;
&lt;h4 id=&#34;使用-git-diff-cached-查看暂存区的更改&#34;&gt;&lt;a href=&#34;#使用-git-diff-cached-查看暂存区的更改&#34; class=&#34;headerlink&#34; title=&#34;使用 git diff --cached 查看暂存区的更改&#34;&gt;&lt;/a&gt;使用 &lt;code&gt;git diff --cached&lt;/code&gt; 查看暂存区的更改&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git diff --cached&lt;/code&gt; 命令会显示暂存区中的更改细节。这个命令的输出与 &lt;code&gt;git diff&lt;/code&gt; 类似，但只显示暂存区中的内容，而不包括工作区中尚未添加到暂存区的修改。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--cached&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者你也可以使用 &lt;code&gt;git diff --staged&lt;/code&gt;，效果是一样的。&lt;/p&gt;
&lt;p&gt;这个命令将显示具体的代码差异，即哪些行被修改、添加或删除。例如：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--git&lt;/span&gt; a/index.html b/index.html
index 83b2d7e&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;e39a4ff &lt;span class=&#34;token number&#34;&gt;100644&lt;/span&gt;
--- a/index.html
+++ b/index.html
@@ -12,7 +12,7 @@
   &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;My Website&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/title&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/head&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
-  &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;h&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, World&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/h&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;
+  &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;h&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;Welcome to My Website&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/h&lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;1&lt;/span&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/body&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;/html&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;从-Git-暂存区移除文件&#34;&gt;&lt;a href=&#34;#从-Git-暂存区移除文件&#34; class=&#34;headerlink&#34; title=&#34;从 Git 暂存区移除文件&#34;&gt;&lt;/a&gt;从 Git 暂存区移除文件&lt;/h4&gt;&lt;h5 id=&#34;使用-git-restore-staged&#34;&gt;&lt;a href=&#34;#使用-git-restore-staged&#34; class=&#34;headerlink&#34; title=&#34;使用 git restore --staged&#34;&gt;&lt;/a&gt;使用 &lt;code&gt;git restore --staged&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;用于将文件从暂存区移除，并恢复到工作区的状态。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; restore &lt;span class=&#34;token parameter variable&#34;&gt;--staged&lt;/span&gt; 文件名&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;使用-git-reset&#34;&gt;&lt;a href=&#34;#使用-git-reset&#34; class=&#34;headerlink&#34; title=&#34;使用 git reset&#34;&gt;&lt;/a&gt;使用 &lt;code&gt;git reset&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;用于回滚或取消更改。使用 &lt;code&gt;git reset&lt;/code&gt; 也可以将文件从暂存区移除。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset 文件名&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;移除所有文件&#34;&gt;&lt;a href=&#34;#移除所有文件&#34; class=&#34;headerlink&#34; title=&#34;移除所有文件&#34;&gt;&lt;/a&gt;移除所有文件&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将把暂存区中的所有文件全部移除，同时保留它们在工作区中的修改。&lt;/p&gt;
&lt;h4 id=&#34;恢复工作区文件&#34;&gt;&lt;a href=&#34;#恢复工作区文件&#34; class=&#34;headerlink&#34; title=&#34;恢复工作区文件&#34;&gt;&lt;/a&gt;恢复工作区文件&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout -- test.txt
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout &lt;span class=&#34;token comment&#34;&gt;# 直接还原为最新版本&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是用于丢弃工作区中对 &lt;code&gt;txt&lt;/code&gt; 文件的所有未提交更改的命令。具体来说，它将 &lt;code&gt;txt&lt;/code&gt; 文件恢复到最后一次提交时的状态。&lt;/p&gt;
&lt;h4 id=&#34;版本回退&#34;&gt;&lt;a href=&#34;#版本回退&#34; class=&#34;headerlink&#34; title=&#34;版本回退&#34;&gt;&lt;/a&gt;版本回退&lt;/h4&gt;&lt;h5 id=&#34;使用-git-reset-回退版本&#34;&gt;&lt;a href=&#34;#使用-git-reset-回退版本&#34; class=&#34;headerlink&#34; title=&#34;使用 git reset 回退版本&#34;&gt;&lt;/a&gt;使用 &lt;code&gt;git reset&lt;/code&gt; 回退版本&lt;/h5&gt;&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt; 用于回退到某个特定的提交，并且可以选择性地影响暂存区和工作区。&lt;/p&gt;
&lt;p&gt;常用选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--soft&lt;/code&gt;：仅移动 &lt;code&gt;HEAD&lt;/code&gt;，不影响暂存区和工作区。回退后的所有更改都保留在暂存区中。（HEAD为当前版本）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--mixed&lt;/code&gt;（默认选项）：移动 &lt;code&gt;HEAD&lt;/code&gt;，并重置暂存区，但保留工作区的更改。回退后的更改仍在工作区，但不在暂存区。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--hard&lt;/code&gt;：移动 &lt;code&gt;HEAD&lt;/code&gt;，同时重置暂存区和工作区。回退后的所有更改都被删除，不可恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设你想回退到特定的提交 &lt;code&gt;abc123&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;软回退：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token parameter variable&#34;&gt;--soft&lt;/span&gt; abc123&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将把当前分支指针（&lt;code&gt;HEAD&lt;/code&gt;）移到 &lt;code&gt;abc123&lt;/code&gt;，但保持工作区和暂存区的所有更改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;混合回退：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token parameter variable&#34;&gt;--mixed&lt;/span&gt; abc123&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将回退到 &lt;code&gt;abc123&lt;/code&gt;，并将暂存区重置为该提交的状态，但保留工作区的更改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;硬回退：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token parameter variable&#34;&gt;--hard&lt;/span&gt; abc123&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将回退到 &lt;code&gt;abc123&lt;/code&gt;，并删除所有在 &lt;code&gt;abc123&lt;/code&gt; 之后的更改。这个操作不可逆，因此使用前请务必确认。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;使用-git-revert-进行安全回退&#34;&gt;&lt;a href=&#34;#使用-git-revert-进行安全回退&#34; class=&#34;headerlink&#34; title=&#34;使用 git revert 进行安全回退&#34;&gt;&lt;/a&gt;使用 &lt;code&gt;git revert&lt;/code&gt; 进行安全回退&lt;/h5&gt;&lt;p&gt;&lt;code&gt;git revert&lt;/code&gt; 用于生成一个新的提交，该提交会撤销指定的历史提交，而不会改变项目的提交历史。&lt;code&gt;git revert&lt;/code&gt; 是一种“安全”的回退方式，因为它保留了所有历史记录。&lt;/p&gt;
&lt;p&gt;假设你想撤销提交 &lt;code&gt;abc123&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; revert abc123&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将生成一个新的提交，它的作用是撤销 &lt;code&gt;abc123&lt;/code&gt; 所做的更改，而不会影响 &lt;code&gt;abc123&lt;/code&gt; 之前或之后的其他提交。&lt;/p&gt;
&lt;h5 id=&#34;使用-git-checkout-回退到特定提交（仅查看）&#34;&gt;&lt;a href=&#34;#使用-git-checkout-回退到特定提交（仅查看）&#34; class=&#34;headerlink&#34; title=&#34;使用 git checkout 回退到特定提交（仅查看）&#34;&gt;&lt;/a&gt;使用 &lt;code&gt;git checkout&lt;/code&gt; 回退到特定提交（仅查看）&lt;/h5&gt;&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt; 主要用于切换分支或查看特定提交。你可以暂时回退到某个提交，但不修改当前分支的状态。&lt;/p&gt;
&lt;p&gt;假设你想查看 &lt;code&gt;abc123&lt;/code&gt; 提交的状态。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout abc123&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将把工作区和暂存区切换到 &lt;code&gt;abc123&lt;/code&gt; 提交的状态，但不会更改当前分支的指针。如果你想回到最新的状态，可以使用：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（假设你在 &lt;code&gt;master&lt;/code&gt; 分支上）&lt;/p&gt;
&lt;h5 id=&#34;如何找到提交的哈希值&#34;&gt;&lt;a href=&#34;#如何找到提交的哈希值&#34; class=&#34;headerlink&#34; title=&#34;如何找到提交的哈希值&#34;&gt;&lt;/a&gt;如何找到提交的哈希值&lt;/h5&gt;&lt;p&gt;在执行版本回退前，你需要知道要回退到的提交的哈希值（类似 &lt;code&gt;abc123&lt;/code&gt;）。可以使用以下命令查看提交历史：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; log
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; log &lt;span class=&#34;token parameter variable&#34;&gt;--pretty&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;oneline &lt;span class=&#34;token comment&#34;&gt;# 显示一行&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token parameter variable&#34;&gt;--hard&lt;/span&gt; HEAD^ &lt;span class=&#34;token comment&#34;&gt;# 回退上一个版本&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token parameter variable&#34;&gt;--hard&lt;/span&gt; HEAD^^ &lt;span class=&#34;token comment&#34;&gt;# 同理&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token parameter variable&#34;&gt;--hard&lt;/span&gt; HEAD~10&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将显示所有提交的日志，包括提交哈希、作者、日期和提交信息。&lt;/p&gt;
&lt;h4 id=&#34;删除文件&#34;&gt;&lt;a href=&#34;#删除文件&#34; class=&#34;headerlink&#34; title=&#34;删除文件&#34;&gt;&lt;/a&gt;删除文件&lt;/h4&gt;&lt;p&gt;&lt;code&gt;git rm &amp;lt;file&amp;gt;&lt;/code&gt;和&lt;code&gt;git add&amp;lt;file&amp;gt;&lt;/code&gt;效果是一样的&lt;/p&gt;
&lt;h4 id=&#34;推送到远程仓库&#34;&gt;&lt;a href=&#34;#推送到远程仓库&#34; class=&#34;headerlink&#34; title=&#34;推送到远程仓库&#34;&gt;&lt;/a&gt;推送到远程仓库&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin master
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看远程库信息&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; remote &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; origin &lt;span class=&#34;token comment&#34;&gt;# 删除关联&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;克隆远程仓库&#34;&gt;&lt;a href=&#34;#克隆远程仓库&#34; class=&#34;headerlink&#34; title=&#34;克隆远程仓库&#34;&gt;&lt;/a&gt;克隆远程仓库&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone git@github.com:你的用户名/仓库名.git&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;拉取更新&#34;&gt;&lt;a href=&#34;#拉取更新&#34; class=&#34;headerlink&#34; title=&#34;拉取更新&#34;&gt;&lt;/a&gt;拉取更新&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; pull origin master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;Git标签&#34;&gt;&lt;a href=&#34;#Git标签&#34; class=&#34;headerlink&#34; title=&#34;Git标签&#34;&gt;&lt;/a&gt;Git标签&lt;/h4&gt;&lt;p&gt;给某个提交打标签（通常用于发布版本）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; tag &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; v1.0 &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;版本1.0&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;推送标签到远程仓库：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin &lt;span class=&#34;token parameter variable&#34;&gt;--tags&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-分支管理&#34;&gt;&lt;a href=&#34;#7-分支管理&#34; class=&#34;headerlink&#34; title=&#34;7. 分支管理&#34;&gt;&lt;/a&gt;7. 分支管理&lt;/h3&gt;&lt;h4 id=&#34;1-创建分支&#34;&gt;&lt;a href=&#34;#1-创建分支&#34; class=&#34;headerlink&#34; title=&#34;1. 创建分支&#34;&gt;&lt;/a&gt;1. 创建分支&lt;/h4&gt;&lt;p&gt;要创建一个新的分支，使用 &lt;code&gt;git branch&lt;/code&gt; 命令。新分支会基于你当前所在的分支创建。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会创建一个名为 &lt;code&gt;feature/new-feature&lt;/code&gt; 的新分支，但不会切换到该分支。&lt;/p&gt;
&lt;h4 id=&#34;2-切换分支&#34;&gt;&lt;a href=&#34;#2-切换分支&#34; class=&#34;headerlink&#34; title=&#34;2. 切换分支&#34;&gt;&lt;/a&gt;2. 切换分支&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;git checkout&lt;/code&gt; 或 &lt;code&gt;git switch&lt;/code&gt; 来切换到其他分支。在 Git 2.23 之后，Git 引入了 &lt;code&gt;git switch&lt;/code&gt;，它专门用于切换分支，更加直观和安全。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者使用：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; switch feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将切换到 &lt;code&gt;feature/new-feature&lt;/code&gt; 分支，并更新工作区和暂存区以匹配该分支的状态。&lt;/p&gt;
&lt;h4 id=&#34;3-创建并切换到新分支&#34;&gt;&lt;a href=&#34;#3-创建并切换到新分支&#34; class=&#34;headerlink&#34; title=&#34;3. 创建并切换到新分支&#34;&gt;&lt;/a&gt;3. 创建并切换到新分支&lt;/h4&gt;&lt;p&gt;可以使用 &lt;code&gt;git checkout -b&lt;/code&gt; 或 &lt;code&gt;git switch -c&lt;/code&gt; 在创建新分支的同时切换到该分支。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout &lt;span class=&#34;token parameter variable&#34;&gt;-b&lt;/span&gt; feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者使用：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; switch &lt;span class=&#34;token parameter variable&#34;&gt;-c&lt;/span&gt; feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将创建 &lt;code&gt;feature/new-feature&lt;/code&gt; 分支并立即切换到该分支。&lt;/p&gt;
&lt;h4 id=&#34;4-查看分支&#34;&gt;&lt;a href=&#34;#4-查看分支&#34; class=&#34;headerlink&#34; title=&#34;4. 查看分支&#34;&gt;&lt;/a&gt;4. 查看分支&lt;/h4&gt;&lt;p&gt;要查看所有分支，可以使用 &lt;code&gt;git branch&lt;/code&gt; 命令。当前所在的分支会以 &lt;code&gt;*&lt;/code&gt; 标记。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出示例：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;  develop
* feature/new-feature
  master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这表明你当前在 &lt;code&gt;feature/new-feature&lt;/code&gt; 分支上。&lt;/p&gt;
&lt;h4 id=&#34;5-合并分支&#34;&gt;&lt;a href=&#34;#5-合并分支&#34; class=&#34;headerlink&#34; title=&#34;5. 合并分支&#34;&gt;&lt;/a&gt;5. 合并分支&lt;/h4&gt;&lt;p&gt;当你完成了在某个分支上的工作并希望将其合并回主分支（例如 &lt;code&gt;master&lt;/code&gt; 或 &lt;code&gt;develop&lt;/code&gt;），你可以使用 &lt;code&gt;git merge&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;合并分支的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;切换到目标分支（通常是 master 或 develop）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合并工作分支&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; merge feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将把 &lt;code&gt;feature/new-feature&lt;/code&gt;分支的更改合并到 &lt;code&gt;master&lt;/code&gt;分支中。如果没有冲突，Git 会自动完成合并。如果有冲突，需要手动解决后再完成合并。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;6-处理合并冲突&#34;&gt;&lt;a href=&#34;#6-处理合并冲突&#34; class=&#34;headerlink&#34; title=&#34;6. 处理合并冲突&#34;&gt;&lt;/a&gt;6. 处理合并冲突&lt;/h4&gt;&lt;p&gt;当 Git 无法自动合并两个分支时，会提示合并冲突。此时，需要手动编辑冲突的文件，解决冲突后再继续合并。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开冲突文件，找到冲突标记：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-diff&#34; data-language=&#34;diff&#34;&gt;&lt;code class=&#34;language-diff&#34;&gt;&lt;span class=&#34;token deleted-arrow deleted&#34;&gt;&lt;span class=&#34;token prefix deleted&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token line&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
&lt;/span&gt;&lt;/span&gt;当前分支的代码
=======
被合并分支的代码
&lt;span class=&#34;token inserted-arrow inserted&#34;&gt;&lt;span class=&#34;token prefix inserted&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token line&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; feature/new-feature&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;手动解决冲突&lt;/strong&gt;，编辑文件使其符合预期。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;标记冲突为已解决并提交：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; 冲突文件
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;7-删除分支&#34;&gt;&lt;a href=&#34;#7-删除分支&#34; class=&#34;headerlink&#34; title=&#34;7. 删除分支&#34;&gt;&lt;/a&gt;7. 删除分支&lt;/h4&gt;&lt;p&gt;当一个分支的工作完成且不再需要时，可以将其删除。&lt;/p&gt;
&lt;p&gt;删除本地分支：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果分支尚未合并，Git 会阻止删除，以防丢失更改。要强制删除，可以使用 &lt;code&gt;-D&lt;/code&gt; 选项：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch &lt;span class=&#34;token parameter variable&#34;&gt;-D&lt;/span&gt; feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除远程分支：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin &lt;span class=&#34;token parameter variable&#34;&gt;--delete&lt;/span&gt; feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将删除远程仓库中的 &lt;code&gt;feature/new-feature&lt;/code&gt; 分支。&lt;/p&gt;
&lt;h4 id=&#34;8-远程分支&#34;&gt;&lt;a href=&#34;#8-远程分支&#34; class=&#34;headerlink&#34; title=&#34;8. 远程分支&#34;&gt;&lt;/a&gt;8. 远程分支&lt;/h4&gt;&lt;p&gt;远程分支是托管在远程仓库中的分支，例如 GitHub、GitLab 上的分支。通常，当你推送分支到远程仓库时，该分支会自动在远程仓库中创建。&lt;/p&gt;
&lt;p&gt;查看远程分支：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将列出所有远程分支。&lt;/p&gt;
&lt;p&gt;推送本地分支到远程：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; push origin feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会将 &lt;code&gt;feature/new-feature&lt;/code&gt; 分支推送到远程仓库的 &lt;code&gt;origin&lt;/code&gt;（默认远程名称）上。&lt;/p&gt;
&lt;h4 id=&#34;9-跟踪远程分支&#34;&gt;&lt;a href=&#34;#9-跟踪远程分支&#34; class=&#34;headerlink&#34; title=&#34;9. 跟踪远程分支&#34;&gt;&lt;/a&gt;9. 跟踪远程分支&lt;/h4&gt;&lt;p&gt;你可以将本地分支与远程分支关联，使推送和拉取更方便。&lt;/p&gt;
&lt;p&gt;创建跟踪分支：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout &lt;span class=&#34;token parameter variable&#34;&gt;-b&lt;/span&gt; feature/new-feature origin/feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者，如果分支已经存在：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch --set-upstream-to&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;origin/feature/new-feature&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;10-更新远程分支&#34;&gt;&lt;a href=&#34;#10-更新远程分支&#34; class=&#34;headerlink&#34; title=&#34;10. 更新远程分支&#34;&gt;&lt;/a&gt;10. 更新远程分支&lt;/h4&gt;&lt;p&gt;要同步本地仓库与远程仓库的状态，使用 &lt;code&gt;git fetch&lt;/code&gt; 或 &lt;code&gt;git pull&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拉取更新并合并：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; pull origin master&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将从远程 &lt;code&gt;master&lt;/code&gt; 分支拉取最新的更改并合并到当前分支。&lt;/p&gt;
&lt;p&gt;仅获取更新（不合并）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; fetch origin&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将更新本地的远程分支信息，但不合并更改。&lt;/p&gt;
&lt;h3 id=&#34;8-存储进度&#34;&gt;&lt;a href=&#34;#8-存储进度&#34; class=&#34;headerlink&#34; title=&#34;8.存储进度&#34;&gt;&lt;/a&gt;8.存储进度&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; 允许你将当前的工作进度（包括工作区和暂存区的更改）暂时存储起来，以便可以在一个干净的工作区中进行其他操作。之后，你可以随时恢复这些存储的更改。&lt;/p&gt;
&lt;h4 id=&#34;1-基本命令：git-stash&#34;&gt;&lt;a href=&#34;#1-基本命令：git-stash&#34; class=&#34;headerlink&#34; title=&#34;1. 基本命令：git stash&#34;&gt;&lt;/a&gt;1. 基本命令：&lt;code&gt;git stash&lt;/code&gt;&lt;/h4&gt;&lt;h5 id=&#34;1-1-存储当前工作区和暂存区的更改&#34;&gt;&lt;a href=&#34;#1-1-存储当前工作区和暂存区的更改&#34; class=&#34;headerlink&#34; title=&#34;1.1 存储当前工作区和暂存区的更改&#34;&gt;&lt;/a&gt;1.1 存储当前工作区和暂存区的更改&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; stash&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会将当前分支的工作区和暂存区的所有更改存储起来，工作区将恢复到最后一次提交时的状态。存储的更改会被放入一个“栈”中，供以后恢复使用。&lt;/p&gt;
&lt;h5 id=&#34;1-2-存储时添加描述信息&#34;&gt;&lt;a href=&#34;#1-2-存储时添加描述信息&#34; class=&#34;headerlink&#34; title=&#34;1.2 存储时添加描述信息&#34;&gt;&lt;/a&gt;1.2 存储时添加描述信息&lt;/h5&gt;&lt;p&gt;你可以为存储的更改添加描述信息，以便更容易区分多个存储。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; stash save &lt;span class=&#34;token string&#34;&gt;&#34;描述信息&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-查看存储：git-stash-list&#34;&gt;&lt;a href=&#34;#2-查看存储：git-stash-list&#34; class=&#34;headerlink&#34; title=&#34;2. 查看存储：git stash list&#34;&gt;&lt;/a&gt;2. 查看存储：&lt;code&gt;git stash list&lt;/code&gt;&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; stash list&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会列出所有的存储记录，每一条记录都有唯一的索引和描述信息。输出示例：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;stash@&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;: WIP on master: 5d1e76a 修复首页布局
stash@&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;: WIP on master: 2a7b8d9 添加新功能&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;stash@{0}&lt;/code&gt; 是最顶部的存储记录，&lt;code&gt;stash@{1}&lt;/code&gt; 是次存储记录，依此类推。&lt;/p&gt;
&lt;h4 id=&#34;3-恢复存储：git-stash-pop-和-git-stash-apply&#34;&gt;&lt;a href=&#34;#3-恢复存储：git-stash-pop-和-git-stash-apply&#34; class=&#34;headerlink&#34; title=&#34;3. 恢复存储：git stash pop 和 git stash apply&#34;&gt;&lt;/a&gt;3. 恢复存储：&lt;code&gt;git stash pop&lt;/code&gt; 和 &lt;code&gt;git stash apply&lt;/code&gt;&lt;/h4&gt;&lt;h5 id=&#34;3-1-git-stash-pop&#34;&gt;&lt;a href=&#34;#3-1-git-stash-pop&#34; class=&#34;headerlink&#34; title=&#34;3.1 git stash pop&#34;&gt;&lt;/a&gt;3.1 &lt;code&gt;git stash pop&lt;/code&gt;&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; stash pop&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会将最近存储的更改恢复到工作区和暂存区，并将该存储记录从列表中删除。如果有冲突，Git 会提示手动解决冲突。&lt;/p&gt;
&lt;h5 id=&#34;3-2-git-stash-apply&#34;&gt;&lt;a href=&#34;#3-2-git-stash-apply&#34; class=&#34;headerlink&#34; title=&#34;3.2 git stash apply&#34;&gt;&lt;/a&gt;3.2 &lt;code&gt;git stash apply&lt;/code&gt;&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; stash apply&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会将最近的存储恢复到工作区和暂存区，但不会删除该存储记录。如果你需要多次应用存储，使用 &lt;code&gt;apply&lt;/code&gt; 比 &lt;code&gt;pop&lt;/code&gt; 更合适。&lt;/p&gt;
&lt;h4 id=&#34;3-3-恢复特定存储&#34;&gt;&lt;a href=&#34;#3-3-恢复特定存储&#34; class=&#34;headerlink&#34; title=&#34;3.3 恢复特定存储&#34;&gt;&lt;/a&gt;3.3 恢复特定存储&lt;/h4&gt;&lt;p&gt;如果有多个存储记录，你可以指定恢复某个特定的存储。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; stash apply stash@&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会恢复索引为 &lt;code&gt;stash@{1}&lt;/code&gt; 的存储，并保留存储记录。&lt;/p&gt;
&lt;h3 id=&#34;9-常见的Git-Hooks&#34;&gt;&lt;a href=&#34;#9-常见的Git-Hooks&#34; class=&#34;headerlink&#34; title=&#34;9.常见的Git Hooks&#34;&gt;&lt;/a&gt;9.常见的Git Hooks&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pre-commit&lt;/strong&gt;：在&lt;code&gt;git commit&lt;/code&gt;命令执行之前触发。可以用来执行代码风格检查或静态分析，防止不合格的代码提交。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;commit-msg&lt;/strong&gt;：在提交信息编辑完成后触发。用于检查提交信息是否符合团队规范（如强制使用特定格式）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;post-commit&lt;/strong&gt;：在提交完成后触发。可以用于执行通知或部署任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;示例：自动检查代码风格&#34;&gt;&lt;a href=&#34;#示例：自动检查代码风格&#34; class=&#34;headerlink&#34; title=&#34;示例：自动检查代码风格&#34;&gt;&lt;/a&gt;示例：自动检查代码风格&lt;/h4&gt;&lt;p&gt;假设你使用&lt;code&gt;pre-commit&lt;/code&gt;钩子来检查Python代码的风格是否符合PEP8标准。以下是一个简单的脚本：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token shebang important&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--cached&lt;/span&gt; --name-only --diff-filter&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ACM &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;\.py$&#39;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-z&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$files&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;token assign-left variable&#34;&gt;unformatted&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;pycodestyle $files&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-z&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$unformatted&lt;/span&gt;&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Python代码风格检查失败:&#34;&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$unformatted&lt;/span&gt;&#34;&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;token builtin class-name&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将这个脚本保存为&lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;并赋予可执行权限：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; +x .git/hooks/pre-commit&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; ]]></description>
        </item>
    </channel>
</rss>
