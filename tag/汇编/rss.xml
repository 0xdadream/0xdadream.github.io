<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>逐梦 • Posts by &#34;汇编&#34; tag</title>
        <link>https://0xdadream.github.io</link>
        <description>Welcome to my blog</description>
        <language>zh-CN</language>
        <pubDate>Sun, 03 Jan 2021 02:00:00 +0800</pubDate>
        <lastBuildDate>Sun, 03 Jan 2021 02:00:00 +0800</lastBuildDate>
        <category>intel</category>
        <category>tip</category>
        <category>安装</category>
        <category>re</category>
        <category>工具</category>
        <category>Java</category>
        <category>linux</category>
        <category>教程</category>
        <category>环境</category>
        <category>bug</category>
        <category>web</category>
        <category>wp</category>
        <category>攻防世界</category>
        <category>BUUCTF</category>
        <category>windows</category>
        <category>server</category>
        <category>conda</category>
        <category>tools</category>
        <category>powershell</category>
        <category>emby</category>
        <category>tips</category>
        <category>sql</category>
        <category>代码审计</category>
        <category>漏洞复现</category>
        <category>python</category>
        <category>git</category>
        <category>google</category>
        <category>java</category>
        <category>命令</category>
        <category>学习</category>
        <category>文件上传</category>
        <category>php</category>
        <category>命令行</category>
        <category>汇编</category>
        <category>密码学</category>
        <category>区块链</category>
        <category>i春秋</category>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2021/01/03/zhi-ling/</guid>
            <title>32位汇编指令总结(代码示例)</title>
            <link>https://0xdadream.github.io/2021/01/03/zhi-ling/</link>
            <category>学习</category>
            <category>汇编</category>
            <pubDate>Sun, 03 Jan 2021 02:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;通用数据传送指令&#34;&gt;&lt;a href=&#34;#通用数据传送指令&#34; class=&#34;headerlink&#34; title=&#34;通用数据传送指令&#34;&gt;&lt;/a&gt;通用数据传送指令&lt;/h1&gt;&lt;h3 id=&#34;MOV-传送字或字节&#34;&gt;&lt;a href=&#34;#MOV-传送字或字节&#34; class=&#34;headerlink&#34; title=&#34;MOV 传送字或字节&#34;&gt;&lt;/a&gt;MOV 传送字或字节&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,10h&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;MOVSX-先符号扩展-再传送&#34;&gt;&lt;a href=&#34;#MOVSX-先符号扩展-再传送&#34; class=&#34;headerlink&#34; title=&#34;MOVSX 先符号扩展,再传送&#34;&gt;&lt;/a&gt;MOVSX 先符号扩展,再传送&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;movsx eax,ax;先进行全零扩展,前16位为F&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;MOVZX-先零扩展-再传送&#34;&gt;&lt;a href=&#34;#MOVZX-先零扩展-再传送&#34; class=&#34;headerlink&#34; title=&#34;MOVZX 先零扩展,再传送&#34;&gt;&lt;/a&gt;MOVZX 先零扩展,再传送&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;movzx eax,ax;先进行全零扩展,前16位为0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PUSH-把字压入堆栈&#34;&gt;&lt;a href=&#34;#PUSH-把字压入堆栈&#34; class=&#34;headerlink&#34; title=&#34;PUSH 把字压入堆栈&#34;&gt;&lt;/a&gt;PUSH 把字压入堆栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;push reg/nem16   32
push imm32&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;POP-把字弹出堆栈&#34;&gt;&lt;a href=&#34;#POP-把字弹出堆栈&#34; class=&#34;headerlink&#34; title=&#34;POP 把字弹出堆栈&#34;&gt;&lt;/a&gt;POP 把字弹出堆栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;pop reg/nem16  32&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PUSHFD-把32EFLAGS寄存器内容压入堆栈&#34;&gt;&lt;a href=&#34;#PUSHFD-把32EFLAGS寄存器内容压入堆栈&#34; class=&#34;headerlink&#34; title=&#34;PUSHFD 把32EFLAGS寄存器内容压入堆栈&#34;&gt;&lt;/a&gt;PUSHFD 把32EFLAGS寄存器内容压入堆栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;pushfd;保存标志寄存器内容&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;POPFD-把32EFLAGS寄存器内容弹出堆栈&#34;&gt;&lt;a href=&#34;#POPFD-把32EFLAGS寄存器内容弹出堆栈&#34; class=&#34;headerlink&#34; title=&#34;POPFD 把32EFLAGS寄存器内容弹出堆栈&#34;&gt;&lt;/a&gt;POPFD 把32EFLAGS寄存器内容弹出堆栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;popfd;恢复标志寄存器内容&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PUSHA-把AX-CX-DX-BX-SP-BP-SI-DI依次压入堆栈&#34;&gt;&lt;a href=&#34;#PUSHA-把AX-CX-DX-BX-SP-BP-SI-DI依次压入堆栈&#34; class=&#34;headerlink&#34; title=&#34;PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈&#34;&gt;&lt;/a&gt;PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;pusha;保存16通用寄存器内容&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;POPA-把DI-SI-BP-SP-BX-DX-CX-AX依次弹出堆栈&#34;&gt;&lt;a href=&#34;#POPA-把DI-SI-BP-SP-BX-DX-CX-AX依次弹出堆栈&#34; class=&#34;headerlink&#34; title=&#34;POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈&#34;&gt;&lt;/a&gt;POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;popa;恢复16通用寄存器内存&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PUSHAD-把EAX-ECX-EDX-EBX-ESP-EBP-ESI-EDI依次压入堆栈&#34;&gt;&lt;a href=&#34;#PUSHAD-把EAX-ECX-EDX-EBX-ESP-EBP-ESI-EDI依次压入堆栈&#34; class=&#34;headerlink&#34; title=&#34;PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈&#34;&gt;&lt;/a&gt;PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;pushad;保存32通用寄存器内容&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;POPAD-把EDI-ESI-EBP-ESP-EBX-EDX-ECX-EAX依次弹出堆栈&#34;&gt;&lt;a href=&#34;#POPAD-把EDI-ESI-EBP-ESP-EBX-EDX-ECX-EAX依次弹出堆栈&#34; class=&#34;headerlink&#34; title=&#34;POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈&#34;&gt;&lt;/a&gt;POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;popad;恢复32通用寄存器内存&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;BSWAP-交换32位寄存器里字节的顺序&#34;&gt;&lt;a href=&#34;#BSWAP-交换32位寄存器里字节的顺序&#34; class=&#34;headerlink&#34; title=&#34;BSWAP 交换32位寄存器里字节的顺序&#34;&gt;&lt;/a&gt;BSWAP 交换32位寄存器里字节的顺序&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;;EAX=96688368H
BSWAP EAX;EAX=68836896H&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;XCHG-交换字或字节-至少有一个操作数为寄存器-段寄存器不可作为操作数&#34;&gt;&lt;a href=&#34;#XCHG-交换字或字节-至少有一个操作数为寄存器-段寄存器不可作为操作数&#34; class=&#34;headerlink&#34; title=&#34;XCHG 交换字或字节( 至少有一个操作数为寄存器,段寄存器不可作为操作数)&#34;&gt;&lt;/a&gt;XCHG 交换字或字节( 至少有一个操作数为寄存器,段寄存器不可作为操作数)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;xchg ax,hx
xchg ah,al
xchg eax,ebx
xchg var,ax;var16位&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CMPXCHG-比较并交换操作数-第二个操作数必须为累加器AL-AX-EAX&#34;&gt;&lt;a href=&#34;#CMPXCHG-比较并交换操作数-第二个操作数必须为累加器AL-AX-EAX&#34; class=&#34;headerlink&#34; title=&#34;CMPXCHG 比较并交换操作数( 第二个操作数必须为累加器AL/AX/EAX )&#34;&gt;&lt;/a&gt;CMPXCHG 比较并交换操作数( 第二个操作数必须为累加器AL/AX/EAX )&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;CMPXCHG CX,DX
;如果指令执行前 (AX)=2300H,(CX)=2300H.(DX)=2400H
;则指令执行后 因（CX）=(AX),故(CX)=2400H,ZF=1
;如果指令执行前（AX）=2500H,(CX)=2300H,(DX)=2400H
;则指令执行后因（CX）!=(AX)，故(AX)=2300H，ZF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;XADD-先交换再累加-结果在第一个操作数里&#34;&gt;&lt;a href=&#34;#XADD-先交换再累加-结果在第一个操作数里&#34; class=&#34;headerlink&#34; title=&#34;XADD 先交换再累加( 结果在第一个操作数里 )&#34;&gt;&lt;/a&gt;XADD 先交换再累加( 结果在第一个操作数里 )&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;xadd eax，ecx
;相当于：
	先执行：
		xchg eax,ecx
	然后执行：
		add eax,ecx&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;XLAT-字节查表转换&#34;&gt;&lt;a href=&#34;#XLAT-字节查表转换&#34; class=&#34;headerlink&#34; title=&#34;XLAT 字节查表转换&#34;&gt;&lt;/a&gt;XLAT 字节查表转换&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;X DW 1122h,3344h,5566h,7788h
lea bx,X
mov al,03h
xlat&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BX 指向一张 256 字节的表的起点, AL 为表的索引值 (0-255,即 0-FFH); 返回 AL 为查表结果 ( [BX+AL]-&amp;gt;AL )&lt;/p&gt;
&lt;h1 id=&#34;输入输出端口传送指令&#34;&gt;&lt;a href=&#34;#输入输出端口传送指令&#34; class=&#34;headerlink&#34; title=&#34;输入输出端口传送指令&#34;&gt;&lt;/a&gt;输入输出端口传送指令&lt;/h1&gt;&lt;h3 id=&#34;IN-I-O端口输入&#34;&gt;&lt;a href=&#34;#IN-I-O端口输入&#34; class=&#34;headerlink&#34; title=&#34;IN I/O端口输入&#34;&gt;&lt;/a&gt;IN I/O端口输入&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;语法: IN 累加器, {端口号│DX}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;OUT-I-O端口输出&#34;&gt;&lt;a href=&#34;#OUT-I-O端口输出&#34; class=&#34;headerlink&#34; title=&#34;OUT I/O端口输出&#34;&gt;&lt;/a&gt;OUT I/O端口输出&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;语法: OUT {端口号│DX},累加器&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;输入输出端口由立即方式指定时-其范围是-0-255-由寄存器-DX-指定时-其范围是-0-65535&#34;&gt;&lt;a href=&#34;#输入输出端口由立即方式指定时-其范围是-0-255-由寄存器-DX-指定时-其范围是-0-65535&#34; class=&#34;headerlink&#34; title=&#34;输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,其范围是 0-65535&#34;&gt;&lt;/a&gt;输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,其范围是 0-65535&lt;/h3&gt;&lt;h1 id=&#34;目的地址传送指令&#34;&gt;&lt;a href=&#34;#目的地址传送指令&#34; class=&#34;headerlink&#34; title=&#34;目的地址传送指令&#34;&gt;&lt;/a&gt;目的地址传送指令&lt;/h1&gt;&lt;h3 id=&#34;LEA-装入有效地址&#34;&gt;&lt;a href=&#34;#LEA-装入有效地址&#34; class=&#34;headerlink&#34; title=&#34;LEA 装入有效地址&#34;&gt;&lt;/a&gt;LEA 装入有效地址&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;LEA DX,string ;把偏移地址存到DX&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LDS-传送目标指针-把指针内容装入DS&#34;&gt;&lt;a href=&#34;#LDS-传送目标指针-把指针内容装入DS&#34; class=&#34;headerlink&#34; title=&#34;LDS 传送目标指针,把指针内容装入DS&#34;&gt;&lt;/a&gt;LDS 传送目标指针,把指针内容装入DS&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;LDS SI,string ;把段地址:偏移地址存到DS:SI&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LES-传送目标指针-把指针内容装入ES&#34;&gt;&lt;a href=&#34;#LES-传送目标指针-把指针内容装入ES&#34; class=&#34;headerlink&#34; title=&#34;LES 传送目标指针,把指针内容装入ES&#34;&gt;&lt;/a&gt;LES 传送目标指针,把指针内容装入ES&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;LES DI,string ;把段地址:偏移地址存到ESDI&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LFS-传送目标指针-把指针内容装入FS&#34;&gt;&lt;a href=&#34;#LFS-传送目标指针-把指针内容装入FS&#34; class=&#34;headerlink&#34; title=&#34;LFS 传送目标指针,把指针内容装入FS&#34;&gt;&lt;/a&gt;LFS 传送目标指针,把指针内容装入FS&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;LFS DI,string ;把段地址:偏移地址存到FSD&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LGS-传送目标指针-把指针内容装入GS&#34;&gt;&lt;a href=&#34;#LGS-传送目标指针-把指针内容装入GS&#34; class=&#34;headerlink&#34; title=&#34;LGS 传送目标指针,把指针内容装入GS&#34;&gt;&lt;/a&gt;LGS 传送目标指针,把指针内容装入GS&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;LGS DI,string ;把段地址:偏移地址存到GSDI &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LSS-传送目标指针-把指针内容装入SS&#34;&gt;&lt;a href=&#34;#LSS-传送目标指针-把指针内容装入SS&#34; class=&#34;headerlink&#34; title=&#34;LSS 传送目标指针,把指针内容装入SS&#34;&gt;&lt;/a&gt;LSS 传送目标指针,把指针内容装入SS&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;LSS DI,string ;把段地址:偏移地址存到SSDI&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;标志传送指令&#34;&gt;&lt;a href=&#34;#标志传送指令&#34; class=&#34;headerlink&#34; title=&#34;标志传送指令&#34;&gt;&lt;/a&gt;标志传送指令&lt;/h1&gt;&lt;h3 id=&#34;LAHF-标志寄存器传送-把标志装入AH&#34;&gt;&lt;a href=&#34;#LAHF-标志寄存器传送-把标志装入AH&#34; class=&#34;headerlink&#34; title=&#34;LAHF 标志寄存器传送,把标志装入AH&#34;&gt;&lt;/a&gt;LAHF 标志寄存器传送,把标志装入AH&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;.data
    saveflags byte ?
.code
    lahf
    mov saveflags,ah&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SAHF-标志寄存器传送-把AH内容装入标志寄存器&#34;&gt;&lt;a href=&#34;#SAHF-标志寄存器传送-把AH内容装入标志寄存器&#34; class=&#34;headerlink&#34; title=&#34;SAHF 标志寄存器传送,把AH内容装入标志寄存器&#34;&gt;&lt;/a&gt;SAHF 标志寄存器传送,把AH内容装入标志寄存器&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ah,saveflags
    sahf&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PUSHF-标志入栈&#34;&gt;&lt;a href=&#34;#PUSHF-标志入栈&#34; class=&#34;headerlink&#34; title=&#34;PUSHF 标志入栈&#34;&gt;&lt;/a&gt;PUSHF 标志入栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;pushf;保存标志寄存器内容&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;POPF-标志出栈&#34;&gt;&lt;a href=&#34;#POPF-标志出栈&#34; class=&#34;headerlink&#34; title=&#34;POPF 标志出栈&#34;&gt;&lt;/a&gt;POPF 标志出栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;popf;恢复标志寄存器内容&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PUSHD-32位标志入栈&#34;&gt;&lt;a href=&#34;#PUSHD-32位标志入栈&#34; class=&#34;headerlink&#34; title=&#34;PUSHD 32位标志入栈&#34;&gt;&lt;/a&gt;PUSHD 32位标志入栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;pushd;保存32通用寄存器内容&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;POPD-32位标志出栈&#34;&gt;&lt;a href=&#34;#POPD-32位标志出栈&#34; class=&#34;headerlink&#34; title=&#34;POPD 32位标志出栈&#34;&gt;&lt;/a&gt;POPD 32位标志出栈&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;popd;恢复32通用寄存器内存&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;算术运算指令&#34;&gt;&lt;a href=&#34;#算术运算指令&#34; class=&#34;headerlink&#34; title=&#34;算术运算指令&#34;&gt;&lt;/a&gt;算术运算指令&lt;/h1&gt;&lt;h3 id=&#34;ADD-加法&#34;&gt;&lt;a href=&#34;#ADD-加法&#34; class=&#34;headerlink&#34; title=&#34;ADD 加法&#34;&gt;&lt;/a&gt;ADD 加法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov eax,1
add eax,12&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ADC-带进位加法&#34;&gt;&lt;a href=&#34;#ADC-带进位加法&#34; class=&#34;headerlink&#34; title=&#34;ADC 带进位加法&#34;&gt;&lt;/a&gt;ADC 带进位加法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov dl,0
mov al,0FFh
add al,0FFh;AL=FEh
adc dl,0;DL/AL=01FEh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;INC-加-1&#34;&gt;&lt;a href=&#34;#INC-加-1&#34; class=&#34;headerlink&#34; title=&#34;INC 加 1&#34;&gt;&lt;/a&gt;INC 加 1&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ax,1
inc ax&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;AAA-加法的ASCII码调整&#34;&gt;&lt;a href=&#34;#AAA-加法的ASCII码调整&#34; class=&#34;headerlink&#34; title=&#34;AAA 加法的ASCII码调整&#34;&gt;&lt;/a&gt;AAA 加法的ASCII码调整&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ah,0
mov al,&#39;8&#39;;AX=0038h
add al,&#39;2&#39;;AX=006Ah
aaa;AX=0100h(结果进行ASCII转换)
or ax,3030h;AX=3130h=&#39;10&#39;(转换为ASCII码)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;DAA-加法的十进制调整&#34;&gt;&lt;a href=&#34;#DAA-加法的十进制调整&#34; class=&#34;headerlink&#34; title=&#34;DAA 加法的十进制调整&#34;&gt;&lt;/a&gt;DAA 加法的十进制调整&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,35h
add al,48h;AL=7Dh
daa;AL=83h(调整后结果)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SUB-减法&#34;&gt;&lt;a href=&#34;#SUB-减法&#34; class=&#34;headerlink&#34; title=&#34;SUB 减法&#34;&gt;&lt;/a&gt;SUB 减法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,23
sub al,3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SBB-带借位减法&#34;&gt;&lt;a href=&#34;#SBB-带借位减法&#34; class=&#34;headerlink&#34; title=&#34;SBB 带借位减法&#34;&gt;&lt;/a&gt;SBB 带借位减法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov edx,7;高32位
mov eax,1;低32位
sub eax，2
sbb edx，0;高32位减法&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;DEC-减-1&#34;&gt;&lt;a href=&#34;#DEC-减-1&#34; class=&#34;headerlink&#34; title=&#34;DEC 减 1&#34;&gt;&lt;/a&gt;DEC 减 1&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;dec al&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;NEC-求反-以-0-减之&#34;&gt;&lt;a href=&#34;#NEC-求反-以-0-减之&#34; class=&#34;headerlink&#34; title=&#34;NEC 求反(以 0 减之)&#34;&gt;&lt;/a&gt;NEC 求反(以 0 减之)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;nec al&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CMP-比较-两操作数作减法-仅修改标志位-不回送结果&#34;&gt;&lt;a href=&#34;#CMP-比较-两操作数作减法-仅修改标志位-不回送结果&#34; class=&#34;headerlink&#34; title=&#34;CMP 比较.(两操作数作减法,仅修改标志位,不回送结果)&#34;&gt;&lt;/a&gt;CMP 比较.(两操作数作减法,仅修改标志位,不回送结果)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ax,5
cmp ax,10;ZF=0 and CF=1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;AAS-减法的ASCII码调整&#34;&gt;&lt;a href=&#34;#AAS-减法的ASCII码调整&#34; class=&#34;headerlink&#34; title=&#34;AAS 减法的ASCII码调整&#34;&gt;&lt;/a&gt;AAS 减法的ASCII码调整&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ah,0
mov al,&#39;8&#39;;AX=0038h
sub al,&#39;9&#39;;AX=00FFh
aas;AX=FF09h
pushf
or al,30h;AX=FF39h
popf&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;DAS-减法的十进制调整&#34;&gt;&lt;a href=&#34;#DAS-减法的十进制调整&#34; class=&#34;headerlink&#34; title=&#34;DAS 减法的十进制调整&#34;&gt;&lt;/a&gt;DAS 减法的十进制调整&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov bl,48h
mov al,85h
sub al,bl;AL=3Dh
das;AL=37h(调整后结果)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;MUL-无符号乘法&#34;&gt;&lt;a href=&#34;#MUL-无符号乘法&#34; class=&#34;headerlink&#34; title=&#34;MUL 无符号乘法&#34;&gt;&lt;/a&gt;MUL 无符号乘法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var word 0100h
mov ax,2000h;AX=2000h;AX存储结果
mul 0100h/var;DX:AX=00200000h,CF=1;32位EDX:EAX&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;IMUL-整数乘法&#34;&gt;&lt;a href=&#34;#IMUL-整数乘法&#34; class=&#34;headerlink&#34; title=&#34;IMUL 整数乘法&#34;&gt;&lt;/a&gt;IMUL 整数乘法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ax,48
mov bx,4
imul bx;DX:AX=000000C0h,OF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;以上两条-结果回送AH和AL-字节运算-或DX和AX-字运算&#34;&gt;&lt;a href=&#34;#以上两条-结果回送AH和AL-字节运算-或DX和AX-字运算&#34; class=&#34;headerlink&#34; title=&#34;以上两条,结果回送AH和AL(字节运算),或DX和AX(字运算)&#34;&gt;&lt;/a&gt;以上两条,结果回送AH和AL(字节运算),或DX和AX(字运算)&lt;/h3&gt;&lt;h3 id=&#34;AAM-乘法的ASCII码调整&#34;&gt;&lt;a href=&#34;#AAM-乘法的ASCII码调整&#34; class=&#34;headerlink&#34; title=&#34;AAM 乘法的ASCII码调整&#34;&gt;&lt;/a&gt;AAM 乘法的ASCII码调整&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var byte 05h,06h
mov bl,var;第一个操作数
mov bl,[var+1];第二个操作数
mul bl;AX=001Eh
aam;AX=0300h&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;DIV-无符号除法&#34;&gt;&lt;a href=&#34;#DIV-无符号除法&#34; class=&#34;headerlink&#34; title=&#34;DIV 无符号除法&#34;&gt;&lt;/a&gt;DIV 无符号除法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ax,0083h;被除数
mov bl,2;除数
div bl;AL=41h,AH=01h&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;IDIV-整数除法&#34;&gt;&lt;a href=&#34;#IDIV-整数除法&#34; class=&#34;headerlink&#34; title=&#34;IDIV 整数除法&#34;&gt;&lt;/a&gt;IDIV 整数除法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var sword -101;009Bh
mov dx,0
mov ax,var;DX:AX=0000009Bh(+155)
mov bx,2;BX是除数
idiv bx;DX:AX除以BX
    
var sword -48
mov al,var;被除数低字节
cbw；AL扩展到AH
mov bl,+5;除数
idiv bl;AL=-9,AH=-3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;以上两条-结果回送&#34;&gt;&lt;a href=&#34;#以上两条-结果回送&#34; class=&#34;headerlink&#34; title=&#34;以上两条,结果回送:&#34;&gt;&lt;/a&gt;以上两条,结果回送:&lt;/h3&gt;&lt;h3 id=&#34;商回送AL-余数回送AH-字节运算-或商回送AX-余数回送DX-字运算&#34;&gt;&lt;a href=&#34;#商回送AL-余数回送AH-字节运算-或商回送AX-余数回送DX-字运算&#34; class=&#34;headerlink&#34; title=&#34;商回送AL,余数回送AH, (字节运算);或商回送AX,余数回送DX, (字运算)&#34;&gt;&lt;/a&gt;商回送AL,余数回送AH, (字节运算);或商回送AX,余数回送DX, (字运算)&lt;/h3&gt;&lt;h3 id=&#34;AAD-除法的ASCII码调整&#34;&gt;&lt;a href=&#34;#AAD-除法的ASCII码调整&#34; class=&#34;headerlink&#34; title=&#34;AAD 除法的ASCII码调整&#34;&gt;&lt;/a&gt;AAD 除法的ASCII码调整&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var byte ?
var2 byte ?
mov ax,0307h;被除数
aad;AX=0025h
mov bl,5;除数
div bl;AX=0207h
mov var,al
mov var2,ah&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CBW-字节转换为字-把AL中字节的符号扩展到AH中去&#34;&gt;&lt;a href=&#34;#CBW-字节转换为字-把AL中字节的符号扩展到AH中去&#34; class=&#34;headerlink&#34; title=&#34;CBW 字节转换为字. (把AL中字节的符号扩展到AH中去)&#34;&gt;&lt;/a&gt;CBW 字节转换为字. (把AL中字节的符号扩展到AH中去)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var sword -101;9Bh
mov al,var;AL=9Bh
cbw;AL=FF9Bh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CWD-字转换为双字-把AX中的字的符号扩展到DX中去&#34;&gt;&lt;a href=&#34;#CWD-字转换为双字-把AX中的字的符号扩展到DX中去&#34; class=&#34;headerlink&#34; title=&#34;CWD 字转换为双字. (把AX中的字的符号扩展到DX中去)&#34;&gt;&lt;/a&gt;CWD 字转换为双字. (把AX中的字的符号扩展到DX中去)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var sword -101;FF9Bh
mov ax,var;AX=FF9Bh
cwd;DX:AX=FFFFFF9Bh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CWDE-字转换为双字-把AX中的字符号扩展到EAX中去&#34;&gt;&lt;a href=&#34;#CWDE-字转换为双字-把AX中的字符号扩展到EAX中去&#34; class=&#34;headerlink&#34; title=&#34;CWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)&#34;&gt;&lt;/a&gt;CWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;NULL&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CDQ-双字扩展-把EAX中的字的符号扩展到EDX中去&#34;&gt;&lt;a href=&#34;#CDQ-双字扩展-把EAX中的字的符号扩展到EDX中去&#34; class=&#34;headerlink&#34; title=&#34;CDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去)&#34;&gt;&lt;/a&gt;CDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-C++&#34; data-language=&#34;C++&#34;&gt;&lt;code class=&#34;language-C++&#34;&gt;var sword -101;FFFFFF9Bh
mov eax,var;EDX:EAX=FFFFFFFFFFFFFF9Bh
cdq&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;逻辑运算指令&#34;&gt;&lt;a href=&#34;#逻辑运算指令&#34; class=&#34;headerlink&#34; title=&#34;逻辑运算指令&#34;&gt;&lt;/a&gt;逻辑运算指令&lt;/h1&gt;&lt;h3 id=&#34;AND-与运算&#34;&gt;&lt;a href=&#34;#AND-与运算&#34; class=&#34;headerlink&#34; title=&#34;AND 与运算&#34;&gt;&lt;/a&gt;AND 与运算&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,10101110b
and al,11110110b;消除位0,3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;OR-或运算&#34;&gt;&lt;a href=&#34;#OR-或运算&#34; class=&#34;headerlink&#34; title=&#34;OR 或运算&#34;&gt;&lt;/a&gt;OR 或运算&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,11100011b
or al,00000100b;位2置1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;XOR-异或运算&#34;&gt;&lt;a href=&#34;#XOR-异或运算&#34; class=&#34;headerlink&#34; title=&#34;XOR 异或运算&#34;&gt;&lt;/a&gt;XOR 异或运算&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,10110101b
xor al,0;异或&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;NOT-取反&#34;&gt;&lt;a href=&#34;#NOT-取反&#34; class=&#34;headerlink&#34; title=&#34;NOT 取反&#34;&gt;&lt;/a&gt;NOT 取反&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,10101110b
not al;补集&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;TEST-测试-两操作数作与运算-仅修改标志位-不回送结果&#34;&gt;&lt;a href=&#34;#TEST-测试-两操作数作与运算-仅修改标志位-不回送结果&#34; class=&#34;headerlink&#34; title=&#34;TEST 测试(两操作数作与运算,仅修改标志位,不回送结果)&#34;&gt;&lt;/a&gt;TEST 测试(两操作数作与运算,仅修改标志位,不回送结果)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;test al,00001001b;测试0,3位&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SHL-逻辑左移-位元乘法&#34;&gt;&lt;a href=&#34;#SHL-逻辑左移-位元乘法&#34; class=&#34;headerlink&#34; title=&#34;SHL 逻辑左移,位元乘法&#34;&gt;&lt;/a&gt;SHL 逻辑左移,位元乘法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov bl,8Fh;BL=10001111b
shl bl,1;CF=1,BL=00011110b&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SAL-算术左移-SHL&#34;&gt;&lt;a href=&#34;#SAL-算术左移-SHL&#34; class=&#34;headerlink&#34; title=&#34;SAL 算术左移(=SHL)&#34;&gt;&lt;/a&gt;SAL 算术左移(=SHL)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;sal/shl&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SHR-逻辑右移，位元除法&#34;&gt;&lt;a href=&#34;#SHR-逻辑右移，位元除法&#34; class=&#34;headerlink&#34; title=&#34;SHR 逻辑右移，位元除法&#34;&gt;&lt;/a&gt;SHR 逻辑右移，位元除法&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,0D0h;AL=11010000b
shr al,1;AL=01101000b,CF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SAR-算术右移-SHR&#34;&gt;&lt;a href=&#34;#SAR-算术右移-SHR&#34; class=&#34;headerlink&#34; title=&#34;SAR 算术右移(=SHR)&#34;&gt;&lt;/a&gt;SAR 算术右移(=SHR)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;sar/shr&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ROL-循环左移&#34;&gt;&lt;a href=&#34;#ROL-循环左移&#34; class=&#34;headerlink&#34; title=&#34;ROL 循环左移&#34;&gt;&lt;/a&gt;ROL 循环左移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-C++&#34; data-language=&#34;C++&#34;&gt;&lt;code class=&#34;language-C++&#34;&gt;mov al,40h;AL=01000000b
rol al,1;AL=10000000b
rol al,3;AL=00000100b&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ROR-循环右移&#34;&gt;&lt;a href=&#34;#ROR-循环右移&#34; class=&#34;headerlink&#34; title=&#34;ROR 循环右移&#34;&gt;&lt;/a&gt;ROR 循环右移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,01h;AL=00000001b
ror al,1;AL=10000000b
ror al,3;AL=00010000b&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;RCL-通过进位的循环左移&#34;&gt;&lt;a href=&#34;#RCL-通过进位的循环左移&#34; class=&#34;headerlink&#34; title=&#34;RCL 通过进位的循环左移&#34;&gt;&lt;/a&gt;RCL 通过进位的循环左移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;clc;CF=0
mov bl,88h;CF,BL=0 10001000b
rcl bl,1;CF,BL=1 00010000b
rcl bl,1;CF,BL=0 00100010b&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;RCR-通过进位的循环右移&#34;&gt;&lt;a href=&#34;#RCR-通过进位的循环右移&#34; class=&#34;headerlink&#34; title=&#34;RCR 通过进位的循环右移&#34;&gt;&lt;/a&gt;RCR 通过进位的循环右移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;stc ;CF=1
mov ah,10h;AH,CF=00010000 1
rcr ah,1;AH,CF=10001000 0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上八种移位指令,其移位次数可达255次&lt;/p&gt;
&lt;p&gt;移位一次时, 可直接用操作码. 如 SHL AX,1&lt;/p&gt;
&lt;p&gt;移位&amp;gt;1次时, 则由寄存器CL给出移位次数&lt;/p&gt;
&lt;p&gt;如 MOV CL,04 SHL AX,CL&lt;/p&gt;
&lt;h3 id=&#34;SHLD-双精度左移&#34;&gt;&lt;a href=&#34;#SHLD-双精度左移&#34; class=&#34;headerlink&#34; title=&#34;SHLD 双精度左移&#34;&gt;&lt;/a&gt;SHLD 双精度左移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;wval word 9BA6h
mov ax,0AC36h
shld wval,ax,4;wval=BA6Ah,将wval左移4位，并把AX的高4位插入wval的低4位&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SHRD-双精度右移&#34;&gt;&lt;a href=&#34;#SHRD-双精度右移&#34; class=&#34;headerlink&#34; title=&#34;SHRD 双精度右移&#34;&gt;&lt;/a&gt;SHRD 双精度右移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ax,234Bh
mov dx,7654h
shrd ax,dx,4;AX右移4位，并把DX的低4位插入AX的高4位&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;串指令&#34;&gt;&lt;a href=&#34;#串指令&#34; class=&#34;headerlink&#34; title=&#34;串指令&#34;&gt;&lt;/a&gt;串指令&lt;/h1&gt;&lt;h3 id=&#34;DS-SI-源串段寄存器-源串变址&#34;&gt;&lt;a href=&#34;#DS-SI-源串段寄存器-源串变址&#34; class=&#34;headerlink&#34; title=&#34;DS:SI 源串段寄存器 :源串变址&#34;&gt;&lt;/a&gt;DS:SI 源串段寄存器 :源串变址&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;NULL&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ESI-目标串段寄存器-目标串变址&#34;&gt;&lt;a href=&#34;#ESI-目标串段寄存器-目标串变址&#34; class=&#34;headerlink&#34; title=&#34;ESI 目标串段寄存器:目标串变址&#34;&gt;&lt;/a&gt;ESI 目标串段寄存器:目标串变址&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;NULL&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CX-重复次数计数器&#34;&gt;&lt;a href=&#34;#CX-重复次数计数器&#34; class=&#34;headerlink&#34; title=&#34;CX 重复次数计数器&#34;&gt;&lt;/a&gt;CX 重复次数计数器&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;NULL&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;AL-AX-扫描值&#34;&gt;&lt;a href=&#34;#AL-AX-扫描值&#34; class=&#34;headerlink&#34; title=&#34;AL/AX 扫描值&#34;&gt;&lt;/a&gt;AL/AX 扫描值&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;NULL&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;D标志-0表示重复操作中SI和DI应自动增量-1表示应自动减量&#34;&gt;&lt;a href=&#34;#D标志-0表示重复操作中SI和DI应自动增量-1表示应自动减量&#34; class=&#34;headerlink&#34; title=&#34;D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量&#34;&gt;&lt;/a&gt;D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;NULL&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;Z标志-用来控制扫描或比较操作的结束&#34;&gt;&lt;a href=&#34;#Z标志-用来控制扫描或比较操作的结束&#34; class=&#34;headerlink&#34; title=&#34;Z标志 用来控制扫描或比较操作的结束&#34;&gt;&lt;/a&gt;Z标志 用来控制扫描或比较操作的结束&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;NULL&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;MOVS-串传送-MOVSB-传送字符-MOVSW-传送字-MOVSD-传送双字&#34;&gt;&lt;a href=&#34;#MOVS-串传送-MOVSB-传送字符-MOVSW-传送字-MOVSD-传送双字&#34; class=&#34;headerlink&#34; title=&#34;MOVS 串传送   ( MOVSB 传送字符 MOVSW 传送字 MOVSD 传送双字 )&#34;&gt;&lt;/a&gt;MOVS 串传送   ( MOVSB 传送字符 MOVSW 传送字 MOVSD 传送双字 )&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;;传送字符串数据：将ESI寻址的内存数据复制到EDI寻址的内存位置
;复制双字数值
source dword 20 dup(0FFFFFFFh)
target dword 20 dup(?)
.code
cld;方向为正
mov ecx,lengthof source;设置REP计数器
mov esi,offset source;ESI指向source
mov edi,offset target;EDI指向target
rep movsd;复制双字&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CMPS-串比较-CMPSB-比较字符-CMPSW-比较字&#34;&gt;&lt;a href=&#34;#CMPS-串比较-CMPSB-比较字符-CMPSW-比较字&#34; class=&#34;headerlink&#34; title=&#34;CMPS 串比较   ( CMPSB 比较字符 CMPSW 比较字 )&#34;&gt;&lt;/a&gt;CMPS 串比较   ( CMPSB 比较字符 CMPSW 比较字 )&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;;比较字符串：比较分别由ESI和EDI寻址的内存数据
;比较双字
mov esi OFFSET source
mov edi ,OFFSET target
cld;方向为正向
mov ecx, LENGTHOF source;设置重复计数器
repe cmpsd;相等则重复&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SCAS-串扫描-把AL或AX的内容与目标串作比较-比较结果反映在标志位&#34;&gt;&lt;a href=&#34;#SCAS-串扫描-把AL或AX的内容与目标串作比较-比较结果反映在标志位&#34; class=&#34;headerlink&#34; title=&#34;SCAS 串扫描    把AL或AX的内容与目标串作比较,比较结果反映在标志位&#34;&gt;&lt;/a&gt;SCAS 串扫描    把AL或AX的内容与目标串作比较,比较结果反映在标志位&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;;扫描字符串：比较累加器（AL、AX和EAX）与EDI寻址的内存数据
;扫描是否有匹配字符
alpha BYTE &#34;ABCDEFGH&#34;,0
.code
mov edi,OFFSET alpha;EDI指向字符串
mov al,&#39;F&#39;;检索字符F
mov ecx,LENGTHOF alpha;设置检索计数器
cld;方向为正向
repne scasb;不相等则重复
jnz quit;若未发现字符则退出
dec edi;发现字符: EDI减1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LODS-装入串-把源串中的元素-字或字节-逐一装入AL或AX中-LODSB-传送字符-LODSW-传送字-LODSD-传送双字&#34;&gt;&lt;a href=&#34;#LODS-装入串-把源串中的元素-字或字节-逐一装入AL或AX中-LODSB-传送字符-LODSW-传送字-LODSD-传送双字&#34; class=&#34;headerlink&#34; title=&#34;LODS 装入串    把源串中的元素(字或字节)逐一装入AL或AX中( LODSB 传送字符 LODSW 传送字 LODSD 传送双字 )&#34;&gt;&lt;/a&gt;LODS 装入串    把源串中的元素(字或字节)逐一装入AL或AX中( LODSB 传送字符 LODSW 传送字 LODSD 传送双字 )&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;;从字符串加载到累加器：将ESI寻址的内存数据加载到累加器
;数组乘法
:本程序将一个32位整数数组中的每个元素都乘以一个常数。
INCLUDE Irvine32. inc
.data
array DWORD 1,2,3,4,5,6,7,8,9,10;测试数据
multiplier DWORD 10;测试数据
.code
main PROC
    cld;方向为正向
    mov esi,OFFSET array;源数组索引
    mov edi,esi;目标数组索引
    mov ecx,LENGTHOF array;循环计数器
Ll: lodsd;将[ESI]加载到EAX
    mul multiplier;与常数相乘
    stosd;将EAX保存到[EDI]
    loop Ll
    exit
main ENDP
END main&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;STOS-保存串-是LODS的逆过程&#34;&gt;&lt;a href=&#34;#STOS-保存串-是LODS的逆过程&#34; class=&#34;headerlink&#34; title=&#34;STOS 保存串   是LODS的逆过程&#34;&gt;&lt;/a&gt;STOS 保存串   是LODS的逆过程&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;;保存字符串数据L：将累加器内容保存到EDI寻址的内存位置
.data
Count = 100
string1 BYTE Count DUP(?)
.code
mov al,OFFh;要保存的数值
mov edi,OFFSET string1;EDI指向目标字符串
mov ecx,Count;字符计数器
cld;方向为正向
rep stosb;用AL的内容实现填充&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;REP-当CX-ECX0时重复-单个指令处理整个字符串&#34;&gt;&lt;a href=&#34;#REP-当CX-ECX0时重复-单个指令处理整个字符串&#34; class=&#34;headerlink&#34; title=&#34;REP 当CX/ECX&lt;&gt;0时重复(单个指令处理整个字符串)&#34;&gt;&lt;/a&gt;REP 当CX/ECX&amp;lt;&amp;gt;0时重复(单个指令处理整个字符串)&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;rep movsb&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;REPE-REPZ-当ZF-1或比较结果相等-且CX-ECX0时重复&#34;&gt;&lt;a href=&#34;#REPE-REPZ-当ZF-1或比较结果相等-且CX-ECX0时重复&#34; class=&#34;headerlink&#34; title=&#34;REPE/REPZ 当ZF=1或比较结果相等,且CX/ECX&lt;&gt;0时重复&#34;&gt;&lt;/a&gt;REPE/REPZ 当ZF=1或比较结果相等,且CX/ECX&amp;lt;&amp;gt;0时重复&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;repe cmpsd&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;REPNE-REPNZ-当ZF-0或比较结果不相等-且CX-ECX0时重复&#34;&gt;&lt;a href=&#34;#REPNE-REPNZ-当ZF-0或比较结果不相等-且CX-ECX0时重复&#34; class=&#34;headerlink&#34; title=&#34;REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX&lt;&gt;0时重复&#34;&gt;&lt;/a&gt;REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX&amp;lt;&amp;gt;0时重复&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;repne scasb&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;REPC-当CF-1且CX-ECX0时重复&#34;&gt;&lt;a href=&#34;#REPC-当CF-1且CX-ECX0时重复&#34; class=&#34;headerlink&#34; title=&#34;REPC 当CF=1且CX/ECX&lt;&gt;0时重复&#34;&gt;&lt;/a&gt;REPC 当CF=1且CX/ECX&amp;lt;&amp;gt;0时重复&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;repc movsb&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;REPNC-当CF-0且CX-ECX0时重复&#34;&gt;&lt;a href=&#34;#REPNC-当CF-0且CX-ECX0时重复&#34; class=&#34;headerlink&#34; title=&#34;REPNC 当CF=0且CX/ECX&lt;&gt;0时重复&#34;&gt;&lt;/a&gt;REPNC 当CF=0且CX/ECX&amp;lt;&amp;gt;0时重复&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;repnc movsb&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;程序转移指令&#34;&gt;&lt;a href=&#34;#程序转移指令&#34; class=&#34;headerlink&#34; title=&#34;程序转移指令&#34;&gt;&lt;/a&gt;程序转移指令&lt;/h1&gt;&lt;h2 id=&#34;简单的条件转移指令&#34;&gt;&lt;a href=&#34;#简单的条件转移指令&#34; class=&#34;headerlink&#34; title=&#34;简单的条件转移指令&#34;&gt;&lt;/a&gt;简单的条件转移指令&lt;/h2&gt;&lt;h3 id=&#34;JZ-或jE-OPR—————结果为零转移-测试条件ZF-1；相等跳转&#34;&gt;&lt;a href=&#34;#JZ-或jE-OPR—————结果为零转移-测试条件ZF-1；相等跳转&#34; class=&#34;headerlink&#34; title=&#34;JZ(或jE)  OPR—————结果为零转移, 测试条件ZF=1；相等跳转&#34;&gt;&lt;/a&gt;JZ(或jE)  OPR—————结果为零转移, 测试条件ZF=1；相等跳转&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;cmp eax,0
jz/je L1;如果ZF=1则跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JNZ-或jNE-OPR-————–结果不为零转移-测试条件ZF-0；不等跳转&#34;&gt;&lt;a href=&#34;#JNZ-或jNE-OPR-————–结果不为零转移-测试条件ZF-0；不等跳转&#34; class=&#34;headerlink&#34; title=&#34;JNZ(或jNE) OPR ————–结果不为零转移,测试条件ZF=0；不等跳转&#34;&gt;&lt;/a&gt;JNZ(或jNE) OPR ————–结果不为零转移,测试条件ZF=0；不等跳转&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;and dl,10110000b
jnz/jne L2;ZF=0跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JS-OPR———————-结果为负转移-测试条件SF-1&#34;&gt;&lt;a href=&#34;#JS-OPR———————-结果为负转移-测试条件SF-1&#34; class=&#34;headerlink&#34; title=&#34;JS OPR———————-结果为负转移, 测试条件SF=1&#34;&gt;&lt;/a&gt;JS OPR———————-结果为负转移, 测试条件SF=1&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;SF=1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JNS-OPR———————结果为正转移-测试条件SF-0&#34;&gt;&lt;a href=&#34;#JNS-OPR———————结果为正转移-测试条件SF-0&#34; class=&#34;headerlink&#34; title=&#34;JNS OPR———————结果为正转移, 测试条件SF=0&#34;&gt;&lt;/a&gt;JNS OPR———————结果为正转移, 测试条件SF=0&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;SF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JO-OPR———————-溢出转移-测试条件OF-1&#34;&gt;&lt;a href=&#34;#JO-OPR———————-溢出转移-测试条件OF-1&#34; class=&#34;headerlink&#34; title=&#34;JO OPR——————— 溢出转移,   测试条件OF=1&#34;&gt;&lt;/a&gt;JO OPR——————— 溢出转移,   测试条件OF=1&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;OF=1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JNO-OPR-——————–不溢出转移-测试条件OF-0&#34;&gt;&lt;a href=&#34;#JNO-OPR-——————–不溢出转移-测试条件OF-0&#34; class=&#34;headerlink&#34; title=&#34;JNO OPR ——————–不溢出转移 , 测试条件OF=0&#34;&gt;&lt;/a&gt;JNO OPR ——————–不溢出转移 , 测试条件OF=0&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;OF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JP-OPR-———————结果为偶转移-测试条件PF-1&#34;&gt;&lt;a href=&#34;#JP-OPR-———————结果为偶转移-测试条件PF-1&#34; class=&#34;headerlink&#34; title=&#34;JP OPR ———————结果为偶转移, 测试条件PF=1&#34;&gt;&lt;/a&gt;JP OPR ———————结果为偶转移, 测试条件PF=1&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;PF=1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JNP-OPR-——————–结果为奇转移-测试条件PF-0&#34;&gt;&lt;a href=&#34;#JNP-OPR-——————–结果为奇转移-测试条件PF-0&#34; class=&#34;headerlink&#34; title=&#34;JNP OPR ——————–结果为奇转移 , 测试条件PF=0&#34;&gt;&lt;/a&gt;JNP OPR ——————–结果为奇转移 , 测试条件PF=0&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;PF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JC-OPR-——————–-有进位转移-测试条件CF-1&#34;&gt;&lt;a href=&#34;#JC-OPR-——————–-有进位转移-测试条件CF-1&#34; class=&#34;headerlink&#34; title=&#34;JC OPR ——————– 有进位转移 , 测试条件CF=1&#34;&gt;&lt;/a&gt;JC OPR ——————– 有进位转移 , 测试条件CF=1&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;CF=1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JNC-OPR-——————–无进位转移-测试条件CF-0&#34;&gt;&lt;a href=&#34;#JNC-OPR-——————–无进位转移-测试条件CF-0&#34; class=&#34;headerlink&#34; title=&#34;JNC OPR ——————–无进位转移,  测试条件CF=0&#34;&gt;&lt;/a&gt;JNC OPR ——————–无进位转移,  测试条件CF=0&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;CF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;无符号比较条件转移指令-以下指令经常是CMP-OPD-OPS后面的指令根据比较结果来实现转移&#34;&gt;&lt;a href=&#34;#无符号比较条件转移指令-以下指令经常是CMP-OPD-OPS后面的指令根据比较结果来实现转移&#34; class=&#34;headerlink&#34; title=&#34;无符号比较条件转移指令(以下指令经常是CMP OPD,OPS后面的指令根据比较结果来实现转移)&#34;&gt;&lt;/a&gt;无符号比较条件转移指令(以下指令经常是CMP OPD,OPS后面的指令根据比较结果来实现转移)&lt;/h3&gt;&lt;h3 id=&#34;JB-或JNAE-opd-————–小于或者不大于等于则转移&#34;&gt;&lt;a href=&#34;#JB-或JNAE-opd-————–小于或者不大于等于则转移&#34; class=&#34;headerlink&#34; title=&#34;JB(或JNAE) opd ————–小于或者不大于等于则转移&#34;&gt;&lt;/a&gt;JB(或JNAE) opd ————–小于或者不大于等于则转移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;小于跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JNB-或JAE-opd—————不小于或者大于等于则转移&#34;&gt;&lt;a href=&#34;#JNB-或JAE-opd—————不小于或者大于等于则转移&#34; class=&#34;headerlink&#34; title=&#34;JNB(或JAE) opd—————不小于或者大于等于则转移&#34;&gt;&lt;/a&gt;JNB(或JAE) opd—————不小于或者大于等于则转移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;不小于跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JA-或NJBE-OPD—————大于或者不小于等于则转移&#34;&gt;&lt;a href=&#34;#JA-或NJBE-OPD—————大于或者不小于等于则转移&#34; class=&#34;headerlink&#34; title=&#34;JA(或NJBE) OPD—————大于或者不小于等于则转移&#34;&gt;&lt;/a&gt;JA(或NJBE) OPD—————大于或者不小于等于则转移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,+127
cmp al,-128
    ja/njbe L1;不跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JNA-或JBE-OPD—————不大于或者小于等于则转移&#34;&gt;&lt;a href=&#34;#JNA-或JBE-OPD—————不大于或者小于等于则转移&#34; class=&#34;headerlink&#34; title=&#34;JNA(或JBE) OPD—————不大于或者小于等于则转移&#34;&gt;&lt;/a&gt;JNA(或JBE) OPD—————不大于或者小于等于则转移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov al,+127
cmp al,-128
    jna/jbe L1;跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;带符号比较条件转移指令&#34;&gt;&lt;a href=&#34;#带符号比较条件转移指令&#34; class=&#34;headerlink&#34; title=&#34;带符号比较条件转移指令&#34;&gt;&lt;/a&gt;带符号比较条件转移指令&lt;/h3&gt;&lt;h3 id=&#34;JL-或JNGE-————–小于或者不大于等于则转移&#34;&gt;&lt;a href=&#34;#JL-或JNGE-————–小于或者不大于等于则转移&#34; class=&#34;headerlink&#34; title=&#34;JL(或JNGE) ————–小于或者不大于等于则转移&#34;&gt;&lt;/a&gt;JL(或JNGE) ————–小于或者不大于等于则转移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ax,5
mov ax,6
	jl/jnge L1;跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JNL-或JGE-————–不小于或者大于等于则转移&#34;&gt;&lt;a href=&#34;#JNL-或JGE-————–不小于或者大于等于则转移&#34; class=&#34;headerlink&#34; title=&#34;JNL(或JGE)————–不小于或者大于等于则转移&#34;&gt;&lt;/a&gt;JNL(或JGE)————–不小于或者大于等于则转移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov edx,-1
cmp edx,0
    jnl/jge L1;不跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JG-或NJLE-—————大于或者不小于等于则转移&#34;&gt;&lt;a href=&#34;#JG-或NJLE-—————大于或者不小于等于则转移&#34; class=&#34;headerlink&#34; title=&#34;JG(或NJLE)—————大于或者不小于等于则转移&#34;&gt;&lt;/a&gt;JG(或NJLE)—————大于或者不小于等于则转移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ax,5
cmp ax,4
	jp/njle L1;大于则跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JNG-或JLE-—————不大于或者小于等于则转移&#34;&gt;&lt;a href=&#34;#JNG-或JLE-—————不大于或者小于等于则转移&#34; class=&#34;headerlink&#34; title=&#34;JNG(或JLE)—————不大于或者小于等于则转移&#34;&gt;&lt;/a&gt;JNG(或JLE)—————不大于或者小于等于则转移&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov ecx,0
cmp ecx,0
    jng/jle;跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JCXZ&#34;&gt;&lt;a href=&#34;#JCXZ&#34; class=&#34;headerlink&#34; title=&#34;JCXZ&#34;&gt;&lt;/a&gt;JCXZ&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;CX=0跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JECXZ&#34;&gt;&lt;a href=&#34;#JECXZ&#34; class=&#34;headerlink&#34; title=&#34;JECXZ&#34;&gt;&lt;/a&gt;JECXZ&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;ECX=0跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JRCXZ&#34;&gt;&lt;a href=&#34;#JRCXZ&#34; class=&#34;headerlink&#34; title=&#34;JRCXZ&#34;&gt;&lt;/a&gt;JRCXZ&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;RCX=0跳转&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;调用子程序与返回指令&#34;&gt;&lt;a href=&#34;#调用子程序与返回指令&#34; class=&#34;headerlink&#34; title=&#34;调用子程序与返回指令&#34;&gt;&lt;/a&gt;调用子程序与返回指令&lt;/h2&gt;&lt;h3 id=&#34;CALL-子程序调用指令&#34;&gt;&lt;a href=&#34;#CALL-子程序调用指令&#34; class=&#34;headerlink&#34; title=&#34;CALL  子程序调用指令&#34;&gt;&lt;/a&gt;CALL  子程序调用指令&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;call SumOf;调用SumOf过程&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;RET-子程序返回指令&#34;&gt;&lt;a href=&#34;#RET-子程序返回指令&#34; class=&#34;headerlink&#34; title=&#34;RET 子程序返回指令&#34;&gt;&lt;/a&gt;RET 子程序返回指令&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;SumOf proc
    .
    .
    ret
SumOf endp&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;条件循环指令&#34;&gt;&lt;a href=&#34;#条件循环指令&#34; class=&#34;headerlink&#34; title=&#34;条件循环指令&#34;&gt;&lt;/a&gt;条件循环指令&lt;/h2&gt;&lt;h3 id=&#34;LOOP———-按ECX计算器循环&#34;&gt;&lt;a href=&#34;#LOOP———-按ECX计算器循环&#34; class=&#34;headerlink&#34; title=&#34;LOOP———-按ECX计算器循环&#34;&gt;&lt;/a&gt;LOOP———-按ECX计算器循环&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;    mov ax,0
    mov ecx,5
L1:
    inc ax
    loop L1;每次循环ax加一，循环5次&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LOOPZ————为零跳转&#34;&gt;&lt;a href=&#34;#LOOPZ————为零跳转&#34; class=&#34;headerlink&#34; title=&#34;LOOPZ————为零跳转&#34;&gt;&lt;/a&gt;LOOPZ————为零跳转&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;loopz L1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LOOPNZ————–非零跳转&#34;&gt;&lt;a href=&#34;#LOOPNZ————–非零跳转&#34; class=&#34;headerlink&#34; title=&#34;LOOPNZ————–非零跳转&#34;&gt;&lt;/a&gt;LOOPNZ————–非零跳转&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;loopnz L1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LOOPE——————-相等跳转&#34;&gt;&lt;a href=&#34;#LOOPE——————-相等跳转&#34; class=&#34;headerlink&#34; title=&#34;LOOPE——————-相等跳转&#34;&gt;&lt;/a&gt;LOOPE——————-相等跳转&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;loope L1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LOOPNE——————-不等跳转&#34;&gt;&lt;a href=&#34;#LOOPNE——————-不等跳转&#34; class=&#34;headerlink&#34; title=&#34;LOOPNE——————-不等跳转&#34;&gt;&lt;/a&gt;LOOPNE——————-不等跳转&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;loopne L1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;IF-ELSE-ELSEIF-ENDIF&#34;&gt;&lt;a href=&#34;#IF-ELSE-ELSEIF-ENDIF&#34; class=&#34;headerlink&#34; title=&#34;.IF .ELSE .ELSEIF .ENDIF&#34;&gt;&lt;/a&gt;.IF .ELSE .ELSEIF .ENDIF&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;.IF conditionl
    statements
[.ELSELF condition2
	statements]
[ELSE 
	statements]
.ENDIF&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;REPEAT-WHILE&#34;&gt;&lt;a href=&#34;#REPEAT-WHILE&#34; class=&#34;headerlink&#34; title=&#34;.REPEAT .WHILE&#34;&gt;&lt;/a&gt;.REPEAT .WHILE&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;.REPEAT 
    statements
.UNTIL condition
    
.WHILE condition
    statements
.ENDW&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;其它指令&#34;&gt;&lt;a href=&#34;#其它指令&#34; class=&#34;headerlink&#34; title=&#34;其它指令&#34;&gt;&lt;/a&gt;其它指令&lt;/h2&gt;&lt;h3 id=&#34;OFFSET-——————–-返回偏移地址&#34;&gt;&lt;a href=&#34;#OFFSET-——————–-返回偏移地址&#34; class=&#34;headerlink&#34; title=&#34;OFFSET ——————– 返回偏移地址&#34;&gt;&lt;/a&gt;OFFSET ——————– 返回偏移地址&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov esi,offset var1;  esi=00404000h
mov esi,offset var2;  esi=00404000h&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SEG-——————–-返回段地址&#34;&gt;&lt;a href=&#34;#SEG-——————–-返回段地址&#34; class=&#34;headerlink&#34; title=&#34;SEG  ——————– 返回段地址&#34;&gt;&lt;/a&gt;SEG  ——————– 返回段地址&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mov esi,seg var1
mov esi,seg var2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;EQU-——————–-等值语句&#34;&gt;&lt;a href=&#34;#EQU-——————–-等值语句&#34; class=&#34;headerlink&#34; title=&#34;EQU(=) ——————– 等值语句&#34;&gt;&lt;/a&gt;EQU(=) ——————– 等值语句&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;name EQU expression
name EQU symbol
name EQU &amp;lt;text&amp;gt;
    
pressKey EQU &amp;lt;&#34;Press any key to continue...&#34;, 0&amp;gt;
matrix1 EQU 10 * 10
matrix2 EQU &amp;lt;10 * 10&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PURGE-——————–-解除语句&#34;&gt;&lt;a href=&#34;#PURGE-——————–-解除语句&#34; class=&#34;headerlink&#34; title=&#34;PURGE ——————– 解除语句&#34;&gt;&lt;/a&gt;PURGE ——————– 解除语句&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;PURGE，标识符1，标识符2，...，标识符n&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;DUP-——————–-操作数字段用复制操作符&#34;&gt;&lt;a href=&#34;#DUP-——————–-操作数字段用复制操作符&#34; class=&#34;headerlink&#34; title=&#34;DUP  ——————– 操作数字段用复制操作符&#34;&gt;&lt;/a&gt;DUP  ——————– 操作数字段用复制操作符&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;db x dup();x是重复的次数，（）里是要重复的数逗号分隔
str1 db 10 dup (&#39;!@#&#39;) ;这就是十个！@#
格式：db 重复的次数 dup (重复的内容)
buf1 db 100 dup(?);开辟100个字节的内存区&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SEGMENT-ENDS-——————–-段定义指令&#34;&gt;&lt;a href=&#34;#SEGMENT-ENDS-——————–-段定义指令&#34; class=&#34;headerlink&#34; title=&#34;SEGMENT,ENDS ——————– 段定义指令&#34;&gt;&lt;/a&gt;SEGMENT,ENDS ——————– 段定义指令&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;segment_name SEGMENT 【定位类型】 【组合类型】 【类别名】
···;here is your code
segment ends&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ASSUME-——————–-段地址分配指令&#34;&gt;&lt;a href=&#34;#ASSUME-——————–-段地址分配指令&#34; class=&#34;headerlink&#34; title=&#34;ASSUME ——————– 段地址分配指令&#34;&gt;&lt;/a&gt;ASSUME ——————– 段地址分配指令&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;.data
　　........
.code
　　........
　　assume cs:code,ds:data
start: .......
　　mov ax,data
　　mov ds,ax
　　...
ends
end start
&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ORG-——————–-起始偏移地址设置指令&#34;&gt;&lt;a href=&#34;#ORG-——————–-起始偏移地址设置指令&#34; class=&#34;headerlink&#34; title=&#34;ORG  ——————– 起始偏移地址设置指令&#34;&gt;&lt;/a&gt;ORG  ——————– 起始偏移地址设置指令&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;ORG 0000H
AJMP MAIN
ORG 0030H&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;——————–地址计数器的当前值&#34;&gt;&lt;a href=&#34;#——————–地址计数器的当前值&#34; class=&#34;headerlink&#34; title=&#34;$   ——————–地址计数器的当前值&#34;&gt;&lt;/a&gt;$   ——————–地址计数器的当前值&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;例如JNE+6，能引用地址计数器的值，每次引用会使地址计数器的值发生改变，地址计数器即当前指令的偏移地址。该指令的转向地址即JNE指令的首地址加6。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PROC，ENDP-——————–-过程定义语句&#34;&gt;&lt;a href=&#34;#PROC，ENDP-——————–-过程定义语句&#34; class=&#34;headerlink&#34; title=&#34;PROC，ENDP ——————– 过程定义语句&#34;&gt;&lt;/a&gt;PROC，ENDP ——————– 过程定义语句&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;SumOf proc
    .
    .
    .
    ret
SumOf endp;这是一个过程&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;NAME，TITLE，END-——————–-程序开始结束语句&#34;&gt;&lt;a href=&#34;#NAME，TITLE，END-——————–-程序开始结束语句&#34; class=&#34;headerlink&#34; title=&#34;NAME，TITLE，END ——————– 程序开始结束语句&#34;&gt;&lt;/a&gt;NAME，TITLE，END ——————– 程序开始结束语句&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;NULL&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;MACRO，ENDM-——————–宏定义指令&#34;&gt;&lt;a href=&#34;#MACRO，ENDM-——————–宏定义指令&#34; class=&#34;headerlink&#34; title=&#34;MACRO，ENDM  ——————–宏定义指令&#34;&gt;&lt;/a&gt;MACRO，ENDM  ——————–宏定义指令&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;mPutchar MACRO char
    push eax
    mov al,char
    call WriteChar
    pop eax
    ENDM&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;XLAT-（TRANSLATE）-——————–-换码指令—&#34;&gt;&lt;a href=&#34;#XLAT-（TRANSLATE）-——————–-换码指令—&#34; class=&#34;headerlink&#34; title=&#34;XLAT  （TRANSLATE） ——————– 换码指令—-&#34;&gt;&lt;/a&gt;XLAT  （TRANSLATE） ——————– 换码指令—-&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;X DW 1122h,3344h,5566h,7788h
lea bx,X
mov al,03h
xlat&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ALIGN-———————伪指令&#34;&gt;&lt;a href=&#34;#ALIGN-———————伪指令&#34; class=&#34;headerlink&#34; title=&#34;ALIGN ———————伪指令&#34;&gt;&lt;/a&gt;ALIGN ———————伪指令&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var byte ?; 00404000h
ALIGN 2
var2 byte ?; 00404002&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PTR-———————-运算符&#34;&gt;&lt;a href=&#34;#PTR-———————-运算符&#34; class=&#34;headerlink&#34; title=&#34;PTR ———————-运算符&#34;&gt;&lt;/a&gt;PTR ———————-运算符&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var dword 12345678h
mov ax,word ptr var; 将低16位(5678)送入ax&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;TYPE&#34;&gt;&lt;a href=&#34;#TYPE&#34; class=&#34;headerlink&#34; title=&#34;TYPE&#34;&gt;&lt;/a&gt;TYPE&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var word ?
var2 byte ?; word,byte都是type,分别代表2,1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LENGTHOF-————–运算符&#34;&gt;&lt;a href=&#34;#LENGTHOF-————–运算符&#34; class=&#34;headerlink&#34; title=&#34;LENGTHOF ————–运算符&#34;&gt;&lt;/a&gt;LENGTHOF ————–运算符&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var1 byte 10,20,30;3
var2 word 30 DUP(?),0,0;32
var3 word 5 DUP(3 dup(?));3*5
var4 byte &#34;1234&#34;,0;5&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SIZFEOF————-运算符&#34;&gt;&lt;a href=&#34;#SIZFEOF————-运算符&#34; class=&#34;headerlink&#34; title=&#34;SIZFEOF————-运算符&#34;&gt;&lt;/a&gt;SIZFEOF————-运算符&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var word 32 dup(0)
mov eax,sizeof var;eax=32*2=64&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LABEL-—————伪指令&#34;&gt;&lt;a href=&#34;#LABEL-—————伪指令&#34; class=&#34;headerlink&#34; title=&#34;LABEL —————伪指令&#34;&gt;&lt;/a&gt;LABEL —————伪指令&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var1 label word
var2 dword 12345678h;公用一个内存位置，var2未分配空间
mov ax,var1;5678h
mov dx,[var+2];1234h&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;TYPEDEF————–运算符&#34;&gt;&lt;a href=&#34;#TYPEDEF————–运算符&#34; class=&#34;headerlink&#34; title=&#34;TYPEDEF————–运算符&#34;&gt;&lt;/a&gt;TYPEDEF————–运算符&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;var typedef ptr byte;(指针)
.data
	array byte 10h,20h,30h
    ptr1 var ?
    ptr2 var array;指向一个数组&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;JMP-————无条件跳转到目标地址&#34;&gt;&lt;a href=&#34;#JMP-————无条件跳转到目标地址&#34; class=&#34;headerlink&#34; title=&#34;JMP ————无条件跳转到目标地址&#34;&gt;&lt;/a&gt;JMP ————无条件跳转到目标地址&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;top:
.
.
    jmp top;不断循环&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;USES—————等于-push-pop&#34;&gt;&lt;a href=&#34;#USES—————等于-push-pop&#34; class=&#34;headerlink&#34; title=&#34;USES—————等于 push+pop&#34;&gt;&lt;/a&gt;USES—————等于 push+pop&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;ArraySum proc uses esi ecx
    mov eax,0
L1:
	add eax,[esi]
    add esi,type dword
    loop L1
ArraySum endp&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CLC&#34;&gt;&lt;a href=&#34;#CLC&#34; class=&#34;headerlink&#34; title=&#34;CLC&#34;&gt;&lt;/a&gt;CLC&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;clc;清除标识位&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;STC&#34;&gt;&lt;a href=&#34;#STC&#34; class=&#34;headerlink&#34; title=&#34;STC&#34;&gt;&lt;/a&gt;STC&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;进位标志置1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ENTER——————-被调用过程自动创建堆栈帧&#34;&gt;&lt;a href=&#34;#ENTER——————-被调用过程自动创建堆栈帧&#34; class=&#34;headerlink&#34; title=&#34;ENTER——————-被调用过程自动创建堆栈帧&#34;&gt;&lt;/a&gt;ENTER——————-被调用过程自动创建堆栈帧&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Mysub proc
	enter 8,0
;等效于
Mysub proc
	push ebp
	mov ebp,esp
	sub esp,8&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LEAVE——————指令结束一个过程的堆栈帧&#34;&gt;&lt;a href=&#34;#LEAVE——————指令结束一个过程的堆栈帧&#34; class=&#34;headerlink&#34; title=&#34;LEAVE——————指令结束一个过程的堆栈帧&#34;&gt;&lt;/a&gt;LEAVE——————指令结束一个过程的堆栈帧&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Mysub proc
	enter 8,0
	.
	.
	leave
	ret
Mysub endp
;等效于
Mysub proc
	push ebp
	mov ebp,esp
	sub esp,8
	.
	.
	mov esp,ebp
	pop ebp
	ret
Mysub endp&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;LOCAL—————局部变量&#34;&gt;&lt;a href=&#34;#LOCAL—————局部变量&#34; class=&#34;headerlink&#34; title=&#34;LOCAL—————局部变量&#34;&gt;&lt;/a&gt;LOCAL—————局部变量&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;Mysub proc
	local var:dword;这是一个局部变量&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;INVOKE—————–CALL替代品，一行调用多个参数&#34;&gt;&lt;a href=&#34;#INVOKE—————–CALL替代品，一行调用多个参数&#34; class=&#34;headerlink&#34; title=&#34;INVOKE—————–CALL替代品，一行调用多个参数&#34;&gt;&lt;/a&gt;INVOKE—————–CALL替代品，一行调用多个参数&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;invoke Dumparray,offset array,lengthof array,type array&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ADDR——–只能和INVOKE一起&#34;&gt;&lt;a href=&#34;#ADDR——–只能和INVOKE一起&#34; class=&#34;headerlink&#34; title=&#34;ADDR——–只能和INVOKE一起&#34;&gt;&lt;/a&gt;ADDR——–只能和INVOKE一起&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;array dword 20 dup(?)
invoke swap
	addr array
	addr [array+4]&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;条件标志&#34;&gt;&lt;a href=&#34;#条件标志&#34; class=&#34;headerlink&#34; title=&#34;条件标志&#34;&gt;&lt;/a&gt;条件标志&lt;/h2&gt;&lt;h3 id=&#34;ZF-零标志&#34;&gt;&lt;a href=&#34;#ZF-零标志&#34; class=&#34;headerlink&#34; title=&#34;ZF 零标志&#34;&gt;&lt;/a&gt;ZF 零标志&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;当结果为负时,SF=1,否则,SF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;AF-辅助进位标志&#34;&gt;&lt;a href=&#34;#AF-辅助进位标志&#34; class=&#34;headerlink&#34; title=&#34;AF 辅助进位标志&#34;&gt;&lt;/a&gt;AF 辅助进位标志&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;运算过程中第三位有进位值,置AF=1,否则,AF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;PF-奇偶标志&#34;&gt;&lt;a href=&#34;#PF-奇偶标志&#34; class=&#34;headerlink&#34; title=&#34;PF 奇偶标志&#34;&gt;&lt;/a&gt;PF 奇偶标志&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;当结果操作数中偶数个&#34;1&#34;,置PF=1,否则,PF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;SF-符号标志&#34;&gt;&lt;a href=&#34;#SF-符号标志&#34; class=&#34;headerlink&#34; title=&#34;SF 符号标志&#34;&gt;&lt;/a&gt;SF 符号标志&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;当结果为负时,SF=1;否则,SF=0.溢出时情形例外&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;CF-进位标志&#34;&gt;&lt;a href=&#34;#CF-进位标志&#34; class=&#34;headerlink&#34; title=&#34;CF 进位标志&#34;&gt;&lt;/a&gt;CF 进位标志&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;最高有效位产生进位值,例如,执行加法指令时,MSB有进位,置CF=1;否则,CF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;OF-溢出标志&#34;&gt;&lt;a href=&#34;#OF-溢出标志&#34; class=&#34;headerlink&#34; title=&#34;OF 溢出标志&#34;&gt;&lt;/a&gt;OF 溢出标志&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-c++&#34; data-language=&#34;c++&#34;&gt;&lt;code class=&#34;language-c++&#34;&gt;若操作数结果超出了机器能表示的范围,则产生溢出,置OF=1,否则,OF=0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2021/01/01/ji-cun-qi/</guid>
            <title>寄存器</title>
            <link>https://0xdadream.github.io/2021/01/01/ji-cun-qi/</link>
            <category>学习</category>
            <category>汇编</category>
            <pubDate>Fri, 01 Jan 2021 06:37:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;32位CPU所含有的寄存器有：&#34;&gt;&lt;a href=&#34;#32位CPU所含有的寄存器有：&#34; class=&#34;headerlink&#34; title=&#34;32位CPU所含有的寄存器有：&#34;&gt;&lt;/a&gt;32位CPU所含有的寄存器有：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;4个数据寄存器(EAX、EBX、ECX和EDX) &lt;/li&gt;
&lt;li&gt;2个变址和指针寄存器(ESI和EDI) &lt;/li&gt;
&lt;li&gt;2个指针寄存器(ESP和EBP)  &lt;/li&gt;
&lt;li&gt;6个段寄存器(ES、CS、SS、DS、FS和GS) &lt;/li&gt;
&lt;li&gt;1个指令指针寄存器(EIP) 1个标志寄存器(EFlags)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;1、数据寄存器&#34;&gt;&lt;a href=&#34;#1、数据寄存器&#34; class=&#34;headerlink&#34; title=&#34;1、数据寄存器&#34;&gt;&lt;/a&gt;1、数据寄存器&lt;/h1&gt;&lt;p&gt;数据寄存器主要用来保存操作数和运算结果等信息，从而节省读取操作数所需占用总线和访问存储器的时间。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;32位CPU有4个32位的通用寄存器EAX、EBX、ECX和EDX。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对低16位数据的存取，不会影响高16位的数据。 这些低16位寄存器分别命名为：AX、BX、CX和DX，它和先前的CPU中的寄存器相一致。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4个16位寄存器又可分割成8个独立的8位寄存器(AX：AH-AL、BX：BH-BL、CX：CH-CL、DX：DH-DL)，每个寄存器都有自己的名称，可独立存取。 程序员可利用数据寄存器的这种“可分可合”的特性，灵活地处理字/字节的信息。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄存器EAX通常称为累加器(Accumulator)，用累加器进行的操作可能需要更少时间。可用于乘、 除、输入/输出等操作，使用频率很高；  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄存器EBX称为基地址寄存器(Base Register)。它可作为存储器指针来使用；  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄存器ECX称为计数寄存器(Count Register)。 在循环和字符串操作时，要用它来控制循环次数；在位操作中，当移多位时，要用CL来指明移位的位数；  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄存器EDX称为数据寄存器(Data Register)。在进行乘、除运算时，它可作为默认的操作数参与运算，也可用于存放I/O的端口地址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在16位CPU中，AX、BX、CX和DX不能作为基址和变址寄存器来存放存储单元的地址， &lt;/p&gt;
&lt;p&gt;在32位CPU中，其32位寄存器EAX、EBX、ECX和EDX不仅可传送数据、暂存数据保存算术逻辑运算结果， 而且也可作为指针寄存器，所以，这些32位寄存器更具有通用性。 &lt;/p&gt;
&lt;h1 id=&#34;2、变址寄存器&#34;&gt;&lt;a href=&#34;#2、变址寄存器&#34; class=&#34;headerlink&#34; title=&#34;2、变址寄存器&#34;&gt;&lt;/a&gt;2、变址寄存器&lt;/h1&gt;&lt;p&gt;32位CPU有2个32位通用寄存器ESI和EDI。 &lt;/p&gt;
&lt;p&gt;其低16位对应先前CPU中的SI和DI，对低16位数据的存取，不影响高16位的数据。 &lt;/p&gt;
&lt;p&gt;寄存器ESI、EDI、SI和DI称为变址寄存器(Index Register)，它们主要用于存放存储单元在段内的偏移量， 用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。 &lt;/p&gt;
&lt;p&gt;变址寄存器不可分割成8位寄存器。作为通用寄存器，也可存储算术逻辑运算的操作数和运算结果。 &lt;/p&gt;
&lt;p&gt;它们可作一般的存储器指针使用。在字符串操作指令的执行过程中，对它们有特定的要求，而且还具有特殊的功能。 &lt;/p&gt;
&lt;h1 id=&#34;3、指针寄存器&#34;&gt;&lt;a href=&#34;#3、指针寄存器&#34; class=&#34;headerlink&#34; title=&#34;3、指针寄存器&#34;&gt;&lt;/a&gt;3、指针寄存器&lt;/h1&gt;&lt;p&gt;其低16位对应先前CPU中的BP和SP，对低16位数据的存取，不影响高16位的数据。 &lt;/p&gt;
&lt;p&gt;32位CPU有2个32位通用寄存器EBP和ESP。 &lt;/p&gt;
&lt;p&gt;它们主要用于访问堆栈内的存储单元，并且规定： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EBP为基指针(Base Pointer)寄存器，用它可直接存取堆栈中的数据；  &lt;/li&gt;
&lt;li&gt;ESP为堆栈指针(Stack Pointer)寄存器，用它只可访问栈顶。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;寄存器EBP、ESP、BP和SP称为指针寄存器(Pointer Register)，主要用于存放堆栈内存储单元的偏移量， 用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。 &lt;/p&gt;
&lt;p&gt;指针寄存器不可分割成8位寄存器。作为通用寄存器，也可存储算术逻辑运算的操作数和运算结果。 &lt;/p&gt;
&lt;h1 id=&#34;4、段寄存器&#34;&gt;&lt;a href=&#34;#4、段寄存器&#34; class=&#34;headerlink&#34; title=&#34;4、段寄存器&#34;&gt;&lt;/a&gt;4、段寄存器&lt;/h1&gt;&lt;p&gt;段寄存器是根据内存分段的管理模式而设置的。内存单元的物理地址由段寄存器的值和一个偏移量组合而成的，这样可用两个较少位数的值组合成一个可访问较大物理空间的内存地址。 &lt;/p&gt;
&lt;p&gt;CPU内部的段寄存器： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ECS——代码段寄存器(Code Segment Register)，其值为代码段的段值；  &lt;/li&gt;
&lt;li&gt;EDS——数据段寄存器(Data Segment Register)，其值为数据段的段值；  &lt;/li&gt;
&lt;li&gt;EES——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值；  &lt;/li&gt;
&lt;li&gt;ESS——堆栈段寄存器(Stack Segment Register)，其值为堆栈段的段值；  &lt;/li&gt;
&lt;li&gt;EFS——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值；  &lt;/li&gt;
&lt;li&gt;EGS——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值。  &lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在16位CPU系统中，它只有4个段寄存器，所以，程序在任何时刻至多有4个正在使用的段可直接访问；&lt;/li&gt;
&lt;li&gt;在32位微机系统中，它有6个段寄存器，所以，在此环境下开发的程序最多可同时访问6个段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;32位CPU有两个不同的工作方式：实方式和保护方式。在每种方式下，段寄存器的作用是不同的。有关规定简 单描述如下： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实方式： 前4个段寄存器CS、DS、ES和SS与先前CPU中的所对应的段寄存器的含义完全一致，内存单元的逻辑地址仍为“段值：偏移量”的形式。为访问某内存段内的数据，必须使用该段寄存器和存储单元的偏移量。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保护方式： 在此方式下，情况要复杂得多，装入段寄存器的不再是段值，而是称为“选择子”(Selector)的某个值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5、指令指针寄存器&#34;&gt;&lt;a href=&#34;#5、指令指针寄存器&#34; class=&#34;headerlink&#34; title=&#34;5、指令指针寄存器&#34;&gt;&lt;/a&gt;5、指令指针寄存器&lt;/h1&gt;&lt;p&gt;32位CPU把指令指针扩展到32位，并记作EIP，EIP的低16位与先前CPU中的IP作用相同。 &lt;/p&gt;
&lt;p&gt;指令指针EIP、IP(Instruction Pointer)是存放下次将要执行的指令在代码段的偏移量。 &lt;/p&gt;
&lt;p&gt;在具有预取指令功能的系统中，下次要执行的指令通常已被预取到指令队列中，除非发生转移情况。 &lt;/p&gt;
&lt;p&gt;所以，在理解它们的功能时，不考虑存在指令队列的情况。 &lt;/p&gt;
&lt;h1 id=&#34;6、标志寄存器&#34;&gt;&lt;a href=&#34;#6、标志寄存器&#34; class=&#34;headerlink&#34; title=&#34;6、标志寄存器&#34;&gt;&lt;/a&gt;6、标志寄存器&lt;/h1&gt;&lt;h2 id=&#34;一、运算结果标志位&#34;&gt;&lt;a href=&#34;#一、运算结果标志位&#34; class=&#34;headerlink&#34; title=&#34;一、运算结果标志位&#34;&gt;&lt;/a&gt;一、运算结果标志位&lt;/h2&gt;&lt;h3 id=&#34;1、进位标志CF-Carry-Flag&#34;&gt;&lt;a href=&#34;#1、进位标志CF-Carry-Flag&#34; class=&#34;headerlink&#34; title=&#34;1、进位标志CF(Carry Flag)&#34;&gt;&lt;/a&gt;1、进位标志CF(Carry Flag)&lt;/h3&gt;&lt;p&gt;进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。 &lt;/p&gt;
&lt;p&gt;使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。 &lt;/p&gt;
&lt;h3 id=&#34;2、奇偶标志PF-Parity-Flag&#34;&gt;&lt;a href=&#34;#2、奇偶标志PF-Parity-Flag&#34; class=&#34;headerlink&#34; title=&#34;2、奇偶标志PF(Parity Flag)&#34;&gt;&lt;/a&gt;2、奇偶标志PF(Parity Flag)&lt;/h3&gt;&lt;p&gt;奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。 &lt;/p&gt;
&lt;p&gt;利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。 &lt;/p&gt;
&lt;h3 id=&#34;3、辅助进位标志AF-Auxiliary-Carry-Flag&#34;&gt;&lt;a href=&#34;#3、辅助进位标志AF-Auxiliary-Carry-Flag&#34; class=&#34;headerlink&#34; title=&#34;3、辅助进位标志AF(Auxiliary Carry Flag)&#34;&gt;&lt;/a&gt;3、辅助进位标志AF(Auxiliary Carry Flag)&lt;/h3&gt;&lt;p&gt;在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在字操作时，发生低字节向高字节进位或借位时； &lt;/li&gt;
&lt;li&gt;在字节操作时，发生低4位向高4位进位或借位时。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。 &lt;/p&gt;
&lt;h3 id=&#34;4、零标志ZF-Zero-Flag&#34;&gt;&lt;a href=&#34;#4、零标志ZF-Zero-Flag&#34; class=&#34;headerlink&#34; title=&#34;4、零标志ZF(Zero Flag)&#34;&gt;&lt;/a&gt;4、零标志ZF(Zero Flag)&lt;/h3&gt;&lt;p&gt;零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。 &lt;/p&gt;
&lt;h3 id=&#34;5、符号标志SF-Sign-Flag&#34;&gt;&lt;a href=&#34;#5、符号标志SF-Sign-Flag&#34; class=&#34;headerlink&#34; title=&#34;5、符号标志SF(Sign Flag)&#34;&gt;&lt;/a&gt;5、符号标志SF(Sign Flag)&lt;/h3&gt;&lt;p&gt;符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。 &lt;/p&gt;
&lt;h3 id=&#34;6、溢出标志OF-Overflow-Flag&#34;&gt;&lt;a href=&#34;#6、溢出标志OF-Overflow-Flag&#34; class=&#34;headerlink&#34; title=&#34;6、溢出标志OF(Overflow Flag)&#34;&gt;&lt;/a&gt;6、溢出标志OF(Overflow Flag)&lt;/h3&gt;&lt;p&gt;溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。 “&lt;/p&gt;
&lt;p&gt;溢出”和“进位”是两个不同含义的概念，不要混淆。&lt;/p&gt;
&lt;h2 id=&#34;二、状态控制标志位&#34;&gt;&lt;a href=&#34;#二、状态控制标志位&#34; class=&#34;headerlink&#34; title=&#34;二、状态控制标志位&#34;&gt;&lt;/a&gt;二、状态控制标志位&lt;/h2&gt;&lt;p&gt;状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。 &lt;/p&gt;
&lt;h2 id=&#34;1、追踪标志TF-Trap-Flag&#34;&gt;&lt;a href=&#34;#1、追踪标志TF-Trap-Flag&#34; class=&#34;headerlink&#34; title=&#34;1、追踪标志TF(Trap Flag)&#34;&gt;&lt;/a&gt;1、追踪标志TF(Trap Flag)&lt;/h2&gt;&lt;p&gt;当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。 指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。 &lt;/p&gt;
&lt;h3 id=&#34;2、中断允许标志IF-Interrupt-enable-Flag&#34;&gt;&lt;a href=&#34;#2、中断允许标志IF-Interrupt-enable-Flag&#34; class=&#34;headerlink&#34; title=&#34;2、中断允许标志IF(Interrupt-enable Flag)&#34;&gt;&lt;/a&gt;2、中断允许标志IF(Interrupt-enable Flag)&lt;/h3&gt;&lt;p&gt;中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。 但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。 具体规定如下： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求； &lt;/li&gt;
&lt;li&gt;当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。 CPU的指令系统中也有专门的指令来改变标志位IF的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3、方向标志DF-Direction-Flag&#34;&gt;&lt;a href=&#34;#3、方向标志DF-Direction-Flag&#34; class=&#34;headerlink&#34; title=&#34;3、方向标志DF(Direction Flag)&#34;&gt;&lt;/a&gt;3、方向标志DF(Direction Flag)&lt;/h3&gt;&lt;p&gt;方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。 在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。 &lt;/p&gt;
&lt;h2 id=&#34;三、32位标志寄存器增加的标志位&#34;&gt;&lt;a href=&#34;#三、32位标志寄存器增加的标志位&#34; class=&#34;headerlink&#34; title=&#34;三、32位标志寄存器增加的标志位&#34;&gt;&lt;/a&gt;三、32位标志寄存器增加的标志位&lt;/h2&gt;&lt;h3 id=&#34;1、I-O特权标志IOPL-I-O-Privilege-Level&#34;&gt;&lt;a href=&#34;#1、I-O特权标志IOPL-I-O-Privilege-Level&#34; class=&#34;headerlink&#34; title=&#34;1、I/O特权标志IOPL(I/O Privilege Level)&#34;&gt;&lt;/a&gt;1、I/O特权标志IOPL(I/O Privilege Level)&lt;/h3&gt;&lt;p&gt;I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。 如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。 &lt;/p&gt;
&lt;h3 id=&#34;2、嵌套任务标志NT-Nested-Task&#34;&gt;&lt;a href=&#34;#2、嵌套任务标志NT-Nested-Task&#34; class=&#34;headerlink&#34; title=&#34;2、嵌套任务标志NT(Nested Task)&#34;&gt;&lt;/a&gt;2、嵌套任务标志NT(Nested Task)&lt;/h3&gt;&lt;p&gt;嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作； &lt;/li&gt;
&lt;li&gt;当NT=1，通过任务转换实现中断返回。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3、重启动标志RF-Restart-Flag&#34;&gt;&lt;a href=&#34;#3、重启动标志RF-Restart-Flag&#34; class=&#34;headerlink&#34; title=&#34;3、重启动标志RF(Restart Flag)&#34;&gt;&lt;/a&gt;3、重启动标志RF(Restart Flag)&lt;/h3&gt;&lt;p&gt;重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。 在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。 &lt;/p&gt;
&lt;h3 id=&#34;4、虚拟8086方式标志VM-Virtual-8086-Mode&#34;&gt;&lt;a href=&#34;#4、虚拟8086方式标志VM-Virtual-8086-Mode&#34; class=&#34;headerlink&#34; title=&#34;4、虚拟8086方式标志VM(Virtual 8086 Mode)&#34;&gt;&lt;/a&gt;4、虚拟8086方式标志VM(Virtual 8086 Mode)&lt;/h3&gt;&lt;p&gt;如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态。 &lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
