{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦 • All posts by \"汇编\" tag",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2021/01/03/zhi-ling/",
            "url": "https://0xdadream.github.io/2021/01/03/zhi-ling/",
            "title": "32位汇编指令总结(代码示例)",
            "date_published": "2021-01-02T18:00:00.000Z",
            "content_html": "<h1 id=\"通用数据传送指令\"><a href=\"#通用数据传送指令\" class=\"headerlink\" title=\"通用数据传送指令\"></a>通用数据传送指令</h1><h3 id=\"MOV-传送字或字节\"><a href=\"#MOV-传送字或字节\" class=\"headerlink\" title=\"MOV 传送字或字节\"></a>MOV 传送字或字节</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,10h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"MOVSX-先符号扩展-再传送\"><a href=\"#MOVSX-先符号扩展-再传送\" class=\"headerlink\" title=\"MOVSX 先符号扩展,再传送\"></a>MOVSX 先符号扩展,再传送</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">movsx eax,ax;先进行全零扩展,前16位为F<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"MOVZX-先零扩展-再传送\"><a href=\"#MOVZX-先零扩展-再传送\" class=\"headerlink\" title=\"MOVZX 先零扩展,再传送\"></a>MOVZX 先零扩展,再传送</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">movzx eax,ax;先进行全零扩展,前16位为0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"PUSH-把字压入堆栈\"><a href=\"#PUSH-把字压入堆栈\" class=\"headerlink\" title=\"PUSH 把字压入堆栈\"></a>PUSH 把字压入堆栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">push reg/nem16   32\npush imm32<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"POP-把字弹出堆栈\"><a href=\"#POP-把字弹出堆栈\" class=\"headerlink\" title=\"POP 把字弹出堆栈\"></a>POP 把字弹出堆栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pop reg/nem16  32<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"PUSHFD-把32EFLAGS寄存器内容压入堆栈\"><a href=\"#PUSHFD-把32EFLAGS寄存器内容压入堆栈\" class=\"headerlink\" title=\"PUSHFD 把32EFLAGS寄存器内容压入堆栈\"></a>PUSHFD 把32EFLAGS寄存器内容压入堆栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pushfd;保存标志寄存器内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"POPFD-把32EFLAGS寄存器内容弹出堆栈\"><a href=\"#POPFD-把32EFLAGS寄存器内容弹出堆栈\" class=\"headerlink\" title=\"POPFD 把32EFLAGS寄存器内容弹出堆栈\"></a>POPFD 把32EFLAGS寄存器内容弹出堆栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">popfd;恢复标志寄存器内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"PUSHA-把AX-CX-DX-BX-SP-BP-SI-DI依次压入堆栈\"><a href=\"#PUSHA-把AX-CX-DX-BX-SP-BP-SI-DI依次压入堆栈\" class=\"headerlink\" title=\"PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈\"></a>PUSHA 把AX,CX,DX,BX,SP,BP,SI,DI依次压入堆栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pusha;保存16通用寄存器内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"POPA-把DI-SI-BP-SP-BX-DX-CX-AX依次弹出堆栈\"><a href=\"#POPA-把DI-SI-BP-SP-BX-DX-CX-AX依次弹出堆栈\" class=\"headerlink\" title=\"POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈\"></a>POPA 把DI,SI,BP,SP,BX,DX,CX,AX依次弹出堆栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">popa;恢复16通用寄存器内存<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"PUSHAD-把EAX-ECX-EDX-EBX-ESP-EBP-ESI-EDI依次压入堆栈\"><a href=\"#PUSHAD-把EAX-ECX-EDX-EBX-ESP-EBP-ESI-EDI依次压入堆栈\" class=\"headerlink\" title=\"PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈\"></a>PUSHAD 把EAX,ECX,EDX,EBX,ESP,EBP,ESI,EDI依次压入堆栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pushad;保存32通用寄存器内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"POPAD-把EDI-ESI-EBP-ESP-EBX-EDX-ECX-EAX依次弹出堆栈\"><a href=\"#POPAD-把EDI-ESI-EBP-ESP-EBX-EDX-ECX-EAX依次弹出堆栈\" class=\"headerlink\" title=\"POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈\"></a>POPAD 把EDI,ESI,EBP,ESP,EBX,EDX,ECX,EAX依次弹出堆栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">popad;恢复32通用寄存器内存<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"BSWAP-交换32位寄存器里字节的顺序\"><a href=\"#BSWAP-交换32位寄存器里字节的顺序\" class=\"headerlink\" title=\"BSWAP 交换32位寄存器里字节的顺序\"></a>BSWAP 交换32位寄存器里字节的顺序</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">;EAX=96688368H\nBSWAP EAX;EAX=68836896H<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"XCHG-交换字或字节-至少有一个操作数为寄存器-段寄存器不可作为操作数\"><a href=\"#XCHG-交换字或字节-至少有一个操作数为寄存器-段寄存器不可作为操作数\" class=\"headerlink\" title=\"XCHG 交换字或字节( 至少有一个操作数为寄存器,段寄存器不可作为操作数)\"></a>XCHG 交换字或字节( 至少有一个操作数为寄存器,段寄存器不可作为操作数)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">xchg ax,hx\nxchg ah,al\nxchg eax,ebx\nxchg var,ax;var16位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"CMPXCHG-比较并交换操作数-第二个操作数必须为累加器AL-AX-EAX\"><a href=\"#CMPXCHG-比较并交换操作数-第二个操作数必须为累加器AL-AX-EAX\" class=\"headerlink\" title=\"CMPXCHG 比较并交换操作数( 第二个操作数必须为累加器AL/AX/EAX )\"></a>CMPXCHG 比较并交换操作数( 第二个操作数必须为累加器AL/AX/EAX )</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">CMPXCHG CX,DX\n;如果指令执行前 (AX)=2300H,(CX)=2300H.(DX)=2400H\n;则指令执行后 因（CX）=(AX),故(CX)=2400H,ZF=1\n;如果指令执行前（AX）=2500H,(CX)=2300H,(DX)=2400H\n;则指令执行后因（CX）!=(AX)，故(AX)=2300H，ZF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"XADD-先交换再累加-结果在第一个操作数里\"><a href=\"#XADD-先交换再累加-结果在第一个操作数里\" class=\"headerlink\" title=\"XADD 先交换再累加( 结果在第一个操作数里 )\"></a>XADD 先交换再累加( 结果在第一个操作数里 )</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">xadd eax，ecx\n;相当于：\n\t先执行：\n\t\txchg eax,ecx\n\t然后执行：\n\t\tadd eax,ecx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"XLAT-字节查表转换\"><a href=\"#XLAT-字节查表转换\" class=\"headerlink\" title=\"XLAT 字节查表转换\"></a>XLAT 字节查表转换</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">X DW 1122h,3344h,5566h,7788h\nlea bx,X\nmov al,03h\nxlat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>BX 指向一张 256 字节的表的起点, AL 为表的索引值 (0-255,即 0-FFH); 返回 AL 为查表结果 ( [BX+AL]-&gt;AL )</p>\n<h1 id=\"输入输出端口传送指令\"><a href=\"#输入输出端口传送指令\" class=\"headerlink\" title=\"输入输出端口传送指令\"></a>输入输出端口传送指令</h1><h3 id=\"IN-I-O端口输入\"><a href=\"#IN-I-O端口输入\" class=\"headerlink\" title=\"IN I/O端口输入\"></a>IN I/O端口输入</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">语法: IN 累加器, {端口号│DX}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"OUT-I-O端口输出\"><a href=\"#OUT-I-O端口输出\" class=\"headerlink\" title=\"OUT I/O端口输出\"></a>OUT I/O端口输出</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">语法: OUT {端口号│DX},累加器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"输入输出端口由立即方式指定时-其范围是-0-255-由寄存器-DX-指定时-其范围是-0-65535\"><a href=\"#输入输出端口由立即方式指定时-其范围是-0-255-由寄存器-DX-指定时-其范围是-0-65535\" class=\"headerlink\" title=\"输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,其范围是 0-65535\"></a>输入输出端口由立即方式指定时, 其范围是 0-255; 由寄存器 DX 指定时,其范围是 0-65535</h3><h1 id=\"目的地址传送指令\"><a href=\"#目的地址传送指令\" class=\"headerlink\" title=\"目的地址传送指令\"></a>目的地址传送指令</h1><h3 id=\"LEA-装入有效地址\"><a href=\"#LEA-装入有效地址\" class=\"headerlink\" title=\"LEA 装入有效地址\"></a>LEA 装入有效地址</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">LEA DX,string ;把偏移地址存到DX<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"LDS-传送目标指针-把指针内容装入DS\"><a href=\"#LDS-传送目标指针-把指针内容装入DS\" class=\"headerlink\" title=\"LDS 传送目标指针,把指针内容装入DS\"></a>LDS 传送目标指针,把指针内容装入DS</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">LDS SI,string ;把段地址:偏移地址存到DS:SI<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"LES-传送目标指针-把指针内容装入ES\"><a href=\"#LES-传送目标指针-把指针内容装入ES\" class=\"headerlink\" title=\"LES 传送目标指针,把指针内容装入ES\"></a>LES 传送目标指针,把指针内容装入ES</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">LES DI,string ;把段地址:偏移地址存到ESDI<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"LFS-传送目标指针-把指针内容装入FS\"><a href=\"#LFS-传送目标指针-把指针内容装入FS\" class=\"headerlink\" title=\"LFS 传送目标指针,把指针内容装入FS\"></a>LFS 传送目标指针,把指针内容装入FS</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">LFS DI,string ;把段地址:偏移地址存到FSD<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"LGS-传送目标指针-把指针内容装入GS\"><a href=\"#LGS-传送目标指针-把指针内容装入GS\" class=\"headerlink\" title=\"LGS 传送目标指针,把指针内容装入GS\"></a>LGS 传送目标指针,把指针内容装入GS</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">LGS DI,string ;把段地址:偏移地址存到GSDI <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"LSS-传送目标指针-把指针内容装入SS\"><a href=\"#LSS-传送目标指针-把指针内容装入SS\" class=\"headerlink\" title=\"LSS 传送目标指针,把指针内容装入SS\"></a>LSS 传送目标指针,把指针内容装入SS</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">LSS DI,string ;把段地址:偏移地址存到SSDI<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"标志传送指令\"><a href=\"#标志传送指令\" class=\"headerlink\" title=\"标志传送指令\"></a>标志传送指令</h1><h3 id=\"LAHF-标志寄存器传送-把标志装入AH\"><a href=\"#LAHF-标志寄存器传送-把标志装入AH\" class=\"headerlink\" title=\"LAHF 标志寄存器传送,把标志装入AH\"></a>LAHF 标志寄存器传送,把标志装入AH</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">.data\n    saveflags byte ?\n.code\n    lahf\n    mov saveflags,ah<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"SAHF-标志寄存器传送-把AH内容装入标志寄存器\"><a href=\"#SAHF-标志寄存器传送-把AH内容装入标志寄存器\" class=\"headerlink\" title=\"SAHF 标志寄存器传送,把AH内容装入标志寄存器\"></a>SAHF 标志寄存器传送,把AH内容装入标志寄存器</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ah,saveflags\n    sahf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"PUSHF-标志入栈\"><a href=\"#PUSHF-标志入栈\" class=\"headerlink\" title=\"PUSHF 标志入栈\"></a>PUSHF 标志入栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pushf;保存标志寄存器内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"POPF-标志出栈\"><a href=\"#POPF-标志出栈\" class=\"headerlink\" title=\"POPF 标志出栈\"></a>POPF 标志出栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">popf;恢复标志寄存器内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"PUSHD-32位标志入栈\"><a href=\"#PUSHD-32位标志入栈\" class=\"headerlink\" title=\"PUSHD 32位标志入栈\"></a>PUSHD 32位标志入栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">pushd;保存32通用寄存器内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"POPD-32位标志出栈\"><a href=\"#POPD-32位标志出栈\" class=\"headerlink\" title=\"POPD 32位标志出栈\"></a>POPD 32位标志出栈</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">popd;恢复32通用寄存器内存<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"算术运算指令\"><a href=\"#算术运算指令\" class=\"headerlink\" title=\"算术运算指令\"></a>算术运算指令</h1><h3 id=\"ADD-加法\"><a href=\"#ADD-加法\" class=\"headerlink\" title=\"ADD 加法\"></a>ADD 加法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov eax,1\nadd eax,12<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"ADC-带进位加法\"><a href=\"#ADC-带进位加法\" class=\"headerlink\" title=\"ADC 带进位加法\"></a>ADC 带进位加法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov dl,0\nmov al,0FFh\nadd al,0FFh;AL=FEh\nadc dl,0;DL/AL=01FEh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"INC-加-1\"><a href=\"#INC-加-1\" class=\"headerlink\" title=\"INC 加 1\"></a>INC 加 1</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ax,1\ninc ax<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"AAA-加法的ASCII码调整\"><a href=\"#AAA-加法的ASCII码调整\" class=\"headerlink\" title=\"AAA 加法的ASCII码调整\"></a>AAA 加法的ASCII码调整</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ah,0\nmov al,'8';AX=0038h\nadd al,'2';AX=006Ah\naaa;AX=0100h(结果进行ASCII转换)\nor ax,3030h;AX=3130h='10'(转换为ASCII码)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DAA-加法的十进制调整\"><a href=\"#DAA-加法的十进制调整\" class=\"headerlink\" title=\"DAA 加法的十进制调整\"></a>DAA 加法的十进制调整</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,35h\nadd al,48h;AL=7Dh\ndaa;AL=83h(调整后结果)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"SUB-减法\"><a href=\"#SUB-减法\" class=\"headerlink\" title=\"SUB 减法\"></a>SUB 减法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,23\nsub al,3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"SBB-带借位减法\"><a href=\"#SBB-带借位减法\" class=\"headerlink\" title=\"SBB 带借位减法\"></a>SBB 带借位减法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov edx,7;高32位\nmov eax,1;低32位\nsub eax，2\nsbb edx，0;高32位减法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DEC-减-1\"><a href=\"#DEC-减-1\" class=\"headerlink\" title=\"DEC 减 1\"></a>DEC 减 1</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">dec al<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"NEC-求反-以-0-减之\"><a href=\"#NEC-求反-以-0-减之\" class=\"headerlink\" title=\"NEC 求反(以 0 减之)\"></a>NEC 求反(以 0 减之)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">nec al<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"CMP-比较-两操作数作减法-仅修改标志位-不回送结果\"><a href=\"#CMP-比较-两操作数作减法-仅修改标志位-不回送结果\" class=\"headerlink\" title=\"CMP 比较.(两操作数作减法,仅修改标志位,不回送结果)\"></a>CMP 比较.(两操作数作减法,仅修改标志位,不回送结果)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ax,5\ncmp ax,10;ZF=0 and CF=1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"AAS-减法的ASCII码调整\"><a href=\"#AAS-减法的ASCII码调整\" class=\"headerlink\" title=\"AAS 减法的ASCII码调整\"></a>AAS 减法的ASCII码调整</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ah,0\nmov al,'8';AX=0038h\nsub al,'9';AX=00FFh\naas;AX=FF09h\npushf\nor al,30h;AX=FF39h\npopf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DAS-减法的十进制调整\"><a href=\"#DAS-减法的十进制调整\" class=\"headerlink\" title=\"DAS 减法的十进制调整\"></a>DAS 减法的十进制调整</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov bl,48h\nmov al,85h\nsub al,bl;AL=3Dh\ndas;AL=37h(调整后结果)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"MUL-无符号乘法\"><a href=\"#MUL-无符号乘法\" class=\"headerlink\" title=\"MUL 无符号乘法\"></a>MUL 无符号乘法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var word 0100h\nmov ax,2000h;AX=2000h;AX存储结果\nmul 0100h/var;DX:AX=00200000h,CF=1;32位EDX:EAX<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"IMUL-整数乘法\"><a href=\"#IMUL-整数乘法\" class=\"headerlink\" title=\"IMUL 整数乘法\"></a>IMUL 整数乘法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ax,48\nmov bx,4\nimul bx;DX:AX=000000C0h,OF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"以上两条-结果回送AH和AL-字节运算-或DX和AX-字运算\"><a href=\"#以上两条-结果回送AH和AL-字节运算-或DX和AX-字运算\" class=\"headerlink\" title=\"以上两条,结果回送AH和AL(字节运算),或DX和AX(字运算)\"></a>以上两条,结果回送AH和AL(字节运算),或DX和AX(字运算)</h3><h3 id=\"AAM-乘法的ASCII码调整\"><a href=\"#AAM-乘法的ASCII码调整\" class=\"headerlink\" title=\"AAM 乘法的ASCII码调整\"></a>AAM 乘法的ASCII码调整</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var byte 05h,06h\nmov bl,var;第一个操作数\nmov bl,[var+1];第二个操作数\nmul bl;AX=001Eh\naam;AX=0300h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DIV-无符号除法\"><a href=\"#DIV-无符号除法\" class=\"headerlink\" title=\"DIV 无符号除法\"></a>DIV 无符号除法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ax,0083h;被除数\nmov bl,2;除数\ndiv bl;AL=41h,AH=01h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"IDIV-整数除法\"><a href=\"#IDIV-整数除法\" class=\"headerlink\" title=\"IDIV 整数除法\"></a>IDIV 整数除法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var sword -101;009Bh\nmov dx,0\nmov ax,var;DX:AX=0000009Bh(+155)\nmov bx,2;BX是除数\nidiv bx;DX:AX除以BX\n    \nvar sword -48\nmov al,var;被除数低字节\ncbw；AL扩展到AH\nmov bl,+5;除数\nidiv bl;AL=-9,AH=-3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"以上两条-结果回送\"><a href=\"#以上两条-结果回送\" class=\"headerlink\" title=\"以上两条,结果回送:\"></a>以上两条,结果回送:</h3><h3 id=\"商回送AL-余数回送AH-字节运算-或商回送AX-余数回送DX-字运算\"><a href=\"#商回送AL-余数回送AH-字节运算-或商回送AX-余数回送DX-字运算\" class=\"headerlink\" title=\"商回送AL,余数回送AH, (字节运算);或商回送AX,余数回送DX, (字运算)\"></a>商回送AL,余数回送AH, (字节运算);或商回送AX,余数回送DX, (字运算)</h3><h3 id=\"AAD-除法的ASCII码调整\"><a href=\"#AAD-除法的ASCII码调整\" class=\"headerlink\" title=\"AAD 除法的ASCII码调整\"></a>AAD 除法的ASCII码调整</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var byte ?\nvar2 byte ?\nmov ax,0307h;被除数\naad;AX=0025h\nmov bl,5;除数\ndiv bl;AX=0207h\nmov var,al\nmov var2,ah<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"CBW-字节转换为字-把AL中字节的符号扩展到AH中去\"><a href=\"#CBW-字节转换为字-把AL中字节的符号扩展到AH中去\" class=\"headerlink\" title=\"CBW 字节转换为字. (把AL中字节的符号扩展到AH中去)\"></a>CBW 字节转换为字. (把AL中字节的符号扩展到AH中去)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var sword -101;9Bh\nmov al,var;AL=9Bh\ncbw;AL=FF9Bh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"CWD-字转换为双字-把AX中的字的符号扩展到DX中去\"><a href=\"#CWD-字转换为双字-把AX中的字的符号扩展到DX中去\" class=\"headerlink\" title=\"CWD 字转换为双字. (把AX中的字的符号扩展到DX中去)\"></a>CWD 字转换为双字. (把AX中的字的符号扩展到DX中去)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var sword -101;FF9Bh\nmov ax,var;AX=FF9Bh\ncwd;DX:AX=FFFFFF9Bh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"CWDE-字转换为双字-把AX中的字符号扩展到EAX中去\"><a href=\"#CWDE-字转换为双字-把AX中的字符号扩展到EAX中去\" class=\"headerlink\" title=\"CWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)\"></a>CWDE 字转换为双字. (把AX中的字符号扩展到EAX中去)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"CDQ-双字扩展-把EAX中的字的符号扩展到EDX中去\"><a href=\"#CDQ-双字扩展-把EAX中的字的符号扩展到EDX中去\" class=\"headerlink\" title=\"CDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去)\"></a>CDQ 双字扩展. (把EAX中的字的符号扩展到EDX中去)</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">var sword -101;FFFFFF9Bh\nmov eax,var;EDX:EAX=FFFFFFFFFFFFFF9Bh\ncdq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"逻辑运算指令\"><a href=\"#逻辑运算指令\" class=\"headerlink\" title=\"逻辑运算指令\"></a>逻辑运算指令</h1><h3 id=\"AND-与运算\"><a href=\"#AND-与运算\" class=\"headerlink\" title=\"AND 与运算\"></a>AND 与运算</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,10101110b\nand al,11110110b;消除位0,3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"OR-或运算\"><a href=\"#OR-或运算\" class=\"headerlink\" title=\"OR 或运算\"></a>OR 或运算</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,11100011b\nor al,00000100b;位2置1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"XOR-异或运算\"><a href=\"#XOR-异或运算\" class=\"headerlink\" title=\"XOR 异或运算\"></a>XOR 异或运算</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,10110101b\nxor al,0;异或<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"NOT-取反\"><a href=\"#NOT-取反\" class=\"headerlink\" title=\"NOT 取反\"></a>NOT 取反</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,10101110b\nnot al;补集<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"TEST-测试-两操作数作与运算-仅修改标志位-不回送结果\"><a href=\"#TEST-测试-两操作数作与运算-仅修改标志位-不回送结果\" class=\"headerlink\" title=\"TEST 测试(两操作数作与运算,仅修改标志位,不回送结果)\"></a>TEST 测试(两操作数作与运算,仅修改标志位,不回送结果)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">test al,00001001b;测试0,3位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"SHL-逻辑左移-位元乘法\"><a href=\"#SHL-逻辑左移-位元乘法\" class=\"headerlink\" title=\"SHL 逻辑左移,位元乘法\"></a>SHL 逻辑左移,位元乘法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov bl,8Fh;BL=10001111b\nshl bl,1;CF=1,BL=00011110b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"SAL-算术左移-SHL\"><a href=\"#SAL-算术左移-SHL\" class=\"headerlink\" title=\"SAL 算术左移(=SHL)\"></a>SAL 算术左移(=SHL)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">sal/shl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"SHR-逻辑右移，位元除法\"><a href=\"#SHR-逻辑右移，位元除法\" class=\"headerlink\" title=\"SHR 逻辑右移，位元除法\"></a>SHR 逻辑右移，位元除法</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,0D0h;AL=11010000b\nshr al,1;AL=01101000b,CF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"SAR-算术右移-SHR\"><a href=\"#SAR-算术右移-SHR\" class=\"headerlink\" title=\"SAR 算术右移(=SHR)\"></a>SAR 算术右移(=SHR)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">sar/shr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"ROL-循环左移\"><a href=\"#ROL-循环左移\" class=\"headerlink\" title=\"ROL 循环左移\"></a>ROL 循环左移</h3><pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">mov al,40h;AL=01000000b\nrol al,1;AL=10000000b\nrol al,3;AL=00000100b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ROR-循环右移\"><a href=\"#ROR-循环右移\" class=\"headerlink\" title=\"ROR 循环右移\"></a>ROR 循环右移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,01h;AL=00000001b\nror al,1;AL=10000000b\nror al,3;AL=00010000b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"RCL-通过进位的循环左移\"><a href=\"#RCL-通过进位的循环左移\" class=\"headerlink\" title=\"RCL 通过进位的循环左移\"></a>RCL 通过进位的循环左移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">clc;CF=0\nmov bl,88h;CF,BL=0 10001000b\nrcl bl,1;CF,BL=1 00010000b\nrcl bl,1;CF,BL=0 00100010b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"RCR-通过进位的循环右移\"><a href=\"#RCR-通过进位的循环右移\" class=\"headerlink\" title=\"RCR 通过进位的循环右移\"></a>RCR 通过进位的循环右移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">stc ;CF=1\nmov ah,10h;AH,CF=00010000 1\nrcr ah,1;AH,CF=10001000 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>以上八种移位指令,其移位次数可达255次</p>\n<p>移位一次时, 可直接用操作码. 如 SHL AX,1</p>\n<p>移位&gt;1次时, 则由寄存器CL给出移位次数</p>\n<p>如 MOV CL,04 SHL AX,CL</p>\n<h3 id=\"SHLD-双精度左移\"><a href=\"#SHLD-双精度左移\" class=\"headerlink\" title=\"SHLD 双精度左移\"></a>SHLD 双精度左移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">wval word 9BA6h\nmov ax,0AC36h\nshld wval,ax,4;wval=BA6Ah,将wval左移4位，并把AX的高4位插入wval的低4位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"SHRD-双精度右移\"><a href=\"#SHRD-双精度右移\" class=\"headerlink\" title=\"SHRD 双精度右移\"></a>SHRD 双精度右移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ax,234Bh\nmov dx,7654h\nshrd ax,dx,4;AX右移4位，并把DX的低4位插入AX的高4位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"串指令\"><a href=\"#串指令\" class=\"headerlink\" title=\"串指令\"></a>串指令</h1><h3 id=\"DS-SI-源串段寄存器-源串变址\"><a href=\"#DS-SI-源串段寄存器-源串变址\" class=\"headerlink\" title=\"DS:SI 源串段寄存器 :源串变址\"></a>DS:SI 源串段寄存器 :源串变址</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"ESI-目标串段寄存器-目标串变址\"><a href=\"#ESI-目标串段寄存器-目标串变址\" class=\"headerlink\" title=\"ESI 目标串段寄存器:目标串变址\"></a>ESI 目标串段寄存器:目标串变址</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"CX-重复次数计数器\"><a href=\"#CX-重复次数计数器\" class=\"headerlink\" title=\"CX 重复次数计数器\"></a>CX 重复次数计数器</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"AL-AX-扫描值\"><a href=\"#AL-AX-扫描值\" class=\"headerlink\" title=\"AL/AX 扫描值\"></a>AL/AX 扫描值</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"D标志-0表示重复操作中SI和DI应自动增量-1表示应自动减量\"><a href=\"#D标志-0表示重复操作中SI和DI应自动增量-1表示应自动减量\" class=\"headerlink\" title=\"D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量\"></a>D标志 0表示重复操作中SI和DI应自动增量; 1表示应自动减量</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Z标志-用来控制扫描或比较操作的结束\"><a href=\"#Z标志-用来控制扫描或比较操作的结束\" class=\"headerlink\" title=\"Z标志 用来控制扫描或比较操作的结束\"></a>Z标志 用来控制扫描或比较操作的结束</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"MOVS-串传送-MOVSB-传送字符-MOVSW-传送字-MOVSD-传送双字\"><a href=\"#MOVS-串传送-MOVSB-传送字符-MOVSW-传送字-MOVSD-传送双字\" class=\"headerlink\" title=\"MOVS 串传送   ( MOVSB 传送字符 MOVSW 传送字 MOVSD 传送双字 )\"></a>MOVS 串传送   ( MOVSB 传送字符 MOVSW 传送字 MOVSD 传送双字 )</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">;传送字符串数据：将ESI寻址的内存数据复制到EDI寻址的内存位置\n;复制双字数值\nsource dword 20 dup(0FFFFFFFh)\ntarget dword 20 dup(?)\n.code\ncld;方向为正\nmov ecx,lengthof source;设置REP计数器\nmov esi,offset source;ESI指向source\nmov edi,offset target;EDI指向target\nrep movsd;复制双字<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"CMPS-串比较-CMPSB-比较字符-CMPSW-比较字\"><a href=\"#CMPS-串比较-CMPSB-比较字符-CMPSW-比较字\" class=\"headerlink\" title=\"CMPS 串比较   ( CMPSB 比较字符 CMPSW 比较字 )\"></a>CMPS 串比较   ( CMPSB 比较字符 CMPSW 比较字 )</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">;比较字符串：比较分别由ESI和EDI寻址的内存数据\n;比较双字\nmov esi OFFSET source\nmov edi ,OFFSET target\ncld;方向为正向\nmov ecx, LENGTHOF source;设置重复计数器\nrepe cmpsd;相等则重复<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"SCAS-串扫描-把AL或AX的内容与目标串作比较-比较结果反映在标志位\"><a href=\"#SCAS-串扫描-把AL或AX的内容与目标串作比较-比较结果反映在标志位\" class=\"headerlink\" title=\"SCAS 串扫描    把AL或AX的内容与目标串作比较,比较结果反映在标志位\"></a>SCAS 串扫描    把AL或AX的内容与目标串作比较,比较结果反映在标志位</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">;扫描字符串：比较累加器（AL、AX和EAX）与EDI寻址的内存数据\n;扫描是否有匹配字符\nalpha BYTE \"ABCDEFGH\",0\n.code\nmov edi,OFFSET alpha;EDI指向字符串\nmov al,'F';检索字符F\nmov ecx,LENGTHOF alpha;设置检索计数器\ncld;方向为正向\nrepne scasb;不相等则重复\njnz quit;若未发现字符则退出\ndec edi;发现字符: EDI减1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"LODS-装入串-把源串中的元素-字或字节-逐一装入AL或AX中-LODSB-传送字符-LODSW-传送字-LODSD-传送双字\"><a href=\"#LODS-装入串-把源串中的元素-字或字节-逐一装入AL或AX中-LODSB-传送字符-LODSW-传送字-LODSD-传送双字\" class=\"headerlink\" title=\"LODS 装入串    把源串中的元素(字或字节)逐一装入AL或AX中( LODSB 传送字符 LODSW 传送字 LODSD 传送双字 )\"></a>LODS 装入串    把源串中的元素(字或字节)逐一装入AL或AX中( LODSB 传送字符 LODSW 传送字 LODSD 传送双字 )</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">;从字符串加载到累加器：将ESI寻址的内存数据加载到累加器\n;数组乘法\n:本程序将一个32位整数数组中的每个元素都乘以一个常数。\nINCLUDE Irvine32. inc\n.data\narray DWORD 1,2,3,4,5,6,7,8,9,10;测试数据\nmultiplier DWORD 10;测试数据\n.code\nmain PROC\n    cld;方向为正向\n    mov esi,OFFSET array;源数组索引\n    mov edi,esi;目标数组索引\n    mov ecx,LENGTHOF array;循环计数器\nLl: lodsd;将[ESI]加载到EAX\n    mul multiplier;与常数相乘\n    stosd;将EAX保存到[EDI]\n    loop Ll\n    exit\nmain ENDP\nEND main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"STOS-保存串-是LODS的逆过程\"><a href=\"#STOS-保存串-是LODS的逆过程\" class=\"headerlink\" title=\"STOS 保存串   是LODS的逆过程\"></a>STOS 保存串   是LODS的逆过程</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">;保存字符串数据L：将累加器内容保存到EDI寻址的内存位置\n.data\nCount = 100\nstring1 BYTE Count DUP(?)\n.code\nmov al,OFFh;要保存的数值\nmov edi,OFFSET string1;EDI指向目标字符串\nmov ecx,Count;字符计数器\ncld;方向为正向\nrep stosb;用AL的内容实现填充<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"REP-当CX-ECX0时重复-单个指令处理整个字符串\"><a href=\"#REP-当CX-ECX0时重复-单个指令处理整个字符串\" class=\"headerlink\" title=\"REP 当CX/ECX<>0时重复(单个指令处理整个字符串)\"></a>REP 当CX/ECX&lt;&gt;0时重复(单个指令处理整个字符串)</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">rep movsb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"REPE-REPZ-当ZF-1或比较结果相等-且CX-ECX0时重复\"><a href=\"#REPE-REPZ-当ZF-1或比较结果相等-且CX-ECX0时重复\" class=\"headerlink\" title=\"REPE/REPZ 当ZF=1或比较结果相等,且CX/ECX<>0时重复\"></a>REPE/REPZ 当ZF=1或比较结果相等,且CX/ECX&lt;&gt;0时重复</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">repe cmpsd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"REPNE-REPNZ-当ZF-0或比较结果不相等-且CX-ECX0时重复\"><a href=\"#REPNE-REPNZ-当ZF-0或比较结果不相等-且CX-ECX0时重复\" class=\"headerlink\" title=\"REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX<>0时重复\"></a>REPNE/REPNZ 当ZF=0或比较结果不相等,且CX/ECX&lt;&gt;0时重复</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">repne scasb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"REPC-当CF-1且CX-ECX0时重复\"><a href=\"#REPC-当CF-1且CX-ECX0时重复\" class=\"headerlink\" title=\"REPC 当CF=1且CX/ECX<>0时重复\"></a>REPC 当CF=1且CX/ECX&lt;&gt;0时重复</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">repc movsb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"REPNC-当CF-0且CX-ECX0时重复\"><a href=\"#REPNC-当CF-0且CX-ECX0时重复\" class=\"headerlink\" title=\"REPNC 当CF=0且CX/ECX<>0时重复\"></a>REPNC 当CF=0且CX/ECX&lt;&gt;0时重复</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">repnc movsb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"程序转移指令\"><a href=\"#程序转移指令\" class=\"headerlink\" title=\"程序转移指令\"></a>程序转移指令</h1><h2 id=\"简单的条件转移指令\"><a href=\"#简单的条件转移指令\" class=\"headerlink\" title=\"简单的条件转移指令\"></a>简单的条件转移指令</h2><h3 id=\"JZ-或jE-OPR—————结果为零转移-测试条件ZF-1；相等跳转\"><a href=\"#JZ-或jE-OPR—————结果为零转移-测试条件ZF-1；相等跳转\" class=\"headerlink\" title=\"JZ(或jE)  OPR—————结果为零转移, 测试条件ZF=1；相等跳转\"></a>JZ(或jE)  OPR—————结果为零转移, 测试条件ZF=1；相等跳转</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">cmp eax,0\njz/je L1;如果ZF=1则跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"JNZ-或jNE-OPR-————–结果不为零转移-测试条件ZF-0；不等跳转\"><a href=\"#JNZ-或jNE-OPR-————–结果不为零转移-测试条件ZF-0；不等跳转\" class=\"headerlink\" title=\"JNZ(或jNE) OPR ————–结果不为零转移,测试条件ZF=0；不等跳转\"></a>JNZ(或jNE) OPR ————–结果不为零转移,测试条件ZF=0；不等跳转</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">and dl,10110000b\njnz/jne L2;ZF=0跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"JS-OPR———————-结果为负转移-测试条件SF-1\"><a href=\"#JS-OPR———————-结果为负转移-测试条件SF-1\" class=\"headerlink\" title=\"JS OPR———————-结果为负转移, 测试条件SF=1\"></a>JS OPR———————-结果为负转移, 测试条件SF=1</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">SF=1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JNS-OPR———————结果为正转移-测试条件SF-0\"><a href=\"#JNS-OPR———————结果为正转移-测试条件SF-0\" class=\"headerlink\" title=\"JNS OPR———————结果为正转移, 测试条件SF=0\"></a>JNS OPR———————结果为正转移, 测试条件SF=0</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">SF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JO-OPR———————-溢出转移-测试条件OF-1\"><a href=\"#JO-OPR———————-溢出转移-测试条件OF-1\" class=\"headerlink\" title=\"JO OPR——————— 溢出转移,   测试条件OF=1\"></a>JO OPR——————— 溢出转移,   测试条件OF=1</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">OF=1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JNO-OPR-——————–不溢出转移-测试条件OF-0\"><a href=\"#JNO-OPR-——————–不溢出转移-测试条件OF-0\" class=\"headerlink\" title=\"JNO OPR ——————–不溢出转移 , 测试条件OF=0\"></a>JNO OPR ——————–不溢出转移 , 测试条件OF=0</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">OF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JP-OPR-———————结果为偶转移-测试条件PF-1\"><a href=\"#JP-OPR-———————结果为偶转移-测试条件PF-1\" class=\"headerlink\" title=\"JP OPR ———————结果为偶转移, 测试条件PF=1\"></a>JP OPR ———————结果为偶转移, 测试条件PF=1</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">PF=1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JNP-OPR-——————–结果为奇转移-测试条件PF-0\"><a href=\"#JNP-OPR-——————–结果为奇转移-测试条件PF-0\" class=\"headerlink\" title=\"JNP OPR ——————–结果为奇转移 , 测试条件PF=0\"></a>JNP OPR ——————–结果为奇转移 , 测试条件PF=0</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">PF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JC-OPR-——————–-有进位转移-测试条件CF-1\"><a href=\"#JC-OPR-——————–-有进位转移-测试条件CF-1\" class=\"headerlink\" title=\"JC OPR ——————– 有进位转移 , 测试条件CF=1\"></a>JC OPR ——————– 有进位转移 , 测试条件CF=1</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">CF=1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JNC-OPR-——————–无进位转移-测试条件CF-0\"><a href=\"#JNC-OPR-——————–无进位转移-测试条件CF-0\" class=\"headerlink\" title=\"JNC OPR ——————–无进位转移,  测试条件CF=0\"></a>JNC OPR ——————–无进位转移,  测试条件CF=0</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">CF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"无符号比较条件转移指令-以下指令经常是CMP-OPD-OPS后面的指令根据比较结果来实现转移\"><a href=\"#无符号比较条件转移指令-以下指令经常是CMP-OPD-OPS后面的指令根据比较结果来实现转移\" class=\"headerlink\" title=\"无符号比较条件转移指令(以下指令经常是CMP OPD,OPS后面的指令根据比较结果来实现转移)\"></a>无符号比较条件转移指令(以下指令经常是CMP OPD,OPS后面的指令根据比较结果来实现转移)</h3><h3 id=\"JB-或JNAE-opd-————–小于或者不大于等于则转移\"><a href=\"#JB-或JNAE-opd-————–小于或者不大于等于则转移\" class=\"headerlink\" title=\"JB(或JNAE) opd ————–小于或者不大于等于则转移\"></a>JB(或JNAE) opd ————–小于或者不大于等于则转移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">小于跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JNB-或JAE-opd—————不小于或者大于等于则转移\"><a href=\"#JNB-或JAE-opd—————不小于或者大于等于则转移\" class=\"headerlink\" title=\"JNB(或JAE) opd—————不小于或者大于等于则转移\"></a>JNB(或JAE) opd—————不小于或者大于等于则转移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">不小于跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JA-或NJBE-OPD—————大于或者不小于等于则转移\"><a href=\"#JA-或NJBE-OPD—————大于或者不小于等于则转移\" class=\"headerlink\" title=\"JA(或NJBE) OPD—————大于或者不小于等于则转移\"></a>JA(或NJBE) OPD—————大于或者不小于等于则转移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,+127\ncmp al,-128\n    ja/njbe L1;不跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"JNA-或JBE-OPD—————不大于或者小于等于则转移\"><a href=\"#JNA-或JBE-OPD—————不大于或者小于等于则转移\" class=\"headerlink\" title=\"JNA(或JBE) OPD—————不大于或者小于等于则转移\"></a>JNA(或JBE) OPD—————不大于或者小于等于则转移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov al,+127\ncmp al,-128\n    jna/jbe L1;跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"带符号比较条件转移指令\"><a href=\"#带符号比较条件转移指令\" class=\"headerlink\" title=\"带符号比较条件转移指令\"></a>带符号比较条件转移指令</h3><h3 id=\"JL-或JNGE-————–小于或者不大于等于则转移\"><a href=\"#JL-或JNGE-————–小于或者不大于等于则转移\" class=\"headerlink\" title=\"JL(或JNGE) ————–小于或者不大于等于则转移\"></a>JL(或JNGE) ————–小于或者不大于等于则转移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ax,5\nmov ax,6\n\tjl/jnge L1;跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"JNL-或JGE-————–不小于或者大于等于则转移\"><a href=\"#JNL-或JGE-————–不小于或者大于等于则转移\" class=\"headerlink\" title=\"JNL(或JGE)————–不小于或者大于等于则转移\"></a>JNL(或JGE)————–不小于或者大于等于则转移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov edx,-1\ncmp edx,0\n    jnl/jge L1;不跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"JG-或NJLE-—————大于或者不小于等于则转移\"><a href=\"#JG-或NJLE-—————大于或者不小于等于则转移\" class=\"headerlink\" title=\"JG(或NJLE)—————大于或者不小于等于则转移\"></a>JG(或NJLE)—————大于或者不小于等于则转移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ax,5\ncmp ax,4\n\tjp/njle L1;大于则跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"JNG-或JLE-—————不大于或者小于等于则转移\"><a href=\"#JNG-或JLE-—————不大于或者小于等于则转移\" class=\"headerlink\" title=\"JNG(或JLE)—————不大于或者小于等于则转移\"></a>JNG(或JLE)—————不大于或者小于等于则转移</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov ecx,0\ncmp ecx,0\n    jng/jle;跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"JCXZ\"><a href=\"#JCXZ\" class=\"headerlink\" title=\"JCXZ\"></a>JCXZ</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">CX=0跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JECXZ\"><a href=\"#JECXZ\" class=\"headerlink\" title=\"JECXZ\"></a>JECXZ</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">ECX=0跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"JRCXZ\"><a href=\"#JRCXZ\" class=\"headerlink\" title=\"JRCXZ\"></a>JRCXZ</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">RCX=0跳转<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"调用子程序与返回指令\"><a href=\"#调用子程序与返回指令\" class=\"headerlink\" title=\"调用子程序与返回指令\"></a>调用子程序与返回指令</h2><h3 id=\"CALL-子程序调用指令\"><a href=\"#CALL-子程序调用指令\" class=\"headerlink\" title=\"CALL  子程序调用指令\"></a>CALL  子程序调用指令</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">call SumOf;调用SumOf过程<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"RET-子程序返回指令\"><a href=\"#RET-子程序返回指令\" class=\"headerlink\" title=\"RET 子程序返回指令\"></a>RET 子程序返回指令</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">SumOf proc\n    .\n    .\n    ret\nSumOf endp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"条件循环指令\"><a href=\"#条件循环指令\" class=\"headerlink\" title=\"条件循环指令\"></a>条件循环指令</h2><h3 id=\"LOOP———-按ECX计算器循环\"><a href=\"#LOOP———-按ECX计算器循环\" class=\"headerlink\" title=\"LOOP———-按ECX计算器循环\"></a>LOOP———-按ECX计算器循环</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">    mov ax,0\n    mov ecx,5\nL1:\n    inc ax\n    loop L1;每次循环ax加一，循环5次<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"LOOPZ————为零跳转\"><a href=\"#LOOPZ————为零跳转\" class=\"headerlink\" title=\"LOOPZ————为零跳转\"></a>LOOPZ————为零跳转</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">loopz L1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"LOOPNZ————–非零跳转\"><a href=\"#LOOPNZ————–非零跳转\" class=\"headerlink\" title=\"LOOPNZ————–非零跳转\"></a>LOOPNZ————–非零跳转</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">loopnz L1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"LOOPE——————-相等跳转\"><a href=\"#LOOPE——————-相等跳转\" class=\"headerlink\" title=\"LOOPE——————-相等跳转\"></a>LOOPE——————-相等跳转</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">loope L1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"LOOPNE——————-不等跳转\"><a href=\"#LOOPNE——————-不等跳转\" class=\"headerlink\" title=\"LOOPNE——————-不等跳转\"></a>LOOPNE——————-不等跳转</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">loopne L1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"IF-ELSE-ELSEIF-ENDIF\"><a href=\"#IF-ELSE-ELSEIF-ENDIF\" class=\"headerlink\" title=\".IF .ELSE .ELSEIF .ENDIF\"></a>.IF .ELSE .ELSEIF .ENDIF</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">.IF conditionl\n    statements\n[.ELSELF condition2\n\tstatements]\n[ELSE \n\tstatements]\n.ENDIF<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"REPEAT-WHILE\"><a href=\"#REPEAT-WHILE\" class=\"headerlink\" title=\".REPEAT .WHILE\"></a>.REPEAT .WHILE</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">.REPEAT \n    statements\n.UNTIL condition\n    \n.WHILE condition\n    statements\n.ENDW<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"其它指令\"><a href=\"#其它指令\" class=\"headerlink\" title=\"其它指令\"></a>其它指令</h2><h3 id=\"OFFSET-——————–-返回偏移地址\"><a href=\"#OFFSET-——————–-返回偏移地址\" class=\"headerlink\" title=\"OFFSET ——————– 返回偏移地址\"></a>OFFSET ——————– 返回偏移地址</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov esi,offset var1;  esi=00404000h\nmov esi,offset var2;  esi=00404000h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"SEG-——————–-返回段地址\"><a href=\"#SEG-——————–-返回段地址\" class=\"headerlink\" title=\"SEG  ——————– 返回段地址\"></a>SEG  ——————– 返回段地址</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mov esi,seg var1\nmov esi,seg var2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"EQU-——————–-等值语句\"><a href=\"#EQU-——————–-等值语句\" class=\"headerlink\" title=\"EQU(=) ——————– 等值语句\"></a>EQU(=) ——————– 等值语句</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">name EQU expression\nname EQU symbol\nname EQU &lt;text&gt;\n    \npressKey EQU &lt;\"Press any key to continue...\", 0&gt;\nmatrix1 EQU 10 * 10\nmatrix2 EQU &lt;10 * 10&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"PURGE-——————–-解除语句\"><a href=\"#PURGE-——————–-解除语句\" class=\"headerlink\" title=\"PURGE ——————– 解除语句\"></a>PURGE ——————– 解除语句</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">PURGE，标识符1，标识符2，...，标识符n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"DUP-——————–-操作数字段用复制操作符\"><a href=\"#DUP-——————–-操作数字段用复制操作符\" class=\"headerlink\" title=\"DUP  ——————– 操作数字段用复制操作符\"></a>DUP  ——————– 操作数字段用复制操作符</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">db x dup();x是重复的次数，（）里是要重复的数逗号分隔\nstr1 db 10 dup ('!@#') ;这就是十个！@#\n格式：db 重复的次数 dup (重复的内容)\nbuf1 db 100 dup(?);开辟100个字节的内存区<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"SEGMENT-ENDS-——————–-段定义指令\"><a href=\"#SEGMENT-ENDS-——————–-段定义指令\" class=\"headerlink\" title=\"SEGMENT,ENDS ——————– 段定义指令\"></a>SEGMENT,ENDS ——————– 段定义指令</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">segment_name SEGMENT 【定位类型】 【组合类型】 【类别名】\n···;here is your code\nsegment ends<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ASSUME-——————–-段地址分配指令\"><a href=\"#ASSUME-——————–-段地址分配指令\" class=\"headerlink\" title=\"ASSUME ——————– 段地址分配指令\"></a>ASSUME ——————– 段地址分配指令</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">.data\n　　........\n.code\n　　........\n　　assume cs:code,ds:data\nstart: .......\n　　mov ax,data\n　　mov ds,ax\n　　...\nends\nend start\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ORG-——————–-起始偏移地址设置指令\"><a href=\"#ORG-——————–-起始偏移地址设置指令\" class=\"headerlink\" title=\"ORG  ——————– 起始偏移地址设置指令\"></a>ORG  ——————– 起始偏移地址设置指令</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">ORG 0000H\nAJMP MAIN\nORG 0030H<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"——————–地址计数器的当前值\"><a href=\"#——————–地址计数器的当前值\" class=\"headerlink\" title=\"$   ——————–地址计数器的当前值\"></a>$   ——————–地址计数器的当前值</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">例如JNE+6，能引用地址计数器的值，每次引用会使地址计数器的值发生改变，地址计数器即当前指令的偏移地址。该指令的转向地址即JNE指令的首地址加6。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"PROC，ENDP-——————–-过程定义语句\"><a href=\"#PROC，ENDP-——————–-过程定义语句\" class=\"headerlink\" title=\"PROC，ENDP ——————– 过程定义语句\"></a>PROC，ENDP ——————– 过程定义语句</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">SumOf proc\n    .\n    .\n    .\n    ret\nSumOf endp;这是一个过程<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"NAME，TITLE，END-——————–-程序开始结束语句\"><a href=\"#NAME，TITLE，END-——————–-程序开始结束语句\" class=\"headerlink\" title=\"NAME，TITLE，END ——————– 程序开始结束语句\"></a>NAME，TITLE，END ——————– 程序开始结束语句</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"MACRO，ENDM-——————–宏定义指令\"><a href=\"#MACRO，ENDM-——————–宏定义指令\" class=\"headerlink\" title=\"MACRO，ENDM  ——————–宏定义指令\"></a>MACRO，ENDM  ——————–宏定义指令</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">mPutchar MACRO char\n    push eax\n    mov al,char\n    call WriteChar\n    pop eax\n    ENDM<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"XLAT-（TRANSLATE）-——————–-换码指令—\"><a href=\"#XLAT-（TRANSLATE）-——————–-换码指令—\" class=\"headerlink\" title=\"XLAT  （TRANSLATE） ——————– 换码指令—-\"></a>XLAT  （TRANSLATE） ——————– 换码指令—-</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">X DW 1122h,3344h,5566h,7788h\nlea bx,X\nmov al,03h\nxlat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ALIGN-———————伪指令\"><a href=\"#ALIGN-———————伪指令\" class=\"headerlink\" title=\"ALIGN ———————伪指令\"></a>ALIGN ———————伪指令</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var byte ?; 00404000h\nALIGN 2\nvar2 byte ?; 00404002<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"PTR-———————-运算符\"><a href=\"#PTR-———————-运算符\" class=\"headerlink\" title=\"PTR ———————-运算符\"></a>PTR ———————-运算符</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var dword 12345678h\nmov ax,word ptr var; 将低16位(5678)送入ax<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"TYPE\"><a href=\"#TYPE\" class=\"headerlink\" title=\"TYPE\"></a>TYPE</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var word ?\nvar2 byte ?; word,byte都是type,分别代表2,1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"LENGTHOF-————–运算符\"><a href=\"#LENGTHOF-————–运算符\" class=\"headerlink\" title=\"LENGTHOF ————–运算符\"></a>LENGTHOF ————–运算符</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var1 byte 10,20,30;3\nvar2 word 30 DUP(?),0,0;32\nvar3 word 5 DUP(3 dup(?));3*5\nvar4 byte \"1234\",0;5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"SIZFEOF————-运算符\"><a href=\"#SIZFEOF————-运算符\" class=\"headerlink\" title=\"SIZFEOF————-运算符\"></a>SIZFEOF————-运算符</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var word 32 dup(0)\nmov eax,sizeof var;eax=32*2=64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"LABEL-—————伪指令\"><a href=\"#LABEL-—————伪指令\" class=\"headerlink\" title=\"LABEL —————伪指令\"></a>LABEL —————伪指令</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var1 label word\nvar2 dword 12345678h;公用一个内存位置，var2未分配空间\nmov ax,var1;5678h\nmov dx,[var+2];1234h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"TYPEDEF————–运算符\"><a href=\"#TYPEDEF————–运算符\" class=\"headerlink\" title=\"TYPEDEF————–运算符\"></a>TYPEDEF————–运算符</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">var typedef ptr byte;(指针)\n.data\n\tarray byte 10h,20h,30h\n    ptr1 var ?\n    ptr2 var array;指向一个数组<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"JMP-————无条件跳转到目标地址\"><a href=\"#JMP-————无条件跳转到目标地址\" class=\"headerlink\" title=\"JMP ————无条件跳转到目标地址\"></a>JMP ————无条件跳转到目标地址</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">top:\n.\n.\n    jmp top;不断循环<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"USES—————等于-push-pop\"><a href=\"#USES—————等于-push-pop\" class=\"headerlink\" title=\"USES—————等于 push+pop\"></a>USES—————等于 push+pop</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">ArraySum proc uses esi ecx\n    mov eax,0\nL1:\n\tadd eax,[esi]\n    add esi,type dword\n    loop L1\nArraySum endp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"CLC\"><a href=\"#CLC\" class=\"headerlink\" title=\"CLC\"></a>CLC</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">clc;清除标识位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"STC\"><a href=\"#STC\" class=\"headerlink\" title=\"STC\"></a>STC</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">进位标志置1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"ENTER——————-被调用过程自动创建堆栈帧\"><a href=\"#ENTER——————-被调用过程自动创建堆栈帧\" class=\"headerlink\" title=\"ENTER——————-被调用过程自动创建堆栈帧\"></a>ENTER——————-被调用过程自动创建堆栈帧</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Mysub proc\n\tenter 8,0\n;等效于\nMysub proc\n\tpush ebp\n\tmov ebp,esp\n\tsub esp,8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"LEAVE——————指令结束一个过程的堆栈帧\"><a href=\"#LEAVE——————指令结束一个过程的堆栈帧\" class=\"headerlink\" title=\"LEAVE——————指令结束一个过程的堆栈帧\"></a>LEAVE——————指令结束一个过程的堆栈帧</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Mysub proc\n\tenter 8,0\n\t.\n\t.\n\tleave\n\tret\nMysub endp\n;等效于\nMysub proc\n\tpush ebp\n\tmov ebp,esp\n\tsub esp,8\n\t.\n\t.\n\tmov esp,ebp\n\tpop ebp\n\tret\nMysub endp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"LOCAL—————局部变量\"><a href=\"#LOCAL—————局部变量\" class=\"headerlink\" title=\"LOCAL—————局部变量\"></a>LOCAL—————局部变量</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Mysub proc\n\tlocal var:dword;这是一个局部变量<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"INVOKE—————–CALL替代品，一行调用多个参数\"><a href=\"#INVOKE—————–CALL替代品，一行调用多个参数\" class=\"headerlink\" title=\"INVOKE—————–CALL替代品，一行调用多个参数\"></a>INVOKE—————–CALL替代品，一行调用多个参数</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">invoke Dumparray,offset array,lengthof array,type array<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"ADDR——–只能和INVOKE一起\"><a href=\"#ADDR——–只能和INVOKE一起\" class=\"headerlink\" title=\"ADDR——–只能和INVOKE一起\"></a>ADDR——–只能和INVOKE一起</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">array dword 20 dup(?)\ninvoke swap\n\taddr array\n\taddr [array+4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"条件标志\"><a href=\"#条件标志\" class=\"headerlink\" title=\"条件标志\"></a>条件标志</h2><h3 id=\"ZF-零标志\"><a href=\"#ZF-零标志\" class=\"headerlink\" title=\"ZF 零标志\"></a>ZF 零标志</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">当结果为负时,SF=1,否则,SF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"AF-辅助进位标志\"><a href=\"#AF-辅助进位标志\" class=\"headerlink\" title=\"AF 辅助进位标志\"></a>AF 辅助进位标志</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">运算过程中第三位有进位值,置AF=1,否则,AF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"PF-奇偶标志\"><a href=\"#PF-奇偶标志\" class=\"headerlink\" title=\"PF 奇偶标志\"></a>PF 奇偶标志</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">当结果操作数中偶数个\"1\",置PF=1,否则,PF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"SF-符号标志\"><a href=\"#SF-符号标志\" class=\"headerlink\" title=\"SF 符号标志\"></a>SF 符号标志</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">当结果为负时,SF=1;否则,SF=0.溢出时情形例外<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"CF-进位标志\"><a href=\"#CF-进位标志\" class=\"headerlink\" title=\"CF 进位标志\"></a>CF 进位标志</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">最高有效位产生进位值,例如,执行加法指令时,MSB有进位,置CF=1;否则,CF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"OF-溢出标志\"><a href=\"#OF-溢出标志\" class=\"headerlink\" title=\"OF 溢出标志\"></a>OF 溢出标志</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">若操作数结果超出了机器能表示的范围,则产生溢出,置OF=1,否则,OF=0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n",
            "tags": [
                "学习",
                "汇编"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2021/01/01/ji-cun-qi/",
            "url": "https://0xdadream.github.io/2021/01/01/ji-cun-qi/",
            "title": "寄存器",
            "date_published": "2020-12-31T22:37:00.000Z",
            "content_html": "<h2 id=\"32位CPU所含有的寄存器有：\"><a href=\"#32位CPU所含有的寄存器有：\" class=\"headerlink\" title=\"32位CPU所含有的寄存器有：\"></a>32位CPU所含有的寄存器有：</h2><ol>\n<li>4个数据寄存器(EAX、EBX、ECX和EDX) </li>\n<li>2个变址和指针寄存器(ESI和EDI) </li>\n<li>2个指针寄存器(ESP和EBP)  </li>\n<li>6个段寄存器(ES、CS、SS、DS、FS和GS) </li>\n<li>1个指令指针寄存器(EIP) 1个标志寄存器(EFlags)</li>\n</ol>\n<h1 id=\"1、数据寄存器\"><a href=\"#1、数据寄存器\" class=\"headerlink\" title=\"1、数据寄存器\"></a>1、数据寄存器</h1><p>数据寄存器主要用来保存操作数和运算结果等信息，从而节省读取操作数所需占用总线和访问存储器的时间。 </p>\n<ul>\n<li><p>32位CPU有4个32位的通用寄存器EAX、EBX、ECX和EDX。 </p>\n</li>\n<li><p>对低16位数据的存取，不会影响高16位的数据。 这些低16位寄存器分别命名为：AX、BX、CX和DX，它和先前的CPU中的寄存器相一致。 </p>\n</li>\n<li><p>4个16位寄存器又可分割成8个独立的8位寄存器(AX：AH-AL、BX：BH-BL、CX：CH-CL、DX：DH-DL)，每个寄存器都有自己的名称，可独立存取。 程序员可利用数据寄存器的这种“可分可合”的特性，灵活地处理字/字节的信息。  </p>\n</li>\n<li><p>寄存器EAX通常称为累加器(Accumulator)，用累加器进行的操作可能需要更少时间。可用于乘、 除、输入/输出等操作，使用频率很高；  </p>\n</li>\n<li><p>寄存器EBX称为基地址寄存器(Base Register)。它可作为存储器指针来使用；  </p>\n</li>\n<li><p>寄存器ECX称为计数寄存器(Count Register)。 在循环和字符串操作时，要用它来控制循环次数；在位操作中，当移多位时，要用CL来指明移位的位数；  </p>\n</li>\n<li><p>寄存器EDX称为数据寄存器(Data Register)。在进行乘、除运算时，它可作为默认的操作数参与运算，也可用于存放I/O的端口地址。</p>\n</li>\n</ul>\n<p>在16位CPU中，AX、BX、CX和DX不能作为基址和变址寄存器来存放存储单元的地址， </p>\n<p>在32位CPU中，其32位寄存器EAX、EBX、ECX和EDX不仅可传送数据、暂存数据保存算术逻辑运算结果， 而且也可作为指针寄存器，所以，这些32位寄存器更具有通用性。 </p>\n<h1 id=\"2、变址寄存器\"><a href=\"#2、变址寄存器\" class=\"headerlink\" title=\"2、变址寄存器\"></a>2、变址寄存器</h1><p>32位CPU有2个32位通用寄存器ESI和EDI。 </p>\n<p>其低16位对应先前CPU中的SI和DI，对低16位数据的存取，不影响高16位的数据。 </p>\n<p>寄存器ESI、EDI、SI和DI称为变址寄存器(Index Register)，它们主要用于存放存储单元在段内的偏移量， 用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。 </p>\n<p>变址寄存器不可分割成8位寄存器。作为通用寄存器，也可存储算术逻辑运算的操作数和运算结果。 </p>\n<p>它们可作一般的存储器指针使用。在字符串操作指令的执行过程中，对它们有特定的要求，而且还具有特殊的功能。 </p>\n<h1 id=\"3、指针寄存器\"><a href=\"#3、指针寄存器\" class=\"headerlink\" title=\"3、指针寄存器\"></a>3、指针寄存器</h1><p>其低16位对应先前CPU中的BP和SP，对低16位数据的存取，不影响高16位的数据。 </p>\n<p>32位CPU有2个32位通用寄存器EBP和ESP。 </p>\n<p>它们主要用于访问堆栈内的存储单元，并且规定： </p>\n<ul>\n<li>EBP为基指针(Base Pointer)寄存器，用它可直接存取堆栈中的数据；  </li>\n<li>ESP为堆栈指针(Stack Pointer)寄存器，用它只可访问栈顶。</li>\n</ul>\n<p>寄存器EBP、ESP、BP和SP称为指针寄存器(Pointer Register)，主要用于存放堆栈内存储单元的偏移量， 用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。 </p>\n<p>指针寄存器不可分割成8位寄存器。作为通用寄存器，也可存储算术逻辑运算的操作数和运算结果。 </p>\n<h1 id=\"4、段寄存器\"><a href=\"#4、段寄存器\" class=\"headerlink\" title=\"4、段寄存器\"></a>4、段寄存器</h1><p>段寄存器是根据内存分段的管理模式而设置的。内存单元的物理地址由段寄存器的值和一个偏移量组合而成的，这样可用两个较少位数的值组合成一个可访问较大物理空间的内存地址。 </p>\n<p>CPU内部的段寄存器： </p>\n<ol>\n<li>ECS——代码段寄存器(Code Segment Register)，其值为代码段的段值；  </li>\n<li>EDS——数据段寄存器(Data Segment Register)，其值为数据段的段值；  </li>\n<li>EES——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值；  </li>\n<li>ESS——堆栈段寄存器(Stack Segment Register)，其值为堆栈段的段值；  </li>\n<li>EFS——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值；  </li>\n<li>EGS——附加段寄存器(Extra Segment Register)，其值为附加数据段的段值。  </li>\n<li></li>\n</ol>\n<ul>\n<li>在16位CPU系统中，它只有4个段寄存器，所以，程序在任何时刻至多有4个正在使用的段可直接访问；</li>\n<li>在32位微机系统中，它有6个段寄存器，所以，在此环境下开发的程序最多可同时访问6个段。</li>\n</ul>\n<p>32位CPU有两个不同的工作方式：实方式和保护方式。在每种方式下，段寄存器的作用是不同的。有关规定简 单描述如下： </p>\n<ul>\n<li><p>实方式： 前4个段寄存器CS、DS、ES和SS与先前CPU中的所对应的段寄存器的含义完全一致，内存单元的逻辑地址仍为“段值：偏移量”的形式。为访问某内存段内的数据，必须使用该段寄存器和存储单元的偏移量。  </p>\n</li>\n<li><p>保护方式： 在此方式下，情况要复杂得多，装入段寄存器的不再是段值，而是称为“选择子”(Selector)的某个值。</p>\n</li>\n</ul>\n<h1 id=\"5、指令指针寄存器\"><a href=\"#5、指令指针寄存器\" class=\"headerlink\" title=\"5、指令指针寄存器\"></a>5、指令指针寄存器</h1><p>32位CPU把指令指针扩展到32位，并记作EIP，EIP的低16位与先前CPU中的IP作用相同。 </p>\n<p>指令指针EIP、IP(Instruction Pointer)是存放下次将要执行的指令在代码段的偏移量。 </p>\n<p>在具有预取指令功能的系统中，下次要执行的指令通常已被预取到指令队列中，除非发生转移情况。 </p>\n<p>所以，在理解它们的功能时，不考虑存在指令队列的情况。 </p>\n<h1 id=\"6、标志寄存器\"><a href=\"#6、标志寄存器\" class=\"headerlink\" title=\"6、标志寄存器\"></a>6、标志寄存器</h1><h2 id=\"一、运算结果标志位\"><a href=\"#一、运算结果标志位\" class=\"headerlink\" title=\"一、运算结果标志位\"></a>一、运算结果标志位</h2><h3 id=\"1、进位标志CF-Carry-Flag\"><a href=\"#1、进位标志CF-Carry-Flag\" class=\"headerlink\" title=\"1、进位标志CF(Carry Flag)\"></a>1、进位标志CF(Carry Flag)</h3><p>进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。 </p>\n<p>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。 </p>\n<h3 id=\"2、奇偶标志PF-Parity-Flag\"><a href=\"#2、奇偶标志PF-Parity-Flag\" class=\"headerlink\" title=\"2、奇偶标志PF(Parity Flag)\"></a>2、奇偶标志PF(Parity Flag)</h3><p>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。 </p>\n<p>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。 </p>\n<h3 id=\"3、辅助进位标志AF-Auxiliary-Carry-Flag\"><a href=\"#3、辅助进位标志AF-Auxiliary-Carry-Flag\" class=\"headerlink\" title=\"3、辅助进位标志AF(Auxiliary Carry Flag)\"></a>3、辅助进位标志AF(Auxiliary Carry Flag)</h3><p>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0： </p>\n<ol>\n<li>在字操作时，发生低字节向高字节进位或借位时； </li>\n<li>在字节操作时，发生低4位向高4位进位或借位时。</li>\n</ol>\n<p>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。 </p>\n<h3 id=\"4、零标志ZF-Zero-Flag\"><a href=\"#4、零标志ZF-Zero-Flag\" class=\"headerlink\" title=\"4、零标志ZF(Zero Flag)\"></a>4、零标志ZF(Zero Flag)</h3><p>零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。 </p>\n<h3 id=\"5、符号标志SF-Sign-Flag\"><a href=\"#5、符号标志SF-Sign-Flag\" class=\"headerlink\" title=\"5、符号标志SF(Sign Flag)\"></a>5、符号标志SF(Sign Flag)</h3><p>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。 </p>\n<h3 id=\"6、溢出标志OF-Overflow-Flag\"><a href=\"#6、溢出标志OF-Overflow-Flag\" class=\"headerlink\" title=\"6、溢出标志OF(Overflow Flag)\"></a>6、溢出标志OF(Overflow Flag)</h3><p>溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。 “</p>\n<p>溢出”和“进位”是两个不同含义的概念，不要混淆。</p>\n<h2 id=\"二、状态控制标志位\"><a href=\"#二、状态控制标志位\" class=\"headerlink\" title=\"二、状态控制标志位\"></a>二、状态控制标志位</h2><p>状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。 </p>\n<h2 id=\"1、追踪标志TF-Trap-Flag\"><a href=\"#1、追踪标志TF-Trap-Flag\" class=\"headerlink\" title=\"1、追踪标志TF(Trap Flag)\"></a>1、追踪标志TF(Trap Flag)</h2><p>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。 指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。 </p>\n<h3 id=\"2、中断允许标志IF-Interrupt-enable-Flag\"><a href=\"#2、中断允许标志IF-Interrupt-enable-Flag\" class=\"headerlink\" title=\"2、中断允许标志IF(Interrupt-enable Flag)\"></a>2、中断允许标志IF(Interrupt-enable Flag)</h3><p>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。 但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。 具体规定如下： </p>\n<ol>\n<li>当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求； </li>\n<li>当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。 CPU的指令系统中也有专门的指令来改变标志位IF的值。</li>\n</ol>\n<h3 id=\"3、方向标志DF-Direction-Flag\"><a href=\"#3、方向标志DF-Direction-Flag\" class=\"headerlink\" title=\"3、方向标志DF(Direction Flag)\"></a>3、方向标志DF(Direction Flag)</h3><p>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。 在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。 </p>\n<h2 id=\"三、32位标志寄存器增加的标志位\"><a href=\"#三、32位标志寄存器增加的标志位\" class=\"headerlink\" title=\"三、32位标志寄存器增加的标志位\"></a>三、32位标志寄存器增加的标志位</h2><h3 id=\"1、I-O特权标志IOPL-I-O-Privilege-Level\"><a href=\"#1、I-O特权标志IOPL-I-O-Privilege-Level\" class=\"headerlink\" title=\"1、I/O特权标志IOPL(I/O Privilege Level)\"></a>1、I/O特权标志IOPL(I/O Privilege Level)</h3><p>I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。 如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。 </p>\n<h3 id=\"2、嵌套任务标志NT-Nested-Task\"><a href=\"#2、嵌套任务标志NT-Nested-Task\" class=\"headerlink\" title=\"2、嵌套任务标志NT(Nested Task)\"></a>2、嵌套任务标志NT(Nested Task)</h3><p>嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下： </p>\n<ol>\n<li>当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作； </li>\n<li>当NT=1，通过任务转换实现中断返回。</li>\n</ol>\n<h3 id=\"3、重启动标志RF-Restart-Flag\"><a href=\"#3、重启动标志RF-Restart-Flag\" class=\"headerlink\" title=\"3、重启动标志RF(Restart Flag)\"></a>3、重启动标志RF(Restart Flag)</h3><p>重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。 在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。 </p>\n<h3 id=\"4、虚拟8086方式标志VM-Virtual-8086-Mode\"><a href=\"#4、虚拟8086方式标志VM-Virtual-8086-Mode\" class=\"headerlink\" title=\"4、虚拟8086方式标志VM(Virtual 8086 Mode)\"></a>4、虚拟8086方式标志VM(Virtual 8086 Mode)</h3><p>如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态。 </p>\n",
            "tags": [
                "学习",
                "汇编"
            ]
        }
    ]
}