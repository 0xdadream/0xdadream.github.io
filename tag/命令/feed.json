{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦 • All posts by \"命令\" tag",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/",
            "title": "文件链接全教程",
            "date_published": "2025-03-12T04:25:00.000Z",
            "content_html": "<h1 id=\"文件链接全教程\"><a href=\"#文件链接全教程\" class=\"headerlink\" title=\"文件链接全教程\"></a>文件链接全教程</h1><h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><h3 id=\"1-链接基础概念\"><a href=\"#1-链接基础概念\" class=\"headerlink\" title=\"1. 链接基础概念\"></a>1. 链接基础概念</h3><p>在 Windows 中，“链接”实际上有几种形式，主要包括以下几类：</p>\n<ul>\n<li>符号链接（Symbolic Link，软链接）<ul>\n<li><strong>概念：</strong> 符号链接是一个特殊文件，其中保存了目标文件或目录的路径。它类似于 Linux 中的软链接，并且看起来和普通文件或文件夹没有区别。</li>\n<li>特点：<ul>\n<li>可用于文件和目录</li>\n<li>可以跨分区甚至跨网络路径（UNC）</li>\n<li>如果目标被删除或移动，符号链接会失效</li>\n<li>从 Windows Vista 开始支持，最新 Windows（如 Windows 10/11）中在开发人员模式下可不需要管理员权限创建</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>硬链接（Hard Link）<ul>\n<li><strong>概念：</strong> 硬链接是指向同一数据实体（数据块或 NTFS 中的文件记录）的另一个目录项。每个硬链接都与目标文件共享同一份数据。</li>\n<li>特点：<ul>\n<li>仅适用于文件，不能用于目录</li>\n<li>必须在同一 NTFS 卷内（不能跨分区）</li>\n<li>删除其中一个链接不会影响其它链接或数据本身，只有当所有硬链接都删除后数据才会释放</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>目录联接（Junction Point）<ul>\n<li><strong>概念：</strong> 目录联接也称为“联接”，用于将一个目录指向另一个目录。在早期版本中常用来兼容旧版 Windows。</li>\n<li>特点：<ul>\n<li>只适用于目录</li>\n<li>创建时会自动转换为绝对路径</li>\n<li>适用于同一台计算机，支持跨盘符（但不支持网络路径）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-创建链接的方法\"><a href=\"#2-创建链接的方法\" class=\"headerlink\" title=\"2. 创建链接的方法\"></a>2. 创建链接的方法</h3><p>在 Windows 中创建链接主要有两种方式：通过 CMD 命令行（使用 <code>mklink</code> 命令）和通过 PowerShell（使用 <code>New-Item</code> 命令）。</p>\n<h4 id=\"2-1-使用-CMD-命令创建链接\"><a href=\"#2-1-使用-CMD-命令创建链接\" class=\"headerlink\" title=\"2.1 使用 CMD 命令创建链接\"></a>2.1 使用 CMD 命令创建链接</h4><p><strong>命令语法：</strong></p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink [[/D] | [/H] | [/J]] Link Target<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>默认（无参数）</strong>：创建文件的符号链接</li>\n<li><strong>/D</strong>：创建目录的符号链接</li>\n<li><strong>/H</strong>：创建硬链接（仅用于文件）</li>\n<li><strong>/J</strong>：创建目录联接（Junction，适用于目录）</li>\n</ul>\n<p><strong>示例：</strong></p>\n<ol>\n<li><p><strong>创建文件的符号链接</strong><br> 假设有一个文件 <code>C:\\Data\\original.txt</code>，我们在同目录下创建一个名为 <code>link.txt</code> 的符号链接：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink C:\\Data\\link.txt C:\\Data\\original.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时，<code>link.txt</code> 实际上保存了 <code>original.txt</code> 的路径，当你打开 <code>link.txt</code> 时，系统会自动访问 <code>original.txt</code>。</p>\n</li>\n<li><p><strong>创建目录的符号链接</strong><br> 假设有一个目录 <code>C:\\Data\\SourceFolder</code>，希望在 <code>C:\\Data</code> 下创建一个符号链接目录 <code>LinkFolder</code>：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /D C:\\Data\\LinkFolder C:\\Data\\SourceFolder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样，在资源管理器中打开 <code>LinkFolder</code> 就等同于打开 <code>SourceFolder</code>。</p>\n</li>\n<li><p><strong>创建文件的硬链接</strong><br> 依然以文件 <code>C:\\Data\\original.txt</code> 为例，创建一个硬链接 <code>hardlink.txt</code>：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /H C:\\Data\\hardlink.txt C:\\Data\\original.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>硬链接与原文件共享同一数据块，因此修改任一文件都会同步改变内容，但请注意：</p>\n<ul>\n<li>硬链接只能用于文件</li>\n<li>必须在同一卷内</li>\n</ul>\n</li>\n<li><p><strong>创建目录联接（Junction）</strong><br> 使用 /J 参数来创建目录联接，适用于目录，但和符号链接不同的是，Junction 通常保存绝对路径：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /J C:\\Data\\JunctionFolder C:\\Data\\SourceFolder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用 Junction 时，删除链接不会删除目标目录中的数据。</p>\n</li>\n</ol>\n<p><em>注意：</em></p>\n<ul>\n<li>创建符号链接和某些操作可能需要以<strong>管理员身份</strong>运行 CMD。</li>\n<li>Windows 10 及以后版本如果开启“开发人员模式”，可以允许普通用户创建符号链接。</li>\n</ul>\n<hr>\n<h4 id=\"2-2-使用-PowerShell-创建链接\"><a href=\"#2-2-使用-PowerShell-创建链接\" class=\"headerlink\" title=\"2.2 使用 PowerShell 创建链接\"></a>2.2 使用 PowerShell 创建链接</h4><p>PowerShell 提供了更现代的 <code>New-Item</code> 命令来创建不同类型的链接。</p>\n<p><strong>语法及示例：</strong></p>\n<ol>\n<li><p><strong>创建文件或目录的符号链接：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType SymbolicLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\Link.txt\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\original.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者创建目录符号链接：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType SymbolicLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\LinkFolder\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\SourceFolder\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>PowerShell 中的 <code>SymbolicLink</code> 同样创建的是软链接，和 CMD 中 <code>mklink</code> 默认行为一致。</p>\n</li>\n<li><p><strong>创建文件的硬链接：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType HardLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\hardlink.txt\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\original.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会为 <code>original.txt</code> 创建一个硬链接，注意硬链接只能用于文件，且必须在同一卷内。</p>\n</li>\n<li><p><strong>创建目录联接（Junction）：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType Junction <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\JunctionFolder\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\SourceFolder\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令会创建一个指向目录的联接，与符号链接在某些场景下效果类似，但内部处理略有差异。</p>\n</li>\n</ol>\n<p><em>提示：</em></p>\n<ul>\n<li>PowerShell 命令执行时也可能需要管理员权限，具体取决于目标路径所在的位置（例如系统文件夹或 Program Files）。</li>\n<li>在使用相对路径创建符号链接时，系统会将其转换为绝对路径存储在 NTFS 中。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用场景与注意事项\"><a href=\"#3-使用场景与注意事项\" class=\"headerlink\" title=\"3. 使用场景与注意事项\"></a>3. 使用场景与注意事项</h3><h4 id=\"3-1-常见使用场景\"><a href=\"#3-1-常见使用场景\" class=\"headerlink\" title=\"3.1 常见使用场景\"></a>3.1 常见使用场景</h4><ul>\n<li><p><strong>数据备份和增量备份</strong><br> 利用硬链接可以在不占用额外磁盘空间的情况下创建多个访问入口。例如，备份软件（如 Windows 版的“时间机器”）就会使用硬链接来实现增量备份。</p>\n</li>\n<li><p><strong>移动或重定向系统目录</strong><br> 为了节省系统盘空间或实现重装系统不丢失用户数据，可以将如 <code>C:\\Users</code> 目录复制到其他分区，然后使用 Junction 将原位置重定向到新位置：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">robocopy \"C:\\Users\" \"D:\\Users\" /E /COPYALL /XJ\nrmdir \"C:\\Users\" /S /Q\nmklink /J \"C:\\Users\" \"D:\\Users\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>开发环境下共享资源</strong><br> 当多个项目需要使用同一份库或模型文件时，可以通过符号链接或硬链接共享文件，避免重复存储。</p>\n</li>\n</ul>\n<h4 id=\"3-2-注意事项\"><a href=\"#3-2-注意事项\" class=\"headerlink\" title=\"3.2 注意事项\"></a>3.2 注意事项</h4><ul>\n<li><p><strong>权限问题</strong></p>\n<ul>\n<li>在 Windows 中，创建符号链接通常需要管理员权限；不过在 Windows 10 开发人员模式下可允许普通用户创建符号链接。</li>\n<li>硬链接不需要额外的权限，但目标文件必须在同一 NTFS 卷内。</li>\n</ul>\n</li>\n<li><p><strong>目标失效风险</strong></p>\n<ul>\n<li>符号链接依赖于目标路径。如果目标移动或删除，符号链接会成为“悬挂链接”（无效链接）。</li>\n<li>硬链接与目标数据直接关联，即使原始文件名被删除，只要至少还有一个硬链接存在，数据依然可用。</li>\n</ul>\n</li>\n<li><p><strong>跨分区限制</strong></p>\n<ul>\n<li>硬链接只能在同一卷内使用，而符号链接和 Junction 则可以跨卷（但符号链接可以支持网络路径，而 Junction 则不行）。</li>\n</ul>\n</li>\n<li><p><strong>命令使用环境</strong></p>\n<ul>\n<li>使用 <code>mklink</code> 命令时建议打开<strong>管理员命令提示符</strong>。</li>\n<li>使用 PowerShell 时，若涉及系统目录或受保护区域，建议以管理员身份运行 PowerShell。</li>\n</ul>\n</li>\n<li><p>查看链接和删除</p>\n<p>直接在资源管理器操作</p>\n</li>\n</ul>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><p><a href=\"https://0xdadream.github.io/2025/02/20/arc-zai-comfyui-bao-cuo/\">Arc在comfyui报错 | 逐梦</a></p>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/24/dong-tai-lian-jie-ku/",
            "url": "https://0xdadream.github.io/2024/11/24/dong-tai-lian-jie-ku/",
            "title": "动态链接库",
            "date_published": "2024-11-24T15:25:00.000Z",
            "content_html": "<h1 id=\"动态链接库\"><a href=\"#动态链接库\" class=\"headerlink\" title=\"动态链接库\"></a>动态链接库</h1><hr>\n<h3 id=\"一、-etc-ld-so-conf-d-的作用\"><a href=\"#一、-etc-ld-so-conf-d-的作用\" class=\"headerlink\" title=\"一、/etc/ld.so.conf.d 的作用\"></a><strong>一、<code>/etc/ld.so.conf.d</code> 的作用</strong></h3><ul>\n<li><strong>动态库路径管理</strong>：系统会读取该目录下的 <code>.conf</code> 文件，这些文件指定了动态链接库的额外搜索路径。</li>\n<li><strong>配置动态库缓存</strong>：在运行程序时，动态链接器会从这些路径中查找所需的库。</li>\n</ul>\n<p><strong>默认加载的路径</strong>（视系统配置而定）：</p>\n<ol>\n<li><code>/lib</code></li>\n<li><code>/usr/lib</code></li>\n<li><code>/usr/local/lib</code></li>\n</ol>\n<p>通过 <code>/etc/ld.so.conf.d</code>，可以扩展默认路径。</p>\n<hr>\n<h3 id=\"二、动态库的加载顺序\"><a href=\"#二、动态库的加载顺序\" class=\"headerlink\" title=\"二、动态库的加载顺序\"></a><strong>二、动态库的加载顺序</strong></h3><p>动态链接器按照以下顺序查找动态库：</p>\n<ol>\n<li><strong>环境变量</strong>：<code>LD_LIBRARY_PATH</code>。</li>\n<li><strong>缓存文件</strong>：<code>/etc/ld.so.cache</code>。</li>\n<li><strong>默认路径</strong>：如 <code>/lib</code> 和 <code>/usr/lib</code>。</li>\n</ol>\n<p><strong>注意</strong>：为了提高效率，系统不会直接读取所有路径，而是从 <code>/etc/ld.so.cache</code> 中加载已经缓存的路径信息。</p>\n<hr>\n<h3 id=\"三、-etc-ld-so-conf-d-的文件结构\"><a href=\"#三、-etc-ld-so-conf-d-的文件结构\" class=\"headerlink\" title=\"三、/etc/ld.so.conf.d 的文件结构\"></a><strong>三、<code>/etc/ld.so.conf.d</code> 的文件结构</strong></h3><p>该目录包含多个 <code>.conf</code> 文件，每个文件可以指定一组路径。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 /etc/ld.so.conf.d 内容</span>\n<span class=\"token function\">ls</span> /etc/ld.so.conf.d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">glibc<span class=\"token punctuation\">.</span>conf\nx86_64<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>gnu<span class=\"token punctuation\">.</span>conf\n<span class=\"token keyword\">local</span><span class=\"token punctuation\">.</span>conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>文件示例</strong>：</p>\n<ul>\n<li><p>/etc/ld.so.conf.d/local.conf：</p>\n<pre class=\"line-numbers language-vbnet\" data-language=\"vbnet\"><code class=\"language-vbnet\"><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">lib</span>\n<span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>custom<span class=\"token operator\">/</span><span class=\"token keyword\">lib</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<p>这些路径会被动态链接器添加到库搜索路径中。</p>\n<hr>\n<h3 id=\"四、如何配置动态库路径\"><a href=\"#四、如何配置动态库路径\" class=\"headerlink\" title=\"四、如何配置动态库路径\"></a><strong>四、如何配置动态库路径</strong></h3><h4 id=\"1-添加自定义路径\"><a href=\"#1-添加自定义路径\" class=\"headerlink\" title=\"1. 添加自定义路径\"></a><strong>1. 添加自定义路径</strong></h4><p>假设有一个自定义动态库路径 <code>/home/user/mylibs</code>，以下是配置步骤：</p>\n<ol>\n<li><p><strong>创建配置文件</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/ld.so.conf.d/mylibs.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加如下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/home/user/mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>更新动态库缓存</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>验证是否生效</strong>： 查看是否包含新路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldconfig <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"2-临时配置路径\"><a href=\"#2-临时配置路径\" class=\"headerlink\" title=\"2. 临时配置路径\"></a><strong>2. 临时配置路径</strong></h4><p>如果只是临时测试动态库路径，可以使用 <code>LD_LIBRARY_PATH</code> 环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span>/home/user/mylibs:<span class=\"token variable\">$LD_LIBRARY_PATH</span>\n./myprogram<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：这种方法仅对当前终端会话有效。</p>\n<hr>\n<h3 id=\"五、ldconfig-的作用\"><a href=\"#五、ldconfig-的作用\" class=\"headerlink\" title=\"五、ldconfig 的作用\"></a><strong>五、<code>ldconfig</code> 的作用</strong></h3><p><code>ldconfig</code> 是管理动态库缓存的工具，其作用包括：</p>\n<ol>\n<li><strong>扫描路径</strong>：根据 <code>/etc/ld.so.conf</code> 和 <code>/etc/ld.so.conf.d/</code> 下的配置文件，扫描动态库路径。</li>\n<li><strong>更新缓存</strong>：生成 <code>/etc/ld.so.cache</code> 文件，加速库的加载。</li>\n</ol>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a><strong>常用命令</strong></h4><ol>\n<li><p>更新缓存：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>指定路径更新缓存：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig /home/user/mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看当前缓存的库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldconfig <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"六、动态库配置实例\"><a href=\"#六、动态库配置实例\" class=\"headerlink\" title=\"六、动态库配置实例\"></a><strong>六、动态库配置实例</strong></h3><h4 id=\"1-动态库开发\"><a href=\"#1-动态库开发\" class=\"headerlink\" title=\"1. 动态库开发\"></a><strong>1. 动态库开发</strong></h4><p>创建一个简单动态库：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// hello.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, from dynamic library!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译成动态库：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gcc -fPIC -shared -o libhello.so hello.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将动态库移动到 <code>/opt/mylibs</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/mylibs\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> libhello.so /opt/mylibs/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-配置加载路径\"><a href=\"#2-配置加载路径\" class=\"headerlink\" title=\"2. 配置加载路径\"></a><strong>2. 配置加载路径</strong></h4><p>创建 <code>/etc/ld.so.conf.d/mylibs.conf</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/ld.so.conf.d/mylibs.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>更新缓存：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-使用动态库\"><a href=\"#3-使用动态库\" class=\"headerlink\" title=\"3. 使用动态库\"></a><strong>3. 使用动态库</strong></h4><p>编写一个测试程序：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// main.c</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译并运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gcc <span class=\"token parameter variable\">-o</span> main main.c <span class=\"token parameter variable\">-lhello</span>\n./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Hello, from dynamic library<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"七、排错方法\"><a href=\"#七、排错方法\" class=\"headerlink\" title=\"七、排错方法\"></a><strong>七、排错方法</strong></h3><ol>\n<li><p><strong>检查动态库是否存在</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldconfig <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> libhello<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>验证动态库路径是否正确</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldd ./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>动态库无法加载时</strong>：</p>\n<ul>\n<li>检查是否添加了正确的路径到 <code>/etc/ld.so.conf.d</code>。</li>\n<li>检查是否运行了 <code>ldconfig</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/24/linux-wen-jian-cao-zuo-ming-ling/",
            "url": "https://0xdadream.github.io/2024/11/24/linux-wen-jian-cao-zuo-ming-ling/",
            "title": "linux文件操作命令",
            "date_published": "2024-11-24T01:25:00.000Z",
            "content_html": "<h1 id=\"linux文件操作命令\"><a href=\"#linux文件操作命令\" class=\"headerlink\" title=\"linux文件操作命令\"></a>linux文件操作命令</h1><p>以下是 Linux 系统中与文件操作相关的命令，附带常用参数的详细解释。</p>\n<hr>\n<h2 id=\"1-查看文件和目录\"><a href=\"#1-查看文件和目录\" class=\"headerlink\" title=\"1. 查看文件和目录\"></a><strong>1. 查看文件和目录</strong></h2><h3 id=\"列出目录内容-ls\"><a href=\"#列出目录内容-ls\" class=\"headerlink\" title=\"列出目录内容 (ls)\"></a><strong>列出目录内容 (<code>ls</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>路径<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-l</code>：以详细列表形式显示，包括权限、所有者、文件大小、修改时间等。</li>\n<li><code>-a</code>：显示所有文件，包括以 <code>.</code> 开头的隐藏文件。</li>\n<li><code>-h</code>：配合 <code>-l</code>，以人类可读的文件大小显示（如 <code>1K</code>, <code>1M</code>）。</li>\n<li><code>-r</code>：逆序排列。</li>\n<li><code>-t</code>：按时间排序。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lah</span> /home/user<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"查看当前路径-pwd\"><a href=\"#查看当前路径-pwd\" class=\"headerlink\" title=\"查看当前路径 (pwd)\"></a><strong>查看当前路径 (<code>pwd</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">pwd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>输出当前工作目录的完整路径。</li>\n</ul>\n<hr>\n<h2 id=\"2-创建文件和目录\"><a href=\"#2-创建文件和目录\" class=\"headerlink\" title=\"2. 创建文件和目录\"></a><strong>2. 创建文件和目录</strong></h2><h3 id=\"创建文件-touch\"><a href=\"#创建文件-touch\" class=\"headerlink\" title=\"创建文件 (touch)\"></a><strong>创建文件 (<code>touch</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>功能：创建一个空文件或更新已有文件的时间戳。</li>\n</ul>\n<h3 id=\"创建目录-mkdir\"><a href=\"#创建目录-mkdir\" class=\"headerlink\" title=\"创建目录 (mkdir)\"></a><strong>创建目录 (<code>mkdir</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 目录名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-p</code>：递归创建目录。如果父目录不存在，会自动创建。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /home/user/project/logs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"3-查看文件内容\"><a href=\"#3-查看文件内容\" class=\"headerlink\" title=\"3. 查看文件内容\"></a><strong>3. 查看文件内容</strong></h2><h3 id=\"显示文件内容-cat\"><a href=\"#显示文件内容-cat\" class=\"headerlink\" title=\"显示文件内容 (cat)\"></a><strong>显示文件内容 (<code>cat</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-n</code>：显示行号。</li>\n<li><code>-A</code>：显示所有字符，包括不可见字符。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-n</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"分页查看-less-和-more\"><a href=\"#分页查看-less-和-more\" class=\"headerlink\" title=\"分页查看 (less 和 more)\"></a><strong>分页查看 (<code>less</code> 和 <code>more</code>)</strong></h3><ul>\n<li><p>less：分页查看，支持向前滚动。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">less</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>more：逐页查看，按空格翻页。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">more</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"4-编辑文件\"><a href=\"#4-编辑文件\" class=\"headerlink\" title=\"4. 编辑文件\"></a><strong>4. 编辑文件</strong></h2><h3 id=\"简单编辑器-nano\"><a href=\"#简单编辑器-nano\" class=\"headerlink\" title=\"简单编辑器 (nano)\"></a><strong>简单编辑器 (<code>nano</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用快捷键（如 <code>Ctrl+O</code> 保存，<code>Ctrl+X</code> 退出）。</li>\n</ul>\n<h3 id=\"高级编辑器-vim\"><a href=\"#高级编辑器-vim\" class=\"headerlink\" title=\"高级编辑器 (vim)\"></a><strong>高级编辑器 (<code>vim</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>基本模式：<ul>\n<li>按 <code>i</code> 进入插入模式。</li>\n<li>编辑完成后按 <code>Esc</code>，输入 <code>:wq</code> 保存并退出。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-复制、移动和重命名文件\"><a href=\"#5-复制、移动和重命名文件\" class=\"headerlink\" title=\"5. 复制、移动和重命名文件\"></a><strong>5. 复制、移动和重命名文件</strong></h2><h3 id=\"复制文件和目录-cp\"><a href=\"#复制文件和目录-cp\" class=\"headerlink\" title=\"复制文件和目录 (cp)\"></a><strong>复制文件和目录 (<code>cp</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 源文件 目标文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-r</code>：递归复制目录。</li>\n<li><code>-p</code>：保留文件属性（权限、时间戳等）。</li>\n<li><code>-i</code>：覆盖前提示确认。</li>\n<li><code>-v</code>：显示详细过程。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-rp</span> source_dir/ target_dir/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"移动和重命名-mv\"><a href=\"#移动和重命名-mv\" class=\"headerlink\" title=\"移动和重命名 (mv)\"></a><strong>移动和重命名 (<code>mv</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 源文件 目标文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-i</code>：覆盖前提示确认。</li>\n<li><code>-v</code>：显示详细过程。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> file1.txt file2.txt  <span class=\"token comment\"># 重命名</span>\n<span class=\"token function\">mv</span> file.txt /path/to/dir/  <span class=\"token comment\"># 移动文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"6-删除文件和目录\"><a href=\"#6-删除文件和目录\" class=\"headerlink\" title=\"6. 删除文件和目录\"></a><strong>6. 删除文件和目录</strong></h2><h3 id=\"删除文件和目录-rm\"><a href=\"#删除文件和目录-rm\" class=\"headerlink\" title=\"删除文件和目录 (rm)\"></a><strong>删除文件和目录 (<code>rm</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件/目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-r</code>：递归删除目录及其内容。</li>\n<li><code>-f</code>：强制删除，无需确认。</li>\n<li><code>-i</code>：删除前提示确认。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /tmp/test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"7-搜索文件和内容\"><a href=\"#7-搜索文件和内容\" class=\"headerlink\" title=\"7. 搜索文件和内容\"></a><strong>7. 搜索文件和内容</strong></h2><h3 id=\"查找文件-find\"><a href=\"#查找文件-find\" class=\"headerlink\" title=\"查找文件 (find)\"></a><strong>查找文件 (<code>find</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token punctuation\">[</span>路径<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>条件<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>操作<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用条件：</p>\n<ul>\n<li><code>-name</code>：按文件名查找（支持通配符）。</li>\n<li><code>-type</code>：按类型查找，如 <code>f</code>（文件），<code>d</code>（目录）。</li>\n<li><code>-size</code>：按文件大小查找，如 <code>+1M</code>（大于1MB）。</li>\n<li><code>-mtime</code>：按修改时间查找，如 <code>-7</code>（7天内修改的文件）。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> /home <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"搜索文件内容-grep\"><a href=\"#搜索文件内容-grep\" class=\"headerlink\" title=\"搜索文件内容 (grep)\"></a><strong>搜索文件内容 (<code>grep</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token string\">\"关键字\"</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-i</code>：忽略大小写。</li>\n<li><code>-r</code>：递归搜索目录。</li>\n<li><code>-n</code>：显示行号。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-rn</span> <span class=\"token string\">\"error\"</span> /var/log/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"8-修改文件权限\"><a href=\"#8-修改文件权限\" class=\"headerlink\" title=\"8. 修改文件权限\"></a><strong>8. 修改文件权限</strong></h2><h3 id=\"修改权限-chmod\"><a href=\"#修改权限-chmod\" class=\"headerlink\" title=\"修改权限 (chmod)\"></a><strong>修改权限 (<code>chmod</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>模式<span class=\"token punctuation\">]</span> 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>权限格式：</p>\n<ul>\n<li><code>u</code>：用户，<code>g</code>：组，<code>o</code>：其他，<code>a</code>：全部。</li>\n<li><code>+</code>：添加权限，<code>-</code>：删除权限，<code>=</code>：设置权限。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> u+x script.sh    <span class=\"token comment\"># 给用户添加执行权限</span>\n<span class=\"token function\">chmod</span> <span class=\"token number\">755</span> file.txt     <span class=\"token comment\"># 设置读写执行权限</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"修改所有者-chown\"><a href=\"#修改所有者-chown\" class=\"headerlink\" title=\"修改所有者 (chown)\"></a><strong>修改所有者 (<code>chown</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 用户:组 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> user:group file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"9-压缩和解压文件\"><a href=\"#9-压缩和解压文件\" class=\"headerlink\" title=\"9. 压缩和解压文件\"></a><strong>9. 压缩和解压文件</strong></h2><h3 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a><strong>压缩文件</strong></h3><ul>\n<li><p>tar：创建归档文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czvf</span> archive.tar.gz 文件/目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>zip：压缩为 ZIP 格式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">zip</span> <span class=\"token parameter variable\">-r</span> archive.zip 文件/目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a><strong>解压文件</strong></h3><ul>\n<li><p>tar：解压 .tar.gz文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> archive.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>unzip：解压 ZIP 文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">unzip</span> archive.zip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"10-其他常用操作\"><a href=\"#10-其他常用操作\" class=\"headerlink\" title=\"10. 其他常用操作\"></a><strong>10. 其他常用操作</strong></h2><h3 id=\"统计文件行、词、字符数-wc\"><a href=\"#统计文件行、词、字符数-wc\" class=\"headerlink\" title=\"统计文件行、词、字符数 (wc)\"></a><strong>统计文件行、词、字符数 (<code>wc</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-l</code>：统计行数。</li>\n<li><code>-w</code>：统计单词数。</li>\n<li><code>-c</code>：统计字节数。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"监视文件内容-tail-和-head\"><a href=\"#监视文件内容-tail-和-head\" class=\"headerlink\" title=\"监视文件内容 (tail 和 head)\"></a><strong>监视文件内容 (<code>tail</code> 和 <code>head</code>)</strong></h3><ul>\n<li><p>显示文件头部：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>动态监视文件末尾：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<p>在 Linux 中，<strong>管道符 (<code>|</code>)</strong> 是一种强大的工具，用于将一个命令的输出传递给另一个命令作为输入。以下是管道符的详细介绍和常见使用场景。</p>\n<hr>\n<h2 id=\"管道符语法\"><a href=\"#管道符语法\" class=\"headerlink\" title=\"管道符语法\"></a><strong>管道符语法</strong></h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">command1 <span class=\"token operator\">|</span> command2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>command1</code>：第一个命令，生成输出。</li>\n<li><code>|</code>：管道符，将第一个命令的输出传递给第二个命令。</li>\n<li><code>command2</code>：第二个命令，将接收的输入进行处理。</li>\n</ul>\n<hr>\n<h2 id=\"常见场景和示例\"><a href=\"#常见场景和示例\" class=\"headerlink\" title=\"常见场景和示例\"></a><strong>常见场景和示例</strong></h2><h3 id=\"1-结合-grep-搜索内容\"><a href=\"#1-结合-grep-搜索内容\" class=\"headerlink\" title=\"1. 结合 grep 搜索内容\"></a><strong>1. 结合 <code>grep</code> 搜索内容</strong></h3><ul>\n<li><p>查找某目录中包含特定关键词的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"filename\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>示例：列出当前目录下包含 “log” 的文件名：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-结合-sort-排序\"><a href=\"#2-结合-sort-排序\" class=\"headerlink\" title=\"2. 结合 sort 排序\"></a><strong>2. 结合 <code>sort</code> 排序</strong></h3><ul>\n<li><p>按文件大小排序（结合 ls -l）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-k</span> <span class=\"token number\">5</span> <span class=\"token parameter variable\">-n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>-k 5</code>：按第 5 列（文件大小）排序。</li>\n<li><code>-n</code>：按数值排序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-结合-wc-统计\"><a href=\"#3-结合-wc-统计\" class=\"headerlink\" title=\"3. 结合 wc 统计\"></a><strong>3. 结合 <code>wc</code> 统计</strong></h3><ul>\n<li><p>统计当前目录下的文件数量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>统计文件中的行数、单词数和字符数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">wc</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"4-结合-head-和-tail-查看内容\"><a href=\"#4-结合-head-和-tail-查看内容\" class=\"headerlink\" title=\"4. 结合 head 和 tail 查看内容\"></a><strong>4. 结合 <code>head</code> 和 <code>tail</code> 查看内容</strong></h3><ul>\n<li><p>查看文件的前 10 行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看文件的最后 10 行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"5-结合-cut-提取字段\"><a href=\"#5-结合-cut-提取字段\" class=\"headerlink\" title=\"5. 结合 cut 提取字段\"></a><strong>5. 结合 <code>cut</code> 提取字段</strong></h3><ul>\n<li><p>从 ls -l中提取文件权限：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">' '</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>-d ' '</code>：以空格为分隔符。</li>\n<li><code>-f 1</code>：提取第 1 列。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-结合-awk-进行格式化\"><a href=\"#6-结合-awk-进行格式化\" class=\"headerlink\" title=\"6. 结合 awk 进行格式化\"></a><strong>6. 结合 <code>awk</code> 进行格式化</strong></h3><ul>\n<li><p>提取文件名和大小：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $5, $9}'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>$5</code>：表示文件大小。</li>\n<li><code>$9</code>：表示文件名。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-结合-uniq-去重\"><a href=\"#7-结合-uniq-去重\" class=\"headerlink\" title=\"7. 结合 uniq 去重\"></a><strong>7. 结合 <code>uniq</code> 去重</strong></h3><ul>\n<li><p>统计文件中的唯一单词（结合 sort 和 uniq）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"8-结合-tee-保存和显示\"><a href=\"#8-结合-tee-保存和显示\" class=\"headerlink\" title=\"8. 结合 tee 保存和显示\"></a><strong>8. 结合 <code>tee</code> 保存和显示</strong></h3><ul>\n<li><p>将命令输出保存到文件，同时在终端显示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"9-结合-xargs-执行批量命令\"><a href=\"#9-结合-xargs-执行批量命令\" class=\"headerlink\" title=\"9. 结合 xargs 执行批量命令\"></a><strong>9. 结合 <code>xargs</code> 执行批量命令</strong></h3><ul>\n<li><p>删除包含特定关键词的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"temp\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token function\">rm</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>将文本文件中的内容逐行作为命令行参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> files.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token parameter variable\">-I</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">mv</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> /backup/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"10-动态监控日志文件\"><a href=\"#10-动态监控日志文件\" class=\"headerlink\" title=\"10. 动态监控日志文件\"></a><strong>10. 动态监控日志文件</strong></h3><ul>\n<li><p>监控日志文件中包含错误的行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> /var/log/syslog <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"error\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"管道符结合其他符号\"><a href=\"#管道符结合其他符号\" class=\"headerlink\" title=\"管道符结合其他符号\"></a><strong>管道符结合其他符号</strong></h2><h3 id=\"与重定向符号一起使用\"><a href=\"#与重定向符号一起使用\" class=\"headerlink\" title=\"与重定向符号一起使用\"></a><strong>与重定向符号一起使用</strong></h3><p>将管道符的输出保存到文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"txt\"</span> <span class=\"token operator\">&gt;</span> result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"多重管道\"><a href=\"#多重管道\" class=\"headerlink\" title=\"多重管道\"></a><strong>多重管道</strong></h3><p>将多个命令串联：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"keyword\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-c</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-nr</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>功能：<ol>\n<li>搜索文件中的 <code>keyword</code>。</li>\n<li>排序结果。</li>\n<li>去重并统计出现次数。</li>\n<li>按出现次数逆序排序。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<p>在 Linux 中，<strong>重定向</strong> 是将命令的输出或输入重定向到文件或其他设备的操作。它通常用于保存输出、将错误输出单独处理或读取文件作为输入。</p>\n<hr>\n<h2 id=\"1-输出重定向\"><a href=\"#1-输出重定向\" class=\"headerlink\" title=\"1. 输出重定向\"></a><strong>1. 输出重定向</strong></h2><h3 id=\"标准输出\"><a href=\"#标准输出\" class=\"headerlink\" title=\"标准输出 (>)\"></a><strong>标准输出 (<code>&gt;</code>)</strong></h3><ul>\n<li>将命令的标准输出（正常输出）重定向到文件。</li>\n<li>如果文件已存在，会<strong>覆盖</strong>原文件内容。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 ls 命令的输出保存到 output.txt文件中。</p>\n</li>\n</ul>\n<h3 id=\"追加输出\"><a href=\"#追加输出\" class=\"headerlink\" title=\"追加输出 (>>)\"></a><strong>追加输出 (<code>&gt;&gt;</code>)</strong></h3><ul>\n<li>将命令的标准输出<strong>追加</strong>到文件末尾，而不是覆盖。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"New line\"</span> <span class=\"token operator\">&gt;&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将字符串 “New line” 添加到 output.txt 的末尾。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-错误重定向\"><a href=\"#2-错误重定向\" class=\"headerlink\" title=\"2. 错误重定向\"></a><strong>2. 错误重定向</strong></h2><h3 id=\"标准错误输出-2\"><a href=\"#标准错误输出-2\" class=\"headerlink\" title=\"标准错误输出 (2>)\"></a><strong>标准错误输出 (<code>2&gt;</code>)</strong></h3><ul>\n<li>将命令的错误输出（标准错误）重定向到文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> nonexistent_file <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将错误消息保存到 error.txt。</p>\n</li>\n</ul>\n<h3 id=\"追加错误输出-2\"><a href=\"#追加错误输出-2\" class=\"headerlink\" title=\"追加错误输出 (2>>)\"></a><strong>追加错误输出 (<code>2&gt;&gt;</code>)</strong></h3><ul>\n<li>将错误输出<strong>追加</strong>到文件末尾。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"3-合并标准输出和错误输出\"><a href=\"#3-合并标准输出和错误输出\" class=\"headerlink\" title=\"3. 合并标准输出和错误输出\"></a><strong>3. 合并标准输出和错误输出</strong></h2><h3 id=\"将标准输出和标准错误合并到同一文件\"><a href=\"#将标准输出和标准错误合并到同一文件\" class=\"headerlink\" title=\"将标准输出和标准错误合并到同一文件\"></a><strong>将标准输出和标准错误合并到同一文件</strong></h3><ul>\n<li>使用 <code>&amp;&gt;</code> 将正常输出和错误输出都保存到一个文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> existing_file nonexistent_file <span class=\"token operator\">&amp;&gt;</span> all_output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"追加合并输出\"><a href=\"#追加合并输出\" class=\"headerlink\" title=\"追加合并输出\"></a><strong>追加合并输出</strong></h3><ul>\n<li>使用 <code>&amp;&gt;&gt;</code> 将正常输出和错误输出都追加到一个文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;&gt;&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"4-输入重定向\"><a href=\"#4-输入重定向\" class=\"headerlink\" title=\"4. 输入重定向\"></a><strong>4. 输入重定向</strong></h2><h3 id=\"将文件作为命令的输入\"><a href=\"#将文件作为命令的输入\" class=\"headerlink\" title=\"将文件作为命令的输入 (<)\"></a><strong>将文件作为命令的输入 (<code>&lt;</code>)</strong></h3><ul>\n<li>使用 <code>&lt;</code> 将文件内容作为命令的输入。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">&lt;</span> input.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>统计 input.txt 的行数。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-同时处理输出和错误\"><a href=\"#5-同时处理输出和错误\" class=\"headerlink\" title=\"5. 同时处理输出和错误\"></a><strong>5. 同时处理输出和错误</strong></h2><h3 id=\"将标准输出和错误分别保存到不同文件\"><a href=\"#将标准输出和错误分别保存到不同文件\" class=\"headerlink\" title=\"将标准输出和错误分别保存到不同文件\"></a><strong>将标准输出和错误分别保存到不同文件</strong></h3><ul>\n<li>使用 <code>&gt; file</code> 和 <code>2&gt; error_file</code>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;</span> output.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> existing_file nonexistent_file <span class=\"token operator\">&gt;</span> stdout.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> stderr.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"6-特殊重定向\"><a href=\"#6-特殊重定向\" class=\"headerlink\" title=\"6. 特殊重定向\"></a><strong>6. 特殊重定向</strong></h2><h3 id=\"丢弃输出到-dev-null\"><a href=\"#丢弃输出到-dev-null\" class=\"headerlink\" title=\"丢弃输出到 /dev/null\"></a><strong>丢弃输出到 <code>/dev/null</code></strong></h3><ul>\n<li><p><code>/dev/null</code> 是一个特殊设备文件，重定向到它的内容会被丢弃。</p>\n</li>\n<li><p>丢弃标准输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;</span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>丢弃标准错误：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>同时丢弃标准输出和错误：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;&gt;</span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"7-使用-tee-同时输出到文件和终端\"><a href=\"#7-使用-tee-同时输出到文件和终端\" class=\"headerlink\" title=\"7. 使用 tee 同时输出到文件和终端\"></a><strong>7. 使用 <code>tee</code> 同时输出到文件和终端</strong></h2><ul>\n<li><code>tee</code> 命令可以将输入同时保存到文件和终端。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 <code>ls</code> 的输出显示在终端的同时保存到 <code>output.txt</code>。</p>\n</li>\n<li><p>追加模式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"8-重定向符号总结\"><a href=\"#8-重定向符号总结\" class=\"headerlink\" title=\"8. 重定向符号总结\"></a><strong>8. 重定向符号总结</strong></h2><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&gt;</code></td>\n<td>将标准输出重定向到文件，覆盖文件内容</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>将标准输出追加到文件末尾</td>\n</tr>\n<tr>\n<td><code>2&gt;</code></td>\n<td>将错误输出重定向到文件，覆盖文件内容</td>\n</tr>\n<tr>\n<td><code>2&gt;&gt;</code></td>\n<td>将错误输出追加到文件末尾</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;</code></td>\n<td>将标准输出和错误输出重定向到同一文件</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;&gt;</code></td>\n<td>将标准输出和错误输出追加到同一文件</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>将文件内容作为命令的标准输入</td>\n</tr>\n<tr>\n<td><code>/dev/null</code></td>\n<td>丢弃所有输出</td>\n</tr>\n<tr>\n<td>`</td>\n<td>tee`</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"示例：组合重定向\"><a href=\"#示例：组合重定向\" class=\"headerlink\" title=\"示例：组合重定向\"></a><strong>示例：组合重定向</strong></h3><ol>\n<li><p>同时保存输出和错误到不同文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> existing_file nonexistent_file <span class=\"token operator\">&gt;</span> stdout.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> stderr.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>同时显示输出在终端，并保存到文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>统计某文件夹的文件数量，但丢弃错误：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /path/to/dir <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> /dev/null <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/23/bian-yi-shi-yong/",
            "url": "https://0xdadream.github.io/2024/11/23/bian-yi-shi-yong/",
            "title": "编译教程",
            "date_published": "2024-11-23T01:25:00.000Z",
            "content_html": "<h1 id=\"编译教程\"><a href=\"#编译教程\" class=\"headerlink\" title=\"编译教程\"></a>编译教程</h1><p>下面是一个<strong>完整的从源码编译安装软件的教程</strong>，涵盖了从环境准备到配置、编译、安装的所有可能会用到的步骤和细节，适用于各种类型的软件包。</p>\n<hr>\n<h2 id=\"一、环境准备\"><a href=\"#一、环境准备\" class=\"headerlink\" title=\"一、环境准备\"></a>一、环境准备</h2><p>在开始编译源码之前，确保系统满足以下条件：</p>\n<h3 id=\"1-安装必要工具\"><a href=\"#1-安装必要工具\" class=\"headerlink\" title=\"1. 安装必要工具\"></a>1. <strong>安装必要工具</strong></h3><p>在 Linux 环境下，通常需要以下工具：</p>\n<ul>\n<li><strong>编译器</strong>: <code>gcc</code> 或 <code>clang</code></li>\n<li><strong>构建工具</strong>: <code>make</code></li>\n<li><strong>其他依赖</strong>: <code>autoconf</code>, <code>automake</code>, <code>libtool</code></li>\n</ul>\n<p>对于基于 Debian 的系统（如 Ubuntu）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> build-essential autoconf automake libtool pkg-config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>对于基于 RHEL 的系统（如 CentOS）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum groupinstall <span class=\"token string\">\"Development Tools\"</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> autoconf automake libtool pkgconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-下载源码\"><a href=\"#2-下载源码\" class=\"headerlink\" title=\"2. 下载源码\"></a>2. <strong>下载源码</strong></h3><p>源码通常以 <code>.tar.gz</code> 或 <code>.tar.bz2</code> 的形式提供：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://example.com/software-1.0.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> software-1.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> software-1.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"二、运行-configure\"><a href=\"#二、运行-configure\" class=\"headerlink\" title=\"二、运行 ./configure\"></a>二、运行 <code>./configure</code></h2><p><code>./configure</code> 是自动生成的配置脚本，用于检查系统环境，生成适合当前系统的编译配置。以下是配置过程的所有选项说明。</p>\n<h3 id=\"1-路径相关选项\"><a href=\"#1-路径相关选项\" class=\"headerlink\" title=\"1. 路径相关选项\"></a>1. <strong>路径相关选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>默认值</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--prefix=DIR</code></td>\n<td>软件安装的根目录</td>\n<td><code>/usr/local</code></td>\n<td><code>--prefix=/opt/myapp</code></td>\n</tr>\n<tr>\n<td><code>--exec-prefix=DIR</code></td>\n<td>架构相关文件的安装路径</td>\n<td><code>$prefix</code></td>\n<td><code>--exec-prefix=/usr</code></td>\n</tr>\n<tr>\n<td><code>--bindir=DIR</code></td>\n<td>可执行文件安装路径</td>\n<td><code>$exec_prefix/bin</code></td>\n<td><code>--bindir=/usr/bin</code></td>\n</tr>\n<tr>\n<td><code>--libdir=DIR</code></td>\n<td>库文件安装路径</td>\n<td><code>$exec_prefix/lib</code></td>\n<td><code>--libdir=/opt/myapp/lib</code></td>\n</tr>\n<tr>\n<td><code>--includedir=DIR</code></td>\n<td>头文件安装路径</td>\n<td><code>$prefix/include</code></td>\n<td><code>--includedir=/opt/include</code></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp <span class=\"token parameter variable\">--bindir</span><span class=\"token operator\">=</span>/opt/myapp/bin <span class=\"token parameter variable\">--libdir</span><span class=\"token operator\">=</span>/opt/myapp/lib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"prefix-的用途\"><a href=\"#prefix-的用途\" class=\"headerlink\" title=\"prefix 的用途\"></a><code>prefix</code> 的用途</h4><p><code>prefix</code> 是通过 <code>./configure --prefix=DIR</code> 选项指定的路径。其主要作用是告诉构建系统，安装的文件应该放在哪个目录下。</p>\n<p><code>$prefix</code> 的默认值通常是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/usr/local<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>那么，安装路径会变成以下结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/opt/myapp/bin       # 可执行文件\n/opt/myapp/lib       # 库文件\n/opt/myapp/include   # 头文件\n/opt/myapp/share     # 共享资源（如文档、手册）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"如何修改-prefix\"><a href=\"#如何修改-prefix\" class=\"headerlink\" title=\"如何修改 $prefix\"></a>如何修改 <code>$prefix</code></h4><p>在配置阶段指定通过 <code>./configure</code> 的 <code>--prefix</code> 参数直接指定：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/custom/path<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果不指定，系统会默认安装到 <code>/usr/local</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token comment\"># 文件安装到 /usr/local/...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"prefix-的实际应用\"><a href=\"#prefix-的实际应用\" class=\"headerlink\" title=\"$prefix 的实际应用\"></a><code>$prefix</code> 的实际应用</h4><p>假设我们正在安装一个名为 <code>myapp</code> 的软件：</p>\n<p>示例 1: 默认安装到 <code>/usr/local</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装完成后，文件路径如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/usr/local/bin/myapp        # 可执行文件\n/usr/local/lib/libmyapp.so  # 动态库\n/usr/local/include/myapp.h  # 头文件\n/usr/local/share/myapp      # 共享数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>示例 2: 自定义安装路径</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装完成后，文件路径如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/opt/myapp/bin/myapp        # 可执行文件\n/opt/myapp/lib/libmyapp.so  # 动态库\n/opt/myapp/include/myapp.h  # 头文件\n/opt/myapp/share/myapp      # 共享数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"为什么-prefix-很重要\"><a href=\"#为什么-prefix-很重要\" class=\"headerlink\" title=\"为什么 $prefix 很重要\"></a>为什么 <code>$prefix</code> 很重要</h4><h5 id=\"1-避免覆盖系统文件\"><a href=\"#1-避免覆盖系统文件\" class=\"headerlink\" title=\"1. 避免覆盖系统文件\"></a>1. 避免覆盖系统文件</h5><p>默认路径 <code>/usr/local</code> 不会影响系统自带的软件，安全且独立。</p>\n<h5 id=\"2-方便不同版本共存\"><a href=\"#2-方便不同版本共存\" class=\"headerlink\" title=\"2. 方便不同版本共存\"></a>2. 方便不同版本共存</h5><p>通过为不同版本指定不同的 <code>--prefix</code>，可以在同一台机器上运行多版本的软件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp-1.0\n./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp-2.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"3-灵活管理软件\"><a href=\"#3-灵活管理软件\" class=\"headerlink\" title=\"3. 灵活管理软件\"></a>3. 灵活管理软件</h5><p>如果安装路径是自定义的，例如 <code>/opt/myapp</code>，删除整个软件只需移除该目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /opt/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"如何查看-prefix-的值\"><a href=\"#如何查看-prefix-的值\" class=\"headerlink\" title=\"如何查看 $prefix 的值\"></a>如何查看 <code>$prefix</code> 的值</h4><p>配置完成后，<code>$prefix</code> 的值通常会被记录在 <code>Makefile</code> 中，你可以通过以下方法查看：</p>\n<h5 id=\"1-直接查看-Makefile\"><a href=\"#1-直接查看-Makefile\" class=\"headerlink\" title=\"1. 直接查看 Makefile\"></a>1. 直接查看 <code>Makefile</code></h5><p>打开 <code>Makefile</code>，找到 <code>prefix</code> 的定义：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">\"^prefix\"</span> Makefile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"2-使用-config-log\"><a href=\"#2-使用-config-log\" class=\"headerlink\" title=\"2. 使用 config.log\"></a>2. 使用 <code>config.log</code></h5><p>查看配置过程生成的日志文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">\"prefix\"</span> config.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-功能启用-禁用选项\"><a href=\"#2-功能启用-禁用选项\" class=\"headerlink\" title=\"2. 功能启用/禁用选项\"></a>2. <strong>功能启用/禁用选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--enable-FEATURE</code></td>\n<td>启用某个功能</td>\n<td><code>--enable-ssl</code></td>\n</tr>\n<tr>\n<td><code>--disable-FEATURE</code></td>\n<td>禁用某个功能</td>\n<td><code>--disable-debug</code></td>\n</tr>\n<tr>\n<td><code>--with-FEATURE</code></td>\n<td>启用功能，并指定路径或配置</td>\n<td><code>--with-ssl=/opt/openssl</code></td>\n</tr>\n<tr>\n<td><code>--without-FEATURE</code></td>\n<td>禁用功能</td>\n<td><code>--without-zlib</code></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure --enable-optimizations --disable-debug --with-ssl<span class=\"token operator\">=</span>/opt/openssl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-编译器相关选项\"><a href=\"#3-编译器相关选项\" class=\"headerlink\" title=\"3. 编译器相关选项\"></a>3. <strong>编译器相关选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>CC=COMPILER</code></td>\n<td>指定 C 编译器</td>\n<td><code>CC=gcc</code></td>\n</tr>\n<tr>\n<td><code>CXX=COMPILER</code></td>\n<td>指定 C++ 编译器</td>\n<td><code>CXX=g++</code></td>\n</tr>\n<tr>\n<td><code>CFLAGS=FLAGS</code></td>\n<td>为 C 编译器设置标志</td>\n<td><code>CFLAGS=\"-O2 -Wall\"</code></td>\n</tr>\n<tr>\n<td><code>CXXFLAGS=FLAGS</code></td>\n<td>为 C++ 编译器设置标志</td>\n<td><code>CXXFLAGS=\"-O2 -Wall\"</code></td>\n</tr>\n<tr>\n<td><code>LDFLAGS=FLAGS</code></td>\n<td>设置链接器标志</td>\n<td><code>LDFLAGS=\"-L/usr/lib\"</code></td>\n</tr>\n<tr>\n<td><code>CPPFLAGS=FLAGS</code></td>\n<td>设置预处理器标志（头文件路径等）</td>\n<td><code>CPPFLAGS=\"-I/usr/include\"</code></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token assign-left variable\">CC</span><span class=\"token operator\">=</span>gcc <span class=\"token assign-left variable\">CFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-O2 -Wall\"</span> <span class=\"token assign-left variable\">LDFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-L/usr/local/lib\"</span> <span class=\"token assign-left variable\">CPPFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-I/usr/local/include\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-调试与日志选项\"><a href=\"#4-调试与日志选项\" class=\"headerlink\" title=\"4. 调试与日志选项\"></a>4. <strong>调试与日志选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--enable-debug</code></td>\n<td>启用调试模式</td>\n<td><code>--enable-debug</code></td>\n</tr>\n<tr>\n<td><code>--disable-debug</code></td>\n<td>禁用调试模式</td>\n<td><code>--disable-debug</code></td>\n</tr>\n<tr>\n<td><code>--quiet</code> 或 <code>--silent</code></td>\n<td>减少输出</td>\n<td><code>--quiet</code></td>\n</tr>\n<tr>\n<td><code>--verbose</code></td>\n<td>显示详细输出</td>\n<td><code>--verbose</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"5-查看所有参数\"><a href=\"#5-查看所有参数\" class=\"headerlink\" title=\"5.查看所有参数\"></a>5.查看所有参数</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">-h</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如得到<code>./configure --python=路径</code>，可以指定安装到指定python版本库中</p>\n<hr>\n<h2 id=\"三、编译源码\"><a href=\"#三、编译源码\" class=\"headerlink\" title=\"三、编译源码\"></a>三、编译源码</h2><p>运行 <code>make</code> 命令开始编译：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p><strong>加速编译</strong><br>利用多核 CPU：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> -j<span class=\"token variable\"><span class=\"token variable\">$(</span>nproc<span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>常见问题</strong><br>如果出现依赖问题，请根据报错信息安装缺失的库。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"四、测试编译结果\"><a href=\"#四、测试编译结果\" class=\"headerlink\" title=\"四、测试编译结果\"></a>四、测试编译结果</h2><p>在安装前，可以运行测试（如果源码支持）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> check<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"五、安装编译结果\"><a href=\"#五、安装编译结果\" class=\"headerlink\" title=\"五、安装编译结果\"></a>五、安装编译结果</h2><p>运行 <code>make install</code> 安装编译完成的文件到目标路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，检查安装路径下是否有生成的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /opt/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"六、卸载（可选）\"><a href=\"#六、卸载（可选）\" class=\"headerlink\" title=\"六、卸载（可选）\"></a>六、卸载（可选）</h2><p>如果需要卸载，使用 <code>make uninstall</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> uninstall<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"七、完整操作示例\"><a href=\"#七、完整操作示例\" class=\"headerlink\" title=\"七、完整操作示例\"></a>七、完整操作示例</h2><p>以下是完整的从下载到安装的操作流程示例：</p>\n<ol>\n<li><p><strong>下载源码</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://example.com/software-1.0.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> software-1.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> software-1.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>运行配置脚本</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp --enable-optimizations --with-ssl<span class=\"token operator\">=</span>/opt/openssl <span class=\"token assign-left variable\">CFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-O2 -Wall\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>编译源码</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> -j<span class=\"token variable\"><span class=\"token variable\">$(</span>nproc<span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>运行测试</strong>（可选）:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装程序</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>验证安装</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/myapp/bin/software <span class=\"token parameter variable\">--version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"八、常见问题及解决方案\"><a href=\"#八、常见问题及解决方案\" class=\"headerlink\" title=\"八、常见问题及解决方案\"></a>八、常见问题及解决方案</h2><h3 id=\"1-缺少依赖库\"><a href=\"#1-缺少依赖库\" class=\"headerlink\" title=\"1. 缺少依赖库\"></a>1. 缺少依赖库</h3><p><strong>错误信息</strong>: <code>configure: error: Missing library xyz</code><br><strong>解决方法</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libxyz-dev  <span class=\"token comment\"># Debian/Ubuntu</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> xyz-devel   <span class=\"token comment\"># CentOS/RHEL</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-权限不足\"><a href=\"#2-权限不足\" class=\"headerlink\" title=\"2. 权限不足\"></a>2. 权限不足</h3><p><strong>错误信息</strong>: <code>Permission denied</code><br><strong>解决方法</strong>:<br>在需要权限的命令前加 <code>sudo</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-环境变量问题\"><a href=\"#3-环境变量问题\" class=\"headerlink\" title=\"3. 环境变量问题\"></a>3. 环境变量问题</h3><p><strong>问题描述</strong>: 安装后无法找到可执行文件。<br><strong>解决方法</strong>: 将安装路径添加到 <code>PATH</code> 中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/opt/myapp/bin:<span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<p>以下是 <code>autoconf</code> 和 <code>automake</code> 的完整使用教程，包括它们的基本概念、工作原理和实际使用步骤。</p>\n<hr>\n<h2 id=\"一、autoconf-和-automake-的简介\"><a href=\"#一、autoconf-和-automake-的简介\" class=\"headerlink\" title=\"一、autoconf 和 automake 的简介\"></a>一、<code>autoconf</code> 和 <code>automake</code> 的简介</h2><h3 id=\"1-什么是-autoconf\"><a href=\"#1-什么是-autoconf\" class=\"headerlink\" title=\"1. 什么是 autoconf\"></a>1. 什么是 <code>autoconf</code></h3><p><code>autoconf</code> 是一种自动生成 <code>configure</code> 脚本的工具，主要用来检测构建系统的环境是否满足软件的依赖需求，并生成相应的配置文件（如 <code>Makefile</code>）。</p>\n<p><strong>功能</strong>:</p>\n<ul>\n<li>提供跨平台兼容性。</li>\n<li>检查依赖工具和库的存在。</li>\n<li>自动生成编译脚本。</li>\n</ul>\n<hr>\n<h3 id=\"2-什么是-automake\"><a href=\"#2-什么是-automake\" class=\"headerlink\" title=\"2. 什么是 automake\"></a>2. 什么是 <code>automake</code></h3><p><code>automake</code> 是一种自动生成 <code>Makefile.in</code> 文件的工具，它依赖于更高层次的构建规则定义文件 <code>Makefile.am</code>。</p>\n<p><strong>功能</strong>:</p>\n<ul>\n<li>简化 <code>Makefile</code> 编写。</li>\n<li>与 <code>autoconf</code> 配合，生成完整的构建系统。</li>\n<li>提供模块化和扩展支持。</li>\n</ul>\n<hr>\n<h2 id=\"二、工作原理\"><a href=\"#二、工作原理\" class=\"headerlink\" title=\"二、工作原理\"></a>二、工作原理</h2><ul>\n<li><code>autoconf</code> 从 <code>configure.ac</code> 或 <code>configure.in</code> 文件生成 <code>configure</code> 脚本。</li>\n<li><code>automake</code> 从 <code>Makefile.am</code> 文件生成 <code>Makefile.in</code> 文件，最终结合 <code>autoconf</code> 的输出生成 <code>Makefile</code>。</li>\n</ul>\n<p><strong>工具链流程</strong>:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">configure.ac --&gt; autoconf --&gt; configure\nMakefile.am  --&gt; automake --&gt; Makefile.in\nconfigure + Makefile.in --&gt; ./configure --&gt; Makefile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"三、安装和准备环境\"><a href=\"#三、安装和准备环境\" class=\"headerlink\" title=\"三、安装和准备环境\"></a>三、安装和准备环境</h2><h3 id=\"1-安装工具\"><a href=\"#1-安装工具\" class=\"headerlink\" title=\"1. 安装工具\"></a>1. 安装工具</h3><p>在 Linux 环境中安装 <code>autoconf</code> 和 <code>automake</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> autoconf automake  <span class=\"token comment\"># Debian/Ubuntu</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> autoconf automake     <span class=\"token comment\"># CentOS</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"2-项目准备\"><a href=\"#2-项目准备\" class=\"headerlink\" title=\"2. 项目准备\"></a>2. 项目准备</h3><p>创建一个简单的 C 项目目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> myproject\n<span class=\"token builtin class-name\">cd</span> myproject\n<span class=\"token function\">mkdir</span> src\n<span class=\"token function\">touch</span> configure.ac Makefile.am src/Makefile.am<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"四、autoconf-和-automake-使用流程\"><a href=\"#四、autoconf-和-automake-使用流程\" class=\"headerlink\" title=\"四、autoconf 和 automake 使用流程\"></a>四、<code>autoconf</code> 和 <code>automake</code> 使用流程</h2><h3 id=\"1-创建-configure-ac-文件\"><a href=\"#1-创建-configure-ac-文件\" class=\"headerlink\" title=\"1. 创建 configure.ac 文件\"></a><strong>1. 创建 <code>configure.ac</code> 文件</strong></h3><p><code>configure.ac</code> 是 <code>autoconf</code> 的核心文件，定义了项目名称、版本、依赖工具等。</p>\n<p>以下是一个简单示例：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [user@example.com])  # 项目名称、版本和维护者\nAM_INIT_AUTOMAKE                                  # 初始化 automake\nAC_PROG_CC                                       # 检测 C 编译器\nAC_CONFIG_FILES([Makefile src/Makefile])         # 配置 Makefile 文件\nAC_OUTPUT                                        # 输出配置文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"2-创建-Makefile-am-文件\"><a href=\"#2-创建-Makefile-am-文件\" class=\"headerlink\" title=\"2. 创建 Makefile.am 文件\"></a><strong>2. 创建 <code>Makefile.am</code> 文件</strong></h3><h4 id=\"顶层目录的-Makefile-am\"><a href=\"#顶层目录的-Makefile-am\" class=\"headerlink\" title=\"顶层目录的 Makefile.am\"></a>顶层目录的 <code>Makefile.am</code></h4><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">SUBDIRS <span class=\"token operator\">=</span> src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"src-Makefile-am\"><a href=\"#src-Makefile-am\" class=\"headerlink\" title=\"src/Makefile.am\"></a><code>src/Makefile.am</code></h4><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">bin_PROGRAMS <span class=\"token operator\">=</span> myapp\nmyapp_SOURCES <span class=\"token operator\">=</span> main.c utils.c utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"3-生成构建脚本和文件\"><a href=\"#3-生成构建脚本和文件\" class=\"headerlink\" title=\"3. 生成构建脚本和文件\"></a><strong>3. 生成构建脚本和文件</strong></h3><ol>\n<li><p><strong>生成 <code>aclocal.m4</code></strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 <code>configure</code> 脚本</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 <code>Makefile.in</code> 文件</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">automake --add-missing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 <code>Makefile</code> 文件</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"4-编译和安装\"><a href=\"#4-编译和安装\" class=\"headerlink\" title=\"4. 编译和安装\"></a><strong>4. 编译和安装</strong></h3><ol>\n<li><p><strong>编译</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>运行程序</strong><br>如果你的程序是一个可执行文件，例如 <code>myapp</code>，可以直接运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./src/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"五、完整示例\"><a href=\"#五、完整示例\" class=\"headerlink\" title=\"五、完整示例\"></a>五、完整示例</h2><p>假设你有以下项目结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">myproject/\n├── configure.ac\n├── Makefile.am\n├── src/\n│   ├── Makefile.am\n│   ├── main.c\n│   ├── utils.c\n│   └── utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下是各个文件的内容：</p>\n<h3 id=\"1-configure-ac\"><a href=\"#1-configure-ac\" class=\"headerlink\" title=\"1. configure.ac\"></a>1. <code>configure.ac</code></h3><pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [user@example.com])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_CONFIG_FILES([Makefile src/Makefile])\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-顶层-Makefile-am\"><a href=\"#2-顶层-Makefile-am\" class=\"headerlink\" title=\"2. 顶层 Makefile.am\"></a>2. 顶层 <code>Makefile.am</code></h3><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">SUBDIRS <span class=\"token operator\">=</span> src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-src-Makefile-am\"><a href=\"#3-src-Makefile-am\" class=\"headerlink\" title=\"3. src/Makefile.am\"></a>3. <code>src/Makefile.am</code></h3><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">bin_PROGRAMS <span class=\"token operator\">=</span> myapp\nmyapp_SOURCES <span class=\"token operator\">=</span> main.c utils.c utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-src-main-c\"><a href=\"#4-src-main-c\" class=\"headerlink\" title=\"4. src/main.c\"></a>4. <code>src/main.c</code></h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"utils.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-src-utils-c\"><a href=\"#5-src-utils-c\" class=\"headerlink\" title=\"5. src/utils.c\"></a>5. <code>src/utils.c</code></h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"utils.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-src-utils-h\"><a href=\"#6-src-utils-h\" class=\"headerlink\" title=\"6. src/utils.h\"></a>6. <code>src/utils.h</code></h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">UTILS_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UTILS_H</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"构建和运行\"><a href=\"#构建和运行\" class=\"headerlink\" title=\"构建和运行\"></a>构建和运行</h3><h4 id=\"1-生成文件\"><a href=\"#1-生成文件\" class=\"headerlink\" title=\"1. 生成文件\"></a>1. 生成文件</h4><p>运行以下命令生成必要的构建文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal\nautoconf\nautomake --add-missing\n./configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"3. 安装\"></a>3. 安装</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"4-运行程序\"><a href=\"#4-运行程序\" class=\"headerlink\" title=\"4. 运行程序\"></a>4. 运行程序</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./src/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"六、常见问题及解决方法\"><a href=\"#六、常见问题及解决方法\" class=\"headerlink\" title=\"六、常见问题及解决方法\"></a>六、常见问题及解决方法</h2><ol>\n<li><strong><code>aclocal: command not found</code></strong><br><strong>原因</strong>: 未安装 <code>automake</code>。<br><strong>解决</strong>: 安装 <code>automake</code>。</li>\n<li><strong><code>configure.ac: no proper invocation of AM_INIT_AUTOMAKE</code></strong><br><strong>原因</strong>: <code>configure.ac</code> 中缺少 <code>AM_INIT_AUTOMAKE</code>。<br><strong>解决</strong>: 添加 <code>AM_INIT_AUTOMAKE</code>。</li>\n<li><strong><code>Makefile.am: required file 'INSTALL' not found</code></strong><br><strong>原因</strong>: 缺少默认的 <code>INSTALL</code> 文件。<br><strong>解决</strong>: 使用 <code>automake --add-missing</code> 自动生成。</li>\n</ol>\n<hr>\n<h2 id=\"一、autoscan\"><a href=\"#一、autoscan\" class=\"headerlink\" title=\"一、autoscan\"></a>一、<code>autoscan</code></h2><h3 id=\"1-什么是-autoscan\"><a href=\"#1-什么是-autoscan\" class=\"headerlink\" title=\"1. 什么是 autoscan\"></a>1. 什么是 <code>autoscan</code></h3><p><code>autoscan</code> 是 <code>autoconf</code> 的一个辅助工具，用于自动生成初始的 <code>configure.ac</code> 文件（或者早期的 <code>configure.in</code> 文件）。它会扫描项目目录中的文件，推测需要哪些检查，并生成一个名为 <code>configure.scan</code> 的模板文件供开发者参考。</p>\n<hr>\n<h3 id=\"2-autoscan-的功能\"><a href=\"#2-autoscan-的功能\" class=\"headerlink\" title=\"2. autoscan 的功能\"></a>2. <code>autoscan</code> 的功能</h3><ul>\n<li>自动检测源码中的依赖，例如头文件、库文件。</li>\n<li>提供一个初步的 <code>configure.ac</code> 文件模板。</li>\n<li>简化了手动编写配置文件的过程。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用方法\"><a href=\"#3-使用方法\" class=\"headerlink\" title=\"3. 使用方法\"></a>3. 使用方法</h3><h4 id=\"1-初始化项目\"><a href=\"#1-初始化项目\" class=\"headerlink\" title=\"(1) 初始化项目\"></a>(1) 初始化项目</h4><p>确保项目目录结构已经创建，并包含至少一个源文件（如 <code>main.c</code>）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> myproject\n<span class=\"token builtin class-name\">cd</span> myproject\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'#include &lt;stdio.h&gt;'</span> <span class=\"token operator\">&gt;</span> main.c\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'int main() { return 0; }'</span> <span class=\"token operator\">&gt;&gt;</span> main.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-运行-autoscan\"><a href=\"#2-运行-autoscan\" class=\"headerlink\" title=\"(2) 运行 autoscan\"></a>(2) 运行 <code>autoscan</code></h4><p>在项目目录中运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoscan<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行完成后，生成一个 <code>configure.scan</code> 文件。</p>\n<h4 id=\"3-修改-configure-scan\"><a href=\"#3-修改-configure-scan\" class=\"headerlink\" title=\"(3) 修改 configure.scan\"></a>(3) 修改 <code>configure.scan</code></h4><p>将 <code>configure.scan</code> 重命名为 <code>configure.ac</code>，并根据实际需求修改内容。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> configure.scan configure.ac<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>示例生成的 <code>configure.scan</code> 文件可能包含以下内容：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([UNKNOWN], [1.0], [bug-report@example.com])\nAC_CONFIG_SRCDIR([main.c])\nAC_CONFIG_HEADERS([config.h])\nAC_PROG_CC\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改后，可添加更多具体的检查内容，例如库依赖、路径配置等。</p>\n<h4 id=\"4-继续构建\"><a href=\"#4-继续构建\" class=\"headerlink\" title=\"(4) 继续构建\"></a>(4) 继续构建</h4><p>生成 <code>configure</code> 脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"4-autoscan-的注意事项\"><a href=\"#4-autoscan-的注意事项\" class=\"headerlink\" title=\"4. autoscan 的注意事项\"></a>4. <code>autoscan</code> 的注意事项</h3><ul>\n<li>它只能作为生成初始配置的工具，输出的 <code>configure.scan</code> 文件需要手动完善。</li>\n<li>如果项目目录中没有 <code>.c</code> 文件或标准构建文件，<code>autoscan</code> 可能无法推断正确的配置。</li>\n</ul>\n<hr>\n<h2 id=\"二、aclocal\"><a href=\"#二、aclocal\" class=\"headerlink\" title=\"二、aclocal\"></a>二、<code>aclocal</code></h2><h3 id=\"1-什么是-aclocal\"><a href=\"#1-什么是-aclocal\" class=\"headerlink\" title=\"1. 什么是 aclocal\"></a>1. 什么是 <code>aclocal</code></h3><p><code>aclocal</code> 是 <code>automake</code> 的辅助工具，专门用于生成 <code>aclocal.m4</code> 文件。<code>aclocal.m4</code> 是一个包含各种宏定义的文件，用于支持 <code>autoconf</code> 和 <code>automake</code> 的功能。</p>\n<p><code>aclocal</code> 会扫描项目目录中的 <code>configure.ac</code> 文件，以及系统中可用的宏定义，生成一个与项目兼容的宏文件。</p>\n<hr>\n<h3 id=\"2-aclocal-的功能\"><a href=\"#2-aclocal-的功能\" class=\"headerlink\" title=\"2. aclocal 的功能\"></a>2. <code>aclocal</code> 的功能</h3><ul>\n<li>根据 <code>configure.ac</code> 的内容，生成或更新 <code>aclocal.m4</code> 文件。</li>\n<li>提供对额外宏库的支持，例如 GNU 库的宏。</li>\n<li>管理自定义宏，以便 <code>autoconf</code> 和 <code>automake</code> 可以正确工作。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用方法-1\"><a href=\"#3-使用方法-1\" class=\"headerlink\" title=\"3. 使用方法\"></a>3. 使用方法</h3><h4 id=\"1-编写-configure-ac\"><a href=\"#1-编写-configure-ac\" class=\"headerlink\" title=\"(1) 编写 configure.ac\"></a>(1) 编写 <code>configure.ac</code></h4><p>假设我们有以下简单的 <code>configure.ac</code> 文件：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [bug-report@example.com])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-运行-aclocal\"><a href=\"#2-运行-aclocal\" class=\"headerlink\" title=\"(2) 运行 aclocal\"></a>(2) 运行 <code>aclocal</code></h4><p>运行以下命令生成或更新 <code>aclocal.m4</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>生成的 <code>aclocal.m4</code> 文件可能包含标准宏，例如对编译器检查、头文件检查等的支持。</p>\n<h4 id=\"3-后续步骤\"><a href=\"#3-后续步骤\" class=\"headerlink\" title=\"(3) 后续步骤\"></a>(3) 后续步骤</h4><p>生成 <code>configure</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"4-自定义宏支持\"><a href=\"#4-自定义宏支持\" class=\"headerlink\" title=\"4. 自定义宏支持\"></a>4. 自定义宏支持</h3><p>如果你需要自定义宏，可以创建一个名为 <code>m4/</code> 的目录，并将宏文件放入其中。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> m4\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'AC_DEFUN([MY_MACRO], [echo \"This is my custom macro\"])'</span> <span class=\"token operator\">&gt;</span> m4/my_macro.m4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>然后在 <code>configure.ac</code> 中引用：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [bug-report@example.com])\nAC_CONFIG_MACRO_DIR([m4])  # 指定宏目录\nAM_INIT_AUTOMAKE\nMY_MACRO\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行以下命令，<code>aclocal</code> 会自动包含自定义宏：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"三、完整实践示例\"><a href=\"#三、完整实践示例\" class=\"headerlink\" title=\"三、完整实践示例\"></a>三、完整实践示例</h2><p>假设我们有一个简单的项目：<br>目录结构如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">myproject/\n├── configure.ac\n├── Makefile.am\n├── src/\n│   ├── main.c\n│   ├── utils.c\n│   └── utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下是构建流程：</p>\n<ol>\n<li><strong>生成初始文件</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoscan\n<span class=\"token function\">mv</span> configure.scan configure.ac<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>完善 <code>configure.ac</code></strong></li>\n</ol>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [bug-report@example.com])\nAC_CONFIG_SRCDIR([src/main.c])\nAC_CONFIG_MACRO_DIR([m4])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>生成宏文件</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li><strong>生成 <code>configure</code> 脚本</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf\nautomake --add-missing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>运行 <code>configure</code> 和编译</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/08/10/ruan-lian-jie-he-ying-lian-jie/",
            "url": "https://0xdadream.github.io/2024/08/10/ruan-lian-jie-he-ying-lian-jie/",
            "title": "软链接和硬链接",
            "date_published": "2024-08-10T02:25:00.000Z",
            "content_html": "<h1 id=\"软链接和硬链接\"><a href=\"#软链接和硬链接\" class=\"headerlink\" title=\"软链接和硬链接\"></a>软链接和硬链接</h1><p>在Linux和Unix系统中，<strong>软链接</strong>（符号链接，symbolic link，简称<code>symlink</code>）和<strong>硬链接</strong>（hard link）是两种用于指向文件或目录的方式。它们有不同的用途和行为。</p>\n<h2 id=\"1-软链接（Symbolic-Link）\"><a href=\"#1-软链接（Symbolic-Link）\" class=\"headerlink\" title=\"1. 软链接（Symbolic Link）\"></a>1. 软链接（Symbolic Link）</h2><p>软链接类似于Windows中的快捷方式，它是一个指向另一个文件或目录的指针。创建软链接后，这个链接文件本身并不包含目标文件的数据，而是包含目标文件的路径。</p>\n<h4 id=\"特性：\"><a href=\"#特性：\" class=\"headerlink\" title=\"特性：\"></a>特性：</h4><ul>\n<li><strong>指向目标文件的路径</strong>：软链接文件仅存储目标文件的路径，而不是文件内容。</li>\n<li><strong>跨文件系统</strong>：软链接可以指向不同文件系统中的文件或目录。</li>\n<li><strong>链断裂问题</strong>：如果目标文件被删除或移动，软链接将失效，成为“断链”。</li>\n<li><strong>文件大小</strong>：软链接的大小是指向目标文件路径的长度。</li>\n</ul>\n<h4 id=\"创建软链接\"><a href=\"#创建软链接\" class=\"headerlink\" title=\"创建软链接\"></a>创建软链接</h4><p>要创建一个软链接，你可以使用<code>ln -s</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /path/to/target /path/to/symlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /home/user/original_file.txt /home/user/shortcut_to_file.txt <span class=\"token comment\"># 也可以是目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将创建一个名为<code>shortcut_to_file.txt</code>的软链接，指向<code>/home/user/original_file.txt</code>。</p>\n<h4 id=\"查看软链接\"><a href=\"#查看软链接\" class=\"headerlink\" title=\"查看软链接\"></a>查看软链接</h4><p>使用<code>ls -l</code>命令可以查看软链接的详细信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> /path/to/symlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> /home/user/shortcut_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lrwxrwxrwx <span class=\"token number\">1</span> user user <span class=\"token number\">21</span> Aug <span class=\"token number\">12</span> <span class=\"token number\">12</span>:00 /home/user/shortcut_to_file.txt -<span class=\"token operator\">&gt;</span> /home/user/original_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>l</code>表示这是一个软链接，箭头<code>-&gt;</code>后面是目标路径。</p>\n<h4 id=\"删除软链接\"><a href=\"#删除软链接\" class=\"headerlink\" title=\"删除软链接\"></a>删除软链接</h4><p>使用<code>rm</code>命令删除软链接。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> /path/to/symlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> /home/user/shortcut_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将删除软链接，但不会影响目标文件。</p>\n<h2 id=\"2-硬链接（Hard-Link）\"><a href=\"#2-硬链接（Hard-Link）\" class=\"headerlink\" title=\"2. 硬链接（Hard Link）\"></a>2. 硬链接（Hard Link）</h2><p>硬链接是文件系统中的一个目录条目，它指向文件的实际数据块。与软链接不同，硬链接不是指向路径，而是指向数据块。因此，硬链接和原始文件共享相同的数据块。</p>\n<h4 id=\"特性：-1\"><a href=\"#特性：-1\" class=\"headerlink\" title=\"特性：\"></a>特性：</h4><ul>\n<li><strong>指向数据块</strong>：硬链接指向文件的实际数据块，而不是路径。</li>\n<li><strong>共享文件数据</strong>：硬链接和原始文件共享相同的数据块，因此它们内容完全相同，且修改一个文件内容会同时更新硬链接的内容。</li>\n<li><strong>不可跨文件系统</strong>：硬链接必须在同一文件系统内。</li>\n<li><strong>删除影响</strong>：删除一个硬链接不会影响文件的实际数据，只有当所有指向数据块的硬链接都删除后，文件的数据才会被删除。</li>\n</ul>\n<h4 id=\"创建硬链接\"><a href=\"#创建硬链接\" class=\"headerlink\" title=\"创建硬链接\"></a>创建硬链接</h4><p>要创建一个硬链接，你可以使用<code>ln</code>命令（不带<code>-s</code>选项）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> /path/to/target /path/to/hardlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> /home/user/original_file.txt /home/user/hardlink_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将创建一个名为<code>hardlink_to_file.txt</code>的硬链接，指向<code>/home/user/original_file.txt</code>的数据块。</p>\n<h4 id=\"查看硬链接\"><a href=\"#查看硬链接\" class=\"headerlink\" title=\"查看硬链接\"></a>查看硬链接</h4><p>使用<code>ls -li</code>命令可以查看文件的inode号，硬链接共享相同的inode号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-li</span> /path/to/target /path/to/hardlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-li</span> /home/user/original_file.txt /home/user/hardlink_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1234567</span> -rw-r--r-- <span class=\"token number\">2</span> user user <span class=\"token number\">1024</span> Aug <span class=\"token number\">12</span> <span class=\"token number\">12</span>:00 /home/user/original_file.txt\n<span class=\"token number\">1234567</span> -rw-r--r-- <span class=\"token number\">2</span> user user <span class=\"token number\">1024</span> Aug <span class=\"token number\">12</span> <span class=\"token number\">12</span>:00 /home/user/hardlink_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>两个文件共享相同的inode号（<code>1234567</code>），说明它们是硬链接。</p>\n<h4 id=\"删除硬链接\"><a href=\"#删除硬链接\" class=\"headerlink\" title=\"删除硬链接\"></a>删除硬链接</h4><p>使用<code>rm</code>命令删除硬链接。删除硬链接不会删除文件数据，只有当所有硬链接都被删除后，文件数据才会被删除。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> /path/to/hardlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> /home/user/hardlink_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将删除硬链接，但<code>/home/user/original_file.txt</code>仍然存在，文件数据依然可用。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><strong>软链接</strong>：适合用作快捷方式和指向目录。使用软链接时，请确保目标文件存在，或会造成“断链”。</li>\n<li><strong>硬链接</strong>：适用于同一文件系统内共享文件数据，不能链接到目录（通常情况下）。硬链接不可跨文件系统。</li>\n</ul>\n<h2 id=\"进阶操作\"><a href=\"#进阶操作\" class=\"headerlink\" title=\"进阶操作\"></a>进阶操作</h2><ul>\n<li><p><strong>查看所有链接</strong>：使用<code>find</code>命令查找所有指向某个目标的软链接或硬链接。</p>\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> /path/to/directory <span class=\"token parameter variable\">-type</span> l <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"link_name\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个命令会查找所有名为<code>link_name</code>的软链接。</p>\n</li>\n</ul>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/08/03/shell/",
            "url": "https://0xdadream.github.io/2024/08/03/shell/",
            "title": "shell",
            "date_published": "2024-08-03T01:25:00.000Z",
            "content_html": "<h1 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h1><p>Shell 是一种用于与操作系统进行交互的命令行界面。常见的 Shell 有 Bash（Bourne Again Shell）、Zsh、Ksh、以及 Windows 上的 PowerShell。Shell 不仅可以用于执行单个命令，还可以编写脚本来自动化任务。以下是一些基本的 Shell 命令和脚本编写的示例。</p>\n<h2 id=\"基本-Shell-命令\"><a href=\"#基本-Shell-命令\" class=\"headerlink\" title=\"基本 Shell 命令\"></a>基本 Shell 命令</h2><h3 id=\"文件和目录操作\"><a href=\"#文件和目录操作\" class=\"headerlink\" title=\"文件和目录操作\"></a>文件和目录操作</h3><ul>\n<li><p><strong>ls</strong>：列出目录内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span>\n<span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>  <span class=\"token comment\"># 显示详细信息</span>\n<span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span>  <span class=\"token comment\"># 显示所有文件，包括隐藏文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>cd</strong>：更改目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /path/to/directory\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>  <span class=\"token comment\"># 返回上一级目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>pwd</strong>：显示当前工作目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">pwd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>mkdir</strong>：创建目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> new_directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>rm</strong>：删除文件或目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> filename\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> directory  <span class=\"token comment\"># 删除目录及其内容</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>cp</strong>：复制文件或目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> source_file destination\n<span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span> source_directory destination  <span class=\"token comment\"># 复制目录及其内容</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>mv</strong>：移动或重命名文件或目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> old_name new_name\n<span class=\"token function\">mv</span> <span class=\"token function\">file</span> /path/to/destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"文件查看和编辑\"><a href=\"#文件查看和编辑\" class=\"headerlink\" title=\"文件查看和编辑\"></a>文件查看和编辑</h3><ul>\n<li><p><strong>cat</strong>：查看文件内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>less</strong>：分页查看文件内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">less</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>head</strong>：查看文件开头部分</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">head</span> filename\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span> filename  <span class=\"token comment\"># 查看前 10 行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>tail</strong>：查看文件末尾部分</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> filename\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span> filename  <span class=\"token comment\"># 查看后 10 行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>nano</strong>、<strong>vi</strong>、<strong>vim</strong>：文本编辑器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> filename\n<span class=\"token function\">vi</span> filename\n<span class=\"token function\">vim</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"系统信息和管理\"><a href=\"#系统信息和管理\" class=\"headerlink\" title=\"系统信息和管理\"></a>系统信息和管理</h3><ul>\n<li><p><strong>echo</strong>：打印消息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, World!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>whoami</strong>：显示当前用户</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">whoami</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>top</strong>：实时显示系统性能信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">top</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>ps</strong>：显示当前进程</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span>\n<span class=\"token function\">ps</span> aux  <span class=\"token comment\"># 显示所有进程</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>kill</strong>：终止进程</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> PID\n<span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> PID  <span class=\"token comment\"># 强制终止进程</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>chmod</strong>：更改文件权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token number\">755</span> filename\n<span class=\"token function\">chmod</span> +x filename  <span class=\"token comment\"># 使文件可执行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>chown</strong>：更改文件所有者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> user:group filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><ul>\n<li><p><strong>ping</strong>：测试网络连通性</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ping</span> example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>curl</strong>：发送网络请求</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>wget</strong>：下载文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> http://example.com/file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"管道和重定向\"><a href=\"#管道和重定向\" class=\"headerlink\" title=\"管道和重定向\"></a>管道和重定向</h3><ul>\n<li><p>**|**：管道，将一个命令的输出作为另一个命令的输入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"pattern\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>**&gt;**：重定向输出到文件（覆盖）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&gt;</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>**&gt;&gt;**：重定向输出到文件（追加）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&gt;&gt;</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>**&lt;**：重定向输入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&lt;</span> inputfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li><p>设置变量</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">MY_VAR</span><span class=\"token operator\">=</span><span class=\"token string\">\"Hello, World!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>使用变量</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$MY_VAR</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"Shell-脚本\"><a href=\"#Shell-脚本\" class=\"headerlink\" title=\"Shell 脚本\"></a>Shell 脚本</h2><p>Shell 脚本是一组 Shell 命令的集合，通常用于自动化任务。以下是一个简单的 Shell 脚本示例：</p>\n<h3 id=\"创建脚本文件\"><a href=\"#创建脚本文件\" class=\"headerlink\" title=\"创建脚本文件\"></a>创建脚本文件</h3><p>使用你喜欢的文本编辑器创建一个脚本文件，例如 <code>myscript.sh</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> myscript.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"编写脚本\"><a href=\"#编写脚本\" class=\"headerlink\" title=\"编写脚本\"></a>编写脚本</h3><p>在脚本文件中编写以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 打印消息</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is a simple shell script.\"</span>\n\n<span class=\"token comment\"># 设置变量</span>\n<span class=\"token assign-left variable\">NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"Alice\"</span>\n\n<span class=\"token comment\"># 使用变量</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, <span class=\"token variable\">$NAME</span>!\"</span>\n\n<span class=\"token comment\"># 条件语句</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$NAME</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Welcome, Alice!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"You are not Alice.\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 循环</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number: <span class=\"token variable\">$i</span>\"</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># 函数</span>\n<span class=\"token function-name function\">my_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is a function.\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 调用函数</span>\nmy_function<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h3><p>首先使脚本可执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x myscript.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后运行脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./myscript.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2022/05/24/linux-zhong-echo-xie-ru-wen-jian/",
            "url": "https://0xdadream.github.io/2022/05/24/linux-zhong-echo-xie-ru-wen-jian/",
            "title": "linux中echo写入文件",
            "date_published": "2022-05-23T20:11:00.000Z",
            "content_html": "<h1 id=\"linux中echo写入文件\"><a href=\"#linux中echo写入文件\" class=\"headerlink\" title=\"linux中echo写入文件\"></a>linux中echo写入文件</h1><h2 id=\"覆盖文件内容\"><a href=\"#覆盖文件内容\" class=\"headerlink\" title=\"覆盖文件内容\"></a>覆盖文件内容</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"test\"</span> <span class=\"token operator\">&gt;</span> test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"追加文件内容\"><a href=\"#追加文件内容\" class=\"headerlink\" title=\"追加文件内容\"></a>追加文件内容</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"test\"</span> <span class=\"token operator\">&gt;&gt;</span> test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>后面会自动加/n</p>\n",
            "tags": [
                "linux",
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2022/02/08/windows-zhong-netstat-ming-ling/",
            "url": "https://0xdadream.github.io/2022/02/08/windows-zhong-netstat-ming-ling/",
            "title": "windows中netstat命令",
            "date_published": "2022-02-07T18:11:00.000Z",
            "content_html": "<h1 id=\"windows中netstat命令\"><a href=\"#windows中netstat命令\" class=\"headerlink\" title=\"windows中netstat命令\"></a>windows中netstat命令</h1><h2 id=\"netstat-查看Linux中网络系统状态信息\"><a href=\"#netstat-查看Linux中网络系统状态信息\" class=\"headerlink\" title=\"netstat-查看Linux中网络系统状态信息\"></a>netstat-查看Linux中网络系统状态信息</h2><p><code>NETSTAT [-a] [-b] [-e] [-f] [-i] [-n] [-o] [-p proto] [-r] [-s] [-t] [-x] [-y] [interval]</code></p>\n<p>选项</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token parameter variable\">-a</span> 显示所有连接和监听端口\n<span class=\"token parameter variable\">-b</span> 显示创建每个连接所涉及的可执行文件或监听端口。在某些情况下，众所周知的可执行文件宿主多个独立的组件，在这些情况下创建连接所涉及的组件序列或显示监听端口。在这种情况下，可执行文件名称在底部的 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> 中，顶部是它调用的组件，以此类推，直到达到 TCP/IP\n<span class=\"token parameter variable\">-e</span> 显示以太网统计信息，这可以与 <span class=\"token parameter variable\">-s</span> 结合使用选项\n<span class=\"token parameter variable\">-f</span> 显示外国的完全限定域名<span class=\"token punctuation\">(</span>FQDN<span class=\"token punctuation\">)</span>地址\n<span class=\"token parameter variable\">-i</span> 显示 TCP 连接在其当前状态下花费的时间\n<span class=\"token parameter variable\">-n</span> 以数字形式显示地址和端口号\n<span class=\"token parameter variable\">-o</span> 显示与每个连接关联的拥有进程 ID\n<span class=\"token parameter variable\">-p</span> proto 显示由 proto 指定的协议的连接；原型可以是以下任何一种：TCP、UDP、TCPv6 或 UDPv6。如果与 <span class=\"token parameter variable\">-s</span> 一起使用显示每个协议统计信息的选项，proto 可以是以下任何一种：IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6\n<span class=\"token parameter variable\">-q</span> 显示所有连接、监听端口和绑定非侦听 TCP 端口。绑定的非侦听端口可能会也可能不会与活动连接相关联\n<span class=\"token parameter variable\">-r</span> 显示路由表\n<span class=\"token parameter variable\">-s</span> 显示每个协议的统计信息。默认情况下，统计信息是针对 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 显示；-p 选项可用于指定默认值的子集\n<span class=\"token parameter variable\">-t</span> 显示当前连接卸载状态\n<span class=\"token parameter variable\">-x</span> 显示 NetworkDirect 连接、侦听器和共享端点\n<span class=\"token parameter variable\">-y</span> 显示所有连接的 TCP 连接模板不能与其他选项结合使用\ninterval 重新显示选定的统计信息，暂停间隔秒每个显示器之间。按 CTRL+C 停止重新显示统计数据。如果省略，netstat 将打印当前配置信息一次<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>常用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-ano</span> <span class=\"token comment\"># 显示所有连接和监听端口和ID号</span>\n<span class=\"token function\">netstat</span> -ano<span class=\"token operator\">|</span><span class=\"token function\">grep</span> yourfind grep也可以是findstr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Proto\tLocal Address\tForeign Address\tState\tPID<br>协议\t 本地地址\t\t\t远程地址\t\t\t\t状态\t进程号</p>\n<p>State分为<br>LISTEN  ：监听状态<br>ESTABLISHED ：已建立联机<br>TIME_WAIT ：等待联机</p>\n",
            "tags": [
                "windows",
                "命令"
            ]
        }
    ]
}