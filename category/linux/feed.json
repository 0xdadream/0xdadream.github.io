{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦 • All posts by \"linux\" category",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2025/06/02/linux-chang-yong-ming-ling-xiang-xi-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/06/02/linux-chang-yong-ming-ling-xiang-xi-jiao-cheng/",
            "title": "Linux 常用命令详解教程",
            "date_published": "2025-06-02T14:25:00.000Z",
            "content_html": "<h1 id=\"Linux-常用命令详解教程\"><a href=\"#Linux-常用命令详解教程\" class=\"headerlink\" title=\"Linux 常用命令详解教程\"></a>Linux 常用命令详解教程</h1><p>本教程旨在提供一份全面的 Linux 常用命令列表，涵盖文件管理、系统信息获取、高级系统监控、文本处理、用户与权限管理、网络配置与诊断以及端口和防火墙管理等多个方面。每个命令都将包含其用途、常用语法、重要选项及示例，力求内容完整且实用。</p>\n<h2 id=\"一、文件和目录管理-File-and-Directory-Management\"><a href=\"#一、文件和目录管理-File-and-Directory-Management\" class=\"headerlink\" title=\"一、文件和目录管理 (File and Directory Management)\"></a>一、文件和目录管理 (File and Directory Management)</h2><p>文件和目录管理是 Linux 系统操作的基础。以下命令能帮助用户有效地在文件系统中进行导航、创建、删除、复制、移动和查找文件及目录。</p>\n<h3 id=\"1-1-基本导航与列表-Basic-Navigation-and-Listing\"><a href=\"#1-1-基本导航与列表-Basic-Navigation-and-Listing\" class=\"headerlink\" title=\"1.1 基本导航与列表 (Basic Navigation and Listing)\"></a>1.1 基本导航与列表 (Basic Navigation and Listing)</h3><ul>\n<li><strong><code>ls</code></strong> (列出目录内容 List directory contents)<ul>\n<li><strong>用途:</strong> 显示目录中的文件和子目录。 </li>\n<li><strong>语法:</strong> <code>ls [选项][目录名]</code> </li>\n<li>常用选项:<ul>\n<li><code>-l</code>: 以长格式显示详细信息，包括权限、所有者、大小、修改日期等。 </li>\n<li><code>-a</code>: 显示所有文件，包括隐藏文件（以 <code>.</code> 开头的文件）。 </li>\n<li><code>-h</code>: 以人类可读的格式显示文件大小 (例如 1K, 234M, 2G)。 </li>\n<li><code>-A</code>: 显示除 <code>.</code> 和 <code>..</code> 之外的所有文件，包括隐藏文件。 </li>\n<li><code>-S</code>: 按文件大小降序排序。 </li>\n<li><code>-t</code>: 按修改时间排序，最新修改的在前。 </li>\n<li><code>-R</code>: 递归列出所有子目录的内容。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>ls -l /home/user</code>: 以长格式列出 <code>/home/user</code> 目录的内容。</li>\n<li><code>ls -ah</code>: 以人类可读格式显示当前目录所有文件（包括隐藏文件）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>cd</code></strong> (更改目录 Change directory)<ul>\n<li><strong>用途:</strong> 切换当前工作目录。 </li>\n<li><strong>语法:</strong> <code>cd [目录路径]</code> </li>\n<li>特殊用法:<ul>\n<li><code>cd..</code>: 切换到上一级目录。 </li>\n<li><code>cd ~</code> 或 <code>cd</code>: 切换到当前用户的主目录。 </li>\n<li><code>cd -</code>: 切换到上一个工作目录。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>cd /var/log</code>: 切换到 <code>/var/log</code> 目录。</li>\n<li><code>cd../documents</code>: 从当前目录切换到上一级的 <code>documents</code> 子目录。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>pwd</code></strong> (打印工作目录 Print working directory)<ul>\n<li><strong>用途:</strong> 显示当前所在的完整目录路径。 </li>\n<li><strong>语法:</strong> <code>pwd</code> </li>\n<li><strong>示例:</strong> <code>pwd</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-文件与目录操作-File-and-Directory-Operations\"><a href=\"#1-2-文件与目录操作-File-and-Directory-Operations\" class=\"headerlink\" title=\"1.2 文件与目录操作 (File and Directory Operations)\"></a>1.2 文件与目录操作 (File and Directory Operations)</h3><ul>\n<li><strong><code>mkdir</code></strong> (创建目录 Make directory)<ul>\n<li><strong>用途:</strong> 创建一个新的目录。 </li>\n<li><strong>语法:</strong> <code>mkdir [选项] 目录名</code> </li>\n<li>常用选项:<ul>\n<li><code>-p</code>: 递归创建目录，如果父目录不存在则一并创建。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>mkdir new_project</code>: 在当前目录下创建名为 <code>new_project</code> 的目录。</li>\n<li><code>mkdir -p project/docs/images</code>: 递归创建 <code>project</code> 目录及其子目录 <code>docs</code> 和 <code>images</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>rmdir</code></strong> (删除空目录 Remove empty directory)<ul>\n<li><strong>用途:</strong> 删除一个空的目录。 </li>\n<li><strong>语法:</strong> <code>rmdir [选项] 目录名</code> </li>\n<li>常用选项:<ul>\n<li><code>-p</code>: 递归删除目录，当子目录被删除后其父目录变为空时，也一同被删除。 </li>\n<li><code>--ignore-fail-on-non-empty</code>: 删除非空目录时忽略错误（通常不推荐，应使用 <code>rm -r</code>）。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>rmdir old_folder</code> (如果 <code>old_folder</code> 为空，则删除它)。</li>\n</ul>\n</li>\n<li><strong><code>cp</code></strong> (复制文件和目录 Copy files and directories)<ul>\n<li><strong>用途:</strong> 复制文件或目录。 </li>\n<li><strong>语法:</strong> <code>cp [选项] 源文件/目录 目标文件/目录</code> </li>\n<li>常用选项:<ul>\n<li><code>-r</code> 或 <code>-R</code>: 递归复制目录及其内容。 </li>\n<li><code>-i</code>: 覆盖前提示。 </li>\n<li><code>-v</code>: 显示详细的复制过程。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>cp file1.txt file1_backup.txt</code>: 将 <code>file1.txt</code> 复制为 <code>file1_backup.txt</code>。</li>\n<li><code>cp -r project_a/ /backup/project_a_backup</code>: 将 <code>project_a</code> 目录及其所有内容复制到 <code>/backup/project_a_backup</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>mv</code></strong> (移动或重命名文件和目录 Move or rename files and directories)<ul>\n<li><strong>用途:</strong> 移动文件或目录，或者在同一目录下对文件或目录进行重命名。 </li>\n<li><strong>语法:</strong> <code>mv [选项] 源文件/目录 目标文件/目录</code> </li>\n<li>常用选项:<ul>\n<li><code>-i</code>: 覆盖前提示。 </li>\n<li><code>-n</code>: 不覆盖已存在的目标文件。 </li>\n<li><code>-u</code>: 仅当源文件比目标文件新，或目标文件不存在时，才执行移动。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>mv report.docx documents/</code>: 将 <code>report.docx</code> 移动到 <code>documents</code> 目录。</li>\n<li><code>mv old_name.txt new_name.txt</code>: 将 <code>old_name.txt</code> 重命名为 <code>new_name.txt</code>。</li>\n<li><code>mv temp_folder /opt/archive/</code>: 将 <code>temp_folder</code> 目录移动到 <code>/opt/archive/</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>rm</code></strong> (删除文件或目录 Remove files or directories)<ul>\n<li><strong>用途:</strong> 删除文件或目录。这是一个非常强大的命令，使用时需格外小心。 </li>\n<li><strong>语法:</strong> <code>rm [选项] 文件/目录...</code> </li>\n<li>常用选项:<ul>\n<li><code>-r</code> 或 <code>-R</code>: 递归删除目录及其所有内容。 </li>\n<li><code>-f</code>: 强制删除，不进行提示，忽略不存在的文件和参数。 </li>\n<li><code>-i</code>: 删除前逐一提示确认。 </li>\n<li><code>-v</code>: 显示详细的删除过程。</li>\n</ul>\n</li>\n<li><strong>警告:</strong> <code>rm -rf</code> 命令会无提示地递归删除指定目录下的所有内容，一旦执行无法轻易恢复，务必谨慎使用。 </li>\n<li>示例:<ul>\n<li><code>rm unwanted_file.txt</code>: 删除 <code>unwanted_file.txt</code> 文件。</li>\n<li><code>rm -rf old_project/</code>: 强制递归删除 <code>old_project</code> 目录及其所有内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>touch</code></strong> (创建空文件或更新文件时间戳 Create empty file or update file timestamps)<ul>\n<li><strong>用途:</strong> 创建一个空文件，或者更新已有文件的时间戳（访问时间和修改时间）。 </li>\n<li><strong>语法:</strong> <code>touch [选项] 文件名...</code> </li>\n<li>示例:<ul>\n<li><code>touch newfile.log</code>: 创建一个名为 <code>newfile.log</code> 的空文件。</li>\n<li><code>touch existing_file.txt</code>: 更新 <code>existing_file.txt</code> 的时间戳。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>ln</code></strong> (创建链接 Create links)<ul>\n<li><strong>用途:</strong> 在文件之间创建链接，分为硬链接和符号链接（软链接）。 </li>\n<li><strong>语法:</strong> <code>ln [选项] 源文件 链接名</code> </li>\n<li>常用选项:<ul>\n<li><code>-s</code>: 创建符号链接（软链接）。如果不使用此选项，则创建硬链接。 </li>\n<li><code>-v</code>: 显示详细过程。</li>\n</ul>\n</li>\n<li>硬链接与符号链接的区别:<ul>\n<li>硬链接：与原文件共享相同的inode号和数据块，删除原文件不影响硬链接的访问，除非所有硬链接和原文件都被删除。不能对目录创建硬链接，不能跨文件系统创建硬链接。 </li>\n<li>符号链接：一个指向原文件路径的特殊文件，类似于快捷方式。删除原文件会导致符号链接失效。可以对目录创建符号链接，也可以跨文件系统创建。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>ln target.txt hard_link.txt</code>: 为 <code>target.txt</code> 创建一个名为 <code>hard_link.txt</code> 的硬链接。</li>\n<li><code>ln -s /opt/app/config.conf /etc/app_config.conf</code>: 为 <code>/opt/app/config.conf</code> 创建一个名为 <code>/etc/app_config.conf</code> 的符号链接。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-文件查找与类型判断-File-Searching-and-Type-Identification\"><a href=\"#1-3-文件查找与类型判断-File-Searching-and-Type-Identification\" class=\"headerlink\" title=\"1.3 文件查找与类型判断 (File Searching and Type Identification)\"></a>1.3 文件查找与类型判断 (File Searching and Type Identification)</h3><ul>\n<li><strong><code>find</code></strong> (在目录层次结构中查找文件 Search for files in a directory hierarchy)<ul>\n<li><strong>用途:</strong> 根据指定的条件在目录树中搜索文件和目录。 </li>\n<li><strong>语法:</strong> <code>find [路径...][表达式选项]</code> </li>\n<li>常用表达式选项:<ul>\n<li><code>-name \"模式\"</code>: 按文件名模式查找 (支持通配符, 如 <code>*.txt</code>)。 </li>\n<li><code>-type 类型</code>: 按文件类型查找 (如 <code>f</code> 普通文件, <code>d</code> 目录, <code>l</code> 符号链接)。 </li>\n<li><code>-user 用户名</code>: 按文件所有者查找。</li>\n<li><code>-group 组名</code>: 按文件所属组查找。</li>\n<li><code>-size [+|-]大小[cwbkMG]</code>: 按文件大小查找 (如 <code>+10M</code> 大于10MB, <code>-1k</code> 小于1KB)。</li>\n<li><code>-mtime [-|+]天数</code>: 按文件修改时间查找 (如 <code>-7</code> 7天内修改, <code>+30</code> 30天前修改)。</li>\n<li><code>-exec 命令 {} \\;</code>: 对找到的每个文件执行指定的命令。</li>\n<li><code>-maxdepth 层数</code>: 限制搜索深度。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>find /home/user -name \"*.log\" -mtime -7</code>: 在 <code>/home/user</code> 目录及其子目录下查找最近7天内修改过的所有 <code>.log</code> 文件。</li>\n<li><code>find. -type f -size +100M -exec rm {} \\;</code>: 查找当前目录下大于100MB的普通文件并删除它们（删除前会提示）。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>file</code></strong> (判断文件类型 Determine file type)<ul>\n<li><strong>用途:</strong> 识别给定文件的类型。 </li>\n<li><strong>语法:</strong> <code>file [选项] 文件名...</code> </li>\n<li>常用选项:<ul>\n<li><code>-b</code> 或 <code>--brief</code>: 简要模式，不输出文件名。 </li>\n<li><code>-i</code>: 输出MIME类型字符串。 </li>\n<li><code>-z</code>: 尝试查看压缩文件内部。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>file document.pdf</code>: 显示 <code>document.pdf</code> 的文件类型。</li>\n<li><code>file -bi image.jpg</code>: 以MIME类型格式简要显示 <code>image.jpg</code> 的类型。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、系统信息与管理-System-Information-and-Management\"><a href=\"#二、系统信息与管理-System-Information-and-Management\" class=\"headerlink\" title=\"二、系统信息与管理 (System Information and Management)\"></a>二、系统信息与管理 (System Information and Management)</h2><p>了解系统的运行状态、硬件信息和基本配置是系统管理的重要组成部分。</p>\n<h3 id=\"2-1-系统基本信息-Basic-System-Information\"><a href=\"#2-1-系统基本信息-Basic-System-Information\" class=\"headerlink\" title=\"2.1 系统基本信息 (Basic System Information)\"></a>2.1 系统基本信息 (Basic System Information)</h3><ul>\n<li><strong><code>uname</code></strong> (打印系统信息 Print system information)<ul>\n<li><strong>用途:</strong> 显示当前系统的内核名称、版本、主机名等信息。 </li>\n<li><strong>语法:</strong> <code>uname [选项]</code> </li>\n<li>常用选项:<ul>\n<li><code>-a</code>: 显示所有可用信息。 </li>\n<li><code>-r</code>: 显示内核发行版本。 </li>\n<li><code>-s</code>: 显示内核名称。</li>\n<li><code>-n</code>: 显示网络节点主机名。</li>\n<li><code>-m</code>: 显示机器硬件名称。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>uname -a</code></li>\n</ul>\n</li>\n<li><strong><code>hostname</code></strong> (显示或设置系统的主机名 Show or set the system’s host name)<ul>\n<li><strong>用途:</strong> 查看或临时设置系统的主机名。 </li>\n<li><strong>语法:</strong> <code>hostname [选项][新主机名]</code> </li>\n<li>常用选项:<ul>\n<li><code>-s</code> 或 <code>--short</code>: 显示短主机名 (第一个点之前的部分)。 </li>\n<li><code>-f</code> 或 <code>--fqdn</code> 或 <code>--long</code>: 显示完全限定域名 (FQDN)。 </li>\n<li><code>-i</code> 或 <code>--ip-address</code>: 显示主机的IP地址 (如果可解析)。 </li>\n<li><code>-I</code> 或 <code>--all-ip-addresses</code>: 显示主机所有网络接口的IP地址。 </li>\n<li><code>-d</code> 或 <code>--domain</code>: 显示DNS域名。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>hostname</code>: 显示当前主机名。</li>\n<li><code>sudo hostname new-server-name</code>: 临时将主机名设置为 <code>new-server-name</code> (永久更改需修改配置文件，如 <code>/etc/hostname</code> )。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>date</code></strong> (打印或设置系统日期和时间 Print or set the system date and time)<ul>\n<li><strong>用途:</strong> 显示或设置系统的当前日期和时间。 </li>\n<li><strong>语法:</strong> <code>date [选项][+格式]YY][.ss]]</code></li>\n<li>常用选项与格式:<ul>\n<li><code>+%Y-%m-%d %H:%M:%S</code>: 以 <code>年-月-日 时:分:秒</code> 格式显示。</li>\n<li><code>--set=\"字符串\"</code>: 设置日期和时间。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>date</code>: 显示当前日期和时间。</li>\n<li><code>date '+%A, %B %d, %Y'</code>: 以 “星期几, 月份 日期, 年份” 格式显示。</li>\n<li><code>sudo date --set=\"2024-07-30 10:30:00\"</code>: 将日期和时间设置为2024年7月30日10点30分。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>uptime</code></strong> (告诉系统已运行多长时间 Tell how long the system has been running)<ul>\n<li><strong>用途:</strong> 显示系统自上次启动以来运行了多长时间、当前用户数量以及系统平均负载。 </li>\n<li><strong>语法:</strong> <code>uptime [选项]</code></li>\n<li>常用选项:<ul>\n<li><code>-p</code>: 以易读格式显示运行时间。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>uptime</code></li>\n</ul>\n</li>\n<li><strong><code>whoami</code></strong> (打印有效用户ID Print effective user ID)<ul>\n<li><strong>用途:</strong> 显示当前正在操作的用户名。 </li>\n<li><strong>语法:</strong> <code>whoami</code> </li>\n<li><strong>示例:</strong> <code>whoami</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-磁盘与内存使用-Disk-and-Memory-Usage\"><a href=\"#2-2-磁盘与内存使用-Disk-and-Memory-Usage\" class=\"headerlink\" title=\"2.2 磁盘与内存使用 (Disk and Memory Usage)\"></a>2.2 磁盘与内存使用 (Disk and Memory Usage)</h3><ul>\n<li><strong><code>df</code></strong> (报告文件系统磁盘空间使用情况 Report file system disk space usage)<ul>\n<li><strong>用途:</strong> 显示文件系统的总空间、已用空间、可用空间和挂载点。 </li>\n<li><strong>语法:</strong> <code>df [选项][文件/目录]</code> </li>\n<li>常用选项:<ul>\n<li><code>-h</code>: 以人类可读的格式显示 (例如 GB, MB)。 </li>\n<li><code>-T</code>: 显示文件系统类型。</li>\n<li><code>-i</code>: 显示inode信息而非块使用情况。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>df -h</code></li>\n</ul>\n</li>\n<li><strong><code>du</code></strong> (估算文件空间使用情况 Estimate file space usage)<ul>\n<li><strong>用途:</strong> 显示指定文件或目录占用的磁盘空间大小。 </li>\n<li><strong>语法:</strong> <code>du [选项][文件/目录]</code> </li>\n<li>常用选项:<ul>\n<li><code>-h</code>: 以人类可读的格式显示。 </li>\n<li><code>-s</code>: 仅显示总计大小。 </li>\n<li><code>-c</code>: 显示总计大小，并在最后显示所有参数的总和。</li>\n<li><code>--max-depth=N</code>: 只显示指定深度的目录大小。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>du -sh /var/log</code>: 显示 <code>/var/log</code> 目录的总大小。</li>\n<li><code>du -h --max-depth=1 /home</code>: 显示 <code>/home</code> 目录下第一级子目录和文件的大小。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>free</code></strong> (显示系统中的可用和已用物理内存和交换内存量 Display amount of free and used memory in the system)<ul>\n<li><strong>用途:</strong> 查看系统内存和交换空间的使用情况。 </li>\n<li><strong>语法:</strong> <code>free [选项]</code> </li>\n<li>常用选项:<ul>\n<li><code>-h</code>: 以人类可读的格式显示。 </li>\n<li><code>-m</code>: 以MB为单位显示。 </li>\n<li><code>-g</code>: 以GB为单位显示。</li>\n<li><code>-s N</code>: 每N秒刷新一次。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>free -h</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-系统控制-System-Control\"><a href=\"#2-3-系统控制-System-Control\" class=\"headerlink\" title=\"2.3 系统控制 (System Control)\"></a>2.3 系统控制 (System Control)</h3><ul>\n<li><strong><code>shutdown</code></strong> (关闭系统 Schedule a system shutdown)<ul>\n<li><strong>用途:</strong> 安全地关闭或重启Linux系统，可以指定延迟时间或特定时间，并向登录用户发送警告信息。 </li>\n<li><strong>语法:</strong> <code>sudo shutdown [选项] 时间 [警告信息]</code> </li>\n<li>常用选项:<ul>\n<li><code>-h</code>: 关闭系统后停止电源 (halt)。 </li>\n<li><code>-P</code>: 关闭系统后切断电源 (power off)，通常是 <code>-h</code> 的默认行为。 </li>\n<li><code>-r</code>: 重启系统。 </li>\n<li><code>-c</code>: 取消先前安排的关机。 </li>\n<li><code>-k</code>: 发送警告信息，但不实际关机。</li>\n</ul>\n</li>\n<li>时间参数:<ul>\n<li><code>now</code>: 立刻执行。 </li>\n<li><code>+分钟数</code>: 指定多少分钟后执行 (例如 <code>+10</code>)。 </li>\n<li><code>hh:mm</code>: 指定绝对时间执行 (例如 <code>23:00</code>)。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>sudo shutdown -h now</code>: 立刻关闭系统。</li>\n<li><code>sudo shutdown -r +15 \"系统将在15分钟后重启以进行维护\"</code>: 15分钟后重启系统并发送消息。</li>\n<li><code>sudo shutdown -c</code>: 取消已计划的关机或重启。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>reboot</code></strong> (重启系统 Reboot the system)<ul>\n<li><strong>用途:</strong> 重启Linux系统。通常是 <code>shutdown -r now</code> 的一个快捷方式。 </li>\n<li><strong>语法:</strong> <code>sudo reboot [选项]</code> </li>\n<li>常用选项:<ul>\n<li><code>-f</code>: 强制重启，不调用 <code>shutdown</code>。不推荐常规使用。 </li>\n<li><code>-p</code>: 关闭电源（如果系统支持）。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>sudo reboot</code></li>\n</ul>\n</li>\n<li><strong><code>history</code></strong> (显示或操作历史列表 Display or manipulate the history list)<ul>\n<li><strong>用途:</strong> 显示用户在当前shell会话中执行过的命令历史。 </li>\n<li><strong>语法:</strong> <code>history [选项][数量]</code></li>\n<li>常用选项:<ul>\n<li><code>-c</code>: 清空历史列表。 </li>\n<li><code>-d 偏移量</code>: 删除指定偏移量的历史条目。</li>\n</ul>\n</li>\n<li>特殊用法:<ul>\n<li><code>!!</code>: 执行上一条命令。 </li>\n<li><code>!编号</code>: 执行历史列表中指定编号的命令。 </li>\n<li><code>!字符串</code>: 执行最近一条以指定字符串开头的命令。 </li>\n<li><code>Ctrl+R</code>: 反向搜索历史命令。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>history</code>: 显示所有命令历史。</li>\n<li><code>history 20</code>: 显示最近20条命令历史。</li>\n<li><code>!ls</code>: 执行最近一条以 <code>ls</code> 开头的命令。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>man</code></strong> (系统参考手册的分页程序 an interface to the on-line reference manuals)<ul>\n<li><strong>用途:</strong> 显示命令、函数或配置文件的帮助手册页。 </li>\n<li><strong>语法:</strong> <code>man [选项][章节] 命令名/主题</code></li>\n<li>常用选项:<ul>\n<li><code>-k 关键字</code>: 根据关键字搜索手册页标题和描述 (等同于 <code>apropos</code>)。</li>\n</ul>\n</li>\n<li><strong>导航:</strong> 在 <code>man</code> 页面中，通常使用与 <code>less</code> 相同的导航键（如空格翻页，<code>q</code> 退出，<code>/</code> 搜索）。 </li>\n<li>示例:<ul>\n<li><code>man ls</code>: 显示 <code>ls</code> 命令的手册页。</li>\n<li><code>man 5 passwd</code>: 显示 <code>/etc/passwd</code> 文件格式的手册页 (第5章节通常是文件格式)。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>clear</code></strong> (清屏 Clear the terminal screen)<ul>\n<li><strong>用途:</strong> 清除终端屏幕上的所有内容，将提示符移到屏幕顶部。 </li>\n<li><strong>语法:</strong> <code>clear</code></li>\n<li><strong>示例:</strong> <code>clear</code> (快捷键通常是 <code>Ctrl+L</code></li>\n</ul>\n</li>\n<li><strong><code>alias</code></strong> (定义或显示别名 Define or display aliases)<ul>\n<li><strong>用途:</strong> 为长命令或常用命令序列创建简短的别名。 </li>\n<li>语法:<ul>\n<li><code>alias</code>: 显示所有已定义的别名。 </li>\n<li><code>alias 名称='命令'</code> : 定义一个别名。 </li>\n<li><code>unalias 名称</code>: 删除一个别名。</li>\n</ul>\n</li>\n<li><strong>持久化:</strong> 临时定义的别名只在当前shell会话有效。要使其永久生效，需将其添加到shell的配置文件中，如 <code>~/.bashrc</code> 或 <code>~/.bash_aliases</code>。 </li>\n<li>示例:<ul>\n<li><code>alias ll='ls -alF'</code>: 定义 <code>ll</code> 作为 <code>ls -alF</code> 的别名。</li>\n<li><code>alias update='sudo apt update &amp;&amp; sudo apt upgrade -y'</code>: 定义 <code>update</code> 用于更新系统。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"三、高级系统监控-Advanced-System-Monitoring\"><a href=\"#三、高级系统监控-Advanced-System-Monitoring\" class=\"headerlink\" title=\"三、高级系统监控 (Advanced System Monitoring)\"></a>三、高级系统监控 (Advanced System Monitoring)</h2><p>除了基本的系统信息查看，Linux还提供了一系列高级工具，用于深入监控系统性能的各个方面，如CPU、内存、I/O和网络活动。</p>\n<h3 id=\"3-1-进程管理与监控-Process-Management-and-Monitoring\"><a href=\"#3-1-进程管理与监控-Process-Management-and-Monitoring\" class=\"headerlink\" title=\"3.1 进程管理与监控 (Process Management and Monitoring)\"></a>3.1 进程管理与监控 (Process Management and Monitoring)</h3><ul>\n<li><strong><code>ps</code></strong> (报告当前进程的快照 Report a snapshot of the current processes)<ul>\n<li><strong>用途:</strong> 显示当前系统中正在运行的进程信息。 </li>\n<li><strong>语法:</strong> <code>ps [选项]</code> </li>\n<li>常用选项:<ul>\n<li><code>aux</code>: 显示所有用户的进程（System V风格，无 <code>-</code>）。 </li>\n<li><code>-ef</code>: 显示所有进程，以完整格式（BSD风格，有 <code>-</code>）。 </li>\n<li><code>-u 用户名</code>: 显示指定用户的进程。 </li>\n<li><code>--forest</code>: 以ASCII字符显示进程树。 </li>\n<li><code>--sort=关键字</code>: 按指定关键字排序 (例如 <code>%cpu</code>, <code>%mem</code>)。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>ps aux</code>: 显示系统中所有正在运行的进程的详细信息。</li>\n<li><code>ps -ef | grep sshd</code>: 查找名为 <code>sshd</code> 的进程。 </li>\n<li><code>ps aux --sort=-%mem | head -n 5</code>: 显示内存使用率最高的5个进程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>top</code></strong> (显示Linux进程 Display Linux processes)<ul>\n<li><strong>用途:</strong> 实时动态地显示系统中各个进程的资源占用状况，如CPU使用率、内存使用率等，默认按CPU使用率排序。 </li>\n<li><strong>语法:</strong> <code>top [选项]</code> </li>\n<li>交互命令 (在 <code>top</code> 运行时):<ul>\n<li><code>P</code>: 按CPU使用百分比排序。</li>\n<li><code>M</code>: 按内存使用百分比排序。</li>\n<li><code>N</code>: 按进程ID (PID) 排序。</li>\n<li><code>k</code>: 杀死一个进程 (需要输入PID和信号，默认为15 SIGTERM)。</li>\n<li><code>r</code>: 重新设置一个进程的nice值 (优先级)。</li>\n<li><code>h</code> 或 <code>?</code>: 显示帮助。 </li>\n<li><code>q</code>: 退出 <code>top</code>。 </li>\n<li><code>d</code>: 改变刷新延迟时间。</li>\n</ul>\n</li>\n<li>常用选项:<ul>\n<li><code>-d 秒数</code>: 设置屏幕刷新间隔。 </li>\n<li><code>-n 次数</code>: 刷新指定次数后退出。 </li>\n<li><code>-b</code>: 批处理模式，适合将输出重定向到文件。 </li>\n<li><code>-o +列名</code>: 按指定列排序 (如 <code>+%MEM</code> 按内存排序)。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>top</code> (启动实时监控)</li>\n</ul>\n</li>\n<li><strong><code>htop</code></strong> (交互式进程查看器 Interactive process viewer)<ul>\n<li><strong>用途:</strong> <code>top</code> 的增强版，提供更友好的交互界面、颜色显示、鼠标支持、水平/垂直滚动以及完整的命令行显示。 </li>\n<li><strong>语法:</strong> <code>htop [选项]</code> </li>\n<li>常用选项:<ul>\n<li><code>-d 延迟</code>: 设置更新之间的延迟（单位为十分之一秒，例如 <code>-d 10</code> 表示1秒）。 </li>\n<li><code>-u 用户名</code>: 只显示指定用户的进程。 </li>\n<li><code>-s 列名</code>: 按指定列排序 (例如 <code>-s PERCENT_MEM</code>)。 </li>\n<li><code>-t</code>: 以树状视图显示进程层级关系。</li>\n</ul>\n</li>\n<li>交互命令 (在 <code>htop</code> 运行时):<ul>\n<li><code>F4</code> (或 <code>\\</code>): 过滤进程。 </li>\n<li><code>F5</code> (或 <code>t</code>): 切换树状视图。 </li>\n<li><code>F6</code> (或 <code>&lt;</code> <code>&gt;</code>): 选择排序字段。 </li>\n<li><code>F9</code> (或 <code>k</code>): 杀死选中的进程。 </li>\n<li><code>F10</code> (或 <code>q</code>): 退出 <code>htop</code>。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>htop</code></li>\n</ul>\n</li>\n<li><strong><code>kill</code></strong> (向进程发送信号 Send a signal to a process)<ul>\n<li><strong>用途:</strong> 向指定的进程发送信号，常用于终止进程。 </li>\n<li><strong>语法:</strong> <code>kill [选项] PID...</code> </li>\n<li>常用信号:<ul>\n<li><code>SIGTERM</code> (15): 默认信号，请求进程正常终止。</li>\n<li><code>SIGKILL</code> (9): 强制终止进程，进程无法捕获此信号。 </li>\n<li><code>SIGHUP</code> (1): 挂起进程，常用于让守护进程重新读取配置文件。 </li>\n<li><code>SIGINT</code> (2): 中断进程，等同于 <code>Ctrl+C</code>。</li>\n</ul>\n</li>\n<li>常用选项:<ul>\n<li><code>-l</code>: 列出所有可用的信号名称。 </li>\n<li><code>-信号编号或名称</code>: 指定要发送的信号 (例如 <code>-9</code> 或 <code>-SIGKILL</code>)。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>kill 12345</code>: 向PID为12345的进程发送 <code>SIGTERM</code> 信号。</li>\n<li><code>kill -9 54321</code>: 强制杀死PID为54321的进程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>pkill</code></strong> (根据名称和其他属性查找或发信号给进程 Signal processes based on name and other attributes)<ul>\n<li><strong>用途:</strong> 根据进程名或其他属性向进程发送信号，通常用于终止进程。 </li>\n<li><strong>语法:</strong> <code>pkill [选项] 模式</code></li>\n<li>常用选项:<ul>\n<li><code>-信号</code>: 指定要发送的信号 (例如 <code>-9</code>)。</li>\n<li><code>-u 用户名</code>: 匹配指定用户的进程。</li>\n<li><code>-f</code>: 匹配完整命令行参数。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>pkill firefox</code>: 终止所有名为 <code>firefox</code> 的进程。 </li>\n<li><code>pkill -9 -f \"stale_script.py\"</code>: 强制杀死完整命令行包含 “stale_script.py” 的进程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>jobs</code></strong> (列出活动作业 List active jobs)<ul>\n<li><strong>用途:</strong> 显示在当前shell会话中放到后台运行或被挂起的作业。 </li>\n<li><strong>语法:</strong> <code>jobs [选项]</code> </li>\n<li>常用选项:<ul>\n<li><code>-l</code>: 同时显示作业的进程ID (PID)。 </li>\n<li><code>-p</code>: 只显示作业的进程ID。 </li>\n<li><code>-r</code>: 只显示正在运行的作业。 </li>\n<li><code>-s</code>: 只显示已停止（挂起）的作业。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>jobs -l</code></li>\n</ul>\n</li>\n<li><strong><code>bg</code></strong> (将作业放到后台运行 Resume suspended jobs in the background)<ul>\n<li><strong>用途:</strong> 将一个已挂起（stopped）的作业转到后台继续运行。 </li>\n<li><strong>语法:</strong> <code>bg</code> 51 (作业ID可通过 <code>jobs</code> 命令查看，通常以 <code>%</code> 开头，如 <code>%1</code>)</li>\n<li><strong>示例:</strong> <code>bg %1</code> (将作业号为1的挂起作业转到后台运行)</li>\n</ul>\n</li>\n<li><strong><code>fg</code></strong> (将作业放到前台运行 Resume jobs in the foreground)<ul>\n<li><strong>用途:</strong> 将一个在后台运行或已挂起的作业转到前台继续运行。 </li>\n<li><strong>语法:</strong> <code>fg</code> </li>\n<li><strong>示例:</strong> <code>fg %2</code> (将作业号为2的作业转到前台运行)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-系统性能分析-System-Performance-Analysis\"><a href=\"#3-2-系统性能分析-System-Performance-Analysis\" class=\"headerlink\" title=\"3.2 系统性能分析 (System Performance Analysis)\"></a>3.2 系统性能分析 (System Performance Analysis)</h3><ul>\n<li><p><strong><code>vmstat</code></strong> (报告虚拟内存统计信息 Report virtual memory statistics)</p>\n<ul>\n<li><p><strong>用途:</strong> 显示关于进程、内存、分页、块I/O、陷阱和CPU活动的即时信息。 </p>\n</li>\n<li><p><strong>语法:</strong> <code>vmstat [选项][延迟 [次数]]</code> </p>\n</li>\n<li><p>常用选项:</p>\n<ul>\n<li><code>-a</code>: 显示活动/非活动内存。 </li>\n<li><code>-s</code>: 显示各种事件计数器和内存统计信息的表格。 </li>\n<li><code>-d</code>: 显示磁盘统计信息。 </li>\n<li><code>-p 分区</code>: 显示指定分区的详细统计信息。 </li>\n<li><code>-t</code>: 在输出中添加时间戳。 </li>\n<li><code>延迟 次数</code>: 每隔“延迟”秒输出一次报告，共输出“次数”次。</li>\n</ul>\n</li>\n<li><p>输出字段解释:</p>\n<ul>\n<li><code>procs</code>: <code>r</code> (等待运行的进程数), <code>b</code> (不可中断睡眠的进程数)。</li>\n<li><code>memory</code>: <code>swpd</code> (使用的虚拟内存), <code>free</code> (空闲物理内存), <code>buff</code> (用作缓冲的内存), <code>cache</code> (用作缓存的内存)。</li>\n<li><code>swap</code>: <code>si</code> (从磁盘换入的内存量/秒), <code>so</code> (换出到磁盘的内存量/秒)。</li>\n<li><code>io</code>: <code>bi</code> (从块设备接收到的块数/秒), <code>bo</code> (发送到块设备的块数/秒)。</li>\n<li><code>system</code>: <code>in</code> (每秒中断次数), <code>cs</code> (每秒上下文切换次数)。</li>\n<li><code>cpu</code>: <code>us</code> (用户CPU时间百分比), <code>sy</code> (系统CPU时间百分比), <code>id</code> (空闲CPU时间百分比), <code>wa</code> (等待I/O的CPU时间百分比), <code>st</code> (从虚拟机窃取的CPU时间百分比)。</li>\n</ul>\n</li>\n<li><p>示例:</p>\n<ul>\n<li><code>vmstat 2 5</code>: 每2秒显示一次系统状态，共显示5次。</li>\n<li><code>vmstat -s</code>: 显示内存和事件计数器摘要。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>iostat</code></strong> (报告CPU统计信息和输入/输出统计信息 Report Central Processing Unit (CPU) statistics and input/output statistics for devices and partitions)</p>\n<ul>\n<li><p><strong>用途:</strong> 监控系统输入/输出设备和CPU的活动情况，用于识别磁盘或CPU瓶颈。 </p>\n</li>\n<li><p><strong>语法:</strong> <code>iostat [选项][间隔 [次数]]</code> </p>\n</li>\n<li><p>常用选项:</p>\n<ul>\n<li><code>-c</code>: 仅显示CPU利用率报告。 </li>\n<li><code>-d</code>: 仅显示设备利用率报告。 </li>\n<li><code>-x</code>: 显示扩展的I/O统计信息。 </li>\n<li><code>-k</code>: 以KB为单位显示统计信息。 </li>\n<li><code>-m</code>: 以MB为单位显示统计信息。 </li>\n<li><code>-t</code>: 打印每个报告的时间。 </li>\n<li><code>-p [设备 | ALL]</code>: 显示块设备及其所有分区的统计信息。 </li>\n<li><code>间隔 次数</code>: 每隔“间隔”秒输出一次报告，共输出“次数”次。</li>\n</ul>\n</li>\n<li><p>输出字段解释 (部分):</p>\n<ul>\n<li><code>%user</code>: 用户级别CPU利用率。</li>\n<li><code>%system</code>: 系统级别CPU利用率。</li>\n<li><code>%iowait</code>: CPU等待I/O操作完成的时间百分比。高 <code>%iowait</code> 通常表示I/O瓶颈。 </li>\n<li><code>%idle</code>: CPU空闲时间百分比。</li>\n<li><code>tps</code>: 每秒传输次数。</li>\n<li><code>Blk_read/s</code> (或 <code>kB_read/s</code>, <code>MB_read/s</code>): 每秒读取的块/KB/MB数。</li>\n<li><code>Blk_wrtn/s</code> (或 <code>kB_wrtn/s</code>, <code>MB_wrtn/s</code>): 每秒写入的块/KB/MB数。</li>\n<li><code>%util</code>: 存储设备繁忙的时间百分比。</li>\n</ul>\n</li>\n<li><p>示例:</p>\n<ul>\n<li><code>iostat -dx 2 5</code>: 每2秒显示一次扩展的磁盘I/O统计信息，共显示5次。</li>\n<li><code>iostat -c 1</code>: 每1秒显示一次CPU利用率。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>sar</code></strong> (收集、报告或保存系统活动信息 Collect, report, or save system activity information)</p>\n<ul>\n<li><strong>用途:</strong> System Activity Reporter，一个强大的系统性能分析工具，可以收集和报告CPU、内存、I/O、网络等多种系统活动的统计数据，支持历史数据分析。 </li>\n<li><strong>安装:</strong> <code>sar</code> 通常包含在 <code>sysstat</code> 包中，可能需要手动安装: <code>sudo apt-get install sysstat</code> 或 <code>sudo yum install sysstat</code>。 </li>\n<li><strong>语法:</strong> <code>sar [选项][间隔 [次数]]</code> </li>\n<li>常用选项:<ul>\n<li><code>-u</code>: 显示CPU利用率。 </li>\n<li><code>-r</code>: 显示内存利用率。 </li>\n<li><code>-b</code>: 显示I/O和传输速率统计。 </li>\n<li><code>-d</code>: 显示块设备（磁盘）活动。 </li>\n<li><code>-n DEV | EDEV |...</code>: 显示网络统计信息 (<code>DEV</code> 为网络接口，<code>EDEV</code> 为网络错误)。 </li>\n<li><code>-q</code>: 显示运行队列长度和平均负载。 </li>\n<li><code>-P ALL | CPU号</code>: 报告每个处理器的统计信息。</li>\n<li><code>-o 文件名</code>: 将数据保存到二进制文件。 </li>\n<li><code>-f 文件名</code>: 从指定文件读取数据。 </li>\n<li><code>间隔 次数</code>: 每隔“间隔”秒输出一次报告，共输出“次数”次。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>sar -u 2 5</code>: 每2秒显示一次CPU利用率，共显示5次。 </li>\n<li><code>sar -r 1 3</code>: 每1秒显示一次内存利用率，共显示3次。 </li>\n<li><code>sar -n DEV 1</code>: 每1秒显示一次网络接口统计。 </li>\n<li><code>sar -f /var/log/sa/saDD</code> (其中DD为日期): 查看历史系统活动报告。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>lsof</code></strong> (列出打开的文件 List open files)</p>\n<ul>\n<li><p><strong>用途:</strong> 显示系统中所有进程打开的文件列表。在Linux中，“一切皆文件”，因此 <code>lsof</code> 可以显示打开的普通文件、目录、网络套接字、设备等。 </p>\n</li>\n<li><p><strong>语法:</strong> <code>lsof [选项][文件名]</code> </p>\n</li>\n<li><p>常用选项:</p>\n<ul>\n<li><p><code>-i [条件]</code>: 显示符合条件的网络连接。例如:</p>\n<ul>\n<li><code>-i TCP:22</code>: 显示监听或连接到TCP端口22的进程。 </li>\n<li><code>-i :80</code>: 显示监听或连接到端口80的进程。</li>\n<li><code>-i @主机名/IP</code>: 显示与指定主机相关的连接。</li>\n</ul>\n</li>\n<li><p><code>-u 用户名</code>: 显示指定用户打开的文件。 </p>\n</li>\n<li><p><code>-p PID</code>: 显示指定进程ID打开的文件。 </p>\n</li>\n<li><p><code>-c 命令名</code>: 显示由指定命令名开头的进程打开的文件。 </p>\n</li>\n<li><p><code>+D 目录</code>: 递归显示目录下被打开的文件。 </p>\n</li>\n<li><p><code>-t</code>: 只输出进程ID (PID)，常用于与其他命令结合。</p>\n</li>\n</ul>\n</li>\n<li><p>示例:</p>\n<ul>\n<li><code>sudo lsof -i :80</code>: 查看哪些进程正在使用80端口。</li>\n<li><code>sudo lsof -u apache</code>: 查看用户 <code>apache</code> 打开了哪些文件。</li>\n<li><code>sudo lsof /var/log/syslog</code>: 查看哪个进程打开了 <code>/var/log/syslog</code> 文件。</li>\n<li><code>sudo lsof -p 1234</code>: 查看PID为1234的进程打开了哪些文件。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"四、文本处理-Text-Processing\"><a href=\"#四、文本处理-Text-Processing\" class=\"headerlink\" title=\"四、文本处理 (Text Processing)\"></a>四、文本处理 (Text Processing)</h2><p>Linux 提供了大量强大的文本处理工具，用于查看、搜索、编辑和分析文本文件。</p>\n<h3 id=\"4-1-文件内容查看-Viewing-File-Contents\"><a href=\"#4-1-文件内容查看-Viewing-File-Contents\" class=\"headerlink\" title=\"4.1 文件内容查看 (Viewing File Contents)\"></a>4.1 文件内容查看 (Viewing File Contents)</h3><ul>\n<li><strong><code>cat</code></strong> (连接文件并打印到标准输出 Concatenate files and print on the standard output)<ul>\n<li><strong>用途:</strong> 显示一个或多个文件的全部内容，也可用于创建或合并文件。 </li>\n<li><strong>语法:</strong> <code>cat [选项][文件...]</code> </li>\n<li>常用选项:<ul>\n<li><code>-n</code>: 显示行号。 </li>\n<li><code>-E</code>: 在每行末尾显示 <code>$</code> 符号。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>cat myfile.txt</code>: 显示 <code>myfile.txt</code> 的内容。</li>\n<li><code>cat file1.txt file2.txt &gt; combined.txt</code>: 合并 <code>file1.txt</code> 和 <code>file2.txt</code> 的内容到 <code>combined.txt</code>。</li>\n<li><code>cat -n script.sh</code>: 显示 <code>script.sh</code> 的内容并带行号。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>less</code></strong> (与 <code>more</code> 功能相反，但功能更强大 Opposite of more, but with more features)<ul>\n<li><strong>用途:</strong> 分页查看文件内容，允许向前和向后滚动，支持搜索。比 <code>cat</code> 更适合查看大文件。 </li>\n<li><strong>语法:</strong> <code>less [选项] 文件名</code> </li>\n<li>常用选项:<ul>\n<li><code>-N</code>: 显示行号。 </li>\n<li><code>-S</code>: 禁止长行自动换行 (内容超出屏幕宽度时可水平滚动)。 </li>\n<li><code>-i</code>: 搜索时忽略大小写。 </li>\n<li><code>-F</code>: 如果内容能在一屏内显示完则自动退出。 </li>\n<li><code>-X</code>: 退出 <code>less</code> 后不清屏。</li>\n</ul>\n</li>\n<li>交互命令 (在 <code>less</code> 运行时):<ul>\n<li>空格键 或 <code>f</code>: 向下翻一页。 </li>\n<li><code>b</code>: 向上翻一页。 </li>\n<li><code>j</code> 或 向下箭头: 向下滚动一行。 </li>\n<li><code>k</code> 或 向上箭头: 向上滚动一行。 </li>\n<li><code>G</code>: 跳转到文件末尾。 </li>\n<li><code>g</code>: 跳转到文件开头。 </li>\n<li><code>/模式</code>: 向下搜索指定模式。 </li>\n<li><code>?模式</code>: 向上搜索指定模式。 </li>\n<li><code>n</code>: 重复上一次搜索 (同方向)。 </li>\n<li><code>N</code>: 重复上一次搜索 (反方向)。 </li>\n<li><code>q</code>: 退出 <code>less</code>。 </li>\n<li><code>h</code>: 显示帮助。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>less large_log_file.log</code>: 查看 <code>large_log_file.log</code>。</li>\n<li><code>dmesg | less -N</code>: 分页显示内核环形缓冲区消息并带行号。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>head</code></strong> (输出文件的第一部分 Output the first part of files)<ul>\n<li><strong>用途:</strong> 显示文件的开头部分，默认显示前10行。 </li>\n<li><strong>语法:</strong> <code>head [选项][文件...]</code> </li>\n<li>常用选项:<ul>\n<li><code>-n 数字</code> 或 <code>-数字</code>: 指定显示的行数。 </li>\n<li><code>-c 字节数</code>: 指定显示的字节数。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>head access.log</code>: 显示 <code>access.log</code> 的前10行。</li>\n<li><code>head -n 20 error.log</code>: 显示 <code>error.log</code> 的前20行。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>tail</code></strong> (输出文件的最后一部分 Output the last part of files)<ul>\n<li><strong>用途:</strong> 显示文件的末尾部分，默认显示最后10行。常用于监控实时更新的日志文件。 </li>\n<li><strong>语法:</strong> <code>tail [选项][文件...]</code> </li>\n<li>常用选项:<ul>\n<li><code>-n 数字</code> 或 <code>-数字</code>: 指定显示的行数。 </li>\n<li><code>-c 字节数</code>: 指定显示的字节数。</li>\n<li><code>-f</code>: 持续显示文件末尾追加的内容，直到按 <code>Ctrl+C</code> 终止。非常适用于实时日志监控。 </li>\n<li><code>-n +数字</code>: 从第几行开始显示到文件末尾。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>tail messages.log</code>: 显示 <code>messages.log</code> 的最后10行。</li>\n<li><code>tail -n 50 system.log</code>: 显示 <code>system.log</code> 的最后50行。</li>\n<li><code>tail -f /var/log/syslog</code>: 实时监控 <code>/var/log/syslog</code> 文件的新增内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-2-文本搜索与模式匹配-Text-Searching-and-Pattern-Matching\"><a href=\"#4-2-文本搜索与模式匹配-Text-Searching-and-Pattern-Matching\" class=\"headerlink\" title=\"4.2 文本搜索与模式匹配 (Text Searching and Pattern Matching)\"></a>4.2 文本搜索与模式匹配 (Text Searching and Pattern Matching)</h3><ul>\n<li><p><code>grep</code></p>\n<p> (打印匹配模式的行 Print lines matching a pattern)</p>\n<ul>\n<li><strong>用途:</strong> 在文件中搜索包含指定模式（字符串或正则表达式）的行，并打印这些行。 </li>\n<li><strong>语法:</strong> <code>grep [选项] 模式 [文件...]</code> </li>\n<li>常用选项:<ul>\n<li><code>-i</code>: 忽略模式和输入数据的大小写。 </li>\n<li><code>-v</code>: 反向匹配，打印不包含模式的行。 </li>\n<li><code>-r</code> 或 <code>-R</code>: 递归搜索目录下的所有文件。 </li>\n<li><code>-n</code>: 显示匹配行的行号。 </li>\n<li><code>-c</code>: 只打印匹配行的计数。 </li>\n<li><code>-l</code>: 只打印包含匹配模式的文件名。 </li>\n<li><code>-w</code>: 整词匹配。 </li>\n<li><code>-E</code>: 使用扩展正则表达式 (ERE)。</li>\n<li><code>-A 数字</code>: 打印匹配行及其后N行。 </li>\n<li><code>-B 数字</code>: 打印匹配行及其前N行。 </li>\n<li><code>-C 数字</code>: 打印匹配行及其前后各N行。 </li>\n<li><code>-e 模式</code>: 指定多个搜索模式。 </li>\n<li><code>-o</code>: 只显示匹配模式的部分。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>grep \"error\" application.log</code>: 在 <code>application.log</code> 中搜索包含 “error” 的行。</li>\n<li><code>grep -i \"warning\" /var/log/messages</code>: 在 <code>/var/log/messages</code> 中不区分大小写地搜索 “warning”。 </li>\n<li><code>grep -r \"config_value\" /etc/myapp/</code>: 递归搜索 <code>/etc/myapp/</code> 目录中包含 “config_value” 的文件。 </li>\n<li><code>ps aux | grep -v \"grep\"</code>: 显示进程列表，但不显示 <code>grep</code> 命令本身。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-文本编辑与转换-Text-Editing-and-Transformation\"><a href=\"#4-3-文本编辑与转换-Text-Editing-and-Transformation\" class=\"headerlink\" title=\"4.3 文本编辑与转换 (Text Editing and Transformation)\"></a>4.3 文本编辑与转换 (Text Editing and Transformation)</h3><ul>\n<li><p><strong><code>sed</code></strong> (流编辑器，用于对输入流执行基本文本转换 Stream editor for performing basic text transformations on an input stream)</p>\n<ul>\n<li><p><strong>用途:</strong> 一个强大的流编辑器，用于对文件或输入流进行非交互式的文本替换、删除、插入、转换等操作。 </p>\n</li>\n<li><p><strong>语法:</strong> <code>sed [选项] '脚本' [输入文件...]</code> </p>\n</li>\n<li><p>常用选项:</p>\n<ul>\n<li><code>-i[后缀]</code>: 直接修改文件内容 (如果提供后缀，则创建备份)。 </li>\n<li><code>-n</code>: 禁止自动打印模式空间的内容，通常与 <code>p</code> 命令配合使用。 </li>\n<li><code>-e 脚本</code>: 添加要执行的脚本。允许多个 <code>-e</code> 来执行多个命令。 </li>\n<li><code>-f 脚本文件</code>: 从脚本文件中读取 <code>sed</code> 命令。 </li>\n<li><code>-r</code> 或 <code>-E</code>: 使用扩展正则表达式。</li>\n</ul>\n</li>\n<li><p>常用命令 (在脚本中):</p>\n<ul>\n<li><p><code>s/旧模式/新模式/[标志]</code>: 替换 (substitute)。标志可以是：</p>\n<ul>\n<li><code>g</code>: 全局替换行内所有匹配。 </li>\n<li><code>N</code>: 替换第N个匹配项。 </li>\n<li><code>I</code> 或 <code>i</code>: 忽略大小写。</li>\n</ul>\n</li>\n<li><p><code>d</code>: 删除匹配的行。 </p>\n</li>\n<li><p><code>p</code>: 打印模式空间的内容 (通常与 <code>-n</code> 选项一起使用)。 </p>\n</li>\n<li><p><code>a\\文本</code>: 在匹配行之后追加文本。</p>\n</li>\n<li><p><code>i\\文本</code>: 在匹配行之前插入文本。</p>\n</li>\n<li><p><code>c\\文本</code>: 用文本替换匹配的行。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>地址 (指定命令作用的行):</strong> 可以是行号、正则表达式、或行号范围 (如 <code>1,5</code> 表示第1到5行；<code>/pattern/</code> 表示匹配模式的行)。 </p>\n</li>\n<li><p>示例:</p>\n<ul>\n<li><code>sed 's/apple/orange/g' fruit.txt</code>: 将 <code>fruit.txt</code> 中所有的 “apple” 替换为 “orange” 并输出到标准输出。</li>\n<li><code>sed -i 's/old_domain.com/new_domain.com/g' config.file</code>: 直接修改 <code>config.file</code>，将其中的 “old_domain.com” 全部替换为 “new_domain.com”。</li>\n<li><code>sed -n '/error/p' server.log</code>: 只打印 <code>server.log</code> 中包含 “error” 的行。</li>\n<li><code>sed '1,5d' data.txt</code>: 删除 <code>data.txt</code> 文件的前5行。 </li>\n<li><code>sed '/^#/d' config.conf</code>: 删除 <code>config.conf</code> 中所有以 <code>#</code> 开头的注释行。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>awk</code></strong> (模式扫描和处理语言 Pattern scanning and processing language)</p>\n<ul>\n<li><strong>用途:</strong> 一种强大的文本处理编程语言，非常适合处理结构化数据（如按列分隔的数据）、生成报告和执行复杂的文本操作。 </li>\n<li><strong>语法:</strong> <code>awk '[选项] '模式 {动作}' [输入文件...]'</code> </li>\n<li>核心概念:<ul>\n<li>记录 (Record): <code>awk</code> 逐行处理输入，每行被视为一个记录，默认记录分隔符是换行符。</li>\n<li>字段 (Field): 每个记录被进一步分解为字段，默认字段分隔符是空格或制表符。字段可以用 <code>$1</code>, <code>$2</code>,… <code>$NF</code> (最后一个字段) 表示，<code>$0</code> 表示整个记录。 </li>\n<li>模式 (Pattern): 在执行动作之前检查的条件。可以是正则表达式、比较表达式等。如果省略模式，则对每一行都执行动作。 </li>\n<li>动作 (Action): 由花括号 <code>{}</code> 包围的一系列命令。 </li>\n<li><code>BEGIN</code> 块: 在处理任何输入行之前执行一次。 </li>\n<li><code>END</code> 块: 在处理完所有输入行之后执行一次。</li>\n</ul>\n</li>\n<li>常用选项:<ul>\n<li><code>-F 分隔符</code>: 指定输入字段分隔符。 </li>\n<li><code>-v 变量=值</code>: 定义 <code>awk</code> 脚本中可以使用的变量。 </li>\n<li><code>-f 程序文件</code>: 从文件中读取 <code>awk</code> 程序。</li>\n</ul>\n</li>\n<li>内置变量:<ul>\n<li><code>FS</code>: 输入字段分隔符 (同 <code>-F</code> 选项)。</li>\n<li><code>OFS</code>: 输出字段分隔符 (默认为空格)。 </li>\n<li><code>RS</code>: 输入记录分隔符 (默认为换行符)。</li>\n<li><code>ORS</code>: 输出记录分隔符 (默认为换行符)。</li>\n<li><code>NR</code>: 当前已处理的记录数（行号）。 </li>\n<li><code>NF</code>: 当前记录中的字段数。</li>\n</ul>\n</li>\n<li><code>awk</code> 不仅仅是一个简单的文本过滤器，它实际上是一种编程语言，拥有变量、条件语句（如 <code>if</code>）、循环（如 <code>for</code>, <code>while</code>）等编程结构 。这使其能够处理比 <code>grep</code> 或 <code>sed</code> 更复杂的文本处理任务，例如对数据进行计算、格式化输出复杂的报告等。</li>\n<li>示例:<ul>\n<li><code>awk -F':' '{print $1, $3}' /etc/passwd</code>: 打印 <code>/etc/passwd</code> 文件中以冒号分隔的第一和第三个字段（用户名和UID）。</li>\n<li><code>awk '/error/ {count++; print \"Error on line \" NR \": \" $0} END {print \"Total errors found: \" count}' system.log</code>: 搜索 <code>system.log</code> 中包含 “error” 的行，打印行号和内容，并在最后打印错误总数。</li>\n<li><code>ls -l | awk '{if ($5 &gt; 1024) print $9, \"is larger than 1KB\"}'</code>: 列出当前目录中大于1KB的文件。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>tr</code></strong> (转换或删除字符 Translate or delete characters)</p>\n<ul>\n<li><strong>用途:</strong> 用于字符级别的转换（如大小写转换）或删除。 </li>\n<li><strong>语法:</strong> <code>tr [选项] SET1</code> </li>\n<li>常用选项:<ul>\n<li><code>-d</code>: 删除 <code>SET1</code> 中指定的所有字符。 </li>\n<li><code>-s</code>: 压缩 <code>SET1</code> (或 <code>SET2</code> 如果提供了 <code>SET2</code>) 中连续重复的字符为一个。 </li>\n<li><code>-c</code>: 使用 <code>SET1</code> 的补集。</li>\n</ul>\n</li>\n<li><strong>字符集 (SET):</strong> 可以是单个字符、字符范围 (如 <code>a-z</code>, <code>0-9</code>) 或特殊字符类 (如 <code>[:lower:]</code>, <code>[:upper:]</code>, <code>[:digit:]</code>, <code>[:space:]</code>)。 </li>\n<li>示例:<ul>\n<li><code>echo \"Hello World\" | tr 'A-Z' 'a-z'</code>: 将标准输入中的大写字母转换为小写，输出 “hello world”。 </li>\n<li><code>cat myfile.txt | tr -d '\\r'</code>: 删除 <code>myfile.txt</code> 中的回车符 (Windows换行符转Unix换行符)。</li>\n<li><code>echo \"This has too many spaces\" | tr -s ' '</code>: 将多个连续空格压缩为单个空格，输出 “This has too many spaces”。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>cut</code></strong> (从每行中删除文本区域 Remove sections from each line of files)</p>\n<ul>\n<li><strong>用途:</strong> 从文件的每一行中提取（剪切）指定的列或字符。 </li>\n<li><strong>语法:</strong> <code>cut [选项][文件...]</code> </li>\n<li>常用选项:<ul>\n<li><code>-d 分隔符</code>: 指定字段分隔符 (默认是制表符 TAB)。 </li>\n<li><code>-f 字段列表</code>: 指定要提取的字段编号，可以用逗号分隔多个字段 (如 <code>1,3</code>) 或用连字符表示范围 (如 <code>2-5</code>)。 </li>\n<li><code>-c 字符列表</code>: 指定要提取的字符位置，格式同 <code>-f</code>。 </li>\n<li><code>-b 字节列表</code>: 指定要提取的字节位置，格式同 <code>-f</code>。 </li>\n<li><code>--complement</code>: 提取指定字段/字符/字节之外的部分。 </li>\n<li><code>--output-delimiter=字符串</code>: 指定输出字段的分隔符。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>cut -d':' -f1,7 /etc/passwd</code>: 提取 <code>/etc/passwd</code> 文件中以冒号分隔的第一和第七个字段（用户名和shell）。 </li>\n<li><code>date | cut -c12-19</code>: 显示当前时间的 时:分:秒 部分。</li>\n<li><code>who | cut -c1-8</code>: 提取 <code>who</code> 命令输出中每行的前8个字符（通常是用户名）。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-4-文本比较与统计-Text-Comparison-and-Statistics\"><a href=\"#4-4-文本比较与统计-Text-Comparison-and-Statistics\" class=\"headerlink\" title=\"4.4 文本比较与统计 (Text Comparison and Statistics)\"></a>4.4 文本比较与统计 (Text Comparison and Statistics)</h3><ul>\n<li><strong><code>sort</code></strong> (对文本文件的行进行排序 Sort lines of text files)<ul>\n<li><strong>用途:</strong> 对文件内容按行进行排序，支持多种排序规则。 </li>\n<li><strong>语法:</strong> <code>sort [选项][文件...]</code> </li>\n<li>常用选项:<ul>\n<li><code>-r</code>: 反向排序（降序）。 </li>\n<li><code>-n</code>: 按数值大小进行排序。 </li>\n<li><code>-k 字段号[,结束字段号][选项]</code>: 按指定的字段进行排序。字段号从1开始。可以附加排序选项，如 <code>n</code> (数值), <code>r</code> (反向)。 </li>\n<li><code>-t 分隔符</code>: 指定字段分隔符。 </li>\n<li><code>-u</code>: 输出唯一的行（去除重复行，等同于 <code>sort file | uniq</code>）。 </li>\n<li><code>-f</code>: 忽略大小写进行排序。 </li>\n<li><code>-M</code>: 按月份名称排序 (Jan, Feb,…)。 </li>\n<li><code>-h</code>: 人类可读数字排序 (例如 2K, 1G)。 </li>\n<li><code>-o 输出文件</code>: 将排序结果写入指定文件，而不是标准输出。可以用于原地排序，例如 <code>sort -o file.txt file.txt</code>。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>sort names.txt</code>: 按字母顺序对 <code>names.txt</code> 的行进行排序。</li>\n<li><code>sort -rn data.log | head -n 5</code>: 对 <code>data.log</code> 中的数字进行反向（从大到小）排序，并显示前5行。</li>\n<li><code>sort -t':' -k3n /etc/passwd</code>: 以冒号为分隔符，按第三个字段（UID）的数值大小对 <code>/etc/passwd</code> 文件进行排序。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>uniq</code></strong> (报告或省略重复行 Report or omit repeated lines)<ul>\n<li><strong>用途:</strong> 从已排序的输入中删除或报告重复的相邻行。因此，<code>uniq</code> 通常与 <code>sort</code> 命令配合使用。 </li>\n<li><strong>语法:</strong> <code>uniq [选项][输入文件 [输出文件]]</code> </li>\n<li>常用选项:<ul>\n<li><code>-c</code>: 在每行前输出该行重复出现的次数。 </li>\n<li><code>-d</code>: 仅显示重复出现的行（每组重复行只显示一次）。 </li>\n<li><code>-D</code>: 显示所有重复的行（而不是每组只显示一次）。 </li>\n<li><code>-u</code>: 仅显示不重复的行。 </li>\n<li><code>-i</code>: 比较时忽略大小写。 </li>\n<li><code>-f N</code> 或 <code>--skip-fields=N</code>: 跳过比较每行的前N个字段。 </li>\n<li><code>-s N</code> 或 <code>--skip-chars=N</code>: 跳过比较每行的前N个字符。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>sort access.log | uniq -c</code>: 统计 <code>access.log</code> 中每种唯一请求的次数。</li>\n<li><code>sort data.txt | uniq -d</code>: 显示 <code>data.txt</code> 中所有重复的行。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>wc</code></strong> (打印换行符、字和字节计数 Print newline, word, and byte counts for each file)<ul>\n<li><strong>用途:</strong> 统计指定文件或标准输入的行数、单词数、字符数或字节数。 </li>\n<li><strong>语法:</strong> <code>wc [选项][文件...]</code> </li>\n<li>常用选项:<ul>\n<li><code>-l</code>: 只统计行数。 </li>\n<li><code>-w</code>: 只统计单词数。 </li>\n<li><code>-c</code>: 只统计字节数。 </li>\n<li><code>-m</code>: 只统计字符数 (考虑多字节字符)。 </li>\n<li><code>-L</code>: 打印最长行的长度。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>wc report.txt</code>: 显示 <code>report.txt</code> 的行数、单词数和字节数。</li>\n<li><code>ls -1 | wc -l</code>: 统计当前目录下的文件和目录数量。</li>\n<li><code>grep \"error\" logfile | wc -l</code>: 统计 <code>logfile</code> 中包含 “error” 的行数。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>diff</code></strong> (逐行比较文件 Compare files line by line)<ul>\n<li><strong>用途:</strong> 比较两个文件的内容，并显示它们之间的差异。常用于比较代码文件、配置文件等。 </li>\n<li><strong>语法:</strong> <code>diff [选项] 文件1 文件2</code> </li>\n<li>常用选项:<ul>\n<li><code>-u</code> 或 <code>-U 数字</code>: 以统一格式 (unified format) 输出差异，通常更易读，并被 <code>patch</code> 命令使用。 </li>\n<li><code>-c</code>: 以上下文格式 (context format) 输出差异。 </li>\n<li><code>-i</code>: 比较时忽略大小写。 </li>\n<li><code>-w</code>: 忽略所有空格导致的差异。 </li>\n<li><code>-B</code>: 忽略因空行导致的差异。 </li>\n<li><code>-r</code>: 递归比较目录。如果比较的是目录，<code>diff</code> 会比较两个目录中同名的文件。 </li>\n<li><code>-q</code> 或 <code>--brief</code>: 仅报告文件是否不同，不显示具体差异。 </li>\n<li><code>-s</code>: 当文件相同时报告。</li>\n</ul>\n</li>\n<li>输出格式解释:<ul>\n<li>默认格式：<code>&lt;</code> 表示第一个文件中的行，<code>&gt;</code> 表示第二个文件中的行，行号和操作符（<code>a</code> 添加, <code>d</code> 删除, <code>c</code> 更改）指示如何从文件1转换到文件2。 </li>\n<li>统一格式 (<code>-u</code>): 以 <code>--- file1</code> 和 <code>+++ file2</code> 开头，差异部分用 <code>-</code> (来自文件1) 和 <code>+</code> (来自文件2) 标记。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>diff config_v1.conf config_v2.conf</code>: 比较两个配置文件的差异。</li>\n<li><code>diff -u old_script.sh new_script.sh &gt; script.patch</code>: 以统一格式生成补丁文件。 </li>\n<li><code>diff -r project_v1/ project_v2/</code>: 递归比较两个项目目录。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五、用户、用户组与权限管理-User-Group-and-Permission-Management\"><a href=\"#五、用户、用户组与权限管理-User-Group-and-Permission-Management\" class=\"headerlink\" title=\"五、用户、用户组与权限管理 (User, Group, and Permission Management)\"></a>五、用户、用户组与权限管理 (User, Group, and Permission Management)</h2><p>管理用户账户、用户组以及文件和目录的访问权限是 Linux 系统安全与管理的核心。</p>\n<h3 id=\"5-1-用户信息查看-Viewing-User-Information\"><a href=\"#5-1-用户信息查看-Viewing-User-Information\" class=\"headerlink\" title=\"5.1 用户信息查看 (Viewing User Information)\"></a>5.1 用户信息查看 (Viewing User Information)</h3><ul>\n<li><strong><code>who</code></strong> (显示当前已登录的用户 Show who is logged on)<ul>\n<li><strong>用途:</strong> 显示当前登录到系统的用户信息，包括用户名、终端、登录时间、来源IP等。 </li>\n<li><strong>语法:</strong> <code>who [选项]</code> </li>\n<li>常用选项:<ul>\n<li><code>-a</code> 或 <code>--all</code>: 显示所有信息，包括空闲时间、进程ID等。 </li>\n<li><code>-b</code> 或 <code>--boot</code>: 显示上次系统启动时间。 </li>\n<li><code>-H</code> 或 <code>--heading</code>: 显示列标题。 </li>\n<li><code>-u</code> 或 <code>--users</code>: 列出已登录用户，并显示空闲时间和PID。 </li>\n<li><code>-q</code> 或 <code>--count</code>: 只显示登录用户名和数量。 </li>\n<li><code>am i</code> (或 <code>am I</code>): 显示运行 <code>who</code> 命令的当前用户信息。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>who</code>: 显示当前登录用户。</li>\n<li><code>who -H</code>: 显示当前登录用户并带列标题。</li>\n<li><code>who am i</code>: 显示当前终端会话的用户信息。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>id</code></strong> (打印真实和有效的用户和组ID Print real and effective user and group IDs)<ul>\n<li><strong>用途:</strong> 显示指定用户（默认为当前用户）的UID（用户ID）、GID（组ID）以及所属的用户组信息。 </li>\n<li><strong>语法:</strong> <code>id [选项][用户名]</code> </li>\n<li>常用选项:<ul>\n<li><code>-u</code>: 只显示有效用户ID (UID)。 </li>\n<li><code>-g</code>: 只显示有效组ID (GID)。 </li>\n<li><code>-G</code>: 显示所有组ID。 </li>\n<li><code>-n</code>: 与 <code>-u</code>, <code>-g</code>, <code>-G</code> 配合使用，显示名称而非数字ID。 </li>\n<li><code>-r</code>: 与 <code>-u</code>, <code>-g</code>, <code>-G</code> 配合使用，显示真实ID而非有效ID。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>id</code>: 显示当前用户的ID信息。</li>\n<li><code>id john</code>: 显示用户 <code>john</code> 的ID信息。</li>\n<li><code>id -Gn jane</code>: 显示用户 <code>jane</code> 所属的所有组的名称。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-用户切换与提权-Switching-Users-and-Elevating-Privileges\"><a href=\"#5-2-用户切换与提权-Switching-Users-and-Elevating-Privileges\" class=\"headerlink\" title=\"5.2 用户切换与提权 (Switching Users and Elevating Privileges)\"></a>5.2 用户切换与提权 (Switching Users and Elevating Privileges)</h3><ul>\n<li><strong><code>su</code></strong> (切换用户或成为超级用户 Switch user or become superuser)<ul>\n<li><strong>用途:</strong> 允许用户在当前终端会话中切换到另一个用户账户，如果未指定用户名，则默认切换到超级用户 (root)。 </li>\n<li><strong>语法:</strong> <code>su [选项][用户名]</code> </li>\n<li>常用选项:<ul>\n<li><code>-</code> 或 <code>-l</code> 或 <code>--login</code>: 模拟一次完整的登录过程，加载目标用户的环境变量、主目录和shell配置。这是推荐的切换用户方式，以避免环境混乱。 </li>\n<li><code>-c \"命令\"</code>: 以目标用户身份执行单个命令后退出。 </li>\n<li><code>-s shell路径</code>: 指定切换后使用的shell。 </li>\n<li><code>-p</code> 或 <code>-m</code> 或 <code>--preserve-environment</code>: 保留当前用户的环境变量。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>su - john</code>: 切换到用户 <code>john</code>，并加载其完整的登录环境。</li>\n<li><code>su -</code>: 切换到 <code>root</code> 用户，并加载其完整的登录环境 (需要输入root密码)。</li>\n<li><code>su -c \"ls /root\" someuser</code>: 以 <code>someuser</code> 的身份执行 <code>ls /root</code> 命令。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>sudo</code></strong> (以其他用户身份执行命令，通常是root Execute a command as another user, typically root)<ul>\n<li><strong>用途:</strong> 允许授权用户以超级用户 (root) 或其他指定用户的身份执行命令，而无需知道目标用户的密码（通常需要输入当前用户的密码进行验证）。这是比直接使用 <code>root</code> 账户更安全的权限提升方式。 </li>\n<li><strong>语法:</strong> <code>sudo [选项] 命令</code> </li>\n<li>常用选项:<ul>\n<li><code>-u 用户名</code>: 以指定用户的身份执行命令。 </li>\n<li><code>-i</code>: 模拟一次 <code>root</code> 用户的登录shell，加载 <code>root</code> 的环境。 </li>\n<li><code>-s</code>: 执行由 <code>SHELL</code> 环境变量指定的shell，通常是 <code>root</code> 的shell。 </li>\n<li><code>-l</code>: 列出当前用户可以通过 <code>sudo</code> 执行的命令以及禁止执行的命令。 </li>\n<li><code>-v</code>: 延长 <code>sudo</code> 的密码凭证时效，而不执行命令。 </li>\n<li><code>-k</code>: 使当前的 <code>sudo</code> 密码凭证失效，下次使用 <code>sudo</code> 时需要重新输入密码。 </li>\n<li><code>-b</code>: 在后台运行命令。</li>\n</ul>\n</li>\n<li><strong>配置文件:</strong> <code>sudo</code> 的权限配置存储在 <code>/etc/sudoers</code> 文件中，应使用 <code>visudo</code> 命令进行编辑，以确保语法正确并防止配置错误导致系统无法使用 <code>sudo</code>。 </li>\n<li>示例:<ul>\n<li><code>sudo apt update</code>: 以 <code>root</code> 权限更新软件包列表。 </li>\n<li><code>sudo -u www-data crontab -l</code>: 以 <code>www-data</code> 用户身份列出其 <code>cron</code> 作业。</li>\n<li><code>sudo -i</code>: 切换到 <code>root</code> 用户的交互式shell。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-3-用户账户管理-User-Account-Management\"><a href=\"#5-3-用户账户管理-User-Account-Management\" class=\"headerlink\" title=\"5.3 用户账户管理 (User Account Management)\"></a>5.3 用户账户管理 (User Account Management)</h3><ul>\n<li><strong><code>useradd</code></strong> (创建新用户 Create a new user or update default new user information)<ul>\n<li><strong>用途:</strong> 用于在Linux系统中添加新的用户账户。 </li>\n<li><strong>语法:</strong> <code>useradd [选项] 用户名</code> </li>\n<li>常用选项:<ul>\n<li><code>-m</code>: 创建用户的主目录（如果不存在）。 </li>\n<li><code>-d 家目录路径</code>: 指定用户的主目录路径。 </li>\n<li><code>-s shell路径</code>: 指定用户的默认登录shell (例如 <code>/bin/bash</code>, <code>/sbin/nologin</code>)。 </li>\n<li><code>-g 初始组名或GID</code>: 指定用户的主组。 </li>\n<li><code>-G 附加组列表</code>: 指定用户所属的附加组（逗号分隔）。 </li>\n<li><code>-c \"注释\"</code>: 为用户账户添加注释信息（例如全名）。 </li>\n<li><code>-e YYYY-MM-DD</code>: 设置账户的过期日期。</li>\n</ul>\n</li>\n<li><strong>注意:</strong> <code>useradd</code> 是一个底层工具，而 <code>adduser</code> 是一个更用户友好的脚本，通常在Debian/Ubuntu系统中使用，它会进行更多交互式设置。 </li>\n<li>示例:<ul>\n<li><code>sudo useradd -m -s /bin/bash -c \"John Doe\" johnd</code>: 创建一个名为 <code>johnd</code> 的用户，创建其主目录，设置shell为bash，并添加注释。</li>\n<li><code>sudo useradd -m -G developers,testers jane</code>: 创建用户 <code>jane</code>，创建其主目录，并将其加入 <code>developers</code> 和 <code>testers</code> 组。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>userdel</code></strong> (删除用户账户 Delete a user account and related files)<ul>\n<li><strong>用途:</strong> 用于从系统中删除用户账户。 </li>\n<li><strong>语法:</strong> <code>userdel [选项] 用户名</code> </li>\n<li>常用选项:<ul>\n<li><code>-r</code>: 删除用户的主目录及其中的文件，以及用户的邮件池。 </li>\n<li><code>-f</code>: 强制删除用户账户，即使该用户当前已登录或其文件仍被使用。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>sudo userdel olduser</code>: 删除用户 <code>olduser</code> (不删除其主目录)。</li>\n<li><code>sudo userdel -r former_employee</code>: 删除用户 <code>former_employee</code> 并移除其主目录和邮件池。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>usermod</code></strong> (修改用户账户 Modify a user account)<ul>\n<li><strong>用途:</strong> 用于修改现有用户账户的各种属性。 </li>\n<li><strong>语法:</strong> <code>usermod [选项] 用户名</code> </li>\n<li>常用选项:<ul>\n<li><code>-l 新登录名</code>: 更改用户的登录名。 </li>\n<li><code>-d 新家目录路径 [-m]</code>: 更改用户的主目录。<code>-m</code> 选项会将旧主目录的内容移动到新主目录。 </li>\n<li><code>-s 新shell路径</code>: 更改用户的默认登录shell。 </li>\n<li><code>-g 新主组名或GID</code>: 更改用户的主组。 </li>\n<li><code>-G 新附加组列表</code>: 更改用户所属的附加组列表（会覆盖原有的附加组）。 </li>\n<li><code>-aG 附加组</code>: 将用户追加到指定的附加组，而不影响其他已有的附加组 ( <code>-a</code> 必须与 <code>-G</code> 一起使用)。 </li>\n<li><code>-L</code>: 锁定用户账户，使其无法登录。 </li>\n<li><code>-U</code>: 解锁用户账户。 </li>\n<li><code>-e YYYY-MM-DD</code>: 设置账户的过期日期。 </li>\n<li><code>-c \"新注释\"</code>: 修改用户的注释信息。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>sudo usermod -s /usr/sbin/nologin restricted_user</code>: 将用户 <code>restricted_user</code> 的shell设置为 <code>/usr/sbin/nologin</code>，使其无法登录。</li>\n<li><code>sudo usermod -aG docker current_user</code>: 将用户 <code>current_user</code> 添加到 <code>docker</code> 组。</li>\n<li><code>sudo usermod -L problematic_user</code>: 锁定用户 <code>problematic_user</code> 的账户。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>passwd</code></strong> (更改用户密码 Change user password)<ul>\n<li><strong>用途:</strong> 用于设置或更改用户账户的密码。 </li>\n<li><strong>语法:</strong> <code>passwd [选项][用户名]</code> </li>\n<li>行为:<ul>\n<li>如果未指定用户名，则更改当前用户的密码 (需要输入当前密码)。 </li>\n<li>如果由 <code>root</code> 用户执行并指定了用户名，则可以直接更改该用户的密码，无需知道其旧密码。</li>\n</ul>\n</li>\n<li>常用选项:<ul>\n<li><code>-d</code>: 删除指定用户的密码，使其可以无密码登录 (非常不安全，慎用)。</li>\n<li><code>-l</code>: 锁定指定用户的密码，使其无法通过密码登录。 </li>\n<li><code>-u</code>: 解锁指定用户的密码。 </li>\n<li><code>-e</code> 或 <code>--expire</code>: 强制用户在下次登录时更改密码。 </li>\n<li><code>-S</code>: 显示密码状态信息。</li>\n<li><code>-n 天数</code>: 设置密码最短有效天数。 </li>\n<li><code>-x 天数</code>: 设置密码最长有效天数。</li>\n<li><code>-w 天数</code>: 设置密码过期前多少天开始警告。 </li>\n<li><code>-i 天数</code>: 密码过期后账户停用前的天数。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>passwd</code>: 更改当前用户的密码。</li>\n<li><code>sudo passwd john</code>: 更改用户 <code>john</code> 的密码。</li>\n<li><code>sudo passwd -l jane</code>: 锁定用户 <code>jane</code> 的密码。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-4-用户组管理-Group-Management\"><a href=\"#5-4-用户组管理-Group-Management\" class=\"headerlink\" title=\"5.4 用户组管理 (Group Management)\"></a>5.4 用户组管理 (Group Management)</h3><ul>\n<li><strong><code>groupadd</code></strong> (创建新用户组 Create a new group)<ul>\n<li><strong>用途:</strong> 用于在系统中创建一个新的用户组。 </li>\n<li><strong>语法:</strong> <code>groupadd [选项] 组名</code> </li>\n<li>常用选项:<ul>\n<li><code>-g GID</code>: 指定新用户组的GID (组ID)。如果省略，系统会自动分配一个。 </li>\n<li><code>-r</code>: 创建一个系统组。</li>\n</ul>\n</li>\n<li><strong>示例:</strong> <code>sudo groupadd developers</code>: 创建一个名为 <code>developers</code> 的用户组。</li>\n</ul>\n</li>\n<li><strong><code>groupdel</code></strong> (删除用户组 Delete a group)<ul>\n<li><strong>用途:</strong> 用于从系统中删除一个已存在的用户组。 </li>\n<li><strong>语法:</strong> <code>groupdel [选项] 组名</code> </li>\n<li>常用选项:<ul>\n<li><code>-f</code> 或 <code>--force</code>: 强制删除组，即使该组是某个用户的主组（通常不推荐这样做，除非明确知道后果）。</li>\n</ul>\n</li>\n<li><strong>注意:</strong> 不能删除作为任何用户主组的组，除非先更改该用户的主组。 </li>\n<li><strong>示例:</strong> <code>sudo groupdel old_project_team</code>: 删除名为 <code>old_project_team</code> 的用户组。</li>\n</ul>\n</li>\n<li><strong><code>groupmod</code></strong> (修改用户组 Modify a group definition on the system)<ul>\n<li><strong>用途:</strong> 用于修改现有用户组的属性，如组名或GID。 </li>\n<li><strong>语法:</strong> <code>groupmod [选项] 组名</code> </li>\n<li>常用选项:<ul>\n<li><code>-n 新组名</code>: 更改用户组的名称。 </li>\n<li><code>-g 新GID</code>: 更改用户组的GID。 </li>\n<li><code>-o</code>: 与 <code>-g</code> 配合使用，允许GID不唯一（通常不推荐）。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>sudo groupmod -n web_developers developers</code>: 将用户组 <code>developers</code> 重命名为 <code>web_developers</code>。</li>\n<li><code>sudo groupmod -g 1005 new_team</code>: 将用户组 <code>new_team</code> 的GID修改为1005。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>groups</code></strong> (打印用户所属的组 Print the groups a user is in)<ul>\n<li><strong>用途:</strong> 显示指定用户（默认为当前用户）所属的所有组的列表。 </li>\n<li><strong>语法:</strong> <code>groups [用户名]</code></li>\n<li>示例:<ul>\n<li><code>groups</code>: 显示当前用户所属的组。</li>\n<li><code>groups john</code>: 显示用户 <code>john</code> 所属的组。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-5-文件权限与归属管理-File-Permission-and-Ownership-Management\"><a href=\"#5-5-文件权限与归属管理-File-Permission-and-Ownership-Management\" class=\"headerlink\" title=\"5.5 文件权限与归属管理 (File Permission and Ownership Management)\"></a>5.5 文件权限与归属管理 (File Permission and Ownership Management)</h3><p>Linux 文件权限基于“用户-组-其他” (UGO) 模型，对每个文件或目录定义了读(r)、写(w)、执行(x)三种基本权限。</p>\n<ul>\n<li><p><code>chmod</code></p>\n<p> (更改文件模式位/权限 Change file mode bits)</p>\n<ul>\n<li><strong>用途:</strong> 修改文件或目录的访问权限。 </li>\n<li><strong>语法:</strong> <code>chmod [选项] 模式 文件/目录...</code> </li>\n<li>模式 (Mode):<ul>\n<li><strong>符号模式 (Symbolic Mode):</strong> 使用 <code>u</code> (所有者/用户), <code>g</code> (组), <code>o</code> (其他), <code>a</code> (所有) 结合 <code>+</code> (添加权限), <code>-</code> (移除权限), <code>=</code> (设置精确权限) 以及 <code>r</code> (读), <code>w</code> (写), <code>x</code> (执行)。 </li>\n<li><strong>数字模式 (Octal Mode):</strong> 使用三位八进制数表示权限，每位分别对应所有者、组和其他人。每位数字是r(4), w(2), x(1)权限值的和。</li>\n</ul>\n</li>\n<li>常用选项:<ul>\n<li><code>-R</code>: 递归地修改目录及其内容的权限。</li>\n</ul>\n</li>\n<li><strong>表格5.1: <code>chmod</code> 数字模式权限含义</strong></li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>数字</strong></th>\n<th><strong>r (读)</strong></th>\n<th><strong>w (写)</strong></th>\n<th><strong>x (执行)</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>无权限</td>\n</tr>\n<tr>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td>x</td>\n<td>执行权限</td>\n</tr>\n<tr>\n<td>2</td>\n<td>-</td>\n<td>w</td>\n<td>-</td>\n<td>写入权限</td>\n</tr>\n<tr>\n<td>3</td>\n<td>-</td>\n<td>w</td>\n<td>x</td>\n<td>写入和执行权限</td>\n</tr>\n<tr>\n<td>4</td>\n<td>r</td>\n<td>-</td>\n<td>-</td>\n<td>读取权限</td>\n</tr>\n<tr>\n<td>5</td>\n<td>r</td>\n<td>-</td>\n<td>x</td>\n<td>读取和执行权限</td>\n</tr>\n<tr>\n<td>6</td>\n<td>r</td>\n<td>w</td>\n<td>-</td>\n<td>读取和写入权限</td>\n</tr>\n<tr>\n<td>7</td>\n<td>r</td>\n<td>w</td>\n<td>x</td>\n<td>读取、写入和执行权限</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">**示例:**\n<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">chmod</span> u+x script.sh<span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">:</span> 为文件 <span class=\"token variable\"><span class=\"token variable\">`</span>script.sh<span class=\"token variable\">`</span></span> 的所有者添加执行权限。 \n <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> private_key.pem<span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">:</span> 设置 <span class=\"token variable\"><span class=\"token variable\">`</span>private_key.pem<span class=\"token variable\">`</span></span> 文件的权限为所有者可读写，组和其他人无任何权限 <span class=\"token punctuation\">(</span>rw-------<span class=\"token punctuation\">)</span>。\n<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">chmod</span> <span class=\"token number\">755</span> public_script.sh<span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">:</span> 设置 <span class=\"token variable\"><span class=\"token variable\">`</span>public_script.sh<span class=\"token variable\">`</span></span> 权限为所有者可读写执行，组和其他人可读可执行 <span class=\"token punctuation\">(</span>rwxr-xr-x<span class=\"token punctuation\">)</span>。 \n<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> <span class=\"token number\">750</span> /var/www/my_app<span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">:</span> 递归地设置 <span class=\"token variable\"><span class=\"token variable\">`</span>/var/www/my_app<span class=\"token variable\">`</span></span> 目录及其内容的权限为所有者读写执行，所属组读执行，其他人无权限。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong><code>chown</code></strong> (更改文件所有者和组 Change file owner and group)<ul>\n<li><strong>用途:</strong> 更改文件或目录的用户所有者和/或组所有者。通常需要超级用户权限。 </li>\n<li><strong>语法:</strong> <code>chown [选项][新所有者][:新组] 文件/目录...</code> </li>\n<li>常用选项:<ul>\n<li><code>-R</code>: 递归地更改目录及其内容的所有权。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>sudo chown john myfile.txt</code>: 将 <code>myfile.txt</code> 的所有者更改为用户 <code>john</code>。 </li>\n<li><code>sudo chown jane:developers report.doc</code>: 将 <code>report.doc</code> 的所有者更改为 <code>jane</code>，所属组更改为 <code>developers</code>。 </li>\n<li><code>sudo chown -R www-data:www-data /var/www/html</code>: 递归地将 <code>/var/www/html</code> 目录及其所有内容的所有者和所属组更改为 <code>www-data</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>chgrp</code></strong> (更改文件组所有权 Change file group ownership)<ul>\n<li><strong>用途:</strong> 单独更改文件或目录的组所有者。通常需要超级用户权限。 </li>\n<li><strong>语法:</strong> <code>chgrp [选项] 新组 文件/目录...</code> </li>\n<li>常用选项:<ul>\n<li><code>-R</code>: 递归地更改目录及其内容的组所有权。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>sudo chgrp editors draft.txt</code>: 将 <code>draft.txt</code> 的所属组更改为 <code>editors</code>。 </li>\n<li><code>sudo chgrp -R web_content /srv/my_website/assets</code>: 递归地将 <code>/srv/my_website/assets</code> 目录及其所有内容的所属组更改为 <code>web_content</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"六、网络命令-Networking-Commands\"><a href=\"#六、网络命令-Networking-Commands\" class=\"headerlink\" title=\"六、网络命令 (Networking Commands)\"></a>六、网络命令 (Networking Commands)</h2><p>Linux 提供了丰富的网络命令，用于测试连接、配置接口、查看状态、进行远程操作和DNS查询。</p>\n<h3 id=\"6-1-网络连接测试-Network-Connectivity-Testing\"><a href=\"#6-1-网络连接测试-Network-Connectivity-Testing\" class=\"headerlink\" title=\"6.1 网络连接测试 (Network Connectivity Testing)\"></a>6.1 网络连接测试 (Network Connectivity Testing)</h3><ul>\n<li><p><code>ping</code></p>\n<p> (向网络主机发送ICMP ECHO_REQUEST数据包 Send ICMP ECHO_REQUEST to network hosts)</p>\n<ul>\n<li><strong>用途:</strong> 测试与目标主机之间的网络连通性，通过发送ICMP回显请求并等待回显应答。 </li>\n<li><strong>语法:</strong> <code>ping [选项] 主机名或IP地址</code> </li>\n<li>常用选项:<ul>\n<li><code>-c 次数</code>: 发送指定数量的回显请求包后停止。 </li>\n<li><code>-i 间隔</code>: 设置发送每个包之间的间隔秒数。</li>\n<li><code>-s 包大小</code>: 设置发送包的大小（字节）。</li>\n<li><code>-W 超时</code>: 设置等待响应的超时时间（秒）。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>ping google.com</code>: 持续向 <code>google.com</code> 发送ping包，直到手动停止 (<code>Ctrl+C</code>)。</li>\n<li><code>ping -c 5 192.168.1.1</code>: 向 IP 地址 <code>192.168.1.1</code> 发送5个ping包。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-2-网络接口配置与查看-Network-Interface-Configuration-and-Viewing\"><a href=\"#6-2-网络接口配置与查看-Network-Interface-Configuration-and-Viewing\" class=\"headerlink\" title=\"6.2 网络接口配置与查看 (Network Interface Configuration and Viewing)\"></a>6.2 网络接口配置与查看 (Network Interface Configuration and Viewing)</h3><ul>\n<li><p><strong><code>ip</code></strong> (显示/操作路由、网络设备、接口和隧道 Show / manipulate routing, network devices, interfaces and tunnels)</p>\n<ul>\n<li><p><strong>用途:</strong> 这是Linux系统中用于网络配置的核心工具，功能强大，已取代旧的 <code>ifconfig</code> 和 <code>route</code> 等命令。 </p>\n</li>\n<li><p>子命令:</p>\n<ul>\n<li><p><code>addr</code>(或 a): 管理网络接口的IP地址。</p>\n</li>\n<li><p><code>ip addr show [dev 接口名]</code>: 显示指定接口（或所有接口）的IP地址信息。 </p>\n<ul>\n<li><code>sudo ip addr add IP地址/掩码 dev 接口名</code>: 为接口添加IP地址。</li>\n</ul>\n</li>\n<li><p><code>sudo ip addr del IP地址/掩码 dev 接口名</code>: 从接口删除IP地址。 </p>\n</li>\n<li><p><code>link</code>(或 l): 管理网络设备（接口）本身。</p>\n<ul>\n<li><code>ip link show [dev 接口名]</code>: 显示接口的状态和属性。</li>\n</ul>\n</li>\n<li><p><code>sudo ip link set 接口名 up/down</code>: 启用或禁用指定的网络接口。 </p>\n</li>\n<li><p><code>sudo ip link set 接口名 mtu 数值</code>: 设置接口的最大传输单元 (MTU)。 </p>\n</li>\n<li><p><code>route</code>(或 r): 管理路由表。</p>\n<ul>\n<li><code>ip route show</code> 或 <code>ip route list</code>: 显示内核路由表。 </li>\n<li><code>sudo ip route add 目标网络/掩码 via 网关地址 [dev 接口名]</code>: 添加一条静态路由。</li>\n</ul>\n</li>\n<li><p><code>sudo ip route del 目标网络/掩码</code>: 删除一条路由。</p>\n</li>\n</ul>\n</li>\n<li><p><code>neigh</code>(或 n): 管理ARP或NDP缓存（邻居表）。</p>\n<ul>\n<li><code>ip neigh show</code>: 显示邻居表。</li>\n</ul>\n</li>\n<li><p><code>ip</code> 命令是 <code>ifconfig</code> 的现代替代品，功能更强大，语法更一致。<code>ifconfig</code> 在许多新发行版中已不再默认安装。 </p>\n</li>\n<li><p>示例:</p>\n<ul>\n<li><code>ip addr show eth0</code>: 显示 <code>eth0</code> 接口的IP地址信息。</li>\n<li><code>sudo ip link set wlan0 down</code>: 禁用 <code>wlan0</code> 无线接口。</li>\n<li><code>ip route add default via 192.168.1.254 dev eth0</code>: 添加默认网关。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>ifconfig</code></strong> (配置网络接口 - 旧版 Configure a network interface - deprecated)</p>\n<ul>\n<li><strong>用途:</strong> 在较旧的Linux系统中用于配置和显示网络接口信息。 </li>\n<li>内容:<ul>\n<li><code>ifconfig</code>: 显示所有活动接口的信息。</li>\n<li><code>ifconfig 接口名</code>: 显示指定接口的信息。</li>\n<li><code>sudo ifconfig 接口名 IP地址 netmask 子网掩码 up</code>: 配置接口IP并启用。</li>\n</ul>\n</li>\n<li><strong>注意:</strong> 此命令已逐渐被 <code>ip</code> 命令取代，在新系统中可能未预装。 </li>\n<li><strong>示例:</strong> <code>ifconfig eth0</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-3-网络状态与套接字查看-Network-Status-and-Socket-Viewing\"><a href=\"#6-3-网络状态与套接字查看-Network-Status-and-Socket-Viewing\" class=\"headerlink\" title=\"6.3 网络状态与套接字查看 (Network Status and Socket Viewing)\"></a>6.3 网络状态与套接字查看 (Network Status and Socket Viewing)</h3><ul>\n<li><strong><code>ss</code></strong> (另一个调查套接字的实用程序 Another utility to investigate sockets)<ul>\n<li><strong>用途:</strong> 用于显示活动的套接字连接信息，是 <code>netstat</code> 的现代替代品，通常更快且提供更多信息。 </li>\n<li><strong>语法:</strong> <code>ss [选项]</code> </li>\n<li>常用选项:<ul>\n<li><code>-t</code>: 显示TCP套接字。 </li>\n<li><code>-u</code>: 显示UDP套接字。 </li>\n<li><code>-x</code>: 显示Unix域套接字。 </li>\n<li><code>-l</code>: 显示监听状态的套接字。 </li>\n<li><code>-p</code>: 显示使用套接字的进程。 </li>\n<li><code>-n</code>: 不解析服务名称，直接显示数字地址和端口号。 </li>\n<li><code>-a</code>: 显示所有状态的套接字（监听和非监听）。 </li>\n<li><code>-e</code>: 显示详细的套接字信息。 </li>\n<li><code>-o</code>: 显示计时器信息。 </li>\n<li><code>-s</code>: 显示套接字摘要统计。 </li>\n<li><code>state 状态</code>: 过滤特定状态的连接 (如 <code>established</code>, <code>listen</code>, <code>time-wait</code>)。</li>\n</ul>\n</li>\n<li><code>ss</code> 命令比 <code>netstat</code> 更快、提供更多信息，并且是 <code>netstat</code> 的推荐替代品。 </li>\n<li>示例:<ul>\n<li><code>ss -tulnp</code>: 显示所有TCP和UDP的监听端口及其对应的进程，并以数字形式显示地址和端口。</li>\n<li><code>ss -tan state established</code>: 显示所有已建立的TCP连接。 </li>\n<li><code>ss -tlp sport = :22</code>: 显示监听在SSH端口（22）的TCP连接及进程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong><code>netstat</code></strong> (打印网络连接、路由表、接口统计等 - 旧版 Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships - deprecated)<ul>\n<li><strong>用途:</strong> 显示网络连接、路由表、接口统计等信息。 </li>\n<li><strong>语法:</strong> <code>netstat [选项]</code> </li>\n<li>常用选项:<ul>\n<li><code>-t</code>: 显示TCP连接。 </li>\n<li><code>-u</code>: 显示UDP连接。 </li>\n<li><code>-l</code>: 显示监听套接字。 </li>\n<li><code>-p</code>: 显示与套接字关联的进程ID和名称。 </li>\n<li><code>-n</code>: 以数字形式显示地址和端口号。 </li>\n<li><code>-a</code>: 显示所有活动的连接和监听端口。 </li>\n<li><code>-r</code>: 显示内核路由表。 </li>\n<li><code>-i</code>: 显示网络接口统计信息。 </li>\n<li><code>-s</code>: 显示各协议的统计摘要。</li>\n</ul>\n</li>\n<li><strong>注意:</strong> <code>netstat</code> 已被 <code>ss</code> 命令取代，在新系统中可能未预装或不被推荐使用。 </li>\n<li><strong>示例:</strong> <code>sudo netstat -tulnp</code>: 显示所有TCP和UDP的监听端口、对应的进程，并以数字形式显示地址和端口。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-4-远程连接与文件传输-Remote-Connection-and-File-Transfer\"><a href=\"#6-4-远程连接与文件传输-Remote-Connection-and-File-Transfer\" class=\"headerlink\" title=\"6.4 远程连接与文件传输 (Remote Connection and File Transfer)\"></a>6.4 远程连接与文件传输 (Remote Connection and File Transfer)</h3><ul>\n<li><p><strong><code>ssh</code></strong> (安全Shell客户端 OpenSSH SSH client (remote login program))</p>\n<ul>\n<li><strong>用途:</strong> Secure Shell，用于安全地远程登录到另一台Linux/Unix服务器，并执行命令。所有通信都会被加密。 </li>\n<li><strong>语法:</strong> <code>ssh [选项] 用户名@主机名或IP地址 [命令]</code> </li>\n<li>常用选项:<ul>\n<li><code>-p 端口号</code>: 指定连接的远程SSH服务器端口 (默认为22)。 </li>\n<li><code>-i 身份文件路径</code>: 指定用于公钥认证的私钥文件路径。</li>\n<li><code>-X</code>: 启用X11转发，允许在本地显示远程GUI应用的界面。 </li>\n<li><code>-L 本地端口:目标主机:目标端口</code>: 设置本地端口转发。 </li>\n<li><code>-R 远程端口:目标主机:目标端口</code>: 设置远程端口转发。 </li>\n<li><code>-C</code>: 启用压缩，可以加快慢速网络下的传输速度。 </li>\n<li><code>-v</code>: 详细模式，显示连接过程的调试信息。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>ssh user@example.com</code>: 以用户 <code>user</code> 的身份登录到 <code>example.com</code>。</li>\n<li><code>ssh -p 2222 admin@192.168.1.100 \"df -h\"</code>: 通过2222端口以 <code>admin</code> 用户身份连接到 <code>192.168.1.100</code> 并执行 <code>df -h</code> 命令。</li>\n<li><code>ssh -L 8080:localhost:80 user@remote_server</code>: 将本地的8080端口转发到远程服务器的80端口。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>scp</code></strong> (安全复制文件 Secure copy (remote file copy program))</p>\n<ul>\n<li><strong>用途:</strong> Secure Copy Protocol，用于在本地主机和远程主机之间，或者两台远程主机之间安全地复制文件和目录。它使用SSH进行数据传输和认证。 </li>\n<li><strong>语法:</strong> <code>scp [选项][[用户名@]源主机:]源文件路径 [[用户名@]目标主机:]目标文件路径</code> </li>\n<li>常用选项:<ul>\n<li><code>-P 端口号</code> (注意是大写P): 指定远程主机的SSH端口。 </li>\n<li><code>-r</code>: 递归复制整个目录。 </li>\n<li><code>-i 身份文件路径</code>: 指定用于认证的私钥文件。 </li>\n<li><code>-C</code>: 启用压缩。 </li>\n<li><code>-v</code>: 显示详细的传输过程。 </li>\n<li><code>-l 带宽限制</code>: 限制传输带宽 (Kbit/s)。</li>\n</ul>\n</li>\n<li>示例:<ul>\n<li><code>scp local_document.pdf user@remote.server.com:/home/user/documents/</code>: 将本地文件 <code>local_document.pdf</code> 复制到远程服务器的指定目录。 </li>\n<li><code>scp -r user@source.server.com:/var/www/html/ /backup/website/</code>: 将远程服务器上的 <code>html</code> 目录递归复制到本地的 <code>/backup/website/</code> 目录。</li>\n<li><code>scp -P 2200 file.zip user@another.host:~/backups/</code>: 通过2200端口将 <code>file.zip</code> 复制到另一台远程主机的 <code>backups</code> 目录。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>sftp</code></strong> (安全文件传输程序 Secure File Transfer Program)</p>\n<ul>\n<li><p><strong>用途:</strong> 提供一个交互式的安全文件传输会话，类似于传统的FTP客户端，但所有操作都通过SSH加密通道进行。 </p>\n</li>\n<li><p><strong>语法:</strong> <code>sftp [选项][用户名@]主机名或IP地址</code> </p>\n</li>\n<li><p>常用选项:</p>\n<ul>\n<li><code>-P 端口号</code> (大写P): 指定远程SSH端口。 </li>\n<li><code>-b 批处理文件</code>: 从批处理文件中读取命令执行。 </li>\n<li><code>-B 缓冲区大小</code>: 指定传输缓冲区大小。</li>\n</ul>\n</li>\n<li><p>交互模式常用命令:</p>\n<p> (在 sftp&gt;提示符下使用) </p>\n<ul>\n<li><code>get 远程文件 [本地路径]</code>: 下载文件。</li>\n<li><code>put 本地文件 [远程路径]</code>: 上传文件。</li>\n<li><code>ls [远程路径]</code>: 列出远程目录内容。</li>\n<li><code>cd 远程路径</code>: 更改远程当前目录。</li>\n<li><code>lcd 本地路径</code>: 更改本地当前目录。</li>\n<li><code>pwd</code>: 显示远程当前工作目录。</li>\n<li><code>lpwd</code>: 显示本地当前工作目录。</li>\n<li><code>rm 远程文件</code>: 删除远程文件。</li>\n<li><code>mkdir 远程目录名</code>: 创建远程目录。</li>\n<li><code>rmdir 远程目录名</code>: 删除远程目录。</li>\n<li><code>help</code> 或 <code>?</code>: 显示帮助信息。</li>\n<li><code>exit</code> 或 <code>quit</code> 或 <code>bye</code>: 断开连接并退出SFTP。</li>\n</ul>\n</li>\n<li><p>示例:</p>\n<ul>\n<li><code>sftp user@fileserver.example.com</code>: 连接到SFTP服务器。</li>\n<li>(在 <code>sftp&gt;</code> 提示符下) <code>get important_data.zip /local/backups/</code>: 从远程服务器下载文件。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>ftp</code></strong> (文件传输协议客户端 - 旧版，不安全 File Transfer Protocol client - deprecated, insecure)</p>\n<ul>\n<li><p><strong>用途:</strong> 用于通过文件传输协议 (FTP) 在网络上的计算机之间传输文件。 </p>\n</li>\n<li><p><strong>内容:</strong> FTP传输数据和凭证（用户名、密码）时通常不加密，存在安全风险。推荐使用SFTP或SCP作为更安全的选择。 </p>\n</li>\n<li><p><strong>语法:</strong> <code>ftp [主机名或IP地址]</code> </p>\n</li>\n<li><p>交互模式常用命令:</p>\n<p> (在 ftp&gt; 提示符下使用) </p>\n<ul>\n<li><code>user 用户名 [密码]</code>: 登录。</li>\n<li><code>get 远程文件 [本地文件名]</code>: 下载文件。</li>\n<li><code>put 本地文件 [远程文件名]</code>: 上传文件。</li>\n<li><code>mget 远程文件模式</code>: 下载多个文件。</li>\n<li><code>mput 本地文件模式</code>: 上传多个文件。</li>\n<li><code>ls</code>: 列出远程目录内容。</li>\n<li><code>cd 远程目录</code>: 更改远程当前目录。</li>\n<li><code>pwd</code>: 显示远程当前工作目录。</li>\n<li><code>delete 远程文件</code>: 删除远程文件。</li>\n<li><code>mkdir 远程目录名</code>: 创建远程目录。</li>\n<li><code>binary</code>: 设置二进制传输模式 (传输非文本文件时必须)。</li>\n<li><code>ascii</code>: 设置ASCII传输模式 (传输文本文件时)。</li>\n<li><code>bye</code> 或 <code>quit</code>: 断开连接并退出FTP。</li>\n</ul>\n</li>\n<li><p>示例:</p>\n<ul>\n<li><code>ftp ftp.example.com</code>: 连接到FTP服务器 <code>ftp.example.com</code>。</li>\n<li>(在 <code>ftp&gt;</code> 提示符下) <code>get report.pdf</code>: 下载 <code>report.pdf</code> 文件。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong><code>wget</code></strong> (非交互式网络下载器 The non-interactive network downloader)</p>\n<ul>\n<li><strong>用途:</strong> 从Web服务器下载文件，支持HTTP, HTTPS, FTP协议。它是一个非交互式工具，可以在后台运行。 </li>\n<li><strong>语法:</strong> <code>wget [选项]......</code> </li>\n<li>常用选项:<ul>\n<li><code>-O 文件名</code>: 将下载内容保存为指定的文件名。 </li>\n<li><code>-P 目录</code>: 指定下载文件的保存目录。 </li>\n<li><code>-c</code>: 断点续传，继续下载未完成的文件。 </li>\n<li><code>-r</code>: 递归下载整个网站或目录。 </li>\n<li><code>-l 深度</code>: 递归下载时指定最大深度。</li>\n<li><code>-np</code>: 递归下载时不进入父目录。</li>\n<li><code>-k</code>: 转换链接，使下载的HTML文件可以在本地查看。 </li>\n<li><code>-p</code>: 下载所有显示HTML页面所需的文件，如图片等。 </li>\n<li><code>-b</code>: 后台下载。 </li>\n<li><code>-i 文件</code>: 从文件中读取URL列表进行下载。 </li>\n<li><code>--limit-rate=速度</code>: 限制下载速度 (例如 <code>100k</code>,</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"wget-非交互式网络下载器-The-non-interactive-network-downloader\"><a href=\"#wget-非交互式网络下载器-The-non-interactive-network-downloader\" class=\"headerlink\" title=\"wget (非交互式网络下载器 The non-interactive network downloader)\"></a><code>wget</code> (非交互式网络下载器 The non-interactive network downloader)</h3><p><strong>用途:</strong> 从Web服务器下载文件，支持HTTP, HTTPS, FTP协议。它是一个非交互式工具，可以在后台运行。</p>\n<p><strong>语法:</strong> <code>wget [选项]...... [URL...]</code></p>\n<p><strong>常用选项:</strong></p>\n<ul>\n<li><code>-O 文件名</code>: 将下载内容保存为指定的文件名。<ul>\n<li>示例: <code>wget -O latest.tar.gz https://example.com/latest-version.tar.gz</code></li>\n</ul>\n</li>\n<li><code>-P 目录</code>: 指定下载文件的保存目录。<ul>\n<li>示例: <code>wget -P /opt/downloads https://example.com/archive.zip</code></li>\n</ul>\n</li>\n<li><code>-c</code>: 断点续传，继续下载未完成的文件。<ul>\n<li>示例: <code>wget -c https://large.example.com/bigfile.iso</code></li>\n</ul>\n</li>\n<li><code>-r</code>: 递归下载整个网站或目录。<ul>\n<li>示例: <code>wget -r http://example.com/docs/</code></li>\n</ul>\n</li>\n<li><code>-l 深度</code>: 递归下载时指定最大深度。<ul>\n<li>示例: <code>wget -r -l 2 http://example.com/</code> (下载当前页和下一层链接)</li>\n</ul>\n</li>\n<li><code>-np</code>: 递归下载时不进入父目录。<ul>\n<li>示例: <code>wget -r -np http://example.com/parent/child/</code> (不会下载 <code>http://example.com/parent/</code> 的其他内容)</li>\n</ul>\n</li>\n<li><code>-k</code>: 转换链接，使下载的HTML文件可以在本地查看。通常与 <code>-r</code>一起使用。<ul>\n<li>示例: <code>wget -r -k http://example.com/</code></li>\n</ul>\n</li>\n<li><code>-p</code>: 下载所有显示HTML页面所需的文件，如图片、CSS等。通常与 <code>-r</code>一起使用。<ul>\n<li>示例: <code>wget -r -p http://example.com/page.html</code></li>\n</ul>\n</li>\n<li><code>-b</code>: 后台下载。日志默认输出到 <code>wget-log</code>。<ul>\n<li>示例: <code>wget -b https://large.example.com/bigfile.iso</code></li>\n</ul>\n</li>\n<li><code>-i 文件</code>: 从文件中读取URL列表进行下载，每行一个URL。<ul>\n<li>示例: <code>wget -i urls.txt</code> (其中 <code>urls.txt</code> 包含多个下载链接)</li>\n</ul>\n</li>\n<li><code>--limit-rate=速度</code>: 限制下载速度 (例如 100k, 1m)。<ul>\n<li>示例: <code>wget --limit-rate=200k https://example.com/file.zip</code></li>\n</ul>\n</li>\n<li><code>--tries=数字</code>: 设置重试次数 (0 表示无限)。<ul>\n<li>示例: <code>wget --tries=5 https://example.com/file.zip</code></li>\n</ul>\n</li>\n<li><code>--user-agent=\"字符串\"</code>: 设置自定义 User-Agent。<ul>\n<li>示例: <code>wget --user-agent=\"MyCustomBrowser/1.0\" https://example.com/</code></li>\n</ul>\n</li>\n<li><code>--no-check-certificate</code>: 不检查服务器的SSL证书 (不安全，慎用)。<ul>\n<li>示例: <code>wget --no-check-certificate https://self-signed.example.com/</code></li>\n</ul>\n</li>\n<li><code>--user=用户名 --password=密码</code>: FTP或HTTP认证。<ul>\n<li>示例: <code>wget --user=myuser --password=mypass ftp://ftp.example.com/file.dat</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"curl-Client-URL-请求库\"><a href=\"#curl-Client-URL-请求库\" class=\"headerlink\" title=\"curl (Client URL 请求库)\"></a><code>curl</code> (Client URL 请求库)</h3><p><strong>用途:</strong> 用于传输数据的命令行工具，支持多种协议，包括 HTTP, HTTPS, FTP, FTPS, SCP, SFTP, LDAP, SMTP 等。非常灵活，常用于API测试和自动化脚本。</p>\n<p><strong>语法:</strong> <code>curl [选项] [URL...]</code></p>\n<p><strong>常用选项:</strong></p>\n<ul>\n<li><code>-O</code>: 将输出写入与远程文件名相同的文件。<ul>\n<li>示例: <code>curl -O https://example.com/archive.zip</code> (保存为 <code>archive.zip</code>)</li>\n</ul>\n</li>\n<li><code>-o 文件名</code>: 将输出写入指定的文件名。<ul>\n<li>示例: <code>curl -o new_archive.zip https://example.com/archive.zip</code></li>\n</ul>\n</li>\n<li><code>-L</code>: 跟随HTTP重定向。<ul>\n<li>示例: <code>curl -L http://example.com</code></li>\n</ul>\n</li>\n<li><code>-I</code> 或 <code>--head</code>: 仅获取HTTP头信息。<ul>\n<li>示例: <code>curl -I https://example.com</code></li>\n</ul>\n</li>\n<li><code>-H \"头部信息\"</code>: 添加自定义HTTP头部。<ul>\n<li>示例: <code>curl -H \"Authorization: Bearer mytoken\" https://api.example.com/data</code></li>\n</ul>\n</li>\n<li><code>-X 请求方法</code>: 指定HTTP请求方法 (GET, POST, PUT, DELETE 等)。<ul>\n<li>示例 (POST): <code>curl -X POST -H \"Content-Type: application/json\" -d '{\"key\":\"value\"}' https://api.example.com/submit</code></li>\n</ul>\n</li>\n<li><code>-d \"数据\"</code> 或 <code>--data \"数据\"</code>: 发送HTTP POST请求的数据。<ul>\n<li>示例: <code>curl -d \"param1=value1&amp;param2=value2\" https://example.com/form</code></li>\n</ul>\n</li>\n<li><code>-F \"表单数据\"</code> 或 <code>--form \"表单数据\"</code>: 模拟multipart/form-data提交，常用于文件上传。<ul>\n<li>示例: <code>curl -F \"file=@/path/to/localfile.txt\" -F \"name=myfile\" https://example.com/upload</code></li>\n</ul>\n</li>\n<li><code>-u 用户名:密码</code>: 进行服务器认证。<ul>\n<li>示例: <code>curl -u myuser:mypassword https://api.example.com/protected</code></li>\n</ul>\n</li>\n<li><code>-s</code> 或 <code>--silent</code>: 静默模式，不显示进度条或错误信息。<ul>\n<li>示例: <code>STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" https://example.com)</code></li>\n</ul>\n</li>\n<li><code>-v</code> 或 <code>--verbose</code>: 显示详细的通信信息，包括请求和响应头。<ul>\n<li>示例: <code>curl -v https://example.com</code></li>\n</ul>\n</li>\n<li><code>-k</code> 或 <code>--insecure</code>: 允许连接到没有有效SSL证书的HTTPS站点 (不安全，慎用)。<ul>\n<li>示例: <code>curl -k https://self-signed.example.com</code></li>\n</ul>\n</li>\n<li><code>--connect-timeout 秒数</code>: 设置最大连接时间。<ul>\n<li>示例: <code>curl --connect-timeout 5 https://example.com</code></li>\n</ul>\n</li>\n<li><code>--max-time 秒数</code>: 设置允许操作完成的最大总时间。<ul>\n<li>示例: <code>curl --max-time 30 https://example.com/largefile</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"nslookup-Name-Server-Lookup-🌐\"><a href=\"#nslookup-Name-Server-Lookup-🌐\" class=\"headerlink\" title=\"nslookup (Name Server Lookup) 🌐\"></a><code>nslookup</code> (Name Server Lookup) 🌐</h3><p><strong>用途:</strong> 查询DNS域名服务器，获取域名对应的IP地址或其他DNS记录。</p>\n<p><strong>语法:</strong></p>\n<ul>\n<li>非交互模式: <code>nslookup [选项] [域名] [DNS服务器]</code></li>\n<li>交互模式: <code>nslookup</code> (进入提示符后输入域名或选项)</li>\n</ul>\n<p><strong>常用选项/查询类型:</strong></p>\n<ul>\n<li>默认查询A记录 (IP地址)。</li>\n<li><code>set type=mx</code>: 查询MX记录 (邮件交换服务器)。</li>\n<li><code>set type=ns</code>: 查询NS记录 (域名服务器)。</li>\n<li><code>set type=soa</code>: 查询SOA记录 (起始授权机构记录)。</li>\n<li><code>set type=txt</code>: 查询TXT记录 (文本记录)。</li>\n<li><code>set type=ptr</code>: 查询PTR记录 (反向DNS查找)。</li>\n<li><code>server &lt;DNS服务器IP&gt;</code>: 在交互模式下指定查询使用的DNS服务器。</li>\n</ul>\n<p><strong>示例:</strong></p>\n<ul>\n<li><p><code>nslookup example.com</code> (<a href=\"https://www.google.com/search?q=%E6%9F%A5%E8%AF%A2example.com%E7%9A%84A%E8%AE%B0%E5%BD%95\">https://www.google.com/search?q=%E6%9F%A5%E8%AF%A2example.com的A记录</a>)</p>\n</li>\n<li><p><code>nslookup example.com 8.8.8.8</code> (使用Google <a href=\"https://www.google.com/search?q=DNS%E6%9F%A5%E8%AF%A2example.com\">https://www.google.com/search?q=DNS%E6%9F%A5%E8%AF%A2example.com</a>)</p>\n</li>\n<li><p>交互模式:</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">nslookup\n&gt; server 8.8.8.8\n&gt; set type=mx\n&gt; google.com\n&gt; exit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>nslookup -type=mx google.com</code> (非交互式查询MX记录)</p>\n</li>\n<li><p><code>nslookup 8.8.4.4</code> (反向查询IP地址对应的主机名)</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"dig-Domain-Information-Groper-⛏️\"><a href=\"#dig-Domain-Information-Groper-⛏️\" class=\"headerlink\" title=\"dig (Domain Information Groper) ⛏️\"></a><code>dig</code> (Domain Information Groper) ⛏️</h3><p><strong>用途:</strong> 更强大和灵活的DNS查询工具，常用于DNS故障排除。</p>\n<p><strong>语法:</strong> <code>dig [@服务器] [域名] [查询类型] [选项]</code></p>\n<p><strong>常用选项/查询类型:</strong></p>\n<ul>\n<li>默认查询A记录。</li>\n<li><code>MX</code>: 查询邮件交换记录。</li>\n<li><code>NS</code>: 查询域名服务器记录。</li>\n<li><code>SOA</code>: 查询起始授权机构记录。</li>\n<li><code>TXT</code>: 查询文本记录。</li>\n<li><code>ANY</code>: 查询所有类型的记录。</li>\n<li><code>-x &lt;IP地址&gt;</code>: 进行反向DNS查询。</li>\n<li><code>+short</code>: 只显示简短的答案。</li>\n<li><code>+trace</code>: 显示从根域名服务器开始的完整解析路径。</li>\n<li><code>+noall +answer</code>: 只显示答案部分。</li>\n<li><code>@&lt;DNS服务器IP&gt;</code>: 指定查询使用的DNS服务器。</li>\n</ul>\n<p><strong>示例:</strong></p>\n<ul>\n<li><code>dig example.com</code></li>\n<li><code>dig example.com MX</code></li>\n<li><code>dig @8.8.8.8 example.com NS</code></li>\n<li><code>dig -x 8.8.4.4</code></li>\n<li><code>dig example.com +short</code></li>\n<li><code>dig example.com +trace</code></li>\n<li><code>dig example.com ANY +noall +answer</code></li>\n</ul>\n<hr>\n<h3 id=\"traceroute-追踪路由路径-🗺️\"><a href=\"#traceroute-追踪路由路径-🗺️\" class=\"headerlink\" title=\"traceroute (追踪路由路径) 🗺️\"></a><code>traceroute</code> (追踪路由路径) 🗺️</h3><p><strong>用途:</strong> 显示数据包从本地主机到目标主机所经过的路由路径，以及每一跳的延迟。</p>\n<p><strong>语法:</strong> <code>traceroute [选项] 主机名或IP地址</code></p>\n<p><strong>常用选项:</strong></p>\n<ul>\n<li><code>-n</code>: 不将IP地址解析为主机名，加快显示速度。</li>\n<li><code>-I</code>: 使用ICMP ECHO请求代替UDP数据报 (类似Windows的tracert)。</li>\n<li><code>-T</code>: 使用TCP SYN请求代替UDP数据报。</li>\n<li><code>-p 端口号</code>: 指定UDP或TCP的目标端口号。</li>\n<li><code>-m 最大跳数</code>: 设置最大跳数 (默认为30)。</li>\n<li><code>-q 查询次数</code>: 设置对每一跳发送的探测包数量 (默认为3)。</li>\n<li><code>-w 等待时间</code>: 设置等待探测包回复的超时时间 (秒)。</li>\n</ul>\n<p><strong>示例:</strong></p>\n<ul>\n<li><code>traceroute google.com</code></li>\n<li><code>traceroute -n 8.8.8.8</code></li>\n<li><code>traceroute -I example.com</code> (使用ICMP)</li>\n<li><code>traceroute -T -p 80 example.com</code> (<a href=\"https://www.google.com/search?q=%E8%BF%BD%E8%B8%AA%E5%88%B0example.com%E7%9A%84TCP\">https://www.google.com/search?q=%E8%BF%BD%E8%B8%AA%E5%88%B0example.com的TCP</a> 80端口)</li>\n</ul>\n<hr>\n<h3 id=\"route-显示-操作IP路由表-传统\"><a href=\"#route-显示-操作IP路由表-传统\" class=\"headerlink\" title=\"route (显示/操作IP路由表 - 传统)\"></a><code>route</code> (显示/操作IP路由表 - 传统)</h3><p><strong>用途:</strong> (传统工具，推荐使用 <code>ip route</code>) 显示和管理内核的IP路由表。</p>\n<p><strong>语法:</strong></p>\n<ul>\n<li><code>route</code> 或 <code>route -n</code> (显示路由表，-n以数字形式显示IP和端口)</li>\n<li><code>route add [-net|-host] 目标 [netmask Nm] [gw Gw] [metric M] [[dev] If]</code></li>\n<li><code>route del [-net|-host] 目标 [netmask Nm] [gw Gw] [metric M] [[dev] If]</code></li>\n</ul>\n<p><strong>常用选项/参数:</strong></p>\n<ul>\n<li><code>-n</code>: 以数字形式显示地址，不解析主机名。</li>\n<li><code>add</code>: 添加一条路由。</li>\n<li><code>del</code>: 删除一条路由。</li>\n<li><code>-net 目标网络</code>: 指定目标是一个网络。</li>\n<li><code>-host 目标主机</code>: 指定目标是一个主机。</li>\n<li><code>netmask Nm</code>: 指定网络的子网掩码。</li>\n<li><code>gw Gw</code>: 指定网关地址。</li>\n<li><code>dev If</code>: 指定路由通过哪个网络接口。</li>\n<li><code>metric M</code>: 设置路由的度量值 (成本)。</li>\n</ul>\n<p><strong>示例:</strong></p>\n<ul>\n<li><code>route -n</code> (显示当前路由表)</li>\n<li><code>route add default gw 192.168.1.1</code> (添加默认网关)</li>\n<li><code>route del default gw 192.168.1.1</code> (删除默认网关)</li>\n<li><code>route add -net 10.0.0.0 netmask 255.0.0.0 gw 192.168.0.1</code> (添加一个到10.0.0.0/8网络的静态路由)</li>\n<li><code>route del -net 10.0.0.0 netmask 255.0.0.0</code> (删除上述静态路由)</li>\n</ul>\n<hr>\n<h2 id=\"七、端口查看与防火墙管理\"><a href=\"#七、端口查看与防火墙管理\" class=\"headerlink\" title=\"七、端口查看与防火墙管理\"></a>七、端口查看与防火墙管理</h2><h3 id=\"ss-Socket-Statistics-SOCKET\"><a href=\"#ss-Socket-Statistics-SOCKET\" class=\"headerlink\" title=\"ss (Socket Statistics)  SOCKET\"></a><code>ss</code> (Socket Statistics)  SOCKET</h3><p><strong>用途:</strong> 用于转储套接字统计信息，可以显示比 <code>netstat</code> 更多的TCP和状态信息。它是 <code>netstat</code> 的现代替代品。</p>\n<p><strong>语法:</strong> <code>ss [选项]</code></p>\n<p><strong>常用选项:</strong></p>\n<ul>\n<li><code>-t</code>: 显示TCP套接字。</li>\n<li><code>-u</code>: 显示UDP套接字。</li>\n<li><code>-l</code>: 显示监听状态的套接字。</li>\n<li><code>-p</code>: 显示使用套接字的进程。</li>\n<li><code>-n</code>: 不解析服务名称，直接显示端口号。</li>\n<li><code>-a</code>: 显示所有套接字 (监听和非监听)。</li>\n<li><code>-e</code>: 显示详细的套接字信息。</li>\n<li><code>-o</code>: 显示计时器信息。</li>\n<li>state &lt;状态&gt;: 过滤特定状态的连接，如 <code>established, listen, time-wait</code>。<ul>\n<li>例如: <code>ss state established</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>示例:</strong></p>\n<ul>\n<li><code>ss -tulnp</code> (最常用组合：显示所有TCP和UDP监听端口及其进程，不解析名称)</li>\n<li><code>ss -tan</code> (显示所有TCP连接，不解析名称)</li>\n<li><code>ss -s</code> (显示套接字使用摘要)</li>\n<li><code>ss -t -a dst :22</code> (显示所有到22端口的TCP连接)</li>\n<li><code>ss -t -a src 192.168.1.100:http</code> (显示源自192.168.1.100的HTTP TCP连接)</li>\n</ul>\n<hr>\n<h3 id=\"netstat-Network-Statistics-传统\"><a href=\"#netstat-Network-Statistics-传统\" class=\"headerlink\" title=\"netstat (Network Statistics - 传统)\"></a><code>netstat</code> (Network Statistics - 传统)</h3><p><strong>用途:</strong> (传统工具，推荐使用 <code>ss</code>) 显示网络连接、路由表、接口统计等信息。</p>\n<p><strong>语法:</strong> <code>netstat [选项]</code></p>\n<p><strong>常用选项:</strong></p>\n<ul>\n<li><code>-t</code>: 显示TCP连接。</li>\n<li><code>-u</code>: 显示UDP连接。</li>\n<li><code>-l</code>: 显示监听状态的套接字。</li>\n<li><code>-p</code>: 显示使用套接字的进程PID和名称 (通常需要root权限)。</li>\n<li><code>-n</code>: 以数字形式显示地址和端口号，不解析名称。</li>\n<li><code>-a</code>: 显示所有活动的连接和监听端口。</li>\n<li><code>-r</code>: 显示路由表 (类似 <code>route -n</code>)。</li>\n<li><code>-i</code>: 显示网络接口统计信息 (类似 <code>ifconfig</code> 或 <code>ip -s link</code>)。</li>\n<li><code>-c</code>: 持续显示信息。</li>\n<li><code>-e</code>: 显示扩展信息。</li>\n</ul>\n<p><strong>示例:</strong></p>\n<ul>\n<li><code>netstat -tulnp</code> (最常用组合：显示所有TCP和UDP监听端口及其进程，不解析名称)</li>\n<li><code>netstat -an</code> (显示所有活动的连接和监听端口，不解析名称)</li>\n<li><code>netstat -rn</code> (显示路由表)</li>\n<li><code>netstat -i</code> (显示网络接口)</li>\n<li><code>netstat -antp | grep ESTABLISHED</code> (显示所有已建立的TCP连接及其进程)</li>\n</ul>\n<hr>\n<h3 id=\"iptables-IPv4-Packet-Filtering-and-NAT-🔥🧱\"><a href=\"#iptables-IPv4-Packet-Filtering-and-NAT-🔥🧱\" class=\"headerlink\" title=\"iptables (IPv4 Packet Filtering and NAT) 🔥🧱\"></a><code>iptables</code> (IPv4 Packet Filtering and NAT) 🔥🧱</h3><p><strong>用途:</strong> Linux内核防火墙 <code>netfilter</code> 的用户空间命令行工具，用于配置IPv4数据包过滤规则、NAT和包处理。功能强大但语法复杂。</p>\n<p><strong>基本概念:</strong></p>\n<ul>\n<li><p>Tables (表):</p>\n<ul>\n<li><code>filter</code>: 默认表，用于数据包过滤 (INPUT, OUTPUT, FORWARD 链)。</li>\n<li><code>nat</code>: 用于网络地址转换 (PREROUTING, POSTROUTING, OUTPUT 链)。</li>\n<li><code>mangle</code>: 用于修改IP头字段 (所有链)。</li>\n<li><code>raw</code>: 用于配置豁免，使数据包不经过连接跟踪。</li>\n</ul>\n</li>\n<li><p>Chains (链):</p>\n<p> 规则的有序列表。</p>\n<ul>\n<li><code>INPUT</code>: 处理发往本机的入站数据包。</li>\n<li><code>OUTPUT</code>: 处理本机发出的出站数据包。</li>\n<li><code>FORWARD</code>: 处理流经本机的转发数据包。</li>\n<li><code>PREROUTING</code>: 在路由决策之前处理数据包 (常用于DNAT)。</li>\n<li><code>POSTROUTING</code>: 在路由决策之后，数据包即将发出时处理 (常用于SNAT)。</li>\n</ul>\n</li>\n<li><p>Targets (目标):</p>\n<p> 规则匹配后执行的动作。</p>\n<ul>\n<li><code>ACCEPT</code>: 接受数据包。</li>\n<li><code>DROP</code>: 丢弃数据包 (不响应)。</li>\n<li><code>REJECT</code>: 拒绝数据包 (通常会返回错误信息)。</li>\n<li><code>LOG</code>: 记录数据包信息。</li>\n<li><code>SNAT</code>: 源地址转换。</li>\n<li><code>DNAT</code>: 目标地址转换。</li>\n<li><code>MASQUERADE</code>: 动态源地址转换 (常用于共享上网)。</li>\n</ul>\n</li>\n</ul>\n<p><strong>语法 (通用):</strong> <code>iptables [-t 表名] 命令 链名 匹配条件 -j 目标</code></p>\n<p><strong>常用命令:</strong></p>\n<ul>\n<li><code>-L [链名]</code>: 列出规则。<ul>\n<li><code>-v</code>: 显示详细信息 (包和字节计数器)。</li>\n<li><code>-n</code>: 数字格式显示IP和端口。</li>\n<li><code>--line-numbers</code>: 显示规则编号。</li>\n</ul>\n</li>\n<li><code>-A 链名</code>: 追加新规则到链尾。</li>\n<li><code>-I 链名 [规则编号]</code>: 插入新规则到指定位置 (默认链首)。</li>\n<li><code>-D 链名 规则编号或规则定义</code>: 删除规则。</li>\n<li><code>-R 链名 规则编号 规则定义</code>: 替换规则。</li>\n<li><code>-F [链名]</code>: 清空链中的所有规则。</li>\n<li><code>-Z [链名]</code>: 清零链中所有规则的包和字节计数器。</li>\n<li><code>-P 链名 目标</code>: 设置链的默认策略 (ACCEPT, DROP)。</li>\n<li><code>-N 链名</code>: 创建用户自定义链。</li>\n<li><code>-X [链名]</code>: 删除用户自定义空链。</li>\n<li><code>-E 旧链名 新链名</code>: 重命名用户自定义链。</li>\n</ul>\n<p><strong>常用匹配条件:</strong></p>\n<ul>\n<li><code>-p 协议</code>: 指定协议 (tcp, udp, icmp, all)。</li>\n<li><code>-s 源地址/掩码</code>: 指定源IP地址或网络。</li>\n<li><code>-d 目标地址/掩码</code>: 指定目标IP地址或网络。</li>\n<li><code>-i 输入接口</code>: 指定数据包进入的网络接口。</li>\n<li><code>-o 输出接口</code>: 指定数据包流出的网络接口。</li>\n<li><code>--sport 源端口</code>: 指定源端口 (需与 <code>-p tcp</code> 或 <code>-p udp</code> 配合)。</li>\n<li><code>--dport 目标端口</code>: 指定目标端口。</li>\n<li><code>-m 模块名 --模块选项</code>: 使用扩展模块 (如 <code>state, conntrack, multiport, tcp, udp</code>)。<ul>\n<li><code>-m state --state NEW,ESTABLISHED,RELATED</code>: 匹配连接状态。</li>\n<li><code>-m multiport --dports 22,80,443</code>: 匹配多个目标端口。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例:</strong></p>\n<ol>\n<li><strong>查看规则:</strong><ul>\n<li><code>sudo iptables -L -n -v</code> (查看filter表所有链的规则)</li>\n<li><code>sudo iptables -t nat -L -n -v --line-numbers</code> (查看nat表规则并显示行号)</li>\n</ul>\n</li>\n<li><strong>设置默认策略:</strong> (通常先允许所有传出，拒绝所有传入和转发)<ul>\n<li><code>sudo iptables -P INPUT DROP</code></li>\n<li><code>sudo iptables -P FORWARD DROP</code></li>\n<li><code>sudo iptables -P OUTPUT ACCEPT</code></li>\n</ul>\n</li>\n<li><strong>允许特定端口/服务:</strong><ul>\n<li><code>sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT</code> (允许SSH)</li>\n<li><code>sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT</code> (允许HTTP)</li>\n<li><code>sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT</code> (允许HTTPS)</li>\n<li><code>sudo iptables -A INPUT -i lo -j ACCEPT</code> (允许来自本地回环接口的所有流量)</li>\n<li><code>sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</code> (允许已建立和相关的连接)</li>\n</ul>\n</li>\n<li><strong>允许特定IP:</strong><ul>\n<li><code>sudo iptables -A INPUT -s 192.168.1.100 -j ACCEPT</code></li>\n</ul>\n</li>\n<li><strong>阻止特定IP:</strong><ul>\n<li><code>sudo iptables -A INPUT -s 1.2.3.4 -j DROP</code> (阻止单个IP)</li>\n<li><code>sudo iptables -A INPUT -s 1.2.3.0/24 -j REJECT</code> (拒绝整个子网)</li>\n</ul>\n</li>\n<li><strong>删除规则:</strong><ul>\n<li><code>sudo iptables -D INPUT 3</code> (删除INPUT链中编号为3的规则)</li>\n<li><code>sudo iptables -D INPUT -s 1.2.3.4 -j DROP</code> (按规则定义删除)</li>\n</ul>\n</li>\n<li><strong>清空规则:</strong><ul>\n<li><code>sudo iptables -F INPUT</code> (清空INPUT链)</li>\n<li><code>sudo iptables -F</code> (清空filter表所有链)</li>\n<li><code>sudo iptables -t nat -F</code> (清空nat表所有链)</li>\n</ul>\n</li>\n<li><strong>NAT示例 (SNAT/MASQUERADE - 共享上网):</strong><ul>\n<li>假设 <code>eth0</code> 是外网接口，<code>eth1</code> 是内网接口 (内网IP段 <code>192.168.1.0/24</code>)。</li>\n<li><code>sudo sysctl -w net.ipv4.ip_forward=1</code> (开启IP转发)</li>\n<li><code>sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></li>\n<li><code>sudo iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT</code></li>\n<li><code>sudo iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT</code></li>\n</ul>\n</li>\n<li><strong>NAT示例 (DNAT - 端口转发):</strong><ul>\n<li>将外网接口 <code>eth0</code> 的TCP 8080端口转发到内网服务器 <code>192.168.1.100</code> 的80端口。</li>\n<li><code>sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 8080 -j DNAT --to-destination 192.168.1.100:80</code></li>\n<li><code>sudo iptables -A FORWARD -p tcp -d 192.168.1.100 --dport 80 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT</code></li>\n</ul>\n</li>\n</ol>\n<p><strong>保存和恢复规则:</strong></p>\n<ul>\n<li>规则默认在重启后丢失。</li>\n<li><strong>保存:</strong> <code>sudo iptables-save &gt; /etc/iptables/rules.v4</code> (Debian/Ubuntu，需安装 <code>iptables-persistent</code>) <code>sudo ip6tables-save &gt; /etc/iptables/rules.v6</code> 在RHEL/CentOS系统上，通常使用 <code>systemctl enable iptables</code> 和 <code>systemctl start iptables</code> (需要 <code>iptables-services</code> 包)，规则保存在 <code>/etc/sysconfig/iptables</code>。</li>\n<li><strong>恢复:</strong> <code>sudo iptables-restore &lt; /etc/iptables/rules.v4</code></li>\n<li><code>iptables-persistent</code> (Debian/Ubuntu):<ul>\n<li>安装: <code>sudo apt install iptables-persistent</code></li>\n<li>保存当前规则: <code>sudo netfilter-persistent save</code> (或 <code>sudo /etc/init.d/netfilter-persistent save</code>)</li>\n<li>系统启动时会自动加载。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"ufw-Uncomplicated-Firewall-🛡️\"><a href=\"#ufw-Uncomplicated-Firewall-🛡️\" class=\"headerlink\" title=\"ufw (Uncomplicated Firewall) 🛡️\"></a><code>ufw</code> (Uncomplicated Firewall) 🛡️</h3><p><strong>用途:</strong> 一个用户友好的 <code>iptables</code> 前端，旨在简化防火墙配置。</p>\n<p><strong>语法:</strong> <code>sudo ufw [选项] 命令</code></p>\n<p><strong>常用命令与选项:</strong></p>\n<ul>\n<li><p><strong>状态管理:</strong></p>\n<ul>\n<li><code>sudo ufw enable</code>: 启用防火墙 (并设置开机自启)。</li>\n<li><code>sudo ufw disable</code>: 禁用防火墙。</li>\n<li><code>sudo ufw status</code>: 查看防火墙状态和规则。</li>\n<li><code>sudo ufw status numbered</code>: 查看规则并显示编号。</li>\n<li><code>sudo ufw status verbose</code>: 查看详细状态。</li>\n<li><code>sudo ufw reload</code>: 重载防火墙规则 (不中断现有连接)。</li>\n<li><code>sudo ufw reset</code>: 重置防火墙到默认状态 (会禁用防火墙)。</li>\n</ul>\n</li>\n<li><p><strong>默认策略:</strong></p>\n<ul>\n<li><code>sudo ufw default deny incoming</code>: 拒绝所有入站连接 (推荐)。</li>\n<li><code>sudo ufw default allow outgoing</code>: 允许所有出站连接 (推荐)。</li>\n<li><code>sudo ufw default deny outgoing</code>: 拒绝所有出站连接。</li>\n<li><code>sudo ufw default deny routed</code>: 拒绝所有转发的包。</li>\n</ul>\n</li>\n<li><p><strong>规则管理 (allow/deny/reject/limit):</strong></p>\n<ul>\n<li><p><code>sudo ufw allow &lt;端口号&gt;[/协议]</code></p>\n<ul>\n<li>示例: <code>sudo ufw allow 22/tcp</code> (允许TCP 22端口)</li>\n<li>示例: <code>sudo ufw allow 53</code> (允许TCP和UDP 53端口)</li>\n</ul>\n</li>\n<li><p><code>sudo ufw allow &lt;服务名&gt;</code></p>\n<p> (服务名在 <code>/etc/services</code>中定义)</p>\n<ul>\n<li>示例: <code>sudo ufw allow ssh</code></li>\n<li>示例: <code>sudo ufw allow http</code></li>\n<li>示例: <code>sudo ufw allow https</code></li>\n</ul>\n</li>\n<li><p><code>sudo ufw deny &lt;端口号&gt;[/协议]</code></p>\n<ul>\n<li>示例: <code>sudo ufw deny 3306</code> (拒绝访问MySQL端口)</li>\n</ul>\n</li>\n<li><p><code>sudo ufw reject &lt;端口号&gt;[/协议]</code> (拒绝并返回消息)</p>\n</li>\n<li><p><code>sudo ufw limit &lt;端口号&gt;[/协议]</code></p>\n<p> (限制连接频率，如SSH，防止暴力破解：如果在30秒内尝试连接6次以上，则拒绝连接)</p>\n<ul>\n<li>示例: <code>sudo ufw limit ssh</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>基于源/目标IP的规则:</strong></p>\n<ul>\n<li><code>sudo ufw allow from &lt;IP地址&gt;</code><ul>\n<li>示例: <code>sudo ufw allow from 192.168.1.100</code></li>\n</ul>\n</li>\n<li><code>sudo ufw allow from &lt;IP地址&gt; to any port &lt;端口号&gt;</code><ul>\n<li>示例: <code>sudo ufw allow from 192.168.1.100 to any port 22 proto tcp</code></li>\n</ul>\n</li>\n<li><code>sudo ufw deny from &lt;IP地址&gt;</code><ul>\n<li>示例: <code>sudo ufw deny from 1.2.3.4</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>基于网络接口的规则:</strong></p>\n<ul>\n<li><code>sudo ufw allow in on &lt;接口名&gt; to any port &lt;端口号&gt;</code><ul>\n<li>示例: <code>sudo ufw allow in on eth1 to any port 80</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>删除规则:</strong></p>\n<ul>\n<li><p><code>sudo ufw delete &lt;规则定义&gt;</code></p>\n<ul>\n<li>示例: <code>sudo ufw delete allow 80</code></li>\n<li>示例: <code>sudo ufw delete allow from 1.2.3.4</code></li>\n</ul>\n</li>\n<li><p><code>sudo ufw delete &lt;规则编号&gt;</code></p>\n<p> (通过 <code>sudo ufw status numbered</code> 获取编号)</p>\n<ul>\n<li>示例: <code>sudo ufw delete 3</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>应用程序配置文件:</strong></p>\n<ul>\n<li><p><code>ufw</code> 可以使用应用程序配置文件 (位于 <code>/etc/ufw/applications.d</code>)。</p>\n</li>\n<li><p><code>sudo ufw app list</code>: 列出可用的应用程序配置文件。</p>\n</li>\n<li><p><code>sudo ufw app info &lt;应用名&gt;</code>: 显示应用程序配置文件的详细信息。</p>\n</li>\n<li><p><code>sudo ufw allow &lt;应用名&gt;</code></p>\n<p>: 允许应用程序配置文件中定义的所有规则。</p>\n<ul>\n<li>示例: <code>sudo ufw allow 'Nginx Full'</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>日志:</strong></p>\n<ul>\n<li><code>sudo ufw logging on [low|medium|high|full]</code></li>\n<li><code>sudo ufw logging off</code></li>\n<li>日志通常记录在 <code>/var/log/ufw.log</code>。</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例流程:</strong></p>\n<ol>\n<li><code>sudo ufw default deny incoming</code></li>\n<li><code>sudo ufw default allow outgoing</code></li>\n<li><code>sudo ufw allow ssh</code> (或 <code>sudo ufw allow 22/tcp</code>)</li>\n<li><code>sudo ufw allow http</code> (或 <code>sudo ufw allow 80/tcp</code>)</li>\n<li><code>sudo ufw allow https</code> (或 <code>sudo ufw allow 443/tcp</code>)</li>\n<li><code>sudo ufw enable</code></li>\n<li><code>sudo ufw status</code></li>\n</ol>\n<hr>\n<h3 id=\"firewall-cmd-Firewalld-Command-Line-Client-🔥-Zones\"><a href=\"#firewall-cmd-Firewalld-Command-Line-Client-🔥-Zones\" class=\"headerlink\" title=\"firewall-cmd (Firewalld Command Line Client) 🔥 Zones\"></a><code>firewall-cmd</code> (Firewalld Command Line Client) 🔥 Zones</h3><p><strong>用途:</strong> <code>firewalld</code> 服务的命令行客户端，是 RHEL/CentOS 7+ 和 Fedora 等发行版的默认防火墙管理工具。它使用 “区域 (zones)” 和 “服务 (services)” 的概念。</p>\n<p><strong>基本概念:</strong></p>\n<ul>\n<li><strong>Zones (区域):</strong> 网络连接可以被分配到不同的区域，每个区域有自己独立的防火墙规则集。预定义区域如 <code>public</code>, <code>home</code>, <code>work</code>, <code>dmz</code>, <code>internal</code>, <code>external</code>, <code>block</code>, <code>drop</code>, <code>trusted</code>。</li>\n<li><strong>Services (服务):</strong> 预定义的 XML 文件，描述了服务所需的端口和协议 (如 <code>ssh</code>, <code>http</code>)。</li>\n<li>Permanent vs Runtime Configuration:<ul>\n<li>默认情况下，<code>firewall-cmd</code> 修改的是运行时配置，重启后失效。</li>\n<li>添加 <code>--permanent</code> 选项可以修改永久配置，但需要 <code>firewall-cmd --reload</code> 或重启 <code>firewalld</code> 服务才能生效。</li>\n</ul>\n</li>\n</ul>\n<p><strong>语法:</strong> <code>sudo firewall-cmd [选项] [操作]</code></p>\n<p><strong>常用命令与选项:</strong></p>\n<ul>\n<li><p><strong>状态与管理:</strong></p>\n<ul>\n<li><code>sudo systemctl status firewalld</code>: 查看 <code>firewalld</code> 服务状态。</li>\n<li><code>sudo systemctl start firewalld</code>: 启动服务。</li>\n<li><code>sudo systemctl stop firewalld</code>: 停止服务。</li>\n<li><code>sudo systemctl enable firewalld</code>: 设置开机自启。</li>\n<li><code>sudo systemctl disable firewalld</code>: 禁止开机自启。</li>\n<li><code>sudo firewall-cmd --state</code>: 查看防火墙运行状态。</li>\n<li><code>sudo firewall-cmd --reload</code>: 重载防火墙规则 (不中断现有连接，使永久配置生效)。</li>\n<li><code>sudo firewall-cmd --complete-reload</code>: 完全重载 (中断现有连接)。</li>\n</ul>\n</li>\n<li><p><strong>区域管理:</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --get-default-zone</code>: 获取默认区域。</li>\n<li><code>sudo firewall-cmd --set-default-zone=&lt;区域名&gt;</code>: 设置默认区域。</li>\n<li><code>sudo firewall-cmd --get-active-zones</code>: 获取当前活动的区域及其绑定的接口。</li>\n<li><code>sudo firewall-cmd --get-zones</code>: 列出所有可用区域。</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --list-all</code>: 列出指定区域的所有配置。</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --add-interface=&lt;接口名&gt;</code>: 将接口添加到指定区域 (运行时)。</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --add-interface=&lt;接口名&gt; --permanent</code>: 永久添加。</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --change-interface=&lt;接口名&gt;</code>: 修改接口所属区域。</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --remove-interface=&lt;接口名&gt;</code>: 从区域移除接口。</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --add-source=&lt;IP或子网&gt;</code>: 将源IP/子网添加到区域。</li>\n</ul>\n</li>\n<li><p><strong>服务管理:</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --get-services</code>: 列出所有预定义的服务。</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --add-service=&lt;服务名&gt;</code> (运行时)</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --add-service=&lt;服务名&gt; --permanent</code> (永久)<ul>\n<li>示例: <code>sudo firewall-cmd --permanent --zone=public --add-service=http</code></li>\n</ul>\n</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --remove-service=&lt;服务名&gt;</code> (运行时)</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --remove-service=&lt;服务名&gt; --permanent</code> (永久)</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --list-services</code>: 列出区域中允许的服务。</li>\n</ul>\n<p><strong>端口管理:</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --add-port=&lt;端口号&gt;/&lt;协议&gt;</code> (运行时)</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --add-port=&lt;端口号&gt;/&lt;协议&gt; --permanent</code>(永久)<ul>\n<li>示例: <code>sudo firewall-cmd --permanent --zone=public --add-port=8080/tcp</code></li>\n</ul>\n</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --remove-port=&lt;端口号&gt;/&lt;协议&gt;</code> (运行时)</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --remove-port=&lt;端口号&gt;/&lt;协议&gt; --permanent</code> (永久)</li>\n<li><code>sudo firewall-cmd --zone=&lt;区域名&gt; --list-ports</code>: 列出区域中允许的端口。</li>\n</ul>\n</li>\n<li><p><strong>Panic Mode:</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --panic-on</code>: 紧急模式，丢弃所有入站和出站数据包。</li>\n<li><code>sudo firewall-cmd --panic-off</code>: 关闭紧急模式。</li>\n<li><code>sudo firewall-cmd --query-panic</code>: 查询紧急模式状态。</li>\n</ul>\n</li>\n<li><p><strong>Direct Rules (直接规则 - 类似iptables语法，不推荐常规使用):</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --direct --add-rule ipv4 filter INPUT 0 -p tcp --dport 22 -j ACCEPT</code></li>\n</ul>\n</li>\n<li><p><strong>Rich Rules (富规则 - 更灵活的规则定义):</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --permanent --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"192.168.1.0/24\" service name=\"ssh\" accept'</code></li>\n<li><code>sudo firewall-cmd --permanent --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"1.2.3.4\" reject'</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>示例流程 (public区域):</strong></p>\n<ol>\n<li><code>sudo systemctl start firewalld</code></li>\n<li><code>sudo systemctl enable firewalld</code></li>\n<li><code>sudo firewall-cmd --set-default-zone=public</code> (通常public是默认)</li>\n<li><code>sudo firewall-cmd --permanent --zone=public --add-service=ssh</code></li>\n<li><code>sudo firewall-cmd --permanent --zone=public --add-service=http</code></li>\n<li><code>sudo firewall-cmd --permanent --zone=public --add-service=https</code></li>\n<li><code>sudo firewall-cmd --permanent --zone=public --add-port=8080-8090/tcp</code> (允许一个端口范围)</li>\n<li><code>sudo firewall-cmd --reload</code></li>\n<li><code>sudo firewall-cmd --zone=public --list-all</code></li>\n</ol>\n<hr>\n<h2 id=\"八、常用配置文件与文本编辑器\"><a href=\"#八、常用配置文件与文本编辑器\" class=\"headerlink\" title=\"八、常用配置文件与文本编辑器\"></a>八、常用配置文件与文本编辑器</h2><h3 id=\"常见重要配置文件-⚙️\"><a href=\"#常见重要配置文件-⚙️\" class=\"headerlink\" title=\"常见重要配置文件 ⚙️\"></a>常见重要配置文件 ⚙️</h3><p>以下是一些Linux系统中常见的配置文件及其典型路径和用途：</p>\n<ul>\n<li><p><strong>/etc/passwd</strong>:</p>\n<ul>\n<li><strong>用途</strong>: 存储用户账户信息（如用户名、用户ID (UID)、组ID (GID)、用户描述、家目录路径、默认shell）。密码字段通常是一个<code>x</code>，表示加密后的密码存储在<code>/etc/shadow</code>中。</li>\n<li><strong>格式</strong>: <code>username:password_placeholder:UID:GID:comment:home_directory:login_shell</code></li>\n</ul>\n</li>\n<li><p><strong>/etc/shadow</strong>:</p>\n<ul>\n<li><p><strong>用途</strong>: 安全地存储用户加密后的密码和密码老化信息。此文件通常只有root用户可读。</p>\n</li>\n<li><p>格式: </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">username:encrypted_password:last_password_change_date:min_password_age:max_password_age:warning_period:inactivity_period:expiration_date:reserved_field<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>encrypted_password</code>: <code>!</code> 或 <code>*</code> 表示账户被锁定或没有密码。</li>\n<li>日期字段通常是从1970年1月1日开始的天数。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>/etc/group</strong>:</p>\n<ul>\n<li><strong>用途</strong>: 存储用户组信息（组名、组ID (GID)、组成员列表）。</li>\n<li><strong>格式</strong>: <code>group_name:password_placeholder:GID:user_list_comma_separated</code></li>\n</ul>\n</li>\n<li><p><strong>/etc/fstab</strong> (Filesystem Table):</p>\n<ul>\n<li><p><strong>用途</strong>: 定义磁盘分区、各种块设备或远程文件系统如何在系统启动时挂载到文件系统中，或者在需要时由 <code>mount -a</code> 命令挂载。</p>\n</li>\n<li><p>格式: </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">device_spec mount_point fstype options dump pass_num<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>device_spec</code>: 设备（如<code>/dev/sda1</code>）或UUID（如<code>UUID=xxxxxxxx-xxxx...</code>）</li>\n<li><code>mount_point</code>: 挂载点（如<code>/</code>、<code>/home</code>、<code>/var</code>）</li>\n<li><code>fstype</code>: 文件系统类型（如<code>ext4</code>、<code>xfs</code>、<code>ntfs</code>、<code>nfs</code>）</li>\n<li><code>options</code>: 挂载选项（如<code>defaults</code>、<code>rw</code>、<code>ro</code>、<code>noatime</code>）</li>\n<li><code>dump</code>: <code>dump</code>工具是否备份（0或1）</li>\n<li><code>pass_num</code>: <code>fsck</code>检查文件系统的顺序（0表示不检查，1表示根文件系统，2表示其他）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>/etc/hosts</strong>:</p>\n<ul>\n<li><p><strong>用途</strong>: 提供静态的IP地址到主机名的映射。在DNS解析之前，系统会检查此文件。常用于本地测试或强制解析特定域名到特定IP。</p>\n</li>\n<li><p>格式: </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">IP_address canonical_hostname <span class=\"token punctuation\">[</span>aliases<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>示例: <code>127.0.0.1 localhost loopback</code></li>\n<li>示例: <code>192.168.1.100 myserver myapp.local</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>/etc/resolv.conf</strong>:</p>\n<ul>\n<li><strong>用途</strong>: 配置DNS解析器，指定域名服务器（nameserver）的IP地址以及搜索域（search domain）。在许多现代发行版中，此文件可能由网络管理服务（如NetworkManager或systemd-resolved）动态生成和管理，不建议手动编辑。</li>\n<li>格式:<ul>\n<li><code>nameserver IP_address_of_DNS_server</code></li>\n<li><code>search domain1.com domain2.net</code></li>\n<li><code>options timeout:1</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>~/.bashrc</strong> (用户特定):</p>\n<ul>\n<li><strong>用途</strong>: Bash shell的用户特定配置文件。当用户启动一个新的交互式非登录shell时（如打开一个新的终端窗口），此文件中的命令会被执行。常用于设置别名、环境变量、自定义提示符等。</li>\n<li><strong>位置</strong>: 用户家目录下 (<code>~</code> 表示家目录，如 <code>/home/username/.bashrc</code>)</li>\n</ul>\n</li>\n<li><p><strong>/etc/profile</strong> (系统全局):</p>\n<ul>\n<li><strong>用途</strong>: Bash (及其他Bourne兼容shell) 的系统全局配置文件。当任何用户登录系统时（登录shell），此文件中的命令会被执行。它通常会调用 <code>/etc/profile.d/</code> 目录下的脚本。</li>\n<li><strong>注意</strong>: 修改此文件会影响系统所有用户。</li>\n</ul>\n</li>\n<li><p><strong>/etc/profile.d/*.sh</strong>:</p>\n<ul>\n<li><strong>用途</strong>: <code>/etc/profile</code> 通常会执行此目录下的所有 <code>.sh</code> 脚本，用于模块化地配置系统范围的环境变量和启动程序。</li>\n</ul>\n</li>\n<li><p><strong>/etc/bash.bashrc</strong> (系统全局，某些发行版):</p>\n<ul>\n<li><strong>用途</strong>: 系统全局的bashrc文件，为所有用户的交互式非登录shell执行。</li>\n</ul>\n</li>\n<li><p><strong>/var/log/syslog</strong> (Debian/Ubuntu) 或 <strong>/var/log/messages</strong> (RHEL/CentOS):</p>\n<ul>\n<li><strong>用途</strong>: 系统主要的日志文件，记录了内核消息、系统服务消息、以及各种应用程序的日志。是故障排除的重要来源。</li>\n<li><strong>管理</strong>: 通常由 <code>rsyslogd</code> 或 <code>syslog-ng</code> 服务管理。</li>\n</ul>\n</li>\n<li><p><strong>/etc/ssh/sshd_config</strong>:</p>\n<ul>\n<li><strong>用途</strong>: OpenSSH服务器 (sshd) 的配置文件。控制SSH服务的行为，如监听端口、是否允许root登录、认证方法等。</li>\n</ul>\n</li>\n<li><p><strong>/etc/sysctl.conf</strong>:</p>\n<ul>\n<li><strong>用途</strong>: 用于在系统启动时配置内核参数。<code>sysctl -p</code> 可以加载此文件中的设置。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"常用文本编辑器-📝\"><a href=\"#常用文本编辑器-📝\" class=\"headerlink\" title=\"常用文本编辑器 📝\"></a>常用文本编辑器 📝</h3><p>在Linux命令行下，最常用的文本编辑器是 <code>vi</code> (或其增强版 <code>vim</code>) 和 <code>nano</code>。</p>\n<h4 id=\"nano\"><a href=\"#nano\" class=\"headerlink\" title=\"nano\"></a><code>nano</code></h4><p><code>nano</code> 是一个简单易用的命令行文本编辑器，适合初学者。屏幕底部会显示常用快捷键。</p>\n<p><strong>启动:</strong></p>\n<ul>\n<li><code>nano 文件名</code> (如果文件不存在，则创建新文件)</li>\n<li><code>nano</code> (不带文件名，之后可保存为新文件)</li>\n</ul>\n<p><strong>常用快捷键 (Ctrl 代表 Control 键):</strong></p>\n<ul>\n<li><code>Ctrl + G</code>: 获取帮助 (显示所有快捷键)。</li>\n<li><code>Ctrl + O</code>: 保存文件 (Write Out)。会提示输入文件名，回车确认。</li>\n<li><code>Ctrl + X</code>: 退出 <code>nano</code>。如果文件已修改但未保存，会提示是否保存。</li>\n<li><code>Ctrl + W</code>: 搜索文本 (Where is)。</li>\n<li><code>Ctrl + \\</code>: 替换文本 (Replace)。</li>\n<li><code>Ctrl + K</code>:剪切当前行 (Cut Text)。</li>\n<li><code>Ctrl + U</code>: 粘贴剪切的文本 (Uncut Text)。</li>\n<li><code>Ctrl + C</code>: 显示当前光标位置 (行号、列号)。</li>\n<li><code>Ctrl + J</code>: 对齐当前段落 (Justify)。</li>\n<li><code>Ctrl + T</code>: 检查拼写 (需要安装 <code>spell</code> 包)。</li>\n<li><code>Alt + U</code>: 撤销上一次操作。</li>\n<li><code>Alt + E</code>: 重做上一次撤销的操作。</li>\n<li>方向键: 移动光标。</li>\n<li><code>PageUp / PageDown</code>: 上下翻页。</li>\n<li><code>Home / End</code>: 移动到行首/行尾。</li>\n</ul>\n<p><strong>示例:</strong> <code>sudo nano /etc/hosts</code> (编辑hosts文件，需要sudo权限)</p>\n<h4 id=\"vi-vim-Vi-IMproved\"><a href=\"#vi-vim-Vi-IMproved\" class=\"headerlink\" title=\"vi / vim (Vi IMproved)\"></a><code>vi</code> / <code>vim</code> (Vi IMproved)</h4><p><code>vi</code> 是一个功能强大的模态编辑器，学习曲线较陡峭，但熟练后效率极高。<code>vim</code> 是 <code>vi</code> 的增强版，提供了更多功能（如语法高亮、多级撤销等）。大多数现代系统实际上的 <code>vi</code> 命令是指向 <code>vim</code> 的。</p>\n<p><strong>模式:</strong></p>\n<ol>\n<li><strong>命令模式 (Command Mode):</strong> 默认模式。用于移动光标、删除文本、复制粘贴等操作。按键不会直接输入文本。</li>\n<li><strong>插入模式 (Insert Mode):</strong> 用于输入文本。从命令模式按 <code>i</code>, <code>a</code>, <code>o</code> 等键进入。按 <code>Esc</code> 键返回命令模式。</li>\n<li><strong>末行模式 (Last Line Mode / Ex Mode):</strong> 在命令模式下按 <code>:</code> 进入。用于执行保存、退出、搜索替换等命令。</li>\n</ol>\n<p><strong>启动:</strong></p>\n<ul>\n<li><code>vi 文件名</code> 或 <code>vim 文件名</code></li>\n</ul>\n<p><strong>基本操作 (命令模式下):</strong></p>\n<ul>\n<li>移动光标:<ul>\n<li><code>h</code>: 左</li>\n<li><code>j</code>: 下</li>\n<li><code>k</code>: 上</li>\n<li><code>l</code>: 右</li>\n<li><code>w</code>: 移动到下一个单词的开头</li>\n<li><code>b</code>: 移动到上一个单词的开头</li>\n<li><code>0</code> (零): 移动到当前行行首</li>\n<li><code>^</code>: 移动到当前行第一个非空白字符</li>\n<li><code>$</code>: 移动到当前行行尾</li>\n<li><code>gg</code>: 移动到文件第一行</li>\n<li><code>G</code>: 移动到文件最后一行</li>\n<li><code>行号G</code>: 移动到指定行号 (例如 <code>10G</code> 到第10行)</li>\n</ul>\n</li>\n<li>进入插入模式:<ul>\n<li><code>i</code>: 在当前光标前插入</li>\n<li><code>I</code>: 在当前行首插入</li>\n<li><code>a</code>: 在当前光标后追加</li>\n<li><code>A</code>: 在当前行尾追加</li>\n<li><code>o</code>: 在当前行下方插入一个新行</li>\n<li><code>O</code>: 在当前行上方插入一个新行</li>\n</ul>\n</li>\n<li>删除文本:<ul>\n<li><code>x</code>: 删除当前光标处的字符</li>\n<li><code>dw</code>: 删除一个单词 (从光标处到词尾)</li>\n<li><code>dd</code>: 删除当前行</li>\n<li><code>数字dd</code>: 删除从当前行开始的指定数量的行 (例如 <code>3dd</code> 删除3行)</li>\n<li><code>D</code>: 删除从光标到行尾的内容</li>\n</ul>\n</li>\n<li>复制 (Yank) 与粘贴 (Put):<ul>\n<li><code>yw</code>: 复制一个单词</li>\n<li><code>yy</code>: 复制当前行 (y 代表 yank)</li>\n<li><code>数字yy</code>: 复制多行</li>\n<li><code>p</code>: 在光标后粘贴 (小写p)</li>\n<li><code>P</code>: 在光标前粘贴 (大写P)</li>\n</ul>\n</li>\n<li>撤销与重做:<ul>\n<li><code>u</code>: 撤销上一次操作 (undo)</li>\n<li><code>Ctrl + r</code>: 重做上一次撤销的操作 (redo)</li>\n</ul>\n</li>\n<li>搜索:<ul>\n<li><code>/模式</code>: 向下搜索 “模式” (按 <code>n</code> 查找下一个, <code>N</code> 查找上一个)</li>\n<li><code>?模式</code>: 向上搜索 “模式”</li>\n</ul>\n</li>\n</ul>\n<p><strong>末行模式命令 (按 <code>:</code> 后输入):</strong></p>\n<ul>\n<li><code>:w</code>: 保存文件 (write)。</li>\n<li><code>:w 文件名</code>:另存为指定文件名。</li>\n<li><code>:q</code>: 退出 (quit)。如果文件已修改但未保存，会阻止退出。</li>\n<li><code>:q!</code>: 强制退出，不保存修改。</li>\n<li><code>:wq</code> 或 <code>:x</code>: 保存并退出。</li>\n<li><code>:e 文件名</code>: 编辑另一个文件。</li>\n<li><code>:set number</code> 或 <code>:set nu</code>: 显示行号。</li>\n<li><code>:set nonumber</code> 或 <code>:set nonu</code>: 关闭行号。</li>\n<li><code>:%s/旧字符串/新字符串/g</code>: 全局替换 (g代表global)。</li>\n<li><code>:%s/旧字符串/新字符串/gc</code>: 全局替换，每次替换前确认 (c代表confirm)。</li>\n<li><code>:!外部命令</code>: 执行外部shell命令 (例如 <code>:!ls -l</code>)。</li>\n</ul>\n<p><strong>示例:</strong> <code>sudo vim /etc/ssh/sshd_config</code></p>\n<p><strong>学习 <code>vim</code>:</strong></p>\n<ul>\n<li>可以在终端中运行 <code>vimtutor</code> 命令，这是一个交互式的 <code>vim</code> 教程。</li>\n</ul>\n<p>这只是 <code>vim</code> 功能的冰山一角，但足以应付日常的配置文件编辑。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/05/25/sha-si-ju-ti-jin-cheng/",
            "url": "https://0xdadream.github.io/2025/05/25/sha-si-ju-ti-jin-cheng/",
            "title": "杀死具体进程",
            "date_published": "2025-05-25T01:25:00.000Z",
            "content_html": "<h1 id=\"杀死具体进程\"><a href=\"#杀死具体进程\" class=\"headerlink\" title=\"杀死具体进程\"></a>杀死具体进程</h1><p>执行了 <code>systemctl stop httpd</code> 来关闭 <code>httpd</code>（Apache）服务，但仍然看到类似：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">httpd <span class=\"token punctuation\">(</span>pid <span class=\"token number\">1785910</span><span class=\"token punctuation\">)</span> already running<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>表示进程还在运行，说明 <strong><code>httpd</code> 没有被完全停止</strong>。</p>\n<hr>\n<h2 id=\"✅-解决步骤如下：\"><a href=\"#✅-解决步骤如下：\" class=\"headerlink\" title=\"✅ 解决步骤如下：\"></a>✅ 解决步骤如下：</h2><h3 id=\"🔍-第一步：确认并查找-httpd-是否仍有残留进程\"><a href=\"#🔍-第一步：确认并查找-httpd-是否仍有残留进程\" class=\"headerlink\" title=\"🔍 第一步：确认并查找 httpd 是否仍有残留进程\"></a>🔍 第一步：确认并查找 <code>httpd</code> 是否仍有残留进程</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> aux <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> httpd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>示例输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">root     <span class=\"token number\">1785910</span>  <span class=\"token number\">0.0</span>  <span class=\"token number\">0.2</span> <span class=\"token number\">123456</span>  <span class=\"token number\">7890</span> ?        Ss   <span class=\"token number\">12</span>:34   <span class=\"token number\">0</span>:00 /usr/sbin/httpd <span class=\"token parameter variable\">-DFOREGROUND</span>\napache   <span class=\"token number\">1785911</span>  <span class=\"token number\">0.0</span>  <span class=\"token number\">0.1</span> <span class=\"token number\">123456</span>  <span class=\"token number\">4567</span> ?        S    <span class=\"token number\">12</span>:34   <span class=\"token number\">0</span>:00 /usr/sbin/httpd <span class=\"token parameter variable\">-DFOREGROUND</span>\n<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"🧨-第二步：强制杀死所有-httpd-相关进程\"><a href=\"#🧨-第二步：强制杀死所有-httpd-相关进程\" class=\"headerlink\" title=\"🧨 第二步：强制杀死所有 httpd 相关进程\"></a>🧨 第二步：强制杀死所有 httpd 相关进程</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">pkill</span> httpd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者使用 <code>killall</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">killall</span> httpd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果仍然存在僵尸进程，可以手动 kill：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> <span class=\"token number\">1785910</span> <span class=\"token number\">1785911</span> <span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"🔁-第三步：再次确认是否彻底关闭\"><a href=\"#🔁-第三步：再次确认是否彻底关闭\" class=\"headerlink\" title=\"🔁 第三步：再次确认是否彻底关闭\"></a>🔁 第三步：再次确认是否彻底关闭</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> aux <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> httpd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果没有输出（或只有 grep 本身），说明服务已完全停止。</p>\n<hr>\n<h3 id=\"🧪-第四步：确认端口是否仍被占用（例如-80-端口）\"><a href=\"#🧪-第四步：确认端口是否仍被占用（例如-80-端口）\" class=\"headerlink\" title=\"🧪 第四步：确认端口是否仍被占用（例如 80 端口）\"></a>🧪 第四步：确认端口是否仍被占用（例如 80 端口）</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">lsof</span> <span class=\"token parameter variable\">-i</span> :80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果发现仍有服务监听 80 端口，你可以确认是哪个程序占用了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-tulnp</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> :80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ss <span class=\"token parameter variable\">-tulnp</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> :80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<p>如你希望彻底禁用 <code>httpd</code>，可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl disable httpd\n<span class=\"token function\">sudo</span> systemctl mask httpd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>mask</code> 会阻止任何方式启动它，包括依赖项。</p>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/24/dong-tai-lian-jie-ku/",
            "url": "https://0xdadream.github.io/2024/11/24/dong-tai-lian-jie-ku/",
            "title": "动态链接库",
            "date_published": "2024-11-24T15:25:00.000Z",
            "content_html": "<h1 id=\"动态链接库\"><a href=\"#动态链接库\" class=\"headerlink\" title=\"动态链接库\"></a>动态链接库</h1><hr>\n<h3 id=\"一、-etc-ld-so-conf-d-的作用\"><a href=\"#一、-etc-ld-so-conf-d-的作用\" class=\"headerlink\" title=\"一、/etc/ld.so.conf.d 的作用\"></a><strong>一、<code>/etc/ld.so.conf.d</code> 的作用</strong></h3><ul>\n<li><strong>动态库路径管理</strong>：系统会读取该目录下的 <code>.conf</code> 文件，这些文件指定了动态链接库的额外搜索路径。</li>\n<li><strong>配置动态库缓存</strong>：在运行程序时，动态链接器会从这些路径中查找所需的库。</li>\n</ul>\n<p><strong>默认加载的路径</strong>（视系统配置而定）：</p>\n<ol>\n<li><code>/lib</code></li>\n<li><code>/usr/lib</code></li>\n<li><code>/usr/local/lib</code></li>\n</ol>\n<p>通过 <code>/etc/ld.so.conf.d</code>，可以扩展默认路径。</p>\n<hr>\n<h3 id=\"二、动态库的加载顺序\"><a href=\"#二、动态库的加载顺序\" class=\"headerlink\" title=\"二、动态库的加载顺序\"></a><strong>二、动态库的加载顺序</strong></h3><p>动态链接器按照以下顺序查找动态库：</p>\n<ol>\n<li><strong>环境变量</strong>：<code>LD_LIBRARY_PATH</code>。</li>\n<li><strong>缓存文件</strong>：<code>/etc/ld.so.cache</code>。</li>\n<li><strong>默认路径</strong>：如 <code>/lib</code> 和 <code>/usr/lib</code>。</li>\n</ol>\n<p><strong>注意</strong>：为了提高效率，系统不会直接读取所有路径，而是从 <code>/etc/ld.so.cache</code> 中加载已经缓存的路径信息。</p>\n<hr>\n<h3 id=\"三、-etc-ld-so-conf-d-的文件结构\"><a href=\"#三、-etc-ld-so-conf-d-的文件结构\" class=\"headerlink\" title=\"三、/etc/ld.so.conf.d 的文件结构\"></a><strong>三、<code>/etc/ld.so.conf.d</code> 的文件结构</strong></h3><p>该目录包含多个 <code>.conf</code> 文件，每个文件可以指定一组路径。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 查看 /etc/ld.so.conf.d 内容</span>\n<span class=\"token function\">ls</span> /etc/ld.so.conf.d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\">glibc<span class=\"token punctuation\">.</span>conf\nx86_64<span class=\"token operator\">-</span>linux<span class=\"token operator\">-</span>gnu<span class=\"token punctuation\">.</span>conf\n<span class=\"token keyword\">local</span><span class=\"token punctuation\">.</span>conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>文件示例</strong>：</p>\n<ul>\n<li><p>/etc/ld.so.conf.d/local.conf：</p>\n<pre class=\"line-numbers language-vbnet\" data-language=\"vbnet\"><code class=\"language-vbnet\"><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span><span class=\"token keyword\">lib</span>\n<span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>custom<span class=\"token operator\">/</span><span class=\"token keyword\">lib</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<p>这些路径会被动态链接器添加到库搜索路径中。</p>\n<hr>\n<h3 id=\"四、如何配置动态库路径\"><a href=\"#四、如何配置动态库路径\" class=\"headerlink\" title=\"四、如何配置动态库路径\"></a><strong>四、如何配置动态库路径</strong></h3><h4 id=\"1-添加自定义路径\"><a href=\"#1-添加自定义路径\" class=\"headerlink\" title=\"1. 添加自定义路径\"></a><strong>1. 添加自定义路径</strong></h4><p>假设有一个自定义动态库路径 <code>/home/user/mylibs</code>，以下是配置步骤：</p>\n<ol>\n<li><p><strong>创建配置文件</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/ld.so.conf.d/mylibs.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加如下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/home/user/mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>更新动态库缓存</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>验证是否生效</strong>： 查看是否包含新路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldconfig <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"2-临时配置路径\"><a href=\"#2-临时配置路径\" class=\"headerlink\" title=\"2. 临时配置路径\"></a><strong>2. 临时配置路径</strong></h4><p>如果只是临时测试动态库路径，可以使用 <code>LD_LIBRARY_PATH</code> 环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span>/home/user/mylibs:<span class=\"token variable\">$LD_LIBRARY_PATH</span>\n./myprogram<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：这种方法仅对当前终端会话有效。</p>\n<hr>\n<h3 id=\"五、ldconfig-的作用\"><a href=\"#五、ldconfig-的作用\" class=\"headerlink\" title=\"五、ldconfig 的作用\"></a><strong>五、<code>ldconfig</code> 的作用</strong></h3><p><code>ldconfig</code> 是管理动态库缓存的工具，其作用包括：</p>\n<ol>\n<li><strong>扫描路径</strong>：根据 <code>/etc/ld.so.conf</code> 和 <code>/etc/ld.so.conf.d/</code> 下的配置文件，扫描动态库路径。</li>\n<li><strong>更新缓存</strong>：生成 <code>/etc/ld.so.cache</code> 文件，加速库的加载。</li>\n</ol>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a><strong>常用命令</strong></h4><ol>\n<li><p>更新缓存：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>指定路径更新缓存：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig /home/user/mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看当前缓存的库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldconfig <span class=\"token parameter variable\">-p</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"六、动态库配置实例\"><a href=\"#六、动态库配置实例\" class=\"headerlink\" title=\"六、动态库配置实例\"></a><strong>六、动态库配置实例</strong></h3><h4 id=\"1-动态库开发\"><a href=\"#1-动态库开发\" class=\"headerlink\" title=\"1. 动态库开发\"></a><strong>1. 动态库开发</strong></h4><p>创建一个简单动态库：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// hello.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, from dynamic library!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译成动态库：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">gcc -fPIC -shared -o libhello.so hello.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将动态库移动到 <code>/opt/mylibs</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /opt/mylibs\n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> libhello.so /opt/mylibs/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-配置加载路径\"><a href=\"#2-配置加载路径\" class=\"headerlink\" title=\"2. 配置加载路径\"></a><strong>2. 配置加载路径</strong></h4><p>创建 <code>/etc/ld.so.conf.d/mylibs.conf</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/ld.so.conf.d/mylibs.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/mylibs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>更新缓存：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-使用动态库\"><a href=\"#3-使用动态库\" class=\"headerlink\" title=\"3. 使用动态库\"></a><strong>3. 使用动态库</strong></h4><p>编写一个测试程序：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// main.c</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编译并运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gcc <span class=\"token parameter variable\">-o</span> main main.c <span class=\"token parameter variable\">-lhello</span>\n./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Hello, from dynamic library<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"七、排错方法\"><a href=\"#七、排错方法\" class=\"headerlink\" title=\"七、排错方法\"></a><strong>七、排错方法</strong></h3><ol>\n<li><p><strong>检查动态库是否存在</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldconfig <span class=\"token parameter variable\">-p</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> libhello<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>验证动态库路径是否正确</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ldd ./main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>动态库无法加载时</strong>：</p>\n<ul>\n<li>检查是否添加了正确的路径到 <code>/etc/ld.so.conf.d</code>。</li>\n<li>检查是否运行了 <code>ldconfig</code>。</li>\n</ul>\n</li>\n</ol>\n<hr>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/24/linux-wen-jian-cao-zuo-ming-ling/",
            "url": "https://0xdadream.github.io/2024/11/24/linux-wen-jian-cao-zuo-ming-ling/",
            "title": "linux文件操作命令",
            "date_published": "2024-11-24T01:25:00.000Z",
            "content_html": "<h1 id=\"linux文件操作命令\"><a href=\"#linux文件操作命令\" class=\"headerlink\" title=\"linux文件操作命令\"></a>linux文件操作命令</h1><p>以下是 Linux 系统中与文件操作相关的命令，附带常用参数的详细解释。</p>\n<hr>\n<h2 id=\"1-查看文件和目录\"><a href=\"#1-查看文件和目录\" class=\"headerlink\" title=\"1. 查看文件和目录\"></a><strong>1. 查看文件和目录</strong></h2><h3 id=\"列出目录内容-ls\"><a href=\"#列出目录内容-ls\" class=\"headerlink\" title=\"列出目录内容 (ls)\"></a><strong>列出目录内容 (<code>ls</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>路径<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-l</code>：以详细列表形式显示，包括权限、所有者、文件大小、修改时间等。</li>\n<li><code>-a</code>：显示所有文件，包括以 <code>.</code> 开头的隐藏文件。</li>\n<li><code>-h</code>：配合 <code>-l</code>，以人类可读的文件大小显示（如 <code>1K</code>, <code>1M</code>）。</li>\n<li><code>-r</code>：逆序排列。</li>\n<li><code>-t</code>：按时间排序。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lah</span> /home/user<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"查看当前路径-pwd\"><a href=\"#查看当前路径-pwd\" class=\"headerlink\" title=\"查看当前路径 (pwd)\"></a><strong>查看当前路径 (<code>pwd</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">pwd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>输出当前工作目录的完整路径。</li>\n</ul>\n<hr>\n<h2 id=\"2-创建文件和目录\"><a href=\"#2-创建文件和目录\" class=\"headerlink\" title=\"2. 创建文件和目录\"></a><strong>2. 创建文件和目录</strong></h2><h3 id=\"创建文件-touch\"><a href=\"#创建文件-touch\" class=\"headerlink\" title=\"创建文件 (touch)\"></a><strong>创建文件 (<code>touch</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">touch</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>功能：创建一个空文件或更新已有文件的时间戳。</li>\n</ul>\n<h3 id=\"创建目录-mkdir\"><a href=\"#创建目录-mkdir\" class=\"headerlink\" title=\"创建目录 (mkdir)\"></a><strong>创建目录 (<code>mkdir</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 目录名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-p</code>：递归创建目录。如果父目录不存在，会自动创建。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /home/user/project/logs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"3-查看文件内容\"><a href=\"#3-查看文件内容\" class=\"headerlink\" title=\"3. 查看文件内容\"></a><strong>3. 查看文件内容</strong></h2><h3 id=\"显示文件内容-cat\"><a href=\"#显示文件内容-cat\" class=\"headerlink\" title=\"显示文件内容 (cat)\"></a><strong>显示文件内容 (<code>cat</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-n</code>：显示行号。</li>\n<li><code>-A</code>：显示所有字符，包括不可见字符。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token parameter variable\">-n</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"分页查看-less-和-more\"><a href=\"#分页查看-less-和-more\" class=\"headerlink\" title=\"分页查看 (less 和 more)\"></a><strong>分页查看 (<code>less</code> 和 <code>more</code>)</strong></h3><ul>\n<li><p>less：分页查看，支持向前滚动。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">less</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>more：逐页查看，按空格翻页。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">more</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"4-编辑文件\"><a href=\"#4-编辑文件\" class=\"headerlink\" title=\"4. 编辑文件\"></a><strong>4. 编辑文件</strong></h2><h3 id=\"简单编辑器-nano\"><a href=\"#简单编辑器-nano\" class=\"headerlink\" title=\"简单编辑器 (nano)\"></a><strong>简单编辑器 (<code>nano</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用快捷键（如 <code>Ctrl+O</code> 保存，<code>Ctrl+X</code> 退出）。</li>\n</ul>\n<h3 id=\"高级编辑器-vim\"><a href=\"#高级编辑器-vim\" class=\"headerlink\" title=\"高级编辑器 (vim)\"></a><strong>高级编辑器 (<code>vim</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>基本模式：<ul>\n<li>按 <code>i</code> 进入插入模式。</li>\n<li>编辑完成后按 <code>Esc</code>，输入 <code>:wq</code> 保存并退出。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-复制、移动和重命名文件\"><a href=\"#5-复制、移动和重命名文件\" class=\"headerlink\" title=\"5. 复制、移动和重命名文件\"></a><strong>5. 复制、移动和重命名文件</strong></h2><h3 id=\"复制文件和目录-cp\"><a href=\"#复制文件和目录-cp\" class=\"headerlink\" title=\"复制文件和目录 (cp)\"></a><strong>复制文件和目录 (<code>cp</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 源文件 目标文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-r</code>：递归复制目录。</li>\n<li><code>-p</code>：保留文件属性（权限、时间戳等）。</li>\n<li><code>-i</code>：覆盖前提示确认。</li>\n<li><code>-v</code>：显示详细过程。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-rp</span> source_dir/ target_dir/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"移动和重命名-mv\"><a href=\"#移动和重命名-mv\" class=\"headerlink\" title=\"移动和重命名 (mv)\"></a><strong>移动和重命名 (<code>mv</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 源文件 目标文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-i</code>：覆盖前提示确认。</li>\n<li><code>-v</code>：显示详细过程。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> file1.txt file2.txt  <span class=\"token comment\"># 重命名</span>\n<span class=\"token function\">mv</span> file.txt /path/to/dir/  <span class=\"token comment\"># 移动文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"6-删除文件和目录\"><a href=\"#6-删除文件和目录\" class=\"headerlink\" title=\"6. 删除文件和目录\"></a><strong>6. 删除文件和目录</strong></h2><h3 id=\"删除文件和目录-rm\"><a href=\"#删除文件和目录-rm\" class=\"headerlink\" title=\"删除文件和目录 (rm)\"></a><strong>删除文件和目录 (<code>rm</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件/目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-r</code>：递归删除目录及其内容。</li>\n<li><code>-f</code>：强制删除，无需确认。</li>\n<li><code>-i</code>：删除前提示确认。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /tmp/test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"7-搜索文件和内容\"><a href=\"#7-搜索文件和内容\" class=\"headerlink\" title=\"7. 搜索文件和内容\"></a><strong>7. 搜索文件和内容</strong></h2><h3 id=\"查找文件-find\"><a href=\"#查找文件-find\" class=\"headerlink\" title=\"查找文件 (find)\"></a><strong>查找文件 (<code>find</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token punctuation\">[</span>路径<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>条件<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>操作<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用条件：</p>\n<ul>\n<li><code>-name</code>：按文件名查找（支持通配符）。</li>\n<li><code>-type</code>：按类型查找，如 <code>f</code>（文件），<code>d</code>（目录）。</li>\n<li><code>-size</code>：按文件大小查找，如 <code>+1M</code>（大于1MB）。</li>\n<li><code>-mtime</code>：按修改时间查找，如 <code>-7</code>（7天内修改的文件）。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> /home <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"搜索文件内容-grep\"><a href=\"#搜索文件内容-grep\" class=\"headerlink\" title=\"搜索文件内容 (grep)\"></a><strong>搜索文件内容 (<code>grep</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> <span class=\"token string\">\"关键字\"</span> 文件名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-i</code>：忽略大小写。</li>\n<li><code>-r</code>：递归搜索目录。</li>\n<li><code>-n</code>：显示行号。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-rn</span> <span class=\"token string\">\"error\"</span> /var/log/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"8-修改文件权限\"><a href=\"#8-修改文件权限\" class=\"headerlink\" title=\"8. 修改文件权限\"></a><strong>8. 修改文件权限</strong></h2><h3 id=\"修改权限-chmod\"><a href=\"#修改权限-chmod\" class=\"headerlink\" title=\"修改权限 (chmod)\"></a><strong>修改权限 (<code>chmod</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>模式<span class=\"token punctuation\">]</span> 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>权限格式：</p>\n<ul>\n<li><code>u</code>：用户，<code>g</code>：组，<code>o</code>：其他，<code>a</code>：全部。</li>\n<li><code>+</code>：添加权限，<code>-</code>：删除权限，<code>=</code>：设置权限。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> u+x script.sh    <span class=\"token comment\"># 给用户添加执行权限</span>\n<span class=\"token function\">chmod</span> <span class=\"token number\">755</span> file.txt     <span class=\"token comment\"># 设置读写执行权限</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"修改所有者-chown\"><a href=\"#修改所有者-chown\" class=\"headerlink\" title=\"修改所有者 (chown)\"></a><strong>修改所有者 (<code>chown</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 用户:组 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> user:group file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"9-压缩和解压文件\"><a href=\"#9-压缩和解压文件\" class=\"headerlink\" title=\"9. 压缩和解压文件\"></a><strong>9. 压缩和解压文件</strong></h2><h3 id=\"压缩文件\"><a href=\"#压缩文件\" class=\"headerlink\" title=\"压缩文件\"></a><strong>压缩文件</strong></h3><ul>\n<li><p>tar：创建归档文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czvf</span> archive.tar.gz 文件/目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>zip：压缩为 ZIP 格式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">zip</span> <span class=\"token parameter variable\">-r</span> archive.zip 文件/目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a><strong>解压文件</strong></h3><ul>\n<li><p>tar：解压 .tar.gz文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> archive.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>unzip：解压 ZIP 文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">unzip</span> archive.zip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"10-其他常用操作\"><a href=\"#10-其他常用操作\" class=\"headerlink\" title=\"10. 其他常用操作\"></a><strong>10. 其他常用操作</strong></h2><h3 id=\"统计文件行、词、字符数-wc\"><a href=\"#统计文件行、词、字符数-wc\" class=\"headerlink\" title=\"统计文件行、词、字符数 (wc)\"></a><strong>统计文件行、词、字符数 (<code>wc</code>)</strong></h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>常用选项：</p>\n<ul>\n<li><code>-l</code>：统计行数。</li>\n<li><code>-w</code>：统计单词数。</li>\n<li><code>-c</code>：统计字节数。</li>\n</ul>\n</li>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"监视文件内容-tail-和-head\"><a href=\"#监视文件内容-tail-和-head\" class=\"headerlink\" title=\"监视文件内容 (tail 和 head)\"></a><strong>监视文件内容 (<code>tail</code> 和 <code>head</code>)</strong></h3><ul>\n<li><p>显示文件头部：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>动态监视文件末尾：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<p>在 Linux 中，<strong>管道符 (<code>|</code>)</strong> 是一种强大的工具，用于将一个命令的输出传递给另一个命令作为输入。以下是管道符的详细介绍和常见使用场景。</p>\n<hr>\n<h2 id=\"管道符语法\"><a href=\"#管道符语法\" class=\"headerlink\" title=\"管道符语法\"></a><strong>管道符语法</strong></h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">command1 <span class=\"token operator\">|</span> command2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>command1</code>：第一个命令，生成输出。</li>\n<li><code>|</code>：管道符，将第一个命令的输出传递给第二个命令。</li>\n<li><code>command2</code>：第二个命令，将接收的输入进行处理。</li>\n</ul>\n<hr>\n<h2 id=\"常见场景和示例\"><a href=\"#常见场景和示例\" class=\"headerlink\" title=\"常见场景和示例\"></a><strong>常见场景和示例</strong></h2><h3 id=\"1-结合-grep-搜索内容\"><a href=\"#1-结合-grep-搜索内容\" class=\"headerlink\" title=\"1. 结合 grep 搜索内容\"></a><strong>1. 结合 <code>grep</code> 搜索内容</strong></h3><ul>\n<li><p>查找某目录中包含特定关键词的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"filename\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>示例：列出当前目录下包含 “log” 的文件名：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"log\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"2-结合-sort-排序\"><a href=\"#2-结合-sort-排序\" class=\"headerlink\" title=\"2. 结合 sort 排序\"></a><strong>2. 结合 <code>sort</code> 排序</strong></h3><ul>\n<li><p>按文件大小排序（结合 ls -l）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-k</span> <span class=\"token number\">5</span> <span class=\"token parameter variable\">-n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>-k 5</code>：按第 5 列（文件大小）排序。</li>\n<li><code>-n</code>：按数值排序。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-结合-wc-统计\"><a href=\"#3-结合-wc-统计\" class=\"headerlink\" title=\"3. 结合 wc 统计\"></a><strong>3. 结合 <code>wc</code> 统计</strong></h3><ul>\n<li><p>统计当前目录下的文件数量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>统计文件中的行数、单词数和字符数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">wc</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"4-结合-head-和-tail-查看内容\"><a href=\"#4-结合-head-和-tail-查看内容\" class=\"headerlink\" title=\"4. 结合 head 和 tail 查看内容\"></a><strong>4. 结合 <code>head</code> 和 <code>tail</code> 查看内容</strong></h3><ul>\n<li><p>查看文件的前 10 行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看文件的最后 10 行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"5-结合-cut-提取字段\"><a href=\"#5-结合-cut-提取字段\" class=\"headerlink\" title=\"5. 结合 cut 提取字段\"></a><strong>5. 结合 <code>cut</code> 提取字段</strong></h3><ul>\n<li><p>从 ls -l中提取文件权限：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">' '</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>-d ' '</code>：以空格为分隔符。</li>\n<li><code>-f 1</code>：提取第 1 列。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-结合-awk-进行格式化\"><a href=\"#6-结合-awk-进行格式化\" class=\"headerlink\" title=\"6. 结合 awk 进行格式化\"></a><strong>6. 结合 <code>awk</code> 进行格式化</strong></h3><ul>\n<li><p>提取文件名和大小：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'{print $5, $9}'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>$5</code>：表示文件大小。</li>\n<li><code>$9</code>：表示文件名。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-结合-uniq-去重\"><a href=\"#7-结合-uniq-去重\" class=\"headerlink\" title=\"7. 结合 uniq 去重\"></a><strong>7. 结合 <code>uniq</code> 去重</strong></h3><ul>\n<li><p>统计文件中的唯一单词（结合 sort 和 uniq）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"8-结合-tee-保存和显示\"><a href=\"#8-结合-tee-保存和显示\" class=\"headerlink\" title=\"8. 结合 tee 保存和显示\"></a><strong>8. 结合 <code>tee</code> 保存和显示</strong></h3><ul>\n<li><p>将命令输出保存到文件，同时在终端显示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"9-结合-xargs-执行批量命令\"><a href=\"#9-结合-xargs-执行批量命令\" class=\"headerlink\" title=\"9. 结合 xargs 执行批量命令\"></a><strong>9. 结合 <code>xargs</code> 执行批量命令</strong></h3><ul>\n<li><p>删除包含特定关键词的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"temp\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token function\">rm</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>将文本文件中的内容逐行作为命令行参数：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> files.txt <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> <span class=\"token parameter variable\">-I</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token function\">mv</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> /backup/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"10-动态监控日志文件\"><a href=\"#10-动态监控日志文件\" class=\"headerlink\" title=\"10. 动态监控日志文件\"></a><strong>10. 动态监控日志文件</strong></h3><ul>\n<li><p>监控日志文件中包含错误的行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span> /var/log/syslog <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"error\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"管道符结合其他符号\"><a href=\"#管道符结合其他符号\" class=\"headerlink\" title=\"管道符结合其他符号\"></a><strong>管道符结合其他符号</strong></h2><h3 id=\"与重定向符号一起使用\"><a href=\"#与重定向符号一起使用\" class=\"headerlink\" title=\"与重定向符号一起使用\"></a><strong>与重定向符号一起使用</strong></h3><p>将管道符的输出保存到文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"txt\"</span> <span class=\"token operator\">&gt;</span> result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"多重管道\"><a href=\"#多重管道\" class=\"headerlink\" title=\"多重管道\"></a><strong>多重管道</strong></h3><p>将多个命令串联：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> file.txt <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"keyword\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-c</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-nr</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>功能：<ol>\n<li>搜索文件中的 <code>keyword</code>。</li>\n<li>排序结果。</li>\n<li>去重并统计出现次数。</li>\n<li>按出现次数逆序排序。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<p>在 Linux 中，<strong>重定向</strong> 是将命令的输出或输入重定向到文件或其他设备的操作。它通常用于保存输出、将错误输出单独处理或读取文件作为输入。</p>\n<hr>\n<h2 id=\"1-输出重定向\"><a href=\"#1-输出重定向\" class=\"headerlink\" title=\"1. 输出重定向\"></a><strong>1. 输出重定向</strong></h2><h3 id=\"标准输出\"><a href=\"#标准输出\" class=\"headerlink\" title=\"标准输出 (>)\"></a><strong>标准输出 (<code>&gt;</code>)</strong></h3><ul>\n<li>将命令的标准输出（正常输出）重定向到文件。</li>\n<li>如果文件已存在，会<strong>覆盖</strong>原文件内容。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 ls 命令的输出保存到 output.txt文件中。</p>\n</li>\n</ul>\n<h3 id=\"追加输出\"><a href=\"#追加输出\" class=\"headerlink\" title=\"追加输出 (>>)\"></a><strong>追加输出 (<code>&gt;&gt;</code>)</strong></h3><ul>\n<li>将命令的标准输出<strong>追加</strong>到文件末尾，而不是覆盖。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"New line\"</span> <span class=\"token operator\">&gt;&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将字符串 “New line” 添加到 output.txt 的末尾。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-错误重定向\"><a href=\"#2-错误重定向\" class=\"headerlink\" title=\"2. 错误重定向\"></a><strong>2. 错误重定向</strong></h2><h3 id=\"标准错误输出-2\"><a href=\"#标准错误输出-2\" class=\"headerlink\" title=\"标准错误输出 (2>)\"></a><strong>标准错误输出 (<code>2&gt;</code>)</strong></h3><ul>\n<li>将命令的错误输出（标准错误）重定向到文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> nonexistent_file <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将错误消息保存到 error.txt。</p>\n</li>\n</ul>\n<h3 id=\"追加错误输出-2\"><a href=\"#追加错误输出-2\" class=\"headerlink\" title=\"追加错误输出 (2>>)\"></a><strong>追加错误输出 (<code>2&gt;&gt;</code>)</strong></h3><ul>\n<li>将错误输出<strong>追加</strong>到文件末尾。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"3-合并标准输出和错误输出\"><a href=\"#3-合并标准输出和错误输出\" class=\"headerlink\" title=\"3. 合并标准输出和错误输出\"></a><strong>3. 合并标准输出和错误输出</strong></h2><h3 id=\"将标准输出和标准错误合并到同一文件\"><a href=\"#将标准输出和标准错误合并到同一文件\" class=\"headerlink\" title=\"将标准输出和标准错误合并到同一文件\"></a><strong>将标准输出和标准错误合并到同一文件</strong></h3><ul>\n<li>使用 <code>&amp;&gt;</code> 将正常输出和错误输出都保存到一个文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> existing_file nonexistent_file <span class=\"token operator\">&amp;&gt;</span> all_output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"追加合并输出\"><a href=\"#追加合并输出\" class=\"headerlink\" title=\"追加合并输出\"></a><strong>追加合并输出</strong></h3><ul>\n<li>使用 <code>&amp;&gt;&gt;</code> 将正常输出和错误输出都追加到一个文件。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;&gt;&gt;</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"4-输入重定向\"><a href=\"#4-输入重定向\" class=\"headerlink\" title=\"4. 输入重定向\"></a><strong>4. 输入重定向</strong></h2><h3 id=\"将文件作为命令的输入\"><a href=\"#将文件作为命令的输入\" class=\"headerlink\" title=\"将文件作为命令的输入 (<)\"></a><strong>将文件作为命令的输入 (<code>&lt;</code>)</strong></h3><ul>\n<li>使用 <code>&lt;</code> 将文件内容作为命令的输入。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span> <span class=\"token operator\">&lt;</span> input.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>统计 input.txt 的行数。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-同时处理输出和错误\"><a href=\"#5-同时处理输出和错误\" class=\"headerlink\" title=\"5. 同时处理输出和错误\"></a><strong>5. 同时处理输出和错误</strong></h2><h3 id=\"将标准输出和错误分别保存到不同文件\"><a href=\"#将标准输出和错误分别保存到不同文件\" class=\"headerlink\" title=\"将标准输出和错误分别保存到不同文件\"></a><strong>将标准输出和错误分别保存到不同文件</strong></h3><ul>\n<li>使用 <code>&gt; file</code> 和 <code>2&gt; error_file</code>：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;</span> output.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> error.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> existing_file nonexistent_file <span class=\"token operator\">&gt;</span> stdout.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> stderr.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"6-特殊重定向\"><a href=\"#6-特殊重定向\" class=\"headerlink\" title=\"6. 特殊重定向\"></a><strong>6. 特殊重定向</strong></h2><h3 id=\"丢弃输出到-dev-null\"><a href=\"#丢弃输出到-dev-null\" class=\"headerlink\" title=\"丢弃输出到 /dev/null\"></a><strong>丢弃输出到 <code>/dev/null</code></strong></h3><ul>\n<li><p><code>/dev/null</code> 是一个特殊设备文件，重定向到它的内容会被丢弃。</p>\n</li>\n<li><p>丢弃标准输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&gt;</span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>丢弃标准错误：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>同时丢弃标准输出和错误：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&amp;&gt;</span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"7-使用-tee-同时输出到文件和终端\"><a href=\"#7-使用-tee-同时输出到文件和终端\" class=\"headerlink\" title=\"7. 使用 tee 同时输出到文件和终端\"></a><strong>7. 使用 <code>tee</code> 同时输出到文件和终端</strong></h2><ul>\n<li><code>tee</code> 命令可以将输入同时保存到文件和终端。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 <code>ls</code> 的输出显示在终端的同时保存到 <code>output.txt</code>。</p>\n</li>\n<li><p>追加模式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> <span class=\"token function\">file</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"8-重定向符号总结\"><a href=\"#8-重定向符号总结\" class=\"headerlink\" title=\"8. 重定向符号总结\"></a><strong>8. 重定向符号总结</strong></h2><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&gt;</code></td>\n<td>将标准输出重定向到文件，覆盖文件内容</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td>将标准输出追加到文件末尾</td>\n</tr>\n<tr>\n<td><code>2&gt;</code></td>\n<td>将错误输出重定向到文件，覆盖文件内容</td>\n</tr>\n<tr>\n<td><code>2&gt;&gt;</code></td>\n<td>将错误输出追加到文件末尾</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;</code></td>\n<td>将标准输出和错误输出重定向到同一文件</td>\n</tr>\n<tr>\n<td><code>&amp;&gt;&gt;</code></td>\n<td>将标准输出和错误输出追加到同一文件</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>将文件内容作为命令的标准输入</td>\n</tr>\n<tr>\n<td><code>/dev/null</code></td>\n<td>丢弃所有输出</td>\n</tr>\n<tr>\n<td>`</td>\n<td>tee`</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"示例：组合重定向\"><a href=\"#示例：组合重定向\" class=\"headerlink\" title=\"示例：组合重定向\"></a><strong>示例：组合重定向</strong></h3><ol>\n<li><p>同时保存输出和错误到不同文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> existing_file nonexistent_file <span class=\"token operator\">&gt;</span> stdout.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> stderr.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>同时显示输出在终端，并保存到文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>统计某文件夹的文件数量，但丢弃错误：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /path/to/dir <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> /dev/null <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/23/bian-yi-shi-yong/",
            "url": "https://0xdadream.github.io/2024/11/23/bian-yi-shi-yong/",
            "title": "编译教程",
            "date_published": "2024-11-23T01:25:00.000Z",
            "content_html": "<h1 id=\"编译教程\"><a href=\"#编译教程\" class=\"headerlink\" title=\"编译教程\"></a>编译教程</h1><p>下面是一个<strong>完整的从源码编译安装软件的教程</strong>，涵盖了从环境准备到配置、编译、安装的所有可能会用到的步骤和细节，适用于各种类型的软件包。</p>\n<hr>\n<h2 id=\"一、环境准备\"><a href=\"#一、环境准备\" class=\"headerlink\" title=\"一、环境准备\"></a>一、环境准备</h2><p>在开始编译源码之前，确保系统满足以下条件：</p>\n<h3 id=\"1-安装必要工具\"><a href=\"#1-安装必要工具\" class=\"headerlink\" title=\"1. 安装必要工具\"></a>1. <strong>安装必要工具</strong></h3><p>在 Linux 环境下，通常需要以下工具：</p>\n<ul>\n<li><strong>编译器</strong>: <code>gcc</code> 或 <code>clang</code></li>\n<li><strong>构建工具</strong>: <code>make</code></li>\n<li><strong>其他依赖</strong>: <code>autoconf</code>, <code>automake</code>, <code>libtool</code></li>\n</ul>\n<p>对于基于 Debian 的系统（如 Ubuntu）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> build-essential autoconf automake libtool pkg-config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>对于基于 RHEL 的系统（如 CentOS）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum groupinstall <span class=\"token string\">\"Development Tools\"</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> autoconf automake libtool pkgconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-下载源码\"><a href=\"#2-下载源码\" class=\"headerlink\" title=\"2. 下载源码\"></a>2. <strong>下载源码</strong></h3><p>源码通常以 <code>.tar.gz</code> 或 <code>.tar.bz2</code> 的形式提供：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://example.com/software-1.0.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> software-1.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> software-1.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"二、运行-configure\"><a href=\"#二、运行-configure\" class=\"headerlink\" title=\"二、运行 ./configure\"></a>二、运行 <code>./configure</code></h2><p><code>./configure</code> 是自动生成的配置脚本，用于检查系统环境，生成适合当前系统的编译配置。以下是配置过程的所有选项说明。</p>\n<h3 id=\"1-路径相关选项\"><a href=\"#1-路径相关选项\" class=\"headerlink\" title=\"1. 路径相关选项\"></a>1. <strong>路径相关选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>默认值</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--prefix=DIR</code></td>\n<td>软件安装的根目录</td>\n<td><code>/usr/local</code></td>\n<td><code>--prefix=/opt/myapp</code></td>\n</tr>\n<tr>\n<td><code>--exec-prefix=DIR</code></td>\n<td>架构相关文件的安装路径</td>\n<td><code>$prefix</code></td>\n<td><code>--exec-prefix=/usr</code></td>\n</tr>\n<tr>\n<td><code>--bindir=DIR</code></td>\n<td>可执行文件安装路径</td>\n<td><code>$exec_prefix/bin</code></td>\n<td><code>--bindir=/usr/bin</code></td>\n</tr>\n<tr>\n<td><code>--libdir=DIR</code></td>\n<td>库文件安装路径</td>\n<td><code>$exec_prefix/lib</code></td>\n<td><code>--libdir=/opt/myapp/lib</code></td>\n</tr>\n<tr>\n<td><code>--includedir=DIR</code></td>\n<td>头文件安装路径</td>\n<td><code>$prefix/include</code></td>\n<td><code>--includedir=/opt/include</code></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp <span class=\"token parameter variable\">--bindir</span><span class=\"token operator\">=</span>/opt/myapp/bin <span class=\"token parameter variable\">--libdir</span><span class=\"token operator\">=</span>/opt/myapp/lib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"prefix-的用途\"><a href=\"#prefix-的用途\" class=\"headerlink\" title=\"prefix 的用途\"></a><code>prefix</code> 的用途</h4><p><code>prefix</code> 是通过 <code>./configure --prefix=DIR</code> 选项指定的路径。其主要作用是告诉构建系统，安装的文件应该放在哪个目录下。</p>\n<p><code>$prefix</code> 的默认值通常是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/usr/local<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>那么，安装路径会变成以下结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/opt/myapp/bin       # 可执行文件\n/opt/myapp/lib       # 库文件\n/opt/myapp/include   # 头文件\n/opt/myapp/share     # 共享资源（如文档、手册）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"如何修改-prefix\"><a href=\"#如何修改-prefix\" class=\"headerlink\" title=\"如何修改 $prefix\"></a>如何修改 <code>$prefix</code></h4><p>在配置阶段指定通过 <code>./configure</code> 的 <code>--prefix</code> 参数直接指定：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/custom/path<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果不指定，系统会默认安装到 <code>/usr/local</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token comment\"># 文件安装到 /usr/local/...</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"prefix-的实际应用\"><a href=\"#prefix-的实际应用\" class=\"headerlink\" title=\"$prefix 的实际应用\"></a><code>$prefix</code> 的实际应用</h4><p>假设我们正在安装一个名为 <code>myapp</code> 的软件：</p>\n<p>示例 1: 默认安装到 <code>/usr/local</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装完成后，文件路径如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/usr/local/bin/myapp        # 可执行文件\n/usr/local/lib/libmyapp.so  # 动态库\n/usr/local/include/myapp.h  # 头文件\n/usr/local/share/myapp      # 共享数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>示例 2: 自定义安装路径</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装完成后，文件路径如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">/opt/myapp/bin/myapp        # 可执行文件\n/opt/myapp/lib/libmyapp.so  # 动态库\n/opt/myapp/include/myapp.h  # 头文件\n/opt/myapp/share/myapp      # 共享数据<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"为什么-prefix-很重要\"><a href=\"#为什么-prefix-很重要\" class=\"headerlink\" title=\"为什么 $prefix 很重要\"></a>为什么 <code>$prefix</code> 很重要</h4><h5 id=\"1-避免覆盖系统文件\"><a href=\"#1-避免覆盖系统文件\" class=\"headerlink\" title=\"1. 避免覆盖系统文件\"></a>1. 避免覆盖系统文件</h5><p>默认路径 <code>/usr/local</code> 不会影响系统自带的软件，安全且独立。</p>\n<h5 id=\"2-方便不同版本共存\"><a href=\"#2-方便不同版本共存\" class=\"headerlink\" title=\"2. 方便不同版本共存\"></a>2. 方便不同版本共存</h5><p>通过为不同版本指定不同的 <code>--prefix</code>，可以在同一台机器上运行多版本的软件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp-1.0\n./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp-2.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"3-灵活管理软件\"><a href=\"#3-灵活管理软件\" class=\"headerlink\" title=\"3. 灵活管理软件\"></a>3. 灵活管理软件</h5><p>如果安装路径是自定义的，例如 <code>/opt/myapp</code>，删除整个软件只需移除该目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /opt/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h4 id=\"如何查看-prefix-的值\"><a href=\"#如何查看-prefix-的值\" class=\"headerlink\" title=\"如何查看 $prefix 的值\"></a>如何查看 <code>$prefix</code> 的值</h4><p>配置完成后，<code>$prefix</code> 的值通常会被记录在 <code>Makefile</code> 中，你可以通过以下方法查看：</p>\n<h5 id=\"1-直接查看-Makefile\"><a href=\"#1-直接查看-Makefile\" class=\"headerlink\" title=\"1. 直接查看 Makefile\"></a>1. 直接查看 <code>Makefile</code></h5><p>打开 <code>Makefile</code>，找到 <code>prefix</code> 的定义：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">\"^prefix\"</span> Makefile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h5 id=\"2-使用-config-log\"><a href=\"#2-使用-config-log\" class=\"headerlink\" title=\"2. 使用 config.log\"></a>2. 使用 <code>config.log</code></h5><p>查看配置过程生成的日志文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">\"prefix\"</span> config.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-功能启用-禁用选项\"><a href=\"#2-功能启用-禁用选项\" class=\"headerlink\" title=\"2. 功能启用/禁用选项\"></a>2. <strong>功能启用/禁用选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--enable-FEATURE</code></td>\n<td>启用某个功能</td>\n<td><code>--enable-ssl</code></td>\n</tr>\n<tr>\n<td><code>--disable-FEATURE</code></td>\n<td>禁用某个功能</td>\n<td><code>--disable-debug</code></td>\n</tr>\n<tr>\n<td><code>--with-FEATURE</code></td>\n<td>启用功能，并指定路径或配置</td>\n<td><code>--with-ssl=/opt/openssl</code></td>\n</tr>\n<tr>\n<td><code>--without-FEATURE</code></td>\n<td>禁用功能</td>\n<td><code>--without-zlib</code></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure --enable-optimizations --disable-debug --with-ssl<span class=\"token operator\">=</span>/opt/openssl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-编译器相关选项\"><a href=\"#3-编译器相关选项\" class=\"headerlink\" title=\"3. 编译器相关选项\"></a>3. <strong>编译器相关选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>CC=COMPILER</code></td>\n<td>指定 C 编译器</td>\n<td><code>CC=gcc</code></td>\n</tr>\n<tr>\n<td><code>CXX=COMPILER</code></td>\n<td>指定 C++ 编译器</td>\n<td><code>CXX=g++</code></td>\n</tr>\n<tr>\n<td><code>CFLAGS=FLAGS</code></td>\n<td>为 C 编译器设置标志</td>\n<td><code>CFLAGS=\"-O2 -Wall\"</code></td>\n</tr>\n<tr>\n<td><code>CXXFLAGS=FLAGS</code></td>\n<td>为 C++ 编译器设置标志</td>\n<td><code>CXXFLAGS=\"-O2 -Wall\"</code></td>\n</tr>\n<tr>\n<td><code>LDFLAGS=FLAGS</code></td>\n<td>设置链接器标志</td>\n<td><code>LDFLAGS=\"-L/usr/lib\"</code></td>\n</tr>\n<tr>\n<td><code>CPPFLAGS=FLAGS</code></td>\n<td>设置预处理器标志（头文件路径等）</td>\n<td><code>CPPFLAGS=\"-I/usr/include\"</code></td>\n</tr>\n</tbody></table>\n<p><strong>示例</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token assign-left variable\">CC</span><span class=\"token operator\">=</span>gcc <span class=\"token assign-left variable\">CFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-O2 -Wall\"</span> <span class=\"token assign-left variable\">LDFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-L/usr/local/lib\"</span> <span class=\"token assign-left variable\">CPPFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-I/usr/local/include\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-调试与日志选项\"><a href=\"#4-调试与日志选项\" class=\"headerlink\" title=\"4. 调试与日志选项\"></a>4. <strong>调试与日志选项</strong></h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>--enable-debug</code></td>\n<td>启用调试模式</td>\n<td><code>--enable-debug</code></td>\n</tr>\n<tr>\n<td><code>--disable-debug</code></td>\n<td>禁用调试模式</td>\n<td><code>--disable-debug</code></td>\n</tr>\n<tr>\n<td><code>--quiet</code> 或 <code>--silent</code></td>\n<td>减少输出</td>\n<td><code>--quiet</code></td>\n</tr>\n<tr>\n<td><code>--verbose</code></td>\n<td>显示详细输出</td>\n<td><code>--verbose</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"5-查看所有参数\"><a href=\"#5-查看所有参数\" class=\"headerlink\" title=\"5.查看所有参数\"></a>5.查看所有参数</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">-h</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如得到<code>./configure --python=路径</code>，可以指定安装到指定python版本库中</p>\n<hr>\n<h2 id=\"三、编译源码\"><a href=\"#三、编译源码\" class=\"headerlink\" title=\"三、编译源码\"></a>三、编译源码</h2><p>运行 <code>make</code> 命令开始编译：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p><strong>加速编译</strong><br>利用多核 CPU：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> -j<span class=\"token variable\"><span class=\"token variable\">$(</span>nproc<span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>常见问题</strong><br>如果出现依赖问题，请根据报错信息安装缺失的库。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"四、测试编译结果\"><a href=\"#四、测试编译结果\" class=\"headerlink\" title=\"四、测试编译结果\"></a>四、测试编译结果</h2><p>在安装前，可以运行测试（如果源码支持）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> check<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"五、安装编译结果\"><a href=\"#五、安装编译结果\" class=\"headerlink\" title=\"五、安装编译结果\"></a>五、安装编译结果</h2><p>运行 <code>make install</code> 安装编译完成的文件到目标路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，检查安装路径下是否有生成的文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /opt/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"六、卸载（可选）\"><a href=\"#六、卸载（可选）\" class=\"headerlink\" title=\"六、卸载（可选）\"></a>六、卸载（可选）</h2><p>如果需要卸载，使用 <code>make uninstall</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> uninstall<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"七、完整操作示例\"><a href=\"#七、完整操作示例\" class=\"headerlink\" title=\"七、完整操作示例\"></a>七、完整操作示例</h2><p>以下是完整的从下载到安装的操作流程示例：</p>\n<ol>\n<li><p><strong>下载源码</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://example.com/software-1.0.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> software-1.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> software-1.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>运行配置脚本</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/opt/myapp --enable-optimizations --with-ssl<span class=\"token operator\">=</span>/opt/openssl <span class=\"token assign-left variable\">CFLAGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-O2 -Wall\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>编译源码</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> -j<span class=\"token variable\"><span class=\"token variable\">$(</span>nproc<span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>运行测试</strong>（可选）:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装程序</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>验证安装</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/myapp/bin/software <span class=\"token parameter variable\">--version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"八、常见问题及解决方案\"><a href=\"#八、常见问题及解决方案\" class=\"headerlink\" title=\"八、常见问题及解决方案\"></a>八、常见问题及解决方案</h2><h3 id=\"1-缺少依赖库\"><a href=\"#1-缺少依赖库\" class=\"headerlink\" title=\"1. 缺少依赖库\"></a>1. 缺少依赖库</h3><p><strong>错误信息</strong>: <code>configure: error: Missing library xyz</code><br><strong>解决方法</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libxyz-dev  <span class=\"token comment\"># Debian/Ubuntu</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> xyz-devel   <span class=\"token comment\"># CentOS/RHEL</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-权限不足\"><a href=\"#2-权限不足\" class=\"headerlink\" title=\"2. 权限不足\"></a>2. 权限不足</h3><p><strong>错误信息</strong>: <code>Permission denied</code><br><strong>解决方法</strong>:<br>在需要权限的命令前加 <code>sudo</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-环境变量问题\"><a href=\"#3-环境变量问题\" class=\"headerlink\" title=\"3. 环境变量问题\"></a>3. 环境变量问题</h3><p><strong>问题描述</strong>: 安装后无法找到可执行文件。<br><strong>解决方法</strong>: 将安装路径添加到 <code>PATH</code> 中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/opt/myapp/bin:<span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<p>以下是 <code>autoconf</code> 和 <code>automake</code> 的完整使用教程，包括它们的基本概念、工作原理和实际使用步骤。</p>\n<hr>\n<h2 id=\"一、autoconf-和-automake-的简介\"><a href=\"#一、autoconf-和-automake-的简介\" class=\"headerlink\" title=\"一、autoconf 和 automake 的简介\"></a>一、<code>autoconf</code> 和 <code>automake</code> 的简介</h2><h3 id=\"1-什么是-autoconf\"><a href=\"#1-什么是-autoconf\" class=\"headerlink\" title=\"1. 什么是 autoconf\"></a>1. 什么是 <code>autoconf</code></h3><p><code>autoconf</code> 是一种自动生成 <code>configure</code> 脚本的工具，主要用来检测构建系统的环境是否满足软件的依赖需求，并生成相应的配置文件（如 <code>Makefile</code>）。</p>\n<p><strong>功能</strong>:</p>\n<ul>\n<li>提供跨平台兼容性。</li>\n<li>检查依赖工具和库的存在。</li>\n<li>自动生成编译脚本。</li>\n</ul>\n<hr>\n<h3 id=\"2-什么是-automake\"><a href=\"#2-什么是-automake\" class=\"headerlink\" title=\"2. 什么是 automake\"></a>2. 什么是 <code>automake</code></h3><p><code>automake</code> 是一种自动生成 <code>Makefile.in</code> 文件的工具，它依赖于更高层次的构建规则定义文件 <code>Makefile.am</code>。</p>\n<p><strong>功能</strong>:</p>\n<ul>\n<li>简化 <code>Makefile</code> 编写。</li>\n<li>与 <code>autoconf</code> 配合，生成完整的构建系统。</li>\n<li>提供模块化和扩展支持。</li>\n</ul>\n<hr>\n<h2 id=\"二、工作原理\"><a href=\"#二、工作原理\" class=\"headerlink\" title=\"二、工作原理\"></a>二、工作原理</h2><ul>\n<li><code>autoconf</code> 从 <code>configure.ac</code> 或 <code>configure.in</code> 文件生成 <code>configure</code> 脚本。</li>\n<li><code>automake</code> 从 <code>Makefile.am</code> 文件生成 <code>Makefile.in</code> 文件，最终结合 <code>autoconf</code> 的输出生成 <code>Makefile</code>。</li>\n</ul>\n<p><strong>工具链流程</strong>:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">configure.ac --&gt; autoconf --&gt; configure\nMakefile.am  --&gt; automake --&gt; Makefile.in\nconfigure + Makefile.in --&gt; ./configure --&gt; Makefile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"三、安装和准备环境\"><a href=\"#三、安装和准备环境\" class=\"headerlink\" title=\"三、安装和准备环境\"></a>三、安装和准备环境</h2><h3 id=\"1-安装工具\"><a href=\"#1-安装工具\" class=\"headerlink\" title=\"1. 安装工具\"></a>1. 安装工具</h3><p>在 Linux 环境中安装 <code>autoconf</code> 和 <code>automake</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> autoconf automake  <span class=\"token comment\"># Debian/Ubuntu</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> autoconf automake     <span class=\"token comment\"># CentOS</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"2-项目准备\"><a href=\"#2-项目准备\" class=\"headerlink\" title=\"2. 项目准备\"></a>2. 项目准备</h3><p>创建一个简单的 C 项目目录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> myproject\n<span class=\"token builtin class-name\">cd</span> myproject\n<span class=\"token function\">mkdir</span> src\n<span class=\"token function\">touch</span> configure.ac Makefile.am src/Makefile.am<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"四、autoconf-和-automake-使用流程\"><a href=\"#四、autoconf-和-automake-使用流程\" class=\"headerlink\" title=\"四、autoconf 和 automake 使用流程\"></a>四、<code>autoconf</code> 和 <code>automake</code> 使用流程</h2><h3 id=\"1-创建-configure-ac-文件\"><a href=\"#1-创建-configure-ac-文件\" class=\"headerlink\" title=\"1. 创建 configure.ac 文件\"></a><strong>1. 创建 <code>configure.ac</code> 文件</strong></h3><p><code>configure.ac</code> 是 <code>autoconf</code> 的核心文件，定义了项目名称、版本、依赖工具等。</p>\n<p>以下是一个简单示例：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [user@example.com])  # 项目名称、版本和维护者\nAM_INIT_AUTOMAKE                                  # 初始化 automake\nAC_PROG_CC                                       # 检测 C 编译器\nAC_CONFIG_FILES([Makefile src/Makefile])         # 配置 Makefile 文件\nAC_OUTPUT                                        # 输出配置文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"2-创建-Makefile-am-文件\"><a href=\"#2-创建-Makefile-am-文件\" class=\"headerlink\" title=\"2. 创建 Makefile.am 文件\"></a><strong>2. 创建 <code>Makefile.am</code> 文件</strong></h3><h4 id=\"顶层目录的-Makefile-am\"><a href=\"#顶层目录的-Makefile-am\" class=\"headerlink\" title=\"顶层目录的 Makefile.am\"></a>顶层目录的 <code>Makefile.am</code></h4><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">SUBDIRS <span class=\"token operator\">=</span> src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"src-Makefile-am\"><a href=\"#src-Makefile-am\" class=\"headerlink\" title=\"src/Makefile.am\"></a><code>src/Makefile.am</code></h4><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">bin_PROGRAMS <span class=\"token operator\">=</span> myapp\nmyapp_SOURCES <span class=\"token operator\">=</span> main.c utils.c utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"3-生成构建脚本和文件\"><a href=\"#3-生成构建脚本和文件\" class=\"headerlink\" title=\"3. 生成构建脚本和文件\"></a><strong>3. 生成构建脚本和文件</strong></h3><ol>\n<li><p><strong>生成 <code>aclocal.m4</code></strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 <code>configure</code> 脚本</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 <code>Makefile.in</code> 文件</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">automake --add-missing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 <code>Makefile</code> 文件</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"4-编译和安装\"><a href=\"#4-编译和安装\" class=\"headerlink\" title=\"4. 编译和安装\"></a><strong>4. 编译和安装</strong></h3><ol>\n<li><p><strong>编译</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>运行程序</strong><br>如果你的程序是一个可执行文件，例如 <code>myapp</code>，可以直接运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./src/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"五、完整示例\"><a href=\"#五、完整示例\" class=\"headerlink\" title=\"五、完整示例\"></a>五、完整示例</h2><p>假设你有以下项目结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">myproject/\n├── configure.ac\n├── Makefile.am\n├── src/\n│   ├── Makefile.am\n│   ├── main.c\n│   ├── utils.c\n│   └── utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下是各个文件的内容：</p>\n<h3 id=\"1-configure-ac\"><a href=\"#1-configure-ac\" class=\"headerlink\" title=\"1. configure.ac\"></a>1. <code>configure.ac</code></h3><pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [user@example.com])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_CONFIG_FILES([Makefile src/Makefile])\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-顶层-Makefile-am\"><a href=\"#2-顶层-Makefile-am\" class=\"headerlink\" title=\"2. 顶层 Makefile.am\"></a>2. 顶层 <code>Makefile.am</code></h3><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">SUBDIRS <span class=\"token operator\">=</span> src<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-src-Makefile-am\"><a href=\"#3-src-Makefile-am\" class=\"headerlink\" title=\"3. src/Makefile.am\"></a>3. <code>src/Makefile.am</code></h3><pre class=\"line-numbers language-makefile\" data-language=\"makefile\"><code class=\"language-makefile\">bin_PROGRAMS <span class=\"token operator\">=</span> myapp\nmyapp_SOURCES <span class=\"token operator\">=</span> main.c utils.c utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-src-main-c\"><a href=\"#4-src-main-c\" class=\"headerlink\" title=\"4. src/main.c\"></a>4. <code>src/main.c</code></h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"utils.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-src-utils-c\"><a href=\"#5-src-utils-c\" class=\"headerlink\" title=\"5. src/utils.c\"></a>5. <code>src/utils.c</code></h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"utils.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-src-utils-h\"><a href=\"#6-src-utils-h\" class=\"headerlink\" title=\"6. src/utils.h\"></a>6. <code>src/utils.h</code></h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">UTILS_H</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">UTILS_H</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"构建和运行\"><a href=\"#构建和运行\" class=\"headerlink\" title=\"构建和运行\"></a>构建和运行</h3><h4 id=\"1-生成文件\"><a href=\"#1-生成文件\" class=\"headerlink\" title=\"1. 生成文件\"></a>1. 生成文件</h4><p>运行以下命令生成必要的构建文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal\nautoconf\nautomake --add-missing\n./configure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"3. 安装\"></a>3. 安装</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"4-运行程序\"><a href=\"#4-运行程序\" class=\"headerlink\" title=\"4. 运行程序\"></a>4. 运行程序</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./src/myapp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"六、常见问题及解决方法\"><a href=\"#六、常见问题及解决方法\" class=\"headerlink\" title=\"六、常见问题及解决方法\"></a>六、常见问题及解决方法</h2><ol>\n<li><strong><code>aclocal: command not found</code></strong><br><strong>原因</strong>: 未安装 <code>automake</code>。<br><strong>解决</strong>: 安装 <code>automake</code>。</li>\n<li><strong><code>configure.ac: no proper invocation of AM_INIT_AUTOMAKE</code></strong><br><strong>原因</strong>: <code>configure.ac</code> 中缺少 <code>AM_INIT_AUTOMAKE</code>。<br><strong>解决</strong>: 添加 <code>AM_INIT_AUTOMAKE</code>。</li>\n<li><strong><code>Makefile.am: required file 'INSTALL' not found</code></strong><br><strong>原因</strong>: 缺少默认的 <code>INSTALL</code> 文件。<br><strong>解决</strong>: 使用 <code>automake --add-missing</code> 自动生成。</li>\n</ol>\n<hr>\n<h2 id=\"一、autoscan\"><a href=\"#一、autoscan\" class=\"headerlink\" title=\"一、autoscan\"></a>一、<code>autoscan</code></h2><h3 id=\"1-什么是-autoscan\"><a href=\"#1-什么是-autoscan\" class=\"headerlink\" title=\"1. 什么是 autoscan\"></a>1. 什么是 <code>autoscan</code></h3><p><code>autoscan</code> 是 <code>autoconf</code> 的一个辅助工具，用于自动生成初始的 <code>configure.ac</code> 文件（或者早期的 <code>configure.in</code> 文件）。它会扫描项目目录中的文件，推测需要哪些检查，并生成一个名为 <code>configure.scan</code> 的模板文件供开发者参考。</p>\n<hr>\n<h3 id=\"2-autoscan-的功能\"><a href=\"#2-autoscan-的功能\" class=\"headerlink\" title=\"2. autoscan 的功能\"></a>2. <code>autoscan</code> 的功能</h3><ul>\n<li>自动检测源码中的依赖，例如头文件、库文件。</li>\n<li>提供一个初步的 <code>configure.ac</code> 文件模板。</li>\n<li>简化了手动编写配置文件的过程。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用方法\"><a href=\"#3-使用方法\" class=\"headerlink\" title=\"3. 使用方法\"></a>3. 使用方法</h3><h4 id=\"1-初始化项目\"><a href=\"#1-初始化项目\" class=\"headerlink\" title=\"(1) 初始化项目\"></a>(1) 初始化项目</h4><p>确保项目目录结构已经创建，并包含至少一个源文件（如 <code>main.c</code>）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> myproject\n<span class=\"token builtin class-name\">cd</span> myproject\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'#include &lt;stdio.h&gt;'</span> <span class=\"token operator\">&gt;</span> main.c\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'int main() { return 0; }'</span> <span class=\"token operator\">&gt;&gt;</span> main.c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-运行-autoscan\"><a href=\"#2-运行-autoscan\" class=\"headerlink\" title=\"(2) 运行 autoscan\"></a>(2) 运行 <code>autoscan</code></h4><p>在项目目录中运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoscan<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行完成后，生成一个 <code>configure.scan</code> 文件。</p>\n<h4 id=\"3-修改-configure-scan\"><a href=\"#3-修改-configure-scan\" class=\"headerlink\" title=\"(3) 修改 configure.scan\"></a>(3) 修改 <code>configure.scan</code></h4><p>将 <code>configure.scan</code> 重命名为 <code>configure.ac</code>，并根据实际需求修改内容。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> configure.scan configure.ac<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>示例生成的 <code>configure.scan</code> 文件可能包含以下内容：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([UNKNOWN], [1.0], [bug-report@example.com])\nAC_CONFIG_SRCDIR([main.c])\nAC_CONFIG_HEADERS([config.h])\nAC_PROG_CC\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改后，可添加更多具体的检查内容，例如库依赖、路径配置等。</p>\n<h4 id=\"4-继续构建\"><a href=\"#4-继续构建\" class=\"headerlink\" title=\"(4) 继续构建\"></a>(4) 继续构建</h4><p>生成 <code>configure</code> 脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"4-autoscan-的注意事项\"><a href=\"#4-autoscan-的注意事项\" class=\"headerlink\" title=\"4. autoscan 的注意事项\"></a>4. <code>autoscan</code> 的注意事项</h3><ul>\n<li>它只能作为生成初始配置的工具，输出的 <code>configure.scan</code> 文件需要手动完善。</li>\n<li>如果项目目录中没有 <code>.c</code> 文件或标准构建文件，<code>autoscan</code> 可能无法推断正确的配置。</li>\n</ul>\n<hr>\n<h2 id=\"二、aclocal\"><a href=\"#二、aclocal\" class=\"headerlink\" title=\"二、aclocal\"></a>二、<code>aclocal</code></h2><h3 id=\"1-什么是-aclocal\"><a href=\"#1-什么是-aclocal\" class=\"headerlink\" title=\"1. 什么是 aclocal\"></a>1. 什么是 <code>aclocal</code></h3><p><code>aclocal</code> 是 <code>automake</code> 的辅助工具，专门用于生成 <code>aclocal.m4</code> 文件。<code>aclocal.m4</code> 是一个包含各种宏定义的文件，用于支持 <code>autoconf</code> 和 <code>automake</code> 的功能。</p>\n<p><code>aclocal</code> 会扫描项目目录中的 <code>configure.ac</code> 文件，以及系统中可用的宏定义，生成一个与项目兼容的宏文件。</p>\n<hr>\n<h3 id=\"2-aclocal-的功能\"><a href=\"#2-aclocal-的功能\" class=\"headerlink\" title=\"2. aclocal 的功能\"></a>2. <code>aclocal</code> 的功能</h3><ul>\n<li>根据 <code>configure.ac</code> 的内容，生成或更新 <code>aclocal.m4</code> 文件。</li>\n<li>提供对额外宏库的支持，例如 GNU 库的宏。</li>\n<li>管理自定义宏，以便 <code>autoconf</code> 和 <code>automake</code> 可以正确工作。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用方法-1\"><a href=\"#3-使用方法-1\" class=\"headerlink\" title=\"3. 使用方法\"></a>3. 使用方法</h3><h4 id=\"1-编写-configure-ac\"><a href=\"#1-编写-configure-ac\" class=\"headerlink\" title=\"(1) 编写 configure.ac\"></a>(1) 编写 <code>configure.ac</code></h4><p>假设我们有以下简单的 <code>configure.ac</code> 文件：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [bug-report@example.com])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-运行-aclocal\"><a href=\"#2-运行-aclocal\" class=\"headerlink\" title=\"(2) 运行 aclocal\"></a>(2) 运行 <code>aclocal</code></h4><p>运行以下命令生成或更新 <code>aclocal.m4</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>生成的 <code>aclocal.m4</code> 文件可能包含标准宏，例如对编译器检查、头文件检查等的支持。</p>\n<h4 id=\"3-后续步骤\"><a href=\"#3-后续步骤\" class=\"headerlink\" title=\"(3) 后续步骤\"></a>(3) 后续步骤</h4><p>生成 <code>configure</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"4-自定义宏支持\"><a href=\"#4-自定义宏支持\" class=\"headerlink\" title=\"4. 自定义宏支持\"></a>4. 自定义宏支持</h3><p>如果你需要自定义宏，可以创建一个名为 <code>m4/</code> 的目录，并将宏文件放入其中。例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> m4\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'AC_DEFUN([MY_MACRO], [echo \"This is my custom macro\"])'</span> <span class=\"token operator\">&gt;</span> m4/my_macro.m4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>然后在 <code>configure.ac</code> 中引用：</p>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [bug-report@example.com])\nAC_CONFIG_MACRO_DIR([m4])  # 指定宏目录\nAM_INIT_AUTOMAKE\nMY_MACRO\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行以下命令，<code>aclocal</code> 会自动包含自定义宏：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"三、完整实践示例\"><a href=\"#三、完整实践示例\" class=\"headerlink\" title=\"三、完整实践示例\"></a>三、完整实践示例</h2><p>假设我们有一个简单的项目：<br>目录结构如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">myproject/\n├── configure.ac\n├── Makefile.am\n├── src/\n│   ├── main.c\n│   ├── utils.c\n│   └── utils.h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下是构建流程：</p>\n<ol>\n<li><strong>生成初始文件</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoscan\n<span class=\"token function\">mv</span> configure.scan configure.ac<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>完善 <code>configure.ac</code></strong></li>\n</ol>\n<pre class=\"line-numbers language-m4\" data-language=\"m4\"><code class=\"language-m4\">AC_INIT([myproject], [1.0], [bug-report@example.com])\nAC_CONFIG_SRCDIR([src/main.c])\nAC_CONFIG_MACRO_DIR([m4])\nAM_INIT_AUTOMAKE\nAC_PROG_CC\nAC_OUTPUT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>生成宏文件</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aclocal<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li><strong>生成 <code>configure</code> 脚本</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">autoconf\nautomake --add-missing<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>运行 <code>configure</code> 和编译</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/20/linux-bian-yi-charm-ku/",
            "url": "https://0xdadream.github.io/2024/11/20/linux-bian-yi-charm-ku/",
            "title": "linux编译charm库",
            "date_published": "2024-11-20T01:25:00.000Z",
            "content_html": "<h1 id=\"linux编译charm库\"><a href=\"#linux编译charm库\" class=\"headerlink\" title=\"linux编译charm库\"></a>linux编译charm库</h1><p>在 Windows 的 Linux 子系统 (WSL) 中使用 Ubuntu 编译安装 Charm 库的步骤如下：</p>\n<hr>\n<h3 id=\"基于-WSL-的-Charm-库安装教程\"><a href=\"#基于-WSL-的-Charm-库安装教程\" class=\"headerlink\" title=\"基于 WSL 的 Charm 库安装教程\"></a><strong>基于 WSL 的 Charm 库安装教程</strong></h3><h4 id=\"1-更新系统并安装依赖\"><a href=\"#1-更新系统并安装依赖\" class=\"headerlink\" title=\"1. 更新系统并安装依赖\"></a><strong>1. 更新系统并安装依赖</strong></h4><p>应用商店下载linux后执行<code>wsl --update</code></p>\n<p>在 WSL Ubuntu 中，运行以下命令安装必要的编译工具和库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> build-essential python3 python3-dev python3-pip python3-setuptools <span class=\"token punctuation\">\\</span>\n                     libgmp-dev libssl-dev swig libpbc-dev <span class=\"token function\">git</span> <span class=\"token function\">wget</span> gcc <span class=\"token function\">make</span> m4 flex bison<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里的库可以一个一个单独安装，没有就去找源码安装，下面报安装错也能再安装，这里ubuntu版本最好不要太高，openssl我的是3.0.2没问题，gmp最高，openssl，python一般会自带，python我的是python3.10</p>\n<hr>\n<h4 id=\"2-安装-PBC-库\"><a href=\"#2-安装-PBC-库\" class=\"headerlink\" title=\"2. 安装 PBC 库\"></a><strong>2. 安装 PBC 库</strong></h4><p>PBC 是 Charm 的核心依赖之一，需要手动编译安装。</p>\n<ol>\n<li><p><strong>下载源码：</strong></p>\n<p><a href=\"https://crypto.stanford.edu/pbc/download.html\">PBC Library - Pairing-Based Cryptography - Downloads</a>下载第一个</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://crypto.stanford.edu/pbc/files/pbc-0.5.14.tar.gz\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> pbc-0.5.14.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>编译和安装：</strong></p>\n<p>进入解压的目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure\n<span class=\"token function\">make</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"/usr/local/lib\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> <span class=\"token parameter variable\">-a</span> /etc/ld.so.conf.d/libpbc.conf\n<span class=\"token function\">sudo</span> ldconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h4 id=\"3-下载并安装-Charm-库\"><a href=\"#3-下载并安装-Charm-库\" class=\"headerlink\" title=\"3. 下载并安装 Charm 库\"></a><strong>3. 下载并安装 Charm 库</strong></h4><ol>\n<li><p><strong>下载源码：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/JHUISI/charm.git\n<span class=\"token builtin class-name\">cd</span> charm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>配置安装路径：</strong></p>\n<p>执行 <code>configure.sh</code> 脚本，指定 GMP 和 PBC 的安装路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure.sh\n\n<span class=\"token comment\">#执行成功</span>\nInstall prefix    /usr/local\ndata directory    /usr/local/share/charm\nbinary directory  /usr/local/bin\nlibrary directory /usr/local/lib\nconfig directory  /usr/local/etc\nSource path       /home/hero/charm\nCFLAGS            <span class=\"token parameter variable\">-O2</span> <span class=\"token parameter variable\">-g</span>\nCHARM_CFLAGS       <span class=\"token parameter variable\">-m64</span> <span class=\"token parameter variable\">-Wall</span> <span class=\"token parameter variable\">-Wundef</span> -Wwrite-strings -Wmissing-prototypes  -fstack-protector-all -Wendif-labels -Wmissing-include-dirs -Wempty-body -Wnested-externs -Wformat-security -Wformat-y2k -Winit-self -Wignored-qualifiers -Wold-style-declaration -Wold-style-definition -Wtype-limits\nLDFLAGS           <span class=\"token parameter variable\">-m64</span>\n<span class=\"token function\">make</span>              <span class=\"token function\">make</span>\npython            /usr/bin/python3\npython-config     /usr/bin/python3-config\nbuild_ext options build_ext\n<span class=\"token function\">install</span>           <span class=\"token function\">install</span>\n<span class=\"token function\">host</span> CPU          x86_64\n<span class=\"token function\">wget</span>              /usr/bin/wget\ngprof enabled     no\nprofiler          no\nstatic build      no\n<span class=\"token parameter variable\">-Werror</span> enabled   no\ninteger module    <span class=\"token function\">yes</span>\necc module        <span class=\"token function\">yes</span>\npairing module    <span class=\"token function\">yes</span>\ndisable benchmark no\nlibm found        <span class=\"token function\">yes</span>\nlibgmp found      <span class=\"token function\">yes</span>\nlibpbc found      <span class=\"token function\">yes</span>\nlibcrypto found   <span class=\"token function\">yes</span>\nDocumentation     no<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>编译和安装：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span>\n\n<span class=\"token comment\">#执行成功</span>\ncopying build/lib.linux-x86_64-3.8/charm/core/math/pairing.cpython-38-x86_64-linux-gnu.so -<span class=\"token operator\">&gt;</span> charm/core/math\ncopying build/lib.linux-x86_64-3.8/charm/core/math/integer.cpython-38-x86_64-linux-gnu.so -<span class=\"token operator\">&gt;</span> charm/core/math\ncopying build/lib.linux-x86_64-3.8/charm/core/math/elliptic_curve.cpython-38-x86_64-linux-gnu.so -<span class=\"token operator\">&gt;</span> charm/core/math\ncopying build/lib.linux-x86_64-3.8/charm/core/benchmark.cpython-38-x86_64-linux-gnu.so -<span class=\"token operator\">&gt;</span> charm/core\ncopying build/lib.linux-x86_64-3.8/charm/core/crypto/cryptobase.cpython-38-x86_64-linux-gnu.so -<span class=\"token operator\">&gt;</span> charm/core/crypto\ncopying build/lib.linux-x86_64-3.8/charm/core/crypto/AES.cpython-38-x86_64-linux-gnu.so -<span class=\"token operator\">&gt;</span> charm/core/crypto\ncopying build/lib.linux-x86_64-3.8/charm/core/crypto/DES.cpython-38-x86_64-linux-gnu.so -<span class=\"token operator\">&gt;</span> charm/core/crypto\ncopying build/lib.linux-x86_64-3.8/charm/core/crypto/DES3.cpython-38-x86_64-linux-gnu.so -<span class=\"token operator\">&gt;</span> charm/core/crypto\nComplete\n\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n<span class=\"token comment\">#执行成功</span>\nInstalled /usr/local/lib/python3.8/dist-packages/attrs-25.3.0-py3.8.egg\nSearching <span class=\"token keyword\">for</span> <span class=\"token assign-left variable\">setuptools</span><span class=\"token operator\">==</span><span class=\"token number\">45.2</span>.0\nBest match: setuptools <span class=\"token number\">45.2</span>.0\nAdding setuptools <span class=\"token number\">45.2</span>.0 to easy-install.pth <span class=\"token function\">file</span>\nInstalling easy_install script to /usr/local/bin\n\nUsing /usr/lib/python3/dist-packages\nFinished processing dependencies <span class=\"token keyword\">for</span> Charm-Crypto<span class=\"token operator\">==</span><span class=\"token number\">0.50</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>import charm</code>判断安装是否成功</p>\n</li>\n</ol>\n<hr>\n<p>PS：conda环境下会使用conda自带的环境，可能会编译出错，需要禁用，执行命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> /root/miniconda3/compiler_compat /root/miniconda3/compiler_compat.bak<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>后面直接改回就行了</p>\n<p>报错就看报错信息，可以参考官方<a href=\"https://jhuisi.github.io/charm/install_source.html\">Platform Install Manual — Charm-Crypto 0.50 documentation</a></p>\n",
            "tags": [
                "linux",
                "bug"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/08/10/ruan-lian-jie-he-ying-lian-jie/",
            "url": "https://0xdadream.github.io/2024/08/10/ruan-lian-jie-he-ying-lian-jie/",
            "title": "软链接和硬链接",
            "date_published": "2024-08-10T02:25:00.000Z",
            "content_html": "<h1 id=\"软链接和硬链接\"><a href=\"#软链接和硬链接\" class=\"headerlink\" title=\"软链接和硬链接\"></a>软链接和硬链接</h1><p>在Linux和Unix系统中，<strong>软链接</strong>（符号链接，symbolic link，简称<code>symlink</code>）和<strong>硬链接</strong>（hard link）是两种用于指向文件或目录的方式。它们有不同的用途和行为。</p>\n<h2 id=\"1-软链接（Symbolic-Link）\"><a href=\"#1-软链接（Symbolic-Link）\" class=\"headerlink\" title=\"1. 软链接（Symbolic Link）\"></a>1. 软链接（Symbolic Link）</h2><p>软链接类似于Windows中的快捷方式，它是一个指向另一个文件或目录的指针。创建软链接后，这个链接文件本身并不包含目标文件的数据，而是包含目标文件的路径。</p>\n<h4 id=\"特性：\"><a href=\"#特性：\" class=\"headerlink\" title=\"特性：\"></a>特性：</h4><ul>\n<li><strong>指向目标文件的路径</strong>：软链接文件仅存储目标文件的路径，而不是文件内容。</li>\n<li><strong>跨文件系统</strong>：软链接可以指向不同文件系统中的文件或目录。</li>\n<li><strong>链断裂问题</strong>：如果目标文件被删除或移动，软链接将失效，成为“断链”。</li>\n<li><strong>文件大小</strong>：软链接的大小是指向目标文件路径的长度。</li>\n</ul>\n<h4 id=\"创建软链接\"><a href=\"#创建软链接\" class=\"headerlink\" title=\"创建软链接\"></a>创建软链接</h4><p>要创建一个软链接，你可以使用<code>ln -s</code>命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /path/to/target /path/to/symlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /home/user/original_file.txt /home/user/shortcut_to_file.txt <span class=\"token comment\"># 也可以是目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将创建一个名为<code>shortcut_to_file.txt</code>的软链接，指向<code>/home/user/original_file.txt</code>。</p>\n<h4 id=\"查看软链接\"><a href=\"#查看软链接\" class=\"headerlink\" title=\"查看软链接\"></a>查看软链接</h4><p>使用<code>ls -l</code>命令可以查看软链接的详细信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> /path/to/symlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> /home/user/shortcut_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lrwxrwxrwx <span class=\"token number\">1</span> user user <span class=\"token number\">21</span> Aug <span class=\"token number\">12</span> <span class=\"token number\">12</span>:00 /home/user/shortcut_to_file.txt -<span class=\"token operator\">&gt;</span> /home/user/original_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>l</code>表示这是一个软链接，箭头<code>-&gt;</code>后面是目标路径。</p>\n<h4 id=\"删除软链接\"><a href=\"#删除软链接\" class=\"headerlink\" title=\"删除软链接\"></a>删除软链接</h4><p>使用<code>rm</code>命令删除软链接。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> /path/to/symlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> /home/user/shortcut_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将删除软链接，但不会影响目标文件。</p>\n<h2 id=\"2-硬链接（Hard-Link）\"><a href=\"#2-硬链接（Hard-Link）\" class=\"headerlink\" title=\"2. 硬链接（Hard Link）\"></a>2. 硬链接（Hard Link）</h2><p>硬链接是文件系统中的一个目录条目，它指向文件的实际数据块。与软链接不同，硬链接不是指向路径，而是指向数据块。因此，硬链接和原始文件共享相同的数据块。</p>\n<h4 id=\"特性：-1\"><a href=\"#特性：-1\" class=\"headerlink\" title=\"特性：\"></a>特性：</h4><ul>\n<li><strong>指向数据块</strong>：硬链接指向文件的实际数据块，而不是路径。</li>\n<li><strong>共享文件数据</strong>：硬链接和原始文件共享相同的数据块，因此它们内容完全相同，且修改一个文件内容会同时更新硬链接的内容。</li>\n<li><strong>不可跨文件系统</strong>：硬链接必须在同一文件系统内。</li>\n<li><strong>删除影响</strong>：删除一个硬链接不会影响文件的实际数据，只有当所有指向数据块的硬链接都删除后，文件的数据才会被删除。</li>\n</ul>\n<h4 id=\"创建硬链接\"><a href=\"#创建硬链接\" class=\"headerlink\" title=\"创建硬链接\"></a>创建硬链接</h4><p>要创建一个硬链接，你可以使用<code>ln</code>命令（不带<code>-s</code>选项）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> /path/to/target /path/to/hardlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> /home/user/original_file.txt /home/user/hardlink_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将创建一个名为<code>hardlink_to_file.txt</code>的硬链接，指向<code>/home/user/original_file.txt</code>的数据块。</p>\n<h4 id=\"查看硬链接\"><a href=\"#查看硬链接\" class=\"headerlink\" title=\"查看硬链接\"></a>查看硬链接</h4><p>使用<code>ls -li</code>命令可以查看文件的inode号，硬链接共享相同的inode号。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-li</span> /path/to/target /path/to/hardlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-li</span> /home/user/original_file.txt /home/user/hardlink_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1234567</span> -rw-r--r-- <span class=\"token number\">2</span> user user <span class=\"token number\">1024</span> Aug <span class=\"token number\">12</span> <span class=\"token number\">12</span>:00 /home/user/original_file.txt\n<span class=\"token number\">1234567</span> -rw-r--r-- <span class=\"token number\">2</span> user user <span class=\"token number\">1024</span> Aug <span class=\"token number\">12</span> <span class=\"token number\">12</span>:00 /home/user/hardlink_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>两个文件共享相同的inode号（<code>1234567</code>），说明它们是硬链接。</p>\n<h4 id=\"删除硬链接\"><a href=\"#删除硬链接\" class=\"headerlink\" title=\"删除硬链接\"></a>删除硬链接</h4><p>使用<code>rm</code>命令删除硬链接。删除硬链接不会删除文件数据，只有当所有硬链接都被删除后，文件数据才会被删除。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> /path/to/hardlink<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> /home/user/hardlink_to_file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这将删除硬链接，但<code>/home/user/original_file.txt</code>仍然存在，文件数据依然可用。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li><strong>软链接</strong>：适合用作快捷方式和指向目录。使用软链接时，请确保目标文件存在，或会造成“断链”。</li>\n<li><strong>硬链接</strong>：适用于同一文件系统内共享文件数据，不能链接到目录（通常情况下）。硬链接不可跨文件系统。</li>\n</ul>\n<h2 id=\"进阶操作\"><a href=\"#进阶操作\" class=\"headerlink\" title=\"进阶操作\"></a>进阶操作</h2><ul>\n<li><p><strong>查看所有链接</strong>：使用<code>find</code>命令查找所有指向某个目标的软链接或硬链接。</p>\n<p><strong>示例</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> /path/to/directory <span class=\"token parameter variable\">-type</span> l <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"link_name\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个命令会查找所有名为<code>link_name</code>的软链接。</p>\n</li>\n</ul>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/08/03/shell/",
            "url": "https://0xdadream.github.io/2024/08/03/shell/",
            "title": "shell",
            "date_published": "2024-08-03T01:25:00.000Z",
            "content_html": "<h1 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h1><p>Shell 是一种用于与操作系统进行交互的命令行界面。常见的 Shell 有 Bash（Bourne Again Shell）、Zsh、Ksh、以及 Windows 上的 PowerShell。Shell 不仅可以用于执行单个命令，还可以编写脚本来自动化任务。以下是一些基本的 Shell 命令和脚本编写的示例。</p>\n<h2 id=\"基本-Shell-命令\"><a href=\"#基本-Shell-命令\" class=\"headerlink\" title=\"基本 Shell 命令\"></a>基本 Shell 命令</h2><h3 id=\"文件和目录操作\"><a href=\"#文件和目录操作\" class=\"headerlink\" title=\"文件和目录操作\"></a>文件和目录操作</h3><ul>\n<li><p><strong>ls</strong>：列出目录内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span>\n<span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span>  <span class=\"token comment\"># 显示详细信息</span>\n<span class=\"token function\">ls</span> <span class=\"token parameter variable\">-a</span>  <span class=\"token comment\"># 显示所有文件，包括隐藏文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>cd</strong>：更改目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /path/to/directory\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>  <span class=\"token comment\"># 返回上一级目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>pwd</strong>：显示当前工作目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">pwd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>mkdir</strong>：创建目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> new_directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>rm</strong>：删除文件或目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> filename\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> directory  <span class=\"token comment\"># 删除目录及其内容</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>cp</strong>：复制文件或目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> source_file destination\n<span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span> source_directory destination  <span class=\"token comment\"># 复制目录及其内容</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>mv</strong>：移动或重命名文件或目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> old_name new_name\n<span class=\"token function\">mv</span> <span class=\"token function\">file</span> /path/to/destination<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"文件查看和编辑\"><a href=\"#文件查看和编辑\" class=\"headerlink\" title=\"文件查看和编辑\"></a>文件查看和编辑</h3><ul>\n<li><p><strong>cat</strong>：查看文件内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>less</strong>：分页查看文件内容</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">less</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>head</strong>：查看文件开头部分</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">head</span> filename\n<span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span> filename  <span class=\"token comment\"># 查看前 10 行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>tail</strong>：查看文件末尾部分</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tail</span> filename\n<span class=\"token function\">tail</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span> filename  <span class=\"token comment\"># 查看后 10 行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>nano</strong>、<strong>vi</strong>、<strong>vim</strong>：文本编辑器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> filename\n<span class=\"token function\">vi</span> filename\n<span class=\"token function\">vim</span> filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"系统信息和管理\"><a href=\"#系统信息和管理\" class=\"headerlink\" title=\"系统信息和管理\"></a>系统信息和管理</h3><ul>\n<li><p><strong>echo</strong>：打印消息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, World!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>whoami</strong>：显示当前用户</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">whoami</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>top</strong>：实时显示系统性能信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">top</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>ps</strong>：显示当前进程</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span>\n<span class=\"token function\">ps</span> aux  <span class=\"token comment\"># 显示所有进程</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>kill</strong>：终止进程</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">kill</span> PID\n<span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> PID  <span class=\"token comment\"># 强制终止进程</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>chmod</strong>：更改文件权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token number\">755</span> filename\n<span class=\"token function\">chmod</span> +x filename  <span class=\"token comment\"># 使文件可执行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>chown</strong>：更改文件所有者</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> user:group filename<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"网络相关\"><a href=\"#网络相关\" class=\"headerlink\" title=\"网络相关\"></a>网络相关</h3><ul>\n<li><p><strong>ping</strong>：测试网络连通性</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ping</span> example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>curl</strong>：发送网络请求</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>wget</strong>：下载文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> http://example.com/file<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"管道和重定向\"><a href=\"#管道和重定向\" class=\"headerlink\" title=\"管道和重定向\"></a>管道和重定向</h3><ul>\n<li><p>**|**：管道，将一个命令的输出作为另一个命令的输入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"pattern\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>**&gt;**：重定向输出到文件（覆盖）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&gt;</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>**&gt;&gt;**：重定向输出到文件（追加）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, World!\"</span> <span class=\"token operator\">&gt;&gt;</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>**&lt;**：重定向输入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">&lt;</span> inputfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><ul>\n<li><p>设置变量</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">MY_VAR</span><span class=\"token operator\">=</span><span class=\"token string\">\"Hello, World!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>使用变量</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$MY_VAR</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"Shell-脚本\"><a href=\"#Shell-脚本\" class=\"headerlink\" title=\"Shell 脚本\"></a>Shell 脚本</h2><p>Shell 脚本是一组 Shell 命令的集合，通常用于自动化任务。以下是一个简单的 Shell 脚本示例：</p>\n<h3 id=\"创建脚本文件\"><a href=\"#创建脚本文件\" class=\"headerlink\" title=\"创建脚本文件\"></a>创建脚本文件</h3><p>使用你喜欢的文本编辑器创建一个脚本文件，例如 <code>myscript.sh</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> myscript.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"编写脚本\"><a href=\"#编写脚本\" class=\"headerlink\" title=\"编写脚本\"></a>编写脚本</h3><p>在脚本文件中编写以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 打印消息</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is a simple shell script.\"</span>\n\n<span class=\"token comment\"># 设置变量</span>\n<span class=\"token assign-left variable\">NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"Alice\"</span>\n\n<span class=\"token comment\"># 使用变量</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello, <span class=\"token variable\">$NAME</span>!\"</span>\n\n<span class=\"token comment\"># 条件语句</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$NAME</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Welcome, Alice!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"You are not Alice.\"</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 循环</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number: <span class=\"token variable\">$i</span>\"</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># 函数</span>\n<span class=\"token function-name function\">my_function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is a function.\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 调用函数</span>\nmy_function<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h3><p>首先使脚本可执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x myscript.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后运行脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./myscript.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/07/20/linux-mei-hua-ming-ling-xing/",
            "url": "https://0xdadream.github.io/2024/07/20/linux-mei-hua-ming-ling-xing/",
            "title": "linux美化命令行",
            "date_published": "2024-07-19T22:25:00.000Z",
            "content_html": "<h1 id=\"linux美化命令行\"><a href=\"#linux美化命令行\" class=\"headerlink\" title=\"linux美化命令行\"></a>linux美化命令行</h1><h2 id=\"centos8\"><a href=\"#centos8\" class=\"headerlink\" title=\"centos8\"></a>centos8</h2><h3 id=\"安装和配置-Zsh\"><a href=\"#安装和配置-Zsh\" class=\"headerlink\" title=\"安装和配置 Zsh\"></a>安装和配置 Zsh</h3><p>首先，安装 Zsh：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">zsh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将默认 shell 更改为 Zsh：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">chsh <span class=\"token parameter variable\">-s</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">which</span> <span class=\"token function\">zsh</span><span class=\"token variable\">)</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>重新登录以使更改生效，或者使用以下命令启动 Zsh：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">zsh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装和配置-Oh-My-Zsh\"><a href=\"#安装和配置-Oh-My-Zsh\" class=\"headerlink\" title=\"安装和配置 Oh My Zsh\"></a>安装和配置 Oh My Zsh</h3><p>下载并安装 Oh My Zsh：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sh</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装并启用-Powerline\"><a href=\"#安装并启用-Powerline\" class=\"headerlink\" title=\"安装并启用 Powerline\"></a>安装并启用 Powerline</h3><p>安装 Powerline 及其字体支持：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> epel-release\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> powerline powerline-fonts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>编辑 <code>~/.zshrc</code> 文件以启用 Powerline：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在文件末尾添加以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> /usr/share/powerline/zsh/powerline.zsh <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">source</span> /usr/share/powerline/zsh/powerline.zsh\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>保存并退出，然后重新加载 <code>~/.zshrc</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装并配置插件\"><a href=\"#安装并配置插件\" class=\"headerlink\" title=\"安装并配置插件\"></a>安装并配置插件</h3><h4 id=\"安装-zsh-syntax-highlighting-插件\"><a href=\"#安装-zsh-syntax-highlighting-插件\" class=\"headerlink\" title=\"安装 zsh-syntax-highlighting 插件\"></a>安装 zsh-syntax-highlighting 插件</h4><p>该插件提供命令语法高亮：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安装-zsh-autosuggestions-插件\"><a href=\"#安装-zsh-autosuggestions-插件\" class=\"headerlink\" title=\"安装 zsh-autosuggestions 插件\"></a>安装 zsh-autosuggestions 插件</h4><p>该插件提供命令自动建议：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"安装-fzf-插件\"><a href=\"#安装-fzf-插件\" class=\"headerlink\" title=\"安装 fzf 插件\"></a>安装 fzf 插件</h4><p>该插件提供模糊搜索功能：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span> <span class=\"token number\">1</span> https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>Ctrl+R开启搜索</p>\n<h4 id=\"安装-zsh-history-substring-search-插件\"><a href=\"#安装-zsh-history-substring-search-插件\" class=\"headerlink\" title=\"安装 zsh-history-substring-search 插件\"></a>安装 zsh-history-substring-search 插件</h4><p>该插件提供历史记录子字符串搜索：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-history-substring-search ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>上箭头键（↑）</strong>：在历史记录中查找当前输入的子字符串的上一条记录</p>\n<p><strong>下箭头键（↓）</strong>：在历史记录中查找当前输入的子字符串的下一条记录</p>\n<h3 id=\"安装-z-插件\"><a href=\"#安装-z-插件\" class=\"headerlink\" title=\"安装 z 插件\"></a>安装 <code>z</code> 插件</h3><p>克隆 <code>z</code> 插件仓库，用于目录跳转的非常方便的工具：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/rupa/z.git /var/local/z<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里不能放在<code>~</code>目录，有报错，没有目录自己创建</p>\n<p><code>z &lt;部分目录名&gt;</code>：跳转到包含指定部分目录名的路径中访问频率最高的目录</p>\n<p><code>z -l &lt;部分目录名&gt;</code>：列出包含指定部分目录名的所有目录，并按访问频率排序</p>\n<p><code>z -c &lt;部分目录名&gt;</code>：列出包含指定部分目录名的所有目录，并按访问时间排序</p>\n<h4 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h4><p>编辑 <code>~/.zshrc</code> 文件，添加并启用插件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到 <code>plugins</code> 这一行，并将其修改为如下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">git</span>\n    zsh-syntax-highlighting\n    zsh-autosuggestions\n    zsh-history-substring-search\n    z\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在文件末尾添加以下内容以启用 <code>zsh-history-substring-search</code> 和 <code>fzf</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\n<span class=\"token builtin class-name\">source</span> ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh\n<span class=\"token builtin class-name\">source</span> ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n\n<span class=\"token comment\"># z 插件配置</span>\n<span class=\"token builtin class-name\">source</span> /var/local/z/z.sh\n\n<span class=\"token comment\"># zsh-history-substring-search configuration</span>\nbindkey <span class=\"token string\">'^[[A'</span> history-substring-search-up\nbindkey <span class=\"token string\">'^[[B'</span> history-substring-search-down\n\n<span class=\"token comment\"># fzf configuration</span>\n<span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> ~/.fzf.zsh <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">source</span> ~/.fzf.zsh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存并退出，然后重新加载 <code>~/.zshrc</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装并配置-Powerlevel10k-主题\"><a href=\"#安装并配置-Powerlevel10k-主题\" class=\"headerlink\" title=\"安装并配置 Powerlevel10k 主题\"></a>安装并配置 Powerlevel10k 主题</h3><p>Powerlevel10k 是一个高性能的 Zsh 主题，提供了丰富的美化选项：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/romkatv/powerlevel10k.git <span class=\"token variable\">${ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom}</span>/themes/powerlevel10k<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>编辑 <code>~/.zshrc</code> 文件，设置 Powerlevel10k 主题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 <code>ZSH_THEME</code> 行修改为：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">ZSH_THEME</span><span class=\"token operator\">=</span><span class=\"token string\">\"powerlevel10k/powerlevel10k\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>保存并退出，然后重新加载 <code>~/.zshrc</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第一次启动时，Powerlevel10k 会引导你完成配置，选择你喜欢的配置选项即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">p10k configure <span class=\"token comment\"># 重新配置主题</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"Zsh-别名\"><a href=\"#Zsh-别名\" class=\"headerlink\" title=\"Zsh 别名\"></a>Zsh 别名</h4><p><strong>编辑 <code>~/.zshrc</code> 文件</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>添加常用别名</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">ll</span><span class=\"token operator\">=</span><span class=\"token string\">'ls -la'</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">gs</span><span class=\"token operator\">=</span><span class=\"token string\">'git status'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>保存并应用更改</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"一键脚本\"><a href=\"#一键脚本\" class=\"headerlink\" title=\"一键脚本\"></a>一键脚本</h3><p>创建文件zsh-setup.sh</p>\n<p><code>vim zsh-setup.sh</code>，将下面代码粘贴进来</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 更新系统并安装 Zsh</span>\n<span class=\"token function\">sudo</span> yum update <span class=\"token parameter variable\">-y</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">zsh</span>\n\n<span class=\"token comment\"># 将默认 shell 更改为 Zsh</span>\nchsh <span class=\"token parameter variable\">-s</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">which</span> <span class=\"token function\">zsh</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># 安装 Oh My Zsh</span>\n<span class=\"token function\">sh</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span>\n\n<span class=\"token comment\"># 安装 Powerline 和字体支持</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> epel-release\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> powerline powerline-fonts\n\n<span class=\"token comment\"># 配置 Powerline</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;&gt;</span> ~/.zshrc <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'EOF'\nif [ -f /usr/share/powerline/zsh/powerline.zsh ]; then\n    source /usr/share/powerline/zsh/powerline.zsh\nfi\nEOF</span>\n\n<span class=\"token comment\"># 安装 zsh-syntax-highlighting 插件</span>\n<span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting\n\n<span class=\"token comment\"># 安装 zsh-autosuggestions 插件</span>\n<span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions\n\n<span class=\"token comment\"># 安装 fzf 插件</span>\n<span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span> <span class=\"token number\">1</span> https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install <span class=\"token parameter variable\">--all</span>\n\n<span class=\"token comment\"># 安装 zsh-history-substring-search 插件</span>\n<span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-history-substring-search ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search\n\n<span class=\"token comment\"># 安装 z 插件</span>\n<span class=\"token function\">git</span> clone https://github.com/rupa/z.git /var/local/z\n\n<span class=\"token comment\"># 配置插件</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;&gt;</span> ~/.zshrc <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'EOF'\nplugins=(\n    git\n    zsh-syntax-highlighting\n    zsh-autosuggestions\n    zsh-history-substring-search\n    z\n)\n\nsource ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\nsource ~/.oh-my-zsh/custom/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh\nsource ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n\n# z 插件配置\nsource /var/local/z/z.sh\n\n# zsh-history-substring-search configuration\nbindkey '^[[A' history-substring-search-up\nbindkey '^[[B' history-substring-search-down\n\n# fzf configuration\n[ -f ~/.fzf.zsh ] &amp;&amp; source ~/.fzf.zsh\nEOF</span>\n\n<span class=\"token comment\"># 安装 Powerlevel10k 主题</span>\n<span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/romkatv/powerlevel10k.git <span class=\"token variable\">${ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom}</span>/themes/powerlevel10k\n\n<span class=\"token comment\"># 配置 Powerlevel10k 主题</span>\n<span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ZSH_THEME=\".*\"/ZSH_THEME=\"powerlevel10k\\/powerlevel10k\"/'</span> ~/.zshrc\n\n<span class=\"token comment\"># 重新加载 Zsh 配置</span>\n<span class=\"token builtin class-name\">source</span> ~/.zshrc\n\n<span class=\"token comment\"># 提示用户重新登录以使更改生效</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Please log out and log back in to apply the changes.\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>chmod +x zsh-setup.sh</code>赋予执行权限</p>\n<p><code>./zsh-setup.sh</code>执行两次脚本，再执行<code>source ~/.zshrc</code></p>\n<h3 id=\"恢复为bash\"><a href=\"#恢复为bash\" class=\"headerlink\" title=\"恢复为bash\"></a>恢复为bash</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span>  <span class=\"token comment\">#查看当前命令行</span>\n<span class=\"token function\">which</span> <span class=\"token function\">bash</span>  <span class=\"token comment\"># 查看bash所在目录</span>\nchsh <span class=\"token parameter variable\">-s</span> /bin/bash  <span class=\"token comment\"># 后面目录为你上述命令执行结果，切换命令行</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h2><p>和centos基本一致，将yum换成apt安装命令即可</p>\n<p>一键脚本也是将yum换成apt</p>\n",
            "tags": [
                "tip"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2023/03/08/linux-dao-shou-shi-xu-yao-an-zhuang/",
            "url": "https://0xdadream.github.io/2023/03/08/linux-dao-shou-shi-xu-yao-an-zhuang/",
            "title": "linux到手时需要安装",
            "date_published": "2023-03-07T20:11:00.000Z",
            "content_html": "<h1 id=\"linux到手时需要安装\"><a href=\"#linux到手时需要安装\" class=\"headerlink\" title=\"linux到手时需要安装\"></a>linux到手时需要安装</h1><h2 id=\"安装的依赖\"><a href=\"#安装的依赖\" class=\"headerlink\" title=\"安装的依赖\"></a>安装的依赖</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n",
            "tags": [
                "tip",
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2022/05/24/linux-zhong-echo-xie-ru-wen-jian/",
            "url": "https://0xdadream.github.io/2022/05/24/linux-zhong-echo-xie-ru-wen-jian/",
            "title": "linux中echo写入文件",
            "date_published": "2022-05-23T20:11:00.000Z",
            "content_html": "<h1 id=\"linux中echo写入文件\"><a href=\"#linux中echo写入文件\" class=\"headerlink\" title=\"linux中echo写入文件\"></a>linux中echo写入文件</h1><h2 id=\"覆盖文件内容\"><a href=\"#覆盖文件内容\" class=\"headerlink\" title=\"覆盖文件内容\"></a>覆盖文件内容</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"test\"</span> <span class=\"token operator\">&gt;</span> test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"追加文件内容\"><a href=\"#追加文件内容\" class=\"headerlink\" title=\"追加文件内容\"></a>追加文件内容</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"test\"</span> <span class=\"token operator\">&gt;&gt;</span> test.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>后面会自动加/n</p>\n",
            "tags": [
                "linux",
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2022/05/17/archlinux-she-zhi-zhong-wen/",
            "url": "https://0xdadream.github.io/2022/05/17/archlinux-she-zhi-zhong-wen/",
            "title": "archlinux设置中文",
            "date_published": "2022-05-16T20:11:00.000Z",
            "content_html": "<h1 id=\"archlinux设置中文\"><a href=\"#archlinux设置中文\" class=\"headerlink\" title=\"archlinux设置中文\"></a>archlinux设置中文</h1><p>执行<code>vim /etc/locale.gen</code>将下面字符前的#去掉</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">zh_CN.GB18030 GB18030\nzh_CN.UTF-8 UTF-8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>locale -a</code>查看当前可用locale</p>\n<p><code>vim /etc/locale.conf</code>添加<code>LANG=zh_CN.UTF-8</code>，这不是必须的，会导致乱码</p>\n<p>这样做会好些</p>\n<p>添加</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>zh_CN.UTF-8\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">LANGUAGE</span></span><span class=\"token operator\">=</span>zh_CN:en_US<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>到下面3个文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">.bashrc：每次使用终端时会应用此处的设置\n.xinitrc：每次使用 startx 或 SLiM 来启动 X 窗口系统时会应用此处的设置\n.xprofile：每次使用 GDM 等显示管理器时会应用此处的设置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>安装字体</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman <span class=\"token parameter variable\">-S</span> wqy-zenhei<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后添加如下到上述三个文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>zh_CN.UTF8\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">LANGUAGE</span></span><span class=\"token operator\">=</span>zh_CN:en_US\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">XMODIFIERS</span></span><span class=\"token operator\">=</span>@im<span class=\"token operator\">=</span>WQY\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GTK_IM_MODULE</span><span class=\"token operator\">=</span><span class=\"token string\">\"wqy\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">QT_IM_MODULE</span><span class=\"token operator\">=</span><span class=\"token string\">\"wqy\"</span>\nwqy <span class=\"token parameter variable\">-d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "tip",
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2022/05/17/linux-she-zhi-root-mi-ma/",
            "url": "https://0xdadream.github.io/2022/05/17/linux-she-zhi-root-mi-ma/",
            "title": "linux设置root密码",
            "date_published": "2022-05-16T20:11:00.000Z",
            "content_html": "<h1 id=\"linux设置root密码\"><a href=\"#linux设置root密码\" class=\"headerlink\" title=\"linux设置root密码\"></a>linux设置root密码</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token parameter variable\">-i</span>\n<span class=\"token function\">passwd</span>\n<span class=\"token comment\">#输入你的密码</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "tip",
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2022/05/17/linux-kai-qi-ssh/",
            "url": "https://0xdadream.github.io/2022/05/17/linux-kai-qi-ssh/",
            "title": "linux开启ssh",
            "date_published": "2022-05-16T19:11:00.000Z",
            "content_html": "<h1 id=\"linux开启ssh\"><a href=\"#linux开启ssh\" class=\"headerlink\" title=\"linux开启ssh\"></a>linux开启ssh</h1><h2 id=\"kali\"><a href=\"#kali\" class=\"headerlink\" title=\"kali\"></a>kali</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/ssh/sshd_config\n\n<span class=\"token comment\">#修改</span>\n<span class=\"token comment\">#PermitRootLogin prohibit-password   改为 PermitRootLogin yes</span>\n<span class=\"token comment\">#PasswordAuthentication yes  改为   PasswordAuthentication yes</span>\n\n<span class=\"token comment\">#Esc-&gt;:-&gt;wq保存</span>\n\n<span class=\"token comment\">#启动</span>\n/etc/init.d/ssh start \nor\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">ssh</span> start\n\n<span class=\"token comment\">#开机启动</span>\nupdate-rc.d <span class=\"token function\">ssh</span> <span class=\"token builtin class-name\">enable</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> openssh-server\n\n<span class=\"token comment\">#启动</span>\n/etc/init.d/ssh start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "tip",
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2022/05/17/ubuntu22.04lts-bu-neng-yun-xing-appimage/",
            "url": "https://0xdadream.github.io/2022/05/17/ubuntu22.04lts-bu-neng-yun-xing-appimage/",
            "title": "ubuntu22.04LTS不能运行Appimage",
            "date_published": "2022-05-16T18:11:00.000Z",
            "content_html": "<h1 id=\"ubuntu22-04LTS不能运行Appimage\"><a href=\"#ubuntu22-04LTS不能运行Appimage\" class=\"headerlink\" title=\"ubuntu22.04LTS不能运行Appimage\"></a>ubuntu22.04LTS不能运行Appimage</h1><h2 id=\"先换个源\"><a href=\"#先换个源\" class=\"headerlink\" title=\"先换个源\"></a>先换个源</h2><p>执行<code>vim /etc/apt/sources.list</code></p>\n<p>将下面内容任选一个加入</p>\n<p>阿里</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse\ndeb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>中科大</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiverse\ndeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse\ndeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>网易</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deb http://mirrors.163.com/ubuntu/ jammy main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiverse\ndeb http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ jammy main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ jammy-security main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ jammy-updates main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ jammy-proposed main restricted universe multiverse\ndeb-src http://mirrors.163.com/ubuntu/ jammy-backports main restricted universe multiverse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"先切换到root，也可以直接像下面使用sudo\"><a href=\"#先切换到root，也可以直接像下面使用sudo\" class=\"headerlink\" title=\"先切换到root，也可以直接像下面使用sudo\"></a>先切换到root，也可以直接像下面使用sudo</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token parameter variable\">-i</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"安装libfuse库\"><a href=\"#安装libfuse库\" class=\"headerlink\" title=\"安装libfuse库\"></a>安装libfuse库</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libfuse2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n",
            "tags": [
                "tip",
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2022/05/12/ubuntu-xu-ni-ji-jin-ru-initramfs-mo-shi/",
            "url": "https://0xdadream.github.io/2022/05/12/ubuntu-xu-ni-ji-jin-ru-initramfs-mo-shi/",
            "title": "ubuntu虚拟机进入initramfs模式",
            "date_published": "2022-05-11T18:11:00.000Z",
            "content_html": "<h1 id=\"ubuntu虚拟机进入initramfs模式\"><a href=\"#ubuntu虚拟机进入initramfs模式\" class=\"headerlink\" title=\"ubuntu虚拟机进入initramfs模式\"></a>ubuntu虚拟机进入initramfs模式</h1><p>可能是某个分区的出现了问题</p>\n<p>查看你的命令行，查看是否有如<code>/dev/sda5分区</code>信息</p>\n<p>如果有，执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">fsck</span> <span class=\"token parameter variable\">-y</span> /dev/sda5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后重启，其他分区也相同</p>\n",
            "tags": [
                "tip",
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2022/05/06/neither-flex-nor-lex-was-found/",
            "url": "https://0xdadream.github.io/2022/05/06/neither-flex-nor-lex-was-found/",
            "title": "Neither flex nor lex was found",
            "date_published": "2022-05-05T18:11:00.000Z",
            "content_html": "<h1 id=\"Neither-flex-nor-lex-was-found\"><a href=\"#Neither-flex-nor-lex-was-found\" class=\"headerlink\" title=\"Neither flex nor lex was found\"></a>Neither flex nor lex was found</h1><p>编译<code>./configure</code>libpcap时报错Neither flex nor lex was found</p>\n<p>安装flex，bison就能解决</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> flex\n<span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> bison<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>报错：<code>libpcap.so.1: cannot open shared object file: No such file or directory</code></p>\n<p>执行，添加一个链接</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /usr/local/lib/libpcap.so.1 /usr/lib/libpcap.so.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n",
            "tags": [
                "tip",
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2021/09/08/linux-ming-ling/",
            "url": "https://0xdadream.github.io/2021/09/08/linux-ming-ling/",
            "title": "linux命令",
            "date_published": "2021-09-07T18:11:00.000Z",
            "content_html": "<h1 id=\"linux命令\"><a href=\"#linux命令\" class=\"headerlink\" title=\"linux命令\"></a>linux命令</h1><h2 id=\"netstat-查看Linux中网络系统状态信息\"><a href=\"#netstat-查看Linux中网络系统状态信息\" class=\"headerlink\" title=\"netstat-查看Linux中网络系统状态信息\"></a>netstat-查看Linux中网络系统状态信息</h2><p>选项</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-a或--all：显示所有连线中的Socket；\n-A<span class=\"token operator\">&lt;</span>网络类型<span class=\"token operator\">&gt;</span>或--<span class=\"token operator\">&lt;</span>网络类型<span class=\"token operator\">&gt;</span>：列出该网络类型连线中的相关地址；\n-c或--continuous：持续列出网络状态；\n-C或--cache：显示路由器配置的快取信息；\n-e或--extend：显示网络其他相关信息；\n-F或--fib：显示FIB；\n-g或--groups：显示多重广播功能群组组员名单；\n-h或--help：在线帮助；\n-i或--interfaces：显示网络界面信息表单；\n-l或--listening：显示监控中的服务器的Socket；\n-M或--masquerade：显示伪装的网络连线；\n-n或--numeric：直接使用ip地址，而不通过域名服务器；\n-N或--netlink或--symbolic：显示网络硬件外围设备的符号连接名称；\n-o或--timers：显示计时器；\n-p或--programs：显示正在使用Socket的程序识别码和程序名称；\n-r或--route：显示Routing Table；\n-s或--statistice：显示网络工作信息统计表；\n-t或--tcp：显示TCP传输协议的连线状况；\n-u或--udp：显示UDP传输协议的连线状况；\n-v或--verbose：显示指令执行过程；\n-V或--version：显示版本信息；\n-w或--raw：显示RAW传输协议的连线状况；\n-x或--unix：此参数的效果和指定<span class=\"token string\">\"-A unix\"</span>参数相同；\n--ip或--inet：此参数的效果和指定<span class=\"token string\">\"-A inet\"</span>参数相同。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h2><p><code>chmod</code> 命令在 Unix 和类 Unix 操作系统中用于更改文件和目录的权限。</p>\n<h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p><code>chmod</code> 命令的一般语法是：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span> 模式 文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>模式</strong>：指定要设置的权限。</li>\n<li><strong>文件</strong>：指定要更改权限的文件或目录。</li>\n</ul>\n<h3 id=\"权限表示\"><a href=\"#权限表示\" class=\"headerlink\" title=\"权限表示\"></a>权限表示</h3><p>权限可以用符号或数字来表示。</p>\n<h3 id=\"符号表示\"><a href=\"#符号表示\" class=\"headerlink\" title=\"符号表示\"></a>符号表示</h3><p>权限由三组三个字符表示：</p>\n<ul>\n<li>第一组字符是文件所有者（用户）的权限。</li>\n<li>第二组字符是文件所有者所属组的权限。</li>\n<li>第三组字符是其他用户的权限。</li>\n</ul>\n<p>每组可以有以下字符：</p>\n<ul>\n<li><code>r</code>（读）</li>\n<li><code>w</code>（写）</li>\n<li><code>x</code>（执行）</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li><code>rwxr-xr--</code> 表示文件所有者有读、写、执行权限；组有读、执行权限；其他用户只有读权限。</li>\n</ul>\n<h3 id=\"数字表示\"><a href=\"#数字表示\" class=\"headerlink\" title=\"数字表示\"></a>数字表示</h3><p>权限也可以用八进制（base-8）数字表示：</p>\n<ul>\n<li>读由 <code>4</code> 表示。</li>\n<li>写由 <code>2</code> 表示。</li>\n<li>执行由 <code>1</code> 表示。</li>\n</ul>\n<p>权限的总和表示最终权限：</p>\n<ul>\n<li><code>7</code>（读 + 写 + 执行）</li>\n<li><code>6</code>（读 + 写）</li>\n<li><code>5</code>（读 + 执行）</li>\n<li><code>4</code>（只有读）</li>\n<li><code>0</code>（没有权限）</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li><code>755</code> 表示文件所有者有 <code>7</code>（读、写、执行），组有 <code>5</code>（读、执行），其他用户有 <code>5</code>（读、执行）。</li>\n</ul>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ol>\n<li><p><strong>符号表示更改权限：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> u+x file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>给 <code>file.txt</code> 的所有者添加执行权限。</p>\n</li>\n<li><p><strong>数字表示更改权限：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token number\">644</span> file.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>设置 <code>file.txt</code> 的所有者有读和写权限，组和其他用户只有读权限。</p>\n</li>\n<li><p><strong>递归更改权限：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token parameter variable\">-R</span> <span class=\"token number\">755</span> /path/to/directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>设置 <code>/path/to/directory</code> 内所有文件和目录的权限。</p>\n</li>\n</ol>\n<h3 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h3><ul>\n<li><code>-R</code>：递归更改文件和目录的权限。</li>\n<li><code>-v</code>：详细模式。对每个处理的文件输出诊断信息。</li>\n<li><code>-c</code>：类似详细模式，但仅在更改时报告。</li>\n</ul>\n<h2 id=\"curl\"><a href=\"#curl\" class=\"headerlink\" title=\"curl\"></a>curl</h2><p><code>curl</code> 是一个非常强大的命令行工具，用于从命令行传输数据。它支持多种协议，如 HTTP, HTTPS, FTP, 和 SMTP。你可以用它来发送 GET 请求、POST 请求、下载文件，甚至与 API 交互。以下是 <code>curl</code> 的一些基本用法示例。</p>\n<h3 id=\"1-基本用法\"><a href=\"#1-基本用法\" class=\"headerlink\" title=\"1. 基本用法\"></a>1. 基本用法</h3><p>最简单的 <code>curl</code> 用法就是发送一个 GET 请求并输出响应内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会在终端中显示 <code>http://example.com</code> 的网页内容。</p>\n<h3 id=\"2-保存响应到文件\"><a href=\"#2-保存响应到文件\" class=\"headerlink\" title=\"2. 保存响应到文件\"></a>2. 保存响应到文件</h3><p>使用 <code>-o</code> 选项可以将响应保存到文件中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-o</span> example.html http://example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将 <code>example.com</code> 的内容保存到 <code>example.html</code> 文件中。</p>\n<h3 id=\"3-发送-POST-请求\"><a href=\"#3-发送-POST-请求\" class=\"headerlink\" title=\"3. 发送 POST 请求\"></a>3. 发送 POST 请求</h3><p>你可以使用 <code>-d</code> 选项发送 POST 请求。以下是一个发送表单数据的例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">\"name=John&amp;age=30\"</span> <span class=\"token parameter variable\">-X</span> POST http://example.com/post<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>-X</code> 选项用于指定请求方法。在这里，我们明确指定为 POST 请求。</p>\n<h3 id=\"4-使用自定义请求头\"><a href=\"#4-使用自定义请求头\" class=\"headerlink\" title=\"4. 使用自定义请求头\"></a>4. 使用自定义请求头</h3><p>你可以使用 <code>-H</code> 选项添加自定义请求头：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer your_token_here\"</span> http://example.com/secure<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这在访问需要认证的 API 时非常有用。</p>\n<h3 id=\"5-下载文件\"><a href=\"#5-下载文件\" class=\"headerlink\" title=\"5. 下载文件\"></a>5. 下载文件</h3><p>使用 <code>-O</code> 选项可以直接下载文件，并保留文件的原始名称：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> http://example.com/file.zip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将 <code>file.zip</code> 下载到当前目录。</p>\n<h3 id=\"6-处理重定向\"><a href=\"#6-处理重定向\" class=\"headerlink\" title=\"6. 处理重定向\"></a>6. 处理重定向</h3><p>默认情况下，<code>curl</code> 不会跟随重定向。你可以使用 <code>-L</code> 选项让它跟随重定向：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-L</span> http://short.url<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会跟随重定向到最终的 URL 并获取内容。</p>\n<h3 id=\"7-显示详细信息\"><a href=\"#7-显示详细信息\" class=\"headerlink\" title=\"7. 显示详细信息\"></a>7. 显示详细信息</h3><p>如果你想查看请求和响应的详细信息，可以使用 <code>-v</code> 选项：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-v</span> http://example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会显示所有请求头、响应头以及其它调试信息。</p>\n<h3 id=\"8-使用代理\"><a href=\"#8-使用代理\" class=\"headerlink\" title=\"8. 使用代理\"></a>8. 使用代理</h3><p>如果你需要通过代理访问网络资源，可以使用 <code>-x</code> 选项：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-x</span> http://proxy.example.com:8080 http://example.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"9-上传文件\"><a href=\"#9-上传文件\" class=\"headerlink\" title=\"9. 上传文件\"></a>9. 上传文件</h3><p>你可以使用 <code>-F</code> 选项上传文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-F</span> <span class=\"token string\">\"file=@/path/to/file\"</span> http://example.com/upload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会将指定的文件上传到服务器。</p>\n<h3 id=\"10-指定请求方法\"><a href=\"#10-指定请求方法\" class=\"headerlink\" title=\"10. 指定请求方法\"></a>10. 指定请求方法</h3><p>尽管 <code>curl</code> 默认发送的是 GET 请求，你也可以使用 <code>-X</code> 选项指定其他方法，如 PUT, DELETE 等：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-X</span> DELETE http://example.com/resource/123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h3><p><code>curl</code> 还支持更多复杂的用法，如通过 <code>--data-binary</code> 发送原始二进制数据、使用 <code>--header</code> 添加多个请求头、通过 <code>-u</code> 进行 HTTP 基本认证等。</p>\n<p>如果你想查看 <code>curl</code> 的所有功能和选项，可以通过以下命令查看手册：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">man</span> <span class=\"token function\">curl</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者查看帮助文档：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">--help</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n",
            "tags": [
                "linux",
                "学习"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2021/09/08/linux-xi-tong-mu-lu-gong-neng/",
            "url": "https://0xdadream.github.io/2021/09/08/linux-xi-tong-mu-lu-gong-neng/",
            "title": "linux系统目录功能",
            "date_published": "2021-09-07T18:11:00.000Z",
            "content_html": "<h1 id=\"linux系统目录功能\"><a href=\"#linux系统目录功能\" class=\"headerlink\" title=\"linux系统目录功能\"></a>linux系统目录功能</h1><p><img src=\"https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>目录名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>主目录</td>\n</tr>\n<tr>\n<td>/bin</td>\n<td>存放二进制文件（可执行文件）（普通用户系统命令）</td>\n</tr>\n<tr>\n<td>/sbin</td>\n<td>存放管理员使用的系统命令</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>存放启动系统的的一些核心文件</td>\n</tr>\n<tr>\n<td>/dev</td>\n<td>linux的外部设备，以文件方式访问</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>存放所有的系统管理所需要的配置文件和子目录（全局配置文件）</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>用户主目录，以用户名命名</td>\n</tr>\n<tr>\n<td>/lib</td>\n<td>存放着32位系统最基本的动态连接共享库</td>\n</tr>\n<tr>\n<td>/lib64</td>\n<td>存放着64位系统最基本的动态连接共享库</td>\n</tr>\n<tr>\n<td>/lost+found</td>\n<td>系统非法关机后会存放一些文件</td>\n</tr>\n<tr>\n<td>/root</td>\n<td>超级用户的家目录</td>\n</tr>\n<tr>\n<td>/run</td>\n<td>临时文件系统，存储系统启动以来的信息</td>\n</tr>\n<tr>\n<td>/media</td>\n<td>类windows的其他设备，例如U盘、光驱等</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>系统提供该目录是为了让用户临时挂载别的文件系统，例如外部硬盘</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>给主机额外安装软件所摆放的目录（第三方软件）</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息，这个目录的内容不在硬盘上而是在内存里</td>\n</tr>\n<tr>\n<td>/srv</td>\n<td>存放一些服务启动之后需要提取的数据</td>\n</tr>\n<tr>\n<td>/sys</td>\n<td>用于输出当前系统硬件设备相关信息虚拟文件系统</td>\n</tr>\n<tr>\n<td>/tmp</td>\n<td>存放一些临时文件的，可以随便操作</td>\n</tr>\n<tr>\n<td>/selinux</td>\n<td>类似于 windows 的防火墙</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>用于存储系统软件资源，类似于 windows 下的 program files 目录</td>\n</tr>\n<tr>\n<td>/usr/bin</td>\n<td>系统用户使用的应用程序，与系统启动无关</td>\n</tr>\n<tr>\n<td>/usr/sbin</td>\n<td>超级用户使用的应用程序，与系统启动无关</td>\n</tr>\n<tr>\n<td>/usr/src</td>\n<td>内核源代码默认的放置目录</td>\n</tr>\n<tr>\n<td>/usr/lib</td>\n<td>库文件</td>\n</tr>\n<tr>\n<td>/usr/local/</td>\n<td>手工安装的软件保存位置</td>\n</tr>\n<tr>\n<td>/usr/share/</td>\n<td>应用程序的资源文件保存位置</td>\n</tr>\n<tr>\n<td>/usr/include</td>\n<td>C/C++ 等编程语言头文件的放置目录</td>\n</tr>\n<tr>\n<td>/var</td>\n<td>经常被修改的目录放在这个目录，例如日志，动态的</td>\n</tr>\n<tr>\n<td>/var/lib</td>\n<td>程序运行中需要调用或改变的数据保存位置</td>\n</tr>\n<tr>\n<td>/var/log/</td>\n<td>登陆文件放置的目录</td>\n</tr>\n<tr>\n<td>/var/run/</td>\n<td>一些服务和程序运行后，PID（进程 ID）保存位置</td>\n</tr>\n<tr>\n<td>/etc/sysconfig/network-scripts/ifcfg-eth0</td>\n<td>配置网址及GW，使得网卡生效</td>\n</tr>\n<tr>\n<td>/etc/sysconfig/network</td>\n<td>修改机器名及网卡启动，网关等配置</td>\n</tr>\n<tr>\n<td>/etc/resolv.conf</td>\n<td>设置本机的客户端DNS</td>\n</tr>\n<tr>\n<td>/etc/hosts</td>\n<td>设定用户IP与名字的对应表</td>\n</tr>\n<tr>\n<td>/etc/fstab</td>\n<td>记录开机要mount的文件记录</td>\n</tr>\n<tr>\n<td>/etc/inittab</td>\n<td>定启动时init进程把系统设置成怎样的runlevel，以及加载相关的启动文件</td>\n</tr>\n<tr>\n<td>/etc/exports</td>\n<td>设定NFS网络文件系统的配置文件</td>\n</tr>\n<tr>\n<td>/etc/init.d</td>\n<td>存放系统或者服务器以systemV模式启动的脚本</td>\n</tr>\n<tr>\n<td>/etc/xinit.d</td>\n<td>如果服务器是通过xinetd模式运行的，他的脚本要放在这个目录下</td>\n</tr>\n<tr>\n<td>/etc/profile</td>\n<td>系统全局环境变量配置路径</td>\n</tr>\n<tr>\n<td>/etc/profile.d</td>\n<td>加载登录程序的一个目录命令或文件独立存在</td>\n</tr>\n<tr>\n<td>/etc/issue</td>\n<td>记录用户登录前的显示信息</td>\n</tr>\n<tr>\n<td>/etc/motd</td>\n<td>登录提醒</td>\n</tr>\n<tr>\n<td>/etc/redhat-release</td>\n<td>版本号和名称信息</td>\n</tr>\n<tr>\n<td>/etc/group</td>\n<td>设定用户的组名与相关信息</td>\n</tr>\n<tr>\n<td>/etc/passwd</td>\n<td>账号信息</td>\n</tr>\n<tr>\n<td>/etc/shadow</td>\n<td>密码信息</td>\n</tr>\n<tr>\n<td>/etc/sudoers</td>\n<td>可以用sudo命令配置的文件</td>\n</tr>\n<tr>\n<td>/etc/securetty</td>\n<td>设定哪些终端可以让root登录</td>\n</tr>\n<tr>\n<td>/etc/rsyslof.conf</td>\n<td>日志设置文件，在6.4 chkconfig –list rsyslog</td>\n</tr>\n<tr>\n<td>/usr/local</td>\n<td>用来存放用户自编译安装软件目录，通过源码包安装的软件，未指定安装路径</td>\n</tr>\n<tr>\n<td>/var/log/message</td>\n<td>系统默认日志文件，/var/log各种日志存放地</td>\n</tr>\n<tr>\n<td>/var/log/secure</td>\n<td>记录登录系统存取信息的文件，系统日志的安全信息</td>\n</tr>\n<tr>\n<td>/var/log/wtmp</td>\n<td>记录登录者的信息文件</td>\n</tr>\n<tr>\n<td>/var/spool/cron/root</td>\n<td>定时任务crontab默认目录，按用户名命名的文件</td>\n</tr>\n<tr>\n<td>/var/spool/mail</td>\n<td>系统用户邮件存放目录</td>\n</tr>\n<tr>\n<td>/var/spool/clientmqueuesendmail</td>\n<td>邮件临时存放目录</td>\n</tr>\n<tr>\n<td>/etc/login.defs</td>\n<td>所有用户登录时的缺省配置</td>\n</tr>\n<tr>\n<td>/etc/modprobe.conf</td>\n<td>内核模块额外参数设定量被尽，无法写入文件</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>虚拟目录是内存的映射</td>\n</tr>\n<tr>\n<td>/etc/sysctl.conf</td>\n<td>放在其下面永久生效</td>\n</tr>\n<tr>\n<td>/proc/cpuinfo</td>\n<td>关于处理器的信息</td>\n</tr>\n<tr>\n<td>/proc/meminfo</td>\n<td>系统内存信息</td>\n</tr>\n<tr>\n<td>/proc/interrupts</td>\n<td>正在使用的中断，和曾经有过多少个中断</td>\n</tr>\n<tr>\n<td>/proc/loadavg</td>\n<td>系统负载信息</td>\n</tr>\n<tr>\n<td>/etc/DIR_COLORS</td>\n<td>设定颜色</td>\n</tr>\n<tr>\n<td>/etc/host.conf</td>\n<td>文件说明用户的系统如何查询节点</td>\n</tr>\n<tr>\n<td>/etc/hosts.allow</td>\n<td>通过它可以允许某个ip或者ip段的客户访问linux的某项服务</td>\n</tr>\n<tr>\n<td>/etc/hosts.deny</td>\n<td>通过它可以拒绝某个ip或者ip段的客户访问linux的某项服务</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "tip",
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2021/08/13/jie-jue-kali-zi-ti-tai-xiao/",
            "url": "https://0xdadream.github.io/2021/08/13/jie-jue-kali-zi-ti-tai-xiao/",
            "title": "解决kali字体太小",
            "date_published": "2021-08-13T01:11:00.000Z",
            "content_html": "<h1 id=\"解决kali字体太小\"><a href=\"#解决kali字体太小\" class=\"headerlink\" title=\"解决kali字体太小\"></a>解决kali字体太小</h1><p>桌面右键-&gt;应用程序-&gt;设置-&gt;外观-&gt;设置-&gt; 窗口缩放x2</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GDK_SCALE</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token operator\">&gt;&gt;</span> ~/.xsessionrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>强制光标变大</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">XCURSOR_SIZE</span><span class=\"token operator\">=</span><span class=\"token number\">48</span> <span class=\"token operator\">&gt;&gt;</span> ~/.xsessionrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>桌面右键-&gt;应用程序-&gt;设置-&gt;外观-&gt;字体-&gt;DPI=180   调字体大小</p>\n<p>以上如果不成功</p>\n<p>左上角搜索<code>Kali HiDPI Mode</code>点击一下即可切换缩放</p>\n<p>多尝试，结合不同的点调试</p>\n",
            "tags": [
                "tip",
                "linux"
            ]
        }
    ]
}