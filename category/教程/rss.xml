<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>逐梦 • Posts by &#34;教程&#34; category</title>
        <link>https://0xdadream.github.io</link>
        <description>Welcome to my blog</description>
        <language>zh-CN</language>
        <pubDate>Sun, 29 Jun 2025 03:25:00 +0800</pubDate>
        <lastBuildDate>Sun, 29 Jun 2025 03:25:00 +0800</lastBuildDate>
        <category>cloudflare</category>
        <category>tip</category>
        <category>AI</category>
        <category>intel</category>
        <category>安装</category>
        <category>email</category>
        <category>tips</category>
        <category>re</category>
        <category>工具</category>
        <category>教程</category>
        <category>linux</category>
        <category>Java</category>
        <category>conda</category>
        <category>环境</category>
        <category>bug</category>
        <category>web</category>
        <category>wp</category>
        <category>攻防世界</category>
        <category>BUUCTF</category>
        <category>windows</category>
        <category>net</category>
        <category>server</category>
        <category>comfyui</category>
        <category>powershell</category>
        <category>wall</category>
        <category>tools</category>
        <category>emby</category>
        <category>sql</category>
        <category>代码审计</category>
        <category>漏洞复现</category>
        <category>google</category>
        <category>git</category>
        <category>学习</category>
        <category>java</category>
        <category>python</category>
        <category>命令</category>
        <category>文件上传</category>
        <category>php</category>
        <category>远程</category>
        <category>命令行</category>
        <category>下载</category>
        <category>区块链</category>
        <category>汇编</category>
        <category>密码学</category>
        <category>mcp</category>
        <category>i春秋</category>
        <category>证书</category>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/06/29/ben-di-bu-shu-yu-pei-zhi-mcp-fu-wu-qi/</guid>
            <title>本地部署与配置 MCP 服务器</title>
            <link>https://0xdadream.github.io/2025/06/29/ben-di-bu-shu-yu-pei-zhi-mcp-fu-wu-qi/</link>
            <category>mcp</category>
            <pubDate>Sun, 29 Jun 2025 03:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;本地部署与配置-MCP-服务器&#34;&gt;&lt;a href=&#34;#本地部署与配置-MCP-服务器&#34; class=&#34;headerlink&#34; title=&#34;本地部署与配置 MCP 服务器&#34;&gt;&lt;/a&gt;本地部署与配置 MCP 服务器&lt;/h1&gt;&lt;p&gt;本指南将根据您提供的专业指令，演示如何为两个不同技术栈的 MCP 服务器（一个基于 Python/uv，一个基于 Bun/TypeScript）设置项目、运行服务，并在 Cursor 中进行配置。主要针对wsl。&lt;/p&gt;
&lt;h3 id=&#34;项目一：mcp-sequential-thinking-Python-环境&#34;&gt;&lt;a href=&#34;#项目一：mcp-sequential-thinking-Python-环境&#34; class=&#34;headerlink&#34; title=&#34;项目一：mcp_sequential_thinking (Python 环境)&#34;&gt;&lt;/a&gt;&lt;strong&gt;项目一：&lt;code&gt;mcp_sequential_thinking&lt;/code&gt; (Python 环境)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这是一个使用 &lt;code&gt;uv&lt;/code&gt; 作为包管理器的 Python 项目。&lt;/p&gt;
&lt;h4 id=&#34;1-设置项目&#34;&gt;&lt;a href=&#34;#1-设置项目&#34; class=&#34;headerlink&#34; title=&#34;1. 设置项目&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 设置项目&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;首先，克隆项目仓库（此处使用占位符，请替换为实际仓库地址），并创建虚拟环境。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 克隆你的项目
git clone &amp;lt;your-python-mcp-repo-url&amp;gt;
cd &amp;lt;project-folder&amp;gt;

# 创建并激活虚拟环境
uv venv

# 激活环境
# Windows
.venv\Scripts\activate
# Unix/Linux/macOS
source .venv/bin/activate&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-安装依赖&#34;&gt;&lt;a href=&#34;#2-安装依赖&#34; class=&#34;headerlink&#34; title=&#34;2. 安装依赖&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 安装依赖&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;uv&lt;/code&gt; 提供了灵活的依赖安装选项。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 仅安装核心依赖
uv pip install -e .

# (推荐开发) 安装核心及测试工具
uv pip install -e &#34;.[dev]&#34;

# 安装所有可选依赖
uv pip install -e &#34;.[all]&#34;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-运行服务器&#34;&gt;&lt;a href=&#34;#3-运行服务器&#34; class=&#34;headerlink&#34; title=&#34;3. 运行服务器&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 运行服务器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;您可以通过两种方式启动本地服务器。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 方式一：直接通过模块运行
uv run -m mcp_sequential_thinking.server

# 方式二：使用安装后生成的脚本
mcp-sequential-thinking&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动后，请留意终端输出，确认服务器正在监听的 &lt;strong&gt;IP 地址和端口号&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;4-可选-运行测试&#34;&gt;&lt;a href=&#34;#4-可选-运行测试&#34; class=&#34;headerlink&#34; title=&#34;4. (可选) 运行测试&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. (可选) 运行测试&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;确保代码质量，可以运行单元测试。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 运行所有测试
pytest

# 运行测试并生成覆盖率报告
pytest --cov=mcp_sequential_thinking&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;项目二：context7-mcp-Bun-环境&#34;&gt;&lt;a href=&#34;#项目二：context7-mcp-Bun-环境&#34; class=&#34;headerlink&#34; title=&#34;项目二：context7-mcp (Bun 环境)&#34;&gt;&lt;/a&gt;&lt;strong&gt;项目二：&lt;code&gt;context7-mcp&lt;/code&gt; (Bun 环境)&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这是一个使用 &lt;code&gt;Bun&lt;/code&gt; 作为运行时和工具链的 TypeScript/JavaScript 项目。&lt;/p&gt;
&lt;h4 id=&#34;1-设置项目-1&#34;&gt;&lt;a href=&#34;#1-设置项目-1&#34; class=&#34;headerlink&#34; title=&#34;1. 设置项目&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 设置项目&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;克隆 &lt;code&gt;context7&lt;/code&gt; 的仓库并使用 &lt;code&gt;bun&lt;/code&gt; 安装依赖。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 克隆 context7 项目
git clone &amp;lt;your-bun-mcp-repo-url&amp;gt;
cd &amp;lt;project-folder&amp;gt;

# 安装依赖
bun i&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-构建项目&#34;&gt;&lt;a href=&#34;#2-构建项目&#34; class=&#34;headerlink&#34; title=&#34;2. 构建项目&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 构建项目&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;bun&lt;/code&gt; 用于将 TypeScript 源代码编译为可执行的 JavaScript。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;bun run build&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此命令通常会在 &lt;code&gt;dist&lt;/code&gt; 目录下生成输出文件。&lt;/p&gt;
&lt;h4 id=&#34;3-运行服务器-1&#34;&gt;&lt;a href=&#34;#3-运行服务器-1&#34; class=&#34;headerlink&#34; title=&#34;3. 运行服务器&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 运行服务器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;构建完成后，运行服务器并可指定参数。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 基本运行方式
bun run dist/index.js

# 高级运行方式：指定传输协议和端口
# 下例将使用 http 协议并在 8080 端口上运行
bun run dist/index.js --transport http --port 8080&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;在-Cursor-中配置本地服务器&#34;&gt;&lt;a href=&#34;#在-Cursor-中配置本地服务器&#34; class=&#34;headerlink&#34; title=&#34;在 Cursor 中配置本地服务器&#34;&gt;&lt;/a&gt;&lt;strong&gt;在 Cursor 中配置本地服务器&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;将本地运行的服务器接入 Cursor 有两种主要方式：&lt;/p&gt;
&lt;h4 id=&#34;方式一：HTTP-连接-推荐&#34;&gt;&lt;a href=&#34;#方式一：HTTP-连接-推荐&#34; class=&#34;headerlink&#34; title=&#34;方式一：HTTP 连接 (推荐)&#34;&gt;&lt;/a&gt;&lt;strong&gt;方式一：HTTP 连接 (推荐)&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;当您的服务器已经在本地终端中成功运行时，可以使用此方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 Cursor 设置，进入 &lt;code&gt;MCP&lt;/code&gt; 配置页。&lt;/li&gt;
&lt;li&gt;点击 “Add Server”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于 &lt;code&gt;context7-mcp&lt;/code&gt; (假设运行在 8080 端口):&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name (名称):&lt;/strong&gt; &lt;code&gt;context7-local-http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type (类型):&lt;/strong&gt; &lt;code&gt;http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URL (地址):&lt;/strong&gt; &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于 &lt;code&gt;mcp_sequential_thinking&lt;/code&gt;:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name (名称):&lt;/strong&gt; &lt;code&gt;sequential-thinking-local-http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type (类型):&lt;/strong&gt; &lt;code&gt;http&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URL (地址):&lt;/strong&gt; &lt;code&gt;http://localhost:&amp;lt;YOUR_PYTHON_PORT&amp;gt;&lt;/code&gt; (请替换为 Python 服务器实际监听的端口号)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;方式二：Command-命令-由-Cursor-启动&#34;&gt;&lt;a href=&#34;#方式二：Command-命令-由-Cursor-启动&#34; class=&#34;headerlink&#34; title=&#34;方式二：Command 命令 (由 Cursor 启动)&#34;&gt;&lt;/a&gt;&lt;strong&gt;方式二：Command 命令 (由 Cursor 启动)&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;这种方式让 Cursor 在需要时自动执行命令来启动服务器。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开 Cursor 设置，进入 &lt;code&gt;MCP&lt;/code&gt; 配置页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 “Add Server”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;配置示例 (适用于 TypeScript 项目):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name (名称):&lt;/strong&gt; &lt;code&gt;context7-local-cmd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type (类型):&lt;/strong&gt; &lt;code&gt;command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Command (命令):&lt;/strong&gt; &lt;code&gt;npx tsx /path/to/folder/context7-mcp/src/index.ts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;重要提示&lt;/strong&gt;: 您必须将 &lt;code&gt;/path/to/folder/context7-mcp/src/index.ts&lt;/code&gt; 替换为您本地存放 &lt;code&gt;context7&lt;/code&gt; 项目的&lt;strong&gt;绝对路径&lt;/strong&gt;。这种方式更适合直接运行源文件，无需手动 &lt;code&gt;build&lt;/code&gt; 和 &lt;code&gt;run&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;书写形式&#34;&gt;&lt;a href=&#34;#书写形式&#34; class=&#34;headerlink&#34; title=&#34;书写形式&#34;&gt;&lt;/a&gt;书写形式&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;{
  &#34;mcpServers&#34;: {
    &#34;sequential-thinking&#34;: {
      &#34;command&#34;: &#34;/home/hero/mcp-sequential-thinking/.venv/bin/mcp-sequential-thinking&#34;,
      &#34;cwd&#34;: &#34;/home/hero/mcp-sequential-thinking&#34;
    },
    &#34;context7&#34;: {
      &#34;command&#34;: &#34;bun&#34;,
      &#34;args&#34;: [&#34;run&#34;, &#34;/home/hero/context7/src/index.ts&#34;]
    }
  }
} &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自行理解&lt;/p&gt;
&lt;h4 id=&#34;提示词&#34;&gt;&lt;a href=&#34;#提示词&#34; class=&#34;headerlink&#34; title=&#34;提示词&#34;&gt;&lt;/a&gt;提示词&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;你是一位具备顺序逻辑推理能力与跨文件代码理解能力的 AI 助手。我希望你结合 Sequential Thinking 插件的多步骤推理能力，以及 Context7 插件的跨上下文代码理解能力，帮助我更清晰、精准地完成以下任务。

请执行以下策略：
1. 拆分任务为合理的多个思维步骤，并依次处理（Sequential Thinking）。
2. 若任务涉及多个文件或函数，自动调用 Context7 插件提取和关联上下文。
3. 在必要时提供逐步思路、函数关系图、模块依赖路径，并解释推理过程。
4. 保持逻辑清晰，输出建议时标明每一步对应的推理依据。&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/06/29/wsl-2-tong-guo-windows-v2rayn-dai-li-shang-wang-quan-wei-zhi-nan-2025-ban/</guid>
            <title>WSL 2 通过 Windows V2RayN 代理上网权威指南 (2025版)</title>
            <link>https://0xdadream.github.io/2025/06/29/wsl-2-tong-guo-windows-v2rayn-dai-li-shang-wang-quan-wei-zhi-nan-2025-ban/</link>
            <category>net</category>
            <pubDate>Sun, 29 Jun 2025 02:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;WSL-2-通过-Windows-V2RayN-代理上网权威指南-2025版&#34;&gt;&lt;a href=&#34;#WSL-2-通过-Windows-V2RayN-代理上网权威指南-2025版&#34; class=&#34;headerlink&#34; title=&#34;WSL 2 通过 Windows V2RayN 代理上网权威指南 (2025版)&#34;&gt;&lt;/a&gt;WSL 2 通过 Windows V2RayN 代理上网权威指南 (2025版)&lt;/h1&gt;&lt;p&gt;本指南为最终版本，包含了所有验证成功的步骤，旨在提供最清晰、最可靠的配置流程。&lt;/p&gt;
&lt;h2 id=&#34;第一部分：配置-WSL-2&#34;&gt;&lt;a href=&#34;#第一部分：配置-WSL-2&#34; class=&#34;headerlink&#34; title=&#34;第一部分：配置 WSL 2&#34;&gt;&lt;/a&gt;&lt;strong&gt;第一部分：配置 WSL 2&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;核心原理&lt;/strong&gt;：WSL 2 拥有独立的虚拟网络，需要将 Windows 主机视为一个“局域网”设备。我们通过获取 Windows 在该网络中的 IP，并在 WSL 中设置带认证的代理来将网络流量导向它。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：配置 V2RayN (确保设置无误)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;开放局域网连接&lt;/strong&gt;：在 V2RayN 的 &lt;code&gt;设置 -&amp;gt; 参数设置 -&amp;gt; V2RayN 设置&lt;/code&gt; 中，&lt;strong&gt;必须勾选“允许来自局域网的连接”&lt;/strong&gt;。这是整个方案的前提，还要打开为局域网开放端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认代理参数&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;监听端口&lt;/strong&gt;：&lt;code&gt;10810&lt;/code&gt; (根据您的设置)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;认证用户&lt;/strong&gt;：&lt;code&gt;v2rayn填写的用户名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;认证密码&lt;/strong&gt;：&lt;code&gt;v2rayn填写的密码&lt;/code&gt; (不含特殊字符的最终版密码)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows 防火墙&lt;/strong&gt;：确保在首次开启“允许局域网连接”时，您已在弹出的 Windows Defender 防火墙窗口中，为 V2RayN (或其核心 &lt;code&gt;v2ray.exe&lt;/code&gt; / &lt;code&gt;xray.exe&lt;/code&gt;) 勾选“专用网络”和“公用网络”并点击了“允许访问”。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第二步：在 WSL 中获取 Windows 主机 IP&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开您的 WSL 终端。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行以下命令来获取作为默认网关的 Windows 主机 IP 地址。这是最稳定、最推荐的方法。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;ip route show | grep default | awk &#39;{print $3}&#39;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;您会得到一个 &lt;code&gt;172.x.x.x&lt;/code&gt; 格式的 IP，请记下它（虽然下面的脚本会自动获取）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第三步：配置 WSL 终端代理&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编辑您的 Shell 配置文件 (如果文件不存在，nano 会自动创建)。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 如果您使用 bash (默认)
nano ~/.bashrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将以下&lt;strong&gt;最终版配置代码块&lt;/strong&gt;完整地复制并粘贴到文件末尾。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# --- V2RayN Proxy Configuration for WSL (Final Version) ---

# 1. 自动获取作为默认网关的主机 IP (推荐方法)
export HOST_IP=$(ip route show | grep default | awk &#39;{print $3}&#39;)

# 2. 您的 V2RayN 代理参数
PROXY_PORT=&#34;10810&#34;
PROXY_USER=&#34;v2rayn填写的用户名&#34;
PROXY_PASS=&#34;v2rayn填写的密码&#34;

# 3. 构建包含认证信息的代理 URL
PROXY_URL=&#34;http://${PROXY_USER}:${PROXY_PASS}@${HOST_IP}:${PROXY_PORT}&#34;

# 4. 设置系统环境变量
export http_proxy=&#34;${PROXY_URL}&#34;
export https_proxy=&#34;${PROXY_URL}&#34;
export all_proxy=&#34;socks5://${PROXY_USER}:${PROXY_PASS}@${HOST_IP}:${PROXY_PORT}&#34;

# 5. 设置不走代理的本地地址
export no_proxy=&#34;localhost,127.0.0.1,*.local,${HOST_IP}&#34;

echo &#34;✅ Proxy enabled for WSL via host ${HOST_IP}&#34;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存并退出 (&lt;code&gt;Ctrl+O&lt;/code&gt;, &lt;code&gt;Enter&lt;/code&gt;, &lt;code&gt;Ctrl+X&lt;/code&gt;)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第四步：配置 APT 包管理器&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为 &lt;code&gt;apt&lt;/code&gt; 创建专门的代理配置文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo nano /etc/apt/apt.conf.d/99proxy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将以下内容粘贴进去。&lt;strong&gt;请注意&lt;/strong&gt;：您需要将 &lt;code&gt;172.x.x.x&lt;/code&gt; &lt;strong&gt;手动替换&lt;/strong&gt;为第二步中获取到的具体 IP 地址。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;Acquire::http::Proxy &#34;http://0xdadream:Qsc100366@172.x.x.x:10810/&#34;;
Acquire::https::Proxy &#34;http://0xdadream:Qsc100366@172.x.x.x:10810/&#34;;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存并退出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第五步：生效与验证&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;让终端配置立即生效：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;source ~/.bashrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;curl&lt;/code&gt; 命令测试网络连接：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;curl -I https://www.google.com&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看到 &lt;code&gt;HTTP/2 200&lt;/code&gt; 或类似成功响应，即代表 WSL 部分已完美配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;附：手机连接-Windows-V2RayN-代理教程&#34;&gt;&lt;a href=&#34;#附：手机连接-Windows-V2RayN-代理教程&#34; class=&#34;headerlink&#34; title=&#34;附：手机连接 Windows V2RayN 代理教程&#34;&gt;&lt;/a&gt;&lt;strong&gt;附：手机连接 Windows V2RayN 代理教程&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本教程将指导您如何将手机（安卓或iPhone）通过 Wi-Fi 连接到您电脑上正在运行的 V2RayN 代理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心原理&lt;/strong&gt;：手机和电脑必须在同一个局域网（连接同一个Wi-Fi）。手机将电脑视为一个代理服务器，通过电脑的局域网IP地址和V2RayN端口进行连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：查找您 Windows 电脑的局域网 IP 地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个 IP &lt;strong&gt;不是&lt;/strong&gt; WSL 里的那个 &lt;code&gt;172.x.x.x&lt;/code&gt;，而是您家或办公室路由器分配给电脑的 IP，通常是 &lt;code&gt;192.168.x.x&lt;/code&gt; 的格式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 Windows 上，按下 &lt;code&gt;Win + R&lt;/code&gt; 键，输入 &lt;code&gt;cmd&lt;/code&gt; 并回车，打开命令提示符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输入以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;ipconfig&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在输出信息中找到 “&lt;strong&gt;无线局域网适配器 WLAN&lt;/strong&gt;” 或 “&lt;strong&gt;Wireless LAN adapter Wi-Fi&lt;/strong&gt;” 部分。记下其 “&lt;strong&gt;IPv4 地址&lt;/strong&gt;”，例如 &lt;code&gt;192.168.1.105&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第二步：在手机上配置代理&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;对于-iPhone-iOS&#34;&gt;&lt;a href=&#34;#对于-iPhone-iOS&#34; class=&#34;headerlink&#34; title=&#34;对于 iPhone (iOS)&#34;&gt;&lt;/a&gt;&lt;strong&gt;对于 iPhone (iOS)&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;iOS 系统原生支持带认证的 HTTP 代理，配置非常简单。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确保您的 iPhone 已连接到和电脑&lt;strong&gt;相同的 Wi-Fi&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;进入 **设置 -&amp;gt; 无线局域网 (Wi-Fi)**。&lt;/li&gt;
&lt;li&gt;点击您当前连接的 Wi-Fi 名称右边的 &lt;strong&gt;“i”&lt;/strong&gt; 图标。&lt;/li&gt;
&lt;li&gt;滑到页面最底部，找到并点击 &lt;strong&gt;“配置代理”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;“手动”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;“服务器”&lt;/strong&gt; 栏，输入您电脑的局域网 IP (例如 &lt;code&gt;192.168.1.105&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;“端口”&lt;/strong&gt; 栏，输入 V2RayN 的端口 &lt;code&gt;10810&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开启 “鉴定” (Authentication) 开关&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;“用户名”&lt;/strong&gt; 中输入 &lt;code&gt;v2rayn填写的用户名&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;“密码”&lt;/strong&gt; 中输入 &lt;code&gt;v2rayn填写的密码&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;点击右上角的 &lt;strong&gt;“存储”&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;对于安卓-Android&#34;&gt;&lt;a href=&#34;#对于安卓-Android&#34; class=&#34;headerlink&#34; title=&#34;对于安卓 (Android)&#34;&gt;&lt;/a&gt;&lt;strong&gt;对于安卓 (Android)&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;安卓系统的原生 Wi-Fi 代理设置&lt;strong&gt;不支持&lt;/strong&gt;用户名和密码认证。您需要借助第三方 App。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;**原生方法 (如果您的代理无需认证)**：&lt;ul&gt;
&lt;li&gt;进入 &lt;strong&gt;设置 -&amp;gt; WLAN&lt;/strong&gt;，长按您连接的 Wi-Fi，选择“修改网络”。&lt;/li&gt;
&lt;li&gt;在高级选项中找到“代理”，设为“手动”。&lt;/li&gt;
&lt;li&gt;输入电脑的IP和端口。&lt;/li&gt;
&lt;li&gt;(此方法对您当前带认证的设置无效，仅供参考)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;**推荐方法 (使用第三方App，支持认证)**：&lt;ul&gt;
&lt;li&gt;在 Google Play 商店或其它应用市场搜索并安装一个支持 HTTP/SOCKS 认证代理的 App，例如 &lt;strong&gt;ProxyDroid&lt;/strong&gt; 或 &lt;strong&gt;V2rayNG&lt;/strong&gt; (V2rayNG 本身就可以作为客户端，功能更强大)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以 V2rayNG 为例&lt;/strong&gt; (更推荐，因为它本身就是 V2Ray 客户端)：&lt;ol&gt;
&lt;li&gt;打开 V2rayNG，点击右上角的 &lt;strong&gt;“+”&lt;/strong&gt; 号，选择 &lt;strong&gt;“手动输入[Socks]”或“[Http]”&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别名&lt;/strong&gt;：随便填，例如 &lt;code&gt;公司电脑&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;**地址(服务器)**：输入您电脑的局域网 IP (例如 &lt;code&gt;192.168.1.105&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口&lt;/strong&gt;：输入 &lt;code&gt;10810&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户名&lt;/strong&gt;：输入 &lt;code&gt;v2rayn填写的用户名&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密码&lt;/strong&gt;：输入 &lt;code&gt;v2rayn填写的密码&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;其他设置可保持默认，点击右上角的 &lt;strong&gt;“√”&lt;/strong&gt; 保存。&lt;/li&gt;
&lt;li&gt;回到主界面，点击您刚创建的配置将其选中，然后点击屏幕底部的 V 形图标启动连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第三步：验证手机连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在手机上配置好代理后，打开手机浏览器，访问 &lt;a href=&#34;https://ipinfo.io/&#34;&gt;ipinfo.io&lt;/a&gt; 或 &lt;code&gt;whatismyip.com&lt;/code&gt; 这类网站。如果显示的 IP 地址是您 V2RayN 代理服务器的公网 IP，而不是您家宽带的 IP，那么恭喜您，手机也已成功通过电脑代理上网！&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/06/27/cloudflare-wu-xian-you-xiang-jian-yi-jiao-cheng/</guid>
            <title>Cloudflare无限邮箱简易教程</title>
            <link>https://0xdadream.github.io/2025/06/27/cloudflare-wu-xian-you-xiang-jian-yi-jiao-cheng/</link>
            <category>email</category>
            <pubDate>Fri, 27 Jun 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Cloudflare无限邮箱简易教程&#34;&gt;&lt;a href=&#34;#Cloudflare无限邮箱简易教程&#34; class=&#34;headerlink&#34; title=&#34;Cloudflare无限邮箱简易教程&#34;&gt;&lt;/a&gt;Cloudflare无限邮箱简易教程&lt;/h1&gt;&lt;p&gt;通过Cloudflare实现无限邮箱：一份详尽的设置与策略指南&lt;/p&gt;
&lt;h2 id=&#34;第一部分：现代邮箱革命：低成本实现专业级电子邮件&#34;&gt;&lt;a href=&#34;#第一部分：现代邮箱革命：低成本实现专业级电子邮件&#34; class=&#34;headerlink&#34; title=&#34;第一部分：现代邮箱革命：低成本实现专业级电子邮件&#34;&gt;&lt;/a&gt;第一部分：现代邮箱革命：低成本实现专业级电子邮件&lt;/h2&gt;&lt;p&gt;在当今的数字世界中，拥有一个单一的电子邮件地址来处理所有事务——从关键的财务通信到无关紧g要的时事通讯订阅——已经成为一种普遍现象。然而，这种便利性带来了不可忽视的代价：垃圾邮件泛滥、隐私泄露风险增加，以及在专业场合中品牌形象的缺失。一个通用的Gmail或Outlook地址在个人生活中无可厚wifi，但在商业或个人品牌建设中，一个自定义域名的邮箱（如&lt;code&gt;contact@yourdomain.com&lt;/code&gt;）能显著提升专业度和可信度。&lt;/p&gt;
&lt;p&gt;Cloudflare电子邮件路由（Email Routing）服务的出现，为解决这一困境提供了革命性的方案。该服务本质上是一个功能强大且免费的电子邮件&lt;em&gt;转发&lt;/em&gt;工具 。它的核心优势在于其设计理念：首先，它将隐私保护放在首位，Cloudflare承诺不会存储或访问通过其系统转发的任何电子邮件内容，确保了通信的机密性 。其次，它的配置过程极其简单，并且完全免费，这极大地降低了技术和财务门槛 。  &lt;/p&gt;
&lt;h3 id=&#34;解码“无限邮箱”&#34;&gt;&lt;a href=&#34;#解码“无限邮箱”&#34; class=&#34;headerlink&#34; title=&#34;解码“无限邮箱”&#34;&gt;&lt;/a&gt;解码“无限邮箱”&lt;/h3&gt;&lt;p&gt;用户常常寻求“无限邮箱”的解决方案，而Cloudflare提供的正是实现这一目标的有效途径。需要明确的是，这并非指拥有无限个独立的、带存储空间的收件箱。相反，它指的是创建无限数量的&lt;em&gt;别名&lt;/em&gt;（aliases）或&lt;em&gt;转发地址&lt;/em&gt; 。例如，用户可以为自己的域名  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;yourdomain.com&lt;/code&gt;创建&lt;code&gt;support@yourdomain.com&lt;/code&gt;、&lt;code&gt;billing@yourdomain.com&lt;/code&gt;、&lt;code&gt;newsletter.signup@yourdomain.com&lt;/code&gt;等无数个地址。所有发送到这些地址的邮件，都会被自动、即时地转发到一个或多个用户预先设定的主收件箱中，例如个人的Gmail或Outlook账户。&lt;/p&gt;
&lt;h3 id=&#34;核心用例：为谁而设？&#34;&gt;&lt;a href=&#34;#核心用例：为谁而设？&#34; class=&#34;headerlink&#34; title=&#34;核心用例：为谁而设？&#34;&gt;&lt;/a&gt;核心用例：为谁而设？&lt;/h3&gt;&lt;p&gt;该服务的灵活性使其适用于广泛的用户群体 ：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;个人用户&lt;/strong&gt;：可以为注册的每一个在线服务创建独一无二的别名。这不仅能有效保护主要邮箱地址不被泄露，还能在某个别名开始收到垃圾邮件时，精确地追踪到是哪个服务泄露或出售了数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;家庭用户&lt;/strong&gt;：可以为每个家庭成员分配一个专属的邮箱地址（如&lt;code&gt;father@familydomain.com&lt;/code&gt;），或为特定用途设立公共地址（如&lt;code&gt;household.bills@familydomain.com&lt;/code&gt;），从而实现家庭事务的有序管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;小型企业与初创公司&lt;/strong&gt;：无需承担传统企业邮箱套件的高昂费用，即可拥有基于角色的专业地址（如&lt;code&gt;sales@yourcompany.com&lt;/code&gt;、&lt;code&gt;info@yourcompany.com&lt;/code&gt;），从而在客户面前建立起专业、可信的品牌形象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作原理：一个简单的类比&#34;&gt;&lt;a href=&#34;#工作原理：一个简单的类比&#34; class=&#34;headerlink&#34; title=&#34;工作原理：一个简单的类比&#34;&gt;&lt;/a&gt;工作原理：一个简单的类比&lt;/h3&gt;&lt;p&gt;为了更好地理解其工作机制，可以将Cloudflare电子邮件路由想象成一个数字化的邮局 。当一封邮件发送到您的自定义域名地址（相当于一个专属的邮政信箱）时，Cloudflare扮演了邮件分拣员的角色。它会查看邮件的“信封”（SMTP Envelope），这是简单邮件传输协议的一部分，标明了邮件的来源和目的地 。Cloudflare会智能地修改这个信封，将原始收件人地址替换为您指定的最终收件箱地址，然后立即将邮件投递出去。整个过程中，邮件的“信头”（Header，包含技术元数据）和“正文”（Body，实际内容）保持完整无损，Cloudflare不会拆开信件阅读内容 。  &lt;/p&gt;
&lt;p&gt;这一机制的出现，其深远意义在于它实现了专业身份的“民主化”。过去，拥有自定义域名邮箱是付费企业服务（如G Suite旧版套餐）或具备高深技术能力（如自建邮件服务器）的象征 。Cloudflare通过提供免费的入站邮件处理  和全自动的DNS记录配置 ，彻底移除了成本和技术的双重壁垒。这使得任何拥有域名的个人、自由职业者或微型企业，都能以零成本享受到与大型企业同等级别的专业电子邮件身份，这对于零工经济、个人品牌塑造以及小型在线项目的合法性感知具有重大影响。  &lt;/p&gt;
&lt;h2 id=&#34;第二部分：奠定基石：将您的域名接入Cloudflare&#34;&gt;&lt;a href=&#34;#第二部分：奠定基石：将您的域名接入Cloudflare&#34; class=&#34;headerlink&#34; title=&#34;第二部分：奠定基石：将您的域名接入Cloudflare&#34;&gt;&lt;/a&gt;第二部分：奠定基石：将您的域名接入Cloudflare&lt;/h2&gt;&lt;p&gt;在启用电子邮件路由之前，一个至关重要且不可跳过的前提步骤是：将您的域名交由Cloudflare进行管理。这意味着Cloudflare必须成为您域名的权威DNS（域名系统）提供商。简而言之，互联网上任何关于您域名的查询（无论是网站访问还是邮件发送），都将由Cloudflare来应答和指引方向。&lt;/p&gt;
&lt;h3 id=&#34;接入域名的分步指南&#34;&gt;&lt;a href=&#34;#接入域名的分步指南&#34; class=&#34;headerlink&#34; title=&#34;接入域名的分步指南&#34;&gt;&lt;/a&gt;接入域名的分步指南&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;创建Cloudflare账户&lt;/strong&gt;：访问Cloudflare官网并注册一个免费账户。这是一个简单直接的过程 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加您的站点/域名&lt;/strong&gt;：登录后，点击“添加站点”按钮，并输入您希望配置的根域名（例如&lt;code&gt;yourdomain.com&lt;/code&gt;） 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择套餐&lt;/strong&gt;：在套餐选择页面，选择“Free”（免费）套餐。该套餐已完整包含电子邮件路由功能 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS记录扫描&lt;/strong&gt;：Cloudflare会自动扫描您域名当前所有的DNS记录。这是一个关键步骤，因为它会尝试复制您现有的网站、子域名等配置。作为一项最佳实践，强烈建议在此步骤完成时，对扫描出的记录列表进行截图或备份，以防后续出现任何问题 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;关键操作：更新您的域名服务器&#34;&gt;&lt;a href=&#34;#关键操作：更新您的域名服务器&#34; class=&#34;headerlink&#34; title=&#34;关键操作：更新您的域名服务器&#34;&gt;&lt;/a&gt;关键操作：更新您的域名服务器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;理解域名服务器（Nameservers）&lt;/strong&gt;：域名服务器就像是互联网上针对您域名的“地址簿总管”。您需要通知您的域名注册商（即您购买域名的地方，如GoDaddy、Namecheap等），告知他们从现在起，Cloudflare将全权负责管理您域名的这本“地址簿”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;查找Cloudflare的域名服务器地址&lt;/strong&gt;：在Cloudflare仪表板的指引页面上，系统会提供两个专属的域名服务器地址。这两个地址通常以&lt;code&gt;.ns.cloudflare.com&lt;/code&gt;结尾。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在您的域名注册商处更改域名服务器&lt;/strong&gt;：登录到您域名注册商的管理后台，找到域名管理或DNS管理的区域，将当前的域名服务器地址替换为Cloudflare提供的那两个地址。这是一个标准操作，大多数注册商都有详细的帮助文档 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;耐心等待生效&lt;/strong&gt;：域名服务器的变更需要在全球互联网范围内传播和同步，这个过程被称为“DNS传播”。它可能在几分钟内完成，也可能需要长达24小时 。在此期间，您的网站和邮件服务可能会短暂中断。当Cloudflare检测到变更已成功生效时，您会收到一封确认邮件，并且您在Cloudflare上的域名状态会变为“有效”。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将域服务器指向Cloudflare，是一个具有深远影响的决定。用户最初的目标可能仅仅是实现简单的邮件转发，但这一操作实际上是将该域名下的所有网络流量（包括网站、API等）都引导至Cloudflare的全球网络进行处理 。这为用户解锁了一系列强大的免费增值服务，如DDoS攻击防护、全球CDN加速和安全规则等。然而，这也意味着Cloudflare成为了用户整个在线业务的关键路径节点。这是一种信任的托付，也是一种平台依赖的开始。因此，用户在执行此操作时，应充分理解其不仅仅是在配置一个邮件工具，而是在将其数字资产全面地整合进一个更广泛、更强大的平台生态系统中。  &lt;/p&gt;
&lt;h2 id=&#34;第三部分：激活私人邮件转发器：配置入站电子邮件&#34;&gt;&lt;a href=&#34;#第三部分：激活私人邮件转发器：配置入站电子邮件&#34; class=&#34;headerlink&#34; title=&#34;第三部分：激活私人邮件转发器：配置入站电子邮件&#34;&gt;&lt;/a&gt;第三部分：激活私人邮件转发器：配置入站电子邮件&lt;/h2&gt;&lt;p&gt;完成域名接入后，下一步就是激活Cloudflare电子邮件路由功能，实现接收自定义地址邮件的核心目标。&lt;/p&gt;
&lt;h3 id=&#34;导航至电子邮件路由仪表板&#34;&gt;&lt;a href=&#34;#导航至电子邮件路由仪表板&#34; class=&#34;headerlink&#34; title=&#34;导航至电子邮件路由仪表板&#34;&gt;&lt;/a&gt;导航至电子邮件路由仪表板&lt;/h3&gt;&lt;p&gt;登录Cloudflare仪表板，选择您已激活的域名。在左侧的导航菜单中，找到并点击“电子邮件”选项卡，进入电子邮件路由的管理界面 。  &lt;/p&gt;
&lt;h3 id=&#34;一键启用：自动配置DNS&#34;&gt;&lt;a href=&#34;#一键启用：自动配置DNS&#34; class=&#34;headerlink&#34; title=&#34;一键启用：自动配置DNS&#34;&gt;&lt;/a&gt;一键启用：自动配置DNS&lt;/h3&gt;&lt;p&gt;首次进入该界面时，系统会引导您完成启用过程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;添加记录并启用&lt;/strong&gt;：您会看到一个清晰的按钮，通常標示為“添加记录并启用” 。点击此按钮，Cloudflare将开始为您自动配置所有必需的DNS记录。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;幕后工作：自动化的DNS魔法&lt;/strong&gt;：这个看似简单的点击操作，背后是Cloudflare强大自动化能力的体现。系统会自动为您的域名添加三条&lt;code&gt;MX&lt;/code&gt;（Mail Exchanger）记录，并设置不同的优先级。&lt;code&gt;MX&lt;/code&gt;记录的作用是指示全球的邮件服务器，将发送到您域名的邮件投递给Cloudflare的接收服务器 。同时，它还会添加一条  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;TXT&lt;/code&gt;记录用于SPF（Sender Policy Framework）验证。这种自动化极大地简化了配置，避免了因手动输入错误而导致的邮件丢失问题 。值得注意的是，如果您的域名上已存在其他  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;MX&lt;/code&gt;记录（例如来自之前的邮件服务商），Cloudflare会提示您将其删除。电子邮件路由服务无法与同一域名上的其他邮件服务共存，必须确保Cloudflare是唯一的邮件接收方 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建您的第一个自定义地址&#34;&gt;&lt;a href=&#34;#创建您的第一个自定义地址&#34; class=&#34;headerlink&#34; title=&#34;创建您的第一个自定义地址&#34;&gt;&lt;/a&gt;创建您的第一个自定义地址&lt;/h3&gt;&lt;p&gt;启用服务后，您就可以开始创建转发规则了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在“路由规则”选项卡下，点击“创建地址” 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自定义地址&lt;/strong&gt;：在输入框中填入您想要的地址前缀，例如&lt;code&gt;hello&lt;/code&gt;，系统会自动补全为&lt;code&gt;hello@yourdomain.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标地址&lt;/strong&gt;：在“目标地址”字段中，输入您希望接收这些邮件的完整主邮箱地址，例如&lt;code&gt;your.personal.email@gmail.com&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;至关重要的验证步骤&#34;&gt;&lt;a href=&#34;#至关重要的验证步骤&#34; class=&#34;headerlink&#34; title=&#34;至关重要的验证步骤&#34;&gt;&lt;/a&gt;至关重要的验证步骤&lt;/h3&gt;&lt;p&gt;为了防止服务被滥用（例如，被用于恶意转发或发送垃圾邮件），Cloudflare设置了强制的验证流程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;接收验证邮件&lt;/strong&gt;：在您添加目标地址后，Cloudflare会立即向该地址发送一封验证邮件 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击验证链接&lt;/strong&gt;：您需要登录到您的主邮箱（&lt;code&gt;your.personal.email@gmail.com&lt;/code&gt;），找到这封来自Cloudflare的邮件，并点击其中的验证链接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态更新&lt;/strong&gt;：完成验证后，回到Cloudflare仪表板，您会看到该目标地址的状态从“待验证”变为“已验证”或“有效”。只有经过验证的目标地址，其关联的转发规则才会生效 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个看似普通的验证步骤，实际上是一种精心设计的安全机制，体现了“为安全而设的有意摩擦”。如果没有这一环节，恶意行为者可以轻易地将邮件转发到任意第三方邮箱，从而进行骚扰或钓鱼攻击。通过要求目标邮箱的所有者进行主动确认，Cloudflare确保了所有邮件转发都是在接收方知情并同意的情况下进行的。这不仅保护了无辜的第三方免受垃圾邮件的困扰，也维护了Cloudflare平台自身的声誉和服务的可靠性。&lt;/p&gt;
&lt;h2 id=&#34;第四部分：“无限”引擎：精通“全域地址”功能&#34;&gt;&lt;a href=&#34;#第四部分：“无限”引擎：精通“全域地址”功能&#34; class=&#34;headerlink&#34; title=&#34;第四部分：“无限”引擎：精通“全域地址”功能&#34;&gt;&lt;/a&gt;第四部分：“无限”引擎：精通“全域地址”功能&lt;/h2&gt;&lt;p&gt;这一部分将直接解决用户关于“无限”邮箱的核心诉求，通过掌握“全域地址”（Catch-all）功能，释放Cloudflare电子邮件路由的全部潜力。&lt;/p&gt;
&lt;h3 id=&#34;什么是全域地址？&#34;&gt;&lt;a href=&#34;#什么是全域地址？&#34; class=&#34;headerlink&#34; title=&#34;什么是全域地址？&#34;&gt;&lt;/a&gt;什么是全域地址？&lt;/h3&gt;&lt;p&gt;全域地址是一条特殊的路由规则。它的作用是“捕获”所有发送到您域名下、但又没有被任何特定自定义地址规则匹配的电子邮件 。举例来说，如果您只设置了  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;sales@yourdomain.com&lt;/code&gt;的转发规则，但有人错误地将邮件发送到了&lt;code&gt;sale@yourdomain.com&lt;/code&gt;，在没有启用全域地址的情况下，这封邮件将会被退回，发件人会收到投递失败的通知。而启用了全域地址后，这封邮件会被成功“捕获”并转发到您指定的邮箱。&lt;/p&gt;
&lt;h3 id=&#34;启用“无限”功能的步骤&#34;&gt;&lt;a href=&#34;#启用“无限”功能的步骤&#34; class=&#34;headerlink&#34; title=&#34;启用“无限”功能的步骤&#34;&gt;&lt;/a&gt;启用“无限”功能的步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在Cloudflare仪表板的“电子邮件” &amp;gt; “电子邮件路由” &amp;gt; “路由规则”页面中，找到“全域地址”这个选项 。  &lt;/li&gt;
&lt;li&gt;将该功能的开关切换至“启用”或“有效”状态。&lt;/li&gt;
&lt;li&gt;在下方的“操作”下拉菜单中，选择一个处理方式。通常，您会选择“转发至”并将邮件路由到您已经验证过的那个主邮箱地址 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实践用例与即时别名的威力&#34;&gt;&lt;a href=&#34;#实践用例与即时别名的威力&#34; class=&#34;headerlink&#34; title=&#34;实践用例与即时别名的威力&#34;&gt;&lt;/a&gt;实践用例与即时别名的威力&lt;/h3&gt;&lt;p&gt;启用全域地址后，“无限邮箱”的设想便得以实现。用户在任何网站或服务注册时，都可以即时“发明”一个全新的、独一无二的邮箱别名，而无需预先在Cloudflare仪表板中进行任何配置。&lt;/p&gt;
&lt;p&gt;例如，在注册Netflix时，可以随手输入&lt;code&gt;netflix.2024@yourdomain.com&lt;/code&gt;；在订阅某份电子报时，使用&lt;code&gt;newsletter.xyz@yourdomain.com&lt;/code&gt;。所有发送到这些地址的邮件，都会被全域地址规则捕获并准确无误地送达您的主收件箱。这为隐私保护和垃圾邮件溯源提供了极大的便利。如果&lt;code&gt;netflix.2024@yourdomain.com&lt;/code&gt;这个地址开始收到不相关的垃圾邮件，那么用户就可以百分之百确定是Netflix或其合作伙伴泄露了数据。&lt;/p&gt;
&lt;p&gt;然而，强大的功能往往伴随着相应的责任和潜在的风险。全域地址在提供便利的同时，也使您的域名成为了垃圾邮件发送者的一个极具吸引力的目标。垃圾邮件机器人常常使用“字典攻击”的方式，尝试向&lt;code&gt;admin@&lt;/code&gt;、&lt;code&gt;contact@&lt;/code&gt;、&lt;code&gt;test@&lt;/code&gt;、&lt;code&gt;info@&lt;/code&gt;等常见地址发送邮件。启用全域地址意味着所有这些猜测性的邮件都会被您的服务器接收并转发，这可能会导致您的主收件箱收到的垃圾邮件数量显著增加。&lt;/p&gt;
&lt;p&gt;尽管Cloudflare内置了反垃圾邮件和钓鱼检测机制 ，但没有任何系统能做到100%的拦截。因此，一种更成熟、更具策略性的使用方法是采用混合模式。Cloudflare允许用户创建多达200条特定的路由规则 ，而这些特定规则的优先级高于全域地址规则。这意味着，如果一封邮件同时匹配了特定规则（如  &lt;code&gt;sales@yourdomain.com&lt;/code&gt;）和全域地址规则，系统将优先执行特定规则。&lt;/p&gt;
&lt;p&gt;最佳实践是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;为重要、长期的通信创建特定规则&lt;/strong&gt;：例如，为工作、家庭、财务等创建&lt;code&gt;work@&lt;/code&gt;、&lt;code&gt;family@&lt;/code&gt;、&lt;code&gt;billing@&lt;/code&gt;等特定地址。这不仅能确保邮件的稳定接收，也为未来提供了更大的灵活性（例如，日后可以将&lt;code&gt;work@&lt;/code&gt;的邮件转发到另一个专门的工作邮箱）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将全域地址用于一次性或非关键性的注册&lt;/strong&gt;：对于那些您不完全信任或只需要临时使用的服务，可以充分利用全域地址的便利性，即时创建别名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这种混合策略，用户可以在享受“无限”便利的同时，最大限度地控制垃圾邮件，并保持对重要邮件流的清晰管理。&lt;/p&gt;
&lt;h2 id=&#34;第五部分：闭合回路：如何以您的自定义别名发送和回复邮件&#34;&gt;&lt;a href=&#34;#第五部分：闭合回路：如何以您的自定义别名发送和回复邮件&#34; class=&#34;headerlink&#34; title=&#34;第五部分：闭合回路：如何以您的自定义别名发送和回复邮件&#34;&gt;&lt;/a&gt;第五部分：闭合回路：如何以您的自定义别名发送和回复邮件&lt;/h2&gt;&lt;p&gt;这是本指南中最为关键和深入的部分。它解决了Cloudflare电子邮件路由本身最大的局限性，并提供了一套完整、可行的解决方案，使您的自定义邮箱地址实现真正的双向通信。&lt;/p&gt;
&lt;h3 id=&#34;关键前提：Cloudflare是一条单行道（仅限入站）&#34;&gt;&lt;a href=&#34;#关键前提：Cloudflare是一条单行道（仅限入站）&#34; class=&#34;headerlink&#34; title=&#34;关键前提：Cloudflare是一条单行道（仅限入站）&#34;&gt;&lt;/a&gt;关键前提：Cloudflare是一条单行道（仅限入站）&lt;/h3&gt;&lt;p&gt;必须明确指出，Cloudflare电子邮件路由服务本身只处理&lt;em&gt;接收&lt;/em&gt;邮件的流程。它不提供用于发送邮件的出站SMTP（Simple Mail Transfer Protocol）服务器 。这意味着，当您回复一封通过Cloudflare转发来的邮件时，默认情况下，回复将从您的主邮箱地址（如  &lt;code&gt;your.personal.email@gmail.com&lt;/code&gt;）发出，这会向收件人暴露您的真实邮箱地址，从而违背了使用别名的初衷 。  &lt;/p&gt;
&lt;p&gt;这一设计决策背后有着深刻的运营考量。运营一个出站邮件服务是一项极其复杂且成本高昂的任务，服务商需要持续不断地管理其IP地址的信誉，以防止被各大邮件服务商列入黑名单。任何滥用行为都可能导致整个平台的发送能力受损。通过专注于提供入站转发服务，Cloudflare规避了这一巨大的运营负担和滥用风险，这也是该服务能够免费提供的重要原因之一 。  &lt;/p&gt;
&lt;h3 id=&#34;解决方案：利用Gmail作为您的免费出站SMTP服务器&#34;&gt;&lt;a href=&#34;#解决方案：利用Gmail作为您的免费出站SMTP服务器&#34; class=&#34;headerlink&#34; title=&#34;解决方案：利用Gmail作为您的免费出站SMTP服务器&#34;&gt;&lt;/a&gt;解决方案：利用Gmail作为您的免费出站SMTP服务器&lt;/h3&gt;&lt;p&gt;最为主流且易于访问的解决方案是，配置您现有的Gmail账户，使其能够以您的自定义别名来发送邮件。这样便能构建一个功能完整、免费且双向的电子邮件系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤一：安全第一 - 在Google账户中启用两步验证（2FA）&lt;/strong&gt; 这是后续步骤的强制性前提，也是保护您账户安全的关键最佳实践 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤二：创建Google应用专用密码&lt;/strong&gt; 应用专用密码是一个16位的、一次性生成的代码，它授权某个应用程序或设备访问您的Google账户，而无需通过常规的两步验证提示。这把“钥匙”将用于授权Gmail自己的SMTP服务器代表您发送邮件。请访问Google账户的安全设置页面，生成一个用于“邮件”应用的应用专用密码，并为它指定一个自定义名称（如“Cloudflare别名发送”）。请务必妥善保管这个16位的密码 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤三：在Gmail中配置“用这个地址发送邮件”&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;登录Gmail，进入&lt;code&gt;设置 &amp;gt; 查看所有设置 &amp;gt; 帐号和导入&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在“用这个地址发送邮件”部分，点击“添加其他电子邮件地址” 。  &lt;/li&gt;
&lt;li&gt;在弹出的窗口中，输入您的发件人姓名和您希望使用的自定义别名（例如&lt;code&gt;hello@yourdomain.com&lt;/code&gt;）。根据不同的指南，是否勾选“视为别名”选项有不同的建议，通常建议勾选以简化管理。&lt;/li&gt;
&lt;li&gt;点击“下一步”，进入SMTP服务器配置页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Gmail-SMTP配置参数&#34;&gt;&lt;a href=&#34;#Gmail-SMTP配置参数&#34; class=&#34;headerlink&#34; title=&#34;Gmail SMTP配置参数&#34;&gt;&lt;/a&gt;Gmail SMTP配置参数&lt;/h3&gt;&lt;p&gt;为了减少配置过程中的错误，以下表格清晰地列出了所有必需的参数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设置项&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;SMTP 服务器&lt;/td&gt;
&lt;td&gt;&lt;code&gt;smtp.gmail.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Google官方的对外发信服务器地址 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;端口&lt;/td&gt;
&lt;td&gt;&lt;code&gt;587&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;推荐使用的TLS加密连接端口 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用户名&lt;/td&gt;
&lt;td&gt;&lt;code&gt;your.personal.email@gmail.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;您的完整Gmail地址 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;密码&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[您的16位应用专用密码]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;您在第二步中生成的16位应用专用密码，&lt;strong&gt;不是&lt;/strong&gt;您的Gmail登录密码 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安全连接&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TLS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;推荐使用的安全协议 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;输入完毕后点击“添加帐户”。Gmail会向您的自定义别名（&lt;code&gt;hello@yourdomain.com&lt;/code&gt;）发送一封验证邮件。由于您已经配置好了Cloudflare的转发，这封邮件会出现在您的主收件箱中。打开邮件，点击其中的确认链接或输入验证码，即可完成设置。&lt;/p&gt;
&lt;h3 id=&#34;确保您的邮件不被当作垃圾邮件：SPF与DMARC配置指南&#34;&gt;&lt;a href=&#34;#确保您的邮件不被当作垃圾邮件：SPF与DMARC配置指南&#34; class=&#34;headerlink&#34; title=&#34;确保您的邮件不被当作垃圾邮件：SPF与DMARC配置指南&#34;&gt;&lt;/a&gt;确保您的邮件不被当作垃圾邮件：SPF与DMARC配置指南&lt;/h3&gt;&lt;p&gt;仅仅完成上述设置还不够。直接这样发送的邮件可能会因为身份验证问题而被收件方服务器标记为垃圾邮件，或者在发件人处显示恼人的“由gmail.com代发”字样 。这是因为，邮件实际上是从Google的服务器发出的，但却声称自己来自  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;yourdomain.com&lt;/code&gt;。为了解决这个问题，您必须在您域名的DNS记录中明确授权Google可以代表您发送邮件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;修改您的SPF记录&lt;/strong&gt;：Cloudflare自动创建的SPF记录只授权了Cloudflare自己。您需要编辑这条&lt;code&gt;TXT&lt;/code&gt;记录，将Google也加入授权列表。修改后的内容应如下：&lt;code&gt;v=spf1 include:_spf.mx.cloudflare.net include:_spf.google.com ~all&lt;/code&gt;。这个小小的改动至关重要，它同时授权了Cloudflare（用于处理转发邮件的合法性）和Google（用于发送邮件） 。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建DMARC记录&lt;/strong&gt;：DMARC（基于域的消息认证、报告和一致性）是一种电子邮件验证策略，它告诉接收邮件的服务器，当一封声称来自您域名的邮件未能通过SPF或DKIM检查时应该如何处理。它还能向您发送报告，让您了解全球有哪些服务器在尝试以您的域名发送邮件。对于初学者，建议使用一个最安全的“仅监控”策略：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类型&lt;/strong&gt;: &lt;code&gt;TXT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名称&lt;/strong&gt;: &lt;code&gt;_dmarc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内容&lt;/strong&gt;: &lt;code&gt;v=DMARC1; p=none; rua=mailto:your.personal.email@gmail.com&lt;/code&gt; 。  &lt;/li&gt;
&lt;li&gt;这里的&lt;code&gt;p=none&lt;/code&gt;意味着“无操作”，即即使验证失败，也请正常接收邮件，但请将情况记录在报告中发送给我。&lt;code&gt;rua&lt;/code&gt;指定了接收这些汇总报告的邮箱地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最终DNS记录配置总览&#34;&gt;&lt;a href=&#34;#最终DNS记录配置总览&#34; class=&#34;headerlink&#34; title=&#34;最终DNS记录配置总览&#34;&gt;&lt;/a&gt;最终DNS记录配置总览&lt;/h3&gt;&lt;p&gt;为了确保您的电子邮件系统完整、可靠地运行，以下表格汇总了所有必需的DNS记录。您可以将其作为最终检查和未来排错的参考。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;记录类型&lt;/th&gt;
&lt;th&gt;名称 (主机)&lt;/th&gt;
&lt;th&gt;内容 (值)&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;MX&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;route1.mx.cloudflare.net&lt;/code&gt; (优先级 10)&lt;/td&gt;
&lt;td&gt;将入站邮件指向Cloudflare的主接收服务器 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MX&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;route2.mx.cloudflare.net&lt;/code&gt; (优先级 20)&lt;/td&gt;
&lt;td&gt;Cloudflare的备用入站邮件服务器 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MX&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;route3.mx.cloudflare.net&lt;/code&gt; (优先级 30)&lt;/td&gt;
&lt;td&gt;Cloudflare的备用入站邮件服务器 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TXT&lt;/td&gt;
&lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v=spf1 include:_spf.mx.cloudflare.net include:_spf.google.com ~all&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;授权Cloudflare和Google为您的域名处理邮件 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TXT&lt;/td&gt;
&lt;td&gt;&lt;code&gt;_dmarc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v=DMARC1; p=none; rua=mailto:your.email@gmail.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置DMARC监控策略并指定报告接收地址 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;第六部分：规则与限制：最佳实践与服务边界&#34;&gt;&lt;a href=&#34;#第六部分：规则与限制：最佳实践与服务边界&#34; class=&#34;headerlink&#34; title=&#34;第六部分：规则与限制：最佳实践与服务边界&#34;&gt;&lt;/a&gt;第六部分：规则与限制：最佳实践与服务边界&lt;/h2&gt;&lt;p&gt;为了长期、稳定地使用这套系统，用户需要对其服务边界有清晰的认识，并遵循一些最佳实践。本部分旨在管理用户期望，并提供最终的策略性建议。&lt;/p&gt;
&lt;h3 id=&#34;“无限”背后的真实限制&#34;&gt;&lt;a href=&#34;#“无限”背后的真实限制&#34; class=&#34;headerlink&#34; title=&#34;“无限”背后的真实限制&#34;&gt;&lt;/a&gt;“无限”背后的真实限制&lt;/h3&gt;&lt;p&gt;尽管“全域地址”功能提供了创建无限别名的能力，但Cloudflare电子邮件路由服务本身存在一些明确的硬性限制，用户应当知晓：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;规则与地址数量&lt;/strong&gt;：每个Cloudflare账户最多可以创建200条自定义路由规则和200个已验证的目标地址 。需要再次强调的是，全域地址本身只算作一条规则，这使其成为绕过200个地址限制、满足绝大多数日常需求的关键。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;邮件大小&lt;/strong&gt;：通过此服务转发的单封电子邮件，其大小不能超过25 MiB 。这对于日常文本和常规附件的邮件来说绰绰有余，但可能不适用于发送大型文件。  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他已知限制&lt;/strong&gt;：服务在推出初期，曾不支持国际化域名（IDN）。尽管Cloudflare不断更新其服务，但用户在遇到特殊需求时，仍应查阅最新的官方文档以获取最准确的信息 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超越Gmail：关于其他出站SMTP服务的说明&#34;&gt;&lt;a href=&#34;#超越Gmail：关于其他出站SMTP服务的说明&#34; class=&#34;headerlink&#34; title=&#34;超越Gmail：关于其他出站SMTP服务的说明&#34;&gt;&lt;/a&gt;超越Gmail：关于其他出站SMTP服务的说明&lt;/h3&gt;&lt;p&gt;本指南以Gmail作为出站SMTP服务的范例，主要是因为它免费、普及且易于配置。然而，其底层架构——即“Cloudflare负责入站，第三方服务负责出站”——是一个高度灵活和可扩展的模式。用户完全可以选择其他专业的出站SMTP服务，如SMTP2Go、SendGrid、Brevo（前Sendinblue）或Purelymail 。这些服务通常提供更高的发送额度、更详细的分析报告和更专业的客户支持，但可能需要支付一定的费用。配置原理与Gmail类似：获取SMTP凭据，然后在您的邮件客户端（或Gmail的“用这个地址发送邮件”功能）中进行设置，并相应地更新您域名的SPF和DKIM记录以授权该服务商。  &lt;/p&gt;
&lt;h3 id=&#34;结论与最终建议&#34;&gt;&lt;a href=&#34;#结论与最终建议&#34; class=&#34;headerlink&#34; title=&#34;结论与最终建议&#34;&gt;&lt;/a&gt;结论与最终建议&lt;/h3&gt;&lt;p&gt;通过结合Cloudflare的入站转发和第三方SMTP服务的出站能力，任何拥有域名的个人或组织都可以构建一个功能强大、高度私密且成本极低的专业电子邮件系统。为了确保该系统的长期健康运行，以下是最终的建议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;从&lt;code&gt;p=none&lt;/code&gt;开始您的DMARC之旅&lt;/strong&gt;：在设置DMARC记录时，务必从&lt;code&gt;p=none&lt;/code&gt;（仅监控）策略开始。这可以防止因配置错误而意外地导致合法邮件被拒绝或隔离。在运行一段时间并分析收到的&lt;code&gt;rua&lt;/code&gt;报告，确认所有合法邮件源都已正确配置SPF/DKIM后，再考虑升级到更严格的策略（如&lt;code&gt;p=quarantine&lt;/code&gt;或&lt;code&gt;p=reject&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定期审阅DMARC报告&lt;/strong&gt;：养成偶尔查看DMARC汇总报告的习惯。这些报告是XML格式的，可以使用在线工具进行解析。它们能告诉您，除了您授权的服务外，是否还有其他未知的服务器在尝试以您的域名发送邮件，这可能是欺诈或配置错误的信号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;平衡特定规则与全域地址&lt;/strong&gt;：再次强调混合策略的重要性。为长期、重要的通信角色（如&lt;code&gt;contact@&lt;/code&gt;, &lt;code&gt;billing@&lt;/code&gt;）创建特定的转发规则，为一次性的、风险较高的注册场景（如注册不知名论坛、下载免费资源）利用全域地址的便利性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将隐私视为一个持续的过程&lt;/strong&gt;：建立这套系统是迈向掌控个人数字身份的重要一步。然而，真正的隐私保护是一个持续的、主动的过程。它要求用户在分享信息时保持警惕，并善用这些工具来区隔自己的数字足迹，从而在一个日益互联的世界中更好地保护自己。&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/06/26/zai-wsl-zhong-jiang-python3-ming-ling-bie-ming-wei-python/</guid>
            <title>在WSL中将python3命令别名为python</title>
            <link>https://0xdadream.github.io/2025/06/26/zai-wsl-zhong-jiang-python3-ming-ling-bie-ming-wei-python/</link>
            <category>python</category>
            <pubDate>Thu, 26 Jun 2025 22:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;在WSL中将-python3-命令别名为-python&#34;&gt;&lt;a href=&#34;#在WSL中将-python3-命令别名为-python&#34; class=&#34;headerlink&#34; title=&#34;在WSL中将 python3 命令别名为 python&#34;&gt;&lt;/a&gt;在WSL中将 &lt;code&gt;python3&lt;/code&gt; 命令别名为 &lt;code&gt;python&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;在 Windows Subsystem for Linux (WSL) 环境中，默认情况下，Python 3.x 版本通常通过 &lt;code&gt;python3&lt;/code&gt; 命令调用，而 &lt;code&gt;python&lt;/code&gt; 命令可能未定义或指向老旧的 Python 2.x 版本。为了方便起见，您可以将 &lt;code&gt;python3&lt;/code&gt; 命令别名为 &lt;code&gt;python&lt;/code&gt;，从而直接使用 &lt;code&gt;python&lt;/code&gt; 命令来执行 Python 3.x。&lt;/p&gt;
&lt;p&gt;最常用且推荐的方法是创建一个永久性的别名，这通过修改您 shell 的配置文件（通常是 &lt;code&gt;.bashrc&lt;/code&gt;）来实现。这样，每次启动新的 WSL 终端时，该别名都会自动生效。&lt;/p&gt;
&lt;p&gt;以下是详细的步骤：&lt;/p&gt;
&lt;h3 id=&#34;1-打开您的-shell-配置文件&#34;&gt;&lt;a href=&#34;#1-打开您的-shell-配置文件&#34; class=&#34;headerlink&#34; title=&#34;1. 打开您的 shell 配置文件&#34;&gt;&lt;/a&gt;1. 打开您的 shell 配置文件&lt;/h3&gt;&lt;p&gt;您需要使用一个命令行文本编辑器（如 &lt;code&gt;nano&lt;/code&gt;、&lt;code&gt;vim&lt;/code&gt; 或 &lt;code&gt;emacs&lt;/code&gt;）来编辑位于您用户主目录下的 &lt;code&gt;.bashrc&lt;/code&gt; 文件。对于大多数用户来说，默认的 shell 是 Bash。&lt;/p&gt;
&lt;p&gt;打开终端并输入以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;nano&lt;/span&gt; ~/.bashrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果您使用的是 Zsh，则应编辑 &lt;code&gt;.zshrc&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;nano&lt;/span&gt; ~/.zshrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-添加别名设置&#34;&gt;&lt;a href=&#34;#2-添加别名设置&#34; class=&#34;headerlink&#34; title=&#34;2. 添加别名设置&#34;&gt;&lt;/a&gt;2. 添加别名设置&lt;/h3&gt;&lt;p&gt;在打开的文件中，滚动到文件末尾，并添加以下这行代码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;python3&#39;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一行代码的作用是告诉 shell，当您输入 &lt;code&gt;python&lt;/code&gt; 时，实际上应该执行 &lt;code&gt;python3&lt;/code&gt; 命令。&lt;/p&gt;
&lt;p&gt;您还可以选择为 &lt;code&gt;pip&lt;/code&gt; 创建一个类似的别名：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;pip&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;pip3&#39;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-保存并关闭文件&#34;&gt;&lt;a href=&#34;#3-保存并关闭文件&#34; class=&#34;headerlink&#34; title=&#34;3. 保存并关闭文件&#34;&gt;&lt;/a&gt;3. 保存并关闭文件&lt;/h3&gt;&lt;p&gt;如果您使用的是 &lt;code&gt;nano&lt;/code&gt; 编辑器，请按 &lt;code&gt;Ctrl + O&lt;/code&gt; 来保存文件，然后按 &lt;code&gt;Enter&lt;/code&gt; 确认。接着按 &lt;code&gt;Ctrl + X&lt;/code&gt; 退出编辑器。&lt;/p&gt;
&lt;h3 id=&#34;4-使更改生效&#34;&gt;&lt;a href=&#34;#4-使更改生效&#34; class=&#34;headerlink&#34; title=&#34;4. 使更改生效&#34;&gt;&lt;/a&gt;4. 使更改生效&lt;/h3&gt;&lt;p&gt;新添加的别名不会立即在当前的终端会话中生效。您需要让 shell 重新加载配置文件。您可以通过以下任一方式实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;关闭并重新打开您的 WSL 终端。&lt;/strong&gt; 这是最简单直接的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;在当前终端会话中执行以下命令：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.bashrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者，如果您使用的是 Zsh：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.zshrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-验证别名是否生效&#34;&gt;&lt;a href=&#34;#5-验证别名是否生效&#34; class=&#34;headerlink&#34; title=&#34;5. 验证别名是否生效&#34;&gt;&lt;/a&gt;5. 验证别名是否生效&lt;/h3&gt;&lt;p&gt;现在，您可以在终端中输入以下命令来验证 &lt;code&gt;python&lt;/code&gt; 命令是否已成功指向 Python 3：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;python &lt;span class=&#34;token parameter variable&#34;&gt;--version&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果一切顺利，输出结果应该显示您的 Python 3.x 版本号，例如：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;Python &lt;span class=&#34;token number&#34;&gt;3.10&lt;/span&gt;.6&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过以上步骤，您已经成功地在 WSL 中将 &lt;code&gt;python3&lt;/code&gt; 命令别名为 &lt;code&gt;python&lt;/code&gt;，这将为您在开发过程中提供更便捷的体验。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/06/26/arc-a770-ollama-webui-jiao-cheng/</guid>
            <title>Arc A770 Ollama WebUI 教程</title>
            <link>https://0xdadream.github.io/2025/06/26/arc-a770-ollama-webui-jiao-cheng/</link>
            <category>AI</category>
            <pubDate>Thu, 26 Jun 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Arc-A770-Ollama-WebUI-教程&#34;&gt;&lt;a href=&#34;#Arc-A770-Ollama-WebUI-教程&#34; class=&#34;headerlink&#34; title=&#34;Arc A770 Ollama WebUI 教程&#34;&gt;&lt;/a&gt;Arc A770 Ollama WebUI 教程&lt;/h1&gt;&lt;p&gt;在 Windows 上利用 Arc A770 16G 和 IPEX-LLM 运行 Ollama 大语言模型的终极指南&lt;/p&gt;
&lt;h2 id=&#34;第一部分：简介-为本地-AI-释放您的-Arc-A770-显卡潜能&#34;&gt;&lt;a href=&#34;#第一部分：简介-为本地-AI-释放您的-Arc-A770-显卡潜能&#34; class=&#34;headerlink&#34; title=&#34;第一部分：简介 - 为本地 AI 释放您的 Arc A770 显卡潜能&#34;&gt;&lt;/a&gt;第一部分：简介 - 为本地 AI 释放您的 Arc A770 显卡潜能&lt;/h2&gt;&lt;h3 id=&#34;1-1-前景与挑战&#34;&gt;&lt;a href=&#34;#1-1-前景与挑战&#34; class=&#34;headerlink&#34; title=&#34;1.1. 前景与挑战&#34;&gt;&lt;/a&gt;1.1. 前景与挑战&lt;/h3&gt;&lt;p&gt;英特尔锐炫 Arc A770 16G 显卡凭借其高达 16 GB 的海量显存，为在本地运行大型语言模型（LLM）提供了一个极具性价比和吸引力的硬件平台。充足的显存意味着可以流畅运行更大、更复杂的模型，这对于追求高质量本地 AI 体验的用户而言至关重要。&lt;/p&gt;
&lt;p&gt;然而，一个核心挑战阻碍了这条道路：标准的、从官方网站下载的 Windows 版 Ollama 应用程序，其默认配置并不能直接利用英特尔 Arc GPU 进行硬件加速 。这是因为其标准后端主要依赖于为英伟达（NVIDIA）设计的 CUDA 技术，或是为其他硬件设计的 DirectML 技术，而这些技术在标准 Ollama 的框架内并未对英特尔的 Xe HPG 架构提供原生支持 。直接安装标准版 Ollama 会导致模型推理任务完全由 CPU 执行，无法发挥 Arc A770 强大的并行计算能力。  &lt;/p&gt;
&lt;h3 id=&#34;1-2-解决方案：英特尔-IPEX-LLM-这座桥梁&#34;&gt;&lt;a href=&#34;#1-2-解决方案：英特尔-IPEX-LLM-这座桥梁&#34; class=&#34;headerlink&#34; title=&#34;1.2. 解决方案：英特尔 IPEX-LLM 这座桥梁&#34;&gt;&lt;/a&gt;1.2. 解决方案：英特尔 IPEX-LLM 这座桥梁&lt;/h3&gt;&lt;p&gt;解决这一挑战的关键在于英特尔官方推出的“英特尔 PyTorch LLM 扩展库”（Intel® Extension for PyTorch* for LLM），简称 IPEX-LLM。它并非一个简单的插件，而是一个全面的加速库，为 Ollama 等框架提供了一个基于 oneAPI 和 SYCL 编程模型构建的、为英特尔 GPU 量身定制的后端 。  &lt;/p&gt;
&lt;p&gt;本指南的核心，正是利用一个由英特尔提供、经过特殊编译的 Ollama 版本。该版本将默认的推理引擎替换为了 IPEX-LLM，从而打通了软件与 Arc 显卡之间的加速通道。这并非一个脆弱或不稳定的社区项目，而是由硬件制造商官方支持的解决方案。英特尔通过其官方 GitHub 仓库积极开发并推广此方案，发布了易于使用的“便携式压缩包”（Portable Zips），并提供了详尽的快速入门文档，这为方案的可靠性和未来更新提供了有力保障 。  &lt;/p&gt;
&lt;h3 id=&#34;1-3-我们的路线图&#34;&gt;&lt;a href=&#34;#1-3-我们的路线图&#34; class=&#34;headerlink&#34; title=&#34;1.3. 我们的路线图&#34;&gt;&lt;/a&gt;1.3. 我们的路线图&lt;/h3&gt;&lt;p&gt;本教程将遵循一条清晰的路径，引导您完成从零到一的全部署过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;系统基础准备&lt;/strong&gt;：安装并配置必要的驱动程序和软件环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心引擎部署&lt;/strong&gt;：安装并启动经过 IPEX-LLM 加速的 Ollama 后端服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前端界面搭建&lt;/strong&gt;：安装并连接用户友好的 Open WebUI，提供图形化交互界面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证与排错&lt;/strong&gt;：确认 GPU 加速已成功启用，并提供常见问题的解决方案。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第二部分：基础设置-准备您的-Windows-系统&#34;&gt;&lt;a href=&#34;#第二部分：基础设置-准备您的-Windows-系统&#34; class=&#34;headerlink&#34; title=&#34;第二部分：基础设置 - 准备您的 Windows 系统&#34;&gt;&lt;/a&gt;第二部分：基础设置 - 准备您的 Windows 系统&lt;/h2&gt;&lt;p&gt;在开始部署之前，确保系统环境符合要求是成功的先决条件。下面的清单和步骤将帮助您准备好一切。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统必备组件清单&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件&lt;/th&gt;
&lt;th&gt;推荐版本/要求&lt;/th&gt;
&lt;th&gt;下载地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;英特尔 Arc 显卡驱动&lt;/td&gt;
&lt;td&gt;最新 WHQL 认证版 (例如 32.0.101.6881 或更高)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/products/sku/229151/intel-arc-a770-graphics-16gb/downloads.html&#34;&gt;英特尔官方下载中心&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Miniforge (Conda)&lt;/td&gt;
&lt;td&gt;最新版&lt;/td&gt;
&lt;td&gt;(&lt;a href=&#34;https://github.com/conda-forge/miniforge/releases/latest&#34;&gt;https://github.com/conda-forge/miniforge/releases/latest&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows Terminal&lt;/td&gt;
&lt;td&gt;最新版&lt;/td&gt;
&lt;td&gt;(&lt;a href=&#34;https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701&#34;&gt;https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;2-1-英特尔-Arc-显卡驱动：性能的基石&#34;&gt;&lt;a href=&#34;#2-1-英特尔-Arc-显卡驱动：性能的基石&#34; class=&#34;headerlink&#34; title=&#34;2.1. 英特尔 Arc 显卡驱动：性能的基石&#34;&gt;&lt;/a&gt;2.1. 英特尔 Arc 显卡驱动：性能的基石&lt;/h3&gt;&lt;p&gt;整个技术栈依赖于最新的显卡驱动程序通过英特尔 oneAPI Level Zero 接口与 GPU 进行通信。过时、损坏或由 Windows Update 自动安装的通用驱动程序是导致失败的主要原因。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：识别当前驱动版本&lt;/strong&gt; 打开英特尔锐炫控制中心（Intel Arc Control）软件，或通过设备管理器查看当前安装的显卡驱动程序版本 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步：下载正确的驱动程序&lt;/strong&gt; 访问上表中提供的英特尔官方下载中心链接，下载适用于 Arc A770 16GB 的最新 WHQL 认证驱动程序。根据资料，一个可靠的版本是 &lt;code&gt;32.0.101.6881&lt;/code&gt;，对应的安装文件名为 &lt;code&gt;gfx_win_101.6881.exe&lt;/code&gt; 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步：执行一次“清洁安装”（推荐的最佳实践）&lt;/strong&gt; 为了从根源上避免潜在的、难以诊断的故障，强烈建议执行一次“清洁安装”。在驱动安装过程中，选择“自定义安装”，然后勾选“执行清洁安装”选项。这将移除所有旧的驱动文件和配置，避免新旧文件冲突。&lt;/p&gt;
&lt;p&gt;对于追求极致稳定或在后续步骤中遇到蓝屏错误（如 &lt;code&gt;VIDEO_SCHEDULER_INTERNAL_ERROR&lt;/code&gt; ）的用户，可以采用更彻底的方法：使用 Display Driver Uninstaller (DDU) 工具。这是英特尔官方支持文档中也提及的高级方法，可以确保完全清除旧驱动的残留 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四步：验证安装&lt;/strong&gt; 安装完成后，重启计算机。再次打开英特尔锐炫控制中心，确认驱动程序版本已更新为最新版本。&lt;/p&gt;
&lt;h3 id=&#34;2-2-命令行与环境设置&#34;&gt;&lt;a href=&#34;#2-2-命令行与环境设置&#34; class=&#34;headerlink&#34; title=&#34;2.2. 命令行与环境设置&#34;&gt;&lt;/a&gt;2.2. 命令行与环境设置&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;第一步：安装 Miniforge&lt;/strong&gt; 相比于完整的 Anaconda 发行版，Miniforge 更为轻量，是搭建 Python 环境的更优选择。运行 Miniforge 安装程序，在安装过程中，建议勾选“Add Miniforge3 to my PATH environment variable”选项，这将简化后续的命令行操作 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步：安装与配置 Windows Terminal&lt;/strong&gt; 从 Microsoft Store 安装 Windows Terminal，它提供了现代化的多标签页和强大的 PowerShell 支持，是执行后续所有命令的推荐工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步：为 PowerShell 初始化 Conda&lt;/strong&gt; 这是一个常见的障碍点。打开 Windows Terminal (PowerShell)，运行以下命令：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;conda init powershell&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此命令会修改您的 PowerShell 配置文件，使其能够识别 &lt;code&gt;conda&lt;/code&gt; 命令 。完成后，必须关闭并重新打开 Windows Terminal 才能使更改生效。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四步：设置 PowerShell 执行策略&lt;/strong&gt; 出于安全考虑，PowerShell 的默认执行策略可能会阻止 Conda 激活脚本的运行。在新的 PowerShell 窗口中，运行以下命令以允许这些脚本执行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在提示时，输入 &lt;code&gt;Y&lt;/code&gt; 并按回车确认 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五步：验证 Conda 安装&lt;/strong&gt; 在 PowerShell 口中输入 &lt;code&gt;conda --version&lt;/code&gt;。如果安装正确，将显示 Conda 的版本号，表明您的命令行环境已准备就绪。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第三部分：核心引擎-部署加速的-Ollama-后端&#34;&gt;&lt;a href=&#34;#第三部分：核心引擎-部署加速的-Ollama-后端&#34; class=&#34;headerlink&#34; title=&#34;第三部分：核心引擎 - 部署加速的 Ollama 后端&#34;&gt;&lt;/a&gt;第三部分：核心引擎 - 部署加速的 Ollama 后端&lt;/h2&gt;&lt;h3 id=&#34;3-1-为何选择-IPEX-LLM-定制版-Ollama&#34;&gt;&lt;a href=&#34;#3-1-为何选择-IPEX-LLM-定制版-Ollama&#34; class=&#34;headerlink&#34; title=&#34;3.1. 为何选择 IPEX-LLM 定制版 Ollama&#34;&gt;&lt;/a&gt;3.1. 为何选择 IPEX-LLM 定制版 Ollama&lt;/h3&gt;&lt;p&gt;在此必须明确：从 &lt;code&gt;ollama.com&lt;/code&gt; 官方网站下载的标准版 Ollama 安装程序 &lt;strong&gt;无法&lt;/strong&gt; 用于本教程的目标。如果您已经安装了标准版，请先将其卸载。&lt;/p&gt;
&lt;p&gt;我们将使用的是英特尔提供的、内建了 IPEX-LLM 支持的特殊版本。它通过 oneAPI 和 SYCL 技术栈，将推理任务直接交由英特尔 GPU 处理，从而实现硬件加速 。英特尔提供的“便携式压缩包”方案，极大地降低了用户的配置门槛，是目前最推荐、最便捷的部署方式，避免了早期版本中复杂的依赖安装和初始化脚本步骤 。  &lt;/p&gt;
&lt;h3 id=&#34;3-2-创建专用的-AI-后端环境&#34;&gt;&lt;a href=&#34;#3-2-创建专用的-AI-后端环境&#34; class=&#34;headerlink&#34; title=&#34;3.2. 创建专用的 AI 后端环境&#34;&gt;&lt;/a&gt;3.2. 创建专用的 AI 后端环境&lt;/h3&gt;&lt;p&gt;为了避免不同软件间的依赖冲突，我们将为 Ollama 后端创建一个独立的、干净的 Conda 环境。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 PowerShell 中，运行以下命令创建环境：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;conda create -n ipex-ollama python=3.11 -y&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会创建一个名为 &lt;code&gt;ipex-ollama&lt;/code&gt; 的环境，并指定 Python 版本为 3.11，这是经过验证的兼容版本 。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;激活该环境：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;conda activate ipex-ollama&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;激活后，PowerShell 提示符前会显示 &lt;code&gt;(ipex-ollama)&lt;/code&gt;，表示您当前正工作在此环境中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-3-安装-IPEX-LLM-版-Ollama&#34;&gt;&lt;a href=&#34;#3-3-安装-IPEX-LLM-版-Ollama&#34; class=&#34;headerlink&#34; title=&#34;3.3. 安装 IPEX-LLM 版 Ollama&#34;&gt;&lt;/a&gt;3.3. 安装 IPEX-LLM 版 Ollama&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;第一步：下载便携式软件包&lt;/strong&gt; 访问(&lt;a href=&#34;https://github.com/intel/ipex-llm/releases)%EF%BC%8C%E6%89%BE%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84%E5%8F%91%E8%A1%8C%E7%89%88%EF%BC%8C%E5%B9%B6%E4%B8%8B%E8%BD%BD%E9%80%82%E7%94%A8%E4%BA%8E&#34;&gt;https://github.com/intel/ipex-llm/releases)，找到最新的发行版，并下载适用于&lt;/a&gt; Windows 的 &lt;code&gt;Ollama-Portable-Zip&lt;/code&gt; 文件 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步：解压软件包&lt;/strong&gt; 在您的硬盘上创建一个专用于 AI 工具的文件夹，例如 &lt;code&gt;C:\ai-tools\&lt;/code&gt;。然后在此文件夹下再创建一个 &lt;code&gt;ipex-ollama&lt;/code&gt; 文件夹，并将下载的压缩包内容完整地解压到这里。最终路径应类似于 &lt;code&gt;C:\ai-tools\ipex-ollama&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步：在终端中导航至该目录&lt;/strong&gt; 在已激活 &lt;code&gt;ipex-ollama&lt;/code&gt; 环境的 PowerShell 窗口中，使用 &lt;code&gt;cd&lt;/code&gt; 命令进入您刚刚创建的文件夹：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;cd C:\ai-tools\ipex-ollama&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-4-启动-GPU-加速的-Ollama-服务器&#34;&gt;&lt;a href=&#34;#3-4-启动-GPU-加速的-Ollama-服务器&#34; class=&#34;headerlink&#34; title=&#34;3.4. 启动 GPU 加速的 Ollama 服务器&#34;&gt;&lt;/a&gt;3.4. 启动 GPU 加速的 Ollama 服务器&lt;/h3&gt;&lt;p&gt;这是整个流程中最关键的一步。我们需要通过设置特定的环境变量来“指挥”Ollama 使用 GPU。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键环境变量解析&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;环境变量&lt;/th&gt;
&lt;th&gt;推荐值&lt;/th&gt;
&lt;th&gt;目的与解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;OLLAMA_NUM_GPU&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;999&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;最核心的设置&lt;/strong&gt;。此变量告知 Ollama 将模型的多少层卸载到 GPU。设置为一个非常大的数字（如 999）等同于“全部卸载”，以最大化利用 GPU 资源 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ZES_ENABLE_SYSMAN&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;启用 Level Zero 驱动程序栈中的 Sysman 库。IPEX-LLM 需要此库来进行 GPU 监控和内存管理 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SYCL_CACHE_PERSISTENT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;启用持久化 SYCL 内核缓存。当模型第一次加载时，SYCL 会将编译后的 GPU 内核代码缓存到硬盘。这会显著加快后续加载相同或不同模型的速度 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;启动服务器的命令&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 PowerShell 中，逐行运行以下命令来设置环境变量。这些设置仅对当前终端会话有效。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$env:OLLAMA_NUM_GPU=&#34;999&#34;
$env:ZES_ENABLE_SYSMAN=&#34;1&#34;
$env:SYCL_CACHE_PERSISTENT=&#34;1&#34;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置完毕后，运行以下命令启动 Ollama 服务器：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;.\ollama serve
or
start-ollama.bat&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务器成功启动后，您会看到类似 &lt;code&gt;time=... level=INFO source=server.go:.. msg=&#34;starting server...&#34;&lt;/code&gt; 的日志输出。&lt;strong&gt;请务必保持此终端窗口处于打开状态&lt;/strong&gt;，因为它就是您的 AI 推理引擎。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第四部分：用户体验-安装并连接-Open-WebUI&#34;&gt;&lt;a href=&#34;#第四部分：用户体验-安装并连接-Open-WebUI&#34; class=&#34;headerlink&#34; title=&#34;第四部分：用户体验 - 安装并连接 Open WebUI&#34;&gt;&lt;/a&gt;第四部分：用户体验 - 安装并连接 Open WebUI&lt;/h2&gt;&lt;p&gt;Ollama 后端已经运行，但它只提供了一个命令行接口。为了获得类似 ChatGPT 的图形化聊天体验，我们需要安装一个前端界面——Open WebUI。&lt;/p&gt;
&lt;h3 id=&#34;4-1-准备前端环境&#34;&gt;&lt;a href=&#34;#4-1-准备前端环境&#34; class=&#34;headerlink&#34; title=&#34;4.1. 准备前端环境&#34;&gt;&lt;/a&gt;4.1. 准备前端环境&lt;/h3&gt;&lt;p&gt;同样地，我们将为 Open WebUI 创建一个独立的环境，以确保其依赖项不会与后端环境发生冲突。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;打开一个新的 Windows Terminal 标签页或窗口&lt;/strong&gt;。不要在运行着 Ollama 服务器的窗口中操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建新的 Conda 环境：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;conda create -n open-webui python=3.11 -y&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;激活此新环境：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;conda activate open-webui&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-2-安装并启动-Web-界面&#34;&gt;&lt;a href=&#34;#4-2-安装并启动-Web-界面&#34; class=&#34;headerlink&#34; title=&#34;4.2. 安装并启动 Web 界面&#34;&gt;&lt;/a&gt;4.2. 安装并启动 Web 界面&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在已激活 &lt;code&gt;open-webui&lt;/code&gt; 环境的 PowerShell 窗口中，使用 &lt;code&gt;pip&lt;/code&gt; 命令安装 Open WebUI：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;pip install open-webui&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装完成后，运行以下命令启动其 Web 服务器：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;open-webui serve&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务器启动后，您会看到日志输出，并提示服务正在 &lt;code&gt;http://localhost:8080&lt;/code&gt; 上运行 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同样，这个终端窗口也必须保持打开状态&lt;/strong&gt;。至此，您应该有两个持续运行的终端窗口：一个用于 Ollama 后端，一个用于 Open WebUI 前端。&lt;/p&gt;
&lt;h3 id=&#34;4-3-首次设置与连接&#34;&gt;&lt;a href=&#34;#4-3-首次设置与连接&#34; class=&#34;headerlink&#34; title=&#34;4.3. 首次设置与连接&#34;&gt;&lt;/a&gt;4.3. 首次设置与连接&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;打开您的网页浏览器（如 Chrome, Edge, Firefox），访问地址：&lt;code&gt;http://localhost:8080&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;首次访问时，Open WebUI 会引导您创建一个管理员账户。请按提示完成注册 。  &lt;/li&gt;
&lt;li&gt;登录后，Open WebUI 通常会自动检测到在本地 &lt;code&gt;http://localhost:11434&lt;/code&gt; 端口上运行的 Ollama 服务并建立连接 。  &lt;/li&gt;
&lt;li&gt;如果连接失败或未自动识别，可以手动进行配置。点击左侧边栏的“设置”图标，进入“连接”选项卡，确认 Ollama API 的 URL 地址已正确设置为 &lt;code&gt;http://localhost:11434&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第五部分：验证与首次使用-对系统进行测试&#34;&gt;&lt;a href=&#34;#第五部分：验证与首次使用-对系统进行测试&#34; class=&#34;headerlink&#34; title=&#34;第五部分：验证与首次使用 - 对系统进行测试&#34;&gt;&lt;/a&gt;第五部分：验证与首次使用 - 对系统进行测试&lt;/h2&gt;&lt;p&gt;现在，万事俱备，是时候验证我们的成果并运行第一个大语言模型了。&lt;/p&gt;
&lt;h3 id=&#34;5-1-运行您的第一个-LLM&#34;&gt;&lt;a href=&#34;#5-1-运行您的第一个-LLM&#34; class=&#34;headerlink&#34; title=&#34;5.1. 运行您的第一个 LLM&#34;&gt;&lt;/a&gt;5.1. 运行您的第一个 LLM&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在 Open WebUI 的主界面，点击顶部的模型选择框。&lt;/li&gt;
&lt;li&gt;在输入框中键入一个模型名称，例如 &lt;code&gt;phi3:medium&lt;/code&gt; 或 &lt;code&gt;llama3:8b&lt;/code&gt;。由于模型尚未在本地安装，WebUI 会提示您下载它。点击确认后，Open WebUI 会向后端发送指令，开始下载模型 。  &lt;/li&gt;
&lt;li&gt;此时，您可以切换到运行着 &lt;code&gt;ollama serve&lt;/code&gt; 的终端窗口，观察模型的下载进度条。&lt;/li&gt;
&lt;li&gt;模型下载完成后，在 WebUI 的聊天框中输入一个简单的问题，例如“天空为什么是蓝色的？”，然后按回车。片刻之后，您应该就能看到由您的 Arc A770 显卡驱动生成的回答。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5-2-确认真正的-GPU-加速&#34;&gt;&lt;a href=&#34;#5-2-确认真正的-GPU-加速&#34; class=&#34;headerlink&#34; title=&#34;5.2. 确认真正的 GPU 加速&#34;&gt;&lt;/a&gt;5.2. 确认真正的 GPU 加速&lt;/h3&gt;&lt;p&gt;如何确定模型确实是由 GPU 而非 CPU 运行的？Windows 任务管理器可以给我们明确的答案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：打开任务管理器&lt;/strong&gt; 按下 &lt;code&gt;Ctrl+Shift+Esc&lt;/code&gt; 组合键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步：导航至“性能”选项卡&lt;/strong&gt; 在任务管理器窗口中，点击“性能”选项卡，然后在左侧边栏中找到并点击您的“Intel Arc(TM) Graphics” GPU。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步：更改引擎视图（关键步骤）&lt;/strong&gt; 任务管理器默认显示的 GPU 利用率图表是“3D”引擎，这主要用于游戏和图形渲染，与我们的计算任务无关。您需要点击图表上方的下拉菜单（默认为“3D”），然后将其更改为 &lt;strong&gt;Compute_0&lt;/strong&gt; 或 &lt;strong&gt;Graphics_1&lt;/strong&gt; 。这是 DirectML 和 SYCL 等计算 API 使用的引擎。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四步：观察利用率&lt;/strong&gt; 回到 Open WebUI，再次向模型提问，并密切关注任务管理器。在模型生成回答的几秒钟内，您应该能看到“Compute_0”或“Graphics_1”图表出现明显的、尖锐的峰值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五步：观察显存（VRAM）使用情况&lt;/strong&gt; 在同一性能页面下，找到“专用 GPU 内存”图表。当您加载并运行模型时，该图表的占用率会显著上升，并维持在一个较高的水平，这表明模型权重已被成功加载到显卡的 VRAM 中 。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算引擎的活动和专用显存的高占用率，是 GPU 加速已成功启用的确凿证据&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;5-3-性能健全性检查：CPU-vs-GPU-对比&#34;&gt;&lt;a href=&#34;#5-3-性能健全性检查：CPU-vs-GPU-对比&#34; class=&#34;headerlink&#34; title=&#34;5.3. 性能健全性检查：CPU vs. GPU 对比&#34;&gt;&lt;/a&gt;5.3. 性能健全性检查：CPU vs. GPU 对比&lt;/h3&gt;&lt;p&gt;为了更直观地感受性能差异，可以进行一个简单的对比测试。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在运行着 &lt;code&gt;ollama serve&lt;/code&gt; 的终端窗口中，按 &lt;code&gt;Ctrl+C&lt;/code&gt; 停止服务器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不设置&lt;/strong&gt; &lt;code&gt;OLLAMA_NUM_GPU&lt;/code&gt; 环境变量，直接运行 &lt;code&gt;.\ollama serve&lt;/code&gt; 启动服务器。这将强制 Ollama 使用 CPU 进行推理。&lt;/li&gt;
&lt;li&gt;回到 Open WebUI，使用相同的模型提出相同的问题。您会发现回答的生成速度（以 tokens/秒计）明显变慢。&lt;/li&gt;
&lt;li&gt;同时观察任务管理器，此时您会看到 CPU 利用率飙升，而 GPU 的计算引擎则处于空闲状态。这个鲜明的对比无可辩驳地证明了我们之前配置的价值 。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第六部分：深度排错与高级主题&#34;&gt;&lt;a href=&#34;#第六部分：深度排错与高级主题&#34; class=&#34;headerlink&#34; title=&#34;第六部分：深度排错与高级主题&#34;&gt;&lt;/a&gt;第六部分：深度排错与高级主题&lt;/h2&gt;&lt;h3 id=&#34;6-1-常见问题与解决方案&#34;&gt;&lt;a href=&#34;#6-1-常见问题与解决方案&#34; class=&#34;headerlink&#34; title=&#34;6.1. 常见问题与解决方案&#34;&gt;&lt;/a&gt;6.1. 常见问题与解决方案&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;症状&lt;/th&gt;
&lt;th&gt;可能原因&lt;/th&gt;
&lt;th&gt;解决方案&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;加载模型时出现 &lt;code&gt;VIDEO_SCHEDULER_INTERNAL_ERROR&lt;/code&gt; 蓝屏死机 (BSOD)&lt;/td&gt;
&lt;td&gt;显卡驱动程序不稳定或存在冲突。&lt;/td&gt;
&lt;td&gt;按照第二部分 2.1 节的指导，执行一次驱动程序的“清洁安装”。如果问题依旧，使用 DDU 工具彻底卸载后重装 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;模型运行缓慢，任务管理器显示 CPU 占用高，GPU 计算引擎无活动。&lt;/td&gt;
&lt;td&gt;启动 &lt;code&gt;ollama serve&lt;/code&gt; 之前，未正确设置 &lt;code&gt;$env:OLLAMA_NUM_GPU=&#34;999&#34;&lt;/code&gt; 环境变量。&lt;/td&gt;
&lt;td&gt;停止服务器 (&lt;code&gt;Ctrl+C&lt;/code&gt;)，在 PowerShell 中正确设置该环境变量后，再重新启动服务器 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PowerShell 中提示 &lt;code&gt;conda activate&lt;/code&gt; 命令未找到。&lt;/td&gt;
&lt;td&gt;Conda 未针对 PowerShell 进行初始化。&lt;/td&gt;
&lt;td&gt;运行 &lt;code&gt;conda init powershell&lt;/code&gt; 命令，然后关闭并重新打开 Windows Terminal 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Open WebUI 界面显示“服务器连接错误”。&lt;/td&gt;
&lt;td&gt;Ollama 后端服务器未运行，或网络配置问题。&lt;/td&gt;
&lt;td&gt;确保运行 &lt;code&gt;ollama serve&lt;/code&gt; 的终端窗口没有关闭且无错误。在 Open WebUI 的“设置 &amp;gt; 连接”中，检查 API URL 是否为 &lt;code&gt;http://localhost:11434&lt;/code&gt; 。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Conda 安装 (&lt;code&gt;pip install&lt;/code&gt; 或 &lt;code&gt;conda create&lt;/code&gt;) 失败或卡在“Solving environment”。&lt;/td&gt;
&lt;td&gt;Conda 频道冲突或网络连接问题。&lt;/td&gt;
&lt;td&gt;确保网络连接稳定。尝试在终端运行 &lt;code&gt;conda clean -a -y&lt;/code&gt; 清理缓存。作为最后的手段，可以尝试 &lt;code&gt;conda config --set channel_priority flexible&lt;/code&gt; 。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;6-2-定位与阅读日志文件&#34;&gt;&lt;a href=&#34;#6-2-定位与阅读日志文件&#34; class=&#34;headerlink&#34; title=&#34;6.2. 定位与阅读日志文件&#34;&gt;&lt;/a&gt;6.2. 定位与阅读日志文件&lt;/h3&gt;&lt;p&gt;当遇到更复杂的问题时，日志文件是您的最佳帮手。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;日志文件位置&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务器日志&lt;/strong&gt;：&lt;code&gt;%LOCALAPPDATA%\Ollama&lt;/code&gt; 目录下的 &lt;code&gt;server.log&lt;/code&gt; 文件包含了最新的服务器运行日志 。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;模型存储位置&lt;/strong&gt;：&lt;code&gt;%HOMEPATH%\.ollama&lt;/code&gt; 目录，这里存放着您下载的所有模型文件 。  &lt;/p&gt;
&lt;p&gt;您可以在文件资源管理器的地址栏直接输入以上路径（包括百分号）来快速访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;启用调试日志&lt;/strong&gt;： 为了获得更详细的排错信息，可以停止 Ollama 服务器，然后使用以下命令重启，这将启用调试模式：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-PowerShell&#34; data-language=&#34;PowerShell&#34;&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;$env:OLLAMA_DEBUG=&#34;1&#34;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-3-高级自定义：更改模型存储位置&#34;&gt;&lt;a href=&#34;#6-3-高级自定义：更改模型存储位置&#34; class=&#34;headerlink&#34; title=&#34;6.3. 高级自定义：更改模型存储位置&#34;&gt;&lt;/a&gt;6.3. 高级自定义：更改模型存储位置&lt;/h3&gt;&lt;p&gt;LLM 模型文件通常体积巨大，很多用户希望将它们存储在非系统盘（如 D 盘）上。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 Windows 的“高级系统设置”（可以在开始菜单中搜索）。&lt;/li&gt;
&lt;li&gt;点击“环境变量”按钮。&lt;/li&gt;
&lt;li&gt;在“用户变量”区域，点击“新建”。&lt;/li&gt;
&lt;li&gt;变量名填写 &lt;code&gt;OLLAMA_MODELS&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;变量值填写您希望存储模型的新路径，例如 &lt;code&gt;D:\OllamaModels&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;逐级点击“确定”保存设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;此更改需要完全退出并重新启动 Ollama 应用程序（包括后台服务）才能生效&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过遵循本指南的详尽步骤，您已成功将您的英特尔 Arc A770 16G 显卡打造成一个强大的本地 AI 推理平台。享受探索大型语言模型世界的乐趣吧！&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/06/21/dai-li-jia-su-you-xi-jiao-cheng/</guid>
            <title>代理加速游戏教程</title>
            <link>https://0xdadream.github.io/2025/06/21/dai-li-jia-su-you-xi-jiao-cheng/</link>
            <category>net</category>
            <pubDate>Sat, 21 Jun 2025 00:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;代理加速游戏教程&#34;&gt;&lt;a href=&#34;#代理加速游戏教程&#34; class=&#34;headerlink&#34; title=&#34;代理加速游戏教程&#34;&gt;&lt;/a&gt;代理加速游戏教程&lt;/h1&gt;&lt;h2 id=&#34;✅-目标&#34;&gt;&lt;a href=&#34;#✅-目标&#34; class=&#34;headerlink&#34; title=&#34;✅ 目标&#34;&gt;&lt;/a&gt;✅ 目标&lt;/h2&gt;&lt;p&gt;在 Windows PC 上，通过 &lt;code&gt;v2rayN&lt;/code&gt; + &lt;code&gt;Proxifier&lt;/code&gt;，让《NIKKE》PC 客户端通过你自己的代理节点（如 VLESS/Vmess/Trojan/Reality）连接港台服务器，加速游戏。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🧰-准备工具&#34;&gt;&lt;a href=&#34;#🧰-准备工具&#34; class=&#34;headerlink&#34; title=&#34;🧰 准备工具&#34;&gt;&lt;/a&gt;🧰 准备工具&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;工具&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;下载地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;✅ v2rayN&lt;/td&gt;
&lt;td&gt;连接你的代理节点并提供本地代理端口&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/2dust/v2rayN/releases&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✅ Proxifier&lt;/td&gt;
&lt;td&gt;把指定程序的流量强制送入代理&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://www.proxifier.com/&#34;&gt;官网&lt;/a&gt; 或吾爱破解&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🪜-配置步骤&#34;&gt;&lt;a href=&#34;#🪜-配置步骤&#34; class=&#34;headerlink&#34; title=&#34;🪜 配置步骤&#34;&gt;&lt;/a&gt;🪜 配置步骤&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&#34;①-安装并配置-v2rayN&#34;&gt;&lt;a href=&#34;#①-安装并配置-v2rayN&#34; class=&#34;headerlink&#34; title=&#34;① 安装并配置 v2rayN&#34;&gt;&lt;/a&gt;① 安装并配置 v2rayN&lt;/h3&gt;&lt;h4 id=&#34;✦-步骤：&#34;&gt;&lt;a href=&#34;#✦-步骤：&#34; class=&#34;headerlink&#34; title=&#34;✦ 步骤：&#34;&gt;&lt;/a&gt;✦ 步骤：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;解压 v2rayN，运行 &lt;code&gt;v2rayN.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加你的代理节点（VLESS / Vmess / Trojan / Reality）&lt;ul&gt;
&lt;li&gt;右键左下角空白 → “添加节点”&lt;/li&gt;
&lt;li&gt;粘贴你从机场获取的节点链接或手动填写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启用节点&lt;ul&gt;
&lt;li&gt;右键该节点 → &lt;code&gt;设为活动服务器&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启用代理服务：&lt;ul&gt;
&lt;li&gt;点工具栏“启用 HTTP 代理”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看本地监听端口：&lt;ul&gt;
&lt;li&gt;默认 SOCKS5 地址：&lt;code&gt;127.0.0.1:10808&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可在设置 → 本地代理设置中修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开启多路复用（mux）提升传输效率，参数设置里面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;✅ 到这里，v2rayN 已在本地开启 SOCKS5 代理服务。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;②-安装并配置-Proxifier（代理-NIKKE-游戏）&#34;&gt;&lt;a href=&#34;#②-安装并配置-Proxifier（代理-NIKKE-游戏）&#34; class=&#34;headerlink&#34; title=&#34;② 安装并配置 Proxifier（代理 NIKKE 游戏）&#34;&gt;&lt;/a&gt;② 安装并配置 Proxifier（代理 NIKKE 游戏）&lt;/h3&gt;&lt;h4 id=&#34;✦-步骤：-1&#34;&gt;&lt;a href=&#34;#✦-步骤：-1&#34; class=&#34;headerlink&#34; title=&#34;✦ 步骤：&#34;&gt;&lt;/a&gt;✦ 步骤：&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;安装 Proxifier（或使用绿色版）&lt;/li&gt;
&lt;li&gt;启动 Proxifier，点击菜单 &lt;code&gt;Profile → Proxy Servers&lt;/code&gt; → 添加代理：&lt;ul&gt;
&lt;li&gt;地址：&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;端口：&lt;code&gt;10808&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;类型：&lt;code&gt;SOCKS5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;Check&lt;/code&gt; 检查是否成功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;点击菜单 &lt;code&gt;Profile → Proxification Rules&lt;/code&gt; → 添加新规则：&lt;ul&gt;
&lt;li&gt;Rule name: &lt;code&gt;NIKKE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Applications: 浏览选择 &lt;code&gt;NIKKE.exe&lt;/code&gt;（PC 客户端主程序）&lt;ul&gt;
&lt;li&gt;默认路径例如：&lt;code&gt;C:\Program Files\NIKKE\NIKKE.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Action: 选择你刚才添加的代理（SOCKS5）&lt;/li&gt;
&lt;li&gt;勾选启用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;✅ 此时，&lt;strong&gt;只有 NIKKE.exe 会走代理，其它软件保持直连&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;③-启动流程&#34;&gt;&lt;a href=&#34;#③-启动流程&#34; class=&#34;headerlink&#34; title=&#34;③ 启动流程&#34;&gt;&lt;/a&gt;③ 启动流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;启动 v2rayN，确保节点连接正常（看到“已连接”或有流量日志）&lt;/li&gt;
&lt;li&gt;启动 Proxifier（确认规则已启用）&lt;/li&gt;
&lt;li&gt;启动 NIKKE 游戏客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;✅-验证代理是否生效&#34;&gt;&lt;a href=&#34;#✅-验证代理是否生效&#34; class=&#34;headerlink&#34; title=&#34;✅ 验证代理是否生效&#34;&gt;&lt;/a&gt;✅ 验证代理是否生效&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;检查内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;v2rayN 日志窗口&lt;/td&gt;
&lt;td&gt;是否显示 NIKKE 的请求记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxifier 日志&lt;/td&gt;
&lt;td&gt;是否显示 &lt;code&gt;NIKKE.exe → 通过代理连接&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;游戏体验&lt;/td&gt;
&lt;td&gt;加速生效，港澳台服连接更快、不卡顿&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;🧱-常见问题&#34;&gt;&lt;a href=&#34;#🧱-常见问题&#34; class=&#34;headerlink&#34; title=&#34;🧱 常见问题&#34;&gt;&lt;/a&gt;🧱 常见问题&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;问题&lt;/th&gt;
&lt;th&gt;原因与解决方案&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;游戏无网络 / 卡加载&lt;/td&gt;
&lt;td&gt;节点不可用或不支持 UDP → 换节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxifier 没生效&lt;/td&gt;
&lt;td&gt;没正确添加 &lt;code&gt;NIKKE.exe&lt;/code&gt; 路径或端口错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2rayN 没有日志输出&lt;/td&gt;
&lt;td&gt;节点未连接成功 / 规则没匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;担心 DNS 泄露&lt;/td&gt;
&lt;td&gt;Proxifier → 设置 → 勾选 “通过代理解析 DNS”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;✅-教程总结&#34;&gt;&lt;a href=&#34;#✅-教程总结&#34; class=&#34;headerlink&#34; title=&#34;✅ 教程总结&#34;&gt;&lt;/a&gt;✅ 教程总结&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;步骤&lt;/th&gt;
&lt;th&gt;工具&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;设置代理节点&lt;/td&gt;
&lt;td&gt;v2rayN&lt;/td&gt;
&lt;td&gt;接入你的港台/国际节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;指定程序走代理&lt;/td&gt;
&lt;td&gt;Proxifier&lt;/td&gt;
&lt;td&gt;精确代理 NIKKE.exe 流量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;启动顺序&lt;/td&gt;
&lt;td&gt;v2rayN → Proxifier → NIKKE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;✅-附加建议（可选）&#34;&gt;&lt;a href=&#34;#✅-附加建议（可选）&#34; class=&#34;headerlink&#34; title=&#34;✅ 附加建议（可选）&#34;&gt;&lt;/a&gt;✅ 附加建议（可选）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;✅ 开启 v2rayN 的“日志记录”便于排错&lt;/li&gt;
&lt;li&gt;✅ 使用 &lt;code&gt;Reality&lt;/code&gt; / &lt;code&gt;VLESS TCP-XTLS&lt;/code&gt; 等新协议节点，延迟更低&lt;/li&gt;
&lt;li&gt;✅ 使用干净无劫持的 DNS（如 &lt;code&gt;8.8.8.8&lt;/code&gt;、&lt;code&gt;1.1.1.1&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a href=&#34;#参考链接&#34; class=&#34;headerlink&#34; title=&#34;参考链接&#34;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.lvruan.com/app/44066&#34;&gt;Proxifier 4.14汉化版_统一代理所有流量出口 | 绿软下载 | 绿色软件联盟&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/06/17/python-bao-guan-li/</guid>
            <title>Python 包管理与导入全方位教程</title>
            <link>https://0xdadream.github.io/2025/06/17/python-bao-guan-li/</link>
            <category>python</category>
            <pubDate>Tue, 17 Jun 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Python-包管理与导入全方位教程&#34;&gt;&lt;a href=&#34;#Python-包管理与导入全方位教程&#34; class=&#34;headerlink&#34; title=&#34;Python 包管理与导入全方位教程&#34;&gt;&lt;/a&gt;Python 包管理与导入全方位教程&lt;/h1&gt;&lt;p&gt;在 Python 开发中，代码的组织、复用和分发都离不开模块（Module）和包（Package）。掌握好它们的导入机制以及如何管理项目依赖，是从新手走向专业的必经之路。&lt;/p&gt;
&lt;p&gt;本教程将涵盖四个核心部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;模块与导入：基础篇&lt;/strong&gt; - 理解 Python 如何导入单个文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;包的创建与内部导入：进阶篇&lt;/strong&gt; - 如何组织你自己的项目代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;pip&lt;/code&gt; 管理外部包：工具篇&lt;/strong&gt; - 如何安装和使用社区的优秀代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟环境：最佳实践&lt;/strong&gt; - 为什么需要以及如何使用虚拟环境来隔离项目。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;Part-1-模块与导入：基础篇&#34;&gt;&lt;a href=&#34;#Part-1-模块与导入：基础篇&#34; class=&#34;headerlink&#34; title=&#34;Part 1: 模块与导入：基础篇&#34;&gt;&lt;/a&gt;Part 1: 模块与导入：基础篇&lt;/h3&gt;&lt;h4 id=&#34;1-1-什么是模块-Module-？&#34;&gt;&lt;a href=&#34;#1-1-什么是模块-Module-？&#34; class=&#34;headerlink&#34; title=&#34;1.1 什么是模块 (Module)？&#34;&gt;&lt;/a&gt;1.1 什么是模块 (Module)？&lt;/h4&gt;&lt;p&gt;在 Python 中，&lt;strong&gt;任何一个 &lt;code&gt;.py&lt;/code&gt; 文件都可以被看作一个模块&lt;/strong&gt;。模块能让你将相关的代码（函数、类、变量）组织在一起，方便在其他地方复用。&lt;/p&gt;
&lt;p&gt;例如，我们创建一个 &lt;code&gt;math_utils.py&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;# math_utils.py
PI = 3.14159

def add(a, b):
    return a + b

class Circle:
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return PI * self.radius * self.radius&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-2-import-语句的基本用法&#34;&gt;&lt;a href=&#34;#1-2-import-语句的基本用法&#34; class=&#34;headerlink&#34; title=&#34;1.2 import 语句的基本用法&#34;&gt;&lt;/a&gt;1.2 &lt;code&gt;import&lt;/code&gt; 语句的基本用法&lt;/h4&gt;&lt;p&gt;&lt;code&gt;import&lt;/code&gt; 语句用于将其他模块的功能引入到当前文件中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式一：导入整个模块&lt;/strong&gt; 这是最常见的方式。你需要通过 &lt;code&gt;模块名.&lt;/code&gt; 的前缀来访问其内容。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;# main.py
import math_utils

print(math_utils.PI)  # 输出: 3.14159

sum_result = math_utils.add(3, 5)
print(sum_result) # 输出: 8

my_circle = math_utils.Circle(10)
print(my_circle.area()) # 输出: 314.159&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;方式二：使用 &lt;code&gt;as&lt;/code&gt; 设置别名&lt;/strong&gt; 如果模块名太长或者容易混淆，可以给它设置一个简短的别名。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;import math_utils as mu

print(mu.PI)
print(mu.add(3, 5))&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;方式三：使用 &lt;code&gt;from...import...&lt;/code&gt; 导入特定内容&lt;/strong&gt; 如果你只需要模块中的某几个部分，可以使用 &lt;code&gt;from&lt;/code&gt; 关键字直接导入它们。这样，在使用时就不需要加模块名前缀了。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;from math_utils import add, Circle

sum_result = add(4, 6) # 直接调用 add，无需前缀
print(sum_result) # 输出: 10

my_circle = Circle(5)
print(my_circle.area()) # 输出: 78.53975&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以为导入的特定内容设置别名：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;from math_utils import add as sum_func

result = sum_func(1, 2)
print(result) # 输出: 3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;方式四：&lt;code&gt;from...import \*&lt;/code&gt;（不推荐）&lt;/strong&gt; 这会导入模块中所有非下划线开头的内容。&lt;strong&gt;强烈不推荐&lt;/strong&gt;在大型项目中使用，因为它会污染当前文件的命名空间，你可能不知道哪些函数和变量被导入了，容易导致名称冲突和代码可读性下降。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;# 谨慎使用！
from math_utils import *

print(PI) # 直接可用
print(add(1, 1)) # 直接可用&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;Part-2-包的创建与内部导入：进阶篇&#34;&gt;&lt;a href=&#34;#Part-2-包的创建与内部导入：进阶篇&#34; class=&#34;headerlink&#34; title=&#34;Part 2: 包的创建与内部导入：进阶篇&#34;&gt;&lt;/a&gt;Part 2: 包的创建与内部导入：进阶篇&lt;/h3&gt;&lt;p&gt;当项目变得复杂，一个文件已经不够用时，我们就需要用“包”（Package）来组织模块。&lt;/p&gt;
&lt;h4 id=&#34;2-1-什么是包-Package-？&#34;&gt;&lt;a href=&#34;#2-1-什么是包-Package-？&#34; class=&#34;headerlink&#34; title=&#34;2.1 什么是包 (Package)？&#34;&gt;&lt;/a&gt;2.1 什么是包 (Package)？&lt;/h4&gt;&lt;p&gt;简单来说，&lt;strong&gt;一个包含 &lt;code&gt;__init__.py&lt;/code&gt; 文件的目录就是一个包&lt;/strong&gt;。这个目录里可以存放多个模块（&lt;code&gt;.py&lt;/code&gt; 文件）或者子包。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt; 文件有几个作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;标记作用&lt;/strong&gt;：它的存在告诉 Python 这个目录应该被当作一个包来对待。在 Python 3.3+ 版本中，即使没有这个文件，也可能被当作“命名空间包”，但为了兼容性和清晰性，&lt;strong&gt;强烈建议总是创建它&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化操作&lt;/strong&gt;：可以在这个文件中编写代码，当包被导入时，这些代码会自动执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化导入&lt;/strong&gt;：可以在 &lt;code&gt;__init__.py&lt;/code&gt; 中使用 &lt;code&gt;from .module import func&lt;/code&gt; 的方式，将包深处的函数或类暴露到包的顶层，方便外部调用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-2-项目结构示例&#34;&gt;&lt;a href=&#34;#2-2-项目结构示例&#34; class=&#34;headerlink&#34; title=&#34;2.2 项目结构示例&#34;&gt;&lt;/a&gt;2.2 项目结构示例&lt;/h4&gt;&lt;p&gt;让我们构建一个清晰的项目结构作为例子：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;my_project/
├── main.py             &lt;span class=&#34;token comment&#34;&gt;# 项目主入口文件&lt;/span&gt;
└── my_app/             &lt;span class=&#34;token comment&#34;&gt;# 我们的主应用包&lt;/span&gt;
    ├── __init__.py
    ├── core/           &lt;span class=&#34;token comment&#34;&gt;# 子包：核心功能&lt;/span&gt;
    │   ├── __init__.py
    │   └── calculator.py
    └── utils/          &lt;span class=&#34;token comment&#34;&gt;# 子包：工具函数&lt;/span&gt;
        ├── __init__.py
        └── formatter.py&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;calculator.py&lt;/code&gt; 内容:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;# my_app/core/calculator.py
def add(a, b):
    return a + b&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;formatter.py&lt;/code&gt; 内容:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;# my_app/utils/formatter.py
def format_as_json(data):
    # 这是一个简化的例子
    return f&#39;{{&#34;result&#34;: {data}}}&#39;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-3-包内导入：绝对导入-vs-相对导入&#34;&gt;&lt;a href=&#34;#2-3-包内导入：绝对导入-vs-相对导入&#34; class=&#34;headerlink&#34; title=&#34;2.3 包内导入：绝对导入 vs 相对导入&#34;&gt;&lt;/a&gt;2.3 包内导入：绝对导入 vs 相对导入&lt;/h4&gt;&lt;p&gt;现在，假设我们想在 &lt;code&gt;calculator.py&lt;/code&gt; 中使用 &lt;code&gt;formatter.py&lt;/code&gt; 的功能（虽然这个例子不太合逻辑，但很适合演示）。这就要用到包内导入。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 绝对导入 (Absolute Import) - 推荐&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;绝对导入总是从项目的&lt;strong&gt;根目录&lt;/strong&gt;（可以被 Python 找到的路径，通常是你运行命令的目录）开始。它路径清晰，不容易出错，是 PEP 8 规范推荐的方式。&lt;/p&gt;
&lt;p&gt;假设我们在 &lt;code&gt;main.py&lt;/code&gt; 中想使用 &lt;code&gt;calculator&lt;/code&gt; 和 &lt;code&gt;formatter&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;# main.py
from my_app.core import calculator
from my_app.utils import formatter

result = calculator.add(10, 20)
print(formatter.format_as_json(result))
# 输出: {&#34;result&#34;: 30}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. 相对导入 (Relative Import)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相对导入使用 &lt;code&gt;.&lt;/code&gt; 或 &lt;code&gt;..&lt;/code&gt; 来表示相对位置，它&lt;strong&gt;只能在包内部使用&lt;/strong&gt;，不能在顶级脚本中使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;：表示当前目录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..&lt;/code&gt;：表示上级目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，假设我们的 &lt;code&gt;calculator.py&lt;/code&gt; 需要调用 &lt;code&gt;formatter.py&lt;/code&gt;。这在不同目录，&lt;code&gt;calculator.py&lt;/code&gt; 需要先回到父级目录 &lt;code&gt;my_app&lt;/code&gt;，再进入 &lt;code&gt;utils&lt;/code&gt; 目录。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Python&#34; data-language=&#34;Python&#34;&gt;&lt;code class=&#34;language-Python&#34;&gt;# my_app/core/calculator.py

# &#39;..&#39; 代表回到 calculator.py 的上级目录 (core -&amp;gt; my_app)
# 然后从 my_app 进入 utils 包，导入 formatter 模块
from ..utils import formatter

def add_and_format(a, b):
    sum_val = a + b
    return formatter.format_as_json(sum_val)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;⚠️ 常见的陷阱：&lt;code&gt;ImportError&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你直接运行一个使用了相对导入的文件，就会触发 &lt;code&gt;ImportError: attempted relative import with no known parent package&lt;/code&gt; 错误。&lt;/p&gt;
&lt;p&gt;例如，直接在终端里运行： &lt;code&gt;python my_app/core/calculator.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这会失败！因为 Python 将 &lt;code&gt;calculator.py&lt;/code&gt; 当作顶级脚本，它不知道自己的“父包”是谁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正确的运行方式&lt;/strong&gt;是从项目的根目录 &lt;code&gt;my_project/&lt;/code&gt; 执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果你要运行 main.py（它使用绝对导入），直接运行即可：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;cd my_project/
python main.py&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你想把某个子模块当作脚本运行（例如测试），请使用 -m 标志：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;cd my_project/
python -m my_app.core.calculator&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;Part-3-使用-pip-管理外部包：工具篇&#34;&gt;&lt;a href=&#34;#Part-3-使用-pip-管理外部包：工具篇&#34; class=&#34;headerlink&#34; title=&#34;Part 3: 使用 pip 管理外部包：工具篇&#34;&gt;&lt;/a&gt;Part 3: 使用 &lt;code&gt;pip&lt;/code&gt; 管理外部包：工具篇&lt;/h3&gt;&lt;p&gt;当项目需要用到第三方库（如 &lt;code&gt;requests&lt;/code&gt; 用于网络请求，&lt;code&gt;pandas&lt;/code&gt; 用于数据分析）时，就需要包管理器。Python 的标准包管理器是 &lt;code&gt;pip&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;3-1-pip-基础命令&#34;&gt;&lt;a href=&#34;#3-1-pip-基础命令&#34; class=&#34;headerlink&#34; title=&#34;3.1 pip 基础命令&#34;&gt;&lt;/a&gt;3.1 &lt;code&gt;pip&lt;/code&gt; 基础命令&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安装包&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install requests&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安装指定版本的包&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install requests==2.28.1
pip install &#34;requests&amp;gt;=2.25.0&#34;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;卸载包&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip uninstall requests&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看已安装的包&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip list&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看某个包的详细信息&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip show requests&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-2-使用-requirements-txt-管理项目依赖&#34;&gt;&lt;a href=&#34;#3-2-使用-requirements-txt-管理项目依赖&#34; class=&#34;headerlink&#34; title=&#34;3.2 使用 requirements.txt 管理项目依赖&#34;&gt;&lt;/a&gt;3.2 使用 &lt;code&gt;requirements.txt&lt;/code&gt; 管理项目依赖&lt;/h4&gt;&lt;p&gt;当你的项目依赖多个包，或者你需要与他人协作时，手动一个一个安装包是不可行的。最佳实践是使用 &lt;code&gt;requirements.txt&lt;/code&gt; 文件来记录所有依赖。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;生成 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/strong&gt;: 当你完成开发，将当前环境中所有包及其版本信息冻结（freeze）到一个文件中：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip freeze &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; requirements.txt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文件内容可能如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;certifi&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2022.9&lt;/span&gt;.24
charset-normalizer&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.1&lt;/span&gt;.1
&lt;span class=&#34;token assign-left variable&#34;&gt;idna&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.4&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.28&lt;/span&gt;.1
&lt;span class=&#34;token assign-left variable&#34;&gt;urllib3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.26&lt;/span&gt;.12&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;从 &lt;code&gt;requirements.txt&lt;/code&gt; 安装&lt;/strong&gt;: 当另一个开发者拿到你的项目后，只需一条命令就可以安装所有必需的依赖：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; requirements.txt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;Part-4-虚拟环境：最佳实践&#34;&gt;&lt;a href=&#34;#Part-4-虚拟环境：最佳实践&#34; class=&#34;headerlink&#34; title=&#34;Part 4: 虚拟环境：最佳实践&#34;&gt;&lt;/a&gt;Part 4: 虚拟环境：最佳实践&lt;/h3&gt;&lt;h4 id=&#34;4-1-为什么需要虚拟环境？&#34;&gt;&lt;a href=&#34;#4-1-为什么需要虚拟环境？&#34; class=&#34;headerlink&#34; title=&#34;4.1 为什么需要虚拟环境？&#34;&gt;&lt;/a&gt;4.1 为什么需要虚拟环境？&lt;/h4&gt;&lt;p&gt;想象一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目 A 需要 &lt;code&gt;requests&lt;/code&gt; 的 1.0 版本。&lt;/li&gt;
&lt;li&gt;项目 B 需要 &lt;code&gt;requests&lt;/code&gt; 的 2.0 版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你将它们都安装在全局的 Python环境中，就会产生版本冲突，导致一个项目无法正常工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟环境（Virtual Environment）&lt;/strong&gt; 就是为了解决这个问题而生的。它能为每个项目创建一个独立的、隔离的 Python 环境。你在其中安装的所有包都只属于这个项目，不会影响到全局环境或其他项目。&lt;/p&gt;
&lt;h4 id=&#34;4-2-使用-venv（Python-内置工具）&#34;&gt;&lt;a href=&#34;#4-2-使用-venv（Python-内置工具）&#34; class=&#34;headerlink&#34; title=&#34;4.2 使用 venv（Python 内置工具）&#34;&gt;&lt;/a&gt;4.2 使用 &lt;code&gt;venv&lt;/code&gt;（Python 内置工具）&lt;/h4&gt;&lt;p&gt;从 Python 3.3 开始，&lt;code&gt;venv&lt;/code&gt; 模块成为创建虚拟环境的标准工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 创建虚拟环境&lt;/strong&gt;: 在你的项目根目录下，运行以下命令。&lt;code&gt;venv&lt;/code&gt; 是你给这个环境起的名字，这是一个通用惯例。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# 在 my_project/ 目录下
python -m venv venv&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行后，会创建一个 &lt;code&gt;venv&lt;/code&gt; 目录，里面包含了独立的 Python 解释器和包安装目录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 激活虚拟环境&lt;/strong&gt;: 在使用前，你必须“激活”它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;.\venv\Scripts\activate&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;macOS / Linux:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;source venv/bin/activate&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;激活后，你会发现你的命令行提示符前面多了 &lt;code&gt;(venv)&lt;/code&gt; 的字样，表示你正处于这个虚拟环境中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 在虚拟环境中工作&lt;/strong&gt;: 激活后，你使用的 &lt;code&gt;python&lt;/code&gt; 和 &lt;code&gt;pip&lt;/code&gt; 命令都将是该环境内的版本。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;# (venv) D:\path\to\my_project&amp;gt;
pip install requests
pip freeze &amp;gt; requirements.txt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在 &lt;code&gt;requests&lt;/code&gt; 被安装到了 &lt;code&gt;my_project/venv/Lib/site-packages&lt;/code&gt; 目录下，而不是全局。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 停用虚拟环境&lt;/strong&gt;: 当你工作完成，想回到全局环境时，只需运行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;deactivate&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-3-结合-gitignore&#34;&gt;&lt;a href=&#34;#4-3-结合-gitignore&#34; class=&#34;headerlink&#34; title=&#34;4.3 结合 .gitignore&#34;&gt;&lt;/a&gt;4.3 结合 &lt;code&gt;.gitignore&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;虚拟环境目录 (&lt;code&gt;venv&lt;/code&gt;) 不应该被提交到 Git 等版本控制系统中。它包含了大量文件，并且可以在任何地方通过 &lt;code&gt;requirements.txt&lt;/code&gt; 重建。&lt;/p&gt;
&lt;p&gt;因此，请务必在你的 &lt;code&gt;.gitignore&lt;/code&gt; 文件中添加 &lt;code&gt;venv/&lt;/code&gt; 这一行。&lt;/p&gt;
&lt;h3 id=&#34;总结：专业的开发流程&#34;&gt;&lt;a href=&#34;#总结：专业的开发流程&#34; class=&#34;headerlink&#34; title=&#34;总结：专业的开发流程&#34;&gt;&lt;/a&gt;总结：专业的开发流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;项目启动&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;创建项目主目录（如 &lt;code&gt;my_project&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd my_project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建虚拟环境：&lt;code&gt;python -m venv venv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;激活环境：&lt;code&gt;source venv/bin/activate&lt;/code&gt; (或 Windows 对应命令)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发过程&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;pip install &amp;lt;package_name&amp;gt;&lt;/code&gt; 安装所需第三方库。&lt;/li&gt;
&lt;li&gt;按照包的结构组织你的代码（创建 &lt;code&gt;my_app&lt;/code&gt;, &lt;code&gt;__init__.py&lt;/code&gt; 等）。&lt;/li&gt;
&lt;li&gt;在包内部优先使用&lt;strong&gt;绝对导入&lt;/strong&gt;，或在必要时使用相对导入。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖管理&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;定期更新 &lt;code&gt;requirements.txt&lt;/code&gt; 文件：&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目交付/协作&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;其他人获取你的代码后，只需重复第一步创建并激活虚拟环境，然后运行 &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; 即可搭建出完全一致的开发环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/05/02/whl-wen-jian-ming-hou-zhui/</guid>
            <title>whl文件名后缀</title>
            <link>https://0xdadream.github.io/2025/05/02/whl-wen-jian-ming-hou-zhui/</link>
            <category>python</category>
            <pubDate>Fri, 02 May 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;whl文件名后缀&#34;&gt;&lt;a href=&#34;#whl文件名后缀&#34; class=&#34;headerlink&#34; title=&#34;whl文件名后缀&#34;&gt;&lt;/a&gt;whl文件名后缀&lt;/h1&gt;&lt;h2 id=&#34;1-Wheel-文件名的基本格式&#34;&gt;&lt;a href=&#34;#1-Wheel-文件名的基本格式&#34; class=&#34;headerlink&#34; title=&#34;1. Wheel 文件名的基本格式&#34;&gt;&lt;/a&gt;1. Wheel 文件名的基本格式&lt;/h2&gt;&lt;p&gt;Wheel 名称遵循 PEP 427 规范，通用格式为：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-ruby&#34; data-language=&#34;ruby&#34;&gt;&lt;code class=&#34;language-ruby&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;distribution&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;version&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;build tag&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;python tag&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;abi tag&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;platform tag&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;whl&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;distribution&lt;/strong&gt;：包名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;version&lt;/strong&gt;：包版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build tag&lt;/strong&gt;（可选）：构建号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python tag&lt;/strong&gt;：支持的 Python 解释器及版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abi tag&lt;/strong&gt;：二进制兼容的 ABI（应用二进制接口）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;platform tag&lt;/strong&gt;：目标操作系统和硬件平台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-markdown&#34; data-language=&#34;markdown&#34;&gt;&lt;code class=&#34;language-markdown&#34;&gt;mypkg-1.2.3-1-cp39-cp39-manylinux2014_x86_64.whl
       │    │   │    │            └──── platform tag
       │    │   │    └──────────────── abi tag
       │    │   └─────────────────────── python tag
       │    └─────────────────────────── build tag
       └─────────────────────────────── distribution-version&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h2 id=&#34;2-build-tag&#34;&gt;&lt;a href=&#34;#2-build-tag&#34; class=&#34;headerlink&#34; title=&#34;2. build tag&#34;&gt;&lt;/a&gt;2. build tag&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;格式：一个整数，有时候也会带字母或其他标识&lt;/li&gt;
&lt;li&gt;用途：同一版本的多次编译时区分，比如针对不同源或依赖变动的二进制重构&lt;/li&gt;
&lt;li&gt;示例：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mypkg-1.0-1-...&lt;/code&gt; 与 &lt;code&gt;mypkg-1.0-2-...&lt;/code&gt; 表示同一版本的第 1 次和第 2 次构建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-python-tag&#34;&gt;&lt;a href=&#34;#3-python-tag&#34; class=&#34;headerlink&#34; title=&#34;3. python tag&#34;&gt;&lt;/a&gt;3. python tag&lt;/h2&gt;&lt;p&gt;指明哪些 Python 解释器及版本可以安装该 Wheel。常见格式及含义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;tag 示例&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;py3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;支持所有 Python 3.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;py36&lt;/code&gt; 、&lt;code&gt;py37&lt;/code&gt;…&lt;/td&gt;
&lt;td&gt;专用于 Python 3.6、3.7 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;py2.py3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同时支持 Python 2.x 和 3.x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cp39&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CPython 3.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cp310&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CPython 3.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pp37&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;PyPy 3.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;jy37&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jython 2.7（标识为 &lt;code&gt;jy27&lt;/code&gt;）等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前缀&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;py&lt;/code&gt;：纯 Python 实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp&lt;/code&gt;：CPython（二进制扩展）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pp&lt;/code&gt;：PyPy&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jy&lt;/code&gt;：Jython&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-abi-tag&#34;&gt;&lt;a href=&#34;#4-abi-tag&#34; class=&#34;headerlink&#34; title=&#34;4. abi tag&#34;&gt;&lt;/a&gt;4. abi tag&lt;/h2&gt;&lt;p&gt;ABI（Application Binary Interface）决定了编译的 C 扩展与解释器的二进制兼容性。常见 ABI tag：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;tag 示例&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;none&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;纯 Python 包，不含 C 扩展&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abi3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用了稳定的“limited API”（PEP 384），跨多个 CPython 版本兼容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cp39&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;针对 CPython 3.9 标准 ABI 编译&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cp39m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CPython 3.9 + pymalloc enabled（&lt;code&gt;m&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cp310d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CPython 3.10 Debug build（&lt;code&gt;d&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;python tag&lt;/code&gt; 与 &lt;code&gt;abi tag&lt;/code&gt; 一致（如 &lt;code&gt;cp39-cp39&lt;/code&gt;），表示该包针对该版本的标准 ABI 编译&lt;/li&gt;
&lt;li&gt;带后缀的如 &lt;code&gt;m&lt;/code&gt;、&lt;code&gt;d&lt;/code&gt;、&lt;code&gt;u&lt;/code&gt; 等表示特定的编译选项&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-platform-tag&#34;&gt;&lt;a href=&#34;#5-platform-tag&#34; class=&#34;headerlink&#34; title=&#34;5. platform tag&#34;&gt;&lt;/a&gt;5. platform tag&lt;/h2&gt;&lt;p&gt;描述该 Wheel 的目标操作系统、系统版本和 CPU 架构。常见平台 tag 及示例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;platform tag 示例&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;manylinux1_x86_64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Linux x86_64，符合 Manylinux1 标准&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;manylinux2014_aarch64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Linux ARM64，符合 Manylinux2014 标准&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;win_amd64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Windows 64 位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;win32&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Windows 32 位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;macosx_10_9_x86_64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;macOS 10.9+ on x86_64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;macosx_11_0_arm64&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;macOS 11+ on Apple Silicon (ARM64)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;平台无关（纯 Python 包）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;manylinux&lt;/strong&gt; 系列：用于在大多数 Linux 发行版上安装二进制扩展&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macosx&lt;/strong&gt;：通常还会带上最低支持的 macOS 版本号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;any&lt;/strong&gt;：完全纯 Python，无平台限制&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-综合示例解析&#34;&gt;&lt;a href=&#34;#6-综合示例解析&#34; class=&#34;headerlink&#34; title=&#34;6. 综合示例解析&#34;&gt;&lt;/a&gt;6. 综合示例解析&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Wheel 名称&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;requests-2.28.1-py3-none-any.whl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;纯 Python 包 &lt;code&gt;requests&lt;/code&gt; v2.28.1，支持所有 Python 3，平台无关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;numpy-1.24.0-cp39-cp39-manylinux2014_x86_64.whl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;numpy&lt;/code&gt; v1.24.0，CPython 3.9 标准 ABI，Linux x86_64 二进制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Pillow-9.3.0-cp310-cp310-win_amd64.whl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Pillow&lt;/code&gt; v9.3.0，CPython 3.10，Windows 64 位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;somepkg-0.1.0-2-cp38-abi3-manylinux1_x86_64.whl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;somepkg&lt;/code&gt; v0.1.0，第 2 次构建，CPython 3.8 编译但使用 abi3，Linux x86_64&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;7-为什么要了解这些后缀&#34;&gt;&lt;a href=&#34;#7-为什么要了解这些后缀&#34; class=&#34;headerlink&#34; title=&#34;7. 为什么要了解这些后缀&#34;&gt;&lt;/a&gt;7. 为什么要了解这些后缀&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;避免安装失败&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install package.whl&lt;/code&gt; 时，若当前环境的 Python 版本、ABI 或平台与 Wheel 不匹配，安装会被跳过或报错。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高下载速度&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;选择预编译好的 &lt;code&gt;.whl&lt;/code&gt;，可免去源码编译时间，尤其是大型 C 扩展库（如 NumPy、SciPy）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨平台兼容&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;理解 &lt;code&gt;manylinux&lt;/code&gt;、&lt;code&gt;macosx&lt;/code&gt;、&lt;code&gt;win&lt;/code&gt; 等标签，有助于在不同系统间无痛部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;8-查找可用的-Wheel&#34;&gt;&lt;a href=&#34;#8-查找可用的-Wheel&#34; class=&#34;headerlink&#34; title=&#34;8. 查找可用的 Wheel&#34;&gt;&lt;/a&gt;8. 查找可用的 Wheel&lt;/h2&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip index versions PACKAGE_NAME&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; PACKAGE_NAME --only-binary&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:all:&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;第一个命令列出所有可用版本及对应的 Wheel&lt;/li&gt;
&lt;li&gt;第二个命令强制只使用二进制 Wheel 安装&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/04/10/linux-an-zhuang-conda-jiao-cheng/</guid>
            <title>Linux安装Conda教程</title>
            <link>https://0xdadream.github.io/2025/04/10/linux-an-zhuang-conda-jiao-cheng/</link>
            <category>conda</category>
            <pubDate>Thu, 10 Apr 2025 13:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Linux安装Conda教程&#34;&gt;&lt;a href=&#34;#Linux安装Conda教程&#34; class=&#34;headerlink&#34; title=&#34;Linux安装Conda教程&#34;&gt;&lt;/a&gt;Linux安装Conda教程&lt;/h1&gt;&lt;h2 id=&#34;1-准备工作&#34;&gt;&lt;a href=&#34;#1-准备工作&#34; class=&#34;headerlink&#34; title=&#34;1. 准备工作&#34;&gt;&lt;/a&gt;1. 准备工作&lt;/h2&gt;&lt;h3 id=&#34;1-1-系统要求&#34;&gt;&lt;a href=&#34;#1-1-系统要求&#34; class=&#34;headerlink&#34; title=&#34;1.1 系统要求&#34;&gt;&lt;/a&gt;1.1 系统要求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;操作系统：大多数 Linux 发行版（如 Ubuntu、Debian、CentOS、Fedora 等）都可使用。&lt;/li&gt;
&lt;li&gt;权限：建议使用普通用户（避免使用 root 权限直接安装）来安装并管理 conda 环境。&lt;/li&gt;
&lt;li&gt;网络连接：需要下载安装脚本，可以使用 &lt;code&gt;wget&lt;/code&gt; 或 &lt;code&gt;curl&lt;/code&gt; 工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-2-安装前依赖（可选）&#34;&gt;&lt;a href=&#34;#1-2-安装前依赖（可选）&#34; class=&#34;headerlink&#34; title=&#34;1.2 安装前依赖（可选）&#34;&gt;&lt;/a&gt;1.2 安装前依赖（可选）&lt;/h3&gt;&lt;p&gt;大多数 Linux 系统都自带 &lt;code&gt;bash&lt;/code&gt; 和基本工具。如果你的系统缺少 wget 或 curl，可以使用包管理器安装，例如：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# Ubuntu / Debian 系统&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; update &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# CentOS / Fedora 系统&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h2 id=&#34;2-下载-Miniconda-安装脚本&#34;&gt;&lt;a href=&#34;#2-下载-Miniconda-安装脚本&#34; class=&#34;headerlink&#34; title=&#34;2. 下载 Miniconda 安装脚本&#34;&gt;&lt;/a&gt;2. 下载 Miniconda 安装脚本&lt;/h2&gt;&lt;p&gt;Miniconda 提供了适用于 Linux 的安装脚本。可以按以下步骤操作：&lt;/p&gt;
&lt;h3 id=&#34;2-1-选择合适的安装程序&#34;&gt;&lt;a href=&#34;#2-1-选择合适的安装程序&#34; class=&#34;headerlink&#34; title=&#34;2.1 选择合适的安装程序&#34;&gt;&lt;/a&gt;2.1 选择合适的安装程序&lt;/h3&gt;&lt;p&gt;对于大多数 64 位系统，下载最新的 Miniconda3 版本。安装脚本文件名为 &lt;code&gt;Miniconda3-latest-Linux-x86_64.sh&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2-2-使用-wget-或-curl-下载&#34;&gt;&lt;a href=&#34;#2-2-使用-wget-或-curl-下载&#34; class=&#34;headerlink&#34; title=&#34;2.2 使用 wget 或 curl 下载&#34;&gt;&lt;/a&gt;2.2 使用 wget 或 curl 下载&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;wget&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;wget&lt;/span&gt; https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或使用 &lt;code&gt;curl&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-O&lt;/span&gt; https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h2 id=&#34;3-验证安装包完整性（可选）&#34;&gt;&lt;a href=&#34;#3-验证安装包完整性（可选）&#34; class=&#34;headerlink&#34; title=&#34;3. 验证安装包完整性（可选）&#34;&gt;&lt;/a&gt;3. 验证安装包完整性（可选）&lt;/h2&gt;&lt;p&gt;为确保下载的文件未被破坏或篡改，可以检查 SHA256 校验和。你需要从 Miniconda 官方页面 查看对应版本的正确 SHA256 值，然后执行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;sha256sum Miniconda3-latest-Linux-x86_64.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比较输出结果和官方提供的校验和。如果一致，则可以继续安装。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-安装-Miniconda&#34;&gt;&lt;a href=&#34;#4-安装-Miniconda&#34; class=&#34;headerlink&#34; title=&#34;4. 安装 Miniconda&#34;&gt;&lt;/a&gt;4. 安装 Miniconda&lt;/h2&gt;&lt;h3 id=&#34;4-1-赋予执行权限&#34;&gt;&lt;a href=&#34;#4-1-赋予执行权限&#34; class=&#34;headerlink&#34; title=&#34;4.1 赋予执行权限&#34;&gt;&lt;/a&gt;4.1 赋予执行权限&lt;/h3&gt;&lt;p&gt;首先为下载的脚本添加执行权限：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; +x Miniconda3-latest-Linux-x86_64.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-2-运行安装脚本&#34;&gt;&lt;a href=&#34;#4-2-运行安装脚本&#34; class=&#34;headerlink&#34; title=&#34;4.2 运行安装脚本&#34;&gt;&lt;/a&gt;4.2 运行安装脚本&lt;/h3&gt;&lt;p&gt;使用 bash 执行安装脚本：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;./Miniconda3-latest-Linux-x86_64.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-3-安装过程中注意事项&#34;&gt;&lt;a href=&#34;#4-3-安装过程中注意事项&#34; class=&#34;headerlink&#34; title=&#34;4.3 安装过程中注意事项&#34;&gt;&lt;/a&gt;4.3 安装过程中注意事项&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;阅读许可协议&lt;/strong&gt;：安装脚本开始时会显示许可协议，需要按下 &lt;code&gt;Enter&lt;/code&gt; 浏览内容，然后输入 &lt;code&gt;yes&lt;/code&gt; 接受许可协议。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择安装路径&lt;/strong&gt;：脚本默认建议安装到用户主目录下的 &lt;code&gt;miniconda3&lt;/code&gt; 目录。你可以按回车键接受默认设置，也可以输入自定义路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化 conda&lt;/strong&gt;：安装过程中会询问是否初始化 conda（即修改 shell 启动文件，如 &lt;code&gt;~/.bashrc&lt;/code&gt;）。推荐选择 “yes”，这样每次登录时都会自动加载 conda 环境配置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装完成后，安装脚本会显示 “installation finished.” 的提示。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-激活-conda-环境&#34;&gt;&lt;a href=&#34;#5-激活-conda-环境&#34; class=&#34;headerlink&#34; title=&#34;5. 激活 conda 环境&#34;&gt;&lt;/a&gt;5. 激活 conda 环境&lt;/h2&gt;&lt;p&gt;如果安装时选择了初始化，则会自动在 &lt;code&gt;~/.bashrc&lt;/code&gt; 中添加必要的配置，通常类似如下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;gt;&amp;gt;&amp;gt; conda initialize &amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# !! Contents within this block are managed by &#39;conda init&#39; !!&lt;/span&gt;
&lt;span class=&#34;token assign-left variable&#34;&gt;__conda_setup&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&#39;/home/your_username/miniconda3/bin/conda&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;shell.bash&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;hook&#39; &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;2&lt;/span&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$?&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
    &lt;span class=&#34;token builtin class-name&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&lt;span class=&#34;token variable&#34;&gt;$__conda_setup&lt;/span&gt;&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/home/your_username/miniconda3/etc/profile.d/conda.sh&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/home/your_username/miniconda3/etc/profile.d/conda.sh&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
        &lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/home/your_username/miniconda3/bin:&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;unset&lt;/span&gt; __conda_setup
&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;&amp;lt;&amp;lt; conda initialize &amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你没有选择自动初始化，可以手动执行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/miniconda3/etc/profile.d/conda.sh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者直接将 conda 的路径添加到你的 PATH 环境变量中：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=~&lt;/span&gt;/miniconda3/bin:&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;建议将上述命令添加到 &lt;code&gt;~/.bashrc&lt;/code&gt; 或其他相应的 shell 配置文件中。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-验证安装&#34;&gt;&lt;a href=&#34;#6-验证安装&#34; class=&#34;headerlink&#34; title=&#34;6. 验证安装&#34;&gt;&lt;/a&gt;6. 验证安装&lt;/h2&gt;&lt;p&gt;打开一个新的终端或在当前终端执行激活命令后，运行以下命令检查 conda 是否安装成功：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda &lt;span class=&#34;token parameter variable&#34;&gt;--version&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正常情况下，会输出类似 &lt;code&gt;conda 4.x.x&lt;/code&gt; 版本信息。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;7-基本使用&#34;&gt;&lt;a href=&#34;#7-基本使用&#34; class=&#34;headerlink&#34; title=&#34;7. 基本使用&#34;&gt;&lt;/a&gt;7. 基本使用&lt;/h2&gt;&lt;h3 id=&#34;7-1-创建虚拟环境&#34;&gt;&lt;a href=&#34;#7-1-创建虚拟环境&#34; class=&#34;headerlink&#34; title=&#34;7.1 创建虚拟环境&#34;&gt;&lt;/a&gt;7.1 创建虚拟环境&lt;/h3&gt;&lt;p&gt;例如，创建一个名为 &lt;code&gt;myenv&lt;/code&gt; 的环境，并安装 Python 3.9：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create &lt;span class=&#34;token parameter variable&#34;&gt;-n&lt;/span&gt; myenv &lt;span class=&#34;token assign-left variable&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.9&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-2-激活虚拟环境&#34;&gt;&lt;a href=&#34;#7-2-激活虚拟环境&#34; class=&#34;headerlink&#34; title=&#34;7.2 激活虚拟环境&#34;&gt;&lt;/a&gt;7.2 激活虚拟环境&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda activate myenv&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;激活后，命令提示符中会显示环境名称。&lt;/p&gt;
&lt;h3 id=&#34;7-3-安装其他包&#34;&gt;&lt;a href=&#34;#7-3-安装其他包&#34; class=&#34;headerlink&#34; title=&#34;7.3 安装其他包&#34;&gt;&lt;/a&gt;7.3 安装其他包&lt;/h3&gt;&lt;p&gt;可以直接使用 conda 安装需要的包，例如安装 numpy：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; numpy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此外，也可以使用 pip 安装不在 conda 仓库里的包，但推荐先查找 conda 仓库，因为 conda 可能已经进行了优化和依赖管理。&lt;/p&gt;
&lt;h3 id=&#34;7-4-更新-conda&#34;&gt;&lt;a href=&#34;#7-4-更新-conda&#34; class=&#34;headerlink&#34; title=&#34;7.4 更新 conda&#34;&gt;&lt;/a&gt;7.4 更新 conda&lt;/h3&gt;&lt;p&gt;建议定期更新 conda 以确保使用最新的功能和安全补丁：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda update conda&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h2 id=&#34;8-常见问题排查&#34;&gt;&lt;a href=&#34;#8-常见问题排查&#34; class=&#34;headerlink&#34; title=&#34;8. 常见问题排查&#34;&gt;&lt;/a&gt;8. 常见问题排查&lt;/h2&gt;&lt;h3 id=&#34;8-1-conda-命令未找到&#34;&gt;&lt;a href=&#34;#8-1-conda-命令未找到&#34; class=&#34;headerlink&#34; title=&#34;8.1 conda 命令未找到&#34;&gt;&lt;/a&gt;8.1 conda 命令未找到&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;请确保你的 &lt;code&gt;~/.bashrc&lt;/code&gt; 文件已正确载入，可以执行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; ~/.bashrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检查是否正确添加了 conda 的安装路径至 PATH 环境变量中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-2-安装或更新失败&#34;&gt;&lt;a href=&#34;#8-2-安装或更新失败&#34; class=&#34;headerlink&#34; title=&#34;8.2 安装或更新失败&#34;&gt;&lt;/a&gt;8.2 安装或更新失败&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;检查网络连接或国内用户是否需要配置代理或使用镜像源（例如清华、阿里等提供的 conda 镜像）。&lt;/li&gt;
&lt;li&gt;参考官方文档（conda 官方文档）获取更多帮助和说明。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;9-参考资料&#34;&gt;&lt;a href=&#34;#9-参考资料&#34; class=&#34;headerlink&#34; title=&#34;9. 参考资料&#34;&gt;&lt;/a&gt;9. 参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/</guid>
            <title>安装WSL子系统教程</title>
            <link>https://0xdadream.github.io/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/</link>
            <category>linux</category>
            <pubDate>Thu, 10 Apr 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;安装WSL子系统教程&#34;&gt;&lt;a href=&#34;#安装WSL子系统教程&#34; class=&#34;headerlink&#34; title=&#34;安装WSL子系统教程&#34;&gt;&lt;/a&gt;安装WSL子系统教程&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&#34;1-前提条件与准备工作&#34;&gt;&lt;a href=&#34;#1-前提条件与准备工作&#34; class=&#34;headerlink&#34; title=&#34;1. 前提条件与准备工作&#34;&gt;&lt;/a&gt;1. 前提条件与准备工作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作系统要求&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;Windows 10：要求版本 2004 及 Build 19041 以上，或&lt;/li&gt;
&lt;li&gt;Windows 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络环境&lt;/strong&gt;：部分地区需要设置代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理员权限&lt;/strong&gt;：安装及部分配置需要以管理员身份运行 PowerShell 或 CMD。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储空间及磁盘规划&lt;/strong&gt;：WSL 会在系统盘或你指定的目录中保存 Linux 文件系统，提前规划好存储位置与空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-WSL-安装方法&#34;&gt;&lt;a href=&#34;#2-WSL-安装方法&#34; class=&#34;headerlink&#34; title=&#34;2. WSL 安装方法&#34;&gt;&lt;/a&gt;2. WSL 安装方法&lt;/h2&gt;&lt;h3 id=&#34;2-1-一键安装（推荐）&#34;&gt;&lt;a href=&#34;#2-1-一键安装（推荐）&#34; class=&#34;headerlink&#34; title=&#34;2.1 一键安装（推荐）&#34;&gt;&lt;/a&gt;2.1 一键安装（推荐）&lt;/h3&gt;&lt;p&gt;适用于 Windows 10 21H2 及之后版本以及 Windows 11。步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;打开 PowerShell（管理员模式）&lt;/strong&gt;：&lt;br&gt; 在开始菜单搜索 “PowerShell”，右键选择“以管理员身份运行”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;执行安装命令&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;install&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此命令会自动启用 WSL 相关组件、虚拟机平台，并默认安装最新的 WSL 版本（通常为 WSL2）和默认 Linux 发行版（一般为 Ubuntu）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;重启电脑&lt;/strong&gt;：安装完成后系统会提示重启以完成配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-2-手动安装&#34;&gt;&lt;a href=&#34;#2-2-手动安装&#34; class=&#34;headerlink&#34; title=&#34;2.2 手动安装&#34;&gt;&lt;/a&gt;2.2 手动安装&lt;/h3&gt;&lt;p&gt;对于需要更多自定义选项的用户，手动安装步骤如下：&lt;/p&gt;
&lt;h4 id=&#34;（1）启用-WSL-和虚拟机平台功能&#34;&gt;&lt;a href=&#34;#（1）启用-WSL-和虚拟机平台功能&#34; class=&#34;headerlink&#34; title=&#34;（1）启用 WSL 和虚拟机平台功能&#34;&gt;&lt;/a&gt;（1）启用 WSL 和虚拟机平台功能&lt;/h4&gt;&lt;p&gt;在管理员模式下打开 PowerShell，依次执行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;dism&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exe &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;online &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;enable-feature&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;featurename:Microsoft-Windows-Subsystem-Linux &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;all &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;norestart
dism&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exe &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;online &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;enable-feature&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;featurename:VirtualMachinePlatform &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;all &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;norestart&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行后重启计算机。&lt;/p&gt;
&lt;h4 id=&#34;（2）安装-WSL2-内核更新包&#34;&gt;&lt;a href=&#34;#（2）安装-WSL2-内核更新包&#34; class=&#34;headerlink&#34; title=&#34;（2）安装 WSL2 内核更新包&#34;&gt;&lt;/a&gt;（2）安装 WSL2 内核更新包&lt;/h4&gt;&lt;p&gt;前往 WSL2 内核更新包下载链接 ，下载并运行安装包，更新 Linux 内核。&lt;/p&gt;
&lt;h4 id=&#34;（3）设置默认-WSL-版本为-WSL2&#34;&gt;&lt;a href=&#34;#（3）设置默认-WSL-版本为-WSL2&#34; class=&#34;headerlink&#34; title=&#34;（3）设置默认 WSL 版本为 WSL2&#34;&gt;&lt;/a&gt;（3）设置默认 WSL 版本为 WSL2&lt;/h4&gt;&lt;p&gt;再次打开 PowerShell（无需管理员模式也可），执行：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set-default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;version 2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;（4）安装-Linux-发行版&#34;&gt;&lt;a href=&#34;#（4）安装-Linux-发行版&#34; class=&#34;headerlink&#34; title=&#34;（4）安装 Linux 发行版&#34;&gt;&lt;/a&gt;（4）安装 Linux 发行版&lt;/h4&gt;&lt;p&gt;有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;通过 Microsoft Store&lt;/strong&gt;：搜索 &lt;code&gt;Ubuntu&lt;/code&gt;、&lt;code&gt;Debian&lt;/code&gt; 等，选择版本（如 Ubuntu 22.04 LTS），点击“获取”安装，推荐这个，然后再执行命令行安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;命令行安装&lt;/strong&gt;：查看支持的在线发行版列表：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;list &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;online&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装指定版本（例如 Ubuntu 20.04）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;install &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;d Ubuntu-20&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;04&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-Linux-发行版安装及首次使用&#34;&gt;&lt;a href=&#34;#3-Linux-发行版安装及首次使用&#34; class=&#34;headerlink&#34; title=&#34;3. Linux 发行版安装及首次使用&#34;&gt;&lt;/a&gt;3. Linux 发行版安装及首次使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;首次启动&lt;/strong&gt;：安装完成后，从“开始菜单”启动对应 Linux 发行版。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建用户&lt;/strong&gt;：系统会提示你为 Linux 系统创建用户名（须为小写）和密码，这样你就可以使用 &lt;code&gt;sudo&lt;/code&gt; 提权操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;更新系统&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; update &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; upgrade&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安装常用软件&lt;/strong&gt;：根据需要安装 &lt;code&gt;git&lt;/code&gt;、&lt;code&gt;vim&lt;/code&gt;、&lt;code&gt;python3&lt;/code&gt; 等：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; python3&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-WSL-版本切换：WSL1-与-WSL2&#34;&gt;&lt;a href=&#34;#4-WSL-版本切换：WSL1-与-WSL2&#34; class=&#34;headerlink&#34; title=&#34;4. WSL 版本切换：WSL1 与 WSL2&#34;&gt;&lt;/a&gt;4. WSL 版本切换：WSL1 与 WSL2&lt;/h2&gt;&lt;p&gt;WSL 中各发行版可以独立设置为 WSL1 或 WSL2。查看所有已安装发行版及其版本：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;l &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;v&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出示例：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-pgsql&#34; data-language=&#34;pgsql&#34;&gt;&lt;code class=&#34;language-pgsql&#34;&gt; NAME            STATE           VERSION
* Ubuntu-22.04    Running         2
  Ubuntu-20.04    Stopped         2
  Debian          Stopped         1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;切换版本&#34;&gt;&lt;a href=&#34;#切换版本&#34; class=&#34;headerlink&#34; title=&#34;切换版本&#34;&gt;&lt;/a&gt;切换版本&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;将发行版切换为 WSL2&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set-version&lt;/span&gt; &amp;lt;发行版名称&amp;gt; 2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set-version&lt;/span&gt; Debian 2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;将发行版切换为 WSL1&lt;/strong&gt;（如有需求）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set-version&lt;/span&gt; &amp;lt;发行版名称&amp;gt; 1&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;设置默认安装版本&lt;/strong&gt;：在安装新发行版时，可以用下面命令设置默认版本：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set-default&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;version 2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;切换版本过程中，转换时间与系统数据量有关，部分较大发行版可能需要几分钟。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-附加功能与进阶用法&#34;&gt;&lt;a href=&#34;#5-附加功能与进阶用法&#34; class=&#34;headerlink&#34; title=&#34;5. 附加功能与进阶用法&#34;&gt;&lt;/a&gt;5. 附加功能与进阶用法&lt;/h2&gt;&lt;h3 id=&#34;5-1-Windows-与-WSL-文件共享&#34;&gt;&lt;a href=&#34;#5-1-Windows-与-WSL-文件共享&#34; class=&#34;headerlink&#34; title=&#34;5.1 Windows 与 WSL 文件共享&#34;&gt;&lt;/a&gt;5.1 Windows 与 WSL 文件共享&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;WSL 文件系统访问&lt;/strong&gt;：&lt;br&gt; 在 WSL 中可通过 &lt;code&gt;/mnt/c/&lt;/code&gt; 等路径访问 Windows 磁盘。例如访问 &lt;code&gt;C:\Users\YourName&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;cd &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;mnt/c/Users/YourName&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;在 Windows 中访问 WSL 文件&lt;/strong&gt;：&lt;br&gt; 可使用 File Explorer 直接访问：在地址栏输入 &lt;code&gt;\\wsl$&lt;/code&gt;，会显示所有已安装的 WSL 发行版及其文件系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;同步代码与项目文件&lt;/strong&gt;：&lt;br&gt; 可以将项目文件放在 Windows 共享目录中，再在 WSL 中编辑、执行，这样两个系统间文件同步简单且快速。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-2-WSL-GUI-应用（WSLg）&#34;&gt;&lt;a href=&#34;#5-2-WSL-GUI-应用（WSLg）&#34; class=&#34;headerlink&#34; title=&#34;5.2 WSL GUI 应用（WSLg）&#34;&gt;&lt;/a&gt;5.2 WSL GUI 应用（WSLg）&lt;/h3&gt;&lt;p&gt;在最新版本的 Windows 10 和 Windows 11 上，WSL 支持 Linux 图形界面应用（WSLg）。配置方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;确保 WSL 更新至最新版本&lt;/strong&gt;：执行&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;update&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;启动 GUI 应用&lt;/strong&gt;（如 Firefox）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; firefox
firefox &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;WSLg 会自动启动并显示 Linux GUI 应用，无需额外配置 X 服务器。&lt;/p&gt;
&lt;h3 id=&#34;5-3-代理设置&#34;&gt;&lt;a href=&#34;#5-3-代理设置&#34; class=&#34;headerlink&#34; title=&#34;5.3 代理设置&#34;&gt;&lt;/a&gt;5.3 代理设置&lt;/h3&gt;&lt;p&gt;如果你处于网络环境受限或想加快下载速度，可以设置代理。&lt;/p&gt;
&lt;h4 id=&#34;（1）设置-Windows-系统代理&#34;&gt;&lt;a href=&#34;#（1）设置-Windows-系统代理&#34; class=&#34;headerlink&#34; title=&#34;（1）设置 Windows 系统代理&#34;&gt;&lt;/a&gt;（1）设置 Windows 系统代理&lt;/h4&gt;&lt;p&gt;如果使用科学上网工具（如 Clash、V2Ray、VPN），确保系统代理已启用。可在 Windows 设置 → 网络和 Internet → 代理中配置，也可以通过命令设置环境变量：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;setx http_proxy http://127.0.0.1:7890 /m
setx https_proxy http://127.0.0.1:7890 /m&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;（2）在-WSL-中设置代理&#34;&gt;&lt;a href=&#34;#（2）在-WSL-中设置代理&#34; class=&#34;headerlink&#34; title=&#34;（2）在 WSL 中设置代理&#34;&gt;&lt;/a&gt;（2）在 WSL 中设置代理&lt;/h4&gt;&lt;p&gt;在 WSL 中使用环境变量：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;http_proxy&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://127.0.0.1:7890&#34;&lt;/span&gt;
&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;https_proxy&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://127.0.0.1:7890&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若需要全局生效，在 &lt;code&gt;~/.bashrc&lt;/code&gt; 或 &lt;code&gt;~/.zshrc&lt;/code&gt; 文件末尾加入以上配置，并执行 &lt;code&gt;source ~/.bashrc&lt;/code&gt; 使其生效。&lt;/p&gt;
&lt;h4 id=&#34;（3）apt-专用代理配置&#34;&gt;&lt;a href=&#34;#（3）apt-专用代理配置&#34; class=&#34;headerlink&#34; title=&#34;（3）apt 专用代理配置&#34;&gt;&lt;/a&gt;（3）apt 专用代理配置&lt;/h4&gt;&lt;p&gt;创建或编辑 apt 配置文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;nano&lt;/span&gt; /etc/apt/apt.conf.d/proxy.conf&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cpp&#34; data-language=&#34;cpp&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;Acquire&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;http&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;Proxy &lt;span class=&#34;token string&#34;&gt;&#34;http://127.0.0.1:7890&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
Acquire&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;https&lt;span class=&#34;token double-colon punctuation&#34;&gt;::&lt;/span&gt;Proxy &lt;span class=&#34;token string&#34;&gt;&#34;http://127.0.0.1:7890&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存后，&lt;code&gt;sudo apt update&lt;/code&gt; 将走代理。&lt;/p&gt;
&lt;h3 id=&#34;5-4-多实例安装（同一版本多个副本）&#34;&gt;&lt;a href=&#34;#5-4-多实例安装（同一版本多个副本）&#34; class=&#34;headerlink&#34; title=&#34;5.4 多实例安装（同一版本多个副本）&#34;&gt;&lt;/a&gt;5.4 多实例安装（同一版本多个副本）&lt;/h3&gt;&lt;p&gt;WSL 允许你导入同一 Linux 发行版的多个副本，便于隔离不同任务。操作步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;导出已有实例&lt;/strong&gt;&lt;br&gt; 假设已安装 &lt;code&gt;Ubuntu-20.04&lt;/code&gt;，用以下命令导出为 &lt;code&gt;.tar&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;export Ubuntu-20&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;04 D:\wsl-backups\ubuntu-20&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;04&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tar&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;导入为新实例&lt;/strong&gt;&lt;br&gt; 用新名称（例如 &lt;code&gt;Ubuntu-Dev&lt;/code&gt;）创建副本：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;import Ubuntu-Dev D:\WSL\Ubuntu-Dev D:\wsl-backups\ubuntu-20&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;04&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tar &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;version 2&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;启动新实例&lt;/strong&gt;&lt;br&gt; 使用下面命令启动新导入的实例：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;d Ubuntu-Dev&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样你就可以在同一台机器上同时运行多个独立的 Linux 环境。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-常用命令与管理技巧&#34;&gt;&lt;a href=&#34;#6-常用命令与管理技巧&#34; class=&#34;headerlink&#34; title=&#34;6. 常用命令与管理技巧&#34;&gt;&lt;/a&gt;6. 常用命令与管理技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看已安装发行版及版本&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;l &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;v&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;启动指定发行版&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;d &amp;lt;发行版名称&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;设置默认发行版（直接运行 wsl 时启动的系统）&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;setdefault &amp;lt;发行版名称&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;切换 WSL 版本&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set-version&lt;/span&gt; &amp;lt;发行版名称&amp;gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;1&lt;span class=&#34;token punctuation&#34;&gt;|&lt;/span&gt;2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;更新 WSL 内核&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;update&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;关闭所有运行中的 WSL 实例&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;shutdown&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;卸载某个发行版&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;wsl &lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;unregister &amp;lt;发行版名称&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/</guid>
            <title>文件链接全教程</title>
            <link>https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/</link>
            <category>命令</category>
            <pubDate>Wed, 12 Mar 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;文件链接全教程&#34;&gt;&lt;a href=&#34;#文件链接全教程&#34; class=&#34;headerlink&#34; title=&#34;文件链接全教程&#34;&gt;&lt;/a&gt;文件链接全教程&lt;/h1&gt;&lt;h2 id=&#34;Windows&#34;&gt;&lt;a href=&#34;#Windows&#34; class=&#34;headerlink&#34; title=&#34;Windows&#34;&gt;&lt;/a&gt;Windows&lt;/h2&gt;&lt;h3 id=&#34;1-链接基础概念&#34;&gt;&lt;a href=&#34;#1-链接基础概念&#34; class=&#34;headerlink&#34; title=&#34;1. 链接基础概念&#34;&gt;&lt;/a&gt;1. 链接基础概念&lt;/h3&gt;&lt;p&gt;在 Windows 中，“链接”实际上有几种形式，主要包括以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符号链接（Symbolic Link，软链接）&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;概念：&lt;/strong&gt; 符号链接是一个特殊文件，其中保存了目标文件或目录的路径。它类似于 Linux 中的软链接，并且看起来和普通文件或文件夹没有区别。&lt;/li&gt;
&lt;li&gt;特点：&lt;ul&gt;
&lt;li&gt;可用于文件和目录&lt;/li&gt;
&lt;li&gt;可以跨分区甚至跨网络路径（UNC）&lt;/li&gt;
&lt;li&gt;如果目标被删除或移动，符号链接会失效&lt;/li&gt;
&lt;li&gt;从 Windows Vista 开始支持，最新 Windows（如 Windows 10/11）中在开发人员模式下可不需要管理员权限创建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬链接（Hard Link）&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;概念：&lt;/strong&gt; 硬链接是指向同一数据实体（数据块或 NTFS 中的文件记录）的另一个目录项。每个硬链接都与目标文件共享同一份数据。&lt;/li&gt;
&lt;li&gt;特点：&lt;ul&gt;
&lt;li&gt;仅适用于文件，不能用于目录&lt;/li&gt;
&lt;li&gt;必须在同一 NTFS 卷内（不能跨分区）&lt;/li&gt;
&lt;li&gt;删除其中一个链接不会影响其它链接或数据本身，只有当所有硬链接都删除后数据才会释放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目录联接（Junction Point）&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;概念：&lt;/strong&gt; 目录联接也称为“联接”，用于将一个目录指向另一个目录。在早期版本中常用来兼容旧版 Windows。&lt;/li&gt;
&lt;li&gt;特点：&lt;ul&gt;
&lt;li&gt;只适用于目录&lt;/li&gt;
&lt;li&gt;创建时会自动转换为绝对路径&lt;/li&gt;
&lt;li&gt;适用于同一台计算机，支持跨盘符（但不支持网络路径）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-创建链接的方法&#34;&gt;&lt;a href=&#34;#2-创建链接的方法&#34; class=&#34;headerlink&#34; title=&#34;2. 创建链接的方法&#34;&gt;&lt;/a&gt;2. 创建链接的方法&lt;/h3&gt;&lt;p&gt;在 Windows 中创建链接主要有两种方式：通过 CMD 命令行（使用 &lt;code&gt;mklink&lt;/code&gt; 命令）和通过 PowerShell（使用 &lt;code&gt;New-Item&lt;/code&gt; 命令）。&lt;/p&gt;
&lt;h4 id=&#34;2-1-使用-CMD-命令创建链接&#34;&gt;&lt;a href=&#34;#2-1-使用-CMD-命令创建链接&#34; class=&#34;headerlink&#34; title=&#34;2.1 使用 CMD 命令创建链接&#34;&gt;&lt;/a&gt;2.1 使用 CMD 命令创建链接&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;命令语法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmd&#34; data-language=&#34;cmd&#34;&gt;&lt;code class=&#34;language-cmd&#34;&gt;mklink [[/D] | [/H] | [/J]] Link Target&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;默认（无参数）&lt;/strong&gt;：创建文件的符号链接&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/D&lt;/strong&gt;：创建目录的符号链接&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/H&lt;/strong&gt;：创建硬链接（仅用于文件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/J&lt;/strong&gt;：创建目录联接（Junction，适用于目录）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建文件的符号链接&lt;/strong&gt;&lt;br&gt; 假设有一个文件 &lt;code&gt;C:\Data\original.txt&lt;/code&gt;，我们在同目录下创建一个名为 &lt;code&gt;link.txt&lt;/code&gt; 的符号链接：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmd&#34; data-language=&#34;cmd&#34;&gt;&lt;code class=&#34;language-cmd&#34;&gt;mklink C:\Data\link.txt C:\Data\original.txt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时，&lt;code&gt;link.txt&lt;/code&gt; 实际上保存了 &lt;code&gt;original.txt&lt;/code&gt; 的路径，当你打开 &lt;code&gt;link.txt&lt;/code&gt; 时，系统会自动访问 &lt;code&gt;original.txt&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建目录的符号链接&lt;/strong&gt;&lt;br&gt; 假设有一个目录 &lt;code&gt;C:\Data\SourceFolder&lt;/code&gt;，希望在 &lt;code&gt;C:\Data&lt;/code&gt; 下创建一个符号链接目录 &lt;code&gt;LinkFolder&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmd&#34; data-language=&#34;cmd&#34;&gt;&lt;code class=&#34;language-cmd&#34;&gt;mklink /D C:\Data\LinkFolder C:\Data\SourceFolder&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，在资源管理器中打开 &lt;code&gt;LinkFolder&lt;/code&gt; 就等同于打开 &lt;code&gt;SourceFolder&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建文件的硬链接&lt;/strong&gt;&lt;br&gt; 依然以文件 &lt;code&gt;C:\Data\original.txt&lt;/code&gt; 为例，创建一个硬链接 &lt;code&gt;hardlink.txt&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmd&#34; data-language=&#34;cmd&#34;&gt;&lt;code class=&#34;language-cmd&#34;&gt;mklink /H C:\Data\hardlink.txt C:\Data\original.txt&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;硬链接与原文件共享同一数据块，因此修改任一文件都会同步改变内容，但请注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬链接只能用于文件&lt;/li&gt;
&lt;li&gt;必须在同一卷内&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建目录联接（Junction）&lt;/strong&gt;&lt;br&gt; 使用 /J 参数来创建目录联接，适用于目录，但和符号链接不同的是，Junction 通常保存绝对路径：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmd&#34; data-language=&#34;cmd&#34;&gt;&lt;code class=&#34;language-cmd&#34;&gt;mklink /J C:\Data\JunctionFolder C:\Data\SourceFolder&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 Junction 时，删除链接不会删除目标目录中的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;注意：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建符号链接和某些操作可能需要以&lt;strong&gt;管理员身份&lt;/strong&gt;运行 CMD。&lt;/li&gt;
&lt;li&gt;Windows 10 及以后版本如果开启“开发人员模式”，可以允许普通用户创建符号链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-2-使用-PowerShell-创建链接&#34;&gt;&lt;a href=&#34;#2-2-使用-PowerShell-创建链接&#34; class=&#34;headerlink&#34; title=&#34;2.2 使用 PowerShell 创建链接&#34;&gt;&lt;/a&gt;2.2 使用 PowerShell 创建链接&lt;/h4&gt;&lt;p&gt;PowerShell 提供了更现代的 &lt;code&gt;New-Item&lt;/code&gt; 命令来创建不同类型的链接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语法及示例：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建文件或目录的符号链接：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;&lt;span class=&#34;token function&#34;&gt;New-Item&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ItemType SymbolicLink &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Path &lt;span class=&#34;token string&#34;&gt;&#34;C:\Data\Link.txt&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Target &lt;span class=&#34;token string&#34;&gt;&#34;C:\Data\original.txt&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者创建目录符号链接：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;&lt;span class=&#34;token function&#34;&gt;New-Item&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ItemType SymbolicLink &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Path &lt;span class=&#34;token string&#34;&gt;&#34;C:\Data\LinkFolder&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Target &lt;span class=&#34;token string&#34;&gt;&#34;C:\Data\SourceFolder&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PowerShell 中的 &lt;code&gt;SymbolicLink&lt;/code&gt; 同样创建的是软链接，和 CMD 中 &lt;code&gt;mklink&lt;/code&gt; 默认行为一致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建文件的硬链接：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;&lt;span class=&#34;token function&#34;&gt;New-Item&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ItemType HardLink &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Path &lt;span class=&#34;token string&#34;&gt;&#34;C:\Data\hardlink.txt&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Target &lt;span class=&#34;token string&#34;&gt;&#34;C:\Data\original.txt&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这会为 &lt;code&gt;original.txt&lt;/code&gt; 创建一个硬链接，注意硬链接只能用于文件，且必须在同一卷内。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建目录联接（Junction）：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-powershell&#34; data-language=&#34;powershell&#34;&gt;&lt;code class=&#34;language-powershell&#34;&gt;&lt;span class=&#34;token function&#34;&gt;New-Item&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;ItemType Junction &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Path &lt;span class=&#34;token string&#34;&gt;&#34;C:\Data\JunctionFolder&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Target &lt;span class=&#34;token string&#34;&gt;&#34;C:\Data\SourceFolder&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此命令会创建一个指向目录的联接，与符号链接在某些场景下效果类似，但内部处理略有差异。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;提示：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PowerShell 命令执行时也可能需要管理员权限，具体取决于目标路径所在的位置（例如系统文件夹或 Program Files）。&lt;/li&gt;
&lt;li&gt;在使用相对路径创建符号链接时，系统会将其转换为绝对路径存储在 NTFS 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-使用场景与注意事项&#34;&gt;&lt;a href=&#34;#3-使用场景与注意事项&#34; class=&#34;headerlink&#34; title=&#34;3. 使用场景与注意事项&#34;&gt;&lt;/a&gt;3. 使用场景与注意事项&lt;/h3&gt;&lt;h4 id=&#34;3-1-常见使用场景&#34;&gt;&lt;a href=&#34;#3-1-常见使用场景&#34; class=&#34;headerlink&#34; title=&#34;3.1 常见使用场景&#34;&gt;&lt;/a&gt;3.1 常见使用场景&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据备份和增量备份&lt;/strong&gt;&lt;br&gt; 利用硬链接可以在不占用额外磁盘空间的情况下创建多个访问入口。例如，备份软件（如 Windows 版的“时间机器”）就会使用硬链接来实现增量备份。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;移动或重定向系统目录&lt;/strong&gt;&lt;br&gt; 为了节省系统盘空间或实现重装系统不丢失用户数据，可以将如 &lt;code&gt;C:\Users&lt;/code&gt; 目录复制到其他分区，然后使用 Junction 将原位置重定向到新位置：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-cmd&#34; data-language=&#34;cmd&#34;&gt;&lt;code class=&#34;language-cmd&#34;&gt;robocopy &#34;C:\Users&#34; &#34;D:\Users&#34; /E /COPYALL /XJ
rmdir &#34;C:\Users&#34; /S /Q
mklink /J &#34;C:\Users&#34; &#34;D:\Users&#34;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;开发环境下共享资源&lt;/strong&gt;&lt;br&gt; 当多个项目需要使用同一份库或模型文件时，可以通过符号链接或硬链接共享文件，避免重复存储。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-2-注意事项&#34;&gt;&lt;a href=&#34;#3-2-注意事项&#34; class=&#34;headerlink&#34; title=&#34;3.2 注意事项&#34;&gt;&lt;/a&gt;3.2 注意事项&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;权限问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Windows 中，创建符号链接通常需要管理员权限；不过在 Windows 10 开发人员模式下可允许普通用户创建符号链接。&lt;/li&gt;
&lt;li&gt;硬链接不需要额外的权限，但目标文件必须在同一 NTFS 卷内。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;目标失效风险&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符号链接依赖于目标路径。如果目标移动或删除，符号链接会成为“悬挂链接”（无效链接）。&lt;/li&gt;
&lt;li&gt;硬链接与目标数据直接关联，即使原始文件名被删除，只要至少还有一个硬链接存在，数据依然可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;跨分区限制&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;硬链接只能在同一卷内使用，而符号链接和 Junction 则可以跨卷（但符号链接可以支持网络路径，而 Junction 则不行）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;命令使用环境&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;mklink&lt;/code&gt; 命令时建议打开&lt;strong&gt;管理员命令提示符&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用 PowerShell 时，若涉及系统目录或受保护区域，建议以管理员身份运行 PowerShell。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看链接和删除&lt;/p&gt;
&lt;p&gt;直接在资源管理器操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linux&#34;&gt;&lt;a href=&#34;#linux&#34; class=&#34;headerlink&#34; title=&#34;linux&#34;&gt;&lt;/a&gt;linux&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://0xdadream.github.io/2025/02/20/arc-zai-comfyui-bao-cuo/&#34;&gt;Arc在comfyui报错 | 逐梦&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/</guid>
            <title>pycharm显示显示表格</title>
            <link>https://0xdadream.github.io/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/</link>
            <category>python</category>
            <pubDate>Fri, 21 Feb 2025 15:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;pycharm显示显示表格&#34;&gt;&lt;a href=&#34;#pycharm显示显示表格&#34; class=&#34;headerlink&#34; title=&#34;pycharm显示显示表格&#34;&gt;&lt;/a&gt;pycharm显示显示表格&lt;/h1&gt;&lt;p&gt;当以pycharm打开&lt;code&gt;.csv&lt;/code&gt;文件时，可能不能显示表格，在文件中右键，选择关联文件，找到csv关联即可&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/02/19/conda-huan-yuan/</guid>
            <title>conda换源</title>
            <link>https://0xdadream.github.io/2025/02/19/conda-huan-yuan/</link>
            <category>conda</category>
            <category>tools</category>
            <pubDate>Wed, 19 Feb 2025 16:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;conda换源&#34;&gt;&lt;a href=&#34;#conda换源&#34; class=&#34;headerlink&#34; title=&#34;conda换源&#34;&gt;&lt;/a&gt;conda换源&lt;/h1&gt;&lt;p&gt;由于网络连接原因，使用 Anaconda 或 Miniconda 时，默认的官方源速度较慢。为提高下载速度，您可以将 Conda 的源更换为国内的镜像源。以下是详细的操作步骤：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 生成 &lt;code&gt;.condarc&lt;/code&gt; 配置文件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Windows 系统中，用户目录下可能没有 &lt;code&gt;.condarc&lt;/code&gt; 文件。您可以通过以下命令生成该文件：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda config &lt;span class=&#34;token parameter variable&#34;&gt;--set&lt;/span&gt; show_channel_urls &lt;span class=&#34;token function&#34;&gt;yes&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行后，&lt;code&gt;.condarc&lt;/code&gt; 文件将被创建在用户主目录下。在 Windows 上，用户主目录通常位于 &lt;code&gt;C:\Users\用户名\&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 编辑 &lt;code&gt;.condarc&lt;/code&gt; 文件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用文本编辑器打开 &lt;code&gt;.condarc&lt;/code&gt; 文件，将其内容替换为以下内容：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-yaml&#34; data-language=&#34;yaml&#34;&gt;&lt;code class=&#34;language-yaml&#34;&gt;&lt;span class=&#34;token key atrule&#34;&gt;channels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; defaults
&lt;span class=&#34;token key atrule&#34;&gt;show_channel_urls&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;
&lt;span class=&#34;token key atrule&#34;&gt;default_channels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/pkgs/main
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/pkgs/r
  &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/pkgs/msys2
&lt;span class=&#34;token key atrule&#34;&gt;custom_channels&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token key atrule&#34;&gt;conda-forge&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/cloud
  &lt;span class=&#34;token key atrule&#34;&gt;msys2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/cloud
  &lt;span class=&#34;token key atrule&#34;&gt;bioconda&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/cloud
  &lt;span class=&#34;token key atrule&#34;&gt;menpo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/cloud
  &lt;span class=&#34;token key atrule&#34;&gt;pytorch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/cloud
  &lt;span class=&#34;token key atrule&#34;&gt;pytorch-lts&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/cloud
  &lt;span class=&#34;token key atrule&#34;&gt;simpleitk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//mirrors.bfsu.edu.cn/anaconda/cloud&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述配置将 Conda 的源更换为北京外国语大学的镜像站。您也可以选择其他国内镜像源，如清华大学、上海交通大学等。具体的镜像源配置可以参考清华大学开源软件镜像站的官方文档。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/?utm_source=chatgpt.com&#34;&gt;mirrors.tuna.tsinghua.edu.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 清理索引缓存：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;更换源后，建议清理 Conda 的索引缓存，以确保使用新的镜像源：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda clean &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4. 测试新的源：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建一个新的 Conda 环境，并安装一个包，以验证新的源是否生效：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create &lt;span class=&#34;token parameter variable&#34;&gt;-n&lt;/span&gt; test_env numpy&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果安装过程顺利且速度较快，则说明源更换成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;备份原始配置：&lt;/strong&gt; 在更改 &lt;code&gt;.condarc&lt;/code&gt; 文件之前，建议备份原始配置，以防需要恢复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恢复默认源：&lt;/strong&gt; 如果需要恢复默认源，可以删除 &lt;code&gt;.condarc&lt;/code&gt; 文件，或者执行以下命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda config --remove-key channels&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过以上步骤，您可以成功将 Conda 的源更换为国内镜像源，从而提高包的下载速度和稳定性。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/</guid>
            <title>ArcA770使用comfyui教程</title>
            <link>https://0xdadream.github.io/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/</link>
            <category>intel</category>
            <pubDate>Tue, 18 Feb 2025 18:11:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ArcA770使用comfyui教程&#34;&gt;&lt;a href=&#34;#ArcA770使用comfyui教程&#34; class=&#34;headerlink&#34; title=&#34;ArcA770使用comfyui教程&#34;&gt;&lt;/a&gt;ArcA770使用comfyui教程&lt;/h1&gt;&lt;h3 id=&#34;1-前置配置&#34;&gt;&lt;a href=&#34;#1-前置配置&#34; class=&#34;headerlink&#34; title=&#34;1. 前置配置&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 前置配置&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;conda&lt;/li&gt;
&lt;li&gt;更新驱动&lt;/li&gt;
&lt;li&gt;安装&lt;strong&gt;Visual Studio Build Tools&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;安装oneAPI&lt;/li&gt;
&lt;li&gt;安装IPEX&lt;/li&gt;
&lt;li&gt;具体看链接&lt;a href=&#34;https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/&#34;&gt;Intel显卡运行AI配置教程 | 逐梦&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-配置Python&#34;&gt;&lt;a href=&#34;#2-配置Python&#34; class=&#34;headerlink&#34; title=&#34;2. 配置Python&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 配置Python&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Python环境&lt;/strong&gt;：&lt;br&gt;建议使用&lt;strong&gt;Python 3.10或更高版本&lt;/strong&gt;，并通过虚拟环境（如&lt;code&gt;venv&lt;/code&gt;或&lt;code&gt;conda&lt;/code&gt;）隔离依赖。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create &lt;span class=&#34;token parameter variable&#34;&gt;-n&lt;/span&gt; comfyui &lt;span class=&#34;token assign-left variable&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.11&lt;/span&gt;  这里comfyui就是安装IPEX的环境
conda activate comfyui&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-安装ComfyUI及依赖库&#34;&gt;&lt;a href=&#34;#3-安装ComfyUI及依赖库&#34; class=&#34;headerlink&#34; title=&#34;3. 安装ComfyUI及依赖库&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 安装ComfyUI及依赖库&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;克隆ComfyUI仓库&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; xxxx &lt;span class=&#34;token comment&#34;&gt;#工作目录&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone https://github.com/comfyanonymous/ComfyUI.git
&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; ComfyUI
pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt; requirements.txt &lt;span class=&#34;token comment&#34;&gt;# 安装依赖&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-验证显卡识别与性能调优&#34;&gt;&lt;a href=&#34;#4-验证显卡识别与性能调优&#34; class=&#34;headerlink&#34; title=&#34;4. 验证显卡识别与性能调优&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. 验证显卡识别与性能调优&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;显存与算力优化&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;启用Intel的&lt;strong&gt;XMX引擎&lt;/strong&gt;（AI加速单元）和&lt;strong&gt;XeSS技术&lt;/strong&gt;（超分辨率），可通过设置环境变量优化显存分配410。&lt;/li&gt;
&lt;li&gt;调整ComfyUI配置文件，指定使用&lt;code&gt;XPU&lt;/code&gt;（Intel GPU）而非默认的CUDA。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;5-启动comfyui&#34;&gt;&lt;a href=&#34;#5-启动comfyui&#34; class=&#34;headerlink&#34; title=&#34;5.启动comfyui&#34;&gt;&lt;/a&gt;&lt;strong&gt;5.启动comfyui&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;接着上面的目录执行&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py --use-pytorch-cross-attention &lt;span class=&#34;token parameter variable&#34;&gt;--highvram&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;快捷脚本&#34;&gt;&lt;a href=&#34;#快捷脚本&#34; class=&#34;headerlink&#34; title=&#34;快捷脚本&#34;&gt;&lt;/a&gt;快捷脚本&lt;/h4&gt;&lt;h5 id=&#34;cmd&#34;&gt;&lt;a href=&#34;#cmd&#34; class=&#34;headerlink&#34; title=&#34;cmd&#34;&gt;&lt;/a&gt;cmd&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-bat&#34; data-language=&#34;bat&#34;&gt;&lt;code class=&#34;language-bat&#34;&gt;call &#34;E:\conda\Scripts\activate.bat&#34; deepl  
call &#34;C:\Program Files (x86)\Intel\oneAPI\setvars.bat&#34;
python main.py --use-pytorch-cross-attention --highvram&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存为&lt;code&gt;.bat&lt;/code&gt;文件&lt;/p&gt;
&lt;p&gt;powershell&lt;/p&gt;
&lt;p&gt;没搞出来&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/</guid>
            <title>Intel显卡运行AI配置教程</title>
            <link>https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/</link>
            <category>intel</category>
            <pubDate>Tue, 18 Feb 2025 16:11:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Intel显卡运行AI配置教程&#34;&gt;&lt;a href=&#34;#Intel显卡运行AI配置教程&#34; class=&#34;headerlink&#34; title=&#34;Intel显卡运行AI配置教程&#34;&gt;&lt;/a&gt;&lt;strong&gt;Intel显卡运行AI配置教程&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&#34;最新&#34;&gt;&lt;a href=&#34;#最新&#34; class=&#34;headerlink&#34; title=&#34;最新&#34;&gt;&lt;/a&gt;最新&lt;/h2&gt;&lt;p&gt;最近pytorch已经支持Arc显卡了，不需要再安装oneAPI和IPEX，当然以前的版本仍需要（2.5及以前），但是我本地本来是安装过这些组件的，我也不知道不安装会不会报错，可以参考官方文档&lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/tool/pytorch-prerequisites-for-intel-gpu/2-6.html&#34;&gt;PyTorch Prerequisites for Intel® GPUs&lt;/a&gt;，pytorch开发者确实说过免去了那些复杂的操作，可以开箱即用&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;直接在conda环境中执行即可&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda activate deepl
pip3 &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--pre&lt;/span&gt; torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/xpu&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出true就是成功了&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; torch
torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xpu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;is_available&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# torch.xpu is the API for Intel GPU support&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;训练测试代码&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; torch
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; torchvision

LR &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.001&lt;/span&gt;
DOWNLOAD &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;
DATA &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;datasets/cifar10/&#34;&lt;/span&gt;

transform &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torchvision&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transforms&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Compose&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
        torchvision&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transforms&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Resize&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;224&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;224&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        torchvision&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transforms&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ToTensor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        torchvision&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transforms&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Normalize&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
train_dataset &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torchvision&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;datasets&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CIFAR10&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
    root&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;DATA&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    train&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    transform&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;transform&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    download&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;DOWNLOAD&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
train_loader &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;utils&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataLoader&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;train_dataset&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; batch_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
train_len &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;train_loader&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

model &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torchvision&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;models&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;resnet50&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
criterion &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;CrossEntropyLoss&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
optimizer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;optim&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SGD&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parameters&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; lr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;LR&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; momentum&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
model &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;xpu&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
criterion &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; criterion&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;xpu&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;Initiating training&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; batch_idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;enumerate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;train_loader&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;xpu&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;xpu&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    optimizer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zero_grad&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    output &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; model&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    loss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; criterion&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    loss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;backward&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    optimizer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;step&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;batch_idx &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
         iteration_loss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; loss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;Iteration [&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;batch_idx&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;train_len&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;], Loss: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;iteration_loss&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token format-spec&#34;&gt;.4f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;save&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token string&#34;&gt;&#34;model_state_dict&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state_dict&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token string&#34;&gt;&#34;optimizer_state_dict&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; optimizer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state_dict&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#34;checkpoint.pth&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Execution finished&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;适用硬件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel Arc系列显卡（如A770 16G）驱动为6559&lt;/li&gt;
&lt;li&gt;win11&lt;/li&gt;
&lt;li&gt;oneAPI==2025.0.1&lt;/li&gt;
&lt;li&gt;torch==2.3.110&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-安装Miniconda并配置Python虚拟环境&#34;&gt;&lt;a href=&#34;#1-安装Miniconda并配置Python虚拟环境&#34; class=&#34;headerlink&#34; title=&#34;1. 安装Miniconda并配置Python虚拟环境&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 安装Miniconda并配置Python虚拟环境&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;可以参考这个&lt;a href=&#34;https://0xdadream.github.io/2024/08/12/conda-an-zhuang-ji-shi-yong/&#34;&gt;conda安装及使用 | 逐梦&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;步骤说明&#34;&gt;&lt;a href=&#34;#步骤说明&#34; class=&#34;headerlink&#34; title=&#34;步骤说明&#34;&gt;&lt;/a&gt;&lt;strong&gt;步骤说明&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;下载Miniconda&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问 &lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;Miniconda官网&lt;/a&gt;，选择对应操作系统的安装包（建议Python 3.11版本）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安装Miniconda&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows：双击安装包，按提示操作，勾选“Add to PATH”选项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux/macOS：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt; Miniconda3-latest-Linux-x86_64.sh  &lt;span class=&#34;token comment&#34;&gt;# 根据文件名调整  &lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;创建Python 3.11虚拟环境&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create &lt;span class=&#34;token parameter variable&#34;&gt;-n&lt;/span&gt; intel-ai &lt;span class=&#34;token assign-left variable&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.11&lt;/span&gt;  
conda activate intel-ai  &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-更新Intel显卡驱动&#34;&gt;&lt;a href=&#34;#2-更新Intel显卡驱动&#34; class=&#34;headerlink&#34; title=&#34;2. 更新Intel显卡驱动&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 更新Intel显卡驱动&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&#34;关键操作&#34;&gt;&lt;a href=&#34;#关键操作&#34; class=&#34;headerlink&#34; title=&#34;关键操作&#34;&gt;&lt;/a&gt;&lt;strong&gt;关键操作&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;下载最新驱动&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问 &lt;a href=&#34;https://www.intel.cn/content/www/cn/zh/download-center/home.html&#34;&gt;Intel驱动下载页&lt;/a&gt;，选择Arc系列显卡的最新驱动（如&lt;strong&gt;32.0.101.6559&lt;/strong&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安装驱动&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows：运行安装程序，按提示完成安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux：使用包管理器（如Ubuntu/Debian）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;apt&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; intel-opencl-icd intel-level-zero-gpu level-zero  &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;验证驱动状态&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows：按 &lt;code&gt;Win + X&lt;/code&gt; &amp;gt; 设备管理器 &amp;gt; 显示适配器，确认显卡型号正确。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;lspci &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; intel  &lt;span class=&#34;token comment&#34;&gt;# 确认显卡识别  &lt;/span&gt;
clinfo  &lt;span class=&#34;token comment&#34;&gt;# 检查OpenCL支持  &lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-安装Visual-Studio-Build-Tools（仅Windows）&#34;&gt;&lt;a href=&#34;#3-安装Visual-Studio-Build-Tools（仅Windows）&#34; class=&#34;headerlink&#34; title=&#34;3. 安装Visual Studio Build Tools（仅Windows）&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 安装Visual Studio Build Tools（仅Windows）&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&#34;操作步骤&#34;&gt;&lt;a href=&#34;#操作步骤&#34; class=&#34;headerlink&#34; title=&#34;操作步骤&#34;&gt;&lt;/a&gt;&lt;strong&gt;操作步骤&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;下载Visual Studio 2022&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;访问 &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;Visual Studio官网&lt;/a&gt;，下载社区版。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安装C++桌面开发组件&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;在安装界面勾选：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用C++的桌面开发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows 10/11 SDK&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C++ CMake工具&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;默认也行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;验证安装&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;打开命令提示符，运行 &lt;code&gt;cl&lt;/code&gt; 命令，确认返回编译器版本信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-安装Intel-oneAPI工具包&#34;&gt;&lt;a href=&#34;#4-安装Intel-oneAPI工具包&#34; class=&#34;headerlink&#34; title=&#34;4. 安装Intel oneAPI工具包&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. 安装Intel oneAPI工具包&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&#34;步骤说明-1&#34;&gt;&lt;a href=&#34;#步骤说明-1&#34; class=&#34;headerlink&#34; title=&#34;步骤说明&#34;&gt;&lt;/a&gt;&lt;strong&gt;步骤说明&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;下载oneAPI Base Toolkit&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问 &lt;a href=&#34;https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/toolkits.html&#34;&gt;oneAPI官网&lt;/a&gt;，选择Base Toolkit-&amp;gt;windows-&amp;gt;offline installer，然后点击右边往下一点Continue as a Guest (download starts immediately) →下载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安装oneAPI&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：运行安装程序，默认勾选所有组件，一直点就行了。&lt;/li&gt;
&lt;li&gt;Linux：使用包管理器或脚本安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;激活oneAPI环境变量&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;call &lt;span class=&#34;token string&#34;&gt;&#34;C:\Program Files (x86)\Intel\oneAPI\setvars.bat&#34;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# cmd使用&lt;/span&gt;
cmd.exe &lt;span class=&#34;token string&#34;&gt;&#34;/K&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#34;C:\Program Files (x86)\Intel\oneAPI\setvars.bat&#34; &amp;amp;&amp;amp; powershell&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# powershell使用&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;source&lt;/span&gt; /opt/intel/oneapi/setvars.sh  &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-安装Intel-Extension-for-PyTorch-IPEX&#34;&gt;&lt;a href=&#34;#5-安装Intel-Extension-for-PyTorch-IPEX&#34; class=&#34;headerlink&#34; title=&#34;5. 安装Intel Extension for PyTorch (IPEX)&#34;&gt;&lt;/a&gt;&lt;strong&gt;5. 安装Intel Extension for PyTorch (IPEX)&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&#34;操作命令&#34;&gt;&lt;a href=&#34;#操作命令&#34; class=&#34;headerlink&#34; title=&#34;操作命令&#34;&gt;&lt;/a&gt;&lt;strong&gt;操作命令&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;激活虚拟环境与oneAPI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;powershell中执行&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; xxx &lt;span class=&#34;token comment&#34;&gt;#最好切换到工作目录&lt;/span&gt;
conda create &lt;span class=&#34;token parameter variable&#34;&gt;-n&lt;/span&gt; intel-ai &lt;span class=&#34;token assign-left variable&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3.11&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 前面创建过环境没有再次创建&lt;/span&gt;
conda activate intel-ai &lt;span class=&#34;token comment&#34;&gt;# 激活环境 &lt;/span&gt;
conda &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; libjepg-turbo &lt;span class=&#34;token comment&#34;&gt;#提前安装这两个库以免报错&lt;/span&gt;
conda &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; libpng 
cmd.exe &lt;span class=&#34;token string&#34;&gt;&#34;/K&#34;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#34;C:\Program Files (x86)\Intel\oneAPI\setvars.bat&#34; &amp;amp;&amp;amp; powershell&#39;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 根据操作系统执行上述对应的oneAPI激活命令&lt;/span&gt;
conda activate intel-ai &lt;span class=&#34;token comment&#34;&gt;# 再次激活环境&lt;/span&gt;
conda &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; pkg-config libuv &lt;span class=&#34;token comment&#34;&gt;# 安装一些依赖&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安装PyTorch与IPEX&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 安装PyTorch CPU版本（IPEX会自动启用GPU支持）  &lt;/span&gt;
pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.3&lt;/span&gt;.1.post0+cxx11.abi &lt;span class=&#34;token assign-left variable&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.18&lt;/span&gt;.1.post0+cxx11.abi &lt;span class=&#34;token assign-left variable&#34;&gt;torchaudio&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.3&lt;/span&gt;.1.post0+cxx11.abi intel-extension-for-pytorch&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.3&lt;/span&gt;.110.post0+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/ &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.5&lt;/span&gt;.1+cxx11.abi &lt;span class=&#34;token assign-left variable&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.20&lt;/span&gt;.1+cxx11.abi &lt;span class=&#34;token assign-left variable&#34;&gt;torchaudio&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.5&lt;/span&gt;.1+cxx11.abi intel-extension-for-pytorch&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2.5&lt;/span&gt;.10+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/
&lt;span class=&#34;token comment&#34;&gt;# 最新版实测也能用&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;6-验证IPEX安装与显卡识别&#34;&gt;&lt;a href=&#34;#6-验证IPEX安装与显卡识别&#34; class=&#34;headerlink&#34; title=&#34;6. 验证IPEX安装与显卡识别&#34;&gt;&lt;/a&gt;&lt;strong&gt;6. 验证IPEX安装与显卡识别&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&#34;验证步骤&#34;&gt;&lt;a href=&#34;#验证步骤&#34; class=&#34;headerlink&#34; title=&#34;验证步骤&#34;&gt;&lt;/a&gt;&lt;strong&gt;验证步骤&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;运行Python脚本检查GPU支持&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; torch  
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; intel_extension_for_pytorch &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; ipex  

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;PyTorch版本: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__version__&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;IPEX版本: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;ipex&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__version__&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;Intel GPU是否可用: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xpu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;is_available&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;检测到的Intel GPU设备: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xpu&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_device_name&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;python &lt;span class=&#34;token parameter variable&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;import torch; import intel_extension_for_pytorch as ipex; print(&#39;PyTorch版本:&#39;, torch.__version__); print(&#39;IPEX版本:&#39;, ipex.__version__); print(&#39;Intel GPU是否可用:&#39;, torch.xpu.is_available()); print(&#39;检测到的Intel GPU设备:&#39;, torch.xpu.get_device_name(0))&#34;&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 一键脚本&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;预期输出&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;PyTorch版本: &lt;span class=&#34;token number&#34;&gt;2.1&lt;/span&gt;.0  
IPEX版本: &lt;span class=&#34;token number&#34;&gt;2.1&lt;/span&gt;.0  
Intel GPU是否可用: True  
检测到的Intel GPU设备: Intel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;R&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; Arc&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;TM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; A770 Graphics  &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;官方脚本&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;python &lt;span class=&#34;token parameter variable&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;import torch; import intel_extension_for_pytorch as ipex; print(torch.__version__); print(ipex.__version__); [print(f&#39;[{i}]: {torch.xpu.get_device_properties(i)}&#39;) for i in range(torch.xpu.device_count())];&#34;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;至此已经安装成功了&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;7-常见问题解决&#34;&gt;&lt;a href=&#34;#7-常见问题解决&#34; class=&#34;headerlink&#34; title=&#34;7. 常见问题解决&#34;&gt;&lt;/a&gt;&lt;strong&gt;7. 常见问题解决&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;遇到问题大多数时候都是各种版本不匹配，例如&lt;code&gt;raise err OSError: [WinError 126] 找不到指定的模块。&lt;/code&gt;，尽量使用教程相同版本。&lt;/p&gt;
&lt;p&gt;报错信息&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;E:&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;conda&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;envs&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;deepll&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Lib&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;site-packages&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;torchvision&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;image.py:14: UserWarning: Failed to load image Python extension: &lt;span class=&#34;token string&#34;&gt;&#39;Could not find module &#39;&lt;/span&gt;E:&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;conda&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;envs&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;deepll&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Lib&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;site-packages&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;torchvision&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;image.pyd&lt;span class=&#34;token string&#34;&gt;&#39; (or one of its dependencies). Try using the full path with constructor syntax.&#39;&lt;/span&gt;If you don&#39;t plan on using image functionality from &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;torchvision.io&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;libjpeg&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt; or &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;libpng&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt; installed before building &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;torchvision&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt; from source?
  warn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决方案&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;conda activate deepl &lt;span class=&#34;token comment&#34;&gt;# 激活对应环境&lt;/span&gt;
conda &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; libjepg-turbo
conda &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; libpng&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若有其他缺少库报错，安装对应库即可，可以参考文章&lt;a href=&#34;https://0xdadream.github.io/2025/02/18/python-ku-bao-cuo-hui-zong/&#34;&gt;python库报错汇总 | 逐梦&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;通过本教程，你已成功配置Intel显卡的AI开发环境，并验证了IPEX的GPU加速支持。接下来可尝试运行AI模型（如Stable Diffusion、LLM推理），并通过环境变量 &lt;code&gt;LIBOMPTARGET_PLUGIN=LEVEL0&lt;/code&gt; 或 &lt;code&gt;SYCL_CACHE_PERSISTENT=1&lt;/code&gt; 进一步优化性能。&lt;/p&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;&lt;a href=&#34;#参考链接&#34; class=&#34;headerlink&#34; title=&#34;参考链接&#34;&gt;&lt;/a&gt;参考链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit-download.html&#34;&gt;获取英特尔® oneAPI Base Toolkit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://intel.github.io/intel-extension-for-pytorch/&#34;&gt;Welcome to Intel® Extension for PyTorch* Documentation!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1dKaMeXE3B/?vd_source=b809bacd004cf290c08f612fa076f2eb&#34;&gt;intel arc 显卡 ComfyUI 安装教程_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/yunying985/article/details/140589680&#34;&gt;AI绘画 | 只要10步让你在英特尔A770显卡下安装ComfyUI运行StableDiffusion3最新开源模型_arc a750 安装comfyui-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pytorch.org/docs/main/notes/get_start_xpu.html&#34;&gt;Getting Started on Intel GPU — PyTorch main documentation&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/02/15/powershell-pei-zhi-mu-lu/</guid>
            <title>powershell配置目录</title>
            <link>https://0xdadream.github.io/2025/02/15/powershell-pei-zhi-mu-lu/</link>
            <category>命令行</category>
            <pubDate>Sat, 15 Feb 2025 21:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;powershell配置目录&#34;&gt;&lt;a href=&#34;#powershell配置目录&#34; class=&#34;headerlink&#34; title=&#34;powershell配置目录&#34;&gt;&lt;/a&gt;powershell配置目录&lt;/h1&gt;&lt;p&gt;执行命令&lt;code&gt;$PROFILE&lt;/code&gt;会得到类似于&lt;code&gt;C:\Users\xxx\Documents\PowerShell\Microsoft.PowerShell_profile.ps1&lt;/code&gt;的目录&lt;/p&gt;
&lt;p&gt;这个目录的文件就是你的powershell预执行的命令，相当于每次启动powershell都行执行一遍&lt;/p&gt;
&lt;p&gt;然后这个目录还会存powershell的安装的插件文件，备份这个文件，即使卸载重装配置也不会变，但是要注意不同版本命令可能不一样。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/02/12/emby-shi-yong/</guid>
            <title>emby使用</title>
            <link>https://0xdadream.github.io/2025/02/12/emby-shi-yong/</link>
            <category>emby</category>
            <pubDate>Wed, 12 Feb 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;emby使用&#34;&gt;&lt;a href=&#34;#emby使用&#34; class=&#34;headerlink&#34; title=&#34;emby使用&#34;&gt;&lt;/a&gt;emby使用&lt;/h1&gt;&lt;h2 id=&#34;1-准备工作&#34;&gt;&lt;a href=&#34;#1-准备工作&#34; class=&#34;headerlink&#34; title=&#34;1. 准备工作&#34;&gt;&lt;/a&gt;1. 准备工作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;核对信息&lt;/p&gt;
&lt;p&gt;确认你已获得完整的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器地址（通常为一个 URL 或 IP 地址）&lt;/li&gt;
&lt;li&gt;端口号（如果提供了非默认端口，需要特别注意）&lt;/li&gt;
&lt;li&gt;连接协议（通常为 http 或 https）&lt;/li&gt;
&lt;li&gt;如有账号和密码或令牌信息，也要一并准备好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;网络要求&lt;/strong&gt;&lt;br&gt;由于“机场节点”往往用于突破网络限制，确保你的设备已根据要求连接 VPN 或配置代理（如果提供方有说明需要）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-在-Emby-客户端中添加服务器&#34;&gt;&lt;a href=&#34;#2-在-Emby-客户端中添加服务器&#34; class=&#34;headerlink&#34; title=&#34;2. 在 Emby 客户端中添加服务器&#34;&gt;&lt;/a&gt;2. 在 Emby 客户端中添加服务器&lt;/h2&gt;&lt;h3 id=&#34;（1）安装-Emby-客户端&#34;&gt;&lt;a href=&#34;#（1）安装-Emby-客户端&#34; class=&#34;headerlink&#34; title=&#34;（1）安装 Emby 客户端&#34;&gt;&lt;/a&gt;（1）安装 Emby 客户端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;到&lt;a href=&#34;https://t.me/GentleSecretary&#34;&gt;Telegram: Contact @GentleSecretary&lt;/a&gt;搜索emby下载对应版本（首选）&lt;/li&gt;
&lt;li&gt;在安卓手机上，可从 Google Play 商店或其他应用市场下载安装官方 Emby 客户端（这个需要开会员）&lt;/li&gt;
&lt;li&gt;也可以使用第三方支持 Emby 协议的播放器（如 Infuse、Fileball 等）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;（2）进入服务器设置&#34;&gt;&lt;a href=&#34;#（2）进入服务器设置&#34; class=&#34;headerlink&#34; title=&#34;（2）进入服务器设置&#34;&gt;&lt;/a&gt;（2）进入服务器设置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开 Emby 客户端后，进入【设置】或【服务器设置】页面，或者直接弹出填写页面。&lt;/li&gt;
&lt;li&gt;选择“添加服务器”或“连接到服务器”的选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;（3）填写服务器地址&#34;&gt;&lt;a href=&#34;#（3）填写服务器地址&#34; class=&#34;headerlink&#34; title=&#34;（3）填写服务器地址&#34;&gt;&lt;/a&gt;（3）填写服务器地址&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在“服务器地址”栏中输入你获得的地址，格式一般为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://服务器地址:端口&lt;/code&gt; 或者 &lt;code&gt;https://服务器地址:端口&lt;/code&gt;&lt;br&gt;例如，如果你的地址为 &lt;code&gt;http://123.45.67.89&lt;/code&gt;，而端口为 8096，则填写：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://123.45.67.89:8096&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意：建议去除地址末尾多余的斜杠“/”，以免影响连接。（参考“线路说明”中对地址格式的建议 &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.freeembyguide.eu.org/docs/guide/server&#34;&gt;wiki.freeembyguide.eu.org&lt;/a&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;（4）连接测试&#34;&gt;&lt;a href=&#34;#（4）连接测试&#34; class=&#34;headerlink&#34; title=&#34;（4）连接测试&#34;&gt;&lt;/a&gt;（4）连接测试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;填写后，点击“连接”或“测试连接”。&lt;/li&gt;
&lt;li&gt;如果服务器运行正常且网络环境（或 VPN/代理）配置正确，客户端会自动加载媒体库。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-登录与账号验证&#34;&gt;&lt;a href=&#34;#3-登录与账号验证&#34; class=&#34;headerlink&#34; title=&#34;3. 登录与账号验证&#34;&gt;&lt;/a&gt;3. 登录与账号验证&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果该 Emby 机场服务要求身份验证，系统会提示你输入账号和密码。&lt;/li&gt;
&lt;li&gt;输入正确的账号信息后，继续操作即可访问媒体资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-高级设置（仅适用于管理人员或自建服务器）&#34;&gt;&lt;a href=&#34;#4-高级设置（仅适用于管理人员或自建服务器）&#34; class=&#34;headerlink&#34; title=&#34;4. 高级设置（仅适用于管理人员或自建服务器）&#34;&gt;&lt;/a&gt;4. 高级设置（仅适用于管理人员或自建服务器）&lt;/h2&gt;&lt;p&gt;如果你自己搭建 Emby 服务器并挂接了硬盘存储，可能还需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;配置媒体库&lt;/p&gt;
&lt;p&gt;在 Emby 服务器管理后台，设置媒体库的路径为硬盘挂载目录。这样服务器才能正确扫描并整理硬盘中的影音文件。（更多细节可参考 CSDN 上关于挂接硬盘的说明 &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wenku.csdn.net/answer/7f9bf651623542dea45bafc64aed261c&#34;&gt;wenku.csdn.net&lt;/a&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;网络加速和直连设置&lt;/strong&gt;&lt;br&gt;有些机场节点提供多条优化线路（直连或代理），如果遇到播放卡顿或加载慢的情况，可尝试切换线路或调整客户端的播放质量设置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;5-常见问题及排查&#34;&gt;&lt;a href=&#34;#5-常见问题及排查&#34; class=&#34;headerlink&#34; title=&#34;5. 常见问题及排查&#34;&gt;&lt;/a&gt;5. 常见问题及排查&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;无法连接服务器&lt;ul&gt;
&lt;li&gt;检查网络环境，确保已开启必要的 VPN/代理。&lt;/li&gt;
&lt;li&gt;再次核对地址和端口是否输入正确。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;播放卡顿或加载缓慢&lt;ul&gt;
&lt;li&gt;可能与服务器负载或网络带宽有关，尝试使用代理访问。&lt;/li&gt;
&lt;li&gt;查看是否有备用线路，或者联系服务提供方反馈问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSL 证书错误&lt;ul&gt;
&lt;li&gt;如果使用 https 出现证书问题，确认是否需要手动安装信任证书，或联系服务提供方了解详细要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/02/11/google-hacking-shi-yong-gai-jin-ban/</guid>
            <title>google hacking使用-改进版</title>
            <link>https://0xdadream.github.io/2025/02/11/google-hacking-shi-yong-gai-jin-ban/</link>
            <category>google</category>
            <pubDate>Tue, 11 Feb 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;google-hacking使用-改进版&#34;&gt;&lt;a href=&#34;#google-hacking使用-改进版&#34; class=&#34;headerlink&#34; title=&#34;google hacking使用-改进版&#34;&gt;&lt;/a&gt;google hacking使用-改进版&lt;/h1&gt;&lt;p&gt;以下是 &lt;strong&gt;Google Hacking 的完整语法列表&lt;/strong&gt;和&lt;strong&gt;高级组合示例&lt;/strong&gt;，涵盖渗透测试、信息收集、漏洞挖掘等场景的实用技巧。所有语法均基于 Google 搜索引擎的合法功能，但请严格遵守法律和道德规范。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;一、完整-Google-Hacking-语法列表&#34;&gt;&lt;a href=&#34;#一、完整-Google-Hacking-语法列表&#34; class=&#34;headerlink&#34; title=&#34;一、完整 Google Hacking 语法列表&#34;&gt;&lt;/a&gt;&lt;strong&gt;一、完整 Google Hacking 语法列表&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-基础操作符&#34;&gt;&lt;a href=&#34;#1-基础操作符&#34; class=&#34;headerlink&#34; title=&#34;1. 基础操作符&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 基础操作符&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;操作符&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;site:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;限定搜索特定域名或子域名&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;site:example.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intitle:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;标题包含关键词&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intitle:&#34;login&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;allintitle:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;标题包含所有指定关键词&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;allintitle:&#34;admin&#34; &#34;dashboard&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;inurl:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;URL 路径包含关键词&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;inurl:/admin&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;allinurl:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;URL 路径包含所有指定关键词&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;allinurl:login.php?user=&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;filetype:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;搜索特定文件类型&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;filetype:pdf &#34;confidential&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ext:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;按文件扩展名搜索（同 &lt;code&gt;filetype:&lt;/code&gt;）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ext:sql &#34;password&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intext:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;正文内容包含关键词&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intext:&#34;数据库密码&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;allintext:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;正文包含所有指定关键词&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;allintext:&#34;username&#34; &#34;password&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;cache:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;查看 Google 缓存的页面&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;cache:example.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;related:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;查找类似网站&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;related:github.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;info:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;获取网站的 Google 摘要信息&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;info:example.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;define:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;搜索词语定义&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;define:SQL注入&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;2-逻辑操作符&#34;&gt;&lt;a href=&#34;#2-逻辑操作符&#34; class=&#34;headerlink&#34; title=&#34;2. 逻辑操作符&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 逻辑操作符&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;操作符&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;AND&lt;/code&gt; 或空格&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;同时满足多个条件&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;site:example.com 密码&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;OR&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;满足任意一个条件&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;漏洞 OR 后门&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;排除关键词&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;登录 -site:example.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组合复杂逻辑&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;(inurl:admin OR intitle:admin) -论坛&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;3-高级操作符&#34;&gt;&lt;a href=&#34;#3-高级操作符&#34; class=&#34;headerlink&#34; title=&#34;3. 高级操作符&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 高级操作符&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;操作符&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;通配符（匹配任意字符）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;username:* password:*&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;...&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;精确匹配短语&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;您的密码错误&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;..&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;数值范围搜索&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;价格 $100..$500&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;AROUND(N)&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;关键词间距不超过 N 个词&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;密码&#34; AROUND(5) &#34;泄露&#34;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;weather:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;搜索某地天气&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;weather:北京&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;stocks:&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;搜索股票代码&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;stocks:GOOG&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;4-隐藏功能&#34;&gt;&lt;a href=&#34;#4-隐藏功能&#34; class=&#34;headerlink&#34; title=&#34;4. 隐藏功能&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. 隐藏功能&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;时间筛选&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;限定时间范围（通过搜索工具栏）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最近一年、自定义日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;图片搜索&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;通过图片反向搜索敏感信息&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;上传图片查找来源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;地图数据&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;搜索暴露的地理标记信息&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intitle:&#34;security camera&#34; site:google.com/maps&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;二、组合示例大全（按场景分类）&#34;&gt;&lt;a href=&#34;#二、组合示例大全（按场景分类）&#34; class=&#34;headerlink&#34; title=&#34;二、组合示例大全（按场景分类）&#34;&gt;&lt;/a&gt;&lt;strong&gt;二、组合示例大全&lt;/strong&gt;（按场景分类）&lt;/h3&gt;&lt;h4 id=&#34;1-敏感文件泄露&#34;&gt;&lt;a href=&#34;#1-敏感文件泄露&#34; class=&#34;headerlink&#34; title=&#34;1. 敏感文件泄露&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 敏感文件泄露&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;场景&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;数据库备份&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;filetype:sql &#34;DROP TABLE&#34; site:example.com&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;搜索 SQL 备份文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;配置文件&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intitle:&#34;index of&#34; &#34;config.php&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;查找 PHP 配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;日志文件&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;ext:log &#34;error&#34; &#34;password&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;包含密码的日志文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;密钥文件&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;filetype:key private&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;私钥文件泄露&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;2-后台与登录页面&#34;&gt;&lt;a href=&#34;#2-后台与登录页面&#34; class=&#34;headerlink&#34; title=&#34;2. 后台与登录页面&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 后台与登录页面&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;场景&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;管理员后台&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intitle:&#34;admin login&#34; inurl:/admin&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;未授权访问的管理页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;默认密码&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;默认密码&#34; site:routerlogin.net&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设备默认凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;弱口令提示&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intext:&#34;用户名或密码错误&#34; inurl:login&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;登录页面错误信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;3-漏洞利用&#34;&gt;&lt;a href=&#34;#3-漏洞利用&#34; class=&#34;headerlink&#34; title=&#34;3. 漏洞利用&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 漏洞利用&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;场景&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;SQL 注入点&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;inurl:&#34;id=&#34; &amp;amp; intext:&#34;Warning: mysql&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;存在报错信息的注入点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;目录遍历&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intitle:&#34;index of /&#34; &#34;parent directory&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;开放目录列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;API 接口暴露&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;inurl:/api/v1 intext:&#34;apikey&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;泄露的 API 密钥&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;4-设备与系统&#34;&gt;&lt;a href=&#34;#4-设备与系统&#34; class=&#34;headerlink&#34; title=&#34;4. 设备与系统&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. 设备与系统&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;场景&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;网络摄像头&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;inurl:/view.shtml intitle:&#34;Live View&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;公开的摄像头流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;路由器管理&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intitle:&#34;RouterOS&#34; &#34;admin&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;未授权的路由器配置页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;打印机控制台&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;inurl:&#34;/hp/device/this.LCDispatcher&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;惠普打印机管理界面&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;5-开源情报（OSINT）&#34;&gt;&lt;a href=&#34;#5-开源情报（OSINT）&#34; class=&#34;headerlink&#34; title=&#34;5. 开源情报（OSINT）&#34;&gt;&lt;/a&gt;&lt;strong&gt;5. 开源情报（OSINT）&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;场景&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;员工信息&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;site:linkedin.com &#34;CTO&#34; &#34;example.com&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;通过 LinkedIn 收集员工职位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;文档元数据&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;filetype:docx &#34;作者：张三&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;从 Office 文档提取创建者信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;GitHub 泄露&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;github.com&#34; &#34;password&#34; extension:env&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GitHub 中的敏感环境变量文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;6-错误信息泄露&#34;&gt;&lt;a href=&#34;#6-错误信息泄露&#34; class=&#34;headerlink&#34; title=&#34;6. 错误信息泄露&#34;&gt;&lt;/a&gt;&lt;strong&gt;6. 错误信息泄露&lt;/strong&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;场景&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;示例&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;调试模式&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intext:&#34;DEBUG MODE&#34; &#34;PHP&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;开启调试模式的网站&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;数据库报错&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;ORA-12541: TNS 无监听程序&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Oracle 数据库错误信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;堆栈跟踪&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;intext:&#34;at java.lang.Thread&#34;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Java 应用崩溃日志&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;三、高阶组合技巧&#34;&gt;&lt;a href=&#34;#三、高阶组合技巧&#34; class=&#34;headerlink&#34; title=&#34;三、高阶组合技巧&#34;&gt;&lt;/a&gt;&lt;strong&gt;三、高阶组合技巧&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-通配符与模糊搜索&#34;&gt;&lt;a href=&#34;#1-通配符与模糊搜索&#34; class=&#34;headerlink&#34; title=&#34;1. 通配符与模糊搜索&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. 通配符与模糊搜索&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;搜索带参数的 URL：&lt;br&gt;&lt;code&gt;inurl:*.php?id= *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查找密码重置链接：&lt;br&gt;&lt;code&gt;&#34;password reset&#34; site:example.com inurl:token=*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-时间范围限定&#34;&gt;&lt;a href=&#34;#2-时间范围限定&#34; class=&#34;headerlink&#34; title=&#34;2. 时间范围限定&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. 时间范围限定&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;查找近期泄露的数据库：&lt;br&gt;&lt;code&gt;filetype:sql &#34;INSERT INTO users&#34; after:2023-01-01&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-混合逻辑精准定位&#34;&gt;&lt;a href=&#34;#3-混合逻辑精准定位&#34; class=&#34;headerlink&#34; title=&#34;3. 混合逻辑精准定位&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. 混合逻辑精准定位&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;排除干扰结果：&lt;br&gt;&lt;code&gt;(intitle:&#34;管理后台&#34; OR inurl:/admin) -site:gov.cn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组合文件类型与关键词：&lt;br&gt;&lt;code&gt;filetype:xls &#34;员工工资&#34; site:example.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-利用错误消息&#34;&gt;&lt;a href=&#34;#4-利用错误消息&#34; class=&#34;headerlink&#34; title=&#34;4. 利用错误消息&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. 利用错误消息&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;发现 SQL 注入漏洞：&lt;br&gt;&lt;code&gt;&#34;You have an error in your SQL syntax&#34;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;识别配置错误：&lt;br&gt;&lt;code&gt;&#34;Access denied for user &#39;root&#39;@&#39;localhost&#39;&#34;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;四、防御建议（补充）&#34;&gt;&lt;a href=&#34;#四、防御建议（补充）&#34; class=&#34;headerlink&#34; title=&#34;四、防御建议（补充）&#34;&gt;&lt;/a&gt;&lt;strong&gt;四、防御建议（补充）&lt;/strong&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;robots.txt 配置&lt;/strong&gt;：禁止爬虫访问敏感路径（如 &lt;code&gt;/admin&lt;/code&gt;、&lt;code&gt;/config&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件权限控制&lt;/strong&gt;：避免将备份文件（&lt;code&gt;.bak&lt;/code&gt;、&lt;code&gt;.sql&lt;/code&gt;）存放在 Web 目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误信息隐藏&lt;/strong&gt;：自定义错误页面，避免暴露堆栈跟踪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定期搜索自身&lt;/strong&gt;：用 &lt;code&gt;site:yourdomain.com&lt;/code&gt; 检查公开信息泄露。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;五、工具增强&#34;&gt;&lt;a href=&#34;#五、工具增强&#34; class=&#34;headerlink&#34; title=&#34;五、工具增强&#34;&gt;&lt;/a&gt;&lt;strong&gt;五、工具增强&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Google Dork 自动化&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.exploit-db.com/google-hacking-database&#34;&gt;GHDB&lt;/a&gt;：直接搜索预定义的漏洞语法。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/...&#34;&gt;DorkGenius&lt;/a&gt;：自动生成高级 Dork 语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控与告警&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Google Alerts&lt;/code&gt; 监控公司关键词（如 &lt;code&gt;site:example.com password&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;六、合法与道德提醒&#34;&gt;&lt;a href=&#34;#六、合法与道德提醒&#34; class=&#34;headerlink&#34; title=&#34;六、合法与道德提醒&#34;&gt;&lt;/a&gt;&lt;strong&gt;六、合法与道德提醒&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仅用于授权测试&lt;/strong&gt;：渗透前需获得书面许可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;漏洞报告&lt;/strong&gt;：发现漏洞后联系管理员，参考《&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc9116&#34;&gt;漏洞披露规范&lt;/a&gt;》。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免敏感数据&lt;/strong&gt;：示例中的关键词均为演示用途，请勿针对真实系统测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;七、语法解析与示例&#34;&gt;&lt;a href=&#34;#七、语法解析与示例&#34; class=&#34;headerlink&#34; title=&#34;七、语法解析与示例&#34;&gt;&lt;/a&gt;七、&lt;strong&gt;语法解析与示例&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-index-of-admin&#34;&gt;&lt;a href=&#34;#1-index-of-admin&#34; class=&#34;headerlink&#34; title=&#34;1. index of /admin&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. &lt;code&gt;index of /admin&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：搜索开放目录列表中的 &lt;code&gt;/admin&lt;/code&gt; 目录（常见管理后台路径）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：暴露后台登录页面、未授权访问管理界面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：禁用目录列表（Apache: &lt;code&gt;Options -Indexes&lt;/code&gt;），设置访问权限（如 IP 白名单）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-index-of-passwd&#34;&gt;&lt;a href=&#34;#2-index-of-passwd&#34; class=&#34;headerlink&#34; title=&#34;2. index of /passwd&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. &lt;code&gt;index of /passwd&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：查找 Unix/Linux 系统中的 &lt;code&gt;/etc/passwd&lt;/code&gt; 文件（用户账户信息）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：泄露用户名、UID/GID 等敏感信息（现代系统密码存储在 &lt;code&gt;/etc/shadow&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：确保 &lt;code&gt;/etc/passwd&lt;/code&gt; 文件权限为 &lt;code&gt;644&lt;/code&gt;，禁止 Web 访问系统文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-index-of-password&#34;&gt;&lt;a href=&#34;#3-index-of-password&#34; class=&#34;headerlink&#34; title=&#34;3. index of /password&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. &lt;code&gt;index of /password&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：搜索包含 “password” 关键词的目录或文件（如明文密码文件）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：直接获取明文密码或哈希值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：避免在代码或文件中明文存储密码，使用环境变量或密钥管理服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-index-of-mail&#34;&gt;&lt;a href=&#34;#4-index-of-mail&#34; class=&#34;headerlink&#34; title=&#34;4. index of /mail&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. &lt;code&gt;index of /mail&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：查找邮件服务器或邮件存储目录（如 &lt;code&gt;/var/mail&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：泄露用户邮件内容、账户信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：限制邮件目录的 Web 访问权限，加密存储敏感数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-“index-of-“-passwd&#34;&gt;&lt;a href=&#34;#5-“index-of-“-passwd&#34; class=&#34;headerlink&#34; title=&#34;5. “index of /“ +passwd&#34;&gt;&lt;/a&gt;&lt;strong&gt;5. &lt;code&gt;“index of /“ +passwd&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：在根目录下搜索 &lt;code&gt;passwd&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例结果&lt;/strong&gt;：可能发现 &lt;code&gt;/etc/passwd&lt;/code&gt; 被错误链接到 Web 根目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：检查 Web 目录中是否存在符号链接到系统文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;6-“index-of-“-password-txt&#34;&gt;&lt;a href=&#34;#6-“index-of-“-password-txt&#34; class=&#34;headerlink&#34; title=&#34;6. “index of /“ +password.txt&#34;&gt;&lt;/a&gt;&lt;strong&gt;6. &lt;code&gt;“index of /“ +password.txt&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：查找 Web 根目录下的 &lt;code&gt;password.txt&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：明文密码文件可直接下载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：删除测试或临时文件，禁用目录列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7-“index-of-“-htaccess&#34;&gt;&lt;a href=&#34;#7-“index-of-“-htaccess&#34; class=&#34;headerlink&#34; title=&#34;7. “index of /“ +.htaccess&#34;&gt;&lt;/a&gt;&lt;strong&gt;7. &lt;code&gt;“index of /“ +.htaccess&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：暴露 Apache 服务器的 &lt;code&gt;.htaccess&lt;/code&gt; 配置文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：泄露重定向规则、认证凭据（如 &lt;code&gt;AuthUserFile&lt;/code&gt; 路径）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：限制 &lt;code&gt;.htaccess&lt;/code&gt; 文件权限（如 &lt;code&gt;600&lt;/code&gt;），避免存储敏感信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;8-“index-of-root”&#34;&gt;&lt;a href=&#34;#8-“index-of-root”&#34; class=&#34;headerlink&#34; title=&#34;8. “index of /root”&#34;&gt;&lt;/a&gt;&lt;strong&gt;8. &lt;code&gt;“index of /root”&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：搜索 Unix 系统超级用户（root）的主目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：泄露 root 用户的 SSH 密钥、脚本或日志。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：确保 &lt;code&gt;/root&lt;/code&gt; 目录权限为 &lt;code&gt;700&lt;/code&gt;，禁止 Web 服务器访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;9-“index-of-cgi-bin”&#34;&gt;&lt;a href=&#34;#9-“index-of-cgi-bin”&#34; class=&#34;headerlink&#34; title=&#34;9. “index of /cgi-bin”&#34;&gt;&lt;/a&gt;&lt;strong&gt;9. &lt;code&gt;“index of /cgi-bin”&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：查找 CGI 脚本目录（常见于老旧系统）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：利用 CGI 漏洞（如 Shellshock）执行远程代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：升级或禁用 CGI 模块，设置严格的脚本权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;10-“index-of-logs”&#34;&gt;&lt;a href=&#34;#10-“index-of-logs”&#34; class=&#34;headerlink&#34; title=&#34;10. “index of /logs”&#34;&gt;&lt;/a&gt;&lt;strong&gt;10. &lt;code&gt;“index of /logs”&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：暴露日志文件目录（如访问日志、错误日志）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：日志中可能包含敏感信息（如 SQL 错误中的数据库密码）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：将日志存储在非 Web 目录，定期清理并加密存档。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;11-“index-of-config”&#34;&gt;&lt;a href=&#34;#11-“index-of-config”&#34; class=&#34;headerlink&#34; title=&#34;11. “index of /config”&#34;&gt;&lt;/a&gt;&lt;strong&gt;11. &lt;code&gt;“index of /config”&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：查找配置文件目录（如数据库连接信息）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险&lt;/strong&gt;：泄露 &lt;code&gt;config.php&lt;/code&gt;、&lt;code&gt;settings.ini&lt;/code&gt; 等文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防御&lt;/strong&gt;：将配置文件移出 Web 目录，使用环境变量注入配置。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/01/17/linux-she-zhi-matplotlib-zhong-wen-zi-ti/</guid>
            <title>linux设置matplotlib中文字体</title>
            <link>https://0xdadream.github.io/2025/01/17/linux-she-zhi-matplotlib-zhong-wen-zi-ti/</link>
            <category>tools</category>
            <pubDate>Fri, 17 Jan 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;linux设置matplotlib中文字体&#34;&gt;&lt;a href=&#34;#linux设置matplotlib中文字体&#34; class=&#34;headerlink&#34; title=&#34;linux设置matplotlib中文字体&#34;&gt;&lt;/a&gt;linux设置matplotlib中文字体&lt;/h1&gt;&lt;p&gt;在Linux上设置Matplotlib使用中文字体的步骤如下：&lt;/p&gt;
&lt;h3 id=&#34;步骤-1-安装中文字体&#34;&gt;&lt;a href=&#34;#步骤-1-安装中文字体&#34; class=&#34;headerlink&#34; title=&#34;步骤 1: 安装中文字体&#34;&gt;&lt;/a&gt;步骤 1: 安装中文字体&lt;/h3&gt;&lt;p&gt;去&lt;a href=&#34;https://github.com/StellarCN/scp_zh/blob/master/fonts/SimHei.ttf&#34;&gt;scp_zh/fonts/SimHei.ttf at master · StellarCN/scp_zh&lt;/a&gt;下载中文字体&lt;/p&gt;
&lt;h4 id=&#34;安装SimHei字体&#34;&gt;&lt;a href=&#34;#安装SimHei字体&#34; class=&#34;headerlink&#34; title=&#34;安装SimHei字体&#34;&gt;&lt;/a&gt;安装SimHei字体&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import matplotlib.pyplot as plt
from matplotlib import rcParams
import pandas as pd

# 设置中文字体
rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;]  # 或者使用 &#39;Microsoft YaHei&#39;
rcParams[&#39;axes.unicode_minus&#39;] = False  # 解决负号显示问题

# 示例数据
data = {&#39;日期&#39;: [&#39;2024-01-01&#39;, &#39;2024-01-02&#39;, &#39;2024-01-03&#39;],
        &#39;销售额&#39;: [150, 200, 250]}
df = pd.DataFrame(data)

# 绘制图表
plt.plot(df[&#39;日期&#39;], df[&#39;销售额&#39;])
plt.title(&#39;销售额趋势&#39;)
plt.xlabel(&#39;日期&#39;)
plt.ylabel(&#39;销售额&#39;)
plt.xticks(rotation=45)
plt.show()&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行命令找到配置目录&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; matplotlib
matplotlib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;matplotlib_fname&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# xxx/matplotlib/matplotlibrc&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改文件&lt;code&gt;matplotlibrc&lt;/code&gt;，找到&lt;code&gt;font.sans-serif: DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif, SimHei&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;vim matplotlibrc&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SimHei&lt;/code&gt;就是我添加的中文字体&lt;/p&gt;
&lt;p&gt;删除缓存&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; ~/.cache/matplotlib
&lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; * &lt;span class=&#34;token parameter variable&#34;&gt;-r&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;步骤-2-配置Matplotlib使用中文字体&#34;&gt;&lt;a href=&#34;#步骤-2-配置Matplotlib使用中文字体&#34; class=&#34;headerlink&#34; title=&#34;步骤 2: 配置Matplotlib使用中文字体&#34;&gt;&lt;/a&gt;步骤 2: 配置Matplotlib使用中文字体&lt;/h3&gt;&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; matplotlib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pyplot &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; plt
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; matplotlib &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; rcParams
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

&lt;span class=&#34;token comment&#34;&gt;# 设置中文字体&lt;/span&gt;
rcParams&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;font.sans-serif&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;SimHei&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 或者使用 &#39;Microsoft YaHei&#39;&lt;/span&gt;
rcParams&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;axes.unicode_minus&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 解决负号显示问题&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 示例数据&lt;/span&gt;
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;日期&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2024-01-01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2024-01-02&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2024-01-03&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token string&#34;&gt;&#39;销售额&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 绘制图表&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;日期&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;销售额&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;销售额趋势&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xlabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;日期&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ylabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;销售额&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xticks&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;rotation&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/01/12/pandas-shi-yong/</guid>
            <title>pandas使用</title>
            <link>https://0xdadream.github.io/2025/01/12/pandas-shi-yong/</link>
            <category>tools</category>
            <pubDate>Sun, 12 Jan 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;pandas使用&#34;&gt;&lt;a href=&#34;#pandas使用&#34; class=&#34;headerlink&#34; title=&#34;pandas使用&#34;&gt;&lt;/a&gt;pandas使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;教程框架：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pandas 简介与安装&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;什么是 pandas？&lt;/li&gt;
&lt;li&gt;为什么使用 pandas？&lt;/li&gt;
&lt;li&gt;如何安装 pandas？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pandas 数据结构：Series&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Series 的创建&lt;/li&gt;
&lt;li&gt;Series 的索引与切片&lt;/li&gt;
&lt;li&gt;Series 的基本操作（算术、逻辑、函数应用）&lt;/li&gt;
&lt;li&gt;Series 的常用属性和方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pandas 数据结构：DataFrame&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;DataFrame 的创建&lt;/li&gt;
&lt;li&gt;DataFrame 的索引与选择数据&lt;/li&gt;
&lt;li&gt;DataFrame 的基本操作&lt;ul&gt;
&lt;li&gt;添加、删除列&lt;/li&gt;
&lt;li&gt;修改数据&lt;/li&gt;
&lt;li&gt;排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DataFrame 的常用属性和方法&lt;/li&gt;
&lt;li&gt;数据清洗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pandas 数据操作&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;数据分组 (GroupBy)&lt;/li&gt;
&lt;li&gt;数据聚合 (Aggregation)&lt;/li&gt;
&lt;li&gt;数据合并 (Merge, Join)&lt;/li&gt;
&lt;li&gt;数据连接 (Concat)&lt;/li&gt;
&lt;li&gt;数据透视表 (Pivot Table)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pandas 文件读写&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;读取 CSV 文件&lt;/li&gt;
&lt;li&gt;读取 Excel 文件&lt;/li&gt;
&lt;li&gt;读取其他类型文件&lt;/li&gt;
&lt;li&gt;写入文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pandas 时间序列数据处理&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;时间戳 (Timestamp)&lt;/li&gt;
&lt;li&gt;时间范围 (Date Range)&lt;/li&gt;
&lt;li&gt;时间重采样 (Resampling)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pandas 高级应用&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;apply 和 applymap 函数&lt;/li&gt;
&lt;li&gt;窗口函数&lt;/li&gt;
&lt;li&gt;数据可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;总结与进阶&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;常用技巧&lt;/li&gt;
&lt;li&gt;学习资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-Pandas-简介与安装&#34;&gt;&lt;a href=&#34;#1-Pandas-简介与安装&#34; class=&#34;headerlink&#34; title=&#34;1. Pandas 简介与安装&#34;&gt;&lt;/a&gt;&lt;strong&gt;1. Pandas 简介与安装&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.1 什么是 pandas？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pandas 是一个强大的 Python 数据分析库，它提供了高效的数据结构和数据分析工具。Pandas 的核心是两种数据结构：Series 和 DataFrame，它们使得数据处理变得简单快捷。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Series:&lt;/strong&gt; 一维的、带标签的数组，类似于带索引的列表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DataFrame:&lt;/strong&gt; 二维的、表格型的数据结构，可以看作是 Series 的容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1.2 为什么使用 pandas？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据处理能力强:&lt;/strong&gt; Pandas 提供了各种数据操作功能，如数据清洗、转换、切片、聚合、合并等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效的数据结构:&lt;/strong&gt; Series 和 DataFrame 的设计使得数据操作和分析速度快。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;与 NumPy 集成:&lt;/strong&gt; Pandas 基于 NumPy 构建，可以无缝地与 NumPy 数组进行交互。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件读写方便:&lt;/strong&gt; Pandas 可以轻松读取和写入各种格式的文件，如 CSV、Excel、JSON、SQL 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据可视化支持:&lt;/strong&gt; Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易用性:&lt;/strong&gt; Pandas 的 API 设计简洁易懂，上手快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1.3 如何安装 pandas？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;推荐使用 pip 来安装 pandas：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install pandas&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你使用的是 Anaconda，pandas 通常会预装，如果没有，也可以用 conda 安装：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;conda install pandas&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;安装验证:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开你的 Python 解释器或 Jupyter Notebook，输入以下代码：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;__version__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果正确打印出 pandas 的版本号，就说明安装成功了。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-Pandas-数据结构：Series&#34;&gt;&lt;a href=&#34;#2-Pandas-数据结构：Series&#34; class=&#34;headerlink&#34; title=&#34;2. Pandas 数据结构：Series&#34;&gt;&lt;/a&gt;&lt;strong&gt;2. Pandas 数据结构：Series&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;2.1 Series 的创建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Series 是一种一维的、带有标签（索引）的数据结构。它可以存储各种数据类型，如整数、浮点数、字符串、布尔值等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.1.1 从列表创建 Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最简单的创建方式是从 Python 的列表创建：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;
dtype: int64
&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;class &lt;span class=&#34;token string&#34;&gt;&#39;pandas.core.series.Series&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;默认情况下，Series 会自动创建从 0 开始的整数索引。&lt;/li&gt;
&lt;li&gt;dtype: int64 表示数据类型是 64 位整数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.1.2 从 NumPy 数组创建 Series&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2.2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4.4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;1.1&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;2.2&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;3.3&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;4.4&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;    &lt;span class=&#34;token number&#34;&gt;5.5&lt;/span&gt;
dtype: float64&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;dtype: float64 表示数据类型是 64 位浮点数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.1.3 从字典创建 Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字典的键会成为 Series 的索引，值会成为 Series 的数据：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;a    &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;
b    &lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;
c    &lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;
dtype: int64&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.1.4 自定义索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以在创建 Series 时指定索引：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;x&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;y&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;z&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;x    &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;
y    &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;
z    &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;
dtype: int64&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.2 Series 的索引与切片&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类似于列表和字典，可以使用索引来访问 Series 的元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2.1 通过位置索引访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用默认的整数索引：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;d&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 输出 10&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 输出 b    20&lt;/span&gt;
             &lt;span class=&#34;token comment&#34;&gt;#      c    30&lt;/span&gt;
             &lt;span class=&#34;token comment&#34;&gt;#      dtype: int64&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.2.2 通过自定义索引访问&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;d&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 输出 10&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;d&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 输出 b    20&lt;/span&gt;
                &lt;span class=&#34;token comment&#34;&gt;#      c    30&lt;/span&gt;
                &lt;span class=&#34;token comment&#34;&gt;#      d    40&lt;/span&gt;
                &lt;span class=&#34;token comment&#34;&gt;#      dtype: int64&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.3 Series 的基本操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3.1 算术运算&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

s1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
s2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1 &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 加法&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1 &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 乘法&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s2 &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; s1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 除法&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Series 会按照索引对齐进行计算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.3.2 逻辑运算&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 布尔值 Series&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;s &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 选择大于20的元素&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.3.3 函数应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用 apply() 方法将函数应用于 Series 的每个元素：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;square&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.4 Series 的常用属性和方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;values: 返回 Series 的值，以 NumPy 数组的形式。&lt;/li&gt;
&lt;li&gt;index: 返回 Series 的索引。&lt;/li&gt;
&lt;li&gt;dtype: 返回 Series 的数据类型。&lt;/li&gt;
&lt;li&gt;size: 返回 Series 的元素个数。&lt;/li&gt;
&lt;li&gt;unique(): 返回 Series 中唯一的值。&lt;/li&gt;
&lt;li&gt;value_counts(): 返回每个值出现的次数。&lt;/li&gt;
&lt;li&gt;head(n): 返回前 n 个元素。&lt;/li&gt;
&lt;li&gt;tail(n): 返回后 n 个元素。&lt;/li&gt;
&lt;li&gt;sort_values(): 对 Series 的值进行排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;# 输出 [10 20 10 30 20]&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;# 输出 RangeIndex(start=0, stop=5, step=1)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dtype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;       &lt;span class=&#34;token comment&#34;&gt;# 输出 int64&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;        &lt;span class=&#34;token comment&#34;&gt;# 输出 5&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;unique&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34;&gt;# 输出 [10 20 30]&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value_counts&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#输出 10    2&lt;/span&gt;
                         &lt;span class=&#34;token comment&#34;&gt;#  20    2&lt;/span&gt;
                         &lt;span class=&#34;token comment&#34;&gt;#  30    1&lt;/span&gt;
                         &lt;span class=&#34;token comment&#34;&gt;# dtype: int64&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;head&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;# 输出 0    10&lt;/span&gt;
                         &lt;span class=&#34;token comment&#34;&gt;#      1    20&lt;/span&gt;
                         &lt;span class=&#34;token comment&#34;&gt;#      dtype: int64&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort_values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 输出 0    10&lt;/span&gt;
                       &lt;span class=&#34;token comment&#34;&gt;#      2    10&lt;/span&gt;
                       &lt;span class=&#34;token comment&#34;&gt;#      1    20&lt;/span&gt;
                       &lt;span class=&#34;token comment&#34;&gt;#      4    20&lt;/span&gt;
                       &lt;span class=&#34;token comment&#34;&gt;#      3    30&lt;/span&gt;
                       &lt;span class=&#34;token comment&#34;&gt;#      dtype: int64&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;3-Pandas-数据结构：DataFrame&#34;&gt;&lt;a href=&#34;#3-Pandas-数据结构：DataFrame&#34; class=&#34;headerlink&#34; title=&#34;3. Pandas 数据结构：DataFrame&#34;&gt;&lt;/a&gt;&lt;strong&gt;3. Pandas 数据结构：DataFrame&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;3.1 DataFrame 的创建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DataFrame 是一个二维的表格型数据结构，可以看作是 Series 的容器。它由行和列组成，每一列可以是不同的数据类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1.1 从字典创建 DataFrame&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字典的键会成为 DataFrame 的列名，值会成为 DataFrame 的列数据：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;city&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;New York&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;London&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Paris&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;name  age      city
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;    Alice   &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;  New York
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;      Bob   &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;    London
&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;  Charlie   &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;     Paris&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.1.2 从列表创建 DataFrame&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用列表的列表或 NumPy 数组创建 DataFrame，需要指定列名：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;New York&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;London&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Paris&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; columns&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;city&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;name  age      city
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;    Alice   &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;  New York
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;      Bob   &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;    London
&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;  Charlie   &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;     Paris&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.1.3 从 Series 创建 DataFrame&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以将多个 Series 组合成一个 DataFrame：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
city &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;New York&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;London&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Paris&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;city&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; city&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;name  age      city
&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;    Alice   &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;  New York
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;      Bob   &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;    London
&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;  Charlie   &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;     Paris&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.2 DataFrame 的索引与选择数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2.1 选择列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用列名来选择 DataFrame 的一列或多列：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;city&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;New York&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;London&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Paris&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 选择 &#39;name&#39; 列&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 选择 &#39;name&#39; 和 &#39;age&#39; 列&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.2.2 选择行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用 loc 和 iloc 来选择行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;loc：通过行标签（索引）选择行。&lt;/li&gt;
&lt;li&gt;iloc：通过行位置（整数索引）选择行。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;city&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;New York&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;London&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Paris&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_index&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 通过标签选择 Alice 这行，按标签&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iloc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 通过位置选择 第一行，按位置&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iloc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 选择前两行所有列&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 通过标签选择 Alice 到 Bob 行的所有列&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.2.3 选择特定元素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以使用行和列的标签或位置来选择特定的元素：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;city&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;New York&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;London&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Paris&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 选择第 0 行 &#39;name&#39; 列的元素&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iloc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 选择第 0 行 第 0 列的元素&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.3 DataFrame 的基本操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.3.1 添加列&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gender&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Female&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Male&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Male&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 添加 &#39;gender&#39; 列&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.3.2 删除列&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;gender&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Female&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Male&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Male&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;drop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gender&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 删除 &#39;gender&#39; 列，axis=1 表示列&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.3.3 修改数据&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 修改第 0 行 &#39;age&#39; 列的值&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.3.4 排序&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort_values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ascending&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 按 &#39;age&#39; 列降序排序&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.4 DataFrame 的常用属性和方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shape: 返回 DataFrame 的形状（行数，列数）。&lt;/li&gt;
&lt;li&gt;index: 返回 DataFrame 的行索引。&lt;/li&gt;
&lt;li&gt;columns: 返回 DataFrame 的列索引。&lt;/li&gt;
&lt;li&gt;dtypes: 返回 DataFrame 每列的数据类型。&lt;/li&gt;
&lt;li&gt;head(n): 返回 DataFrame 的前 n 行。&lt;/li&gt;
&lt;li&gt;tail(n): 返回 DataFrame 的后 n 行。&lt;/li&gt;
&lt;li&gt;info(): 显示 DataFrame 的基本信息，包括列名，数据类型，非空值数量等。&lt;/li&gt;
&lt;li&gt;describe(): 返回 DataFrame 的统计摘要。&lt;/li&gt;
&lt;li&gt;dropna(): 删除包含缺失值的行或列。&lt;/li&gt;
&lt;li&gt;fillna(): 填充缺失值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3.5 数据清洗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据清洗是数据分析中重要的一步，包括处理缺失值、重复值等。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nan&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nan&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nan&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;city&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;New York&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;London&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Paris&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;London&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Unknown&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;isnull&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 检测缺失值&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dropna&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 删除包含缺失值的行&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;drop_duplicates&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 删除重复行&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fillna&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 用平均值填充年龄缺失值&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;4-Pandas-数据操作&#34;&gt;&lt;a href=&#34;#4-Pandas-数据操作&#34; class=&#34;headerlink&#34; title=&#34;4. Pandas 数据操作&#34;&gt;&lt;/a&gt;&lt;strong&gt;4. Pandas 数据操作&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;4.1 数据分组 (GroupBy)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;groupby() 方法允许你根据一个或多个列的值将 DataFrame 分组，然后可以对每个组进行聚合操作。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;category&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

grouped &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;groupby&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;category&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;grouped&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;groups&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 查看分组情况&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;grouped&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 对每个分组求和&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;grouped&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 对每个分组求平均值&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4.2 数据聚合 (Aggregation)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;聚合操作是对分组后的数据进行汇总计算，如求和、平均值、最大值、最小值等。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;category&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
grouped &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;groupby&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;category&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;grouped&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;agg&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;sum&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;mean&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;max&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;min&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 同时执行多个聚合函数&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;grouped&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;agg&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;sum&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;std&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 对指定列执行不同的聚合函数&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4.3 数据合并 (Merge, Join)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;merge() 方法用于将两个 DataFrame 根据共同的列合并在一起，类似于 SQL 的 JOIN 操作。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

df1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;D&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;value1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

df2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;D&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;E&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;F&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;value2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;原始数据&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;=======================&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 内连接(inner join)&lt;/span&gt;
merged_inner &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;merge&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; on&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; how&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;inner&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;inner join:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;merged_inner&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;=======================&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 左连接(left join)&lt;/span&gt;
merged_left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;merge&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; on&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; how&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;left&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;left join:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;merged_left&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;=======================&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 右连接(right join)&lt;/span&gt;
merged_right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;merge&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; on&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; how&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;right&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;right join:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;merged_right&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;=======================&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;# 外连接(outer join)&lt;/span&gt;
merged_outer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;merge&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; on&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;key&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; how&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;outer&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;outer join:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;merged_outer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4.4 数据连接 (Concat)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;concat() 方法用于将两个或多个 DataFrame 沿着指定的轴连接在一起。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

df1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

df2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;原始数据:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;=======================&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 垂直连接(默认axis=0)&lt;/span&gt;
concatenated_vertical &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;df1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ignore_index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;垂直连接:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;concatenated_vertical&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;=======================&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 水平连接(axis=1)&lt;/span&gt;
concatenated_horizontal &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;concat&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;df1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; df2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;水平连接:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;concatenated_horizontal&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;4.5 数据透视表 (Pivot Table)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pivot_table() 方法用于创建数据透视表，可以根据指定的列对数据进行重塑和汇总。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-01-01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2023-01-01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2023-01-02&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2023-01-02&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2023-01-03&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2023-01-03&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;product&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;sales&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;250&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;120&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;220&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;

df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

pivot_df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pivot_table&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; columns&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;product&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; values&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;sales&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; aggfunc&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;sum&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fill_value&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pivot_df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;5-Pandas-文件读写&#34;&gt;&lt;a href=&#34;#5-Pandas-文件读写&#34; class=&#34;headerlink&#34; title=&#34;5. Pandas 文件读写&#34;&gt;&lt;/a&gt;&lt;strong&gt;5. Pandas 文件读写&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Pandas 提供了强大的文件读写功能，可以方便地处理各种数据文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.1 读取 CSV 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSV (Comma Separated Values) 是一种常见的文本文件格式，用于存储表格数据。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

&lt;span class=&#34;token comment&#34;&gt;# 读取 CSV 文件&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 指定分隔符，如果不是逗号，使用 sep 参数&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data.txt&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sep&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;\t&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 读取指定列&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; usecols&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5.2 读取 Excel 文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pandas 可以直接读取 Excel 文件（.xls 和 .xlsx）。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

&lt;span class=&#34;token comment&#34;&gt;# 读取 Excel 文件&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_excel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data.xlsx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sheet_name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Sheet1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 读取指定 sheet&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_excel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data.xlsx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sheet_name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Sheet2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 读取指定列&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_excel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data.xlsx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sheet_name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Sheet1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; usecols&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5.3 读取其他类型文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pandas 还支持读取其他类型的文件，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JSON&lt;/strong&gt;: pd.read_json()&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTML&lt;/strong&gt;: pd.read_html()&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL&lt;/strong&gt;: pd.read_sql()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5.4 写入文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以将 DataFrame 写入到不同的文件格式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.4.1 写入 CSV 文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 写入 CSV 文件&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;output.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# index=False 表示不写入行索引&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5.4.2 写入 Excel 文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Charlie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 写入 Excel 文件&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to_excel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;output.xlsx&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sheet_name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Sheet1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;5.4.3 写入其他类型文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JSON&lt;/strong&gt;: df.to_json()&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTML&lt;/strong&gt;: df.to_html()&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL&lt;/strong&gt;: df.to_sql()&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;6-Pandas-时间序列数据处理&#34;&gt;&lt;a href=&#34;#6-Pandas-时间序列数据处理&#34; class=&#34;headerlink&#34; title=&#34;6. Pandas 时间序列数据处理&#34;&gt;&lt;/a&gt;&lt;strong&gt;6. Pandas 时间序列数据处理&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Pandas 提供了强大的时间序列数据处理能力，可以方便地分析和处理时间序列数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.1 时间戳 (Timestamp)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;时间戳是表示特定时间点的对象。Pandas 可以使用 pd.Timestamp 创建时间戳。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

&lt;span class=&#34;token comment&#34;&gt;# 创建时间戳&lt;/span&gt;
ts &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Timestamp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-26 12:30:00&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 从字符串创建时间戳&lt;/span&gt;
ts &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to_datetime&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-26&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;6.2 时间范围 (Date Range)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pd.date_range() 方法可以创建指定时间范围内的一系列时间戳。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd

&lt;span class=&#34;token comment&#34;&gt;# 创建时间范围&lt;/span&gt;
date_range &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; periods&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;D&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

date_range &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2023-10-10&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;periods: 时间戳的数量。&lt;/li&gt;
&lt;li&gt;freq: 时间间隔，如 ‘D’ (天), ‘W’ (周), ‘M’ (月), ‘H’ (小时), ‘T’ (分钟), ‘S’ (秒) 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6.3 时间序列索引&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以将时间序列数据作为 DataFrame 或 Series 的索引，方便时间序列数据的分析。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

&lt;span class=&#34;token comment&#34;&gt;# 创建时间序列索引&lt;/span&gt;
date_range &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; periods&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;D&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
ts &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 使用时间序列索引选择数据&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-03&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-05&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;6.4 时间重采样 (Resampling)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;resample() 方法可以对时间序列数据进行重采样，例如，将数据从天转换为周或月。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

date_range &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; periods&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;D&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randint&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
ts &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 将日数据重采样为周数据&lt;/span&gt;
weekly_ts &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;resample&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;weekly_ts&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 将日数据重采样为月数据&lt;/span&gt;
monthly_ts &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;resample&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;M&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;monthly_ts&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;.mean()：计算重采样后的平均值。&lt;/li&gt;
&lt;li&gt;.sum()：计算重采样后的总和。&lt;/li&gt;
&lt;li&gt;.min()：计算重采样后的最小值。&lt;/li&gt;
&lt;li&gt;.max()：计算重采样后的最大值。&lt;/li&gt;
&lt;li&gt;.first()：计算重采样后的第一个值。&lt;/li&gt;
&lt;li&gt;.last()：计算重采样后的最后一个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6.5 时间序列常用方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shift()：移动时间序列数据。&lt;/li&gt;
&lt;li&gt;diff()：计算时间序列数据的差分。&lt;/li&gt;
&lt;li&gt;asfreq()：转换为指定频率。&lt;/li&gt;
&lt;li&gt;rolling()：计算滑动窗口统计量。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

date_range &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2023-10-01&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; periods&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;D&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
ts &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;date_range&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shift&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;# 向下移动两个时间单位&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;diff&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 计算一阶差分&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;asfreq&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;H&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fill_value&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#转换为小时频率&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rolling&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;window&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 计算窗口为 3 的移动平均&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;7-Pandas-高级应用&#34;&gt;&lt;a href=&#34;#7-Pandas-高级应用&#34; class=&#34;headerlink&#34; title=&#34;7. Pandas 高级应用&#34;&gt;&lt;/a&gt;&lt;strong&gt;7. Pandas 高级应用&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;7.1.1 apply() 函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 对 Series 应用函数&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;square&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 对 DataFrame 的行或列应用函数&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;row_sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;row&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; row&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;row_sum&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 对每一行应用求和操作&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;row_sum&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 对每一列应用求和操作&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;7.1.2 applymap() 函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 对 DataFrame 的每个元素应用函数&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add_one&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;applymap&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;add_one&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;7.2 窗口函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;窗口函数可以对数据窗口进行计算，例如移动平均、滚动求和等。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 移动平均&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;rolling_mean&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rolling&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;window&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 累加&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cumsum&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cumsum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 窗口最大值&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;rolling_max&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rolling&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;window&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 窗口最小值&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;rolling_min&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rolling&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;window&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;7.3 数据可视化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; matplotlib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pyplot &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; plt
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np

data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cumsum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 绘制折线图&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;figsize&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Random Data Visualization&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xlabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Index&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ylabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 绘制直方图&lt;/span&gt;
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; columns&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bins&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; figsize&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Hist Data Visualization&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xlabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ylabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Frequency&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 绘制散点图&lt;/span&gt;
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;x&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;y&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;scatter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;x&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;y&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; figsize&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Scatter Data Visualization&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xlabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;X&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ylabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Y&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 绘制箱线图&lt;/span&gt;
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataFrame&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;figsize&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Box Data Visualization&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ylabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34;&gt;# 绘制饼图&lt;/span&gt;
data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
labels &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;A&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;B&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;D&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;labels&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plot&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pie&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;figsize&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; autopct&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%.2f&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;title&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Pie Chart Data Visualization&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;
&lt;h3 id=&#34;8-总结与进阶&#34;&gt;&lt;a href=&#34;#8-总结与进阶&#34; class=&#34;headerlink&#34; title=&#34;8. 总结与进阶&#34;&gt;&lt;/a&gt;&lt;strong&gt;8. 总结与进阶&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;8.1 常用技巧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际使用 pandas 时，以下一些技巧可能会很有帮助：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;链式操作：&lt;/strong&gt; 可以将多个操作链接在一起，提高代码的可读性：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
    pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dropna&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort_values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;groupby&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;city&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用 query() 方法：&lt;/strong&gt; 可以用更简洁的语法进行数据筛选：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;query&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;age &amp;gt; 30 and city == &#34;New York&#34;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用 isin() 方法：&lt;/strong&gt; 可以检查 Series 或 DataFrame 中的元素是否在给定的列表中：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;cities &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;New York&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;London&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;city&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;isin&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cities&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用 assign() 方法：&lt;/strong&gt; 可以添加新的列，同时保留原始 DataFrame：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;assign&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age_plus_ten &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用 pipe() 方法：&lt;/strong&gt; 可以将 DataFrame 传递给一系列函数：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-python&#34; data-language=&#34;python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;clean_data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dropna&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add_age&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;assign&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;age_plus_ten &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pipe&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;clean_data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pipe&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;add_age&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;8.2 学习资源&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;官方文档：&lt;/strong&gt; &lt;a href=&#34;https://www.google.com/url?sa=E&amp;amp;q=https://pandas.pydata.org/docs/&#34;&gt;pandas documentation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;这是学习 pandas 最权威的资源，包含了所有函数、方法的详细说明和示例。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在线教程：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/url?sa=E&amp;amp;q=https://pandas.pydata.org/docs/user_guide/10min.html&#34;&gt;10 Minutes to pandas&lt;/a&gt;: 一个快速上手 pandas 的教程。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/url?sa=E&amp;amp;q=https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html&#34;&gt;Pandas Cookbook&lt;/a&gt;: 包含各种常见的数据处理问题的解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;书籍：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;“Python for Data Analysis” by Wes McKinney： pandas 的作者写的书，是学习 pandas 的经典之作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实践项目：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;可以尝试一些 Kaggle 上的数据分析项目，将 pandas 应用到实际问题中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;社区：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Stack Overflow：在遇到问题时，可以在 Stack Overflow 上搜索或提问。&lt;/li&gt;
&lt;li&gt;GitHub：pandas 也是一个开源项目，可以在 GitHub 上查看源代码，参与贡献。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
