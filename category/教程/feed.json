{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦 • All posts by \"教程\" category",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/",
            "title": "安装WSL子系统教程",
            "date_published": "2025-04-10T04:25:00.000Z",
            "content_html": "<h1 id=\"安装WSL子系统教程\"><a href=\"#安装WSL子系统教程\" class=\"headerlink\" title=\"安装WSL子系统教程\"></a>安装WSL子系统教程</h1><hr>\n<h2 id=\"1-前提条件与准备工作\"><a href=\"#1-前提条件与准备工作\" class=\"headerlink\" title=\"1. 前提条件与准备工作\"></a>1. 前提条件与准备工作</h2><ul>\n<li><strong>操作系统要求</strong>：<ul>\n<li>Windows 10：要求版本 2004 及 Build 19041 以上，或</li>\n<li>Windows 11</li>\n</ul>\n</li>\n<li><strong>网络环境</strong>：部分地区需要设置代理。</li>\n<li><strong>管理员权限</strong>：安装及部分配置需要以管理员身份运行 PowerShell 或 CMD。</li>\n<li><strong>存储空间及磁盘规划</strong>：WSL 会在系统盘或你指定的目录中保存 Linux 文件系统，提前规划好存储位置与空间。</li>\n</ul>\n<hr>\n<h2 id=\"2-WSL-安装方法\"><a href=\"#2-WSL-安装方法\" class=\"headerlink\" title=\"2. WSL 安装方法\"></a>2. WSL 安装方法</h2><h3 id=\"2-1-一键安装（推荐）\"><a href=\"#2-1-一键安装（推荐）\" class=\"headerlink\" title=\"2.1 一键安装（推荐）\"></a>2.1 一键安装（推荐）</h3><p>适用于 Windows 10 21H2 及之后版本以及 Windows 11。步骤如下：</p>\n<ol>\n<li><p><strong>打开 PowerShell（管理员模式）</strong>：<br> 在开始菜单搜索 “PowerShell”，右键选择“以管理员身份运行”。</p>\n</li>\n<li><p><strong>执行安装命令</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令会自动启用 WSL 相关组件、虚拟机平台，并默认安装最新的 WSL 版本（通常为 WSL2）和默认 Linux 发行版（一般为 Ubuntu）。</p>\n</li>\n<li><p><strong>重启电脑</strong>：安装完成后系统会提示重启以完成配置。</p>\n</li>\n</ol>\n<h3 id=\"2-2-手动安装\"><a href=\"#2-2-手动安装\" class=\"headerlink\" title=\"2.2 手动安装\"></a>2.2 手动安装</h3><p>对于需要更多自定义选项的用户，手动安装步骤如下：</p>\n<h4 id=\"（1）启用-WSL-和虚拟机平台功能\"><a href=\"#（1）启用-WSL-和虚拟机平台功能\" class=\"headerlink\" title=\"（1）启用 WSL 和虚拟机平台功能\"></a>（1）启用 WSL 和虚拟机平台功能</h4><p>在管理员模式下打开 PowerShell，依次执行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">dism<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">/</span>online <span class=\"token operator\">/</span><span class=\"token function\">enable-feature</span> <span class=\"token operator\">/</span>featurename:Microsoft-Windows-Subsystem-Linux <span class=\"token operator\">/</span>all <span class=\"token operator\">/</span>norestart\ndism<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">/</span>online <span class=\"token operator\">/</span><span class=\"token function\">enable-feature</span> <span class=\"token operator\">/</span>featurename:VirtualMachinePlatform <span class=\"token operator\">/</span>all <span class=\"token operator\">/</span>norestart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>执行后重启计算机。</p>\n<h4 id=\"（2）安装-WSL2-内核更新包\"><a href=\"#（2）安装-WSL2-内核更新包\" class=\"headerlink\" title=\"（2）安装 WSL2 内核更新包\"></a>（2）安装 WSL2 内核更新包</h4><p>前往 WSL2 内核更新包下载链接 ，下载并运行安装包，更新 Linux 内核。</p>\n<h4 id=\"（3）设置默认-WSL-版本为-WSL2\"><a href=\"#（3）设置默认-WSL-版本为-WSL2\" class=\"headerlink\" title=\"（3）设置默认 WSL 版本为 WSL2\"></a>（3）设置默认 WSL 版本为 WSL2</h4><p>再次打开 PowerShell（无需管理员模式也可），执行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-default</span><span class=\"token operator\">-</span>version 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"（4）安装-Linux-发行版\"><a href=\"#（4）安装-Linux-发行版\" class=\"headerlink\" title=\"（4）安装 Linux 发行版\"></a>（4）安装 Linux 发行版</h4><p>有两种方式：</p>\n<ul>\n<li><p><strong>通过 Microsoft Store</strong>：搜索 <code>Ubuntu</code>、<code>Debian</code> 等，选择版本（如 Ubuntu 22.04 LTS），点击“获取”安装，推荐这个，然后再执行命令行安装。</p>\n</li>\n<li><p><strong>命令行安装</strong>：查看支持的在线发行版列表：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>list <span class=\"token operator\">--</span>online<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装指定版本（例如 Ubuntu 20.04）：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>install <span class=\"token operator\">-</span>d Ubuntu-20<span class=\"token punctuation\">.</span>04<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"3-Linux-发行版安装及首次使用\"><a href=\"#3-Linux-发行版安装及首次使用\" class=\"headerlink\" title=\"3. Linux 发行版安装及首次使用\"></a>3. Linux 发行版安装及首次使用</h2><ol>\n<li><p><strong>首次启动</strong>：安装完成后，从“开始菜单”启动对应 Linux 发行版。</p>\n</li>\n<li><p><strong>创建用户</strong>：系统会提示你为 Linux 系统创建用户名（须为小写）和密码，这样你就可以使用 <code>sudo</code> 提权操作。</p>\n</li>\n<li><p><strong>更新系统</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装常用软件</strong>：根据需要安装 <code>git</code>、<code>vim</code>、<code>python3</code> 等：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span> <span class=\"token function\">vim</span> python3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"4-WSL-版本切换：WSL1-与-WSL2\"><a href=\"#4-WSL-版本切换：WSL1-与-WSL2\" class=\"headerlink\" title=\"4. WSL 版本切换：WSL1 与 WSL2\"></a>4. WSL 版本切换：WSL1 与 WSL2</h2><p>WSL 中各发行版可以独立设置为 WSL1 或 WSL2。查看所有已安装发行版及其版本：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>l <span class=\"token operator\">-</span>v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-pgsql\" data-language=\"pgsql\"><code class=\"language-pgsql\"> NAME            STATE           VERSION\n* Ubuntu-22.04    Running         2\n  Ubuntu-20.04    Stopped         2\n  Debian          Stopped         1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h3><ul>\n<li><p><strong>将发行版切换为 WSL2</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> &lt;发行版名称&gt; 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> Debian 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>将发行版切换为 WSL1</strong>（如有需求）：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> &lt;发行版名称&gt; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>设置默认安装版本</strong>：在安装新发行版时，可以用下面命令设置默认版本：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-default</span><span class=\"token operator\">-</span>version 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p>切换版本过程中，转换时间与系统数据量有关，部分较大发行版可能需要几分钟。</p>\n<hr>\n<h2 id=\"5-附加功能与进阶用法\"><a href=\"#5-附加功能与进阶用法\" class=\"headerlink\" title=\"5. 附加功能与进阶用法\"></a>5. 附加功能与进阶用法</h2><h3 id=\"5-1-Windows-与-WSL-文件共享\"><a href=\"#5-1-Windows-与-WSL-文件共享\" class=\"headerlink\" title=\"5.1 Windows 与 WSL 文件共享\"></a>5.1 Windows 与 WSL 文件共享</h3><ul>\n<li><p><strong>WSL 文件系统访问</strong>：<br> 在 WSL 中可通过 <code>/mnt/c/</code> 等路径访问 Windows 磁盘。例如访问 <code>C:\\Users\\YourName</code>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">cd <span class=\"token operator\">/</span>mnt/c/Users/YourName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>在 Windows 中访问 WSL 文件</strong>：<br> 可使用 File Explorer 直接访问：在地址栏输入 <code>\\\\wsl$</code>，会显示所有已安装的 WSL 发行版及其文件系统。</p>\n</li>\n<li><p><strong>同步代码与项目文件</strong>：<br> 可以将项目文件放在 Windows 共享目录中，再在 WSL 中编辑、执行，这样两个系统间文件同步简单且快速。</p>\n</li>\n</ul>\n<h3 id=\"5-2-WSL-GUI-应用（WSLg）\"><a href=\"#5-2-WSL-GUI-应用（WSLg）\" class=\"headerlink\" title=\"5.2 WSL GUI 应用（WSLg）\"></a>5.2 WSL GUI 应用（WSLg）</h3><p>在最新版本的 Windows 10 和 Windows 11 上，WSL 支持 Linux 图形界面应用（WSLg）。配置方法如下：</p>\n<ol>\n<li><p><strong>确保 WSL 更新至最新版本</strong>：执行</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>启动 GUI 应用</strong>（如 Firefox）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> firefox\nfirefox <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>WSLg 会自动启动并显示 Linux GUI 应用，无需额外配置 X 服务器。</p>\n<h3 id=\"5-3-代理设置\"><a href=\"#5-3-代理设置\" class=\"headerlink\" title=\"5.3 代理设置\"></a>5.3 代理设置</h3><p>如果你处于网络环境受限或想加快下载速度，可以设置代理。</p>\n<h4 id=\"（1）设置-Windows-系统代理\"><a href=\"#（1）设置-Windows-系统代理\" class=\"headerlink\" title=\"（1）设置 Windows 系统代理\"></a>（1）设置 Windows 系统代理</h4><p>如果使用科学上网工具（如 Clash、V2Ray、VPN），确保系统代理已启用。可在 Windows 设置 → 网络和 Internet → 代理中配置，也可以通过命令设置环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setx http_proxy http://127.0.0.1:7890 /m\nsetx https_proxy http://127.0.0.1:7890 /m<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"（2）在-WSL-中设置代理\"><a href=\"#（2）在-WSL-中设置代理\" class=\"headerlink\" title=\"（2）在 WSL 中设置代理\"></a>（2）在 WSL 中设置代理</h4><p>在 WSL 中使用环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:7890\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:7890\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>若需要全局生效，在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 文件末尾加入以上配置，并执行 <code>source ~/.bashrc</code> 使其生效。</p>\n<h4 id=\"（3）apt-专用代理配置\"><a href=\"#（3）apt-专用代理配置\" class=\"headerlink\" title=\"（3）apt 专用代理配置\"></a>（3）apt 专用代理配置</h4><p>创建或编辑 apt 配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/apt/apt.conf.d/proxy.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加内容：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Acquire<span class=\"token double-colon punctuation\">::</span>http<span class=\"token double-colon punctuation\">::</span>Proxy <span class=\"token string\">\"http://127.0.0.1:7890\"</span><span class=\"token punctuation\">;</span>\nAcquire<span class=\"token double-colon punctuation\">::</span>https<span class=\"token double-colon punctuation\">::</span>Proxy <span class=\"token string\">\"http://127.0.0.1:7890\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>保存后，<code>sudo apt update</code> 将走代理。</p>\n<h3 id=\"5-4-多实例安装（同一版本多个副本）\"><a href=\"#5-4-多实例安装（同一版本多个副本）\" class=\"headerlink\" title=\"5.4 多实例安装（同一版本多个副本）\"></a>5.4 多实例安装（同一版本多个副本）</h3><p>WSL 允许你导入同一 Linux 发行版的多个副本，便于隔离不同任务。操作步骤如下：</p>\n<ol>\n<li><p><strong>导出已有实例</strong><br> 假设已安装 <code>Ubuntu-20.04</code>，用以下命令导出为 <code>.tar</code> 文件：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>export Ubuntu-20<span class=\"token punctuation\">.</span>04 D:\\wsl-backups\\ubuntu-20<span class=\"token punctuation\">.</span>04<span class=\"token punctuation\">.</span>tar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>导入为新实例</strong><br> 用新名称（例如 <code>Ubuntu-Dev</code>）创建副本：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>import Ubuntu-Dev D:\\WSL\\Ubuntu-Dev D:\\wsl-backups\\ubuntu-20<span class=\"token punctuation\">.</span>04<span class=\"token punctuation\">.</span>tar <span class=\"token operator\">--</span>version 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>启动新实例</strong><br> 使用下面命令启动新导入的实例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>d Ubuntu-Dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<p>这样你就可以在同一台机器上同时运行多个独立的 Linux 环境。</p>\n<hr>\n<h2 id=\"6-常用命令与管理技巧\"><a href=\"#6-常用命令与管理技巧\" class=\"headerlink\" title=\"6. 常用命令与管理技巧\"></a>6. 常用命令与管理技巧</h2><ul>\n<li><p><strong>查看已安装发行版及版本</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>l <span class=\"token operator\">-</span>v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>启动指定发行版</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>d &lt;发行版名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>设置默认发行版（直接运行 wsl 时启动的系统）</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>setdefault &lt;发行版名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>切换 WSL 版本</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> &lt;发行版名称&gt; <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">|</span>2<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>更新 WSL 内核</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>关闭所有运行中的 WSL 实例</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>shutdown<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>卸载某个发行版</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>unregister &lt;发行版名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/",
            "title": "文件链接全教程",
            "date_published": "2025-03-12T04:25:00.000Z",
            "content_html": "<h1 id=\"文件链接全教程\"><a href=\"#文件链接全教程\" class=\"headerlink\" title=\"文件链接全教程\"></a>文件链接全教程</h1><h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><h3 id=\"1-链接基础概念\"><a href=\"#1-链接基础概念\" class=\"headerlink\" title=\"1. 链接基础概念\"></a>1. 链接基础概念</h3><p>在 Windows 中，“链接”实际上有几种形式，主要包括以下几类：</p>\n<ul>\n<li>符号链接（Symbolic Link，软链接）<ul>\n<li><strong>概念：</strong> 符号链接是一个特殊文件，其中保存了目标文件或目录的路径。它类似于 Linux 中的软链接，并且看起来和普通文件或文件夹没有区别。</li>\n<li>特点：<ul>\n<li>可用于文件和目录</li>\n<li>可以跨分区甚至跨网络路径（UNC）</li>\n<li>如果目标被删除或移动，符号链接会失效</li>\n<li>从 Windows Vista 开始支持，最新 Windows（如 Windows 10/11）中在开发人员模式下可不需要管理员权限创建</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>硬链接（Hard Link）<ul>\n<li><strong>概念：</strong> 硬链接是指向同一数据实体（数据块或 NTFS 中的文件记录）的另一个目录项。每个硬链接都与目标文件共享同一份数据。</li>\n<li>特点：<ul>\n<li>仅适用于文件，不能用于目录</li>\n<li>必须在同一 NTFS 卷内（不能跨分区）</li>\n<li>删除其中一个链接不会影响其它链接或数据本身，只有当所有硬链接都删除后数据才会释放</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>目录联接（Junction Point）<ul>\n<li><strong>概念：</strong> 目录联接也称为“联接”，用于将一个目录指向另一个目录。在早期版本中常用来兼容旧版 Windows。</li>\n<li>特点：<ul>\n<li>只适用于目录</li>\n<li>创建时会自动转换为绝对路径</li>\n<li>适用于同一台计算机，支持跨盘符（但不支持网络路径）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-创建链接的方法\"><a href=\"#2-创建链接的方法\" class=\"headerlink\" title=\"2. 创建链接的方法\"></a>2. 创建链接的方法</h3><p>在 Windows 中创建链接主要有两种方式：通过 CMD 命令行（使用 <code>mklink</code> 命令）和通过 PowerShell（使用 <code>New-Item</code> 命令）。</p>\n<h4 id=\"2-1-使用-CMD-命令创建链接\"><a href=\"#2-1-使用-CMD-命令创建链接\" class=\"headerlink\" title=\"2.1 使用 CMD 命令创建链接\"></a>2.1 使用 CMD 命令创建链接</h4><p><strong>命令语法：</strong></p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink [[/D] | [/H] | [/J]] Link Target<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>默认（无参数）</strong>：创建文件的符号链接</li>\n<li><strong>/D</strong>：创建目录的符号链接</li>\n<li><strong>/H</strong>：创建硬链接（仅用于文件）</li>\n<li><strong>/J</strong>：创建目录联接（Junction，适用于目录）</li>\n</ul>\n<p><strong>示例：</strong></p>\n<ol>\n<li><p><strong>创建文件的符号链接</strong><br> 假设有一个文件 <code>C:\\Data\\original.txt</code>，我们在同目录下创建一个名为 <code>link.txt</code> 的符号链接：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink C:\\Data\\link.txt C:\\Data\\original.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时，<code>link.txt</code> 实际上保存了 <code>original.txt</code> 的路径，当你打开 <code>link.txt</code> 时，系统会自动访问 <code>original.txt</code>。</p>\n</li>\n<li><p><strong>创建目录的符号链接</strong><br> 假设有一个目录 <code>C:\\Data\\SourceFolder</code>，希望在 <code>C:\\Data</code> 下创建一个符号链接目录 <code>LinkFolder</code>：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /D C:\\Data\\LinkFolder C:\\Data\\SourceFolder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样，在资源管理器中打开 <code>LinkFolder</code> 就等同于打开 <code>SourceFolder</code>。</p>\n</li>\n<li><p><strong>创建文件的硬链接</strong><br> 依然以文件 <code>C:\\Data\\original.txt</code> 为例，创建一个硬链接 <code>hardlink.txt</code>：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /H C:\\Data\\hardlink.txt C:\\Data\\original.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>硬链接与原文件共享同一数据块，因此修改任一文件都会同步改变内容，但请注意：</p>\n<ul>\n<li>硬链接只能用于文件</li>\n<li>必须在同一卷内</li>\n</ul>\n</li>\n<li><p><strong>创建目录联接（Junction）</strong><br> 使用 /J 参数来创建目录联接，适用于目录，但和符号链接不同的是，Junction 通常保存绝对路径：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /J C:\\Data\\JunctionFolder C:\\Data\\SourceFolder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用 Junction 时，删除链接不会删除目标目录中的数据。</p>\n</li>\n</ol>\n<p><em>注意：</em></p>\n<ul>\n<li>创建符号链接和某些操作可能需要以<strong>管理员身份</strong>运行 CMD。</li>\n<li>Windows 10 及以后版本如果开启“开发人员模式”，可以允许普通用户创建符号链接。</li>\n</ul>\n<hr>\n<h4 id=\"2-2-使用-PowerShell-创建链接\"><a href=\"#2-2-使用-PowerShell-创建链接\" class=\"headerlink\" title=\"2.2 使用 PowerShell 创建链接\"></a>2.2 使用 PowerShell 创建链接</h4><p>PowerShell 提供了更现代的 <code>New-Item</code> 命令来创建不同类型的链接。</p>\n<p><strong>语法及示例：</strong></p>\n<ol>\n<li><p><strong>创建文件或目录的符号链接：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType SymbolicLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\Link.txt\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\original.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者创建目录符号链接：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType SymbolicLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\LinkFolder\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\SourceFolder\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>PowerShell 中的 <code>SymbolicLink</code> 同样创建的是软链接，和 CMD 中 <code>mklink</code> 默认行为一致。</p>\n</li>\n<li><p><strong>创建文件的硬链接：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType HardLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\hardlink.txt\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\original.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会为 <code>original.txt</code> 创建一个硬链接，注意硬链接只能用于文件，且必须在同一卷内。</p>\n</li>\n<li><p><strong>创建目录联接（Junction）：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType Junction <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\JunctionFolder\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\SourceFolder\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令会创建一个指向目录的联接，与符号链接在某些场景下效果类似，但内部处理略有差异。</p>\n</li>\n</ol>\n<p><em>提示：</em></p>\n<ul>\n<li>PowerShell 命令执行时也可能需要管理员权限，具体取决于目标路径所在的位置（例如系统文件夹或 Program Files）。</li>\n<li>在使用相对路径创建符号链接时，系统会将其转换为绝对路径存储在 NTFS 中。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用场景与注意事项\"><a href=\"#3-使用场景与注意事项\" class=\"headerlink\" title=\"3. 使用场景与注意事项\"></a>3. 使用场景与注意事项</h3><h4 id=\"3-1-常见使用场景\"><a href=\"#3-1-常见使用场景\" class=\"headerlink\" title=\"3.1 常见使用场景\"></a>3.1 常见使用场景</h4><ul>\n<li><p><strong>数据备份和增量备份</strong><br> 利用硬链接可以在不占用额外磁盘空间的情况下创建多个访问入口。例如，备份软件（如 Windows 版的“时间机器”）就会使用硬链接来实现增量备份。</p>\n</li>\n<li><p><strong>移动或重定向系统目录</strong><br> 为了节省系统盘空间或实现重装系统不丢失用户数据，可以将如 <code>C:\\Users</code> 目录复制到其他分区，然后使用 Junction 将原位置重定向到新位置：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">robocopy \"C:\\Users\" \"D:\\Users\" /E /COPYALL /XJ\nrmdir \"C:\\Users\" /S /Q\nmklink /J \"C:\\Users\" \"D:\\Users\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>开发环境下共享资源</strong><br> 当多个项目需要使用同一份库或模型文件时，可以通过符号链接或硬链接共享文件，避免重复存储。</p>\n</li>\n</ul>\n<h4 id=\"3-2-注意事项\"><a href=\"#3-2-注意事项\" class=\"headerlink\" title=\"3.2 注意事项\"></a>3.2 注意事项</h4><ul>\n<li><p><strong>权限问题</strong></p>\n<ul>\n<li>在 Windows 中，创建符号链接通常需要管理员权限；不过在 Windows 10 开发人员模式下可允许普通用户创建符号链接。</li>\n<li>硬链接不需要额外的权限，但目标文件必须在同一 NTFS 卷内。</li>\n</ul>\n</li>\n<li><p><strong>目标失效风险</strong></p>\n<ul>\n<li>符号链接依赖于目标路径。如果目标移动或删除，符号链接会成为“悬挂链接”（无效链接）。</li>\n<li>硬链接与目标数据直接关联，即使原始文件名被删除，只要至少还有一个硬链接存在，数据依然可用。</li>\n</ul>\n</li>\n<li><p><strong>跨分区限制</strong></p>\n<ul>\n<li>硬链接只能在同一卷内使用，而符号链接和 Junction 则可以跨卷（但符号链接可以支持网络路径，而 Junction 则不行）。</li>\n</ul>\n</li>\n<li><p><strong>命令使用环境</strong></p>\n<ul>\n<li>使用 <code>mklink</code> 命令时建议打开<strong>管理员命令提示符</strong>。</li>\n<li>使用 PowerShell 时，若涉及系统目录或受保护区域，建议以管理员身份运行 PowerShell。</li>\n</ul>\n</li>\n<li><p>查看链接和删除</p>\n<p>直接在资源管理器操作</p>\n</li>\n</ul>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><p><a href=\"https://0xdadream.github.io/2025/02/20/arc-zai-comfyui-bao-cuo/\">Arc在comfyui报错 | 逐梦</a></p>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/",
            "url": "https://0xdadream.github.io/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/",
            "title": "pycharm显示显示表格",
            "date_published": "2025-02-21T07:25:00.000Z",
            "content_html": "<h1 id=\"pycharm显示显示表格\"><a href=\"#pycharm显示显示表格\" class=\"headerlink\" title=\"pycharm显示显示表格\"></a>pycharm显示显示表格</h1><p>当以pycharm打开<code>.csv</code>文件时，可能不能显示表格，在文件中右键，选择关联文件，找到csv关联即可</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/19/conda-huan-yuan/",
            "url": "https://0xdadream.github.io/2025/02/19/conda-huan-yuan/",
            "title": "conda换源",
            "date_published": "2025-02-19T08:25:00.000Z",
            "content_html": "<h1 id=\"conda换源\"><a href=\"#conda换源\" class=\"headerlink\" title=\"conda换源\"></a>conda换源</h1><p>由于网络连接原因，使用 Anaconda 或 Miniconda 时，默认的官方源速度较慢。为提高下载速度，您可以将 Conda 的源更换为国内的镜像源。以下是详细的操作步骤：</p>\n<p><strong>1. 生成 <code>.condarc</code> 配置文件：</strong></p>\n<p>在 Windows 系统中，用户目录下可能没有 <code>.condarc</code> 文件。您可以通过以下命令生成该文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda config <span class=\"token parameter variable\">--set</span> show_channel_urls <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行后，<code>.condarc</code> 文件将被创建在用户主目录下。在 Windows 上，用户主目录通常位于 <code>C:\\Users\\用户名\\</code>。</p>\n<p><strong>2. 编辑 <code>.condarc</code> 文件：</strong></p>\n<p>使用文本编辑器打开 <code>.condarc</code> 文件，将其内容替换为以下内容：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">channels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> defaults\n<span class=\"token key atrule\">show_channel_urls</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">default_channels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/main\n  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/r\n  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/msys2\n<span class=\"token key atrule\">custom_channels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">conda-forge</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">msys2</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">bioconda</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">menpo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">pytorch</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">pytorch-lts</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">simpleitk</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述配置将 Conda 的源更换为北京外国语大学的镜像站。您也可以选择其他国内镜像源，如清华大学、上海交通大学等。具体的镜像源配置可以参考清华大学开源软件镜像站的官方文档。 </p>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/?utm_source=chatgpt.com\">mirrors.tuna.tsinghua.edu.cn</a></p>\n<p><strong>3. 清理索引缓存：</strong></p>\n<p>更换源后，建议清理 Conda 的索引缓存，以确保使用新的镜像源：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda clean <span class=\"token parameter variable\">-i</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>4. 测试新的源：</strong></p>\n<p>创建一个新的 Conda 环境，并安装一个包，以验证新的源是否生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> test_env numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果安装过程顺利且速度较快，则说明源更换成功。</p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li><strong>备份原始配置：</strong> 在更改 <code>.condarc</code> 文件之前，建议备份原始配置，以防需要恢复。</li>\n<li><strong>恢复默认源：</strong> 如果需要恢复默认源，可以删除 <code>.condarc</code> 文件，或者执行以下命令：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda config --remove-key channels<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>通过以上步骤，您可以成功将 Conda 的源更换为国内镜像源，从而提高包的下载速度和稳定性。</p>\n",
            "tags": [
                "conda",
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/",
            "title": "ArcA770使用comfyui教程",
            "date_published": "2025-02-18T10:11:00.000Z",
            "content_html": "<h1 id=\"ArcA770使用comfyui教程\"><a href=\"#ArcA770使用comfyui教程\" class=\"headerlink\" title=\"ArcA770使用comfyui教程\"></a>ArcA770使用comfyui教程</h1><h3 id=\"1-前置配置\"><a href=\"#1-前置配置\" class=\"headerlink\" title=\"1. 前置配置\"></a><strong>1. 前置配置</strong></h3><ul>\n<li>conda</li>\n<li>更新驱动</li>\n<li>安装<strong>Visual Studio Build Tools</strong></li>\n<li>安装oneAPI</li>\n<li>安装IPEX</li>\n<li>具体看链接<a href=\"https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/\">Intel显卡运行AI配置教程 | 逐梦</a></li>\n</ul>\n<hr>\n<h3 id=\"2-配置Python\"><a href=\"#2-配置Python\" class=\"headerlink\" title=\"2. 配置Python\"></a><strong>2. 配置Python</strong></h3><ul>\n<li><p><strong>Python环境</strong>：<br>建议使用<strong>Python 3.10或更高版本</strong>，并通过虚拟环境（如<code>venv</code>或<code>conda</code>）隔离依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> comfyui <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.11</span>  这里comfyui就是安装IPEX的环境\nconda activate comfyui<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"3-安装ComfyUI及依赖库\"><a href=\"#3-安装ComfyUI及依赖库\" class=\"headerlink\" title=\"3. 安装ComfyUI及依赖库\"></a><strong>3. 安装ComfyUI及依赖库</strong></h3><ul>\n<li><p><strong>克隆ComfyUI仓库</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> xxxx <span class=\"token comment\">#工作目录</span>\n<span class=\"token function\">git</span> clone https://github.com/comfyanonymous/ComfyUI.git\n<span class=\"token builtin class-name\">cd</span> ComfyUI\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt <span class=\"token comment\"># 安装依赖</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"4-验证显卡识别与性能调优\"><a href=\"#4-验证显卡识别与性能调优\" class=\"headerlink\" title=\"4. 验证显卡识别与性能调优\"></a><strong>4. 验证显卡识别与性能调优</strong></h3><ul>\n<li><strong>显存与算力优化</strong>：<ul>\n<li>启用Intel的<strong>XMX引擎</strong>（AI加速单元）和<strong>XeSS技术</strong>（超分辨率），可通过设置环境变量优化显存分配410。</li>\n<li>调整ComfyUI配置文件，指定使用<code>XPU</code>（Intel GPU）而非默认的CUDA。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"5-启动comfyui\"><a href=\"#5-启动comfyui\" class=\"headerlink\" title=\"5.启动comfyui\"></a><strong>5.启动comfyui</strong></h3><p>接着上面的目录执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python main.py --use-pytorch-cross-attention <span class=\"token parameter variable\">--highvram</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"快捷脚本\"><a href=\"#快捷脚本\" class=\"headerlink\" title=\"快捷脚本\"></a>快捷脚本</h4><h5 id=\"cmd\"><a href=\"#cmd\" class=\"headerlink\" title=\"cmd\"></a>cmd</h5><pre class=\"line-numbers language-bat\" data-language=\"bat\"><code class=\"language-bat\">call \"E:\\conda\\Scripts\\activate.bat\" deepl  \ncall \"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\"\npython main.py --use-pytorch-cross-attention --highvram<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>保存为<code>.bat</code>文件</p>\n<p>powershell</p>\n<p>没搞出来</p>\n",
            "tags": [
                "intel"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/",
            "title": "Intel显卡运行AI配置教程",
            "date_published": "2025-02-18T08:11:00.000Z",
            "content_html": "<h1 id=\"Intel显卡运行AI配置教程\"><a href=\"#Intel显卡运行AI配置教程\" class=\"headerlink\" title=\"Intel显卡运行AI配置教程\"></a><strong>Intel显卡运行AI配置教程</strong></h1><h2 id=\"最新\"><a href=\"#最新\" class=\"headerlink\" title=\"最新\"></a>最新</h2><p>最近pytorch已经支持Arc显卡了，不需要再安装oneAPI和IPEX，当然以前的版本仍需要（2.5及以前），但是我本地本来是安装过这些组件的，我也不知道不安装会不会报错，可以参考官方文档<a href=\"https://www.intel.com/content/www/us/en/developer/articles/tool/pytorch-prerequisites-for-intel-gpu/2-6.html\">PyTorch Prerequisites for Intel® GPUs</a>，pytorch开发者确实说过免去了那些复杂的操作，可以开箱即用</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接在conda环境中执行即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate deepl\npip3 <span class=\"token function\">install</span> <span class=\"token parameter variable\">--pre</span> torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/xpu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出true就是成功了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\ntorch<span class=\"token punctuation\">.</span>xpu<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># torch.xpu is the API for Intel GPU support</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>训练测试代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torchvision\n\nLR <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span>\nDOWNLOAD <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nDATA <span class=\"token operator\">=</span> <span class=\"token string\">\"datasets/cifar10/\"</span>\n\ntransform <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>\n        torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\ntrain_dataset <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span>\n    root<span class=\"token operator\">=</span>DATA<span class=\"token punctuation\">,</span>\n    train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    transform<span class=\"token operator\">=</span>transform<span class=\"token punctuation\">,</span>\n    download<span class=\"token operator\">=</span>DOWNLOAD<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\ntrain_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token operator\">=</span>train_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\ntrain_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>resnet50<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncriterion <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noptimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>LR<span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\ncriterion <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Initiating training\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> batch_idx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\n    target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\n    optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    loss <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n    loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>batch_idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n         iteration_loss <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Iteration [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>batch_idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>train_len<span class=\"token punctuation\">}</span></span><span class=\"token string\">], Loss: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>iteration_loss<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.4f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\ntorch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"model_state_dict\"</span><span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"optimizer_state_dict\"</span><span class=\"token punctuation\">:</span> optimizer<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"checkpoint.pth\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution finished\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>适用硬件</strong></p>\n<ul>\n<li>Intel Arc系列显卡（如A770 16G）驱动为6559</li>\n<li>win11</li>\n<li>oneAPI==2025.0.1</li>\n<li>torch==2.3.110</li>\n</ul>\n<hr>\n<h2 id=\"1-安装Miniconda并配置Python虚拟环境\"><a href=\"#1-安装Miniconda并配置Python虚拟环境\" class=\"headerlink\" title=\"1. 安装Miniconda并配置Python虚拟环境\"></a><strong>1. 安装Miniconda并配置Python虚拟环境</strong></h2><p>可以参考这个<a href=\"https://0xdadream.github.io/2024/08/12/conda-an-zhuang-ji-shi-yong/\">conda安装及使用 | 逐梦</a></p>\n<h3 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a><strong>步骤说明</strong></h3><ol>\n<li><p><strong>下载Miniconda</strong></p>\n<ul>\n<li>访问 <a href=\"https://docs.conda.io/en/latest/miniconda.html\">Miniconda官网</a>，选择对应操作系统的安装包（建议Python 3.11版本）。</li>\n</ul>\n</li>\n<li><p><strong>安装Miniconda</strong></p>\n<ul>\n<li><p>Windows：双击安装包，按提示操作，勾选“Add to PATH”选项。</p>\n</li>\n<li><p>Linux/macOS：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> Miniconda3-latest-Linux-x86_64.sh  <span class=\"token comment\"># 根据文件名调整  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>创建Python 3.11虚拟环境</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> intel-ai <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.11</span>  \nconda activate intel-ai  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"2-更新Intel显卡驱动\"><a href=\"#2-更新Intel显卡驱动\" class=\"headerlink\" title=\"2. 更新Intel显卡驱动\"></a><strong>2. 更新Intel显卡驱动</strong></h2><h3 id=\"关键操作\"><a href=\"#关键操作\" class=\"headerlink\" title=\"关键操作\"></a><strong>关键操作</strong></h3><ol>\n<li><p><strong>下载最新驱动</strong></p>\n<ul>\n<li>访问 <a href=\"https://www.intel.cn/content/www/cn/zh/download-center/home.html\">Intel驱动下载页</a>，选择Arc系列显卡的最新驱动（如<strong>32.0.101.6559</strong>）。</li>\n</ul>\n</li>\n<li><p><strong>安装驱动</strong></p>\n<ul>\n<li><p>Windows：运行安装程序，按提示完成安装。</p>\n</li>\n<li><p>Linux：使用包管理器（如Ubuntu/Debian）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> intel-opencl-icd intel-level-zero-gpu level-zero  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>验证驱动状态</strong></p>\n<ul>\n<li><p>Windows：按 <code>Win + X</code> &gt; 设备管理器 &gt; 显示适配器，确认显卡型号正确。</p>\n</li>\n<li><p>Linux：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lspci <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> intel  <span class=\"token comment\"># 确认显卡识别  </span>\nclinfo  <span class=\"token comment\"># 检查OpenCL支持  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"3-安装Visual-Studio-Build-Tools（仅Windows）\"><a href=\"#3-安装Visual-Studio-Build-Tools（仅Windows）\" class=\"headerlink\" title=\"3. 安装Visual Studio Build Tools（仅Windows）\"></a><strong>3. 安装Visual Studio Build Tools（仅Windows）</strong></h2><h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a><strong>操作步骤</strong></h3><ol>\n<li><strong>下载Visual Studio 2022</strong><ul>\n<li>访问 <a href=\"https://visualstudio.microsoft.com/\">Visual Studio官网</a>，下载社区版。</li>\n</ul>\n</li>\n<li><strong>安装C++桌面开发组件</strong><ul>\n<li>在安装界面勾选：<ul>\n<li><strong>使用C++的桌面开发</strong></li>\n<li><strong>Windows 10/11 SDK</strong></li>\n<li><strong>C++ CMake工具</strong></li>\n<li>默认也行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>验证安装</strong><ul>\n<li>打开命令提示符，运行 <code>cl</code> 命令，确认返回编译器版本信息。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"4-安装Intel-oneAPI工具包\"><a href=\"#4-安装Intel-oneAPI工具包\" class=\"headerlink\" title=\"4. 安装Intel oneAPI工具包\"></a><strong>4. 安装Intel oneAPI工具包</strong></h2><h3 id=\"步骤说明-1\"><a href=\"#步骤说明-1\" class=\"headerlink\" title=\"步骤说明\"></a><strong>步骤说明</strong></h3><ol>\n<li><p><strong>下载oneAPI Base Toolkit</strong></p>\n<ul>\n<li>访问 <a href=\"https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/toolkits.html\">oneAPI官网</a>，选择Base Toolkit-&gt;windows-&gt;offline installer，然后点击右边往下一点Continue as a Guest (download starts immediately) →下载</li>\n</ul>\n</li>\n<li><p><strong>安装oneAPI</strong></p>\n<ul>\n<li>Windows：运行安装程序，默认勾选所有组件，一直点就行了。</li>\n<li>Linux：使用包管理器或脚本安装。</li>\n</ul>\n</li>\n<li><p><strong>激活oneAPI环境变量</strong></p>\n<ul>\n<li><p>Windows：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">call <span class=\"token string\">\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\"</span>   <span class=\"token comment\"># cmd使用</span>\ncmd.exe <span class=\"token string\">\"/K\"</span> <span class=\"token string\">'\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\" &amp;&amp; powershell'</span> <span class=\"token comment\"># powershell使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>Linux：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /opt/intel/oneapi/setvars.sh  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"5-安装Intel-Extension-for-PyTorch-IPEX\"><a href=\"#5-安装Intel-Extension-for-PyTorch-IPEX\" class=\"headerlink\" title=\"5. 安装Intel Extension for PyTorch (IPEX)\"></a><strong>5. 安装Intel Extension for PyTorch (IPEX)</strong></h2><h3 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a><strong>操作命令</strong></h3><ol>\n<li><p><strong>激活虚拟环境与oneAPI</strong></p>\n<p>powershell中执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> xxx <span class=\"token comment\">#最好切换到工作目录</span>\nconda create <span class=\"token parameter variable\">-n</span> intel-ai <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.11</span>  <span class=\"token comment\"># 前面创建过环境没有再次创建</span>\nconda activate intel-ai <span class=\"token comment\"># 激活环境 </span>\nconda <span class=\"token function\">install</span> libjepg-turbo <span class=\"token comment\">#提前安装这两个库以免报错</span>\nconda <span class=\"token function\">install</span> libpng \ncmd.exe <span class=\"token string\">\"/K\"</span> <span class=\"token string\">'\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\" &amp;&amp; powershell'</span>  <span class=\"token comment\"># 根据操作系统执行上述对应的oneAPI激活命令</span>\nconda activate intel-ai <span class=\"token comment\"># 再次激活环境</span>\nconda <span class=\"token function\">install</span> pkg-config libuv <span class=\"token comment\"># 安装一些依赖</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>安装PyTorch与IPEX</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装PyTorch CPU版本（IPEX会自动启用GPU支持）  </span>\npip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">torch</span><span class=\"token operator\">==</span><span class=\"token number\">2.3</span>.1.post0+cxx11.abi <span class=\"token assign-left variable\">torchvision</span><span class=\"token operator\">==</span><span class=\"token number\">0.18</span>.1.post0+cxx11.abi <span class=\"token assign-left variable\">torchaudio</span><span class=\"token operator\">==</span><span class=\"token number\">2.3</span>.1.post0+cxx11.abi intel-extension-for-pytorch<span class=\"token operator\">==</span><span class=\"token number\">2.3</span>.110.post0+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">torch</span><span class=\"token operator\">==</span><span class=\"token number\">2.5</span>.1+cxx11.abi <span class=\"token assign-left variable\">torchvision</span><span class=\"token operator\">==</span><span class=\"token number\">0.20</span>.1+cxx11.abi <span class=\"token assign-left variable\">torchaudio</span><span class=\"token operator\">==</span><span class=\"token number\">2.5</span>.1+cxx11.abi intel-extension-for-pytorch<span class=\"token operator\">==</span><span class=\"token number\">2.5</span>.10+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/\n<span class=\"token comment\"># 最新版实测也能用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"6-验证IPEX安装与显卡识别\"><a href=\"#6-验证IPEX安装与显卡识别\" class=\"headerlink\" title=\"6. 验证IPEX安装与显卡识别\"></a><strong>6. 验证IPEX安装与显卡识别</strong></h2><h3 id=\"验证步骤\"><a href=\"#验证步骤\" class=\"headerlink\" title=\"验证步骤\"></a><strong>验证步骤</strong></h3><ol>\n<li><p><strong>运行Python脚本检查GPU支持</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch  \n<span class=\"token keyword\">import</span> intel_extension_for_pytorch <span class=\"token keyword\">as</span> ipex  \n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"PyTorch版本: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>torch<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"IPEX版本: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ipex<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Intel GPU是否可用: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>torch<span class=\"token punctuation\">.</span>xpu<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"检测到的Intel GPU设备: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>torch<span class=\"token punctuation\">.</span>xpu<span class=\"token punctuation\">.</span>get_device_name<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"import torch; import intel_extension_for_pytorch as ipex; print('PyTorch版本:', torch.__version__); print('IPEX版本:', ipex.__version__); print('Intel GPU是否可用:', torch.xpu.is_available()); print('检测到的Intel GPU设备:', torch.xpu.get_device_name(0))\"</span>\n<span class=\"token comment\"># 一键脚本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>预期输出</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PyTorch版本: <span class=\"token number\">2.1</span>.0  \nIPEX版本: <span class=\"token number\">2.1</span>.0  \nIntel GPU是否可用: True  \n检测到的Intel GPU设备: Intel<span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Arc<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> A770 Graphics  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>官方脚本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"import torch; import intel_extension_for_pytorch as ipex; print(torch.__version__); print(ipex.__version__); [print(f'[{i}]: {torch.xpu.get_device_properties(i)}') for i in range(torch.xpu.device_count())];\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>至此已经安装成功了</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"7-常见问题解决\"><a href=\"#7-常见问题解决\" class=\"headerlink\" title=\"7. 常见问题解决\"></a><strong>7. 常见问题解决</strong></h2><p>遇到问题大多数时候都是各种版本不匹配，例如<code>raise err OSError: [WinError 126] 找不到指定的模块。</code>，尽量使用教程相同版本。</p>\n<p>报错信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">E:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs<span class=\"token punctuation\">\\</span>deepll<span class=\"token punctuation\">\\</span>Lib<span class=\"token punctuation\">\\</span>site-packages<span class=\"token punctuation\">\\</span>torchvision<span class=\"token punctuation\">\\</span>io<span class=\"token punctuation\">\\</span>image.py:14: UserWarning: Failed to load image Python extension: <span class=\"token string\">'Could not find module '</span>E:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs<span class=\"token punctuation\">\\</span>deepll<span class=\"token punctuation\">\\</span>Lib<span class=\"token punctuation\">\\</span>site-packages<span class=\"token punctuation\">\\</span>torchvision<span class=\"token punctuation\">\\</span>image.pyd<span class=\"token string\">' (or one of its dependencies). Try using the full path with constructor syntax.'</span>If you don't plan on using image functionality from <span class=\"token variable\"><span class=\"token variable\">`</span>torchvision.io<span class=\"token variable\">`</span></span>, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have <span class=\"token variable\"><span class=\"token variable\">`</span>libjpeg<span class=\"token variable\">`</span></span> or <span class=\"token variable\"><span class=\"token variable\">`</span>libpng<span class=\"token variable\">`</span></span> installed before building <span class=\"token variable\"><span class=\"token variable\">`</span>torchvision<span class=\"token variable\">`</span></span> from source?\n  warn<span class=\"token punctuation\">(</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>解决方案</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate deepl <span class=\"token comment\"># 激活对应环境</span>\nconda <span class=\"token function\">install</span> libjepg-turbo\nconda <span class=\"token function\">install</span> libpng<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>若有其他缺少库报错，安装对应库即可，可以参考文章<a href=\"https://0xdadream.github.io/2025/02/18/python-ku-bao-cuo-hui-zong/\">python库报错汇总 | 逐梦</a></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>通过本教程，你已成功配置Intel显卡的AI开发环境，并验证了IPEX的GPU加速支持。接下来可尝试运行AI模型（如Stable Diffusion、LLM推理），并通过环境变量 <code>LIBOMPTARGET_PLUGIN=LEVEL0</code> 或 <code>SYCL_CACHE_PERSISTENT=1</code> 进一步优化性能。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit-download.html\">获取英特尔® oneAPI Base Toolkit</a></p>\n<p><a href=\"https://intel.github.io/intel-extension-for-pytorch/\">Welcome to Intel® Extension for PyTorch* Documentation!</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1dKaMeXE3B/?vd_source=b809bacd004cf290c08f612fa076f2eb\">intel arc 显卡 ComfyUI 安装教程_哔哩哔哩_bilibili</a></p>\n<p><a href=\"https://blog.csdn.net/yunying985/article/details/140589680\">AI绘画 | 只要10步让你在英特尔A770显卡下安装ComfyUI运行StableDiffusion3最新开源模型_arc a750 安装comfyui-CSDN博客</a></p>\n<p><a href=\"https://pytorch.org/docs/main/notes/get_start_xpu.html\">Getting Started on Intel GPU — PyTorch main documentation</a></p>\n",
            "tags": [
                "intel"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/15/powershell-pei-zhi-mu-lu/",
            "url": "https://0xdadream.github.io/2025/02/15/powershell-pei-zhi-mu-lu/",
            "title": "powershell配置目录",
            "date_published": "2025-02-15T13:25:00.000Z",
            "content_html": "<h1 id=\"powershell配置目录\"><a href=\"#powershell配置目录\" class=\"headerlink\" title=\"powershell配置目录\"></a>powershell配置目录</h1><p>执行命令<code>$PROFILE</code>会得到类似于<code>C:\\Users\\xxx\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1</code>的目录</p>\n<p>这个目录的文件就是你的powershell预执行的命令，相当于每次启动powershell都行执行一遍</p>\n<p>然后这个目录还会存powershell的安装的插件文件，备份这个文件，即使卸载重装配置也不会变，但是要注意不同版本命令可能不一样。</p>\n",
            "tags": [
                "命令行"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/12/emby-shi-yong/",
            "url": "https://0xdadream.github.io/2025/02/12/emby-shi-yong/",
            "title": "emby使用",
            "date_published": "2025-02-12T04:25:00.000Z",
            "content_html": "<h1 id=\"emby使用\"><a href=\"#emby使用\" class=\"headerlink\" title=\"emby使用\"></a>emby使用</h1><h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h2><ul>\n<li><p>核对信息</p>\n<p>确认你已获得完整的信息：</p>\n<ul>\n<li>服务器地址（通常为一个 URL 或 IP 地址）</li>\n<li>端口号（如果提供了非默认端口，需要特别注意）</li>\n<li>连接协议（通常为 http 或 https）</li>\n<li>如有账号和密码或令牌信息，也要一并准备好</li>\n</ul>\n</li>\n<li><p><strong>网络要求</strong><br>由于“机场节点”往往用于突破网络限制，确保你的设备已根据要求连接 VPN 或配置代理（如果提供方有说明需要）。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-在-Emby-客户端中添加服务器\"><a href=\"#2-在-Emby-客户端中添加服务器\" class=\"headerlink\" title=\"2. 在 Emby 客户端中添加服务器\"></a>2. 在 Emby 客户端中添加服务器</h2><h3 id=\"（1）安装-Emby-客户端\"><a href=\"#（1）安装-Emby-客户端\" class=\"headerlink\" title=\"（1）安装 Emby 客户端\"></a>（1）安装 Emby 客户端</h3><ul>\n<li>到<a href=\"https://t.me/GentleSecretary\">Telegram: Contact @GentleSecretary</a>搜索emby下载对应版本（首选）</li>\n<li>在安卓手机上，可从 Google Play 商店或其他应用市场下载安装官方 Emby 客户端（这个需要开会员）</li>\n<li>也可以使用第三方支持 Emby 协议的播放器（如 Infuse、Fileball 等）</li>\n</ul>\n<h3 id=\"（2）进入服务器设置\"><a href=\"#（2）进入服务器设置\" class=\"headerlink\" title=\"（2）进入服务器设置\"></a>（2）进入服务器设置</h3><ul>\n<li>打开 Emby 客户端后，进入【设置】或【服务器设置】页面，或者直接弹出填写页面。</li>\n<li>选择“添加服务器”或“连接到服务器”的选项。</li>\n</ul>\n<h3 id=\"（3）填写服务器地址\"><a href=\"#（3）填写服务器地址\" class=\"headerlink\" title=\"（3）填写服务器地址\"></a>（3）填写服务器地址</h3><ul>\n<li><p>在“服务器地址”栏中输入你获得的地址，格式一般为：</p>\n<ul>\n<li><code>http://服务器地址:端口</code> 或者 <code>https://服务器地址:端口</code><br>例如，如果你的地址为 <code>http://123.45.67.89</code>，而端口为 8096，则填写：</li>\n<li><code>http://123.45.67.89:8096</code></li>\n</ul>\n</li>\n<li><p>注意：建议去除地址末尾多余的斜杠“/”，以免影响连接。（参考“线路说明”中对地址格式的建议 </p>\n<p><a href=\"https://wiki.freeembyguide.eu.org/docs/guide/server\">wiki.freeembyguide.eu.org</a>）</p>\n</li>\n</ul>\n<h3 id=\"（4）连接测试\"><a href=\"#（4）连接测试\" class=\"headerlink\" title=\"（4）连接测试\"></a>（4）连接测试</h3><ul>\n<li>填写后，点击“连接”或“测试连接”。</li>\n<li>如果服务器运行正常且网络环境（或 VPN/代理）配置正确，客户端会自动加载媒体库。</li>\n</ul>\n<hr>\n<h2 id=\"3-登录与账号验证\"><a href=\"#3-登录与账号验证\" class=\"headerlink\" title=\"3. 登录与账号验证\"></a>3. 登录与账号验证</h2><ul>\n<li>如果该 Emby 机场服务要求身份验证，系统会提示你输入账号和密码。</li>\n<li>输入正确的账号信息后，继续操作即可访问媒体资源。</li>\n</ul>\n<hr>\n<h2 id=\"4-高级设置（仅适用于管理人员或自建服务器）\"><a href=\"#4-高级设置（仅适用于管理人员或自建服务器）\" class=\"headerlink\" title=\"4. 高级设置（仅适用于管理人员或自建服务器）\"></a>4. 高级设置（仅适用于管理人员或自建服务器）</h2><p>如果你自己搭建 Emby 服务器并挂接了硬盘存储，可能还需要：</p>\n<ul>\n<li><p>配置媒体库</p>\n<p>在 Emby 服务器管理后台，设置媒体库的路径为硬盘挂载目录。这样服务器才能正确扫描并整理硬盘中的影音文件。（更多细节可参考 CSDN 上关于挂接硬盘的说明 </p>\n<p><a href=\"https://wenku.csdn.net/answer/7f9bf651623542dea45bafc64aed261c\">wenku.csdn.net</a>）</p>\n</li>\n<li><p><strong>网络加速和直连设置</strong><br>有些机场节点提供多条优化线路（直连或代理），如果遇到播放卡顿或加载慢的情况，可尝试切换线路或调整客户端的播放质量设置。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-常见问题及排查\"><a href=\"#5-常见问题及排查\" class=\"headerlink\" title=\"5. 常见问题及排查\"></a>5. 常见问题及排查</h2><ul>\n<li>无法连接服务器<ul>\n<li>检查网络环境，确保已开启必要的 VPN/代理。</li>\n<li>再次核对地址和端口是否输入正确。</li>\n</ul>\n</li>\n<li>播放卡顿或加载缓慢<ul>\n<li>可能与服务器负载或网络带宽有关，尝试使用代理访问。</li>\n<li>查看是否有备用线路，或者联系服务提供方反馈问题。</li>\n</ul>\n</li>\n<li>SSL 证书错误<ul>\n<li>如果使用 https 出现证书问题，确认是否需要手动安装信任证书，或联系服务提供方了解详细要求。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "emby"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/11/google-hacking-shi-yong-gai-jin-ban/",
            "url": "https://0xdadream.github.io/2025/02/11/google-hacking-shi-yong-gai-jin-ban/",
            "title": "google hacking使用-改进版",
            "date_published": "2025-02-11T04:25:00.000Z",
            "content_html": "<h1 id=\"google-hacking使用-改进版\"><a href=\"#google-hacking使用-改进版\" class=\"headerlink\" title=\"google hacking使用-改进版\"></a>google hacking使用-改进版</h1><p>以下是 <strong>Google Hacking 的完整语法列表</strong>和<strong>高级组合示例</strong>，涵盖渗透测试、信息收集、漏洞挖掘等场景的实用技巧。所有语法均基于 Google 搜索引擎的合法功能，但请严格遵守法律和道德规范。</p>\n<hr>\n<h3 id=\"一、完整-Google-Hacking-语法列表\"><a href=\"#一、完整-Google-Hacking-语法列表\" class=\"headerlink\" title=\"一、完整 Google Hacking 语法列表\"></a><strong>一、完整 Google Hacking 语法列表</strong></h3><h4 id=\"1-基础操作符\"><a href=\"#1-基础操作符\" class=\"headerlink\" title=\"1. 基础操作符\"></a><strong>1. 基础操作符</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>site:</code></td>\n<td align=\"left\">限定搜索特定域名或子域名</td>\n<td align=\"left\"><code>site:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>intitle:</code></td>\n<td align=\"left\">标题包含关键词</td>\n<td align=\"left\"><code>intitle:\"login\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>allintitle:</code></td>\n<td align=\"left\">标题包含所有指定关键词</td>\n<td align=\"left\"><code>allintitle:\"admin\" \"dashboard\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>inurl:</code></td>\n<td align=\"left\">URL 路径包含关键词</td>\n<td align=\"left\"><code>inurl:/admin</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>allinurl:</code></td>\n<td align=\"left\">URL 路径包含所有指定关键词</td>\n<td align=\"left\"><code>allinurl:login.php?user=</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>filetype:</code></td>\n<td align=\"left\">搜索特定文件类型</td>\n<td align=\"left\"><code>filetype:pdf \"confidential\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>ext:</code></td>\n<td align=\"left\">按文件扩展名搜索（同 <code>filetype:</code>）</td>\n<td align=\"left\"><code>ext:sql \"password\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>intext:</code></td>\n<td align=\"left\">正文内容包含关键词</td>\n<td align=\"left\"><code>intext:\"数据库密码\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>allintext:</code></td>\n<td align=\"left\">正文包含所有指定关键词</td>\n<td align=\"left\"><code>allintext:\"username\" \"password\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>cache:</code></td>\n<td align=\"left\">查看 Google 缓存的页面</td>\n<td align=\"left\"><code>cache:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>related:</code></td>\n<td align=\"left\">查找类似网站</td>\n<td align=\"left\"><code>related:github.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>info:</code></td>\n<td align=\"left\">获取网站的 Google 摘要信息</td>\n<td align=\"left\"><code>info:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>define:</code></td>\n<td align=\"left\">搜索词语定义</td>\n<td align=\"left\"><code>define:SQL注入</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"2-逻辑操作符\"><a href=\"#2-逻辑操作符\" class=\"headerlink\" title=\"2. 逻辑操作符\"></a><strong>2. 逻辑操作符</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>AND</code> 或空格</td>\n<td align=\"left\">同时满足多个条件</td>\n<td align=\"left\"><code>site:example.com 密码</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>OR</code></td>\n<td align=\"left\">满足任意一个条件</td>\n<td align=\"left\"><code>漏洞 OR 后门</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">排除关键词</td>\n<td align=\"left\"><code>登录 -site:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>()</code></td>\n<td align=\"left\">组合复杂逻辑</td>\n<td align=\"left\"><code>(inurl:admin OR intitle:admin) -论坛</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"3-高级操作符\"><a href=\"#3-高级操作符\" class=\"headerlink\" title=\"3. 高级操作符\"></a><strong>3. 高级操作符</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">通配符（匹配任意字符）</td>\n<td align=\"left\"><code>\"username:* password:*\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\"...\"</code></td>\n<td align=\"left\">精确匹配短语</td>\n<td align=\"left\"><code>\"您的密码错误\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>..</code></td>\n<td align=\"left\">数值范围搜索</td>\n<td align=\"left\"><code>价格 $100..$500</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>AROUND(N)</code></td>\n<td align=\"left\">关键词间距不超过 N 个词</td>\n<td align=\"left\"><code>\"密码\" AROUND(5) \"泄露\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>weather:</code></td>\n<td align=\"left\">搜索某地天气</td>\n<td align=\"left\"><code>weather:北京</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>stocks:</code></td>\n<td align=\"left\">搜索股票代码</td>\n<td align=\"left\"><code>stocks:GOOG</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"4-隐藏功能\"><a href=\"#4-隐藏功能\" class=\"headerlink\" title=\"4. 隐藏功能\"></a><strong>4. 隐藏功能</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>时间筛选</strong></td>\n<td align=\"left\">限定时间范围（通过搜索工具栏）</td>\n<td align=\"left\">最近一年、自定义日期</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>图片搜索</strong></td>\n<td align=\"left\">通过图片反向搜索敏感信息</td>\n<td align=\"left\">上传图片查找来源</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>地图数据</strong></td>\n<td align=\"left\">搜索暴露的地理标记信息</td>\n<td align=\"left\"><code>intitle:\"security camera\" site:google.com/maps</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"二、组合示例大全（按场景分类）\"><a href=\"#二、组合示例大全（按场景分类）\" class=\"headerlink\" title=\"二、组合示例大全（按场景分类）\"></a><strong>二、组合示例大全</strong>（按场景分类）</h3><h4 id=\"1-敏感文件泄露\"><a href=\"#1-敏感文件泄露\" class=\"headerlink\" title=\"1. 敏感文件泄露\"></a><strong>1. 敏感文件泄露</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>数据库备份</strong></td>\n<td align=\"left\"><code>filetype:sql \"DROP TABLE\" site:example.com</code></td>\n<td align=\"left\">搜索 SQL 备份文件</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>配置文件</strong></td>\n<td align=\"left\"><code>intitle:\"index of\" \"config.php\"</code></td>\n<td align=\"left\">查找 PHP 配置文件</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>日志文件</strong></td>\n<td align=\"left\"><code>ext:log \"error\" \"password\"</code></td>\n<td align=\"left\">包含密码的日志文件</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>密钥文件</strong></td>\n<td align=\"left\"><code>filetype:key private</code></td>\n<td align=\"left\">私钥文件泄露</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-后台与登录页面\"><a href=\"#2-后台与登录页面\" class=\"headerlink\" title=\"2. 后台与登录页面\"></a><strong>2. 后台与登录页面</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>管理员后台</strong></td>\n<td align=\"left\"><code>intitle:\"admin login\" inurl:/admin</code></td>\n<td align=\"left\">未授权访问的管理页面</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>默认密码</strong></td>\n<td align=\"left\"><code>\"默认密码\" site:routerlogin.net</code></td>\n<td align=\"left\">设备默认凭据</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>弱口令提示</strong></td>\n<td align=\"left\"><code>intext:\"用户名或密码错误\" inurl:login</code></td>\n<td align=\"left\">登录页面错误信息</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-漏洞利用\"><a href=\"#3-漏洞利用\" class=\"headerlink\" title=\"3. 漏洞利用\"></a><strong>3. 漏洞利用</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>SQL 注入点</strong></td>\n<td align=\"left\"><code>inurl:\"id=\" &amp; intext:\"Warning: mysql\"</code></td>\n<td align=\"left\">存在报错信息的注入点</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>目录遍历</strong></td>\n<td align=\"left\"><code>intitle:\"index of /\" \"parent directory\"</code></td>\n<td align=\"left\">开放目录列表</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>API 接口暴露</strong></td>\n<td align=\"left\"><code>inurl:/api/v1 intext:\"apikey\"</code></td>\n<td align=\"left\">泄露的 API 密钥</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-设备与系统\"><a href=\"#4-设备与系统\" class=\"headerlink\" title=\"4. 设备与系统\"></a><strong>4. 设备与系统</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>网络摄像头</strong></td>\n<td align=\"left\"><code>inurl:/view.shtml intitle:\"Live View\"</code></td>\n<td align=\"left\">公开的摄像头流</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>路由器管理</strong></td>\n<td align=\"left\"><code>intitle:\"RouterOS\" \"admin\"</code></td>\n<td align=\"left\">未授权的路由器配置页面</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>打印机控制台</strong></td>\n<td align=\"left\"><code>inurl:\"/hp/device/this.LCDispatcher\"</code></td>\n<td align=\"left\">惠普打印机管理界面</td>\n</tr>\n</tbody></table>\n<h4 id=\"5-开源情报（OSINT）\"><a href=\"#5-开源情报（OSINT）\" class=\"headerlink\" title=\"5. 开源情报（OSINT）\"></a><strong>5. 开源情报（OSINT）</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>员工信息</strong></td>\n<td align=\"left\"><code>site:linkedin.com \"CTO\" \"example.com\"</code></td>\n<td align=\"left\">通过 LinkedIn 收集员工职位</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>文档元数据</strong></td>\n<td align=\"left\"><code>filetype:docx \"作者：张三\"</code></td>\n<td align=\"left\">从 Office 文档提取创建者信息</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>GitHub 泄露</strong></td>\n<td align=\"left\"><code>\"github.com\" \"password\" extension:env</code></td>\n<td align=\"left\">GitHub 中的敏感环境变量文件</td>\n</tr>\n</tbody></table>\n<h4 id=\"6-错误信息泄露\"><a href=\"#6-错误信息泄露\" class=\"headerlink\" title=\"6. 错误信息泄露\"></a><strong>6. 错误信息泄露</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>调试模式</strong></td>\n<td align=\"left\"><code>intext:\"DEBUG MODE\" \"PHP\"</code></td>\n<td align=\"left\">开启调试模式的网站</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>数据库报错</strong></td>\n<td align=\"left\"><code>\"ORA-12541: TNS 无监听程序\"</code></td>\n<td align=\"left\">Oracle 数据库错误信息</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>堆栈跟踪</strong></td>\n<td align=\"left\"><code>intext:\"at java.lang.Thread\"</code></td>\n<td align=\"left\">Java 应用崩溃日志</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"三、高阶组合技巧\"><a href=\"#三、高阶组合技巧\" class=\"headerlink\" title=\"三、高阶组合技巧\"></a><strong>三、高阶组合技巧</strong></h3><h4 id=\"1-通配符与模糊搜索\"><a href=\"#1-通配符与模糊搜索\" class=\"headerlink\" title=\"1. 通配符与模糊搜索\"></a><strong>1. 通配符与模糊搜索</strong></h4><ul>\n<li>搜索带参数的 URL：<br><code>inurl:*.php?id= *</code></li>\n<li>查找密码重置链接：<br><code>\"password reset\" site:example.com inurl:token=*</code></li>\n</ul>\n<h4 id=\"2-时间范围限定\"><a href=\"#2-时间范围限定\" class=\"headerlink\" title=\"2. 时间范围限定\"></a><strong>2. 时间范围限定</strong></h4><ul>\n<li>查找近期泄露的数据库：<br><code>filetype:sql \"INSERT INTO users\" after:2023-01-01</code></li>\n</ul>\n<h4 id=\"3-混合逻辑精准定位\"><a href=\"#3-混合逻辑精准定位\" class=\"headerlink\" title=\"3. 混合逻辑精准定位\"></a><strong>3. 混合逻辑精准定位</strong></h4><ul>\n<li>排除干扰结果：<br><code>(intitle:\"管理后台\" OR inurl:/admin) -site:gov.cn</code></li>\n<li>组合文件类型与关键词：<br><code>filetype:xls \"员工工资\" site:example.com</code></li>\n</ul>\n<h4 id=\"4-利用错误消息\"><a href=\"#4-利用错误消息\" class=\"headerlink\" title=\"4. 利用错误消息\"></a><strong>4. 利用错误消息</strong></h4><ul>\n<li>发现 SQL 注入漏洞：<br><code>\"You have an error in your SQL syntax\"</code></li>\n<li>识别配置错误：<br><code>\"Access denied for user 'root'@'localhost'\"</code></li>\n</ul>\n<hr>\n<h3 id=\"四、防御建议（补充）\"><a href=\"#四、防御建议（补充）\" class=\"headerlink\" title=\"四、防御建议（补充）\"></a><strong>四、防御建议（补充）</strong></h3><ol>\n<li><strong>robots.txt 配置</strong>：禁止爬虫访问敏感路径（如 <code>/admin</code>、<code>/config</code>）。</li>\n<li><strong>文件权限控制</strong>：避免将备份文件（<code>.bak</code>、<code>.sql</code>）存放在 Web 目录。</li>\n<li><strong>错误信息隐藏</strong>：自定义错误页面，避免暴露堆栈跟踪。</li>\n<li><strong>定期搜索自身</strong>：用 <code>site:yourdomain.com</code> 检查公开信息泄露。</li>\n</ol>\n<hr>\n<h3 id=\"五、工具增强\"><a href=\"#五、工具增强\" class=\"headerlink\" title=\"五、工具增强\"></a><strong>五、工具增强</strong></h3><ul>\n<li><strong>Google Dork 自动化</strong>：<ul>\n<li><a href=\"https://www.exploit-db.com/google-hacking-database\">GHDB</a>：直接搜索预定义的漏洞语法。</li>\n<li><a href=\"https://github.com/...\">DorkGenius</a>：自动生成高级 Dork 语句。</li>\n</ul>\n</li>\n<li><strong>监控与告警</strong>：<ul>\n<li>使用 <code>Google Alerts</code> 监控公司关键词（如 <code>site:example.com password</code>）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"六、合法与道德提醒\"><a href=\"#六、合法与道德提醒\" class=\"headerlink\" title=\"六、合法与道德提醒\"></a><strong>六、合法与道德提醒</strong></h3><ul>\n<li><strong>仅用于授权测试</strong>：渗透前需获得书面许可。</li>\n<li><strong>漏洞报告</strong>：发现漏洞后联系管理员，参考《<a href=\"https://www.rfc-editor.org/rfc/rfc9116\">漏洞披露规范</a>》。</li>\n<li><strong>避免敏感数据</strong>：示例中的关键词均为演示用途，请勿针对真实系统测试。</li>\n</ul>\n<h3 id=\"七、语法解析与示例\"><a href=\"#七、语法解析与示例\" class=\"headerlink\" title=\"七、语法解析与示例\"></a>七、<strong>语法解析与示例</strong></h3><h4 id=\"1-index-of-admin\"><a href=\"#1-index-of-admin\" class=\"headerlink\" title=\"1. index of /admin\"></a><strong>1. <code>index of /admin</code></strong></h4><ul>\n<li><strong>用途</strong>：搜索开放目录列表中的 <code>/admin</code> 目录（常见管理后台路径）。</li>\n<li><strong>风险</strong>：暴露后台登录页面、未授权访问管理界面。</li>\n<li><strong>防御</strong>：禁用目录列表（Apache: <code>Options -Indexes</code>），设置访问权限（如 IP 白名单）。</li>\n</ul>\n<h4 id=\"2-index-of-passwd\"><a href=\"#2-index-of-passwd\" class=\"headerlink\" title=\"2. index of /passwd\"></a><strong>2. <code>index of /passwd</code></strong></h4><ul>\n<li><strong>用途</strong>：查找 Unix/Linux 系统中的 <code>/etc/passwd</code> 文件（用户账户信息）。</li>\n<li><strong>风险</strong>：泄露用户名、UID/GID 等敏感信息（现代系统密码存储在 <code>/etc/shadow</code>）。</li>\n<li><strong>防御</strong>：确保 <code>/etc/passwd</code> 文件权限为 <code>644</code>，禁止 Web 访问系统文件。</li>\n</ul>\n<h4 id=\"3-index-of-password\"><a href=\"#3-index-of-password\" class=\"headerlink\" title=\"3. index of /password\"></a><strong>3. <code>index of /password</code></strong></h4><ul>\n<li><strong>用途</strong>：搜索包含 “password” 关键词的目录或文件（如明文密码文件）。</li>\n<li><strong>风险</strong>：直接获取明文密码或哈希值。</li>\n<li><strong>防御</strong>：避免在代码或文件中明文存储密码，使用环境变量或密钥管理服务。</li>\n</ul>\n<h4 id=\"4-index-of-mail\"><a href=\"#4-index-of-mail\" class=\"headerlink\" title=\"4. index of /mail\"></a><strong>4. <code>index of /mail</code></strong></h4><ul>\n<li><strong>用途</strong>：查找邮件服务器或邮件存储目录（如 <code>/var/mail</code>）。</li>\n<li><strong>风险</strong>：泄露用户邮件内容、账户信息。</li>\n<li><strong>防御</strong>：限制邮件目录的 Web 访问权限，加密存储敏感数据。</li>\n</ul>\n<h4 id=\"5-“index-of-“-passwd\"><a href=\"#5-“index-of-“-passwd\" class=\"headerlink\" title=\"5. “index of /“ +passwd\"></a><strong>5. <code>“index of /“ +passwd</code></strong></h4><ul>\n<li><strong>用途</strong>：在根目录下搜索 <code>passwd</code> 文件。</li>\n<li><strong>示例结果</strong>：可能发现 <code>/etc/passwd</code> 被错误链接到 Web 根目录。</li>\n<li><strong>防御</strong>：检查 Web 目录中是否存在符号链接到系统文件。</li>\n</ul>\n<h4 id=\"6-“index-of-“-password-txt\"><a href=\"#6-“index-of-“-password-txt\" class=\"headerlink\" title=\"6. “index of /“ +password.txt\"></a><strong>6. <code>“index of /“ +password.txt</code></strong></h4><ul>\n<li><strong>用途</strong>：查找 Web 根目录下的 <code>password.txt</code> 文件。</li>\n<li><strong>风险</strong>：明文密码文件可直接下载。</li>\n<li><strong>防御</strong>：删除测试或临时文件，禁用目录列表。</li>\n</ul>\n<h4 id=\"7-“index-of-“-htaccess\"><a href=\"#7-“index-of-“-htaccess\" class=\"headerlink\" title=\"7. “index of /“ +.htaccess\"></a><strong>7. <code>“index of /“ +.htaccess</code></strong></h4><ul>\n<li><strong>用途</strong>：暴露 Apache 服务器的 <code>.htaccess</code> 配置文件。</li>\n<li><strong>风险</strong>：泄露重定向规则、认证凭据（如 <code>AuthUserFile</code> 路径）。</li>\n<li><strong>防御</strong>：限制 <code>.htaccess</code> 文件权限（如 <code>600</code>），避免存储敏感信息。</li>\n</ul>\n<h4 id=\"8-“index-of-root”\"><a href=\"#8-“index-of-root”\" class=\"headerlink\" title=\"8. “index of /root”\"></a><strong>8. <code>“index of /root”</code></strong></h4><ul>\n<li><strong>用途</strong>：搜索 Unix 系统超级用户（root）的主目录。</li>\n<li><strong>风险</strong>：泄露 root 用户的 SSH 密钥、脚本或日志。</li>\n<li><strong>防御</strong>：确保 <code>/root</code> 目录权限为 <code>700</code>，禁止 Web 服务器访问。</li>\n</ul>\n<h4 id=\"9-“index-of-cgi-bin”\"><a href=\"#9-“index-of-cgi-bin”\" class=\"headerlink\" title=\"9. “index of /cgi-bin”\"></a><strong>9. <code>“index of /cgi-bin”</code></strong></h4><ul>\n<li><strong>用途</strong>：查找 CGI 脚本目录（常见于老旧系统）。</li>\n<li><strong>风险</strong>：利用 CGI 漏洞（如 Shellshock）执行远程代码。</li>\n<li><strong>防御</strong>：升级或禁用 CGI 模块，设置严格的脚本权限。</li>\n</ul>\n<h4 id=\"10-“index-of-logs”\"><a href=\"#10-“index-of-logs”\" class=\"headerlink\" title=\"10. “index of /logs”\"></a><strong>10. <code>“index of /logs”</code></strong></h4><ul>\n<li><strong>用途</strong>：暴露日志文件目录（如访问日志、错误日志）。</li>\n<li><strong>风险</strong>：日志中可能包含敏感信息（如 SQL 错误中的数据库密码）。</li>\n<li><strong>防御</strong>：将日志存储在非 Web 目录，定期清理并加密存档。</li>\n</ul>\n<h4 id=\"11-“index-of-config”\"><a href=\"#11-“index-of-config”\" class=\"headerlink\" title=\"11. “index of /config”\"></a><strong>11. <code>“index of /config”</code></strong></h4><ul>\n<li><strong>用途</strong>：查找配置文件目录（如数据库连接信息）。</li>\n<li><strong>风险</strong>：泄露 <code>config.php</code>、<code>settings.ini</code> 等文件。</li>\n<li><strong>防御</strong>：将配置文件移出 Web 目录，使用环境变量注入配置。</li>\n</ul>\n",
            "tags": [
                "google"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/01/17/linux-she-zhi-matplotlib-zhong-wen-zi-ti/",
            "url": "https://0xdadream.github.io/2025/01/17/linux-she-zhi-matplotlib-zhong-wen-zi-ti/",
            "title": "linux设置matplotlib中文字体",
            "date_published": "2025-01-17T04:25:00.000Z",
            "content_html": "<h1 id=\"linux设置matplotlib中文字体\"><a href=\"#linux设置matplotlib中文字体\" class=\"headerlink\" title=\"linux设置matplotlib中文字体\"></a>linux设置matplotlib中文字体</h1><p>在Linux上设置Matplotlib使用中文字体的步骤如下：</p>\n<h3 id=\"步骤-1-安装中文字体\"><a href=\"#步骤-1-安装中文字体\" class=\"headerlink\" title=\"步骤 1: 安装中文字体\"></a>步骤 1: 安装中文字体</h3><p>去<a href=\"https://github.com/StellarCN/scp_zh/blob/master/fonts/SimHei.ttf\">scp_zh/fonts/SimHei.ttf at master · StellarCN/scp_zh</a>下载中文字体</p>\n<h4 id=\"安装SimHei字体\"><a href=\"#安装SimHei字体\" class=\"headerlink\" title=\"安装SimHei字体\"></a>安装SimHei字体</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">import matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport pandas as pd\n\n# 设置中文字体\nrcParams['font.sans-serif'] = ['SimHei']  # 或者使用 'Microsoft YaHei'\nrcParams['axes.unicode_minus'] = False  # 解决负号显示问题\n\n# 示例数据\ndata = {'日期': ['2024-01-01', '2024-01-02', '2024-01-03'],\n        '销售额': [150, 200, 250]}\ndf = pd.DataFrame(data)\n\n# 绘制图表\nplt.plot(df['日期'], df['销售额'])\nplt.title('销售额趋势')\nplt.xlabel('日期')\nplt.ylabel('销售额')\nplt.xticks(rotation=45)\nplt.show()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行命令找到配置目录</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> matplotlib\nmatplotlib<span class=\"token punctuation\">.</span>matplotlib_fname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># xxx/matplotlib/matplotlibrc</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改文件<code>matplotlibrc</code>，找到<code>font.sans-serif: DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif, SimHei</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vim matplotlibrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>SimHei</code>就是我添加的中文字体</p>\n<p>删除缓存</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/.cache/matplotlib\n<span class=\"token function\">rm</span> * <span class=\"token parameter variable\">-r</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"步骤-2-配置Matplotlib使用中文字体\"><a href=\"#步骤-2-配置Matplotlib使用中文字体\" class=\"headerlink\" title=\"步骤 2: 配置Matplotlib使用中文字体\"></a>步骤 2: 配置Matplotlib使用中文字体</h3><p>测试代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> rcParams\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 设置中文字体</span>\nrcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'font.sans-serif'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'SimHei'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 或者使用 'Microsoft YaHei'</span>\nrcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'axes.unicode_minus'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># 解决负号显示问题</span>\n\n<span class=\"token comment\"># 示例数据</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'日期'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2024-01-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2024-01-02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2024-01-03'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'销售额'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制图表</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'日期'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'销售额'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'销售额趋势'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'日期'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'销售额'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>rotation<span class=\"token operator\">=</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/01/12/pandas-shi-yong/",
            "url": "https://0xdadream.github.io/2025/01/12/pandas-shi-yong/",
            "title": "pandas使用",
            "date_published": "2025-01-12T04:25:00.000Z",
            "content_html": "<h1 id=\"pandas使用\"><a href=\"#pandas使用\" class=\"headerlink\" title=\"pandas使用\"></a>pandas使用</h1><p><strong>教程框架：</strong></p>\n<ol>\n<li><strong>Pandas 简介与安装</strong><ul>\n<li>什么是 pandas？</li>\n<li>为什么使用 pandas？</li>\n<li>如何安装 pandas？</li>\n</ul>\n</li>\n<li><strong>Pandas 数据结构：Series</strong><ul>\n<li>Series 的创建</li>\n<li>Series 的索引与切片</li>\n<li>Series 的基本操作（算术、逻辑、函数应用）</li>\n<li>Series 的常用属性和方法</li>\n</ul>\n</li>\n<li><strong>Pandas 数据结构：DataFrame</strong><ul>\n<li>DataFrame 的创建</li>\n<li>DataFrame 的索引与选择数据</li>\n<li>DataFrame 的基本操作<ul>\n<li>添加、删除列</li>\n<li>修改数据</li>\n<li>排序</li>\n</ul>\n</li>\n<li>DataFrame 的常用属性和方法</li>\n<li>数据清洗</li>\n</ul>\n</li>\n<li><strong>Pandas 数据操作</strong><ul>\n<li>数据分组 (GroupBy)</li>\n<li>数据聚合 (Aggregation)</li>\n<li>数据合并 (Merge, Join)</li>\n<li>数据连接 (Concat)</li>\n<li>数据透视表 (Pivot Table)</li>\n</ul>\n</li>\n<li><strong>Pandas 文件读写</strong><ul>\n<li>读取 CSV 文件</li>\n<li>读取 Excel 文件</li>\n<li>读取其他类型文件</li>\n<li>写入文件</li>\n</ul>\n</li>\n<li><strong>Pandas 时间序列数据处理</strong><ul>\n<li>时间戳 (Timestamp)</li>\n<li>时间范围 (Date Range)</li>\n<li>时间重采样 (Resampling)</li>\n</ul>\n</li>\n<li><strong>Pandas 高级应用</strong><ul>\n<li>apply 和 applymap 函数</li>\n<li>窗口函数</li>\n<li>数据可视化</li>\n</ul>\n</li>\n<li><strong>总结与进阶</strong><ul>\n<li>常用技巧</li>\n<li>学习资源</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-Pandas-简介与安装\"><a href=\"#1-Pandas-简介与安装\" class=\"headerlink\" title=\"1. Pandas 简介与安装\"></a><strong>1. Pandas 简介与安装</strong></h3><p><strong>1.1 什么是 pandas？</strong></p>\n<p>Pandas 是一个强大的 Python 数据分析库，它提供了高效的数据结构和数据分析工具。Pandas 的核心是两种数据结构：Series 和 DataFrame，它们使得数据处理变得简单快捷。</p>\n<ul>\n<li><strong>Series:</strong> 一维的、带标签的数组，类似于带索引的列表。</li>\n<li><strong>DataFrame:</strong> 二维的、表格型的数据结构，可以看作是 Series 的容器。</li>\n</ul>\n<p><strong>1.2 为什么使用 pandas？</strong></p>\n<ul>\n<li><strong>数据处理能力强:</strong> Pandas 提供了各种数据操作功能，如数据清洗、转换、切片、聚合、合并等。</li>\n<li><strong>高效的数据结构:</strong> Series 和 DataFrame 的设计使得数据操作和分析速度快。</li>\n<li><strong>与 NumPy 集成:</strong> Pandas 基于 NumPy 构建，可以无缝地与 NumPy 数组进行交互。</li>\n<li><strong>文件读写方便:</strong> Pandas 可以轻松读取和写入各种格式的文件，如 CSV、Excel、JSON、SQL 等。</li>\n<li><strong>数据可视化支持:</strong> Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。</li>\n<li><strong>易用性:</strong> Pandas 的 API 设计简洁易懂，上手快。</li>\n</ul>\n<p><strong>1.3 如何安装 pandas？</strong></p>\n<p>推荐使用 pip 来安装 pandas：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">pip install pandas<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你使用的是 Anaconda，pandas 通常会预装，如果没有，也可以用 conda 安装：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">conda install pandas<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>安装验证:</strong></p>\n<p>打开你的 Python 解释器或 Jupyter Notebook，输入以下代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果正确打印出 pandas 的版本号，就说明安装成功了。</p>\n<hr>\n<h3 id=\"2-Pandas-数据结构：Series\"><a href=\"#2-Pandas-数据结构：Series\" class=\"headerlink\" title=\"2. Pandas 数据结构：Series\"></a><strong>2. Pandas 数据结构：Series</strong></h3><p><strong>2.1 Series 的创建</strong></p>\n<p>Series 是一种一维的、带有标签（索引）的数据结构。它可以存储各种数据类型，如整数、浮点数、字符串、布尔值等。</p>\n<p><strong>2.1.1 从列表创建 Series</strong></p>\n<p>最简单的创建方式是从 Python 的列表创建：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>    <span class=\"token number\">10</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">20</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">30</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">40</span>\n<span class=\"token number\">4</span>    <span class=\"token number\">50</span>\ndtype: int64\n<span class=\"token operator\">&lt;</span>class <span class=\"token string\">'pandas.core.series.Series'</span><span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>默认情况下，Series 会自动创建从 0 开始的整数索引。</li>\n<li>dtype: int64 表示数据类型是 64 位整数。</li>\n</ul>\n<p><strong>2.1.2 从 NumPy 数组创建 Series</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\narr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>    <span class=\"token number\">1.1</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">2.2</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">3.3</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">4.4</span>\n<span class=\"token number\">4</span>    <span class=\"token number\">5.5</span>\ndtype: float64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>dtype: float64 表示数据类型是 64 位浮点数。</li>\n</ul>\n<p><strong>2.1.3 从字典创建 Series</strong></p>\n<p>字典的键会成为 Series 的索引，值会成为 Series 的数据：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">}</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a    <span class=\"token number\">100</span>\nb    <span class=\"token number\">200</span>\nc    <span class=\"token number\">300</span>\ndtype: int64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.1.4 自定义索引</strong></p>\n<p>可以在创建 Series 时指定索引：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\nindex <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>index<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">x    <span class=\"token number\">10</span>\ny    <span class=\"token number\">20</span>\nz    <span class=\"token number\">30</span>\ndtype: int64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.2 Series 的索引与切片</strong></p>\n<p>类似于列表和字典，可以使用索引来访问 Series 的元素。</p>\n<p><strong>2.2.1 通过位置索引访问</strong></p>\n<p>使用默认的整数索引：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 b    20</span>\n             <span class=\"token comment\">#      c    30</span>\n             <span class=\"token comment\">#      dtype: int64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.2.2 通过自定义索引访问</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 b    20</span>\n                <span class=\"token comment\">#      c    30</span>\n                <span class=\"token comment\">#      d    40</span>\n                <span class=\"token comment\">#      dtype: int64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.3 Series 的基本操作</strong></p>\n<p><strong>2.3.1 算术运算</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 加法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">*</span> s2<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 乘法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s2 <span class=\"token operator\">/</span> s1<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 除法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Series 会按照索引对齐进行计算。</p>\n<p><strong>2.3.2 逻辑运算</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 布尔值 Series</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>s <span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 选择大于20的元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.3.3 函数应用</strong></p>\n<p>可以使用 apply() 方法将函数应用于 Series 的每个元素：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">**</span><span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.4 Series 的常用属性和方法</strong></p>\n<ul>\n<li>values: 返回 Series 的值，以 NumPy 数组的形式。</li>\n<li>index: 返回 Series 的索引。</li>\n<li>dtype: 返回 Series 的数据类型。</li>\n<li>size: 返回 Series 的元素个数。</li>\n<li>unique(): 返回 Series 中唯一的值。</li>\n<li>value_counts(): 返回每个值出现的次数。</li>\n<li>head(n): 返回前 n 个元素。</li>\n<li>tail(n): 返回后 n 个元素。</li>\n<li>sort_values(): 对 Series 的值进行排序。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 输出 [10 20 10 30 20]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 输出 RangeIndex(start=0, stop=5, step=1)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 输出 int64</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>        <span class=\"token comment\"># 输出 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 输出 [10 20 30]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出 10    2</span>\n                         <span class=\"token comment\">#  20    2</span>\n                         <span class=\"token comment\">#  30    1</span>\n                         <span class=\"token comment\"># dtype: int64</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 输出 0    10</span>\n                         <span class=\"token comment\">#      1    20</span>\n                         <span class=\"token comment\">#      dtype: int64</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 0    10</span>\n                       <span class=\"token comment\">#      2    10</span>\n                       <span class=\"token comment\">#      1    20</span>\n                       <span class=\"token comment\">#      4    20</span>\n                       <span class=\"token comment\">#      3    30</span>\n                       <span class=\"token comment\">#      dtype: int64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"3-Pandas-数据结构：DataFrame\"><a href=\"#3-Pandas-数据结构：DataFrame\" class=\"headerlink\" title=\"3. Pandas 数据结构：DataFrame\"></a><strong>3. Pandas 数据结构：DataFrame</strong></h3><p><strong>3.1 DataFrame 的创建</strong></p>\n<p>DataFrame 是一个二维的表格型数据结构，可以看作是 Series 的容器。它由行和列组成，每一列可以是不同的数据类型。</p>\n<p><strong>3.1.1 从字典创建 DataFrame</strong></p>\n<p>字典的键会成为 DataFrame 的列名，值会成为 DataFrame 的列数据：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">name  age      city\n<span class=\"token number\">0</span>    Alice   <span class=\"token number\">25</span>  New York\n<span class=\"token number\">1</span>      Bob   <span class=\"token number\">30</span>    London\n<span class=\"token number\">2</span>  Charlie   <span class=\"token number\">28</span>     Paris<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.1.2 从列表创建 DataFrame</strong></p>\n<p>可以使用列表的列表或 NumPy 数组创建 DataFrame，需要指定列名：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">name  age      city\n<span class=\"token number\">0</span>    Alice   <span class=\"token number\">25</span>  New York\n<span class=\"token number\">1</span>      Bob   <span class=\"token number\">30</span>    London\n<span class=\"token number\">2</span>  Charlie   <span class=\"token number\">28</span>     Paris<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.1.3 从 Series 创建 DataFrame</strong></p>\n<p>可以将多个 Series 组合成一个 DataFrame：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\nname <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nage <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncity <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> city<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">name  age      city\n<span class=\"token number\">0</span>    Alice   <span class=\"token number\">25</span>  New York\n<span class=\"token number\">1</span>      Bob   <span class=\"token number\">30</span>    London\n<span class=\"token number\">2</span>  Charlie   <span class=\"token number\">28</span>     Paris<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.2 DataFrame 的索引与选择数据</strong></p>\n<p><strong>3.2.1 选择列</strong></p>\n<p>可以使用列名来选择 DataFrame 的一列或多列：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择 'name' 列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择 'name' 和 'age' 列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.2.2 选择行</strong></p>\n<p>可以使用 loc 和 iloc 来选择行：</p>\n<ul>\n<li>loc：通过行标签（索引）选择行。</li>\n<li>iloc：通过行位置（整数索引）选择行。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 通过标签选择 Alice 这行，按标签</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 通过位置选择 第一行，按位置</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择前两行所有列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 通过标签选择 Alice 到 Bob 行的所有列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.2.3 选择特定元素</strong></p>\n<p>可以使用行和列的标签或位置来选择特定的元素：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择第 0 行 'name' 列的元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择第 0 行 第 0 列的元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3 DataFrame 的基本操作</strong></p>\n<p><strong>3.3.1 添加列</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 添加 'gender' 列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3.2 删除列</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'gender'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删除 'gender' 列，axis=1 表示列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3.3 修改数据</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">26</span> <span class=\"token comment\"># 修改第 0 行 'age' 列的值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3.4 排序</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 按 'age' 列降序排序</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.4 DataFrame 的常用属性和方法</strong></p>\n<ul>\n<li>shape: 返回 DataFrame 的形状（行数，列数）。</li>\n<li>index: 返回 DataFrame 的行索引。</li>\n<li>columns: 返回 DataFrame 的列索引。</li>\n<li>dtypes: 返回 DataFrame 每列的数据类型。</li>\n<li>head(n): 返回 DataFrame 的前 n 行。</li>\n<li>tail(n): 返回 DataFrame 的后 n 行。</li>\n<li>info(): 显示 DataFrame 的基本信息，包括列名，数据类型，非空值数量等。</li>\n<li>describe(): 返回 DataFrame 的统计摘要。</li>\n<li>dropna(): 删除包含缺失值的行或列。</li>\n<li>fillna(): 填充缺失值。</li>\n</ul>\n<p><strong>3.5 数据清洗</strong></p>\n<p>数据清洗是数据分析中重要的一步，包括处理缺失值、重复值等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Unknown'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 检测缺失值</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除包含缺失值的行</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>drop_duplicates<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删除重复行</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 用平均值填充年龄缺失值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"4-Pandas-数据操作\"><a href=\"#4-Pandas-数据操作\" class=\"headerlink\" title=\"4. Pandas 数据操作\"></a><strong>4. Pandas 数据操作</strong></h3><p><strong>4.1 数据分组 (GroupBy)</strong></p>\n<p>groupby() 方法允许你根据一个或多个列的值将 DataFrame 分组，然后可以对每个组进行聚合操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'category'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\ngrouped <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'category'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 查看分组情况</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每个分组求和</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每个分组求平均值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.2 数据聚合 (Aggregation)</strong></p>\n<p>聚合操作是对分组后的数据进行汇总计算，如求和、平均值、最大值、最小值等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'category'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ngrouped <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'category'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'max'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'min'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 同时执行多个聚合函数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对指定列执行不同的聚合函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.3 数据合并 (Merge, Join)</strong></p>\n<p>merge() 方法用于将两个 DataFrame 根据共同的列合并在一起，类似于 SQL 的 JOIN 操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndf1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value1'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndf2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value2'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'原始数据'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 内连接(inner join)</span>\nmerged_inner <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'inner'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_inner<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 左连接(left join)</span>\nmerged_left <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'left'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"left join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_left<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 右连接(right join)</span>\nmerged_right <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'right'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_right<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 外连接(outer join)</span>\nmerged_outer <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'outer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outer join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_outer<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.4 数据连接 (Concat)</strong></p>\n<p>concat() 方法用于将两个或多个 DataFrame 沿着指定的轴连接在一起。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndf1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndf2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原始数据:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 垂直连接(默认axis=0)</span>\nconcatenated_vertical <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ignore_index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"垂直连接:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>concatenated_vertical<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 水平连接(axis=1)</span>\nconcatenated_horizontal <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"水平连接:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>concatenated_horizontal<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.5 数据透视表 (Pivot Table)</strong></p>\n<p>pivot_table() 方法用于创建数据透视表，可以根据指定的列对数据进行重塑和汇总。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'date'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2023-01-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-03'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'product'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'sales'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">220</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\npivot_df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>pivot_table<span class=\"token punctuation\">(</span>index<span class=\"token operator\">=</span><span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token string\">'product'</span><span class=\"token punctuation\">,</span> values<span class=\"token operator\">=</span><span class=\"token string\">'sales'</span><span class=\"token punctuation\">,</span> aggfunc<span class=\"token operator\">=</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> fill_value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pivot_df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"5-Pandas-文件读写\"><a href=\"#5-Pandas-文件读写\" class=\"headerlink\" title=\"5. Pandas 文件读写\"></a><strong>5. Pandas 文件读写</strong></h3><p>Pandas 提供了强大的文件读写功能，可以方便地处理各种数据文件。</p>\n<p><strong>5.1 读取 CSV 文件</strong></p>\n<p>CSV (Comma Separated Values) 是一种常见的文本文件格式，用于存储表格数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 读取 CSV 文件</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.csv'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 指定分隔符，如果不是逗号，使用 sep 参数</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取指定列</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.csv'</span><span class=\"token punctuation\">,</span> usecols<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.2 读取 Excel 文件</strong></p>\n<p>Pandas 可以直接读取 Excel 文件（.xls 和 .xlsx）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 读取 Excel 文件</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'data.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取指定 sheet</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'data.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取指定列</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'data.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">,</span> usecols<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.3 读取其他类型文件</strong></p>\n<p>Pandas 还支持读取其他类型的文件，例如：</p>\n<ul>\n<li><strong>JSON</strong>: pd.read_json()</li>\n<li><strong>HTML</strong>: pd.read_html()</li>\n<li><strong>SQL</strong>: pd.read_sql()</li>\n</ul>\n<p><strong>5.4 写入文件</strong></p>\n<p>可以将 DataFrame 写入到不同的文件格式。</p>\n<p><strong>5.4.1 写入 CSV 文件</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 写入 CSV 文件</span>\ndf<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'output.csv'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># index=False 表示不写入行索引</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.4.2 写入 Excel 文件</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 写入 Excel 文件</span>\ndf<span class=\"token punctuation\">.</span>to_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'output.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.4.3 写入其他类型文件</strong></p>\n<ul>\n<li><strong>JSON</strong>: df.to_json()</li>\n<li><strong>HTML</strong>: df.to_html()</li>\n<li><strong>SQL</strong>: df.to_sql()</li>\n</ul>\n<hr>\n<h3 id=\"6-Pandas-时间序列数据处理\"><a href=\"#6-Pandas-时间序列数据处理\" class=\"headerlink\" title=\"6. Pandas 时间序列数据处理\"></a><strong>6. Pandas 时间序列数据处理</strong></h3><p>Pandas 提供了强大的时间序列数据处理能力，可以方便地分析和处理时间序列数据。</p>\n<p><strong>6.1 时间戳 (Timestamp)</strong></p>\n<p>时间戳是表示特定时间点的对象。Pandas 可以使用 pd.Timestamp 创建时间戳。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 创建时间戳</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Timestamp<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-26 12:30:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 从字符串创建时间戳</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>to_datetime<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-26'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>6.2 时间范围 (Date Range)</strong></p>\n<p>pd.date_range() 方法可以创建指定时间范围内的一系列时间戳。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 创建时间范围</span>\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date_range<span class=\"token punctuation\">)</span>\n\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-10-10'</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'W'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date_range<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>periods: 时间戳的数量。</li>\n<li>freq: 时间间隔，如 ‘D’ (天), ‘W’ (周), ‘M’ (月), ‘H’ (小时), ‘T’ (分钟), ‘S’ (秒) 等。</li>\n</ul>\n<p><strong>6.3 时间序列索引</strong></p>\n<p>可以将时间序列数据作为 DataFrame 或 Series 的索引，方便时间序列数据的分析。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token comment\"># 创建时间序列索引</span>\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>date_range<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 使用时间序列索引选择数据</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">[</span><span class=\"token string\">'2023-10-03'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">[</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'2023-10-05'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>6.4 时间重采样 (Resampling)</strong></p>\n<p>resample() 方法可以对时间序列数据进行重采样，例如，将数据从天转换为周或月。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>date_range<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 将日数据重采样为周数据</span>\nweekly_ts <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span><span class=\"token string\">'W'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>weekly_ts<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 将日数据重采样为月数据</span>\nmonthly_ts <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>monthly_ts<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>.mean()：计算重采样后的平均值。</li>\n<li>.sum()：计算重采样后的总和。</li>\n<li>.min()：计算重采样后的最小值。</li>\n<li>.max()：计算重采样后的最大值。</li>\n<li>.first()：计算重采样后的第一个值。</li>\n<li>.last()：计算重采样后的最后一个值。</li>\n</ul>\n<p><strong>6.5 时间序列常用方法</strong></p>\n<ul>\n<li>shift()：移动时间序列数据。</li>\n<li>diff()：计算时间序列数据的差分。</li>\n<li>asfreq()：转换为指定频率。</li>\n<li>rolling()：计算滑动窗口统计量。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>date_range<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 向下移动两个时间单位</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>diff<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计算一阶差分</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>asfreq<span class=\"token punctuation\">(</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> fill_value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#转换为小时频率</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计算窗口为 3 的移动平均</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"7-Pandas-高级应用\"><a href=\"#7-Pandas-高级应用\" class=\"headerlink\" title=\"7. Pandas 高级应用\"></a><strong>7. Pandas 高级应用</strong></h3><p><strong>7.1.1 apply() 函数</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对 Series 应用函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对 DataFrame 的行或列应用函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">row_sum</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>row_sum<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每一行应用求和操作</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>row_sum<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每一列应用求和操作</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>7.1.2 applymap() 函数</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对 DataFrame 的每个元素应用函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_one</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>applymap<span class=\"token punctuation\">(</span>add_one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>7.2 窗口函数</strong></p>\n<p>窗口函数可以对数据窗口进行计算，例如移动平均、滚动求和等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 移动平均</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'rolling_mean'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 累加</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'cumsum'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 窗口最大值</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'rolling_max'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 窗口最小值</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'rolling_min'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>7.3 数据可视化</strong></p>\n<p>Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制折线图</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Random Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Index'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制直方图</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>bins<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Hist Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Frequency'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制散点图</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'x'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Scatter Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制箱线图</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Box Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制饼图</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\nlabels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>pie<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> autopct<span class=\"token operator\">=</span><span class=\"token string\">'%.2f'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Pie Chart Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"8-总结与进阶\"><a href=\"#8-总结与进阶\" class=\"headerlink\" title=\"8. 总结与进阶\"></a><strong>8. 总结与进阶</strong></h3><p><strong>8.1 常用技巧</strong></p>\n<p>在实际使用 pandas 时，以下一些技巧可能会很有帮助：</p>\n<ul>\n<li><p><strong>链式操作：</strong> 可以将多个操作链接在一起，提高代码的可读性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.csv'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 query() 方法：</strong> 可以用更简洁的语法进行数据筛选：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'age &gt; 30 and city == \"New York\"'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 isin() 方法：</strong> 可以检查 Series 或 DataFrame 中的元素是否在给定的列表中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">]</span>\n    df<span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isin<span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 assign() 方法：</strong> 可以添加新的列，同时保留原始 DataFrame：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">(</span>age_plus_ten <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 pipe() 方法：</strong> 可以将 DataFrame 传递给一系列函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">clean_data</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_age</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> df<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">(</span>age_plus_ten <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\ndf<span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>clean_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>add_age<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>8.2 学习资源</strong></p>\n<ul>\n<li><strong>官方文档：</strong> <a href=\"https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/docs/\">pandas documentation</a><ul>\n<li>这是学习 pandas 最权威的资源，包含了所有函数、方法的详细说明和示例。</li>\n</ul>\n</li>\n<li><strong>在线教程：</strong><ul>\n<li><a href=\"https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/docs/user_guide/10min.html\">10 Minutes to pandas</a>: 一个快速上手 pandas 的教程。</li>\n<li><a href=\"https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html\">Pandas Cookbook</a>: 包含各种常见的数据处理问题的解决方案。</li>\n</ul>\n</li>\n<li><strong>书籍：</strong><ul>\n<li>“Python for Data Analysis” by Wes McKinney： pandas 的作者写的书，是学习 pandas 的经典之作。</li>\n</ul>\n</li>\n<li><strong>实践项目：</strong><ul>\n<li>可以尝试一些 Kaggle 上的数据分析项目，将 pandas 应用到实际问题中。</li>\n</ul>\n</li>\n<li><strong>社区：</strong><ul>\n<li>Stack Overflow：在遇到问题时，可以在 Stack Overflow 上搜索或提问。</li>\n<li>GitHub：pandas 也是一个开源项目，可以在 GitHub 上查看源代码，参与贡献。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/01/10/liang-tai-dian-nao-shi-yong-github-pycharm-tong-bu-kai-fa/",
            "url": "https://0xdadream.github.io/2025/01/10/liang-tai-dian-nao-shi-yong-github-pycharm-tong-bu-kai-fa/",
            "title": "两台电脑使用github+pycharm同步开发",
            "date_published": "2025-01-10T04:25:00.000Z",
            "content_html": "<h1 id=\"两台电脑使用github-pycharm同步开发\"><a href=\"#两台电脑使用github-pycharm同步开发\" class=\"headerlink\" title=\"两台电脑使用github+pycharm同步开发\"></a>两台电脑使用github+pycharm同步开发</h1><p>本文介绍如何在两台电脑之间通过 GitHub 和 PyCharm 实现项目的同步开发。</p>\n<hr>\n<h3 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a><strong>一、准备工作</strong></h3><h4 id=\"1-在两台电脑上安装必要工具\"><a href=\"#1-在两台电脑上安装必要工具\" class=\"headerlink\" title=\"1. 在两台电脑上安装必要工具\"></a><strong>1. 在两台电脑上安装必要工具</strong></h4><ul>\n<li><strong>Git</strong>：下载并安装 <a href=\"https://git-scm.com/\">Git</a>。</li>\n<li><strong>PyCharm</strong>：下载并安装 <a href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a>。</li>\n<li><strong>GitHub 账号</strong>：确保已经注册并拥有 GitHub 账号。</li>\n</ul>\n<h4 id=\"2-配置-Git-环境\"><a href=\"#2-配置-Git-环境\" class=\"headerlink\" title=\"2. 配置 Git 环境\"></a><strong>2. 配置 Git 环境</strong></h4><p>在两台电脑上分别配置 Git：</p>\n<ol>\n<li><p><strong>设置用户名和邮箱</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"你的用户名\"</span>\n<span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>生成 SSH 密钥</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen <span class=\"token parameter variable\">-t</span> ed25519 <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"你的邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>按提示生成密钥（存储在 <code>~/.ssh/id_ed25519</code>）。</p>\n</li>\n<li><p>使用以下命令查看并复制公钥内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/.ssh/id_ed25519.pub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>登录 GitHub，进入 <strong>Settings &gt; SSH and GPG keys</strong>，点击 <strong>New SSH key</strong>，将公钥粘贴并保存。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>测试连接</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@github.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果返回：</p>\n<pre class=\"line-numbers language-vbnet\" data-language=\"vbnet\"><code class=\"language-vbnet\">Hi <span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span><span class=\"token comment\">! You've successfully authenticated, but GitHub does not provide shell access.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>表示配置成功。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"二、创建远程仓库并上传项目\"><a href=\"#二、创建远程仓库并上传项目\" class=\"headerlink\" title=\"二、创建远程仓库并上传项目\"></a><strong>二、创建远程仓库并上传项目</strong></h3><h4 id=\"1-创建远程仓库\"><a href=\"#1-创建远程仓库\" class=\"headerlink\" title=\"1. 创建远程仓库\"></a><strong>1. 创建远程仓库</strong></h4><ol>\n<li>登录 GitHub，点击右上角的 <strong>+</strong> &gt; <strong>New repository</strong>。</li>\n<li>填写仓库名称（例如 <code>my_project</code>），选择 <strong>Public</strong> 或 <strong>Private</strong>，然后点击 <strong>Create repository</strong>。</li>\n</ol>\n<h4 id=\"2-将本地项目上传到远程仓库\"><a href=\"#2-将本地项目上传到远程仓库\" class=\"headerlink\" title=\"2. 将本地项目上传到远程仓库\"></a><strong>2. 将本地项目上传到远程仓库</strong></h4><p>在已存在的项目目录中初始化 Git，并推送到远程仓库：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /path/to/your/project\n<span class=\"token function\">git</span> init  <span class=\"token comment\"># 初始化</span>\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>  <span class=\"token comment\"># 提交所有文件到暂存区</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Initial commit\"</span>  <span class=\"token comment\"># 提交到当前分支</span>\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-M</span> main <span class=\"token comment\"># 将当前分支重命名为main，github默认分支为main</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project.git  <span class=\"token comment\"># 绑定远程仓库</span>\n<span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin main <span class=\"token comment\"># 将 main 分支推送到远程仓库，并建立本地与远程分支的关联，添加 -u 参数后，本地的 main 分支会与远程的 main 分支关联起来。这样，后续执行 git pull 或 git push 时，不需要再指定分支名称</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"三、在两台电脑上同步项目\"><a href=\"#三、在两台电脑上同步项目\" class=\"headerlink\" title=\"三、在两台电脑上同步项目\"></a><strong>三、在两台电脑上同步项目</strong></h3><h4 id=\"电脑-A-操作\"><a href=\"#电脑-A-操作\" class=\"headerlink\" title=\"电脑 A 操作\"></a><strong>电脑 A 操作</strong></h4><ol>\n<li><p><strong>克隆远程仓库</strong>： 如果电脑 A 尚未有项目代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project.git\n<span class=\"token builtin class-name\">cd</span> my_project<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果电脑 A 已有代码并已推送到远程仓库，则跳过此步骤。</p>\n</li>\n<li><p><strong>用 PyCharm 打开项目</strong>：</p>\n<ul>\n<li>打开 PyCharm，点击 <strong>File &gt; Open</strong>，选择项目目录。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"电脑-B-操作\"><a href=\"#电脑-B-操作\" class=\"headerlink\" title=\"电脑 B 操作\"></a><strong>电脑 B 操作</strong></h4><ol>\n<li><p><strong>克隆远程仓库</strong>： 在电脑 B 的终端中运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project.git\n<span class=\"token builtin class-name\">cd</span> my_project<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>用 PyCharm 打开项目</strong>：</p>\n<ul>\n<li>打开 PyCharm，点击 <strong>File &gt; Open</strong>，选择项目目录。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"四、日常开发流程\"><a href=\"#四、日常开发流程\" class=\"headerlink\" title=\"四、日常开发流程\"></a><strong>四、日常开发流程</strong></h3><h4 id=\"1-在电脑-A-或-B-上修改代码\"><a href=\"#1-在电脑-A-或-B-上修改代码\" class=\"headerlink\" title=\"1. 在电脑 A 或 B 上修改代码\"></a><strong>1. 在电脑 A 或 B 上修改代码</strong></h4><ol>\n<li><p>使用 PyCharm 编辑代码。</p>\n</li>\n<li><p>在终端或 PyCharm 的 Git 工具窗口中提交更改：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"描述本次更改的内容\"</span>\n<span class=\"token function\">git</span> push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"2-在另一台电脑同步代码\"><a href=\"#2-在另一台电脑同步代码\" class=\"headerlink\" title=\"2. 在另一台电脑同步代码\"></a><strong>2. 在另一台电脑同步代码</strong></h4><p>在另一台电脑上拉取最新代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后继续开发。</p>\n<hr>\n<h3 id=\"五、解决冲突\"><a href=\"#五、解决冲突\" class=\"headerlink\" title=\"五、解决冲突\"></a><strong>五、解决冲突</strong></h3><p>如果两台电脑同时修改了同一个文件并提交，可能会出现冲突。解决方法如下：</p>\n<ol>\n<li><p><strong>拉取代码时提示冲突</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Git 会提示冲突的文件。</p>\n</li>\n<li><p><strong>手动解决冲突</strong>： 打开冲突文件，按照以下格式解决冲突：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n你的修改\n=======\n另一台电脑的修改\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; commit-hash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改为期望的代码并保存。</p>\n</li>\n<li><p><strong>标记冲突已解决并提交</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"解决冲突\"</span>\n<span class=\"token function\">git</span> push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"六、PyCharm-中内置-Git-工具的使用\"><a href=\"#六、PyCharm-中内置-Git-工具的使用\" class=\"headerlink\" title=\"六、PyCharm 中内置 Git 工具的使用\"></a><strong>六、PyCharm 中内置 Git 工具的使用</strong></h3><ol>\n<li><strong>提交代码</strong>：<ul>\n<li>在 PyCharm 界面右上角，点击 <strong>Commit</strong>。</li>\n<li>勾选修改的文件，填写提交信息，然后点击 <strong>Commit</strong> 或 <strong>Commit and Push</strong>。</li>\n</ul>\n</li>\n<li><strong>拉取代码</strong>：<ul>\n<li>点击 <strong>Git &gt; Pull</strong>，选择远程分支，点击 <strong>OK</strong>。</li>\n</ul>\n</li>\n<li><strong>查看分支和日志</strong>：<ul>\n<li>点击 <strong>Git &gt; Log</strong>，查看提交历史和分支结构。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"七、注意事项\"><a href=\"#七、注意事项\" class=\"headerlink\" title=\"七、注意事项\"></a><strong>七、注意事项</strong></h3><ol>\n<li><strong>保持代码同步</strong>：每次在另一台电脑开发前，先执行 <code>git pull</code> 拉取最新代码。</li>\n<li><strong>频繁提交</strong>：尽量将每次修改后的小更新提交到远程仓库，避免产生冲突。</li>\n<li><strong>多人协作时注意分支管理</strong>：可以为不同功能创建分支，完成后再合并到主分支。</li>\n</ol>\n<h3 id=\"八、分支管理\"><a href=\"#八、分支管理\" class=\"headerlink\" title=\"八、分支管理\"></a><strong>八、分支管理</strong></h3><p>当开发新功能或进行实验时，可以使用分支来避免影响主分支。</p>\n<h4 id=\"1-创建和切换分支\"><a href=\"#1-创建和切换分支\" class=\"headerlink\" title=\"1. 创建和切换分支\"></a><strong>1. 创建和切换分支</strong></h4><ul>\n<li><p>创建新分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>切换到新分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或直接创建并切换：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"2-合并分支\"><a href=\"#2-合并分支\" class=\"headerlink\" title=\"2. 合并分支\"></a><strong>2. 合并分支</strong></h4><ul>\n<li><p>切换到主分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>合并新功能分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> merge feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"3-删除分支\"><a href=\"#3-删除分支\" class=\"headerlink\" title=\"3. 删除分支\"></a><strong>3. 删除分支</strong></h4><ul>\n<li><p>删除本地分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>删除远程分支：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin <span class=\"token parameter variable\">--delete</span> feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"九、处理多人协作的冲突\"><a href=\"#九、处理多人协作的冲突\" class=\"headerlink\" title=\"九、处理多人协作的冲突\"></a><strong>九、处理多人协作的冲突</strong></h3><p>如果你在两台电脑之外，还与其他人协作开发，可以通过以下方式优化工作流。</p>\n<h4 id=\"1-定期拉取最新代码\"><a href=\"#1-定期拉取最新代码\" class=\"headerlink\" title=\"1. 定期拉取最新代码\"></a><strong>1. 定期拉取最新代码</strong></h4><p>在本地开发前，确保代码是最新的：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-使用-rebase-整理提交历史\"><a href=\"#2-使用-rebase-整理提交历史\" class=\"headerlink\" title=\"2. 使用 rebase 整理提交历史\"></a><strong>2. 使用 <code>rebase</code> 整理提交历史</strong></h4><p>在同步远程分支时，你可以选择 <code>rebase</code> 方式，使提交历史更加整洁：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull <span class=\"token parameter variable\">--rebase</span> origin main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-使用标签管理版本\"><a href=\"#3-使用标签管理版本\" class=\"headerlink\" title=\"3. 使用标签管理版本\"></a><strong>3. 使用标签管理版本</strong></h4><p>当一个功能开发完成后，可以添加一个标签：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-a</span> v1.0 <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Version 1.0 release\"</span>\n<span class=\"token function\">git</span> push origin v1.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"十、PyCharm-的一些高级-Git-功能\"><a href=\"#十、PyCharm-的一些高级-Git-功能\" class=\"headerlink\" title=\"十、PyCharm 的一些高级 Git 功能\"></a><strong>十、PyCharm 的一些高级 Git 功能</strong></h3><h4 id=\"1-可视化查看分支\"><a href=\"#1-可视化查看分支\" class=\"headerlink\" title=\"1. 可视化查看分支\"></a><strong>1. 可视化查看分支</strong></h4><ul>\n<li>在 PyCharm 界面右下角，点击 <strong>Git 分支名称</strong>，可以查看和切换分支。</li>\n<li>打开 <strong>Git &gt; Log</strong>，可以看到分支结构图和提交历史。</li>\n</ul>\n<h4 id=\"2-解决冲突\"><a href=\"#2-解决冲突\" class=\"headerlink\" title=\"2. 解决冲突\"></a><strong>2. 解决冲突</strong></h4><p>当拉取代码遇到冲突时，PyCharm 提供了图形化工具：</p>\n<ol>\n<li>点击 <strong>Merge Conflicts</strong> 提示框。</li>\n<li>使用 PyCharm 的三栏界面，直观地合并冲突。</li>\n<li>合并完成后，保存并提交。</li>\n</ol>\n<h4 id=\"3-使用变基（Rebase）\"><a href=\"#3-使用变基（Rebase）\" class=\"headerlink\" title=\"3. 使用变基（Rebase）\"></a><strong>3. 使用变基（Rebase）</strong></h4><ul>\n<li>在 PyCharm 中，选择 <strong>VCS &gt; Git &gt; Rebase</strong>，可以直观地重新整理提交。</li>\n</ul>\n<hr>\n<h3 id=\"十一、优化开发体验\"><a href=\"#十一、优化开发体验\" class=\"headerlink\" title=\"十一、优化开发体验\"></a><strong>十一、优化开发体验</strong></h3><h4 id=\"1-配置-gitignore\"><a href=\"#1-配置-gitignore\" class=\"headerlink\" title=\"1. 配置 .gitignore\"></a><strong>1. 配置 <code>.gitignore</code></strong></h4><p>避免将不必要的文件推送到远程仓库。比如 Python 项目常用的 <code>.gitignore</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">__pycache__/\n*.pyc\n*.pyo\n*.log\n.idea/\n.vscode/\n.DS_Store<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将 <code>.gitignore</code> 文件添加到项目根目录，然后提交：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> .gitignore\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"Add .gitignore\"</span>\n<span class=\"token function\">git</span> push<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-提高拉取速度\"><a href=\"#2-提高拉取速度\" class=\"headerlink\" title=\"2. 提高拉取速度\"></a><strong>2. 提高拉取速度</strong></h4><p>如果仓库较大，可以通过浅克隆（仅克隆最近的提交历史）加快速度：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span> <span class=\"token number\">1</span> git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-使用-SSH-配置多个远程地址\"><a href=\"#3-使用-SSH-配置多个远程地址\" class=\"headerlink\" title=\"3. 使用 SSH 配置多个远程地址\"></a><strong>3. 使用 SSH 配置多个远程地址</strong></h4><p>如果有多个远程仓库，可以配置多个 <code>remote</code> 地址：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> backup git@github.com:<span class=\"token operator\">&lt;</span>你的用户名<span class=\"token operator\">&gt;</span>/my_project_backup.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"十二、代码评审（Code-Review）和协作工具\"><a href=\"#十二、代码评审（Code-Review）和协作工具\" class=\"headerlink\" title=\"十二、代码评审（Code Review）和协作工具\"></a><strong>十二、代码评审（Code Review）和协作工具</strong></h3><p>如果需要团队协作，可以用 GitHub 的 Pull Request 功能：</p>\n<ol>\n<li><p>创建一个新分支进行开发。</p>\n</li>\n<li><p>推送分支到远程：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin feature-branch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>在 GitHub 上发起 **Pull Request (PR)**，让团队成员进行代码审查。</p>\n</li>\n<li><p>审查通过后，合并分支。</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"十三、备份与恢复操作\"><a href=\"#十三、备份与恢复操作\" class=\"headerlink\" title=\"十三、备份与恢复操作\"></a><strong>十三、备份与恢复操作</strong></h3><h4 id=\"1-创建仓库副本（Fork）\"><a href=\"#1-创建仓库副本（Fork）\" class=\"headerlink\" title=\"1. 创建仓库副本（Fork）\"></a><strong>1. 创建仓库副本（Fork）</strong></h4><ul>\n<li>如果你想备份项目或创建自己的分支，可以直接在 GitHub 上点击 <strong>Fork</strong>。</li>\n</ul>\n<h4 id=\"2-恢复代码\"><a href=\"#2-恢复代码\" class=\"headerlink\" title=\"2. 恢复代码\"></a><strong>2. 恢复代码</strong></h4><ul>\n<li><p>如果需要回滚到某次提交：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> <span class=\"token operator\">&lt;</span>commit-id<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>查看历史提交记录：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"十四、自动化工作流\"><a href=\"#十四、自动化工作流\" class=\"headerlink\" title=\"十四、自动化工作流\"></a><strong>十四、自动化工作流</strong></h3><h4 id=\"1-使用-GitHub-Actions-自动化任务\"><a href=\"#1-使用-GitHub-Actions-自动化任务\" class=\"headerlink\" title=\"1. 使用 GitHub Actions 自动化任务\"></a><strong>1. 使用 GitHub Actions 自动化任务</strong></h4><p>你可以在 GitHub 上配置 <strong>GitHub Actions</strong>，实现以下功能：</p>\n<ul>\n<li>自动运行测试代码。</li>\n<li>部署代码到服务器。</li>\n</ul>\n<p>示例 <code>.github/workflows/main.yml</code> 文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CI/CD Pipeline\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout code\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Python\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>python@v4\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.8'</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> pip install <span class=\"token punctuation\">-</span>r requirements.txt\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run tests\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> pytest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-使用-PyCharm-的任务管理\"><a href=\"#2-使用-PyCharm-的任务管理\" class=\"headerlink\" title=\"2. 使用 PyCharm 的任务管理\"></a><strong>2. 使用 PyCharm 的任务管理</strong></h4><ul>\n<li>在 PyCharm 中配置 <strong>Tasks &amp; Contexts</strong>，跟踪开发任务和环境状态。</li>\n</ul>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/12/21/geng-gai-windows-powershell-de-zhi-xing-ce-lue/",
            "url": "https://0xdadream.github.io/2024/12/21/geng-gai-windows-powershell-de-zhi-xing-ce-lue/",
            "title": "更改 Windows PowerShell 的执行策略",
            "date_published": "2024-12-21T04:25:00.000Z",
            "content_html": "<h1 id=\"更改-Windows-PowerShell-的执行策略\"><a href=\"#更改-Windows-PowerShell-的执行策略\" class=\"headerlink\" title=\"更改 Windows PowerShell 的执行策略\"></a>更改 Windows PowerShell 的执行策略</h1><h3 id=\"1-打开-PowerShell-以管理员身份运行\"><a href=\"#1-打开-PowerShell-以管理员身份运行\" class=\"headerlink\" title=\"1. 打开 PowerShell 以管理员身份运行\"></a>1. 打开 PowerShell 以管理员身份运行</h3><p>首先，您需要以管理员身份运行 PowerShell：</p>\n<ul>\n<li>按 <code>Win + X</code> 并选择“Windows PowerShell (管理员)”。</li>\n<li>如果您使用的是较新的 Windows 版本，也可以搜索“PowerShell”，右键点击并选择“以管理员身份运行”。</li>\n</ul>\n<h3 id=\"2-检查当前执行策略\"><a href=\"#2-检查当前执行策略\" class=\"headerlink\" title=\"2. 检查当前执行策略\"></a>2. 检查当前执行策略</h3><p>在更改执行策略之前，您可以查看当前的执行策略设置，执行以下命令：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Get-ExecutionPolicy</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该命令将返回当前的执行策略，可能的输出包括：</p>\n<ul>\n<li><code>Restricted</code>（默认策略，不允许执行任何脚本）</li>\n<li><code>RemoteSigned</code>（本地脚本可以运行，下载的脚本需要签名）</li>\n<li><code>Unrestricted</code>（允许所有脚本运行）</li>\n<li><code>ByPass</code>（完全忽略执行策略）</li>\n</ul>\n<h3 id=\"3-修改执行策略\"><a href=\"#3-修改执行策略\" class=\"headerlink\" title=\"3. 修改执行策略\"></a>3. 修改执行策略</h3><p>要更改执行策略，可以使用 <code>Set-ExecutionPolicy</code> 命令。例如，您可以将执行策略更改为 <code>RemoteSigned</code>，这样可以运行本地脚本并允许下载的签名脚本运行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> RemoteSigned<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果您希望设置为不限制脚本执行，可以使用 <code>Unrestricted</code>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> Unrestricted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者，如果您希望脚本完全不受限制（但存在安全风险），可以使用 <code>Bypass</code>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> Bypass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-确认更改\"><a href=\"#4-确认更改\" class=\"headerlink\" title=\"4. 确认更改\"></a>4. 确认更改</h3><p>更改执行策略后，系统会要求您确认。输入 <code>Y</code> 进行确认并按回车。</p>\n<h3 id=\"5-检查执行策略更改是否生效\"><a href=\"#5-检查执行策略更改是否生效\" class=\"headerlink\" title=\"5. 检查执行策略更改是否生效\"></a>5. 检查执行策略更改是否生效</h3><p>再次执行以下命令来确保策略已更新：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Get-ExecutionPolicy</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"6-了解不同的执行策略\"><a href=\"#6-了解不同的执行策略\" class=\"headerlink\" title=\"6. 了解不同的执行策略\"></a>6. 了解不同的执行策略</h3><ul>\n<li><code>Restricted</code>：不允许运行任何脚本（这是默认设置）。</li>\n<li><code>RemoteSigned</code>：允许本地脚本运行，但从互联网下载的脚本需要有效的签名才能运行。</li>\n<li><code>Unrestricted</code>：允许所有脚本运行，但会在运行下载的脚本时给出警告。</li>\n<li><code>Bypass</code>：完全忽略执行策略（适用于临时需求，但有安全隐患）。</li>\n<li><code>AllSigned</code>：要求所有脚本必须由可信的发布者签名，适用于更严格的安全要求。</li>\n</ul>\n<h3 id=\"7-恢复默认执行策略\"><a href=\"#7-恢复默认执行策略\" class=\"headerlink\" title=\"7. 恢复默认执行策略\"></a>7. 恢复默认执行策略</h3><p>如果您希望恢复默认的执行策略，只需执行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> Restricted<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>",
            "tags": [
                "windows",
                "powershell"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/12/13/parsec-jiao-cheng/",
            "url": "https://0xdadream.github.io/2024/12/13/parsec-jiao-cheng/",
            "title": "parsec教程",
            "date_published": "2024-12-13T04:25:00.000Z",
            "content_html": "<h1 id=\"parsec教程\"><a href=\"#parsec教程\" class=\"headerlink\" title=\"parsec教程\"></a>parsec教程</h1><h2 id=\"修改代理\"><a href=\"#修改代理\" class=\"headerlink\" title=\"修改代理\"></a>修改代理</h2><p>找到文件<code>C:\\Users\\用户名\\AppData\\Roaming\\Parsec\\config.josn</code>，修改</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token string\">\"app_proxy\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"value\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>,\n<span class=\"token string\">\"app_proxy_address\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"value\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"127.0.0.1\"</span>\n<span class=\"token punctuation\">}</span>,\n<span class=\"token string\">\"app_proxy_port\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"value\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">10808</span>\n<span class=\"token punctuation\">}</span>,<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参照你的代理端口修改</p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/12/11/pycharm-kuai-jie-jian/",
            "url": "https://0xdadream.github.io/2024/12/11/pycharm-kuai-jie-jian/",
            "title": "pycharm快捷键",
            "date_published": "2024-12-11T04:25:00.000Z",
            "content_html": "<h1 id=\"pycharm快捷键\"><a href=\"#pycharm快捷键\" class=\"headerlink\" title=\"pycharm快捷键\"></a>pycharm快捷键</h1><p>pycharm快捷键</p>\n<p>以下是 PyCharm 在 Windows 上高效开发常用的快捷键列表，按照功能分类：</p>\n<hr>\n<h3 id=\"文件与项目管理\"><a href=\"#文件与项目管理\" class=\"headerlink\" title=\"文件与项目管理\"></a><strong>文件与项目管理</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>打开文件/最近文件</td>\n<td><code>Ctrl + E</code></td>\n</tr>\n<tr>\n<td>查找文件</td>\n<td><code>Ctrl + Shift + N</code></td>\n</tr>\n<tr>\n<td>切换到项目视图</td>\n<td><code>Alt + 1</code></td>\n</tr>\n<tr>\n<td>显示/隐藏工具窗口</td>\n<td><code>Alt + #[1-9]</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"代码导航\"><a href=\"#代码导航\" class=\"headerlink\" title=\"代码导航\"></a><strong>代码导航</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>跳转到声明/定义</td>\n<td><code>Ctrl + B</code> 或 <code>Ctrl + 鼠标左键</code></td>\n</tr>\n<tr>\n<td>返回到上一个位置</td>\n<td><code>Ctrl + Alt + 左箭头</code></td>\n</tr>\n<tr>\n<td>前进到下一个位置</td>\n<td><code>Ctrl + Alt + 右箭头</code></td>\n</tr>\n<tr>\n<td>快速导航到符号（类、方法等）</td>\n<td><code>Ctrl + Shift + Alt + N</code></td>\n</tr>\n<tr>\n<td>显示方法列表</td>\n<td><code>Ctrl + F12</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"代码编辑\"><a href=\"#代码编辑\" class=\"headerlink\" title=\"代码编辑\"></a><strong>代码编辑</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>格式化代码</td>\n<td><code>Ctrl + Alt + L</code></td>\n</tr>\n<tr>\n<td>智能补全（代码补全）</td>\n<td><code>Ctrl + 空格</code></td>\n</tr>\n<tr>\n<td>自动导入</td>\n<td><code>Alt + Enter</code></td>\n</tr>\n<tr>\n<td>多光标选择</td>\n<td><code>Alt + 鼠标左键</code> 或 <code>Ctrl + Alt + Shift + J</code></td>\n</tr>\n<tr>\n<td>快速重构（重命名、提取变量等）</td>\n<td><code>Shift + F6</code></td>\n</tr>\n<tr>\n<td>注释/取消注释行代码</td>\n<td><code>Ctrl + /</code></td>\n</tr>\n<tr>\n<td>注释/取消注释块代码</td>\n<td><code>Ctrl + Shift + /</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"运行与调试\"><a href=\"#运行与调试\" class=\"headerlink\" title=\"运行与调试\"></a><strong>运行与调试</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>运行当前文件</td>\n<td><code>Shift + F10</code></td>\n</tr>\n<tr>\n<td>调试当前文件</td>\n<td><code>Shift + F9</code></td>\n</tr>\n<tr>\n<td>添加断点</td>\n<td><code>Ctrl + F8</code></td>\n</tr>\n<tr>\n<td>步入（Step Into）</td>\n<td><code>F7</code></td>\n</tr>\n<tr>\n<td>步过（Step Over）</td>\n<td><code>F8</code></td>\n</tr>\n<tr>\n<td>跳出（Step Out）</td>\n<td><code>Shift + F8</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"搜索与替换\"><a href=\"#搜索与替换\" class=\"headerlink\" title=\"搜索与替换\"></a><strong>搜索与替换</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>全局搜索</td>\n<td><code>Ctrl + Shift + F</code></td>\n</tr>\n<tr>\n<td>替换</td>\n<td><code>Ctrl + R</code></td>\n</tr>\n<tr>\n<td>在文件中搜索</td>\n<td><code>Ctrl + F</code></td>\n</tr>\n<tr>\n<td>查找下一个</td>\n<td><code>F3</code></td>\n</tr>\n<tr>\n<td>查找上一个</td>\n<td><code>Shift + F3</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a><strong>版本控制</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查看版本历史（当前文件）</td>\n<td><code>Ctrl + Shift + A</code> 然后输入 <code>File History</code></td>\n</tr>\n<tr>\n<td>提交变更</td>\n<td><code>Ctrl + K</code></td>\n</tr>\n<tr>\n<td>更新项目</td>\n<td><code>Ctrl + T</code></td>\n</tr>\n<tr>\n<td>显示版本控制窗口</td>\n<td><code>Alt + 9</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"通用快捷键\"><a href=\"#通用快捷键\" class=\"headerlink\" title=\"通用快捷键\"></a><strong>通用快捷键</strong></h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>搜索动作（如功能、设置等）</td>\n<td><code>Ctrl + Shift + A</code></td>\n</tr>\n<tr>\n<td>打开设置</td>\n<td><code>Ctrl + Alt + S</code></td>\n</tr>\n<tr>\n<td>切换全屏模式</td>\n<td><code>Ctrl + Shift + F11</code></td>\n</tr>\n<tr>\n<td>显示代码提示信息</td>\n<td><code>Ctrl + Q</code></td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/12/01/wsl-he-windows-hu-xiang-fang-wen/",
            "url": "https://0xdadream.github.io/2024/12/01/wsl-he-windows-hu-xiang-fang-wen/",
            "title": "WSL 与 Windows 互相访问教程",
            "date_published": "2024-12-01T04:25:00.000Z",
            "content_html": "<h1 id=\"WSL-与-Windows-互相访问教程\"><a href=\"#WSL-与-Windows-互相访问教程\" class=\"headerlink\" title=\"WSL 与 Windows 互相访问教程\"></a><strong>WSL 与 Windows 互相访问教程</strong></h1><p>以下教程将介绍如何在 WSL 和 Windows 系统之间互相访问文件并实现无缝交互。</p>\n<hr>\n<h2 id=\"一、Windows-访问-WSL-文件\"><a href=\"#一、Windows-访问-WSL-文件\" class=\"headerlink\" title=\"一、Windows 访问 WSL 文件\"></a><strong>一、Windows 访问 WSL 文件</strong></h2><h3 id=\"方法-1：通过网络路径访问\"><a href=\"#方法-1：通过网络路径访问\" class=\"headerlink\" title=\"方法 1：通过网络路径访问\"></a><strong>方法 1：通过网络路径访问</strong></h3><p>WSL 文件系统挂载在 Windows 网络路径 <code>\\\\wsl$</code> 下，可以直接访问。</p>\n<ol>\n<li><p><strong>打开文件资源管理器或命令行：</strong> 在地址栏或命令行输入以下路径：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>wsl$<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>发行版名称<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">\\</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>wsl$<span class=\"token punctuation\">\\</span>Ubuntu<span class=\"token punctuation\">\\</span>home<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>直接访问 WSL 文件：</strong></p>\n<ul>\n<li><p>文件资源管理器中可以像操作普通文件夹一样管理文件。</p>\n</li>\n<li><p>在命令行中可以使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>wsl$<span class=\"token punctuation\">\\</span>Ubuntu<span class=\"token punctuation\">\\</span>home<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>\n<span class=\"token function\">dir</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>优点：</strong></p>\n<ul>\n<li>直接访问，无需额外配置。</li>\n<li>文件路径自动挂载，无权限问题。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"方法-2：通过挂载路径访问\"><a href=\"#方法-2：通过挂载路径访问\" class=\"headerlink\" title=\"方法 2：通过挂载路径访问\"></a><strong>方法 2：通过挂载路径访问</strong></h3><p>WSL 的文件系统实际上存储在 Windows 用户目录下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Local<span class=\"token punctuation\">\\</span>Packages<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>WSL发行版ID<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">\\</span>LocalState<span class=\"token punctuation\">\\</span>rootfs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a><strong>操作步骤：</strong></h4><ol>\n<li><p><strong>定位路径：</strong> 打开资源管理器，导航到上述路径。</p>\n</li>\n<li><p><strong>通过命令行访问：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"C:\\Users\\&lt;用户名&gt;\\AppData\\Local\\Packages\\&lt;发行版ID&gt;\\LocalState<span class=\"token entity\" title=\"\\r\">\\r</span>ootfs\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<p><strong>注意：</strong></p>\n<ul>\n<li><strong>不要直接修改</strong> <code>LocalState</code> 下的文件，可能导致 WSL 文件系统损坏。</li>\n<li>尽量使用 <code>\\\\wsl$</code> 路径，安全可靠。</li>\n</ul>\n<hr>\n<h3 id=\"方法-3：通过-WSL-挂载目录\"><a href=\"#方法-3：通过-WSL-挂载目录\" class=\"headerlink\" title=\"方法 3：通过 WSL 挂载目录\"></a><strong>方法 3：通过 WSL 挂载目录</strong></h3><p>WSL 可以直接挂载 Windows 文件系统，访问路径为 <code>/mnt/&lt;盘符&gt;</code>。</p>\n<ol>\n<li><p>在 WSL 中访问：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>常见操作：</p>\n<ul>\n<li><p>列出文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>复制文件到 WSL：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents/文件.txt ~/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"二、WSL-访问-Windows-文件\"><a href=\"#二、WSL-访问-Windows-文件\" class=\"headerlink\" title=\"二、WSL 访问 Windows 文件\"></a><strong>二、WSL 访问 Windows 文件</strong></h2><h3 id=\"默认挂载的文件路径\"><a href=\"#默认挂载的文件路径\" class=\"headerlink\" title=\"默认挂载的文件路径\"></a><strong>默认挂载的文件路径</strong></h3><p>WSL 会自动挂载 Windows 的文件系统，所有分区挂载在 <code>/mnt/&lt;盘符&gt;</code> 下。例如：</p>\n<ul>\n<li><code>C:\\</code> 对应 <code>/mnt/c</code></li>\n<li><code>D:\\</code> 对应 <code>/mnt/d</code></li>\n</ul>\n<ol>\n<li><p><strong>列出 Windows 文件：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>复制文件到 WSL：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents/文件.txt ~/wsl目录/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>移动文件到 Windows：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> ~/wsl目录/文件.txt /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Desktop/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"三、实现-WSL-和-Windows-共享目录\"><a href=\"#三、实现-WSL-和-Windows-共享目录\" class=\"headerlink\" title=\"三、实现 WSL 和 Windows 共享目录\"></a><strong>三、实现 WSL 和 Windows 共享目录</strong></h2><h3 id=\"方法-1：在-WSL-中创建软链接\"><a href=\"#方法-1：在-WSL-中创建软链接\" class=\"headerlink\" title=\"方法 1：在 WSL 中创建软链接\"></a><strong>方法 1：在 WSL 中创建软链接</strong></h3><p>如果频繁需要访问某些 Windows 目录，可以通过软链接简化路径。</p>\n<ol>\n<li><p><strong>创建链接：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Documents ~/windows-documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>访问链接：</strong> 直接进入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/windows-documents<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"方法-2：共享-WSL-的目录给-Windows\"><a href=\"#方法-2：共享-WSL-的目录给-Windows\" class=\"headerlink\" title=\"方法 2：共享 WSL 的目录给 Windows\"></a><strong>方法 2：共享 WSL 的目录给 Windows</strong></h3><p>可以通过设置 WSL 中的目录，让 Windows 使用 <code>\\\\wsl$</code> 访问。</p>\n<ol>\n<li><p><strong>在 WSL 中创建目录：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/shared-folder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>在 Windows 中访问：</strong> 打开资源管理器，导航到：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>wsl$<span class=\"token punctuation\">\\</span>Ubuntu<span class=\"token punctuation\">\\</span>home<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">\\</span>shared-folder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"四、在-WSL-和-Windows-间传输文件\"><a href=\"#四、在-WSL-和-Windows-间传输文件\" class=\"headerlink\" title=\"四、在 WSL 和 Windows 间传输文件\"></a><strong>四、在 WSL 和 Windows 间传输文件</strong></h2><h3 id=\"方法-1：直接复制文件\"><a href=\"#方法-1：直接复制文件\" class=\"headerlink\" title=\"方法 1：直接复制文件\"></a><strong>方法 1：直接复制文件</strong></h3><p>可以使用 <code>cp</code> 或 <code>mv</code> 命令实现文件复制或移动。</p>\n<h4 id=\"从-WSL-复制文件到-Windows：\"><a href=\"#从-WSL-复制文件到-Windows：\" class=\"headerlink\" title=\"从 WSL 复制文件到 Windows：\"></a><strong>从 WSL 复制文件到 Windows：</strong></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> ~/文件.txt /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Desktop/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"从-Windows-复制文件到-WSL：\"><a href=\"#从-Windows-复制文件到-WSL：\" class=\"headerlink\" title=\"从 Windows 复制文件到 WSL：\"></a><strong>从 Windows 复制文件到 WSL：</strong></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> /mnt/c/Users/<span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">&gt;</span>/Desktop/文件.txt ~/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"方法-2：使用-explorer-exe-打开-WSL-文件夹\"><a href=\"#方法-2：使用-explorer-exe-打开-WSL-文件夹\" class=\"headerlink\" title=\"方法 2：使用 explorer.exe 打开 WSL 文件夹\"></a><strong>方法 2：使用 <code>explorer.exe</code> 打开 WSL 文件夹</strong></h3><p>在 WSL 中可以直接使用 Windows 的资源管理器访问当前目录：</p>\n<ol>\n<li><p>在 WSL 终端中输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">explorer.exe <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>Windows 文件资源管理器会打开 WSL 当前路径。</p>\n</li>\n</ol>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/28/latex-jiao-cheng/",
            "url": "https://0xdadream.github.io/2024/11/28/latex-jiao-cheng/",
            "title": "latex教程",
            "date_published": "2024-11-28T13:25:00.000Z",
            "content_html": "<h1 id=\"latex教程\"><a href=\"#latex教程\" class=\"headerlink\" title=\"latex教程\"></a>latex教程</h1><p>latex教程</p>\n<p>参考网站：</p>\n<p><a href=\"https://zilutian.github.io/latex-tutorial-chinese/\">LaTeX 教程</a></p>\n<p><a href=\"https://www.latexstudio.net/LearnLaTeX/basic/01.html\">LaTeX 基础 | LaTeX 知识库</a></p>\n<p><a href=\"https://www.latexlive.com/\">在线LaTeX公式编辑器-编辑器</a></p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/28/mi-ma-xue-kun-nan-wen-ti/",
            "url": "https://0xdadream.github.io/2024/11/28/mi-ma-xue-kun-nan-wen-ti/",
            "title": "密码学中的困难问题详解",
            "date_published": "2024-11-28T04:25:00.000Z",
            "content_html": "<h1 id=\"密码学中的困难问题详解\"><a href=\"#密码学中的困难问题详解\" class=\"headerlink\" title=\"密码学中的困难问题详解\"></a>密码学中的困难问题详解</h1><p>密码学中的困难问题详解，密码学的安全性依赖于一些数学上已知的困难问题。这些问题被认为在经典计算机或量子计算机上都难以高效解决。以下是密码学中重要的困难问题分类及详解。</p>\n<hr>\n<h2 id=\"一、离散对数类问题\"><a href=\"#一、离散对数类问题\" class=\"headerlink\" title=\"一、离散对数类问题\"></a>一、离散对数类问题</h2><h3 id=\"1-离散对数问题-Discrete-Logarithm-Problem-DLP\"><a href=\"#1-离散对数问题-Discrete-Logarithm-Problem-DLP\" class=\"headerlink\" title=\"1. 离散对数问题 (Discrete Logarithm Problem, DLP)\"></a>1. 离散对数问题 (Discrete Logarithm Problem, DLP)</h3><p>描述为：<br>给定素数 $p$、生成元 $g$ 和 $h$，求 $x$，使得  $h = g^x \\ (\\text{mod } p)$</p>\n<p>该问题是 Diffie-Hellman 密钥交换和 ElGamal 加密算法的基础。</p>\n<h3 id=\"2-椭圆曲线离散对数问题-Elliptic-Curve-Discrete-Logarithm-Problem-ECDLP\"><a href=\"#2-椭圆曲线离散对数问题-Elliptic-Curve-Discrete-Logarithm-Problem-ECDLP\" class=\"headerlink\" title=\"2. 椭圆曲线离散对数问题 (Elliptic Curve Discrete Logarithm Problem, ECDLP)\"></a>2. 椭圆曲线离散对数问题 (Elliptic Curve Discrete Logarithm Problem, ECDLP)</h3><p>描述为：<br>在椭圆曲线群 $E(F_p)$ 上，给定点 $P$ 和 $Q$，求标量 $k$，使得  $Q = kP$</p>\n<p>ECDLP 是椭圆曲线密码（如 ECDH 和 ECDSA）的核心难题。</p>\n<hr>\n<h2 id=\"二、Diffie-Hellman-类问题\"><a href=\"#二、Diffie-Hellman-类问题\" class=\"headerlink\" title=\"二、Diffie-Hellman 类问题\"></a>二、Diffie-Hellman 类问题</h2><h3 id=\"1-计算性-Diffie-Hellman-问题-Computational-Diffie-Hellman-Problem-CDH\"><a href=\"#1-计算性-Diffie-Hellman-问题-Computational-Diffie-Hellman-Problem-CDH\" class=\"headerlink\" title=\"1. 计算性 Diffie-Hellman 问题 (Computational Diffie-Hellman Problem, CDH)\"></a>1. 计算性 Diffie-Hellman 问题 (Computational Diffie-Hellman Problem, CDH)</h3><p>描述为：<br>给定 $g^a$ 和 $g^b$ （模 $p$），计算 $g^{ab}$。<br>CDH 是构造许多密码协议的基础。</p>\n<h3 id=\"2-决定性-Diffie-Hellman-问题-Decisional-Diffie-Hellman-Problem-DDH\"><a href=\"#2-决定性-Diffie-Hellman-问题-Decisional-Diffie-Hellman-Problem-DDH\" class=\"headerlink\" title=\"2. 决定性 Diffie-Hellman 问题 (Decisional Diffie-Hellman Problem, DDH)\"></a>2. 决定性 Diffie-Hellman 问题 (Decisional Diffie-Hellman Problem, DDH)</h3><p>描述为：<br>给定 $g^a$、$g^b$ 和 $g^c$ （模 $p$），判断 $g^c$ 是否等于 $g^{ab}$。<br>DDH 通常用于构造安全多方计算和伪随机数生成器。</p>\n<h3 id=\"3-广义-Diffie-Hellman-问题-Generalized-Diffie-Hellman-Problem-GDH\"><a href=\"#3-广义-Diffie-Hellman-问题-Generalized-Diffie-Hellman-Problem-GDH\" class=\"headerlink\" title=\"3. 广义 Diffie-Hellman 问题 (Generalized Diffie-Hellman Problem, GDH)\"></a>3. 广义 Diffie-Hellman 问题 (Generalized Diffie-Hellman Problem, GDH)</h3><p>描述为：<br>在群 $G$ 中，给定 $g, g^{x_1}, g^{x_2}, \\dots, g^{x_k}$，计算 $g^{x_1x_2\\dots x_k}$。</p>\n<hr>\n<h2 id=\"三、双线性映射相关问题\"><a href=\"#三、双线性映射相关问题\" class=\"headerlink\" title=\"三、双线性映射相关问题\"></a>三、双线性映射相关问题</h2><h3 id=\"1-双线性-Diffie-Hellman-问题-Bilinear-Diffie-Hellman-Problem-BDH\"><a href=\"#1-双线性-Diffie-Hellman-问题-Bilinear-Diffie-Hellman-Problem-BDH\" class=\"headerlink\" title=\"1. 双线性 Diffie-Hellman 问题 (Bilinear Diffie-Hellman Problem, BDH)\"></a>1. 双线性 Diffie-Hellman 问题 (Bilinear Diffie-Hellman Problem, BDH)</h3><p>在双线性映射 $e: G_1 \\times G_1 \\to G_2$ 中，给定 $g, g^a, g^b, g^c \\in G_1$，计算  $e(g, g)^{abc}$</p>\n<p>这是基于双线性对的密码算法（如配对加密）的基础。</p>\n<h3 id=\"2-决定性双线性-Diffie-Hellman-问题-Decisional-Bilinear-Diffie-Hellman-Problem-DBDH\"><a href=\"#2-决定性双线性-Diffie-Hellman-问题-Decisional-Bilinear-Diffie-Hellman-Problem-DBDH\" class=\"headerlink\" title=\"2. 决定性双线性 Diffie-Hellman 问题 (Decisional Bilinear Diffie-Hellman Problem, DBDH)\"></a>2. 决定性双线性 Diffie-Hellman 问题 (Decisional Bilinear Diffie-Hellman Problem, DBDH)</h3><p>在双线性映射 $e: G_1 \\times G_1 \\to G_2$ 中，给定 $g, g^a, g^b, g^c \\in G_1$ 和 $T \\in G_2$，判断 $T = e(g, g)^{abc}$ 是否成立。</p>\n<h3 id=\"3-广义双线性-Diffie-Hellman-问题-Generalized-Bilinear-Diffie-Hellman-Problem-GBDH\"><a href=\"#3-广义双线性-Diffie-Hellman-问题-Generalized-Bilinear-Diffie-Hellman-Problem-GBDH\" class=\"headerlink\" title=\"3. 广义双线性 Diffie-Hellman 问题 (Generalized Bilinear Diffie-Hellman Problem, GBDH)\"></a>3. 广义双线性 Diffie-Hellman 问题 (Generalized Bilinear Diffie-Hellman Problem, GBDH)</h3><p>GBDH 是 BDH 的推广，允许更多参与者和复杂场景。</p>\n<hr>\n<h2 id=\"四、因子分解类问题\"><a href=\"#四、因子分解类问题\" class=\"headerlink\" title=\"四、因子分解类问题\"></a>四、因子分解类问题</h2><h3 id=\"1-整数分解问题-Integer-Factorization-Problem-IFP\"><a href=\"#1-整数分解问题-Integer-Factorization-Problem-IFP\" class=\"headerlink\" title=\"1. 整数分解问题 (Integer Factorization Problem, IFP)\"></a>1. 整数分解问题 (Integer Factorization Problem, IFP)</h3><p>描述为：<br>给定一个整数 $n = p \\cdot q$，其中 $p$ 和 $q$ 是大素数，求出 $p$ 和 $q$。<br>IFP 是 RSA 和许多公钥密码系统的核心难题。</p>\n<h3 id=\"2-积性同余子群问题\"><a href=\"#2-积性同余子群问题\" class=\"headerlink\" title=\"2. 积性同余子群问题\"></a>2. 积性同余子群问题</h3><p>描述为：<br>在模 $n$ 的群中，给定生成元 $g$ 和目标值 $h$，计算 $x$，使得  $h = g^x \\ (\\text{mod } n)$</p>\n<p>这也是基于整数因子分解的密码系统的难题。</p>\n<hr>\n<h2 id=\"五、格密码相关问题\"><a href=\"#五、格密码相关问题\" class=\"headerlink\" title=\"五、格密码相关问题\"></a>五、格密码相关问题</h2><h3 id=\"1-最短向量问题-Shortest-Vector-Problem-SVP\"><a href=\"#1-最短向量问题-Shortest-Vector-Problem-SVP\" class=\"headerlink\" title=\"1. 最短向量问题 (Shortest Vector Problem, SVP)\"></a>1. 最短向量问题 (Shortest Vector Problem, SVP)</h3><p>描述为：<br>在格 $L$ 中，找到长度最短的非零向量 $\\mathbf{v}$，使得 $\\mathbf{v} \\in L$。<br>SVP 是基于格密码（如 NTRU 和 LWE）的核心难题。</p>\n<h3 id=\"2-最近向量问题-Closest-Vector-Problem-CVP\"><a href=\"#2-最近向量问题-Closest-Vector-Problem-CVP\" class=\"headerlink\" title=\"2. 最近向量问题 (Closest Vector Problem, CVP)\"></a>2. 最近向量问题 (Closest Vector Problem, CVP)</h3><p>描述为：<br>在格 $L$ 中，给定任意点 $\\mathbf{t}$，找到格中距离 $\\mathbf{t}$ 最近的点。</p>\n<h3 id=\"3-学习带误差问题-Learning-with-Errors-LWE\"><a href=\"#3-学习带误差问题-Learning-with-Errors-LWE\" class=\"headerlink\" title=\"3. 学习带误差问题 (Learning with Errors, LWE)\"></a>3. 学习带误差问题 (Learning with Errors, LWE)</h3><p>描述为：<br>给定一组方程 $Ax + e = b$，其中 $A$ 是已知矩阵，$e$ 是小噪声，求未知的 $x$。<br>LWE 是后量子密码学的重要基础。</p>\n<hr>\n<h2 id=\"六、后量子密码相关问题\"><a href=\"#六、后量子密码相关问题\" class=\"headerlink\" title=\"六、后量子密码相关问题\"></a>六、后量子密码相关问题</h2><h3 id=\"1-代码破解问题-Code-based-Problem\"><a href=\"#1-代码破解问题-Code-based-Problem\" class=\"headerlink\" title=\"1. 代码破解问题 (Code-based Problem)\"></a>1. 代码破解问题 (Code-based Problem)</h3><p>描述为：<br>在随机线性码中，给定生成矩阵 $G$ 和加密后的数据，恢复原始消息。<br>这是基于纠错码密码系统（如 McEliece 和 Niederreiter）的核心难题。</p>\n<h3 id=\"2-同源性问题-Isogeny-Problem\"><a href=\"#2-同源性问题-Isogeny-Problem\" class=\"headerlink\" title=\"2. 同源性问题 (Isogeny Problem)\"></a>2. 同源性问题 (Isogeny Problem)</h3><p>描述为：<br>在椭圆曲线同源图中，找到从曲线 $E_1$ 到 $E_2$ 的同源映射。<br>这是基于同源密码的核心问题。</p>\n<hr>\n<h2 id=\"七、困难问题间的关系\"><a href=\"#七、困难问题间的关系\" class=\"headerlink\" title=\"七、困难问题间的关系\"></a>七、困难问题间的关系</h2><p>许多困难问题之间具有复杂的数学关系：</p>\n<ol>\n<li><strong>DLP</strong> 是 <strong>CDH</strong> 的基础，<strong>CDH</strong> 是 <strong>DDH</strong> 的前提条件。</li>\n<li><strong>ECDLP</strong> 是 DLP 的椭圆曲线版本，但安全性更高。</li>\n<li><strong>LWE</strong> 和 <strong>SVP</strong> 是格密码中相互关联的问题。</li>\n<li><strong>IFP</strong> 和 <strong>DLP</strong> 是经典密码的两个主要难题。</li>\n</ol>\n",
            "tags": [
                "密码学"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/27/an-zhuang-pypbc/",
            "url": "https://0xdadream.github.io/2024/11/27/an-zhuang-pypbc/",
            "title": "python安装pypbc",
            "date_published": "2024-11-27T04:25:00.000Z",
            "content_html": "<h1 id=\"python安装pypbc\"><a href=\"#python安装pypbc\" class=\"headerlink\" title=\"python安装pypbc\"></a>python安装pypbc</h1><p>python安装pypbc</p>\n<p>首先我是ubuntu22环境，python版本为3.10</p>\n<p>去<a href=\"https://github.com/debatem1/pypbc\">pypbc</a>把代码全部下载，进去目录<code>pypbc</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> pypbc\npip <span class=\"token function\">install</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>多版本使用对应的pip安装即可，执行完就晚装完成了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip list <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> pypbc  <span class=\"token comment\"># 验证安装</span>\npypbc               <span class=\"token number\">0.2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2024/11/27/typora-shu-xue-fu-hao/",
            "url": "https://0xdadream.github.io/2024/11/27/typora-shu-xue-fu-hao/",
            "title": "typora数学符号",
            "date_published": "2024-11-26T16:25:00.000Z",
            "content_html": "<h1 id=\"typora数学符号\"><a href=\"#typora数学符号\" class=\"headerlink\" title=\"typora数学符号\"></a>typora数学符号</h1><p>Typora 是一个支持 LaTeX 数学公式的优秀 Markdown 编辑器，可以直接编写数学公式并实时渲染。以下是如何在 Typora 中使用数学公式的详细指南：</p>\n<hr>\n<h2 id=\"1-启用数学公式支持\"><a href=\"#1-启用数学公式支持\" class=\"headerlink\" title=\"1. 启用数学公式支持\"></a>1. <strong>启用数学公式支持</strong></h2><p>默认情况下，Typora 支持 LaTeX 格式的数学公式，无需额外设置。如果未生效，请确保已启用数学渲染：</p>\n<ol>\n<li>打开 Typora。</li>\n<li>点击顶部菜单栏的 <strong>File &gt; Preferences（设置）</strong>。</li>\n<li>在设置中，选择 <strong>Markdown</strong> 选项卡。</li>\n<li>确保勾选了 <strong>Enable MathJax</strong> 或 <strong>Enable Katex</strong>，以支持数学公式渲染。</li>\n</ol>\n<hr>\n<h2 id=\"2-数学公式语法\"><a href=\"#2-数学公式语法\" class=\"headerlink\" title=\"2. 数学公式语法\"></a>2. <strong>数学公式语法</strong></h2><h3 id=\"2-1-行内公式\"><a href=\"#2-1-行内公式\" class=\"headerlink\" title=\"2.1 行内公式\"></a>2.1 行内公式</h3><p>在段落中插入公式，使用单个 <code>$</code> 包裹公式内容：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">行内公式示例：$E = mc^2$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>渲染效果： 行内公式示例：$E = mc^2$</p>\n<hr>\n<h3 id=\"2-2-独立公式\"><a href=\"#2-2-独立公式\" class=\"headerlink\" title=\"2.2 独立公式\"></a>2.2 独立公式</h3><p>单独显示的数学公式，使用双 <code>$</code> 或 <code>$$</code> 包裹公式内容：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">独立公式示例：\n$$\n\\int_a^b f(x)dx = F(b) - F(a)\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>\\int_a^b f(x)dx = F(b) - F(a)<br>$$</p>\n<hr>\n<h2 id=\"3-复杂数学公式\"><a href=\"#3-复杂数学公式\" class=\"headerlink\" title=\"3. 复杂数学公式\"></a>3. <strong>复杂数学公式</strong></h2><h3 id=\"示例-1：矩阵\"><a href=\"#示例-1：矩阵\" class=\"headerlink\" title=\"示例 1：矩阵\"></a>示例 1：矩阵</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">矩阵：\n$$\n\\mathbf{A} = \\begin{bmatrix}\n1 &amp; 2 &amp; 3 \\\\\n4 &amp; 5 &amp; 6 \\\\\n7 &amp; 8 &amp; 9\n\\end{bmatrix}\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>\\mathbf{A} = \\begin{bmatrix}<br>1 &amp; 2 &amp; 3 \\<br>4 &amp; 5 &amp; 6 \\<br>7 &amp; 8 &amp; 9<br>\\end{bmatrix}<br>$$</p>\n<hr>\n<h3 id=\"示例-2：分数和开方\"><a href=\"#示例-2：分数和开方\" class=\"headerlink\" title=\"示例 2：分数和开方\"></a>示例 2：分数和开方</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">分数与开方：\n$$\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}<br>$$</p>\n<hr>\n<h3 id=\"示例-3：求和与极限\"><a href=\"#示例-3：求和与极限\" class=\"headerlink\" title=\"示例 3：求和与极限\"></a>示例 3：求和与极限</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">求和与极限：\n$$\n\\sum_{i=1}^n i = \\frac{n(n+1)}{2}, \\quad \\lim_{x \\to \\infty} \\frac{1}{x} = 0\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>\\sum_{i=1}^n i = \\frac{n(n+1)}{2}, \\quad \\lim_{x \\to \\infty} \\frac{1}{x} = 0<br>$$</p>\n<hr>\n<h3 id=\"示例-4：多行公式对齐\"><a href=\"#示例-4：多行公式对齐\" class=\"headerlink\" title=\"示例 4：多行公式对齐\"></a>示例 4：多行公式对齐</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">多行公式对齐：\n$$\n\\begin{aligned}\ny &amp;= mx + b \\\\\nf(x) &amp;= x^2 + 2x + 1\n\\end{aligned}\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>渲染效果：<br>$$<br>\\begin{aligned}<br>y &amp;= mx + b \\<br>f(x) &amp;= x^2 + 2x + 1<br>\\end{aligned}<br>$$</p>\n<hr>\n<h2 id=\"4-快捷键\"><a href=\"#4-快捷键\" class=\"headerlink\" title=\"4. 快捷键\"></a>4. <strong>快捷键</strong></h2><ul>\n<li>使用 <strong><code>Ctrl + T</code></strong> 或 <strong><code>Command + T</code></strong> 可以快速切换公式预览。</li>\n<li>如果希望查看公式源代码，按下 <strong><code>Ctrl + /</code></strong> 或 **<code>Command + /</code>**。</li>\n</ul>\n<hr>\n<p>在 Typora 中，如果需要数学公式与文字紧密排列在一起，可以使用 <strong>行内公式</strong> 格式。具体方法如下：</p>\n<p>偏好设置-&gt;markdown-&gt;勾选内联公式</p>\n<hr>\n<h2 id=\"1-使用-实现行内公式\"><a href=\"#1-使用-实现行内公式\" class=\"headerlink\" title=\"1. 使用 $...$ 实现行内公式\"></a><strong>1. 使用 <code>$...$</code> 实现行内公式</strong></h2><p>行内公式会随着文字的排版而排列，可以直接插入到文字之间。例如：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">爱因斯坦的质能方程为 $E=mc^2$，这是能量和质量关系的基础公式。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：\"><a href=\"#渲染效果：\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>爱因斯坦的质能方程为 $E=mc^2$，这是能量和质量关系的基础公式。</p>\n<hr>\n<h2 id=\"2-注意空格与对齐问题\"><a href=\"#2-注意空格与对齐问题\" class=\"headerlink\" title=\"2. 注意空格与对齐问题\"></a><strong>2. 注意空格与对齐问题</strong></h2><h3 id=\"示例-1：在公式与文字之间增加适当的空格\"><a href=\"#示例-1：在公式与文字之间增加适当的空格\" class=\"headerlink\" title=\"示例 1：在公式与文字之间增加适当的空格\"></a>示例 1：在公式与文字之间增加适当的空格</h3><p>当公式两侧紧挨中文字符时，可能需要手动添加空格，以确保渲染结果美观：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">质量 $m$ 和能量 $E$ 之间的关系为 $E = mc^2$。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：-1\"><a href=\"#渲染效果：-1\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>质量 $m$ 和能量 $E$ 之间的关系为 $E = mc^2$。</p>\n<hr>\n<h3 id=\"示例-2：纯英文情况下，公式无需额外空格\"><a href=\"#示例-2：纯英文情况下，公式无需额外空格\" class=\"headerlink\" title=\"示例 2：纯英文情况下，公式无需额外空格\"></a>示例 2：纯英文情况下，公式无需额外空格</h3><p>在纯英文环境中，公式通常与文字自然对齐，无需调整：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">The equation $E=mc^2$ explains the relationship between energy and mass.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：-2\"><a href=\"#渲染效果：-2\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>The equation $E=mc^2$ explains the relationship between energy and mass.</p>\n<hr>\n<h2 id=\"3-混合行内和块级公式\"><a href=\"#3-混合行内和块级公式\" class=\"headerlink\" title=\"3. 混合行内和块级公式\"></a><strong>3. 混合行内和块级公式</strong></h2><p>如果需要同时包含行内和块级公式，可以灵活使用：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">爱因斯坦提出了著名的公式 $E = mc^2$，用于描述能量和质量的关系。\n\n更详细的表达形式为：\n$$\nE = \\int_a^b f(x) dx\n$$<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：-3\"><a href=\"#渲染效果：-3\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>爱因斯坦提出了著名的公式 $E = mc^2$，用于描述能量和质量的关系。</p>\n<p>更详细的表达形式为：<br>$$<br>E = \\int_a^b f(x) dx<br>$$</p>\n<hr>\n<h2 id=\"4-Typora-自动调整换行\"><a href=\"#4-Typora-自动调整换行\" class=\"headerlink\" title=\"4. Typora 自动调整换行\"></a><strong>4. Typora 自动调整换行</strong></h2><p>如果文字较多且公式插入后自动换行，可以通过调整文字排版来控制公式位置。例如：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">为了进一步验证公式 $E=mc^2$ 的正确性，我们需要对其进行理论推导，涉及到积分与导数等高等数学内容。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"渲染效果：-4\"><a href=\"#渲染效果：-4\" class=\"headerlink\" title=\"渲染效果：\"></a>渲染效果：</h3><p>为了进一步验证公式 $E=mc^2$ 的正确性，我们需要对其进行理论推导，涉及到积分与导数等高等数学内容。</p>\n",
            "tags": [
                "tools"
            ]
        }
    ]
}