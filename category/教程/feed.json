{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦 • All posts by \"教程\" category",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2025/06/29/ben-di-bu-shu-yu-pei-zhi-mcp-fu-wu-qi/",
            "url": "https://0xdadream.github.io/2025/06/29/ben-di-bu-shu-yu-pei-zhi-mcp-fu-wu-qi/",
            "title": "本地部署与配置 MCP 服务器",
            "date_published": "2025-06-28T19:25:00.000Z",
            "content_html": "<h1 id=\"本地部署与配置-MCP-服务器\"><a href=\"#本地部署与配置-MCP-服务器\" class=\"headerlink\" title=\"本地部署与配置 MCP 服务器\"></a>本地部署与配置 MCP 服务器</h1><p>本指南将根据您提供的专业指令，演示如何为两个不同技术栈的 MCP 服务器（一个基于 Python/uv，一个基于 Bun/TypeScript）设置项目、运行服务，并在 Cursor 中进行配置。主要针对wsl。</p>\n<h3 id=\"项目一：mcp-sequential-thinking-Python-环境\"><a href=\"#项目一：mcp-sequential-thinking-Python-环境\" class=\"headerlink\" title=\"项目一：mcp_sequential_thinking (Python 环境)\"></a><strong>项目一：<code>mcp_sequential_thinking</code> (Python 环境)</strong></h3><p>这是一个使用 <code>uv</code> 作为包管理器的 Python 项目。</p>\n<h4 id=\"1-设置项目\"><a href=\"#1-设置项目\" class=\"headerlink\" title=\"1. 设置项目\"></a><strong>1. 设置项目</strong></h4><p>首先，克隆项目仓库（此处使用占位符，请替换为实际仓库地址），并创建虚拟环境。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 克隆你的项目\ngit clone &lt;your-python-mcp-repo-url&gt;\ncd &lt;project-folder&gt;\n\n# 创建并激活虚拟环境\nuv venv\n\n# 激活环境\n# Windows\n.venv\\Scripts\\activate\n# Unix/Linux/macOS\nsource .venv/bin/activate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-安装依赖\"><a href=\"#2-安装依赖\" class=\"headerlink\" title=\"2. 安装依赖\"></a><strong>2. 安装依赖</strong></h4><p><code>uv</code> 提供了灵活的依赖安装选项。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 仅安装核心依赖\nuv pip install -e .\n\n# (推荐开发) 安装核心及测试工具\nuv pip install -e \".[dev]\"\n\n# 安装所有可选依赖\nuv pip install -e \".[all]\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-运行服务器\"><a href=\"#3-运行服务器\" class=\"headerlink\" title=\"3. 运行服务器\"></a><strong>3. 运行服务器</strong></h4><p>您可以通过两种方式启动本地服务器。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 方式一：直接通过模块运行\nuv run -m mcp_sequential_thinking.server\n\n# 方式二：使用安装后生成的脚本\nmcp-sequential-thinking<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>启动后，请留意终端输出，确认服务器正在监听的 <strong>IP 地址和端口号</strong>。</p>\n<h4 id=\"4-可选-运行测试\"><a href=\"#4-可选-运行测试\" class=\"headerlink\" title=\"4. (可选) 运行测试\"></a><strong>4. (可选) 运行测试</strong></h4><p>确保代码质量，可以运行单元测试。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 运行所有测试\npytest\n\n# 运行测试并生成覆盖率报告\npytest --cov=mcp_sequential_thinking<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"项目二：context7-mcp-Bun-环境\"><a href=\"#项目二：context7-mcp-Bun-环境\" class=\"headerlink\" title=\"项目二：context7-mcp (Bun 环境)\"></a><strong>项目二：<code>context7-mcp</code> (Bun 环境)</strong></h3><p>这是一个使用 <code>Bun</code> 作为运行时和工具链的 TypeScript/JavaScript 项目。</p>\n<h4 id=\"1-设置项目-1\"><a href=\"#1-设置项目-1\" class=\"headerlink\" title=\"1. 设置项目\"></a><strong>1. 设置项目</strong></h4><p>克隆 <code>context7</code> 的仓库并使用 <code>bun</code> 安装依赖。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 克隆 context7 项目\ngit clone &lt;your-bun-mcp-repo-url&gt;\ncd &lt;project-folder&gt;\n\n# 安装依赖\nbun i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-构建项目\"><a href=\"#2-构建项目\" class=\"headerlink\" title=\"2. 构建项目\"></a><strong>2. 构建项目</strong></h4><p><code>bun</code> 用于将 TypeScript 源代码编译为可执行的 JavaScript。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">bun run build<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令通常会在 <code>dist</code> 目录下生成输出文件。</p>\n<h4 id=\"3-运行服务器-1\"><a href=\"#3-运行服务器-1\" class=\"headerlink\" title=\"3. 运行服务器\"></a><strong>3. 运行服务器</strong></h4><p>构建完成后，运行服务器并可指定参数。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 基本运行方式\nbun run dist/index.js\n\n# 高级运行方式：指定传输协议和端口\n# 下例将使用 http 协议并在 8080 端口上运行\nbun run dist/index.js --transport http --port 8080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"在-Cursor-中配置本地服务器\"><a href=\"#在-Cursor-中配置本地服务器\" class=\"headerlink\" title=\"在 Cursor 中配置本地服务器\"></a><strong>在 Cursor 中配置本地服务器</strong></h3><p>将本地运行的服务器接入 Cursor 有两种主要方式：</p>\n<h4 id=\"方式一：HTTP-连接-推荐\"><a href=\"#方式一：HTTP-连接-推荐\" class=\"headerlink\" title=\"方式一：HTTP 连接 (推荐)\"></a><strong>方式一：HTTP 连接 (推荐)</strong></h4><p>当您的服务器已经在本地终端中成功运行时，可以使用此方法。</p>\n<ol>\n<li>打开 Cursor 设置，进入 <code>MCP</code> 配置页。</li>\n<li>点击 “Add Server”。</li>\n<li><strong>对于 <code>context7-mcp</code> (假设运行在 8080 端口):</strong><ul>\n<li><strong>Name (名称):</strong> <code>context7-local-http</code></li>\n<li><strong>Type (类型):</strong> <code>http</code></li>\n<li><strong>URL (地址):</strong> <code>http://localhost:8080</code></li>\n</ul>\n</li>\n<li><strong>对于 <code>mcp_sequential_thinking</code>:</strong><ul>\n<li><strong>Name (名称):</strong> <code>sequential-thinking-local-http</code></li>\n<li><strong>Type (类型):</strong> <code>http</code></li>\n<li><strong>URL (地址):</strong> <code>http://localhost:&lt;YOUR_PYTHON_PORT&gt;</code> (请替换为 Python 服务器实际监听的端口号)</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"方式二：Command-命令-由-Cursor-启动\"><a href=\"#方式二：Command-命令-由-Cursor-启动\" class=\"headerlink\" title=\"方式二：Command 命令 (由 Cursor 启动)\"></a><strong>方式二：Command 命令 (由 Cursor 启动)</strong></h4><p>这种方式让 Cursor 在需要时自动执行命令来启动服务器。</p>\n<ol>\n<li><p>打开 Cursor 设置，进入 <code>MCP</code> 配置页。</p>\n</li>\n<li><p>点击 “Add Server”。</p>\n</li>\n<li><p><strong>配置示例 (适用于 TypeScript 项目):</strong></p>\n<ul>\n<li><strong>Name (名称):</strong> <code>context7-local-cmd</code></li>\n<li><strong>Type (类型):</strong> <code>command</code></li>\n<li><strong>Command (命令):</strong> <code>npx tsx /path/to/folder/context7-mcp/src/index.ts</code></li>\n</ul>\n<p><strong>重要提示</strong>: 您必须将 <code>/path/to/folder/context7-mcp/src/index.ts</code> 替换为您本地存放 <code>context7</code> 项目的<strong>绝对路径</strong>。这种方式更适合直接运行源文件，无需手动 <code>build</code> 和 <code>run</code>。</p>\n</li>\n</ol>\n<h4 id=\"书写形式\"><a href=\"#书写形式\" class=\"headerlink\" title=\"书写形式\"></a>书写形式</h4><pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">{\n  \"mcpServers\": {\n    \"sequential-thinking\": {\n      \"command\": \"/home/hero/mcp-sequential-thinking/.venv/bin/mcp-sequential-thinking\",\n      \"cwd\": \"/home/hero/mcp-sequential-thinking\"\n    },\n    \"context7\": {\n      \"command\": \"bun\",\n      \"args\": [\"run\", \"/home/hero/context7/src/index.ts\"]\n    }\n  }\n} <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>自行理解</p>\n<h4 id=\"提示词\"><a href=\"#提示词\" class=\"headerlink\" title=\"提示词\"></a>提示词</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">你是一位具备顺序逻辑推理能力与跨文件代码理解能力的 AI 助手。我希望你结合 Sequential Thinking 插件的多步骤推理能力，以及 Context7 插件的跨上下文代码理解能力，帮助我更清晰、精准地完成以下任务。\n\n请执行以下策略：\n1. 拆分任务为合理的多个思维步骤，并依次处理（Sequential Thinking）。\n2. 若任务涉及多个文件或函数，自动调用 Context7 插件提取和关联上下文。\n3. 在必要时提供逐步思路、函数关系图、模块依赖路径，并解释推理过程。\n4. 保持逻辑清晰，输出建议时标明每一步对应的推理依据。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "mcp"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/06/29/wsl-2-tong-guo-windows-v2rayn-dai-li-shang-wang-quan-wei-zhi-nan-2025-ban/",
            "url": "https://0xdadream.github.io/2025/06/29/wsl-2-tong-guo-windows-v2rayn-dai-li-shang-wang-quan-wei-zhi-nan-2025-ban/",
            "title": "WSL 2 通过 Windows V2RayN 代理上网权威指南 (2025版)",
            "date_published": "2025-06-28T18:25:00.000Z",
            "content_html": "<h1 id=\"WSL-2-通过-Windows-V2RayN-代理上网权威指南-2025版\"><a href=\"#WSL-2-通过-Windows-V2RayN-代理上网权威指南-2025版\" class=\"headerlink\" title=\"WSL 2 通过 Windows V2RayN 代理上网权威指南 (2025版)\"></a>WSL 2 通过 Windows V2RayN 代理上网权威指南 (2025版)</h1><p>本指南为最终版本，包含了所有验证成功的步骤，旨在提供最清晰、最可靠的配置流程。</p>\n<h2 id=\"第一部分：配置-WSL-2\"><a href=\"#第一部分：配置-WSL-2\" class=\"headerlink\" title=\"第一部分：配置 WSL 2\"></a><strong>第一部分：配置 WSL 2</strong></h2><p><strong>核心原理</strong>：WSL 2 拥有独立的虚拟网络，需要将 Windows 主机视为一个“局域网”设备。我们通过获取 Windows 在该网络中的 IP，并在 WSL 中设置带认证的代理来将网络流量导向它。</p>\n<p><strong>第一步：配置 V2RayN (确保设置无误)</strong></p>\n<ol>\n<li><strong>开放局域网连接</strong>：在 V2RayN 的 <code>设置 -&gt; 参数设置 -&gt; V2RayN 设置</code> 中，<strong>必须勾选“允许来自局域网的连接”</strong>。这是整个方案的前提，还要打开为局域网开放端口。</li>\n<li><strong>确认代理参数</strong>：<ul>\n<li><strong>监听端口</strong>：<code>10810</code> (根据您的设置)</li>\n<li><strong>认证用户</strong>：<code>v2rayn填写的用户名</code></li>\n<li><strong>认证密码</strong>：<code>v2rayn填写的密码</code> (不含特殊字符的最终版密码)</li>\n</ul>\n</li>\n<li><strong>Windows 防火墙</strong>：确保在首次开启“允许局域网连接”时，您已在弹出的 Windows Defender 防火墙窗口中，为 V2RayN (或其核心 <code>v2ray.exe</code> / <code>xray.exe</code>) 勾选“专用网络”和“公用网络”并点击了“允许访问”。</li>\n</ol>\n<p><strong>第二步：在 WSL 中获取 Windows 主机 IP</strong></p>\n<ol>\n<li><p>打开您的 WSL 终端。</p>\n</li>\n<li><p>运行以下命令来获取作为默认网关的 Windows 主机 IP 地址。这是最稳定、最推荐的方法。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">ip route show | grep default | awk '{print $3}'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>您会得到一个 <code>172.x.x.x</code> 格式的 IP，请记下它（虽然下面的脚本会自动获取）。</p>\n</li>\n</ol>\n<p><strong>第三步：配置 WSL 终端代理</strong></p>\n<ol>\n<li><p>编辑您的 Shell 配置文件 (如果文件不存在，nano 会自动创建)。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 如果您使用 bash (默认)\nnano ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>将以下<strong>最终版配置代码块</strong>完整地复制并粘贴到文件末尾。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># --- V2RayN Proxy Configuration for WSL (Final Version) ---\n\n# 1. 自动获取作为默认网关的主机 IP (推荐方法)\nexport HOST_IP=$(ip route show | grep default | awk '{print $3}')\n\n# 2. 您的 V2RayN 代理参数\nPROXY_PORT=\"10810\"\nPROXY_USER=\"v2rayn填写的用户名\"\nPROXY_PASS=\"v2rayn填写的密码\"\n\n# 3. 构建包含认证信息的代理 URL\nPROXY_URL=\"http://${PROXY_USER}:${PROXY_PASS}@${HOST_IP}:${PROXY_PORT}\"\n\n# 4. 设置系统环境变量\nexport http_proxy=\"${PROXY_URL}\"\nexport https_proxy=\"${PROXY_URL}\"\nexport all_proxy=\"socks5://${PROXY_USER}:${PROXY_PASS}@${HOST_IP}:${PROXY_PORT}\"\n\n# 5. 设置不走代理的本地地址\nexport no_proxy=\"localhost,127.0.0.1,*.local,${HOST_IP}\"\n\necho \"✅ Proxy enabled for WSL via host ${HOST_IP}\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>保存并退出 (<code>Ctrl+O</code>, <code>Enter</code>, <code>Ctrl+X</code>)。</p>\n</li>\n</ol>\n<p><strong>第四步：配置 APT 包管理器</strong></p>\n<ol>\n<li><p>为 <code>apt</code> 创建专门的代理配置文件：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">sudo nano /etc/apt/apt.conf.d/99proxy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>将以下内容粘贴进去。<strong>请注意</strong>：您需要将 <code>172.x.x.x</code> <strong>手动替换</strong>为第二步中获取到的具体 IP 地址。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">Acquire::http::Proxy \"http://v2rayn填写的用户名:v2rayn填写的密码@172.x.x.x:10810/\";\nAcquire::https::Proxy \"http://v2rayn填写的用户名:v2rayn填写的密码@172.x.x.x:10810/\";<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>保存并退出。</p>\n</li>\n</ol>\n<p><strong>第五步：生效与验证</strong></p>\n<ol>\n<li><p>让终端配置立即生效：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">source ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>用 <code>curl</code> 命令测试网络连接：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">curl -I https://www.google.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>看到 <code>HTTP/2 200</code> 或类似成功响应，即代表 WSL 部分已完美配置。</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"附：手机连接-Windows-V2RayN-代理教程\"><a href=\"#附：手机连接-Windows-V2RayN-代理教程\" class=\"headerlink\" title=\"附：手机连接 Windows V2RayN 代理教程\"></a><strong>附：手机连接 Windows V2RayN 代理教程</strong></h2><p>本教程将指导您如何将手机（安卓或iPhone）通过 Wi-Fi 连接到您电脑上正在运行的 V2RayN 代理。</p>\n<p><strong>核心原理</strong>：手机和电脑必须在同一个局域网（连接同一个Wi-Fi）。手机将电脑视为一个代理服务器，通过电脑的局域网IP地址和V2RayN端口进行连接。</p>\n<p><strong>第一步：查找您 Windows 电脑的局域网 IP 地址</strong></p>\n<p>这个 IP <strong>不是</strong> WSL 里的那个 <code>172.x.x.x</code>，而是您家或办公室路由器分配给电脑的 IP，通常是 <code>192.168.x.x</code> 的格式。</p>\n<ol>\n<li><p>在 Windows 上，按下 <code>Win + R</code> 键，输入 <code>cmd</code> 并回车，打开命令提示符。</p>\n</li>\n<li><p>输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ipconfig<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>在输出信息中找到 “<strong>无线局域网适配器 WLAN</strong>” 或 “<strong>Wireless LAN adapter Wi-Fi</strong>” 部分。记下其 “<strong>IPv4 地址</strong>”，例如 <code>192.168.1.105</code>。</p>\n</li>\n</ol>\n<p><strong>第二步：在手机上配置代理</strong></p>\n<h4 id=\"对于-iPhone-iOS\"><a href=\"#对于-iPhone-iOS\" class=\"headerlink\" title=\"对于 iPhone (iOS)\"></a><strong>对于 iPhone (iOS)</strong></h4><p>iOS 系统原生支持带认证的 HTTP 代理，配置非常简单。</p>\n<ol>\n<li>确保您的 iPhone 已连接到和电脑<strong>相同的 Wi-Fi</strong>。</li>\n<li>进入 **设置 -&gt; 无线局域网 (Wi-Fi)**。</li>\n<li>点击您当前连接的 Wi-Fi 名称右边的 <strong>“i”</strong> 图标。</li>\n<li>滑到页面最底部，找到并点击 <strong>“配置代理”</strong>。</li>\n<li>选择 <strong>“手动”</strong>。</li>\n<li>在 <strong>“服务器”</strong> 栏，输入您电脑的局域网 IP (例如 <code>192.168.1.105</code>)。</li>\n<li>在 <strong>“端口”</strong> 栏，输入 V2RayN 的端口 <code>10810</code>。</li>\n<li><strong>开启 “鉴定” (Authentication) 开关</strong>。</li>\n<li>在 <strong>“用户名”</strong> 中输入 <code>v2rayn填写的用户名</code>。</li>\n<li>在 <strong>“密码”</strong> 中输入 <code>v2rayn填写的密码</code>。</li>\n<li>点击右上角的 <strong>“存储”</strong>。</li>\n</ol>\n<h4 id=\"对于安卓-Android\"><a href=\"#对于安卓-Android\" class=\"headerlink\" title=\"对于安卓 (Android)\"></a><strong>对于安卓 (Android)</strong></h4><p>安卓系统的原生 Wi-Fi 代理设置<strong>不支持</strong>用户名和密码认证。您需要借助第三方 App。</p>\n<ol>\n<li>**原生方法 (如果您的代理无需认证)**：<ul>\n<li>进入 <strong>设置 -&gt; WLAN</strong>，长按您连接的 Wi-Fi，选择“修改网络”。</li>\n<li>在高级选项中找到“代理”，设为“手动”。</li>\n<li>输入电脑的IP和端口。</li>\n<li>(此方法对您当前带认证的设置无效，仅供参考)</li>\n</ul>\n</li>\n<li>**推荐方法 (使用第三方App，支持认证)**：<ul>\n<li>在 Google Play 商店或其它应用市场搜索并安装一个支持 HTTP/SOCKS 认证代理的 App，例如 <strong>ProxyDroid</strong> 或 <strong>V2rayNG</strong> (V2rayNG 本身就可以作为客户端，功能更强大)。</li>\n<li><strong>以 V2rayNG 为例</strong> (更推荐，因为它本身就是 V2Ray 客户端)：<ol>\n<li>打开 V2rayNG，点击右上角的 <strong>“+”</strong> 号，选择 <strong>“手动输入[Socks]”或“[Http]”</strong>。</li>\n<li><strong>别名</strong>：随便填，例如 <code>公司电脑</code>。</li>\n<li>**地址(服务器)**：输入您电脑的局域网 IP (例如 <code>192.168.1.105</code>)。</li>\n<li><strong>端口</strong>：输入 <code>10810</code>。</li>\n<li><strong>用户名</strong>：输入 <code>v2rayn填写的用户名</code>。</li>\n<li><strong>密码</strong>：输入 <code>v2rayn填写的密码</code>。</li>\n<li>其他设置可保持默认，点击右上角的 <strong>“√”</strong> 保存。</li>\n<li>回到主界面，点击您刚创建的配置将其选中，然后点击屏幕底部的 V 形图标启动连接。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>第三步：验证手机连接</strong></p>\n<p>在手机上配置好代理后，打开手机浏览器，访问 <a href=\"https://ipinfo.io/\">ipinfo.io</a> 或 <code>whatismyip.com</code> 这类网站。如果显示的 IP 地址是您 V2RayN 代理服务器的公网 IP，而不是您家宽带的 IP，那么恭喜您，手机也已成功通过电脑代理上网！</p>\n",
            "tags": [
                "net"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/06/27/cloudflare-wu-xian-you-xiang-jian-yi-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/06/27/cloudflare-wu-xian-you-xiang-jian-yi-jiao-cheng/",
            "title": "Cloudflare无限邮箱简易教程",
            "date_published": "2025-06-27T04:25:00.000Z",
            "content_html": "<h1 id=\"Cloudflare无限邮箱简易教程\"><a href=\"#Cloudflare无限邮箱简易教程\" class=\"headerlink\" title=\"Cloudflare无限邮箱简易教程\"></a>Cloudflare无限邮箱简易教程</h1><p>通过Cloudflare实现无限邮箱：一份详尽的设置与策略指南</p>\n<h2 id=\"第一部分：现代邮箱革命：低成本实现专业级电子邮件\"><a href=\"#第一部分：现代邮箱革命：低成本实现专业级电子邮件\" class=\"headerlink\" title=\"第一部分：现代邮箱革命：低成本实现专业级电子邮件\"></a>第一部分：现代邮箱革命：低成本实现专业级电子邮件</h2><p>在当今的数字世界中，拥有一个单一的电子邮件地址来处理所有事务——从关键的财务通信到无关紧g要的时事通讯订阅——已经成为一种普遍现象。然而，这种便利性带来了不可忽视的代价：垃圾邮件泛滥、隐私泄露风险增加，以及在专业场合中品牌形象的缺失。一个通用的Gmail或Outlook地址在个人生活中无可厚wifi，但在商业或个人品牌建设中，一个自定义域名的邮箱（如<code>contact@yourdomain.com</code>）能显著提升专业度和可信度。</p>\n<p>Cloudflare电子邮件路由（Email Routing）服务的出现，为解决这一困境提供了革命性的方案。该服务本质上是一个功能强大且免费的电子邮件<em>转发</em>工具 。它的核心优势在于其设计理念：首先，它将隐私保护放在首位，Cloudflare承诺不会存储或访问通过其系统转发的任何电子邮件内容，确保了通信的机密性 。其次，它的配置过程极其简单，并且完全免费，这极大地降低了技术和财务门槛 。  </p>\n<h3 id=\"解码“无限邮箱”\"><a href=\"#解码“无限邮箱”\" class=\"headerlink\" title=\"解码“无限邮箱”\"></a>解码“无限邮箱”</h3><p>用户常常寻求“无限邮箱”的解决方案，而Cloudflare提供的正是实现这一目标的有效途径。需要明确的是，这并非指拥有无限个独立的、带存储空间的收件箱。相反，它指的是创建无限数量的<em>别名</em>（aliases）或<em>转发地址</em> 。例如，用户可以为自己的域名  </p>\n<p><code>yourdomain.com</code>创建<code>support@yourdomain.com</code>、<code>billing@yourdomain.com</code>、<code>newsletter.signup@yourdomain.com</code>等无数个地址。所有发送到这些地址的邮件，都会被自动、即时地转发到一个或多个用户预先设定的主收件箱中，例如个人的Gmail或Outlook账户。</p>\n<h3 id=\"核心用例：为谁而设？\"><a href=\"#核心用例：为谁而设？\" class=\"headerlink\" title=\"核心用例：为谁而设？\"></a>核心用例：为谁而设？</h3><p>该服务的灵活性使其适用于广泛的用户群体 ：  </p>\n<ul>\n<li><strong>个人用户</strong>：可以为注册的每一个在线服务创建独一无二的别名。这不仅能有效保护主要邮箱地址不被泄露，还能在某个别名开始收到垃圾邮件时，精确地追踪到是哪个服务泄露或出售了数据。</li>\n<li><strong>家庭用户</strong>：可以为每个家庭成员分配一个专属的邮箱地址（如<code>father@familydomain.com</code>），或为特定用途设立公共地址（如<code>household.bills@familydomain.com</code>），从而实现家庭事务的有序管理。</li>\n<li><strong>小型企业与初创公司</strong>：无需承担传统企业邮箱套件的高昂费用，即可拥有基于角色的专业地址（如<code>sales@yourcompany.com</code>、<code>info@yourcompany.com</code>），从而在客户面前建立起专业、可信的品牌形象。</li>\n</ul>\n<h3 id=\"工作原理：一个简单的类比\"><a href=\"#工作原理：一个简单的类比\" class=\"headerlink\" title=\"工作原理：一个简单的类比\"></a>工作原理：一个简单的类比</h3><p>为了更好地理解其工作机制，可以将Cloudflare电子邮件路由想象成一个数字化的邮局 。当一封邮件发送到您的自定义域名地址（相当于一个专属的邮政信箱）时，Cloudflare扮演了邮件分拣员的角色。它会查看邮件的“信封”（SMTP Envelope），这是简单邮件传输协议的一部分，标明了邮件的来源和目的地 。Cloudflare会智能地修改这个信封，将原始收件人地址替换为您指定的最终收件箱地址，然后立即将邮件投递出去。整个过程中，邮件的“信头”（Header，包含技术元数据）和“正文”（Body，实际内容）保持完整无损，Cloudflare不会拆开信件阅读内容 。  </p>\n<p>这一机制的出现，其深远意义在于它实现了专业身份的“民主化”。过去，拥有自定义域名邮箱是付费企业服务（如G Suite旧版套餐）或具备高深技术能力（如自建邮件服务器）的象征 。Cloudflare通过提供免费的入站邮件处理  和全自动的DNS记录配置 ，彻底移除了成本和技术的双重壁垒。这使得任何拥有域名的个人、自由职业者或微型企业，都能以零成本享受到与大型企业同等级别的专业电子邮件身份，这对于零工经济、个人品牌塑造以及小型在线项目的合法性感知具有重大影响。  </p>\n<h2 id=\"第二部分：奠定基石：将您的域名接入Cloudflare\"><a href=\"#第二部分：奠定基石：将您的域名接入Cloudflare\" class=\"headerlink\" title=\"第二部分：奠定基石：将您的域名接入Cloudflare\"></a>第二部分：奠定基石：将您的域名接入Cloudflare</h2><p>在启用电子邮件路由之前，一个至关重要且不可跳过的前提步骤是：将您的域名交由Cloudflare进行管理。这意味着Cloudflare必须成为您域名的权威DNS（域名系统）提供商。简而言之，互联网上任何关于您域名的查询（无论是网站访问还是邮件发送），都将由Cloudflare来应答和指引方向。</p>\n<h3 id=\"接入域名的分步指南\"><a href=\"#接入域名的分步指南\" class=\"headerlink\" title=\"接入域名的分步指南\"></a>接入域名的分步指南</h3><ol>\n<li><strong>创建Cloudflare账户</strong>：访问Cloudflare官网并注册一个免费账户。这是一个简单直接的过程 。  </li>\n<li><strong>添加您的站点/域名</strong>：登录后，点击“添加站点”按钮，并输入您希望配置的根域名（例如<code>yourdomain.com</code>） 。  </li>\n<li><strong>选择套餐</strong>：在套餐选择页面，选择“Free”（免费）套餐。该套餐已完整包含电子邮件路由功能 。  </li>\n<li><strong>DNS记录扫描</strong>：Cloudflare会自动扫描您域名当前所有的DNS记录。这是一个关键步骤，因为它会尝试复制您现有的网站、子域名等配置。作为一项最佳实践，强烈建议在此步骤完成时，对扫描出的记录列表进行截图或备份，以防后续出现任何问题 。</li>\n</ol>\n<h3 id=\"关键操作：更新您的域名服务器\"><a href=\"#关键操作：更新您的域名服务器\" class=\"headerlink\" title=\"关键操作：更新您的域名服务器\"></a>关键操作：更新您的域名服务器</h3><ol>\n<li><strong>理解域名服务器（Nameservers）</strong>：域名服务器就像是互联网上针对您域名的“地址簿总管”。您需要通知您的域名注册商（即您购买域名的地方，如GoDaddy、Namecheap等），告知他们从现在起，Cloudflare将全权负责管理您域名的这本“地址簿”。</li>\n<li><strong>查找Cloudflare的域名服务器地址</strong>：在Cloudflare仪表板的指引页面上，系统会提供两个专属的域名服务器地址。这两个地址通常以<code>.ns.cloudflare.com</code>结尾。</li>\n<li><strong>在您的域名注册商处更改域名服务器</strong>：登录到您域名注册商的管理后台，找到域名管理或DNS管理的区域，将当前的域名服务器地址替换为Cloudflare提供的那两个地址。这是一个标准操作，大多数注册商都有详细的帮助文档 。  </li>\n<li><strong>耐心等待生效</strong>：域名服务器的变更需要在全球互联网范围内传播和同步，这个过程被称为“DNS传播”。它可能在几分钟内完成，也可能需要长达24小时 。在此期间，您的网站和邮件服务可能会短暂中断。当Cloudflare检测到变更已成功生效时，您会收到一封确认邮件，并且您在Cloudflare上的域名状态会变为“有效”。</li>\n</ol>\n<p>将域服务器指向Cloudflare，是一个具有深远影响的决定。用户最初的目标可能仅仅是实现简单的邮件转发，但这一操作实际上是将该域名下的所有网络流量（包括网站、API等）都引导至Cloudflare的全球网络进行处理 。这为用户解锁了一系列强大的免费增值服务，如DDoS攻击防护、全球CDN加速和安全规则等。然而，这也意味着Cloudflare成为了用户整个在线业务的关键路径节点。这是一种信任的托付，也是一种平台依赖的开始。因此，用户在执行此操作时，应充分理解其不仅仅是在配置一个邮件工具，而是在将其数字资产全面地整合进一个更广泛、更强大的平台生态系统中。  </p>\n<h2 id=\"第三部分：激活私人邮件转发器：配置入站电子邮件\"><a href=\"#第三部分：激活私人邮件转发器：配置入站电子邮件\" class=\"headerlink\" title=\"第三部分：激活私人邮件转发器：配置入站电子邮件\"></a>第三部分：激活私人邮件转发器：配置入站电子邮件</h2><p>完成域名接入后，下一步就是激活Cloudflare电子邮件路由功能，实现接收自定义地址邮件的核心目标。</p>\n<h3 id=\"导航至电子邮件路由仪表板\"><a href=\"#导航至电子邮件路由仪表板\" class=\"headerlink\" title=\"导航至电子邮件路由仪表板\"></a>导航至电子邮件路由仪表板</h3><p>登录Cloudflare仪表板，选择您已激活的域名。在左侧的导航菜单中，找到并点击“电子邮件”选项卡，进入电子邮件路由的管理界面 。  </p>\n<h3 id=\"一键启用：自动配置DNS\"><a href=\"#一键启用：自动配置DNS\" class=\"headerlink\" title=\"一键启用：自动配置DNS\"></a>一键启用：自动配置DNS</h3><p>首次进入该界面时，系统会引导您完成启用过程。</p>\n<ol>\n<li><p><strong>添加记录并启用</strong>：您会看到一个清晰的按钮，通常標示為“添加记录并启用” 。点击此按钮，Cloudflare将开始为您自动配置所有必需的DNS记录。  </p>\n</li>\n<li><p><strong>幕后工作：自动化的DNS魔法</strong>：这个看似简单的点击操作，背后是Cloudflare强大自动化能力的体现。系统会自动为您的域名添加三条<code>MX</code>（Mail Exchanger）记录，并设置不同的优先级。<code>MX</code>记录的作用是指示全球的邮件服务器，将发送到您域名的邮件投递给Cloudflare的接收服务器 。同时，它还会添加一条  </p>\n<p><code>TXT</code>记录用于SPF（Sender Policy Framework）验证。这种自动化极大地简化了配置，避免了因手动输入错误而导致的邮件丢失问题 。值得注意的是，如果您的域名上已存在其他  </p>\n<p><code>MX</code>记录（例如来自之前的邮件服务商），Cloudflare会提示您将其删除。电子邮件路由服务无法与同一域名上的其他邮件服务共存，必须确保Cloudflare是唯一的邮件接收方 。</p>\n</li>\n</ol>\n<h3 id=\"创建您的第一个自定义地址\"><a href=\"#创建您的第一个自定义地址\" class=\"headerlink\" title=\"创建您的第一个自定义地址\"></a>创建您的第一个自定义地址</h3><p>启用服务后，您就可以开始创建转发规则了。</p>\n<ol>\n<li>在“路由规则”选项卡下，点击“创建地址” 。  </li>\n<li><strong>自定义地址</strong>：在输入框中填入您想要的地址前缀，例如<code>hello</code>，系统会自动补全为<code>hello@yourdomain.com</code>。</li>\n<li><strong>目标地址</strong>：在“目标地址”字段中，输入您希望接收这些邮件的完整主邮箱地址，例如<code>your.personal.email@gmail.com</code>。</li>\n</ol>\n<h3 id=\"至关重要的验证步骤\"><a href=\"#至关重要的验证步骤\" class=\"headerlink\" title=\"至关重要的验证步骤\"></a>至关重要的验证步骤</h3><p>为了防止服务被滥用（例如，被用于恶意转发或发送垃圾邮件），Cloudflare设置了强制的验证流程。</p>\n<ol>\n<li><strong>接收验证邮件</strong>：在您添加目标地址后，Cloudflare会立即向该地址发送一封验证邮件 。  </li>\n<li><strong>点击验证链接</strong>：您需要登录到您的主邮箱（<code>your.personal.email@gmail.com</code>），找到这封来自Cloudflare的邮件，并点击其中的验证链接。</li>\n<li><strong>状态更新</strong>：完成验证后，回到Cloudflare仪表板，您会看到该目标地址的状态从“待验证”变为“已验证”或“有效”。只有经过验证的目标地址，其关联的转发规则才会生效 。</li>\n</ol>\n<p>这个看似普通的验证步骤，实际上是一种精心设计的安全机制，体现了“为安全而设的有意摩擦”。如果没有这一环节，恶意行为者可以轻易地将邮件转发到任意第三方邮箱，从而进行骚扰或钓鱼攻击。通过要求目标邮箱的所有者进行主动确认，Cloudflare确保了所有邮件转发都是在接收方知情并同意的情况下进行的。这不仅保护了无辜的第三方免受垃圾邮件的困扰，也维护了Cloudflare平台自身的声誉和服务的可靠性。</p>\n<h2 id=\"第四部分：“无限”引擎：精通“全域地址”功能\"><a href=\"#第四部分：“无限”引擎：精通“全域地址”功能\" class=\"headerlink\" title=\"第四部分：“无限”引擎：精通“全域地址”功能\"></a>第四部分：“无限”引擎：精通“全域地址”功能</h2><p>这一部分将直接解决用户关于“无限”邮箱的核心诉求，通过掌握“全域地址”（Catch-all）功能，释放Cloudflare电子邮件路由的全部潜力。</p>\n<h3 id=\"什么是全域地址？\"><a href=\"#什么是全域地址？\" class=\"headerlink\" title=\"什么是全域地址？\"></a>什么是全域地址？</h3><p>全域地址是一条特殊的路由规则。它的作用是“捕获”所有发送到您域名下、但又没有被任何特定自定义地址规则匹配的电子邮件 。举例来说，如果您只设置了  </p>\n<p><code>sales@yourdomain.com</code>的转发规则，但有人错误地将邮件发送到了<code>sale@yourdomain.com</code>，在没有启用全域地址的情况下，这封邮件将会被退回，发件人会收到投递失败的通知。而启用了全域地址后，这封邮件会被成功“捕获”并转发到您指定的邮箱。</p>\n<h3 id=\"启用“无限”功能的步骤\"><a href=\"#启用“无限”功能的步骤\" class=\"headerlink\" title=\"启用“无限”功能的步骤\"></a>启用“无限”功能的步骤</h3><ol>\n<li>在Cloudflare仪表板的“电子邮件” &gt; “电子邮件路由” &gt; “路由规则”页面中，找到“全域地址”这个选项 。  </li>\n<li>将该功能的开关切换至“启用”或“有效”状态。</li>\n<li>在下方的“操作”下拉菜单中，选择一个处理方式。通常，您会选择“转发至”并将邮件路由到您已经验证过的那个主邮箱地址 。</li>\n</ol>\n<h3 id=\"实践用例与即时别名的威力\"><a href=\"#实践用例与即时别名的威力\" class=\"headerlink\" title=\"实践用例与即时别名的威力\"></a>实践用例与即时别名的威力</h3><p>启用全域地址后，“无限邮箱”的设想便得以实现。用户在任何网站或服务注册时，都可以即时“发明”一个全新的、独一无二的邮箱别名，而无需预先在Cloudflare仪表板中进行任何配置。</p>\n<p>例如，在注册Netflix时，可以随手输入<code>netflix.2024@yourdomain.com</code>；在订阅某份电子报时，使用<code>newsletter.xyz@yourdomain.com</code>。所有发送到这些地址的邮件，都会被全域地址规则捕获并准确无误地送达您的主收件箱。这为隐私保护和垃圾邮件溯源提供了极大的便利。如果<code>netflix.2024@yourdomain.com</code>这个地址开始收到不相关的垃圾邮件，那么用户就可以百分之百确定是Netflix或其合作伙伴泄露了数据。</p>\n<p>然而，强大的功能往往伴随着相应的责任和潜在的风险。全域地址在提供便利的同时，也使您的域名成为了垃圾邮件发送者的一个极具吸引力的目标。垃圾邮件机器人常常使用“字典攻击”的方式，尝试向<code>admin@</code>、<code>contact@</code>、<code>test@</code>、<code>info@</code>等常见地址发送邮件。启用全域地址意味着所有这些猜测性的邮件都会被您的服务器接收并转发，这可能会导致您的主收件箱收到的垃圾邮件数量显著增加。</p>\n<p>尽管Cloudflare内置了反垃圾邮件和钓鱼检测机制 ，但没有任何系统能做到100%的拦截。因此，一种更成熟、更具策略性的使用方法是采用混合模式。Cloudflare允许用户创建多达200条特定的路由规则 ，而这些特定规则的优先级高于全域地址规则。这意味着，如果一封邮件同时匹配了特定规则（如  <code>sales@yourdomain.com</code>）和全域地址规则，系统将优先执行特定规则。</p>\n<p>最佳实践是：</p>\n<ul>\n<li><strong>为重要、长期的通信创建特定规则</strong>：例如，为工作、家庭、财务等创建<code>work@</code>、<code>family@</code>、<code>billing@</code>等特定地址。这不仅能确保邮件的稳定接收，也为未来提供了更大的灵活性（例如，日后可以将<code>work@</code>的邮件转发到另一个专门的工作邮箱）。</li>\n<li><strong>将全域地址用于一次性或非关键性的注册</strong>：对于那些您不完全信任或只需要临时使用的服务，可以充分利用全域地址的便利性，即时创建别名。</li>\n</ul>\n<p>通过这种混合策略，用户可以在享受“无限”便利的同时，最大限度地控制垃圾邮件，并保持对重要邮件流的清晰管理。</p>\n<h2 id=\"第五部分：闭合回路：如何以您的自定义别名发送和回复邮件\"><a href=\"#第五部分：闭合回路：如何以您的自定义别名发送和回复邮件\" class=\"headerlink\" title=\"第五部分：闭合回路：如何以您的自定义别名发送和回复邮件\"></a>第五部分：闭合回路：如何以您的自定义别名发送和回复邮件</h2><p>这是本指南中最为关键和深入的部分。它解决了Cloudflare电子邮件路由本身最大的局限性，并提供了一套完整、可行的解决方案，使您的自定义邮箱地址实现真正的双向通信。</p>\n<h3 id=\"关键前提：Cloudflare是一条单行道（仅限入站）\"><a href=\"#关键前提：Cloudflare是一条单行道（仅限入站）\" class=\"headerlink\" title=\"关键前提：Cloudflare是一条单行道（仅限入站）\"></a>关键前提：Cloudflare是一条单行道（仅限入站）</h3><p>必须明确指出，Cloudflare电子邮件路由服务本身只处理<em>接收</em>邮件的流程。它不提供用于发送邮件的出站SMTP（Simple Mail Transfer Protocol）服务器 。这意味着，当您回复一封通过Cloudflare转发来的邮件时，默认情况下，回复将从您的主邮箱地址（如  <code>your.personal.email@gmail.com</code>）发出，这会向收件人暴露您的真实邮箱地址，从而违背了使用别名的初衷 。  </p>\n<p>这一设计决策背后有着深刻的运营考量。运营一个出站邮件服务是一项极其复杂且成本高昂的任务，服务商需要持续不断地管理其IP地址的信誉，以防止被各大邮件服务商列入黑名单。任何滥用行为都可能导致整个平台的发送能力受损。通过专注于提供入站转发服务，Cloudflare规避了这一巨大的运营负担和滥用风险，这也是该服务能够免费提供的重要原因之一 。  </p>\n<h3 id=\"解决方案：利用Gmail作为您的免费出站SMTP服务器\"><a href=\"#解决方案：利用Gmail作为您的免费出站SMTP服务器\" class=\"headerlink\" title=\"解决方案：利用Gmail作为您的免费出站SMTP服务器\"></a>解决方案：利用Gmail作为您的免费出站SMTP服务器</h3><p>最为主流且易于访问的解决方案是，配置您现有的Gmail账户，使其能够以您的自定义别名来发送邮件。这样便能构建一个功能完整、免费且双向的电子邮件系统。</p>\n<p><strong>步骤一：安全第一 - 在Google账户中启用两步验证（2FA）</strong> 这是后续步骤的强制性前提，也是保护您账户安全的关键最佳实践 。  </p>\n<p><strong>步骤二：创建Google应用专用密码</strong> 应用专用密码是一个16位的、一次性生成的代码，它授权某个应用程序或设备访问您的Google账户，而无需通过常规的两步验证提示。这把“钥匙”将用于授权Gmail自己的SMTP服务器代表您发送邮件。请访问Google账户的安全设置页面，生成一个用于“邮件”应用的应用专用密码，并为它指定一个自定义名称（如“Cloudflare别名发送”）。请务必妥善保管这个16位的密码 。  </p>\n<p><strong>步骤三：在Gmail中配置“用这个地址发送邮件”</strong></p>\n<ol>\n<li>登录Gmail，进入<code>设置 &gt; 查看所有设置 &gt; 帐号和导入</code>。</li>\n<li>在“用这个地址发送邮件”部分，点击“添加其他电子邮件地址” 。  </li>\n<li>在弹出的窗口中，输入您的发件人姓名和您希望使用的自定义别名（例如<code>hello@yourdomain.com</code>）。根据不同的指南，是否勾选“视为别名”选项有不同的建议，通常建议勾选以简化管理。</li>\n<li>点击“下一步”，进入SMTP服务器配置页面。</li>\n</ol>\n<h3 id=\"Gmail-SMTP配置参数\"><a href=\"#Gmail-SMTP配置参数\" class=\"headerlink\" title=\"Gmail SMTP配置参数\"></a>Gmail SMTP配置参数</h3><p>为了减少配置过程中的错误，以下表格清晰地列出了所有必需的参数。</p>\n<table>\n<thead>\n<tr>\n<th>设置项</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SMTP 服务器</td>\n<td><code>smtp.gmail.com</code></td>\n<td>Google官方的对外发信服务器地址 。</td>\n</tr>\n<tr>\n<td>端口</td>\n<td><code>587</code></td>\n<td>推荐使用的TLS加密连接端口 。</td>\n</tr>\n<tr>\n<td>用户名</td>\n<td><code>your.personal.email@gmail.com</code></td>\n<td>您的完整Gmail地址 。</td>\n</tr>\n<tr>\n<td>密码</td>\n<td><code>[您的16位应用专用密码]</code></td>\n<td>您在第二步中生成的16位应用专用密码，<strong>不是</strong>您的Gmail登录密码 。</td>\n</tr>\n<tr>\n<td>安全连接</td>\n<td><code>TLS</code></td>\n<td>推荐使用的安全协议 。</td>\n</tr>\n</tbody></table>\n<p>输入完毕后点击“添加帐户”。Gmail会向您的自定义别名（<code>hello@yourdomain.com</code>）发送一封验证邮件。由于您已经配置好了Cloudflare的转发，这封邮件会出现在您的主收件箱中。打开邮件，点击其中的确认链接或输入验证码，即可完成设置。</p>\n<h3 id=\"确保您的邮件不被当作垃圾邮件：SPF与DMARC配置指南\"><a href=\"#确保您的邮件不被当作垃圾邮件：SPF与DMARC配置指南\" class=\"headerlink\" title=\"确保您的邮件不被当作垃圾邮件：SPF与DMARC配置指南\"></a>确保您的邮件不被当作垃圾邮件：SPF与DMARC配置指南</h3><p>仅仅完成上述设置还不够。直接这样发送的邮件可能会因为身份验证问题而被收件方服务器标记为垃圾邮件，或者在发件人处显示恼人的“由gmail.com代发”字样 。这是因为，邮件实际上是从Google的服务器发出的，但却声称自己来自  </p>\n<p><code>yourdomain.com</code>。为了解决这个问题，您必须在您域名的DNS记录中明确授权Google可以代表您发送邮件。</p>\n<ul>\n<li><strong>修改您的SPF记录</strong>：Cloudflare自动创建的SPF记录只授权了Cloudflare自己。您需要编辑这条<code>TXT</code>记录，将Google也加入授权列表。修改后的内容应如下：<code>v=spf1 include:_spf.mx.cloudflare.net include:_spf.google.com ~all</code>。这个小小的改动至关重要，它同时授权了Cloudflare（用于处理转发邮件的合法性）和Google（用于发送邮件） 。  </li>\n<li><strong>创建DMARC记录</strong>：DMARC（基于域的消息认证、报告和一致性）是一种电子邮件验证策略，它告诉接收邮件的服务器，当一封声称来自您域名的邮件未能通过SPF或DKIM检查时应该如何处理。它还能向您发送报告，让您了解全球有哪些服务器在尝试以您的域名发送邮件。对于初学者，建议使用一个最安全的“仅监控”策略：<ul>\n<li><strong>类型</strong>: <code>TXT</code></li>\n<li><strong>名称</strong>: <code>_dmarc</code></li>\n<li><strong>内容</strong>: <code>v=DMARC1; p=none; rua=mailto:your.personal.email@gmail.com</code> 。  </li>\n<li>这里的<code>p=none</code>意味着“无操作”，即即使验证失败，也请正常接收邮件，但请将情况记录在报告中发送给我。<code>rua</code>指定了接收这些汇总报告的邮箱地址。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"最终DNS记录配置总览\"><a href=\"#最终DNS记录配置总览\" class=\"headerlink\" title=\"最终DNS记录配置总览\"></a>最终DNS记录配置总览</h3><p>为了确保您的电子邮件系统完整、可靠地运行，以下表格汇总了所有必需的DNS记录。您可以将其作为最终检查和未来排错的参考。</p>\n<table>\n<thead>\n<tr>\n<th>记录类型</th>\n<th>名称 (主机)</th>\n<th>内容 (值)</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MX</td>\n<td><code>@</code></td>\n<td><code>route1.mx.cloudflare.net</code> (优先级 10)</td>\n<td>将入站邮件指向Cloudflare的主接收服务器 。</td>\n</tr>\n<tr>\n<td>MX</td>\n<td><code>@</code></td>\n<td><code>route2.mx.cloudflare.net</code> (优先级 20)</td>\n<td>Cloudflare的备用入站邮件服务器 。</td>\n</tr>\n<tr>\n<td>MX</td>\n<td><code>@</code></td>\n<td><code>route3.mx.cloudflare.net</code> (优先级 30)</td>\n<td>Cloudflare的备用入站邮件服务器 。</td>\n</tr>\n<tr>\n<td>TXT</td>\n<td><code>@</code></td>\n<td><code>v=spf1 include:_spf.mx.cloudflare.net include:_spf.google.com ~all</code></td>\n<td>授权Cloudflare和Google为您的域名处理邮件 。</td>\n</tr>\n<tr>\n<td>TXT</td>\n<td><code>_dmarc</code></td>\n<td><code>v=DMARC1; p=none; rua=mailto:your.email@gmail.com</code></td>\n<td>设置DMARC监控策略并指定报告接收地址 。</td>\n</tr>\n</tbody></table>\n<h2 id=\"第六部分：规则与限制：最佳实践与服务边界\"><a href=\"#第六部分：规则与限制：最佳实践与服务边界\" class=\"headerlink\" title=\"第六部分：规则与限制：最佳实践与服务边界\"></a>第六部分：规则与限制：最佳实践与服务边界</h2><p>为了长期、稳定地使用这套系统，用户需要对其服务边界有清晰的认识，并遵循一些最佳实践。本部分旨在管理用户期望，并提供最终的策略性建议。</p>\n<h3 id=\"“无限”背后的真实限制\"><a href=\"#“无限”背后的真实限制\" class=\"headerlink\" title=\"“无限”背后的真实限制\"></a>“无限”背后的真实限制</h3><p>尽管“全域地址”功能提供了创建无限别名的能力，但Cloudflare电子邮件路由服务本身存在一些明确的硬性限制，用户应当知晓：</p>\n<ul>\n<li><strong>规则与地址数量</strong>：每个Cloudflare账户最多可以创建200条自定义路由规则和200个已验证的目标地址 。需要再次强调的是，全域地址本身只算作一条规则，这使其成为绕过200个地址限制、满足绝大多数日常需求的关键。  </li>\n<li><strong>邮件大小</strong>：通过此服务转发的单封电子邮件，其大小不能超过25 MiB 。这对于日常文本和常规附件的邮件来说绰绰有余，但可能不适用于发送大型文件。  </li>\n<li><strong>其他已知限制</strong>：服务在推出初期，曾不支持国际化域名（IDN）。尽管Cloudflare不断更新其服务，但用户在遇到特殊需求时，仍应查阅最新的官方文档以获取最准确的信息 。</li>\n</ul>\n<h3 id=\"超越Gmail：关于其他出站SMTP服务的说明\"><a href=\"#超越Gmail：关于其他出站SMTP服务的说明\" class=\"headerlink\" title=\"超越Gmail：关于其他出站SMTP服务的说明\"></a>超越Gmail：关于其他出站SMTP服务的说明</h3><p>本指南以Gmail作为出站SMTP服务的范例，主要是因为它免费、普及且易于配置。然而，其底层架构——即“Cloudflare负责入站，第三方服务负责出站”——是一个高度灵活和可扩展的模式。用户完全可以选择其他专业的出站SMTP服务，如SMTP2Go、SendGrid、Brevo（前Sendinblue）或Purelymail 。这些服务通常提供更高的发送额度、更详细的分析报告和更专业的客户支持，但可能需要支付一定的费用。配置原理与Gmail类似：获取SMTP凭据，然后在您的邮件客户端（或Gmail的“用这个地址发送邮件”功能）中进行设置，并相应地更新您域名的SPF和DKIM记录以授权该服务商。  </p>\n<h3 id=\"结论与最终建议\"><a href=\"#结论与最终建议\" class=\"headerlink\" title=\"结论与最终建议\"></a>结论与最终建议</h3><p>通过结合Cloudflare的入站转发和第三方SMTP服务的出站能力，任何拥有域名的个人或组织都可以构建一个功能强大、高度私密且成本极低的专业电子邮件系统。为了确保该系统的长期健康运行，以下是最终的建议：</p>\n<ol>\n<li><strong>从<code>p=none</code>开始您的DMARC之旅</strong>：在设置DMARC记录时，务必从<code>p=none</code>（仅监控）策略开始。这可以防止因配置错误而意外地导致合法邮件被拒绝或隔离。在运行一段时间并分析收到的<code>rua</code>报告，确认所有合法邮件源都已正确配置SPF/DKIM后，再考虑升级到更严格的策略（如<code>p=quarantine</code>或<code>p=reject</code>）。</li>\n<li><strong>定期审阅DMARC报告</strong>：养成偶尔查看DMARC汇总报告的习惯。这些报告是XML格式的，可以使用在线工具进行解析。它们能告诉您，除了您授权的服务外，是否还有其他未知的服务器在尝试以您的域名发送邮件，这可能是欺诈或配置错误的信号。</li>\n<li><strong>平衡特定规则与全域地址</strong>：再次强调混合策略的重要性。为长期、重要的通信角色（如<code>contact@</code>, <code>billing@</code>）创建特定的转发规则，为一次性的、风险较高的注册场景（如注册不知名论坛、下载免费资源）利用全域地址的便利性。</li>\n<li><strong>将隐私视为一个持续的过程</strong>：建立这套系统是迈向掌控个人数字身份的重要一步。然而，真正的隐私保护是一个持续的、主动的过程。它要求用户在分享信息时保持警惕，并善用这些工具来区隔自己的数字足迹，从而在一个日益互联的世界中更好地保护自己。</li>\n</ol>\n",
            "tags": [
                "email"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/06/26/zai-wsl-zhong-jiang-python3-ming-ling-bie-ming-wei-python/",
            "url": "https://0xdadream.github.io/2025/06/26/zai-wsl-zhong-jiang-python3-ming-ling-bie-ming-wei-python/",
            "title": "在WSL中将python3命令别名为python",
            "date_published": "2025-06-26T14:25:00.000Z",
            "content_html": "<h1 id=\"在WSL中将-python3-命令别名为-python\"><a href=\"#在WSL中将-python3-命令别名为-python\" class=\"headerlink\" title=\"在WSL中将 python3 命令别名为 python\"></a>在WSL中将 <code>python3</code> 命令别名为 <code>python</code></h1><p>在 Windows Subsystem for Linux (WSL) 环境中，默认情况下，Python 3.x 版本通常通过 <code>python3</code> 命令调用，而 <code>python</code> 命令可能未定义或指向老旧的 Python 2.x 版本。为了方便起见，您可以将 <code>python3</code> 命令别名为 <code>python</code>，从而直接使用 <code>python</code> 命令来执行 Python 3.x。</p>\n<p>最常用且推荐的方法是创建一个永久性的别名，这通过修改您 shell 的配置文件（通常是 <code>.bashrc</code>）来实现。这样，每次启动新的 WSL 终端时，该别名都会自动生效。</p>\n<p>以下是详细的步骤：</p>\n<h3 id=\"1-打开您的-shell-配置文件\"><a href=\"#1-打开您的-shell-配置文件\" class=\"headerlink\" title=\"1. 打开您的 shell 配置文件\"></a>1. 打开您的 shell 配置文件</h3><p>您需要使用一个命令行文本编辑器（如 <code>nano</code>、<code>vim</code> 或 <code>emacs</code>）来编辑位于您用户主目录下的 <code>.bashrc</code> 文件。对于大多数用户来说，默认的 shell 是 Bash。</p>\n<p>打开终端并输入以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果您使用的是 Zsh，则应编辑 <code>.zshrc</code> 文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-添加别名设置\"><a href=\"#2-添加别名设置\" class=\"headerlink\" title=\"2. 添加别名设置\"></a>2. 添加别名设置</h3><p>在打开的文件中，滚动到文件末尾，并添加以下这行代码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token string\">'python3'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这一行代码的作用是告诉 shell，当您输入 <code>python</code> 时，实际上应该执行 <code>python3</code> 命令。</p>\n<p>您还可以选择为 <code>pip</code> 创建一个类似的别名：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">pip</span><span class=\"token operator\">=</span><span class=\"token string\">'pip3'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-保存并关闭文件\"><a href=\"#3-保存并关闭文件\" class=\"headerlink\" title=\"3. 保存并关闭文件\"></a>3. 保存并关闭文件</h3><p>如果您使用的是 <code>nano</code> 编辑器，请按 <code>Ctrl + O</code> 来保存文件，然后按 <code>Enter</code> 确认。接着按 <code>Ctrl + X</code> 退出编辑器。</p>\n<h3 id=\"4-使更改生效\"><a href=\"#4-使更改生效\" class=\"headerlink\" title=\"4. 使更改生效\"></a>4. 使更改生效</h3><p>新添加的别名不会立即在当前的终端会话中生效。您需要让 shell 重新加载配置文件。您可以通过以下任一方式实现：</p>\n<ul>\n<li><p><strong>关闭并重新打开您的 WSL 终端。</strong> 这是最简单直接的方法。</p>\n</li>\n<li><p><strong>在当前终端会话中执行以下命令：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者，如果您使用的是 Zsh：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"5-验证别名是否生效\"><a href=\"#5-验证别名是否生效\" class=\"headerlink\" title=\"5. 验证别名是否生效\"></a>5. 验证别名是否生效</h3><p>现在，您可以在终端中输入以下命令来验证 <code>python</code> 命令是否已成功指向 Python 3：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python <span class=\"token parameter variable\">--version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果一切顺利，输出结果应该显示您的 Python 3.x 版本号，例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Python <span class=\"token number\">3.10</span>.6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>通过以上步骤，您已经成功地在 WSL 中将 <code>python3</code> 命令别名为 <code>python</code>，这将为您在开发过程中提供更便捷的体验。</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/06/26/arc-a770-ollama-webui-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/06/26/arc-a770-ollama-webui-jiao-cheng/",
            "title": "Arc A770 Ollama WebUI 教程",
            "date_published": "2025-06-26T04:25:00.000Z",
            "content_html": "<h1 id=\"Arc-A770-Ollama-WebUI-教程\"><a href=\"#Arc-A770-Ollama-WebUI-教程\" class=\"headerlink\" title=\"Arc A770 Ollama WebUI 教程\"></a>Arc A770 Ollama WebUI 教程</h1><p>在 Windows 上利用 Arc A770 16G 和 IPEX-LLM 运行 Ollama 大语言模型的终极指南</p>\n<h2 id=\"第一部分：简介-为本地-AI-释放您的-Arc-A770-显卡潜能\"><a href=\"#第一部分：简介-为本地-AI-释放您的-Arc-A770-显卡潜能\" class=\"headerlink\" title=\"第一部分：简介 - 为本地 AI 释放您的 Arc A770 显卡潜能\"></a>第一部分：简介 - 为本地 AI 释放您的 Arc A770 显卡潜能</h2><h3 id=\"1-1-前景与挑战\"><a href=\"#1-1-前景与挑战\" class=\"headerlink\" title=\"1.1. 前景与挑战\"></a>1.1. 前景与挑战</h3><p>英特尔锐炫 Arc A770 16G 显卡凭借其高达 16 GB 的海量显存，为在本地运行大型语言模型（LLM）提供了一个极具性价比和吸引力的硬件平台。充足的显存意味着可以流畅运行更大、更复杂的模型，这对于追求高质量本地 AI 体验的用户而言至关重要。</p>\n<p>然而，一个核心挑战阻碍了这条道路：标准的、从官方网站下载的 Windows 版 Ollama 应用程序，其默认配置并不能直接利用英特尔 Arc GPU 进行硬件加速 。这是因为其标准后端主要依赖于为英伟达（NVIDIA）设计的 CUDA 技术，或是为其他硬件设计的 DirectML 技术，而这些技术在标准 Ollama 的框架内并未对英特尔的 Xe HPG 架构提供原生支持 。直接安装标准版 Ollama 会导致模型推理任务完全由 CPU 执行，无法发挥 Arc A770 强大的并行计算能力。  </p>\n<h3 id=\"1-2-解决方案：英特尔-IPEX-LLM-这座桥梁\"><a href=\"#1-2-解决方案：英特尔-IPEX-LLM-这座桥梁\" class=\"headerlink\" title=\"1.2. 解决方案：英特尔 IPEX-LLM 这座桥梁\"></a>1.2. 解决方案：英特尔 IPEX-LLM 这座桥梁</h3><p>解决这一挑战的关键在于英特尔官方推出的“英特尔 PyTorch LLM 扩展库”（Intel® Extension for PyTorch* for LLM），简称 IPEX-LLM。它并非一个简单的插件，而是一个全面的加速库，为 Ollama 等框架提供了一个基于 oneAPI 和 SYCL 编程模型构建的、为英特尔 GPU 量身定制的后端 。  </p>\n<p>本指南的核心，正是利用一个由英特尔提供、经过特殊编译的 Ollama 版本。该版本将默认的推理引擎替换为了 IPEX-LLM，从而打通了软件与 Arc 显卡之间的加速通道。这并非一个脆弱或不稳定的社区项目，而是由硬件制造商官方支持的解决方案。英特尔通过其官方 GitHub 仓库积极开发并推广此方案，发布了易于使用的“便携式压缩包”（Portable Zips），并提供了详尽的快速入门文档，这为方案的可靠性和未来更新提供了有力保障 。  </p>\n<h3 id=\"1-3-我们的路线图\"><a href=\"#1-3-我们的路线图\" class=\"headerlink\" title=\"1.3. 我们的路线图\"></a>1.3. 我们的路线图</h3><p>本教程将遵循一条清晰的路径，引导您完成从零到一的全部署过程：</p>\n<ol>\n<li><strong>系统基础准备</strong>：安装并配置必要的驱动程序和软件环境。</li>\n<li><strong>核心引擎部署</strong>：安装并启动经过 IPEX-LLM 加速的 Ollama 后端服务。</li>\n<li><strong>前端界面搭建</strong>：安装并连接用户友好的 Open WebUI，提供图形化交互界面。</li>\n<li><strong>验证与排错</strong>：确认 GPU 加速已成功启用，并提供常见问题的解决方案。</li>\n</ol>\n<hr>\n<h2 id=\"第二部分：基础设置-准备您的-Windows-系统\"><a href=\"#第二部分：基础设置-准备您的-Windows-系统\" class=\"headerlink\" title=\"第二部分：基础设置 - 准备您的 Windows 系统\"></a>第二部分：基础设置 - 准备您的 Windows 系统</h2><p>在开始部署之前，确保系统环境符合要求是成功的先决条件。下面的清单和步骤将帮助您准备好一切。</p>\n<p><strong>系统必备组件清单</strong></p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>推荐版本/要求</th>\n<th>下载地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>英特尔 Arc 显卡驱动</td>\n<td>最新 WHQL 认证版 (例如 32.0.101.6881 或更高)</td>\n<td><a href=\"https://www.intel.com/content/www/us/en/products/sku/229151/intel-arc-a770-graphics-16gb/downloads.html\">英特尔官方下载中心</a></td>\n</tr>\n<tr>\n<td>Miniforge (Conda)</td>\n<td>最新版</td>\n<td>(<a href=\"https://github.com/conda-forge/miniforge/releases/latest\">https://github.com/conda-forge/miniforge/releases/latest</a>)</td>\n</tr>\n<tr>\n<td>Windows Terminal</td>\n<td>最新版</td>\n<td>(<a href=\"https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701\">https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701</a>)</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-英特尔-Arc-显卡驱动：性能的基石\"><a href=\"#2-1-英特尔-Arc-显卡驱动：性能的基石\" class=\"headerlink\" title=\"2.1. 英特尔 Arc 显卡驱动：性能的基石\"></a>2.1. 英特尔 Arc 显卡驱动：性能的基石</h3><p>整个技术栈依赖于最新的显卡驱动程序通过英特尔 oneAPI Level Zero 接口与 GPU 进行通信。过时、损坏或由 Windows Update 自动安装的通用驱动程序是导致失败的主要原因。</p>\n<p><strong>第一步：识别当前驱动版本</strong> 打开英特尔锐炫控制中心（Intel Arc Control）软件，或通过设备管理器查看当前安装的显卡驱动程序版本 。  </p>\n<p><strong>第二步：下载正确的驱动程序</strong> 访问上表中提供的英特尔官方下载中心链接，下载适用于 Arc A770 16GB 的最新 WHQL 认证驱动程序。根据资料，一个可靠的版本是 <code>32.0.101.6881</code>，对应的安装文件名为 <code>gfx_win_101.6881.exe</code> 。  </p>\n<p><strong>第三步：执行一次“清洁安装”（推荐的最佳实践）</strong> 为了从根源上避免潜在的、难以诊断的故障，强烈建议执行一次“清洁安装”。在驱动安装过程中，选择“自定义安装”，然后勾选“执行清洁安装”选项。这将移除所有旧的驱动文件和配置，避免新旧文件冲突。</p>\n<p>对于追求极致稳定或在后续步骤中遇到蓝屏错误（如 <code>VIDEO_SCHEDULER_INTERNAL_ERROR</code> ）的用户，可以采用更彻底的方法：使用 Display Driver Uninstaller (DDU) 工具。这是英特尔官方支持文档中也提及的高级方法，可以确保完全清除旧驱动的残留 。  </p>\n<p><strong>第四步：验证安装</strong> 安装完成后，重启计算机。再次打开英特尔锐炫控制中心，确认驱动程序版本已更新为最新版本。</p>\n<h3 id=\"2-2-命令行与环境设置\"><a href=\"#2-2-命令行与环境设置\" class=\"headerlink\" title=\"2.2. 命令行与环境设置\"></a>2.2. 命令行与环境设置</h3><p><strong>第一步：安装 Miniforge</strong> 相比于完整的 Anaconda 发行版，Miniforge 更为轻量，是搭建 Python 环境的更优选择。运行 Miniforge 安装程序，在安装过程中，建议勾选“Add Miniforge3 to my PATH environment variable”选项，这将简化后续的命令行操作 。  </p>\n<p><strong>第二步：安装与配置 Windows Terminal</strong> 从 Microsoft Store 安装 Windows Terminal，它提供了现代化的多标签页和强大的 PowerShell 支持，是执行后续所有命令的推荐工具。</p>\n<p><strong>第三步：为 PowerShell 初始化 Conda</strong> 这是一个常见的障碍点。打开 Windows Terminal (PowerShell)，运行以下命令：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">conda init powershell<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令会修改您的 PowerShell 配置文件，使其能够识别 <code>conda</code> 命令 。完成后，必须关闭并重新打开 Windows Terminal 才能使更改生效。  </p>\n<p><strong>第四步：设置 PowerShell 执行策略</strong> 出于安全考虑，PowerShell 的默认执行策略可能会阻止 Conda 激活脚本的运行。在新的 PowerShell 窗口中，运行以下命令以允许这些脚本执行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在提示时，输入 <code>Y</code> 并按回车确认 。  </p>\n<p><strong>第五步：验证 Conda 安装</strong> 在 PowerShell 口中输入 <code>conda --version</code>。如果安装正确，将显示 Conda 的版本号，表明您的命令行环境已准备就绪。</p>\n<hr>\n<h2 id=\"第三部分：核心引擎-部署加速的-Ollama-后端\"><a href=\"#第三部分：核心引擎-部署加速的-Ollama-后端\" class=\"headerlink\" title=\"第三部分：核心引擎 - 部署加速的 Ollama 后端\"></a>第三部分：核心引擎 - 部署加速的 Ollama 后端</h2><h3 id=\"3-1-为何选择-IPEX-LLM-定制版-Ollama\"><a href=\"#3-1-为何选择-IPEX-LLM-定制版-Ollama\" class=\"headerlink\" title=\"3.1. 为何选择 IPEX-LLM 定制版 Ollama\"></a>3.1. 为何选择 IPEX-LLM 定制版 Ollama</h3><p>在此必须明确：从 <code>ollama.com</code> 官方网站下载的标准版 Ollama 安装程序 <strong>无法</strong> 用于本教程的目标。如果您已经安装了标准版，请先将其卸载。</p>\n<p>我们将使用的是英特尔提供的、内建了 IPEX-LLM 支持的特殊版本。它通过 oneAPI 和 SYCL 技术栈，将推理任务直接交由英特尔 GPU 处理，从而实现硬件加速 。英特尔提供的“便携式压缩包”方案，极大地降低了用户的配置门槛，是目前最推荐、最便捷的部署方式，避免了早期版本中复杂的依赖安装和初始化脚本步骤 。  </p>\n<h3 id=\"3-2-创建专用的-AI-后端环境\"><a href=\"#3-2-创建专用的-AI-后端环境\" class=\"headerlink\" title=\"3.2. 创建专用的 AI 后端环境\"></a>3.2. 创建专用的 AI 后端环境</h3><p>为了避免不同软件间的依赖冲突，我们将为 Ollama 后端创建一个独立的、干净的 Conda 环境。</p>\n<ol>\n<li><p>在 PowerShell 中，运行以下命令创建环境：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">conda create -n ipex-ollama python=3.11 -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会创建一个名为 <code>ipex-ollama</code> 的环境，并指定 Python 版本为 3.11，这是经过验证的兼容版本 。  </p>\n</li>\n<li><p>激活该环境：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">conda activate ipex-ollama<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>激活后，PowerShell 提示符前会显示 <code>(ipex-ollama)</code>，表示您当前正工作在此环境中。</p>\n</li>\n</ol>\n<h3 id=\"3-3-安装-IPEX-LLM-版-Ollama\"><a href=\"#3-3-安装-IPEX-LLM-版-Ollama\" class=\"headerlink\" title=\"3.3. 安装 IPEX-LLM 版 Ollama\"></a>3.3. 安装 IPEX-LLM 版 Ollama</h3><p><strong>第一步：下载便携式软件包</strong> 访问(<a href=\"https://github.com/intel/ipex-llm/releases)%EF%BC%8C%E6%89%BE%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84%E5%8F%91%E8%A1%8C%E7%89%88%EF%BC%8C%E5%B9%B6%E4%B8%8B%E8%BD%BD%E9%80%82%E7%94%A8%E4%BA%8E\">https://github.com/intel/ipex-llm/releases)，找到最新的发行版，并下载适用于</a> Windows 的 <code>Ollama-Portable-Zip</code> 文件 。  </p>\n<p><strong>第二步：解压软件包</strong> 在您的硬盘上创建一个专用于 AI 工具的文件夹，例如 <code>C:\\ai-tools\\</code>。然后在此文件夹下再创建一个 <code>ipex-ollama</code> 文件夹，并将下载的压缩包内容完整地解压到这里。最终路径应类似于 <code>C:\\ai-tools\\ipex-ollama</code>。</p>\n<p><strong>第三步：在终端中导航至该目录</strong> 在已激活 <code>ipex-ollama</code> 环境的 PowerShell 窗口中，使用 <code>cd</code> 命令进入您刚刚创建的文件夹：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">cd C:\\ai-tools\\ipex-ollama<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-4-启动-GPU-加速的-Ollama-服务器\"><a href=\"#3-4-启动-GPU-加速的-Ollama-服务器\" class=\"headerlink\" title=\"3.4. 启动 GPU 加速的 Ollama 服务器\"></a>3.4. 启动 GPU 加速的 Ollama 服务器</h3><p>这是整个流程中最关键的一步。我们需要通过设置特定的环境变量来“指挥”Ollama 使用 GPU。</p>\n<p><strong>关键环境变量解析</strong></p>\n<table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>推荐值</th>\n<th>目的与解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>OLLAMA_NUM_GPU</code></td>\n<td><code>999</code></td>\n<td><strong>最核心的设置</strong>。此变量告知 Ollama 将模型的多少层卸载到 GPU。设置为一个非常大的数字（如 999）等同于“全部卸载”，以最大化利用 GPU 资源 。</td>\n</tr>\n<tr>\n<td><code>ZES_ENABLE_SYSMAN</code></td>\n<td><code>1</code></td>\n<td>启用 Level Zero 驱动程序栈中的 Sysman 库。IPEX-LLM 需要此库来进行 GPU 监控和内存管理 。</td>\n</tr>\n<tr>\n<td><code>SYCL_CACHE_PERSISTENT</code></td>\n<td><code>1</code></td>\n<td>启用持久化 SYCL 内核缓存。当模型第一次加载时，SYCL 会将编译后的 GPU 内核代码缓存到硬盘。这会显著加快后续加载相同或不同模型的速度 。</td>\n</tr>\n</tbody></table>\n<p><strong>启动服务器的命令</strong></p>\n<ol>\n<li><p>在 PowerShell 中，逐行运行以下命令来设置环境变量。这些设置仅对当前终端会话有效。</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">$env:OLLAMA_NUM_GPU=\"999\"\n$env:ZES_ENABLE_SYSMAN=\"1\"\n$env:SYCL_CACHE_PERSISTENT=\"1\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>设置完毕后，运行以下命令启动 Ollama 服务器：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">.\\ollama serve\nor\nstart-ollama.bat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>服务器成功启动后，您会看到类似 <code>time=... level=INFO source=server.go:.. msg=\"starting server...\"</code> 的日志输出。<strong>请务必保持此终端窗口处于打开状态</strong>，因为它就是您的 AI 推理引擎。</p>\n<hr>\n<h2 id=\"第四部分：用户体验-安装并连接-Open-WebUI\"><a href=\"#第四部分：用户体验-安装并连接-Open-WebUI\" class=\"headerlink\" title=\"第四部分：用户体验 - 安装并连接 Open WebUI\"></a>第四部分：用户体验 - 安装并连接 Open WebUI</h2><p>Ollama 后端已经运行，但它只提供了一个命令行接口。为了获得类似 ChatGPT 的图形化聊天体验，我们需要安装一个前端界面——Open WebUI。</p>\n<h3 id=\"4-1-准备前端环境\"><a href=\"#4-1-准备前端环境\" class=\"headerlink\" title=\"4.1. 准备前端环境\"></a>4.1. 准备前端环境</h3><p>同样地，我们将为 Open WebUI 创建一个独立的环境，以确保其依赖项不会与后端环境发生冲突。</p>\n<ol>\n<li><p><strong>打开一个新的 Windows Terminal 标签页或窗口</strong>。不要在运行着 Ollama 服务器的窗口中操作。</p>\n</li>\n<li><p>创建新的 Conda 环境：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">conda create -n open-webui python=3.11 -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>激活此新环境：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">conda activate open-webui<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"4-2-安装并启动-Web-界面\"><a href=\"#4-2-安装并启动-Web-界面\" class=\"headerlink\" title=\"4.2. 安装并启动 Web 界面\"></a>4.2. 安装并启动 Web 界面</h3><ol>\n<li><p>在已激活 <code>open-webui</code> 环境的 PowerShell 窗口中，使用 <code>pip</code> 命令安装 Open WebUI：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">pip install open-webui<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>安装完成后，运行以下命令启动其 Web 服务器：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">open-webui serve<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<p>服务器启动后，您会看到日志输出，并提示服务正在 <code>http://localhost:8080</code> 上运行 。  </p>\n<p><strong>同样，这个终端窗口也必须保持打开状态</strong>。至此，您应该有两个持续运行的终端窗口：一个用于 Ollama 后端，一个用于 Open WebUI 前端。</p>\n<h3 id=\"4-3-首次设置与连接\"><a href=\"#4-3-首次设置与连接\" class=\"headerlink\" title=\"4.3. 首次设置与连接\"></a>4.3. 首次设置与连接</h3><ol>\n<li>打开您的网页浏览器（如 Chrome, Edge, Firefox），访问地址：<code>http://localhost:8080</code>。</li>\n<li>首次访问时，Open WebUI 会引导您创建一个管理员账户。请按提示完成注册 。  </li>\n<li>登录后，Open WebUI 通常会自动检测到在本地 <code>http://localhost:11434</code> 端口上运行的 Ollama 服务并建立连接 。  </li>\n<li>如果连接失败或未自动识别，可以手动进行配置。点击左侧边栏的“设置”图标，进入“连接”选项卡，确认 Ollama API 的 URL 地址已正确设置为 <code>http://localhost:11434</code> 。</li>\n</ol>\n<hr>\n<h2 id=\"第五部分：验证与首次使用-对系统进行测试\"><a href=\"#第五部分：验证与首次使用-对系统进行测试\" class=\"headerlink\" title=\"第五部分：验证与首次使用 - 对系统进行测试\"></a>第五部分：验证与首次使用 - 对系统进行测试</h2><p>现在，万事俱备，是时候验证我们的成果并运行第一个大语言模型了。</p>\n<h3 id=\"5-1-运行您的第一个-LLM\"><a href=\"#5-1-运行您的第一个-LLM\" class=\"headerlink\" title=\"5.1. 运行您的第一个 LLM\"></a>5.1. 运行您的第一个 LLM</h3><ol>\n<li>在 Open WebUI 的主界面，点击顶部的模型选择框。</li>\n<li>在输入框中键入一个模型名称，例如 <code>phi3:medium</code> 或 <code>llama3:8b</code>。由于模型尚未在本地安装，WebUI 会提示您下载它。点击确认后，Open WebUI 会向后端发送指令，开始下载模型 。  </li>\n<li>此时，您可以切换到运行着 <code>ollama serve</code> 的终端窗口，观察模型的下载进度条。</li>\n<li>模型下载完成后，在 WebUI 的聊天框中输入一个简单的问题，例如“天空为什么是蓝色的？”，然后按回车。片刻之后，您应该就能看到由您的 Arc A770 显卡驱动生成的回答。</li>\n</ol>\n<h3 id=\"5-2-确认真正的-GPU-加速\"><a href=\"#5-2-确认真正的-GPU-加速\" class=\"headerlink\" title=\"5.2. 确认真正的 GPU 加速\"></a>5.2. 确认真正的 GPU 加速</h3><p>如何确定模型确实是由 GPU 而非 CPU 运行的？Windows 任务管理器可以给我们明确的答案。</p>\n<p><strong>第一步：打开任务管理器</strong> 按下 <code>Ctrl+Shift+Esc</code> 组合键。</p>\n<p><strong>第二步：导航至“性能”选项卡</strong> 在任务管理器窗口中，点击“性能”选项卡，然后在左侧边栏中找到并点击您的“Intel Arc(TM) Graphics” GPU。</p>\n<p><strong>第三步：更改引擎视图（关键步骤）</strong> 任务管理器默认显示的 GPU 利用率图表是“3D”引擎，这主要用于游戏和图形渲染，与我们的计算任务无关。您需要点击图表上方的下拉菜单（默认为“3D”），然后将其更改为 <strong>Compute_0</strong> 或 <strong>Graphics_1</strong> 。这是 DirectML 和 SYCL 等计算 API 使用的引擎。  </p>\n<p><strong>第四步：观察利用率</strong> 回到 Open WebUI，再次向模型提问，并密切关注任务管理器。在模型生成回答的几秒钟内，您应该能看到“Compute_0”或“Graphics_1”图表出现明显的、尖锐的峰值。</p>\n<p><strong>第五步：观察显存（VRAM）使用情况</strong> 在同一性能页面下，找到“专用 GPU 内存”图表。当您加载并运行模型时，该图表的占用率会显著上升，并维持在一个较高的水平，这表明模型权重已被成功加载到显卡的 VRAM 中 。  </p>\n<p><strong>计算引擎的活动和专用显存的高占用率，是 GPU 加速已成功启用的确凿证据</strong>。</p>\n<h3 id=\"5-3-性能健全性检查：CPU-vs-GPU-对比\"><a href=\"#5-3-性能健全性检查：CPU-vs-GPU-对比\" class=\"headerlink\" title=\"5.3. 性能健全性检查：CPU vs. GPU 对比\"></a>5.3. 性能健全性检查：CPU vs. GPU 对比</h3><p>为了更直观地感受性能差异，可以进行一个简单的对比测试。</p>\n<ol>\n<li>在运行着 <code>ollama serve</code> 的终端窗口中，按 <code>Ctrl+C</code> 停止服务器。</li>\n<li><strong>不设置</strong> <code>OLLAMA_NUM_GPU</code> 环境变量，直接运行 <code>.\\ollama serve</code> 启动服务器。这将强制 Ollama 使用 CPU 进行推理。</li>\n<li>回到 Open WebUI，使用相同的模型提出相同的问题。您会发现回答的生成速度（以 tokens/秒计）明显变慢。</li>\n<li>同时观察任务管理器，此时您会看到 CPU 利用率飙升，而 GPU 的计算引擎则处于空闲状态。这个鲜明的对比无可辩驳地证明了我们之前配置的价值 。</li>\n</ol>\n<hr>\n<h2 id=\"第六部分：深度排错与高级主题\"><a href=\"#第六部分：深度排错与高级主题\" class=\"headerlink\" title=\"第六部分：深度排错与高级主题\"></a>第六部分：深度排错与高级主题</h2><h3 id=\"6-1-常见问题与解决方案\"><a href=\"#6-1-常见问题与解决方案\" class=\"headerlink\" title=\"6.1. 常见问题与解决方案\"></a>6.1. 常见问题与解决方案</h3><table>\n<thead>\n<tr>\n<th>症状</th>\n<th>可能原因</th>\n<th>解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>加载模型时出现 <code>VIDEO_SCHEDULER_INTERNAL_ERROR</code> 蓝屏死机 (BSOD)</td>\n<td>显卡驱动程序不稳定或存在冲突。</td>\n<td>按照第二部分 2.1 节的指导，执行一次驱动程序的“清洁安装”。如果问题依旧，使用 DDU 工具彻底卸载后重装 。</td>\n</tr>\n<tr>\n<td>模型运行缓慢，任务管理器显示 CPU 占用高，GPU 计算引擎无活动。</td>\n<td>启动 <code>ollama serve</code> 之前，未正确设置 <code>$env:OLLAMA_NUM_GPU=\"999\"</code> 环境变量。</td>\n<td>停止服务器 (<code>Ctrl+C</code>)，在 PowerShell 中正确设置该环境变量后，再重新启动服务器 。</td>\n</tr>\n<tr>\n<td>PowerShell 中提示 <code>conda activate</code> 命令未找到。</td>\n<td>Conda 未针对 PowerShell 进行初始化。</td>\n<td>运行 <code>conda init powershell</code> 命令，然后关闭并重新打开 Windows Terminal 。</td>\n</tr>\n<tr>\n<td>Open WebUI 界面显示“服务器连接错误”。</td>\n<td>Ollama 后端服务器未运行，或网络配置问题。</td>\n<td>确保运行 <code>ollama serve</code> 的终端窗口没有关闭且无错误。在 Open WebUI 的“设置 &gt; 连接”中，检查 API URL 是否为 <code>http://localhost:11434</code> 。</td>\n</tr>\n<tr>\n<td>Conda 安装 (<code>pip install</code> 或 <code>conda create</code>) 失败或卡在“Solving environment”。</td>\n<td>Conda 频道冲突或网络连接问题。</td>\n<td>确保网络连接稳定。尝试在终端运行 <code>conda clean -a -y</code> 清理缓存。作为最后的手段，可以尝试 <code>conda config --set channel_priority flexible</code> 。</td>\n</tr>\n</tbody></table>\n<h3 id=\"6-2-定位与阅读日志文件\"><a href=\"#6-2-定位与阅读日志文件\" class=\"headerlink\" title=\"6.2. 定位与阅读日志文件\"></a>6.2. 定位与阅读日志文件</h3><p>当遇到更复杂的问题时，日志文件是您的最佳帮手。</p>\n<ul>\n<li><p><strong>日志文件位置</strong>：</p>\n<ul>\n<li><p><strong>服务器日志</strong>：<code>%LOCALAPPDATA%\\Ollama</code> 目录下的 <code>server.log</code> 文件包含了最新的服务器运行日志 。  </p>\n</li>\n<li><p><strong>模型存储位置</strong>：<code>%HOMEPATH%\\.ollama</code> 目录，这里存放着您下载的所有模型文件 。  </p>\n<p>您可以在文件资源管理器的地址栏直接输入以上路径（包括百分号）来快速访问。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>启用调试日志</strong>： 为了获得更详细的排错信息，可以停止 Ollama 服务器，然后使用以下命令重启，这将启用调试模式：</p>\n<pre class=\"line-numbers language-PowerShell\" data-language=\"PowerShell\"><code class=\"language-PowerShell\">$env:OLLAMA_DEBUG=\"1\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"6-3-高级自定义：更改模型存储位置\"><a href=\"#6-3-高级自定义：更改模型存储位置\" class=\"headerlink\" title=\"6.3. 高级自定义：更改模型存储位置\"></a>6.3. 高级自定义：更改模型存储位置</h3><p>LLM 模型文件通常体积巨大，很多用户希望将它们存储在非系统盘（如 D 盘）上。</p>\n<ol>\n<li>打开 Windows 的“高级系统设置”（可以在开始菜单中搜索）。</li>\n<li>点击“环境变量”按钮。</li>\n<li>在“用户变量”区域，点击“新建”。</li>\n<li>变量名填写 <code>OLLAMA_MODELS</code>。</li>\n<li>变量值填写您希望存储模型的新路径，例如 <code>D:\\OllamaModels</code>。</li>\n<li>逐级点击“确定”保存设置。</li>\n<li><strong>此更改需要完全退出并重新启动 Ollama 应用程序（包括后台服务）才能生效</strong> 。</li>\n</ol>\n<p>通过遵循本指南的详尽步骤，您已成功将您的英特尔 Arc A770 16G 显卡打造成一个强大的本地 AI 推理平台。享受探索大型语言模型世界的乐趣吧！</p>\n",
            "tags": [
                "AI"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/06/21/dai-li-jia-su-you-xi-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/06/21/dai-li-jia-su-you-xi-jiao-cheng/",
            "title": "代理加速游戏教程",
            "date_published": "2025-06-20T16:25:00.000Z",
            "content_html": "<h1 id=\"代理加速游戏教程\"><a href=\"#代理加速游戏教程\" class=\"headerlink\" title=\"代理加速游戏教程\"></a>代理加速游戏教程</h1><h2 id=\"✅-目标\"><a href=\"#✅-目标\" class=\"headerlink\" title=\"✅ 目标\"></a>✅ 目标</h2><p>在 Windows PC 上，通过 <code>v2rayN</code> + <code>Proxifier</code>，让《NIKKE》PC 客户端通过你自己的代理节点（如 VLESS/Vmess/Trojan/Reality）连接港台服务器，加速游戏。</p>\n<hr>\n<h2 id=\"🧰-准备工具\"><a href=\"#🧰-准备工具\" class=\"headerlink\" title=\"🧰 准备工具\"></a>🧰 准备工具</h2><table>\n<thead>\n<tr>\n<th>工具</th>\n<th>说明</th>\n<th>下载地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>✅ v2rayN</td>\n<td>连接你的代理节点并提供本地代理端口</td>\n<td><a href=\"https://github.com/2dust/v2rayN/releases\">GitHub</a></td>\n</tr>\n<tr>\n<td>✅ Proxifier</td>\n<td>把指定程序的流量强制送入代理</td>\n<td><a href=\"https://www.proxifier.com/\">官网</a> 或吾爱破解</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"🪜-配置步骤\"><a href=\"#🪜-配置步骤\" class=\"headerlink\" title=\"🪜 配置步骤\"></a>🪜 配置步骤</h2><hr>\n<h3 id=\"①-安装并配置-v2rayN\"><a href=\"#①-安装并配置-v2rayN\" class=\"headerlink\" title=\"① 安装并配置 v2rayN\"></a>① 安装并配置 v2rayN</h3><h4 id=\"✦-步骤：\"><a href=\"#✦-步骤：\" class=\"headerlink\" title=\"✦ 步骤：\"></a>✦ 步骤：</h4><ol>\n<li>解压 v2rayN，运行 <code>v2rayN.exe</code></li>\n<li>添加你的代理节点（VLESS / Vmess / Trojan / Reality）<ul>\n<li>右键左下角空白 → “添加节点”</li>\n<li>粘贴你从机场获取的节点链接或手动填写</li>\n</ul>\n</li>\n<li>启用节点<ul>\n<li>右键该节点 → <code>设为活动服务器</code></li>\n</ul>\n</li>\n<li>启用代理服务：<ul>\n<li>点工具栏“启用 HTTP 代理”</li>\n</ul>\n</li>\n<li>查看本地监听端口：<ul>\n<li>默认 SOCKS5 地址：<code>127.0.0.1:10808</code></li>\n<li>可在设置 → 本地代理设置中修改</li>\n</ul>\n</li>\n<li>开启多路复用（mux）提升传输效率，参数设置里面</li>\n</ol>\n<p>✅ 到这里，v2rayN 已在本地开启 SOCKS5 代理服务。</p>\n<hr>\n<h3 id=\"②-安装并配置-Proxifier（代理-NIKKE-游戏）\"><a href=\"#②-安装并配置-Proxifier（代理-NIKKE-游戏）\" class=\"headerlink\" title=\"② 安装并配置 Proxifier（代理 NIKKE 游戏）\"></a>② 安装并配置 Proxifier（代理 NIKKE 游戏）</h3><h4 id=\"✦-步骤：-1\"><a href=\"#✦-步骤：-1\" class=\"headerlink\" title=\"✦ 步骤：\"></a>✦ 步骤：</h4><ol>\n<li>安装 Proxifier（或使用绿色版）</li>\n<li>启动 Proxifier，点击菜单 <code>Profile → Proxy Servers</code> → 添加代理：<ul>\n<li>地址：<code>127.0.0.1</code></li>\n<li>端口：<code>10808</code></li>\n<li>类型：<code>SOCKS5</code></li>\n<li>点击 <code>Check</code> 检查是否成功</li>\n</ul>\n</li>\n<li>点击菜单 <code>Profile → Proxification Rules</code> → 添加新规则：<ul>\n<li>Rule name: <code>NIKKE</code></li>\n<li>Applications: 浏览选择 <code>NIKKE.exe</code>（PC 客户端主程序）<ul>\n<li>默认路径例如：<code>C:\\Program Files\\NIKKE\\NIKKE.exe</code></li>\n</ul>\n</li>\n<li>Action: 选择你刚才添加的代理（SOCKS5）</li>\n<li>勾选启用</li>\n</ul>\n</li>\n</ol>\n<p>✅ 此时，<strong>只有 NIKKE.exe 会走代理，其它软件保持直连</strong>。</p>\n<hr>\n<h3 id=\"③-启动流程\"><a href=\"#③-启动流程\" class=\"headerlink\" title=\"③ 启动流程\"></a>③ 启动流程</h3><ol>\n<li>启动 v2rayN，确保节点连接正常（看到“已连接”或有流量日志）</li>\n<li>启动 Proxifier（确认规则已启用）</li>\n<li>启动 NIKKE 游戏客户端</li>\n</ol>\n<hr>\n<h2 id=\"✅-验证代理是否生效\"><a href=\"#✅-验证代理是否生效\" class=\"headerlink\" title=\"✅ 验证代理是否生效\"></a>✅ 验证代理是否生效</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>检查内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>v2rayN 日志窗口</td>\n<td>是否显示 NIKKE 的请求记录</td>\n</tr>\n<tr>\n<td>Proxifier 日志</td>\n<td>是否显示 <code>NIKKE.exe → 通过代理连接</code></td>\n</tr>\n<tr>\n<td>游戏体验</td>\n<td>加速生效，港澳台服连接更快、不卡顿</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"🧱-常见问题\"><a href=\"#🧱-常见问题\" class=\"headerlink\" title=\"🧱 常见问题\"></a>🧱 常见问题</h2><table>\n<thead>\n<tr>\n<th>问题</th>\n<th>原因与解决方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>游戏无网络 / 卡加载</td>\n<td>节点不可用或不支持 UDP → 换节点</td>\n</tr>\n<tr>\n<td>Proxifier 没生效</td>\n<td>没正确添加 <code>NIKKE.exe</code> 路径或端口错误</td>\n</tr>\n<tr>\n<td>v2rayN 没有日志输出</td>\n<td>节点未连接成功 / 规则没匹配</td>\n</tr>\n<tr>\n<td>担心 DNS 泄露</td>\n<td>Proxifier → 设置 → 勾选 “通过代理解析 DNS”</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"✅-教程总结\"><a href=\"#✅-教程总结\" class=\"headerlink\" title=\"✅ 教程总结\"></a>✅ 教程总结</h2><table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>工具</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>设置代理节点</td>\n<td>v2rayN</td>\n<td>接入你的港台/国际节点</td>\n</tr>\n<tr>\n<td>指定程序走代理</td>\n<td>Proxifier</td>\n<td>精确代理 NIKKE.exe 流量</td>\n</tr>\n<tr>\n<td>启动顺序</td>\n<td>v2rayN → Proxifier → NIKKE</td>\n<td></td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"✅-附加建议（可选）\"><a href=\"#✅-附加建议（可选）\" class=\"headerlink\" title=\"✅ 附加建议（可选）\"></a>✅ 附加建议（可选）</h2><ul>\n<li>✅ 开启 v2rayN 的“日志记录”便于排错</li>\n<li>✅ 使用 <code>Reality</code> / <code>VLESS TCP-XTLS</code> 等新协议节点，延迟更低</li>\n<li>✅ 使用干净无劫持的 DNS（如 <code>8.8.8.8</code>、<code>1.1.1.1</code>）</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.lvruan.com/app/44066\">Proxifier 4.14汉化版_统一代理所有流量出口 | 绿软下载 | 绿色软件联盟</a></p>\n",
            "tags": [
                "net"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/06/17/python-bao-guan-li/",
            "url": "https://0xdadream.github.io/2025/06/17/python-bao-guan-li/",
            "title": "Python 包管理与导入全方位教程",
            "date_published": "2025-06-17T04:25:00.000Z",
            "content_html": "<h1 id=\"Python-包管理与导入全方位教程\"><a href=\"#Python-包管理与导入全方位教程\" class=\"headerlink\" title=\"Python 包管理与导入全方位教程\"></a>Python 包管理与导入全方位教程</h1><p>在 Python 开发中，代码的组织、复用和分发都离不开模块（Module）和包（Package）。掌握好它们的导入机制以及如何管理项目依赖，是从新手走向专业的必经之路。</p>\n<p>本教程将涵盖四个核心部分：</p>\n<ol>\n<li><strong>模块与导入：基础篇</strong> - 理解 Python 如何导入单个文件。</li>\n<li><strong>包的创建与内部导入：进阶篇</strong> - 如何组织你自己的项目代码。</li>\n<li><strong>使用 <code>pip</code> 管理外部包：工具篇</strong> - 如何安装和使用社区的优秀代码。</li>\n<li><strong>虚拟环境：最佳实践</strong> - 为什么需要以及如何使用虚拟环境来隔离项目。</li>\n</ol>\n<hr>\n<h3 id=\"Part-1-模块与导入：基础篇\"><a href=\"#Part-1-模块与导入：基础篇\" class=\"headerlink\" title=\"Part 1: 模块与导入：基础篇\"></a>Part 1: 模块与导入：基础篇</h3><h4 id=\"1-1-什么是模块-Module-？\"><a href=\"#1-1-什么是模块-Module-？\" class=\"headerlink\" title=\"1.1 什么是模块 (Module)？\"></a>1.1 什么是模块 (Module)？</h4><p>在 Python 中，<strong>任何一个 <code>.py</code> 文件都可以被看作一个模块</strong>。模块能让你将相关的代码（函数、类、变量）组织在一起，方便在其他地方复用。</p>\n<p>例如，我们创建一个 <code>math_utils.py</code> 文件：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\"># math_utils.py\nPI = 3.14159\n\ndef add(a, b):\n    return a + b\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return PI * self.radius * self.radius<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"1-2-import-语句的基本用法\"><a href=\"#1-2-import-语句的基本用法\" class=\"headerlink\" title=\"1.2 import 语句的基本用法\"></a>1.2 <code>import</code> 语句的基本用法</h4><p><code>import</code> 语句用于将其他模块的功能引入到当前文件中。</p>\n<p><strong>方式一：导入整个模块</strong> 这是最常见的方式。你需要通过 <code>模块名.</code> 的前缀来访问其内容。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\"># main.py\nimport math_utils\n\nprint(math_utils.PI)  # 输出: 3.14159\n\nsum_result = math_utils.add(3, 5)\nprint(sum_result) # 输出: 8\n\nmy_circle = math_utils.Circle(10)\nprint(my_circle.area()) # 输出: 314.159<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>方式二：使用 <code>as</code> 设置别名</strong> 如果模块名太长或者容易混淆，可以给它设置一个简短的别名。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">import math_utils as mu\n\nprint(mu.PI)\nprint(mu.add(3, 5))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>方式三：使用 <code>from...import...</code> 导入特定内容</strong> 如果你只需要模块中的某几个部分，可以使用 <code>from</code> 关键字直接导入它们。这样，在使用时就不需要加模块名前缀了。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">from math_utils import add, Circle\n\nsum_result = add(4, 6) # 直接调用 add，无需前缀\nprint(sum_result) # 输出: 10\n\nmy_circle = Circle(5)\nprint(my_circle.area()) # 输出: 78.53975<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也可以为导入的特定内容设置别名：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">from math_utils import add as sum_func\n\nresult = sum_func(1, 2)\nprint(result) # 输出: 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>方式四：<code>from...import \\*</code>（不推荐）</strong> 这会导入模块中所有非下划线开头的内容。<strong>强烈不推荐</strong>在大型项目中使用，因为它会污染当前文件的命名空间，你可能不知道哪些函数和变量被导入了，容易导致名称冲突和代码可读性下降。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\"># 谨慎使用！\nfrom math_utils import *\n\nprint(PI) # 直接可用\nprint(add(1, 1)) # 直接可用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"Part-2-包的创建与内部导入：进阶篇\"><a href=\"#Part-2-包的创建与内部导入：进阶篇\" class=\"headerlink\" title=\"Part 2: 包的创建与内部导入：进阶篇\"></a>Part 2: 包的创建与内部导入：进阶篇</h3><p>当项目变得复杂，一个文件已经不够用时，我们就需要用“包”（Package）来组织模块。</p>\n<h4 id=\"2-1-什么是包-Package-？\"><a href=\"#2-1-什么是包-Package-？\" class=\"headerlink\" title=\"2.1 什么是包 (Package)？\"></a>2.1 什么是包 (Package)？</h4><p>简单来说，<strong>一个包含 <code>__init__.py</code> 文件的目录就是一个包</strong>。这个目录里可以存放多个模块（<code>.py</code> 文件）或者子包。</p>\n<p><code>__init__.py</code> 文件有几个作用：</p>\n<ol>\n<li><strong>标记作用</strong>：它的存在告诉 Python 这个目录应该被当作一个包来对待。在 Python 3.3+ 版本中，即使没有这个文件，也可能被当作“命名空间包”，但为了兼容性和清晰性，<strong>强烈建议总是创建它</strong>。</li>\n<li><strong>初始化操作</strong>：可以在这个文件中编写代码，当包被导入时，这些代码会自动执行。</li>\n<li><strong>简化导入</strong>：可以在 <code>__init__.py</code> 中使用 <code>from .module import func</code> 的方式，将包深处的函数或类暴露到包的顶层，方便外部调用。</li>\n</ol>\n<h4 id=\"2-2-项目结构示例\"><a href=\"#2-2-项目结构示例\" class=\"headerlink\" title=\"2.2 项目结构示例\"></a>2.2 项目结构示例</h4><p>让我们构建一个清晰的项目结构作为例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">my_project/\n├── main.py             <span class=\"token comment\"># 项目主入口文件</span>\n└── my_app/             <span class=\"token comment\"># 我们的主应用包</span>\n    ├── __init__.py\n    ├── core/           <span class=\"token comment\"># 子包：核心功能</span>\n    │   ├── __init__.py\n    │   └── calculator.py\n    └── utils/          <span class=\"token comment\"># 子包：工具函数</span>\n        ├── __init__.py\n        └── formatter.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p><code>calculator.py</code> 内容:</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\"># my_app/core/calculator.py\ndef add(a, b):\n    return a + b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>formatter.py</code> 内容:</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\"># my_app/utils/formatter.py\ndef format_as_json(data):\n    # 这是一个简化的例子\n    return f'{{\"result\": {data}}}'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"2-3-包内导入：绝对导入-vs-相对导入\"><a href=\"#2-3-包内导入：绝对导入-vs-相对导入\" class=\"headerlink\" title=\"2.3 包内导入：绝对导入 vs 相对导入\"></a>2.3 包内导入：绝对导入 vs 相对导入</h4><p>现在，假设我们想在 <code>calculator.py</code> 中使用 <code>formatter.py</code> 的功能（虽然这个例子不太合逻辑，但很适合演示）。这就要用到包内导入。</p>\n<p><strong>1. 绝对导入 (Absolute Import) - 推荐</strong></p>\n<p>绝对导入总是从项目的<strong>根目录</strong>（可以被 Python 找到的路径，通常是你运行命令的目录）开始。它路径清晰，不容易出错，是 PEP 8 规范推荐的方式。</p>\n<p>假设我们在 <code>main.py</code> 中想使用 <code>calculator</code> 和 <code>formatter</code>：</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\"># main.py\nfrom my_app.core import calculator\nfrom my_app.utils import formatter\n\nresult = calculator.add(10, 20)\nprint(formatter.format_as_json(result))\n# 输出: {\"result\": 30}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2. 相对导入 (Relative Import)</strong></p>\n<p>相对导入使用 <code>.</code> 或 <code>..</code> 来表示相对位置，它<strong>只能在包内部使用</strong>，不能在顶级脚本中使用。</p>\n<ul>\n<li><code>.</code>：表示当前目录。</li>\n<li><code>..</code>：表示上级目录。</li>\n</ul>\n<p>现在，假设我们的 <code>calculator.py</code> 需要调用 <code>formatter.py</code>。这在不同目录，<code>calculator.py</code> 需要先回到父级目录 <code>my_app</code>，再进入 <code>utils</code> 目录。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\"># my_app/core/calculator.py\n\n# '..' 代表回到 calculator.py 的上级目录 (core -&gt; my_app)\n# 然后从 my_app 进入 utils 包，导入 formatter 模块\nfrom ..utils import formatter\n\ndef add_and_format(a, b):\n    sum_val = a + b\n    return formatter.format_as_json(sum_val)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>⚠️ 常见的陷阱：<code>ImportError</code></strong></p>\n<p>如果你直接运行一个使用了相对导入的文件，就会触发 <code>ImportError: attempted relative import with no known parent package</code> 错误。</p>\n<p>例如，直接在终端里运行： <code>python my_app/core/calculator.py</code></p>\n<p>这会失败！因为 Python 将 <code>calculator.py</code> 当作顶级脚本，它不知道自己的“父包”是谁。</p>\n<p><strong>正确的运行方式</strong>是从项目的根目录 <code>my_project/</code> 执行：</p>\n<ul>\n<li><p>如果你要运行 main.py（它使用绝对导入），直接运行即可：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">cd my_project/\npython main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>如果你想把某个子模块当作脚本运行（例如测试），请使用 -m 标志：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">cd my_project/\npython -m my_app.core.calculator<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"Part-3-使用-pip-管理外部包：工具篇\"><a href=\"#Part-3-使用-pip-管理外部包：工具篇\" class=\"headerlink\" title=\"Part 3: 使用 pip 管理外部包：工具篇\"></a>Part 3: 使用 <code>pip</code> 管理外部包：工具篇</h3><p>当项目需要用到第三方库（如 <code>requests</code> 用于网络请求，<code>pandas</code> 用于数据分析）时，就需要包管理器。Python 的标准包管理器是 <code>pip</code>。</p>\n<h4 id=\"3-1-pip-基础命令\"><a href=\"#3-1-pip-基础命令\" class=\"headerlink\" title=\"3.1 pip 基础命令\"></a>3.1 <code>pip</code> 基础命令</h4><ul>\n<li><p><strong>安装包</strong>:</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">pip install requests<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装指定版本的包</strong>:</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">pip install requests==2.28.1\npip install \"requests&gt;=2.25.0\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>卸载包</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip uninstall requests<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>查看已安装的包</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>查看某个包的详细信息</strong>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip show requests<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"3-2-使用-requirements-txt-管理项目依赖\"><a href=\"#3-2-使用-requirements-txt-管理项目依赖\" class=\"headerlink\" title=\"3.2 使用 requirements.txt 管理项目依赖\"></a>3.2 使用 <code>requirements.txt</code> 管理项目依赖</h4><p>当你的项目依赖多个包，或者你需要与他人协作时，手动一个一个安装包是不可行的。最佳实践是使用 <code>requirements.txt</code> 文件来记录所有依赖。</p>\n<ol>\n<li><p><strong>生成 <code>requirements.txt</code></strong>: 当你完成开发，将当前环境中所有包及其版本信息冻结（freeze）到一个文件中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip freeze <span class=\"token operator\">&gt;</span> requirements.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>文件内容可能如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">certifi</span><span class=\"token operator\">==</span><span class=\"token number\">2022.9</span>.24\ncharset-normalizer<span class=\"token operator\">==</span><span class=\"token number\">2.1</span>.1\n<span class=\"token assign-left variable\">idna</span><span class=\"token operator\">==</span><span class=\"token number\">3.4</span>\n<span class=\"token assign-left variable\">requests</span><span class=\"token operator\">==</span><span class=\"token number\">2.28</span>.1\n<span class=\"token assign-left variable\">urllib3</span><span class=\"token operator\">==</span><span class=\"token number\">1.26</span>.12<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>从 <code>requirements.txt</code> 安装</strong>: 当另一个开发者拿到你的项目后，只需一条命令就可以安装所有必需的依赖：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h3 id=\"Part-4-虚拟环境：最佳实践\"><a href=\"#Part-4-虚拟环境：最佳实践\" class=\"headerlink\" title=\"Part 4: 虚拟环境：最佳实践\"></a>Part 4: 虚拟环境：最佳实践</h3><h4 id=\"4-1-为什么需要虚拟环境？\"><a href=\"#4-1-为什么需要虚拟环境？\" class=\"headerlink\" title=\"4.1 为什么需要虚拟环境？\"></a>4.1 为什么需要虚拟环境？</h4><p>想象一下：</p>\n<ul>\n<li>项目 A 需要 <code>requests</code> 的 1.0 版本。</li>\n<li>项目 B 需要 <code>requests</code> 的 2.0 版本。</li>\n</ul>\n<p>如果你将它们都安装在全局的 Python环境中，就会产生版本冲突，导致一个项目无法正常工作。</p>\n<p><strong>虚拟环境（Virtual Environment）</strong> 就是为了解决这个问题而生的。它能为每个项目创建一个独立的、隔离的 Python 环境。你在其中安装的所有包都只属于这个项目，不会影响到全局环境或其他项目。</p>\n<h4 id=\"4-2-使用-venv（Python-内置工具）\"><a href=\"#4-2-使用-venv（Python-内置工具）\" class=\"headerlink\" title=\"4.2 使用 venv（Python 内置工具）\"></a>4.2 使用 <code>venv</code>（Python 内置工具）</h4><p>从 Python 3.3 开始，<code>venv</code> 模块成为创建虚拟环境的标准工具。</p>\n<p><strong>1. 创建虚拟环境</strong>: 在你的项目根目录下，运行以下命令。<code>venv</code> 是你给这个环境起的名字，这是一个通用惯例。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># 在 my_project/ 目录下\npython -m venv venv<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>执行后，会创建一个 <code>venv</code> 目录，里面包含了独立的 Python 解释器和包安装目录。</p>\n<p><strong>2. 激活虚拟环境</strong>: 在使用前，你必须“激活”它。</p>\n<ul>\n<li><p>Windows:</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">.\\venv\\Scripts\\activate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>macOS / Linux:</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">source venv/bin/activate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p>激活后，你会发现你的命令行提示符前面多了 <code>(venv)</code> 的字样，表示你正处于这个虚拟环境中。</p>\n<p><strong>3. 在虚拟环境中工作</strong>: 激活后，你使用的 <code>python</code> 和 <code>pip</code> 命令都将是该环境内的版本。</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\"># (venv) D:\\path\\to\\my_project&gt;\npip install requests\npip freeze &gt; requirements.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>现在 <code>requests</code> 被安装到了 <code>my_project/venv/Lib/site-packages</code> 目录下，而不是全局。</p>\n<p><strong>4. 停用虚拟环境</strong>: 当你工作完成，想回到全局环境时，只需运行：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">deactivate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"4-3-结合-gitignore\"><a href=\"#4-3-结合-gitignore\" class=\"headerlink\" title=\"4.3 结合 .gitignore\"></a>4.3 结合 <code>.gitignore</code></h4><p>虚拟环境目录 (<code>venv</code>) 不应该被提交到 Git 等版本控制系统中。它包含了大量文件，并且可以在任何地方通过 <code>requirements.txt</code> 重建。</p>\n<p>因此，请务必在你的 <code>.gitignore</code> 文件中添加 <code>venv/</code> 这一行。</p>\n<h3 id=\"总结：专业的开发流程\"><a href=\"#总结：专业的开发流程\" class=\"headerlink\" title=\"总结：专业的开发流程\"></a>总结：专业的开发流程</h3><ol>\n<li><strong>项目启动</strong>：<ul>\n<li>创建项目主目录（如 <code>my_project</code>）。</li>\n<li><code>cd my_project</code></li>\n<li>创建虚拟环境：<code>python -m venv venv</code></li>\n<li>激活环境：<code>source venv/bin/activate</code> (或 Windows 对应命令)。</li>\n</ul>\n</li>\n<li><strong>开发过程</strong>：<ul>\n<li>使用 <code>pip install &lt;package_name&gt;</code> 安装所需第三方库。</li>\n<li>按照包的结构组织你的代码（创建 <code>my_app</code>, <code>__init__.py</code> 等）。</li>\n<li>在包内部优先使用<strong>绝对导入</strong>，或在必要时使用相对导入。</li>\n</ul>\n</li>\n<li><strong>依赖管理</strong>：<ul>\n<li>定期更新 <code>requirements.txt</code> 文件：<code>pip freeze &gt; requirements.txt</code>。</li>\n</ul>\n</li>\n<li><strong>项目交付/协作</strong>：<ul>\n<li>其他人获取你的代码后，只需重复第一步创建并激活虚拟环境，然后运行 <code>pip install -r requirements.txt</code> 即可搭建出完全一致的开发环境。</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/05/02/whl-wen-jian-ming-hou-zhui/",
            "url": "https://0xdadream.github.io/2025/05/02/whl-wen-jian-ming-hou-zhui/",
            "title": "whl文件名后缀",
            "date_published": "2025-05-02T04:25:00.000Z",
            "content_html": "<h1 id=\"whl文件名后缀\"><a href=\"#whl文件名后缀\" class=\"headerlink\" title=\"whl文件名后缀\"></a>whl文件名后缀</h1><h2 id=\"1-Wheel-文件名的基本格式\"><a href=\"#1-Wheel-文件名的基本格式\" class=\"headerlink\" title=\"1. Wheel 文件名的基本格式\"></a>1. Wheel 文件名的基本格式</h2><p>Wheel 名称遵循 PEP 427 规范，通用格式为：</p>\n<pre class=\"line-numbers language-ruby\" data-language=\"ruby\"><code class=\"language-ruby\"><span class=\"token punctuation\">{</span>distribution<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>version<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>build tag<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>python tag<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>abi tag<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span><span class=\"token punctuation\">{</span>platform tag<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>whl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>distribution</strong>：包名</li>\n<li><strong>version</strong>：包版本</li>\n<li><strong>build tag</strong>（可选）：构建号</li>\n<li><strong>python tag</strong>：支持的 Python 解释器及版本</li>\n<li><strong>abi tag</strong>：二进制兼容的 ABI（应用二进制接口）</li>\n<li><strong>platform tag</strong>：目标操作系统和硬件平台</li>\n</ul>\n<p>例子：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">mypkg-1.2.3-1-cp39-cp39-manylinux2014_x86_64.whl\n       │    │   │    │            └──── platform tag\n       │    │   │    └──────────────── abi tag\n       │    │   └─────────────────────── python tag\n       │    └─────────────────────────── build tag\n       └─────────────────────────────── distribution-version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"2-build-tag\"><a href=\"#2-build-tag\" class=\"headerlink\" title=\"2. build tag\"></a>2. build tag</h2><ul>\n<li>格式：一个整数，有时候也会带字母或其他标识</li>\n<li>用途：同一版本的多次编译时区分，比如针对不同源或依赖变动的二进制重构</li>\n<li>示例：<ul>\n<li><code>mypkg-1.0-1-...</code> 与 <code>mypkg-1.0-2-...</code> 表示同一版本的第 1 次和第 2 次构建</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-python-tag\"><a href=\"#3-python-tag\" class=\"headerlink\" title=\"3. python tag\"></a>3. python tag</h2><p>指明哪些 Python 解释器及版本可以安装该 Wheel。常见格式及含义：</p>\n<table>\n<thead>\n<tr>\n<th>tag 示例</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>py3</code></td>\n<td>支持所有 Python 3.x</td>\n</tr>\n<tr>\n<td><code>py36</code> 、<code>py37</code>…</td>\n<td>专用于 Python 3.6、3.7 等</td>\n</tr>\n<tr>\n<td><code>py2.py3</code></td>\n<td>同时支持 Python 2.x 和 3.x</td>\n</tr>\n<tr>\n<td><code>cp39</code></td>\n<td>CPython 3.9</td>\n</tr>\n<tr>\n<td><code>cp310</code></td>\n<td>CPython 3.10</td>\n</tr>\n<tr>\n<td><code>pp37</code></td>\n<td>PyPy 3.7</td>\n</tr>\n<tr>\n<td><code>jy37</code></td>\n<td>Jython 2.7（标识为 <code>jy27</code>）等</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>前缀</strong><ul>\n<li><code>py</code>：纯 Python 实现</li>\n<li><code>cp</code>：CPython（二进制扩展）</li>\n<li><code>pp</code>：PyPy</li>\n<li><code>jy</code>：Jython</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-abi-tag\"><a href=\"#4-abi-tag\" class=\"headerlink\" title=\"4. abi tag\"></a>4. abi tag</h2><p>ABI（Application Binary Interface）决定了编译的 C 扩展与解释器的二进制兼容性。常见 ABI tag：</p>\n<table>\n<thead>\n<tr>\n<th>tag 示例</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>none</code></td>\n<td>纯 Python 包，不含 C 扩展</td>\n</tr>\n<tr>\n<td><code>abi3</code></td>\n<td>使用了稳定的“limited API”（PEP 384），跨多个 CPython 版本兼容</td>\n</tr>\n<tr>\n<td><code>cp39</code></td>\n<td>针对 CPython 3.9 标准 ABI 编译</td>\n</tr>\n<tr>\n<td><code>cp39m</code></td>\n<td>CPython 3.9 + pymalloc enabled（<code>m</code>）</td>\n</tr>\n<tr>\n<td><code>cp310d</code></td>\n<td>CPython 3.10 Debug build（<code>d</code>）</td>\n</tr>\n</tbody></table>\n<ul>\n<li>如果 <code>python tag</code> 与 <code>abi tag</code> 一致（如 <code>cp39-cp39</code>），表示该包针对该版本的标准 ABI 编译</li>\n<li>带后缀的如 <code>m</code>、<code>d</code>、<code>u</code> 等表示特定的编译选项</li>\n</ul>\n<hr>\n<h2 id=\"5-platform-tag\"><a href=\"#5-platform-tag\" class=\"headerlink\" title=\"5. platform tag\"></a>5. platform tag</h2><p>描述该 Wheel 的目标操作系统、系统版本和 CPU 架构。常见平台 tag 及示例：</p>\n<table>\n<thead>\n<tr>\n<th>platform tag 示例</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>manylinux1_x86_64</code></td>\n<td>Linux x86_64，符合 Manylinux1 标准</td>\n</tr>\n<tr>\n<td><code>manylinux2014_aarch64</code></td>\n<td>Linux ARM64，符合 Manylinux2014 标准</td>\n</tr>\n<tr>\n<td><code>win_amd64</code></td>\n<td>Windows 64 位</td>\n</tr>\n<tr>\n<td><code>win32</code></td>\n<td>Windows 32 位</td>\n</tr>\n<tr>\n<td><code>macosx_10_9_x86_64</code></td>\n<td>macOS 10.9+ on x86_64</td>\n</tr>\n<tr>\n<td><code>macosx_11_0_arm64</code></td>\n<td>macOS 11+ on Apple Silicon (ARM64)</td>\n</tr>\n<tr>\n<td><code>any</code></td>\n<td>平台无关（纯 Python 包）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>manylinux</strong> 系列：用于在大多数 Linux 发行版上安装二进制扩展</li>\n<li><strong>macosx</strong>：通常还会带上最低支持的 macOS 版本号</li>\n<li><strong>any</strong>：完全纯 Python，无平台限制</li>\n</ul>\n<hr>\n<h2 id=\"6-综合示例解析\"><a href=\"#6-综合示例解析\" class=\"headerlink\" title=\"6. 综合示例解析\"></a>6. 综合示例解析</h2><table>\n<thead>\n<tr>\n<th>Wheel 名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>requests-2.28.1-py3-none-any.whl</code></td>\n<td>纯 Python 包 <code>requests</code> v2.28.1，支持所有 Python 3，平台无关</td>\n</tr>\n<tr>\n<td><code>numpy-1.24.0-cp39-cp39-manylinux2014_x86_64.whl</code></td>\n<td><code>numpy</code> v1.24.0，CPython 3.9 标准 ABI，Linux x86_64 二进制</td>\n</tr>\n<tr>\n<td><code>Pillow-9.3.0-cp310-cp310-win_amd64.whl</code></td>\n<td><code>Pillow</code> v9.3.0，CPython 3.10，Windows 64 位</td>\n</tr>\n<tr>\n<td><code>somepkg-0.1.0-2-cp38-abi3-manylinux1_x86_64.whl</code></td>\n<td><code>somepkg</code> v0.1.0，第 2 次构建，CPython 3.8 编译但使用 abi3，Linux x86_64</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"7-为什么要了解这些后缀\"><a href=\"#7-为什么要了解这些后缀\" class=\"headerlink\" title=\"7. 为什么要了解这些后缀\"></a>7. 为什么要了解这些后缀</h2><ol>\n<li><strong>避免安装失败</strong><ul>\n<li><code>pip install package.whl</code> 时，若当前环境的 Python 版本、ABI 或平台与 Wheel 不匹配，安装会被跳过或报错。</li>\n</ul>\n</li>\n<li><strong>提高下载速度</strong><ul>\n<li>选择预编译好的 <code>.whl</code>，可免去源码编译时间，尤其是大型 C 扩展库（如 NumPy、SciPy）。</li>\n</ul>\n</li>\n<li><strong>跨平台兼容</strong><ul>\n<li>理解 <code>manylinux</code>、<code>macosx</code>、<code>win</code> 等标签，有助于在不同系统间无痛部署。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"8-查找可用的-Wheel\"><a href=\"#8-查找可用的-Wheel\" class=\"headerlink\" title=\"8. 查找可用的 Wheel\"></a>8. 查找可用的 Wheel</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip index versions PACKAGE_NAME<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> PACKAGE_NAME --only-binary<span class=\"token operator\">=</span>:all:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>第一个命令列出所有可用版本及对应的 Wheel</li>\n<li>第二个命令强制只使用二进制 Wheel 安装</li>\n</ul>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/04/10/linux-an-zhuang-conda-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/04/10/linux-an-zhuang-conda-jiao-cheng/",
            "title": "Linux安装Conda教程",
            "date_published": "2025-04-10T05:25:00.000Z",
            "content_html": "<h1 id=\"Linux安装Conda教程\"><a href=\"#Linux安装Conda教程\" class=\"headerlink\" title=\"Linux安装Conda教程\"></a>Linux安装Conda教程</h1><h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h2><h3 id=\"1-1-系统要求\"><a href=\"#1-1-系统要求\" class=\"headerlink\" title=\"1.1 系统要求\"></a>1.1 系统要求</h3><ul>\n<li>操作系统：大多数 Linux 发行版（如 Ubuntu、Debian、CentOS、Fedora 等）都可使用。</li>\n<li>权限：建议使用普通用户（避免使用 root 权限直接安装）来安装并管理 conda 环境。</li>\n<li>网络连接：需要下载安装脚本，可以使用 <code>wget</code> 或 <code>curl</code> 工具。</li>\n</ul>\n<h3 id=\"1-2-安装前依赖（可选）\"><a href=\"#1-2-安装前依赖（可选）\" class=\"headerlink\" title=\"1.2 安装前依赖（可选）\"></a>1.2 安装前依赖（可选）</h3><p>大多数 Linux 系统都自带 <code>bash</code> 和基本工具。如果你的系统缺少 wget 或 curl，可以使用包管理器安装，例如：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># Ubuntu / Debian 系统</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">wget</span> <span class=\"token function\">curl</span>\n\n<span class=\"token comment\"># CentOS / Fedora 系统</span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token function\">wget</span> <span class=\"token function\">curl</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"2-下载-Miniconda-安装脚本\"><a href=\"#2-下载-Miniconda-安装脚本\" class=\"headerlink\" title=\"2. 下载 Miniconda 安装脚本\"></a>2. 下载 Miniconda 安装脚本</h2><p>Miniconda 提供了适用于 Linux 的安装脚本。可以按以下步骤操作：</p>\n<h3 id=\"2-1-选择合适的安装程序\"><a href=\"#2-1-选择合适的安装程序\" class=\"headerlink\" title=\"2.1 选择合适的安装程序\"></a>2.1 选择合适的安装程序</h3><p>对于大多数 64 位系统，下载最新的 Miniconda3 版本。安装脚本文件名为 <code>Miniconda3-latest-Linux-x86_64.sh</code>。</p>\n<h3 id=\"2-2-使用-wget-或-curl-下载\"><a href=\"#2-2-使用-wget-或-curl-下载\" class=\"headerlink\" title=\"2.2 使用 wget 或 curl 下载\"></a>2.2 使用 wget 或 curl 下载</h3><p>使用 <code>wget</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或使用 <code>curl</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-O</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"3-验证安装包完整性（可选）\"><a href=\"#3-验证安装包完整性（可选）\" class=\"headerlink\" title=\"3. 验证安装包完整性（可选）\"></a>3. 验证安装包完整性（可选）</h2><p>为确保下载的文件未被破坏或篡改，可以检查 SHA256 校验和。你需要从 Miniconda 官方页面 查看对应版本的正确 SHA256 值，然后执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sha256sum Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>比较输出结果和官方提供的校验和。如果一致，则可以继续安装。</p>\n<hr>\n<h2 id=\"4-安装-Miniconda\"><a href=\"#4-安装-Miniconda\" class=\"headerlink\" title=\"4. 安装 Miniconda\"></a>4. 安装 Miniconda</h2><h3 id=\"4-1-赋予执行权限\"><a href=\"#4-1-赋予执行权限\" class=\"headerlink\" title=\"4.1 赋予执行权限\"></a>4.1 赋予执行权限</h3><p>首先为下载的脚本添加执行权限：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> +x Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-2-运行安装脚本\"><a href=\"#4-2-运行安装脚本\" class=\"headerlink\" title=\"4.2 运行安装脚本\"></a>4.2 运行安装脚本</h3><p>使用 bash 执行安装脚本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./Miniconda3-latest-Linux-x86_64.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-3-安装过程中注意事项\"><a href=\"#4-3-安装过程中注意事项\" class=\"headerlink\" title=\"4.3 安装过程中注意事项\"></a>4.3 安装过程中注意事项</h3><ol>\n<li><strong>阅读许可协议</strong>：安装脚本开始时会显示许可协议，需要按下 <code>Enter</code> 浏览内容，然后输入 <code>yes</code> 接受许可协议。</li>\n<li><strong>选择安装路径</strong>：脚本默认建议安装到用户主目录下的 <code>miniconda3</code> 目录。你可以按回车键接受默认设置，也可以输入自定义路径。</li>\n<li><strong>初始化 conda</strong>：安装过程中会询问是否初始化 conda（即修改 shell 启动文件，如 <code>~/.bashrc</code>）。推荐选择 “yes”，这样每次登录时都会自动加载 conda 环境配置。</li>\n</ol>\n<p>安装完成后，安装脚本会显示 “installation finished.” 的提示。</p>\n<hr>\n<h2 id=\"5-激活-conda-环境\"><a href=\"#5-激活-conda-环境\" class=\"headerlink\" title=\"5. 激活 conda 环境\"></a>5. 激活 conda 环境</h2><p>如果安装时选择了初始化，则会自动在 <code>~/.bashrc</code> 中添加必要的配置，通常类似如下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span>\n<span class=\"token comment\"># !! Contents within this block are managed by 'conda init' !!</span>\n<span class=\"token assign-left variable\">__conda_setup</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>'/home/your_username/miniconda3/bin/conda<span class=\"token string\">' '</span>shell.bash<span class=\"token string\">' '</span>hook' <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>&gt;</span> /dev/null<span class=\"token variable\">)</span></span>\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\">$__conda_setup</span>\"</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> <span class=\"token string\">\"/home/your_username/miniconda3/etc/profile.d/conda.sh\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        <span class=\"token builtin class-name\">.</span> <span class=\"token string\">\"/home/your_username/miniconda3/etc/profile.d/conda.sh\"</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"/home/your_username/miniconda3/bin:<span class=\"token environment constant\">$PATH</span>\"</span>\n    <span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token builtin class-name\">unset</span> __conda_setup\n<span class=\"token comment\"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你没有选择自动初始化，可以手动执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/miniconda3/etc/profile.d/conda.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者直接将 conda 的路径添加到你的 PATH 环境变量中：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=~</span>/miniconda3/bin:<span class=\"token environment constant\">$PATH</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>建议将上述命令添加到 <code>~/.bashrc</code> 或其他相应的 shell 配置文件中。</p>\n<hr>\n<h2 id=\"6-验证安装\"><a href=\"#6-验证安装\" class=\"headerlink\" title=\"6. 验证安装\"></a>6. 验证安装</h2><p>打开一个新的终端或在当前终端执行激活命令后，运行以下命令检查 conda 是否安装成功：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda <span class=\"token parameter variable\">--version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>正常情况下，会输出类似 <code>conda 4.x.x</code> 版本信息。</p>\n<hr>\n<h2 id=\"7-基本使用\"><a href=\"#7-基本使用\" class=\"headerlink\" title=\"7. 基本使用\"></a>7. 基本使用</h2><h3 id=\"7-1-创建虚拟环境\"><a href=\"#7-1-创建虚拟环境\" class=\"headerlink\" title=\"7.1 创建虚拟环境\"></a>7.1 创建虚拟环境</h3><p>例如，创建一个名为 <code>myenv</code> 的环境，并安装 Python 3.9：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> myenv <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"7-2-激活虚拟环境\"><a href=\"#7-2-激活虚拟环境\" class=\"headerlink\" title=\"7.2 激活虚拟环境\"></a>7.2 激活虚拟环境</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate myenv<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>激活后，命令提示符中会显示环境名称。</p>\n<h3 id=\"7-3-安装其他包\"><a href=\"#7-3-安装其他包\" class=\"headerlink\" title=\"7.3 安装其他包\"></a>7.3 安装其他包</h3><p>可以直接使用 conda 安装需要的包，例如安装 numpy：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda <span class=\"token function\">install</span> numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此外，也可以使用 pip 安装不在 conda 仓库里的包，但推荐先查找 conda 仓库，因为 conda 可能已经进行了优化和依赖管理。</p>\n<h3 id=\"7-4-更新-conda\"><a href=\"#7-4-更新-conda\" class=\"headerlink\" title=\"7.4 更新 conda\"></a>7.4 更新 conda</h3><p>建议定期更新 conda 以确保使用最新的功能和安全补丁：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda update conda<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"8-常见问题排查\"><a href=\"#8-常见问题排查\" class=\"headerlink\" title=\"8. 常见问题排查\"></a>8. 常见问题排查</h2><h3 id=\"8-1-conda-命令未找到\"><a href=\"#8-1-conda-命令未找到\" class=\"headerlink\" title=\"8.1 conda 命令未找到\"></a>8.1 conda 命令未找到</h3><ul>\n<li><p>请确保你的 <code>~/.bashrc</code> 文件已正确载入，可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> ~/.bashrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>检查是否正确添加了 conda 的安装路径至 PATH 环境变量中。</p>\n</li>\n</ul>\n<h3 id=\"8-2-安装或更新失败\"><a href=\"#8-2-安装或更新失败\" class=\"headerlink\" title=\"8.2 安装或更新失败\"></a>8.2 安装或更新失败</h3><ul>\n<li>检查网络连接或国内用户是否需要配置代理或使用镜像源（例如清华、阿里等提供的 conda 镜像）。</li>\n<li>参考官方文档（conda 官方文档）获取更多帮助和说明。</li>\n</ul>\n<hr>\n<h2 id=\"9-参考资料\"><a href=\"#9-参考资料\" class=\"headerlink\" title=\"9. 参考资料\"></a>9. 参考资料</h2><ul>\n<li></li>\n<li></li>\n</ul>\n",
            "tags": [
                "conda"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/04/10/an-zhuang-wsl-zi-xi-tong-jiao-cheng/",
            "title": "安装WSL子系统教程",
            "date_published": "2025-04-10T04:25:00.000Z",
            "content_html": "<h1 id=\"安装WSL子系统教程\"><a href=\"#安装WSL子系统教程\" class=\"headerlink\" title=\"安装WSL子系统教程\"></a>安装WSL子系统教程</h1><hr>\n<h2 id=\"1-前提条件与准备工作\"><a href=\"#1-前提条件与准备工作\" class=\"headerlink\" title=\"1. 前提条件与准备工作\"></a>1. 前提条件与准备工作</h2><ul>\n<li><strong>操作系统要求</strong>：<ul>\n<li>Windows 10：要求版本 2004 及 Build 19041 以上，或</li>\n<li>Windows 11</li>\n</ul>\n</li>\n<li><strong>网络环境</strong>：部分地区需要设置代理。</li>\n<li><strong>管理员权限</strong>：安装及部分配置需要以管理员身份运行 PowerShell 或 CMD。</li>\n<li><strong>存储空间及磁盘规划</strong>：WSL 会在系统盘或你指定的目录中保存 Linux 文件系统，提前规划好存储位置与空间。</li>\n</ul>\n<hr>\n<h2 id=\"2-WSL-安装方法\"><a href=\"#2-WSL-安装方法\" class=\"headerlink\" title=\"2. WSL 安装方法\"></a>2. WSL 安装方法</h2><h3 id=\"2-1-一键安装（推荐）\"><a href=\"#2-1-一键安装（推荐）\" class=\"headerlink\" title=\"2.1 一键安装（推荐）\"></a>2.1 一键安装（推荐）</h3><p>适用于 Windows 10 21H2 及之后版本以及 Windows 11。步骤如下：</p>\n<ol>\n<li><p><strong>打开 PowerShell（管理员模式）</strong>：<br> 在开始菜单搜索 “PowerShell”，右键选择“以管理员身份运行”。</p>\n</li>\n<li><p><strong>执行安装命令</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令会自动启用 WSL 相关组件、虚拟机平台，并默认安装最新的 WSL 版本（通常为 WSL2）和默认 Linux 发行版（一般为 Ubuntu）。</p>\n</li>\n<li><p><strong>重启电脑</strong>：安装完成后系统会提示重启以完成配置。</p>\n</li>\n</ol>\n<h3 id=\"2-2-手动安装\"><a href=\"#2-2-手动安装\" class=\"headerlink\" title=\"2.2 手动安装\"></a>2.2 手动安装</h3><p>对于需要更多自定义选项的用户，手动安装步骤如下：</p>\n<h4 id=\"（1）启用-WSL-和虚拟机平台功能\"><a href=\"#（1）启用-WSL-和虚拟机平台功能\" class=\"headerlink\" title=\"（1）启用 WSL 和虚拟机平台功能\"></a>（1）启用 WSL 和虚拟机平台功能</h4><p>在管理员模式下打开 PowerShell，依次执行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">dism<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">/</span>online <span class=\"token operator\">/</span><span class=\"token function\">enable-feature</span> <span class=\"token operator\">/</span>featurename:Microsoft-Windows-Subsystem-Linux <span class=\"token operator\">/</span>all <span class=\"token operator\">/</span>norestart\ndism<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">/</span>online <span class=\"token operator\">/</span><span class=\"token function\">enable-feature</span> <span class=\"token operator\">/</span>featurename:VirtualMachinePlatform <span class=\"token operator\">/</span>all <span class=\"token operator\">/</span>norestart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>执行后重启计算机。</p>\n<h4 id=\"（2）安装-WSL2-内核更新包\"><a href=\"#（2）安装-WSL2-内核更新包\" class=\"headerlink\" title=\"（2）安装 WSL2 内核更新包\"></a>（2）安装 WSL2 内核更新包</h4><p>前往 WSL2 内核更新包下载链接 ，下载并运行安装包，更新 Linux 内核。</p>\n<h4 id=\"（3）设置默认-WSL-版本为-WSL2\"><a href=\"#（3）设置默认-WSL-版本为-WSL2\" class=\"headerlink\" title=\"（3）设置默认 WSL 版本为 WSL2\"></a>（3）设置默认 WSL 版本为 WSL2</h4><p>再次打开 PowerShell（无需管理员模式也可），执行：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-default</span><span class=\"token operator\">-</span>version 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"（4）安装-Linux-发行版\"><a href=\"#（4）安装-Linux-发行版\" class=\"headerlink\" title=\"（4）安装 Linux 发行版\"></a>（4）安装 Linux 发行版</h4><p>有两种方式：</p>\n<ul>\n<li><p><strong>通过 Microsoft Store</strong>：搜索 <code>Ubuntu</code>、<code>Debian</code> 等，选择版本（如 Ubuntu 22.04 LTS），点击“获取”安装，推荐这个，然后再执行命令行安装。</p>\n</li>\n<li><p><strong>命令行安装</strong>：查看支持的在线发行版列表：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>list <span class=\"token operator\">--</span>online<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装指定版本（例如 Ubuntu 20.04）：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>install <span class=\"token operator\">-</span>d Ubuntu-20<span class=\"token punctuation\">.</span>04<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h2 id=\"3-Linux-发行版安装及首次使用\"><a href=\"#3-Linux-发行版安装及首次使用\" class=\"headerlink\" title=\"3. Linux 发行版安装及首次使用\"></a>3. Linux 发行版安装及首次使用</h2><ol>\n<li><p><strong>首次启动</strong>：安装完成后，从“开始菜单”启动对应 Linux 发行版。</p>\n</li>\n<li><p><strong>创建用户</strong>：系统会提示你为 Linux 系统创建用户名（须为小写）和密码，这样你就可以使用 <code>sudo</code> 提权操作。</p>\n</li>\n<li><p><strong>更新系统</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>安装常用软件</strong>：根据需要安装 <code>git</code>、<code>vim</code>、<code>python3</code> 等：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span> <span class=\"token function\">vim</span> python3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"4-WSL-版本切换：WSL1-与-WSL2\"><a href=\"#4-WSL-版本切换：WSL1-与-WSL2\" class=\"headerlink\" title=\"4. WSL 版本切换：WSL1 与 WSL2\"></a>4. WSL 版本切换：WSL1 与 WSL2</h2><p>WSL 中各发行版可以独立设置为 WSL1 或 WSL2。查看所有已安装发行版及其版本：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>l <span class=\"token operator\">-</span>v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出示例：</p>\n<pre class=\"line-numbers language-pgsql\" data-language=\"pgsql\"><code class=\"language-pgsql\"> NAME            STATE           VERSION\n* Ubuntu-22.04    Running         2\n  Ubuntu-20.04    Stopped         2\n  Debian          Stopped         1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"切换版本\"><a href=\"#切换版本\" class=\"headerlink\" title=\"切换版本\"></a>切换版本</h3><ul>\n<li><p><strong>将发行版切换为 WSL2</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> &lt;发行版名称&gt; 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> Debian 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>将发行版切换为 WSL1</strong>（如有需求）：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> &lt;发行版名称&gt; 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>设置默认安装版本</strong>：在安装新发行版时，可以用下面命令设置默认版本：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-default</span><span class=\"token operator\">-</span>version 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p>切换版本过程中，转换时间与系统数据量有关，部分较大发行版可能需要几分钟。</p>\n<hr>\n<h2 id=\"5-附加功能与进阶用法\"><a href=\"#5-附加功能与进阶用法\" class=\"headerlink\" title=\"5. 附加功能与进阶用法\"></a>5. 附加功能与进阶用法</h2><h3 id=\"5-1-Windows-与-WSL-文件共享\"><a href=\"#5-1-Windows-与-WSL-文件共享\" class=\"headerlink\" title=\"5.1 Windows 与 WSL 文件共享\"></a>5.1 Windows 与 WSL 文件共享</h3><ul>\n<li><p><strong>WSL 文件系统访问</strong>：<br> 在 WSL 中可通过 <code>/mnt/c/</code> 等路径访问 Windows 磁盘。例如访问 <code>C:\\Users\\YourName</code>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">cd <span class=\"token operator\">/</span>mnt/c/Users/YourName<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>在 Windows 中访问 WSL 文件</strong>：<br> 可使用 File Explorer 直接访问：在地址栏输入 <code>\\\\wsl$</code>，会显示所有已安装的 WSL 发行版及其文件系统。</p>\n</li>\n<li><p><strong>同步代码与项目文件</strong>：<br> 可以将项目文件放在 Windows 共享目录中，再在 WSL 中编辑、执行，这样两个系统间文件同步简单且快速。</p>\n</li>\n</ul>\n<h3 id=\"5-2-WSL-GUI-应用（WSLg）\"><a href=\"#5-2-WSL-GUI-应用（WSLg）\" class=\"headerlink\" title=\"5.2 WSL GUI 应用（WSLg）\"></a>5.2 WSL GUI 应用（WSLg）</h3><p>在最新版本的 Windows 10 和 Windows 11 上，WSL 支持 Linux 图形界面应用（WSLg）。配置方法如下：</p>\n<ol>\n<li><p><strong>确保 WSL 更新至最新版本</strong>：执行</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>启动 GUI 应用</strong>（如 Firefox）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> firefox\nfirefox <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>WSLg 会自动启动并显示 Linux GUI 应用，无需额外配置 X 服务器。</p>\n<h3 id=\"5-3-代理设置\"><a href=\"#5-3-代理设置\" class=\"headerlink\" title=\"5.3 代理设置\"></a>5.3 代理设置</h3><p>如果你处于网络环境受限或想加快下载速度，可以设置代理。</p>\n<h4 id=\"（1）设置-Windows-系统代理\"><a href=\"#（1）设置-Windows-系统代理\" class=\"headerlink\" title=\"（1）设置 Windows 系统代理\"></a>（1）设置 Windows 系统代理</h4><p>如果使用科学上网工具（如 Clash、V2Ray、VPN），确保系统代理已启用。可在 Windows 设置 → 网络和 Internet → 代理中配置，也可以通过命令设置环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">setx http_proxy http://127.0.0.1:7890 /m\nsetx https_proxy http://127.0.0.1:7890 /m<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"（2）在-WSL-中设置代理\"><a href=\"#（2）在-WSL-中设置代理\" class=\"headerlink\" title=\"（2）在 WSL 中设置代理\"></a>（2）在 WSL 中设置代理</h4><p>在 WSL 中使用环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">http_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:7890\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">https_proxy</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://127.0.0.1:7890\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>若需要全局生效，在 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 文件末尾加入以上配置，并执行 <code>source ~/.bashrc</code> 使其生效。</p>\n<h4 id=\"（3）apt-专用代理配置\"><a href=\"#（3）apt-专用代理配置\" class=\"headerlink\" title=\"（3）apt 专用代理配置\"></a>（3）apt 专用代理配置</h4><p>创建或编辑 apt 配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">nano</span> /etc/apt/apt.conf.d/proxy.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加内容：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Acquire<span class=\"token double-colon punctuation\">::</span>http<span class=\"token double-colon punctuation\">::</span>Proxy <span class=\"token string\">\"http://127.0.0.1:7890\"</span><span class=\"token punctuation\">;</span>\nAcquire<span class=\"token double-colon punctuation\">::</span>https<span class=\"token double-colon punctuation\">::</span>Proxy <span class=\"token string\">\"http://127.0.0.1:7890\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>保存后，<code>sudo apt update</code> 将走代理。</p>\n<h3 id=\"5-4-多实例安装（同一版本多个副本）\"><a href=\"#5-4-多实例安装（同一版本多个副本）\" class=\"headerlink\" title=\"5.4 多实例安装（同一版本多个副本）\"></a>5.4 多实例安装（同一版本多个副本）</h3><p>WSL 允许你导入同一 Linux 发行版的多个副本，便于隔离不同任务。操作步骤如下：</p>\n<ol>\n<li><p><strong>导出已有实例</strong><br> 假设已安装 <code>Ubuntu-20.04</code>，用以下命令导出为 <code>.tar</code> 文件：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>export Ubuntu-20<span class=\"token punctuation\">.</span>04 D:\\wsl-backups\\ubuntu-20<span class=\"token punctuation\">.</span>04<span class=\"token punctuation\">.</span>tar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>导入为新实例</strong><br> 用新名称（例如 <code>Ubuntu-Dev</code>）创建副本：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>import Ubuntu-Dev D:\\WSL\\Ubuntu-Dev D:\\wsl-backups\\ubuntu-20<span class=\"token punctuation\">.</span>04<span class=\"token punctuation\">.</span>tar <span class=\"token operator\">--</span>version 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>启动新实例</strong><br> 使用下面命令启动新导入的实例：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>d Ubuntu-Dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<p>这样你就可以在同一台机器上同时运行多个独立的 Linux 环境。</p>\n<hr>\n<h2 id=\"6-常用命令与管理技巧\"><a href=\"#6-常用命令与管理技巧\" class=\"headerlink\" title=\"6. 常用命令与管理技巧\"></a>6. 常用命令与管理技巧</h2><ul>\n<li><p><strong>查看已安装发行版及版本</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>l <span class=\"token operator\">-</span>v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>启动指定发行版</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">-</span>d &lt;发行版名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>设置默认发行版（直接运行 wsl 时启动的系统）</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>setdefault &lt;发行版名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>切换 WSL 版本</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span><span class=\"token function\">set-version</span> &lt;发行版名称&gt; <span class=\"token punctuation\">[</span>1<span class=\"token punctuation\">|</span>2<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>更新 WSL 内核</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>关闭所有运行中的 WSL 实例</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>shutdown<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>卸载某个发行版</strong>：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">wsl <span class=\"token operator\">--</span>unregister &lt;发行版名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/03/12/wen-jian-lian-jie-quan-jiao-cheng/",
            "title": "文件链接全教程",
            "date_published": "2025-03-12T04:25:00.000Z",
            "content_html": "<h1 id=\"文件链接全教程\"><a href=\"#文件链接全教程\" class=\"headerlink\" title=\"文件链接全教程\"></a>文件链接全教程</h1><h2 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h2><h3 id=\"1-链接基础概念\"><a href=\"#1-链接基础概念\" class=\"headerlink\" title=\"1. 链接基础概念\"></a>1. 链接基础概念</h3><p>在 Windows 中，“链接”实际上有几种形式，主要包括以下几类：</p>\n<ul>\n<li>符号链接（Symbolic Link，软链接）<ul>\n<li><strong>概念：</strong> 符号链接是一个特殊文件，其中保存了目标文件或目录的路径。它类似于 Linux 中的软链接，并且看起来和普通文件或文件夹没有区别。</li>\n<li>特点：<ul>\n<li>可用于文件和目录</li>\n<li>可以跨分区甚至跨网络路径（UNC）</li>\n<li>如果目标被删除或移动，符号链接会失效</li>\n<li>从 Windows Vista 开始支持，最新 Windows（如 Windows 10/11）中在开发人员模式下可不需要管理员权限创建</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>硬链接（Hard Link）<ul>\n<li><strong>概念：</strong> 硬链接是指向同一数据实体（数据块或 NTFS 中的文件记录）的另一个目录项。每个硬链接都与目标文件共享同一份数据。</li>\n<li>特点：<ul>\n<li>仅适用于文件，不能用于目录</li>\n<li>必须在同一 NTFS 卷内（不能跨分区）</li>\n<li>删除其中一个链接不会影响其它链接或数据本身，只有当所有硬链接都删除后数据才会释放</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>目录联接（Junction Point）<ul>\n<li><strong>概念：</strong> 目录联接也称为“联接”，用于将一个目录指向另一个目录。在早期版本中常用来兼容旧版 Windows。</li>\n<li>特点：<ul>\n<li>只适用于目录</li>\n<li>创建时会自动转换为绝对路径</li>\n<li>适用于同一台计算机，支持跨盘符（但不支持网络路径）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"2-创建链接的方法\"><a href=\"#2-创建链接的方法\" class=\"headerlink\" title=\"2. 创建链接的方法\"></a>2. 创建链接的方法</h3><p>在 Windows 中创建链接主要有两种方式：通过 CMD 命令行（使用 <code>mklink</code> 命令）和通过 PowerShell（使用 <code>New-Item</code> 命令）。</p>\n<h4 id=\"2-1-使用-CMD-命令创建链接\"><a href=\"#2-1-使用-CMD-命令创建链接\" class=\"headerlink\" title=\"2.1 使用 CMD 命令创建链接\"></a>2.1 使用 CMD 命令创建链接</h4><p><strong>命令语法：</strong></p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink [[/D] | [/H] | [/J]] Link Target<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>默认（无参数）</strong>：创建文件的符号链接</li>\n<li><strong>/D</strong>：创建目录的符号链接</li>\n<li><strong>/H</strong>：创建硬链接（仅用于文件）</li>\n<li><strong>/J</strong>：创建目录联接（Junction，适用于目录）</li>\n</ul>\n<p><strong>示例：</strong></p>\n<ol>\n<li><p><strong>创建文件的符号链接</strong><br> 假设有一个文件 <code>C:\\Data\\original.txt</code>，我们在同目录下创建一个名为 <code>link.txt</code> 的符号链接：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink C:\\Data\\link.txt C:\\Data\\original.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时，<code>link.txt</code> 实际上保存了 <code>original.txt</code> 的路径，当你打开 <code>link.txt</code> 时，系统会自动访问 <code>original.txt</code>。</p>\n</li>\n<li><p><strong>创建目录的符号链接</strong><br> 假设有一个目录 <code>C:\\Data\\SourceFolder</code>，希望在 <code>C:\\Data</code> 下创建一个符号链接目录 <code>LinkFolder</code>：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /D C:\\Data\\LinkFolder C:\\Data\\SourceFolder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样，在资源管理器中打开 <code>LinkFolder</code> 就等同于打开 <code>SourceFolder</code>。</p>\n</li>\n<li><p><strong>创建文件的硬链接</strong><br> 依然以文件 <code>C:\\Data\\original.txt</code> 为例，创建一个硬链接 <code>hardlink.txt</code>：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /H C:\\Data\\hardlink.txt C:\\Data\\original.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>硬链接与原文件共享同一数据块，因此修改任一文件都会同步改变内容，但请注意：</p>\n<ul>\n<li>硬链接只能用于文件</li>\n<li>必须在同一卷内</li>\n</ul>\n</li>\n<li><p><strong>创建目录联接（Junction）</strong><br> 使用 /J 参数来创建目录联接，适用于目录，但和符号链接不同的是，Junction 通常保存绝对路径：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">mklink /J C:\\Data\\JunctionFolder C:\\Data\\SourceFolder<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用 Junction 时，删除链接不会删除目标目录中的数据。</p>\n</li>\n</ol>\n<p><em>注意：</em></p>\n<ul>\n<li>创建符号链接和某些操作可能需要以<strong>管理员身份</strong>运行 CMD。</li>\n<li>Windows 10 及以后版本如果开启“开发人员模式”，可以允许普通用户创建符号链接。</li>\n</ul>\n<hr>\n<h4 id=\"2-2-使用-PowerShell-创建链接\"><a href=\"#2-2-使用-PowerShell-创建链接\" class=\"headerlink\" title=\"2.2 使用 PowerShell 创建链接\"></a>2.2 使用 PowerShell 创建链接</h4><p>PowerShell 提供了更现代的 <code>New-Item</code> 命令来创建不同类型的链接。</p>\n<p><strong>语法及示例：</strong></p>\n<ol>\n<li><p><strong>创建文件或目录的符号链接：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType SymbolicLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\Link.txt\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\original.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者创建目录符号链接：</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType SymbolicLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\LinkFolder\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\SourceFolder\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>PowerShell 中的 <code>SymbolicLink</code> 同样创建的是软链接，和 CMD 中 <code>mklink</code> 默认行为一致。</p>\n</li>\n<li><p><strong>创建文件的硬链接：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType HardLink <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\hardlink.txt\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\original.txt\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会为 <code>original.txt</code> 创建一个硬链接，注意硬链接只能用于文件，且必须在同一卷内。</p>\n</li>\n<li><p><strong>创建目录联接（Junction）：</strong></p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>ItemType Junction <span class=\"token operator\">-</span>Path <span class=\"token string\">\"C:\\Data\\JunctionFolder\"</span> <span class=\"token operator\">-</span>Target <span class=\"token string\">\"C:\\Data\\SourceFolder\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令会创建一个指向目录的联接，与符号链接在某些场景下效果类似，但内部处理略有差异。</p>\n</li>\n</ol>\n<p><em>提示：</em></p>\n<ul>\n<li>PowerShell 命令执行时也可能需要管理员权限，具体取决于目标路径所在的位置（例如系统文件夹或 Program Files）。</li>\n<li>在使用相对路径创建符号链接时，系统会将其转换为绝对路径存储在 NTFS 中。</li>\n</ul>\n<hr>\n<h3 id=\"3-使用场景与注意事项\"><a href=\"#3-使用场景与注意事项\" class=\"headerlink\" title=\"3. 使用场景与注意事项\"></a>3. 使用场景与注意事项</h3><h4 id=\"3-1-常见使用场景\"><a href=\"#3-1-常见使用场景\" class=\"headerlink\" title=\"3.1 常见使用场景\"></a>3.1 常见使用场景</h4><ul>\n<li><p><strong>数据备份和增量备份</strong><br> 利用硬链接可以在不占用额外磁盘空间的情况下创建多个访问入口。例如，备份软件（如 Windows 版的“时间机器”）就会使用硬链接来实现增量备份。</p>\n</li>\n<li><p><strong>移动或重定向系统目录</strong><br> 为了节省系统盘空间或实现重装系统不丢失用户数据，可以将如 <code>C:\\Users</code> 目录复制到其他分区，然后使用 Junction 将原位置重定向到新位置：</p>\n<pre class=\"line-numbers language-cmd\" data-language=\"cmd\"><code class=\"language-cmd\">robocopy \"C:\\Users\" \"D:\\Users\" /E /COPYALL /XJ\nrmdir \"C:\\Users\" /S /Q\nmklink /J \"C:\\Users\" \"D:\\Users\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>开发环境下共享资源</strong><br> 当多个项目需要使用同一份库或模型文件时，可以通过符号链接或硬链接共享文件，避免重复存储。</p>\n</li>\n</ul>\n<h4 id=\"3-2-注意事项\"><a href=\"#3-2-注意事项\" class=\"headerlink\" title=\"3.2 注意事项\"></a>3.2 注意事项</h4><ul>\n<li><p><strong>权限问题</strong></p>\n<ul>\n<li>在 Windows 中，创建符号链接通常需要管理员权限；不过在 Windows 10 开发人员模式下可允许普通用户创建符号链接。</li>\n<li>硬链接不需要额外的权限，但目标文件必须在同一 NTFS 卷内。</li>\n</ul>\n</li>\n<li><p><strong>目标失效风险</strong></p>\n<ul>\n<li>符号链接依赖于目标路径。如果目标移动或删除，符号链接会成为“悬挂链接”（无效链接）。</li>\n<li>硬链接与目标数据直接关联，即使原始文件名被删除，只要至少还有一个硬链接存在，数据依然可用。</li>\n</ul>\n</li>\n<li><p><strong>跨分区限制</strong></p>\n<ul>\n<li>硬链接只能在同一卷内使用，而符号链接和 Junction 则可以跨卷（但符号链接可以支持网络路径，而 Junction 则不行）。</li>\n</ul>\n</li>\n<li><p><strong>命令使用环境</strong></p>\n<ul>\n<li>使用 <code>mklink</code> 命令时建议打开<strong>管理员命令提示符</strong>。</li>\n<li>使用 PowerShell 时，若涉及系统目录或受保护区域，建议以管理员身份运行 PowerShell。</li>\n</ul>\n</li>\n<li><p>查看链接和删除</p>\n<p>直接在资源管理器操作</p>\n</li>\n</ul>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><p><a href=\"https://0xdadream.github.io/2025/02/20/arc-zai-comfyui-bao-cuo/\">Arc在comfyui报错 | 逐梦</a></p>\n",
            "tags": [
                "命令"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/",
            "url": "https://0xdadream.github.io/2025/02/21/pycharm-xian-shi-xian-shi-biao-ge/",
            "title": "pycharm显示显示表格",
            "date_published": "2025-02-21T07:25:00.000Z",
            "content_html": "<h1 id=\"pycharm显示显示表格\"><a href=\"#pycharm显示显示表格\" class=\"headerlink\" title=\"pycharm显示显示表格\"></a>pycharm显示显示表格</h1><p>当以pycharm打开<code>.csv</code>文件时，可能不能显示表格，在文件中右键，选择关联文件，找到csv关联即可</p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/19/conda-huan-yuan/",
            "url": "https://0xdadream.github.io/2025/02/19/conda-huan-yuan/",
            "title": "conda换源",
            "date_published": "2025-02-19T08:25:00.000Z",
            "content_html": "<h1 id=\"conda换源\"><a href=\"#conda换源\" class=\"headerlink\" title=\"conda换源\"></a>conda换源</h1><p>由于网络连接原因，使用 Anaconda 或 Miniconda 时，默认的官方源速度较慢。为提高下载速度，您可以将 Conda 的源更换为国内的镜像源。以下是详细的操作步骤：</p>\n<p><strong>1. 生成 <code>.condarc</code> 配置文件：</strong></p>\n<p>在 Windows 系统中，用户目录下可能没有 <code>.condarc</code> 文件。您可以通过以下命令生成该文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda config <span class=\"token parameter variable\">--set</span> show_channel_urls <span class=\"token function\">yes</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行后，<code>.condarc</code> 文件将被创建在用户主目录下。在 Windows 上，用户主目录通常位于 <code>C:\\Users\\用户名\\</code>。</p>\n<p><strong>2. 编辑 <code>.condarc</code> 文件：</strong></p>\n<p>使用文本编辑器打开 <code>.condarc</code> 文件，将其内容替换为以下内容：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">channels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> defaults\n<span class=\"token key atrule\">show_channel_urls</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">default_channels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/main\n  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/r\n  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/pkgs/msys2\n<span class=\"token key atrule\">custom_channels</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">conda-forge</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">msys2</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">bioconda</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">menpo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">pytorch</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">pytorch-lts</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud\n  <span class=\"token key atrule\">simpleitk</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//mirrors.bfsu.edu.cn/anaconda/cloud<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述配置将 Conda 的源更换为北京外国语大学的镜像站。您也可以选择其他国内镜像源，如清华大学、上海交通大学等。具体的镜像源配置可以参考清华大学开源软件镜像站的官方文档。 </p>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/?utm_source=chatgpt.com\">mirrors.tuna.tsinghua.edu.cn</a></p>\n<p><strong>3. 清理索引缓存：</strong></p>\n<p>更换源后，建议清理 Conda 的索引缓存，以确保使用新的镜像源：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda clean <span class=\"token parameter variable\">-i</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>4. 测试新的源：</strong></p>\n<p>创建一个新的 Conda 环境，并安装一个包，以验证新的源是否生效：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> test_env numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果安装过程顺利且速度较快，则说明源更换成功。</p>\n<p><strong>注意事项：</strong></p>\n<ul>\n<li><strong>备份原始配置：</strong> 在更改 <code>.condarc</code> 文件之前，建议备份原始配置，以防需要恢复。</li>\n<li><strong>恢复默认源：</strong> 如果需要恢复默认源，可以删除 <code>.condarc</code> 文件，或者执行以下命令：</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda config --remove-key channels<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>通过以上步骤，您可以成功将 Conda 的源更换为国内镜像源，从而提高包的下载速度和稳定性。</p>\n",
            "tags": [
                "conda",
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/02/18/arca770-shi-yong-comfyui-jiao-cheng/",
            "title": "ArcA770使用comfyui教程",
            "date_published": "2025-02-18T10:11:00.000Z",
            "content_html": "<h1 id=\"ArcA770使用comfyui教程\"><a href=\"#ArcA770使用comfyui教程\" class=\"headerlink\" title=\"ArcA770使用comfyui教程\"></a>ArcA770使用comfyui教程</h1><h3 id=\"1-前置配置\"><a href=\"#1-前置配置\" class=\"headerlink\" title=\"1. 前置配置\"></a><strong>1. 前置配置</strong></h3><ul>\n<li>conda</li>\n<li>更新驱动</li>\n<li>安装<strong>Visual Studio Build Tools</strong></li>\n<li>安装oneAPI</li>\n<li>安装IPEX</li>\n<li>具体看链接<a href=\"https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/\">Intel显卡运行AI配置教程 | 逐梦</a></li>\n</ul>\n<hr>\n<h3 id=\"2-配置Python\"><a href=\"#2-配置Python\" class=\"headerlink\" title=\"2. 配置Python\"></a><strong>2. 配置Python</strong></h3><ul>\n<li><p><strong>Python环境</strong>：<br>建议使用<strong>Python 3.10或更高版本</strong>，并通过虚拟环境（如<code>venv</code>或<code>conda</code>）隔离依赖。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> comfyui <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.11</span>  这里comfyui就是安装IPEX的环境\nconda activate comfyui<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"3-安装ComfyUI及依赖库\"><a href=\"#3-安装ComfyUI及依赖库\" class=\"headerlink\" title=\"3. 安装ComfyUI及依赖库\"></a><strong>3. 安装ComfyUI及依赖库</strong></h3><ul>\n<li><p><strong>克隆ComfyUI仓库</strong>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> xxxx <span class=\"token comment\">#工作目录</span>\n<span class=\"token function\">git</span> clone https://github.com/comfyanonymous/ComfyUI.git\n<span class=\"token builtin class-name\">cd</span> ComfyUI\npip <span class=\"token function\">install</span> <span class=\"token parameter variable\">-r</span> requirements.txt <span class=\"token comment\"># 安装依赖</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<hr>\n<h3 id=\"4-验证显卡识别与性能调优\"><a href=\"#4-验证显卡识别与性能调优\" class=\"headerlink\" title=\"4. 验证显卡识别与性能调优\"></a><strong>4. 验证显卡识别与性能调优</strong></h3><ul>\n<li><strong>显存与算力优化</strong>：<ul>\n<li>启用Intel的<strong>XMX引擎</strong>（AI加速单元）和<strong>XeSS技术</strong>（超分辨率），可通过设置环境变量优化显存分配410。</li>\n<li>调整ComfyUI配置文件，指定使用<code>XPU</code>（Intel GPU）而非默认的CUDA。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"5-启动comfyui\"><a href=\"#5-启动comfyui\" class=\"headerlink\" title=\"5.启动comfyui\"></a><strong>5.启动comfyui</strong></h3><p>接着上面的目录执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python main.py --use-pytorch-cross-attention <span class=\"token parameter variable\">--highvram</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"快捷脚本\"><a href=\"#快捷脚本\" class=\"headerlink\" title=\"快捷脚本\"></a>快捷脚本</h4><h5 id=\"cmd\"><a href=\"#cmd\" class=\"headerlink\" title=\"cmd\"></a>cmd</h5><pre class=\"line-numbers language-bat\" data-language=\"bat\"><code class=\"language-bat\">call \"E:\\conda\\Scripts\\activate.bat\" deepl  \ncall \"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\"\npython main.py --use-pytorch-cross-attention --highvram<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>保存为<code>.bat</code>文件</p>\n<p>powershell</p>\n<p>没搞出来</p>\n",
            "tags": [
                "intel"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/",
            "url": "https://0xdadream.github.io/2025/02/18/intel-xian-qia-pao-ai-pei-zhi-jiao-cheng/",
            "title": "Intel显卡运行AI配置教程",
            "date_published": "2025-02-18T08:11:00.000Z",
            "content_html": "<h1 id=\"Intel显卡运行AI配置教程\"><a href=\"#Intel显卡运行AI配置教程\" class=\"headerlink\" title=\"Intel显卡运行AI配置教程\"></a><strong>Intel显卡运行AI配置教程</strong></h1><h2 id=\"最新\"><a href=\"#最新\" class=\"headerlink\" title=\"最新\"></a>最新</h2><p>最近pytorch已经支持Arc显卡了，不需要再安装oneAPI和IPEX，当然以前的版本仍需要（2.5及以前），但是我本地本来是安装过这些组件的，我也不知道不安装会不会报错，可以参考官方文档<a href=\"https://www.intel.com/content/www/us/en/developer/articles/tool/pytorch-prerequisites-for-intel-gpu/2-6.html\">PyTorch Prerequisites for Intel® GPUs</a>，pytorch开发者确实说过免去了那些复杂的操作，可以开箱即用</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接在conda环境中执行即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate deepl\npip3 <span class=\"token function\">install</span> <span class=\"token parameter variable\">--pre</span> torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/xpu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出true就是成功了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\ntorch<span class=\"token punctuation\">.</span>xpu<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># torch.xpu is the API for Intel GPU support</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>训练测试代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torchvision\n\nLR <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span>\nDOWNLOAD <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\nDATA <span class=\"token operator\">=</span> <span class=\"token string\">\"datasets/cifar10/\"</span>\n\ntransform <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>\n        torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        torchvision<span class=\"token punctuation\">.</span>transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span>\ntrain_dataset <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">.</span>CIFAR10<span class=\"token punctuation\">(</span>\n    root<span class=\"token operator\">=</span>DATA<span class=\"token punctuation\">,</span>\n    train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    transform<span class=\"token operator\">=</span>transform<span class=\"token punctuation\">,</span>\n    download<span class=\"token operator\">=</span>DOWNLOAD<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\ntrain_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token operator\">=</span>train_dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\ntrain_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>resnet50<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncriterion <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\noptimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>LR<span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\ncriterion <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Initiating training\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> batch_idx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\n    target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"xpu\"</span><span class=\"token punctuation\">)</span>\n    optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    loss <span class=\"token operator\">=</span> criterion<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n    loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>batch_idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n         iteration_loss <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Iteration [</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>batch_idx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>train_len<span class=\"token punctuation\">}</span></span><span class=\"token string\">], Loss: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>iteration_loss<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.4f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\ntorch<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"model_state_dict\"</span><span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"optimizer_state_dict\"</span><span class=\"token punctuation\">:</span> optimizer<span class=\"token punctuation\">.</span>state_dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"checkpoint.pth\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execution finished\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>适用硬件</strong></p>\n<ul>\n<li>Intel Arc系列显卡（如A770 16G）驱动为6559</li>\n<li>win11</li>\n<li>oneAPI==2025.0.1</li>\n<li>torch==2.3.110</li>\n</ul>\n<hr>\n<h2 id=\"1-安装Miniconda并配置Python虚拟环境\"><a href=\"#1-安装Miniconda并配置Python虚拟环境\" class=\"headerlink\" title=\"1. 安装Miniconda并配置Python虚拟环境\"></a><strong>1. 安装Miniconda并配置Python虚拟环境</strong></h2><p>可以参考这个<a href=\"https://0xdadream.github.io/2024/08/12/conda-an-zhuang-ji-shi-yong/\">conda安装及使用 | 逐梦</a></p>\n<h3 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a><strong>步骤说明</strong></h3><ol>\n<li><p><strong>下载Miniconda</strong></p>\n<ul>\n<li>访问 <a href=\"https://docs.conda.io/en/latest/miniconda.html\">Miniconda官网</a>，选择对应操作系统的安装包（建议Python 3.11版本）。</li>\n</ul>\n</li>\n<li><p><strong>安装Miniconda</strong></p>\n<ul>\n<li><p>Windows：双击安装包，按提示操作，勾选“Add to PATH”选项。</p>\n</li>\n<li><p>Linux/macOS：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> Miniconda3-latest-Linux-x86_64.sh  <span class=\"token comment\"># 根据文件名调整  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>创建Python 3.11虚拟环境</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create <span class=\"token parameter variable\">-n</span> intel-ai <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.11</span>  \nconda activate intel-ai  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"2-更新Intel显卡驱动\"><a href=\"#2-更新Intel显卡驱动\" class=\"headerlink\" title=\"2. 更新Intel显卡驱动\"></a><strong>2. 更新Intel显卡驱动</strong></h2><h3 id=\"关键操作\"><a href=\"#关键操作\" class=\"headerlink\" title=\"关键操作\"></a><strong>关键操作</strong></h3><ol>\n<li><p><strong>下载最新驱动</strong></p>\n<ul>\n<li>访问 <a href=\"https://www.intel.cn/content/www/cn/zh/download-center/home.html\">Intel驱动下载页</a>，选择Arc系列显卡的最新驱动（如<strong>32.0.101.6559</strong>）。</li>\n</ul>\n</li>\n<li><p><strong>安装驱动</strong></p>\n<ul>\n<li><p>Windows：运行安装程序，按提示完成安装。</p>\n</li>\n<li><p>Linux：使用包管理器（如Ubuntu/Debian）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> intel-opencl-icd intel-level-zero-gpu level-zero  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p><strong>验证驱动状态</strong></p>\n<ul>\n<li><p>Windows：按 <code>Win + X</code> &gt; 设备管理器 &gt; 显示适配器，确认显卡型号正确。</p>\n</li>\n<li><p>Linux：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lspci <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> intel  <span class=\"token comment\"># 确认显卡识别  </span>\nclinfo  <span class=\"token comment\"># 检查OpenCL支持  </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"3-安装Visual-Studio-Build-Tools（仅Windows）\"><a href=\"#3-安装Visual-Studio-Build-Tools（仅Windows）\" class=\"headerlink\" title=\"3. 安装Visual Studio Build Tools（仅Windows）\"></a><strong>3. 安装Visual Studio Build Tools（仅Windows）</strong></h2><h3 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a><strong>操作步骤</strong></h3><ol>\n<li><strong>下载Visual Studio 2022</strong><ul>\n<li>访问 <a href=\"https://visualstudio.microsoft.com/\">Visual Studio官网</a>，下载社区版。</li>\n</ul>\n</li>\n<li><strong>安装C++桌面开发组件</strong><ul>\n<li>在安装界面勾选：<ul>\n<li><strong>使用C++的桌面开发</strong></li>\n<li><strong>Windows 10/11 SDK</strong></li>\n<li><strong>C++ CMake工具</strong></li>\n<li>默认也行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>验证安装</strong><ul>\n<li>打开命令提示符，运行 <code>cl</code> 命令，确认返回编译器版本信息。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"4-安装Intel-oneAPI工具包\"><a href=\"#4-安装Intel-oneAPI工具包\" class=\"headerlink\" title=\"4. 安装Intel oneAPI工具包\"></a><strong>4. 安装Intel oneAPI工具包</strong></h2><h3 id=\"步骤说明-1\"><a href=\"#步骤说明-1\" class=\"headerlink\" title=\"步骤说明\"></a><strong>步骤说明</strong></h3><ol>\n<li><p><strong>下载oneAPI Base Toolkit</strong></p>\n<ul>\n<li>访问 <a href=\"https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/toolkits.html\">oneAPI官网</a>，选择Base Toolkit-&gt;windows-&gt;offline installer，然后点击右边往下一点Continue as a Guest (download starts immediately) →下载</li>\n</ul>\n</li>\n<li><p><strong>安装oneAPI</strong></p>\n<ul>\n<li>Windows：运行安装程序，默认勾选所有组件，一直点就行了。</li>\n<li>Linux：使用包管理器或脚本安装。</li>\n</ul>\n</li>\n<li><p><strong>激活oneAPI环境变量</strong></p>\n<ul>\n<li><p>Windows：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">call <span class=\"token string\">\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\"</span>   <span class=\"token comment\"># cmd使用</span>\ncmd.exe <span class=\"token string\">\"/K\"</span> <span class=\"token string\">'\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\" &amp;&amp; powershell'</span> <span class=\"token comment\"># powershell使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>Linux：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /opt/intel/oneapi/setvars.sh  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"5-安装Intel-Extension-for-PyTorch-IPEX\"><a href=\"#5-安装Intel-Extension-for-PyTorch-IPEX\" class=\"headerlink\" title=\"5. 安装Intel Extension for PyTorch (IPEX)\"></a><strong>5. 安装Intel Extension for PyTorch (IPEX)</strong></h2><h3 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a><strong>操作命令</strong></h3><ol>\n<li><p><strong>激活虚拟环境与oneAPI</strong></p>\n<p>powershell中执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> xxx <span class=\"token comment\">#最好切换到工作目录</span>\nconda create <span class=\"token parameter variable\">-n</span> intel-ai <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.11</span>  <span class=\"token comment\"># 前面创建过环境没有再次创建</span>\nconda activate intel-ai <span class=\"token comment\"># 激活环境 </span>\nconda <span class=\"token function\">install</span> libjepg-turbo <span class=\"token comment\">#提前安装这两个库以免报错</span>\nconda <span class=\"token function\">install</span> libpng \ncmd.exe <span class=\"token string\">\"/K\"</span> <span class=\"token string\">'\"C:\\Program Files (x86)\\Intel\\oneAPI\\setvars.bat\" &amp;&amp; powershell'</span>  <span class=\"token comment\"># 根据操作系统执行上述对应的oneAPI激活命令</span>\nconda activate intel-ai <span class=\"token comment\"># 再次激活环境</span>\nconda <span class=\"token function\">install</span> pkg-config libuv <span class=\"token comment\"># 安装一些依赖</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>安装PyTorch与IPEX</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装PyTorch CPU版本（IPEX会自动启用GPU支持）  </span>\npip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">torch</span><span class=\"token operator\">==</span><span class=\"token number\">2.3</span>.1.post0+cxx11.abi <span class=\"token assign-left variable\">torchvision</span><span class=\"token operator\">==</span><span class=\"token number\">0.18</span>.1.post0+cxx11.abi <span class=\"token assign-left variable\">torchaudio</span><span class=\"token operator\">==</span><span class=\"token number\">2.3</span>.1.post0+cxx11.abi intel-extension-for-pytorch<span class=\"token operator\">==</span><span class=\"token number\">2.3</span>.110.post0+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> <span class=\"token assign-left variable\">torch</span><span class=\"token operator\">==</span><span class=\"token number\">2.5</span>.1+cxx11.abi <span class=\"token assign-left variable\">torchvision</span><span class=\"token operator\">==</span><span class=\"token number\">0.20</span>.1+cxx11.abi <span class=\"token assign-left variable\">torchaudio</span><span class=\"token operator\">==</span><span class=\"token number\">2.5</span>.1+cxx11.abi intel-extension-for-pytorch<span class=\"token operator\">==</span><span class=\"token number\">2.5</span>.10+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/\n<span class=\"token comment\"># 最新版实测也能用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<hr>\n<h2 id=\"6-验证IPEX安装与显卡识别\"><a href=\"#6-验证IPEX安装与显卡识别\" class=\"headerlink\" title=\"6. 验证IPEX安装与显卡识别\"></a><strong>6. 验证IPEX安装与显卡识别</strong></h2><h3 id=\"验证步骤\"><a href=\"#验证步骤\" class=\"headerlink\" title=\"验证步骤\"></a><strong>验证步骤</strong></h3><ol>\n<li><p><strong>运行Python脚本检查GPU支持</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch  \n<span class=\"token keyword\">import</span> intel_extension_for_pytorch <span class=\"token keyword\">as</span> ipex  \n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"PyTorch版本: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>torch<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"IPEX版本: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ipex<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Intel GPU是否可用: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>torch<span class=\"token punctuation\">.</span>xpu<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"检测到的Intel GPU设备: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>torch<span class=\"token punctuation\">.</span>xpu<span class=\"token punctuation\">.</span>get_device_name<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"import torch; import intel_extension_for_pytorch as ipex; print('PyTorch版本:', torch.__version__); print('IPEX版本:', ipex.__version__); print('Intel GPU是否可用:', torch.xpu.is_available()); print('检测到的Intel GPU设备:', torch.xpu.get_device_name(0))\"</span>\n<span class=\"token comment\"># 一键脚本</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>预期输出</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">PyTorch版本: <span class=\"token number\">2.1</span>.0  \nIPEX版本: <span class=\"token number\">2.1</span>.0  \nIntel GPU是否可用: True  \n检测到的Intel GPU设备: Intel<span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Arc<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> A770 Graphics  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>官方脚本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"import torch; import intel_extension_for_pytorch as ipex; print(torch.__version__); print(ipex.__version__); [print(f'[{i}]: {torch.xpu.get_device_properties(i)}') for i in range(torch.xpu.device_count())];\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>至此已经安装成功了</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"7-常见问题解决\"><a href=\"#7-常见问题解决\" class=\"headerlink\" title=\"7. 常见问题解决\"></a><strong>7. 常见问题解决</strong></h2><p>遇到问题大多数时候都是各种版本不匹配，例如<code>raise err OSError: [WinError 126] 找不到指定的模块。</code>，尽量使用教程相同版本。</p>\n<p>报错信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">E:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs<span class=\"token punctuation\">\\</span>deepll<span class=\"token punctuation\">\\</span>Lib<span class=\"token punctuation\">\\</span>site-packages<span class=\"token punctuation\">\\</span>torchvision<span class=\"token punctuation\">\\</span>io<span class=\"token punctuation\">\\</span>image.py:14: UserWarning: Failed to load image Python extension: <span class=\"token string\">'Could not find module '</span>E:<span class=\"token punctuation\">\\</span>conda<span class=\"token punctuation\">\\</span>envs<span class=\"token punctuation\">\\</span>deepll<span class=\"token punctuation\">\\</span>Lib<span class=\"token punctuation\">\\</span>site-packages<span class=\"token punctuation\">\\</span>torchvision<span class=\"token punctuation\">\\</span>image.pyd<span class=\"token string\">' (or one of its dependencies). Try using the full path with constructor syntax.'</span>If you don't plan on using image functionality from <span class=\"token variable\"><span class=\"token variable\">`</span>torchvision.io<span class=\"token variable\">`</span></span>, you can ignore this warning. Otherwise, there might be something wrong with your environment. Did you have <span class=\"token variable\"><span class=\"token variable\">`</span>libjpeg<span class=\"token variable\">`</span></span> or <span class=\"token variable\"><span class=\"token variable\">`</span>libpng<span class=\"token variable\">`</span></span> installed before building <span class=\"token variable\"><span class=\"token variable\">`</span>torchvision<span class=\"token variable\">`</span></span> from source?\n  warn<span class=\"token punctuation\">(</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>解决方案</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda activate deepl <span class=\"token comment\"># 激活对应环境</span>\nconda <span class=\"token function\">install</span> libjepg-turbo\nconda <span class=\"token function\">install</span> libpng<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>若有其他缺少库报错，安装对应库即可，可以参考文章<a href=\"https://0xdadream.github.io/2025/02/18/python-ku-bao-cuo-hui-zong/\">python库报错汇总 | 逐梦</a></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>通过本教程，你已成功配置Intel显卡的AI开发环境，并验证了IPEX的GPU加速支持。接下来可尝试运行AI模型（如Stable Diffusion、LLM推理），并通过环境变量 <code>LIBOMPTARGET_PLUGIN=LEVEL0</code> 或 <code>SYCL_CACHE_PERSISTENT=1</code> 进一步优化性能。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.intel.com/content/www/us/en/developer/tools/oneapi/base-toolkit-download.html\">获取英特尔® oneAPI Base Toolkit</a></p>\n<p><a href=\"https://intel.github.io/intel-extension-for-pytorch/\">Welcome to Intel® Extension for PyTorch* Documentation!</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1dKaMeXE3B/?vd_source=b809bacd004cf290c08f612fa076f2eb\">intel arc 显卡 ComfyUI 安装教程_哔哩哔哩_bilibili</a></p>\n<p><a href=\"https://blog.csdn.net/yunying985/article/details/140589680\">AI绘画 | 只要10步让你在英特尔A770显卡下安装ComfyUI运行StableDiffusion3最新开源模型_arc a750 安装comfyui-CSDN博客</a></p>\n<p><a href=\"https://pytorch.org/docs/main/notes/get_start_xpu.html\">Getting Started on Intel GPU — PyTorch main documentation</a></p>\n",
            "tags": [
                "intel"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/15/powershell-pei-zhi-mu-lu/",
            "url": "https://0xdadream.github.io/2025/02/15/powershell-pei-zhi-mu-lu/",
            "title": "powershell配置目录",
            "date_published": "2025-02-15T13:25:00.000Z",
            "content_html": "<h1 id=\"powershell配置目录\"><a href=\"#powershell配置目录\" class=\"headerlink\" title=\"powershell配置目录\"></a>powershell配置目录</h1><p>执行命令<code>$PROFILE</code>会得到类似于<code>C:\\Users\\xxx\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1</code>的目录</p>\n<p>这个目录的文件就是你的powershell预执行的命令，相当于每次启动powershell都行执行一遍</p>\n<p>然后这个目录还会存powershell的安装的插件文件，备份这个文件，即使卸载重装配置也不会变，但是要注意不同版本命令可能不一样。</p>\n",
            "tags": [
                "命令行"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/12/emby-shi-yong/",
            "url": "https://0xdadream.github.io/2025/02/12/emby-shi-yong/",
            "title": "emby使用",
            "date_published": "2025-02-12T04:25:00.000Z",
            "content_html": "<h1 id=\"emby使用\"><a href=\"#emby使用\" class=\"headerlink\" title=\"emby使用\"></a>emby使用</h1><h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1. 准备工作\"></a>1. 准备工作</h2><ul>\n<li><p>核对信息</p>\n<p>确认你已获得完整的信息：</p>\n<ul>\n<li>服务器地址（通常为一个 URL 或 IP 地址）</li>\n<li>端口号（如果提供了非默认端口，需要特别注意）</li>\n<li>连接协议（通常为 http 或 https）</li>\n<li>如有账号和密码或令牌信息，也要一并准备好</li>\n</ul>\n</li>\n<li><p><strong>网络要求</strong><br>由于“机场节点”往往用于突破网络限制，确保你的设备已根据要求连接 VPN 或配置代理（如果提供方有说明需要）。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"2-在-Emby-客户端中添加服务器\"><a href=\"#2-在-Emby-客户端中添加服务器\" class=\"headerlink\" title=\"2. 在 Emby 客户端中添加服务器\"></a>2. 在 Emby 客户端中添加服务器</h2><h3 id=\"（1）安装-Emby-客户端\"><a href=\"#（1）安装-Emby-客户端\" class=\"headerlink\" title=\"（1）安装 Emby 客户端\"></a>（1）安装 Emby 客户端</h3><ul>\n<li>到<a href=\"https://t.me/GentleSecretary\">Telegram: Contact @GentleSecretary</a>搜索emby下载对应版本（首选）</li>\n<li>在安卓手机上，可从 Google Play 商店或其他应用市场下载安装官方 Emby 客户端（这个需要开会员）</li>\n<li>也可以使用第三方支持 Emby 协议的播放器（如 Infuse、Fileball 等）</li>\n</ul>\n<h3 id=\"（2）进入服务器设置\"><a href=\"#（2）进入服务器设置\" class=\"headerlink\" title=\"（2）进入服务器设置\"></a>（2）进入服务器设置</h3><ul>\n<li>打开 Emby 客户端后，进入【设置】或【服务器设置】页面，或者直接弹出填写页面。</li>\n<li>选择“添加服务器”或“连接到服务器”的选项。</li>\n</ul>\n<h3 id=\"（3）填写服务器地址\"><a href=\"#（3）填写服务器地址\" class=\"headerlink\" title=\"（3）填写服务器地址\"></a>（3）填写服务器地址</h3><ul>\n<li><p>在“服务器地址”栏中输入你获得的地址，格式一般为：</p>\n<ul>\n<li><code>http://服务器地址:端口</code> 或者 <code>https://服务器地址:端口</code><br>例如，如果你的地址为 <code>http://123.45.67.89</code>，而端口为 8096，则填写：</li>\n<li><code>http://123.45.67.89:8096</code></li>\n</ul>\n</li>\n<li><p>注意：建议去除地址末尾多余的斜杠“/”，以免影响连接。（参考“线路说明”中对地址格式的建议 </p>\n<p><a href=\"https://wiki.freeembyguide.eu.org/docs/guide/server\">wiki.freeembyguide.eu.org</a>）</p>\n</li>\n</ul>\n<h3 id=\"（4）连接测试\"><a href=\"#（4）连接测试\" class=\"headerlink\" title=\"（4）连接测试\"></a>（4）连接测试</h3><ul>\n<li>填写后，点击“连接”或“测试连接”。</li>\n<li>如果服务器运行正常且网络环境（或 VPN/代理）配置正确，客户端会自动加载媒体库。</li>\n</ul>\n<hr>\n<h2 id=\"3-登录与账号验证\"><a href=\"#3-登录与账号验证\" class=\"headerlink\" title=\"3. 登录与账号验证\"></a>3. 登录与账号验证</h2><ul>\n<li>如果该 Emby 机场服务要求身份验证，系统会提示你输入账号和密码。</li>\n<li>输入正确的账号信息后，继续操作即可访问媒体资源。</li>\n</ul>\n<hr>\n<h2 id=\"4-高级设置（仅适用于管理人员或自建服务器）\"><a href=\"#4-高级设置（仅适用于管理人员或自建服务器）\" class=\"headerlink\" title=\"4. 高级设置（仅适用于管理人员或自建服务器）\"></a>4. 高级设置（仅适用于管理人员或自建服务器）</h2><p>如果你自己搭建 Emby 服务器并挂接了硬盘存储，可能还需要：</p>\n<ul>\n<li><p>配置媒体库</p>\n<p>在 Emby 服务器管理后台，设置媒体库的路径为硬盘挂载目录。这样服务器才能正确扫描并整理硬盘中的影音文件。（更多细节可参考 CSDN 上关于挂接硬盘的说明 </p>\n<p><a href=\"https://wenku.csdn.net/answer/7f9bf651623542dea45bafc64aed261c\">wenku.csdn.net</a>）</p>\n</li>\n<li><p><strong>网络加速和直连设置</strong><br>有些机场节点提供多条优化线路（直连或代理），如果遇到播放卡顿或加载慢的情况，可尝试切换线路或调整客户端的播放质量设置。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"5-常见问题及排查\"><a href=\"#5-常见问题及排查\" class=\"headerlink\" title=\"5. 常见问题及排查\"></a>5. 常见问题及排查</h2><ul>\n<li>无法连接服务器<ul>\n<li>检查网络环境，确保已开启必要的 VPN/代理。</li>\n<li>再次核对地址和端口是否输入正确。</li>\n</ul>\n</li>\n<li>播放卡顿或加载缓慢<ul>\n<li>可能与服务器负载或网络带宽有关，尝试使用代理访问。</li>\n<li>查看是否有备用线路，或者联系服务提供方反馈问题。</li>\n</ul>\n</li>\n<li>SSL 证书错误<ul>\n<li>如果使用 https 出现证书问题，确认是否需要手动安装信任证书，或联系服务提供方了解详细要求。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "emby"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/02/11/google-hacking-shi-yong-gai-jin-ban/",
            "url": "https://0xdadream.github.io/2025/02/11/google-hacking-shi-yong-gai-jin-ban/",
            "title": "google hacking使用-改进版",
            "date_published": "2025-02-11T04:25:00.000Z",
            "content_html": "<h1 id=\"google-hacking使用-改进版\"><a href=\"#google-hacking使用-改进版\" class=\"headerlink\" title=\"google hacking使用-改进版\"></a>google hacking使用-改进版</h1><p>以下是 <strong>Google Hacking 的完整语法列表</strong>和<strong>高级组合示例</strong>，涵盖渗透测试、信息收集、漏洞挖掘等场景的实用技巧。所有语法均基于 Google 搜索引擎的合法功能，但请严格遵守法律和道德规范。</p>\n<hr>\n<h3 id=\"一、完整-Google-Hacking-语法列表\"><a href=\"#一、完整-Google-Hacking-语法列表\" class=\"headerlink\" title=\"一、完整 Google Hacking 语法列表\"></a><strong>一、完整 Google Hacking 语法列表</strong></h3><h4 id=\"1-基础操作符\"><a href=\"#1-基础操作符\" class=\"headerlink\" title=\"1. 基础操作符\"></a><strong>1. 基础操作符</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>site:</code></td>\n<td align=\"left\">限定搜索特定域名或子域名</td>\n<td align=\"left\"><code>site:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>intitle:</code></td>\n<td align=\"left\">标题包含关键词</td>\n<td align=\"left\"><code>intitle:\"login\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>allintitle:</code></td>\n<td align=\"left\">标题包含所有指定关键词</td>\n<td align=\"left\"><code>allintitle:\"admin\" \"dashboard\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>inurl:</code></td>\n<td align=\"left\">URL 路径包含关键词</td>\n<td align=\"left\"><code>inurl:/admin</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>allinurl:</code></td>\n<td align=\"left\">URL 路径包含所有指定关键词</td>\n<td align=\"left\"><code>allinurl:login.php?user=</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>filetype:</code></td>\n<td align=\"left\">搜索特定文件类型</td>\n<td align=\"left\"><code>filetype:pdf \"confidential\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>ext:</code></td>\n<td align=\"left\">按文件扩展名搜索（同 <code>filetype:</code>）</td>\n<td align=\"left\"><code>ext:sql \"password\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>intext:</code></td>\n<td align=\"left\">正文内容包含关键词</td>\n<td align=\"left\"><code>intext:\"数据库密码\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>allintext:</code></td>\n<td align=\"left\">正文包含所有指定关键词</td>\n<td align=\"left\"><code>allintext:\"username\" \"password\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>cache:</code></td>\n<td align=\"left\">查看 Google 缓存的页面</td>\n<td align=\"left\"><code>cache:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>related:</code></td>\n<td align=\"left\">查找类似网站</td>\n<td align=\"left\"><code>related:github.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>info:</code></td>\n<td align=\"left\">获取网站的 Google 摘要信息</td>\n<td align=\"left\"><code>info:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>define:</code></td>\n<td align=\"left\">搜索词语定义</td>\n<td align=\"left\"><code>define:SQL注入</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"2-逻辑操作符\"><a href=\"#2-逻辑操作符\" class=\"headerlink\" title=\"2. 逻辑操作符\"></a><strong>2. 逻辑操作符</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>AND</code> 或空格</td>\n<td align=\"left\">同时满足多个条件</td>\n<td align=\"left\"><code>site:example.com 密码</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>OR</code></td>\n<td align=\"left\">满足任意一个条件</td>\n<td align=\"left\"><code>漏洞 OR 后门</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-</code></td>\n<td align=\"left\">排除关键词</td>\n<td align=\"left\"><code>登录 -site:example.com</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>()</code></td>\n<td align=\"left\">组合复杂逻辑</td>\n<td align=\"left\"><code>(inurl:admin OR intitle:admin) -论坛</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"3-高级操作符\"><a href=\"#3-高级操作符\" class=\"headerlink\" title=\"3. 高级操作符\"></a><strong>3. 高级操作符</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">通配符（匹配任意字符）</td>\n<td align=\"left\"><code>\"username:* password:*\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>\"...\"</code></td>\n<td align=\"left\">精确匹配短语</td>\n<td align=\"left\"><code>\"您的密码错误\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>..</code></td>\n<td align=\"left\">数值范围搜索</td>\n<td align=\"left\"><code>价格 $100..$500</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>AROUND(N)</code></td>\n<td align=\"left\">关键词间距不超过 N 个词</td>\n<td align=\"left\"><code>\"密码\" AROUND(5) \"泄露\"</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>weather:</code></td>\n<td align=\"left\">搜索某地天气</td>\n<td align=\"left\"><code>weather:北京</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>stocks:</code></td>\n<td align=\"left\">搜索股票代码</td>\n<td align=\"left\"><code>stocks:GOOG</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"4-隐藏功能\"><a href=\"#4-隐藏功能\" class=\"headerlink\" title=\"4. 隐藏功能\"></a><strong>4. 隐藏功能</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"left\">说明</th>\n<th align=\"left\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>时间筛选</strong></td>\n<td align=\"left\">限定时间范围（通过搜索工具栏）</td>\n<td align=\"left\">最近一年、自定义日期</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>图片搜索</strong></td>\n<td align=\"left\">通过图片反向搜索敏感信息</td>\n<td align=\"left\">上传图片查找来源</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>地图数据</strong></td>\n<td align=\"left\">搜索暴露的地理标记信息</td>\n<td align=\"left\"><code>intitle:\"security camera\" site:google.com/maps</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"二、组合示例大全（按场景分类）\"><a href=\"#二、组合示例大全（按场景分类）\" class=\"headerlink\" title=\"二、组合示例大全（按场景分类）\"></a><strong>二、组合示例大全</strong>（按场景分类）</h3><h4 id=\"1-敏感文件泄露\"><a href=\"#1-敏感文件泄露\" class=\"headerlink\" title=\"1. 敏感文件泄露\"></a><strong>1. 敏感文件泄露</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>数据库备份</strong></td>\n<td align=\"left\"><code>filetype:sql \"DROP TABLE\" site:example.com</code></td>\n<td align=\"left\">搜索 SQL 备份文件</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>配置文件</strong></td>\n<td align=\"left\"><code>intitle:\"index of\" \"config.php\"</code></td>\n<td align=\"left\">查找 PHP 配置文件</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>日志文件</strong></td>\n<td align=\"left\"><code>ext:log \"error\" \"password\"</code></td>\n<td align=\"left\">包含密码的日志文件</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>密钥文件</strong></td>\n<td align=\"left\"><code>filetype:key private</code></td>\n<td align=\"left\">私钥文件泄露</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-后台与登录页面\"><a href=\"#2-后台与登录页面\" class=\"headerlink\" title=\"2. 后台与登录页面\"></a><strong>2. 后台与登录页面</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>管理员后台</strong></td>\n<td align=\"left\"><code>intitle:\"admin login\" inurl:/admin</code></td>\n<td align=\"left\">未授权访问的管理页面</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>默认密码</strong></td>\n<td align=\"left\"><code>\"默认密码\" site:routerlogin.net</code></td>\n<td align=\"left\">设备默认凭据</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>弱口令提示</strong></td>\n<td align=\"left\"><code>intext:\"用户名或密码错误\" inurl:login</code></td>\n<td align=\"left\">登录页面错误信息</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-漏洞利用\"><a href=\"#3-漏洞利用\" class=\"headerlink\" title=\"3. 漏洞利用\"></a><strong>3. 漏洞利用</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>SQL 注入点</strong></td>\n<td align=\"left\"><code>inurl:\"id=\" &amp; intext:\"Warning: mysql\"</code></td>\n<td align=\"left\">存在报错信息的注入点</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>目录遍历</strong></td>\n<td align=\"left\"><code>intitle:\"index of /\" \"parent directory\"</code></td>\n<td align=\"left\">开放目录列表</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>API 接口暴露</strong></td>\n<td align=\"left\"><code>inurl:/api/v1 intext:\"apikey\"</code></td>\n<td align=\"left\">泄露的 API 密钥</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-设备与系统\"><a href=\"#4-设备与系统\" class=\"headerlink\" title=\"4. 设备与系统\"></a><strong>4. 设备与系统</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>网络摄像头</strong></td>\n<td align=\"left\"><code>inurl:/view.shtml intitle:\"Live View\"</code></td>\n<td align=\"left\">公开的摄像头流</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>路由器管理</strong></td>\n<td align=\"left\"><code>intitle:\"RouterOS\" \"admin\"</code></td>\n<td align=\"left\">未授权的路由器配置页面</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>打印机控制台</strong></td>\n<td align=\"left\"><code>inurl:\"/hp/device/this.LCDispatcher\"</code></td>\n<td align=\"left\">惠普打印机管理界面</td>\n</tr>\n</tbody></table>\n<h4 id=\"5-开源情报（OSINT）\"><a href=\"#5-开源情报（OSINT）\" class=\"headerlink\" title=\"5. 开源情报（OSINT）\"></a><strong>5. 开源情报（OSINT）</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>员工信息</strong></td>\n<td align=\"left\"><code>site:linkedin.com \"CTO\" \"example.com\"</code></td>\n<td align=\"left\">通过 LinkedIn 收集员工职位</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>文档元数据</strong></td>\n<td align=\"left\"><code>filetype:docx \"作者：张三\"</code></td>\n<td align=\"left\">从 Office 文档提取创建者信息</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>GitHub 泄露</strong></td>\n<td align=\"left\"><code>\"github.com\" \"password\" extension:env</code></td>\n<td align=\"left\">GitHub 中的敏感环境变量文件</td>\n</tr>\n</tbody></table>\n<h4 id=\"6-错误信息泄露\"><a href=\"#6-错误信息泄露\" class=\"headerlink\" title=\"6. 错误信息泄露\"></a><strong>6. 错误信息泄露</strong></h4><table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th align=\"left\">示例</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong>调试模式</strong></td>\n<td align=\"left\"><code>intext:\"DEBUG MODE\" \"PHP\"</code></td>\n<td align=\"left\">开启调试模式的网站</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>数据库报错</strong></td>\n<td align=\"left\"><code>\"ORA-12541: TNS 无监听程序\"</code></td>\n<td align=\"left\">Oracle 数据库错误信息</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>堆栈跟踪</strong></td>\n<td align=\"left\"><code>intext:\"at java.lang.Thread\"</code></td>\n<td align=\"left\">Java 应用崩溃日志</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"三、高阶组合技巧\"><a href=\"#三、高阶组合技巧\" class=\"headerlink\" title=\"三、高阶组合技巧\"></a><strong>三、高阶组合技巧</strong></h3><h4 id=\"1-通配符与模糊搜索\"><a href=\"#1-通配符与模糊搜索\" class=\"headerlink\" title=\"1. 通配符与模糊搜索\"></a><strong>1. 通配符与模糊搜索</strong></h4><ul>\n<li>搜索带参数的 URL：<br><code>inurl:*.php?id= *</code></li>\n<li>查找密码重置链接：<br><code>\"password reset\" site:example.com inurl:token=*</code></li>\n</ul>\n<h4 id=\"2-时间范围限定\"><a href=\"#2-时间范围限定\" class=\"headerlink\" title=\"2. 时间范围限定\"></a><strong>2. 时间范围限定</strong></h4><ul>\n<li>查找近期泄露的数据库：<br><code>filetype:sql \"INSERT INTO users\" after:2023-01-01</code></li>\n</ul>\n<h4 id=\"3-混合逻辑精准定位\"><a href=\"#3-混合逻辑精准定位\" class=\"headerlink\" title=\"3. 混合逻辑精准定位\"></a><strong>3. 混合逻辑精准定位</strong></h4><ul>\n<li>排除干扰结果：<br><code>(intitle:\"管理后台\" OR inurl:/admin) -site:gov.cn</code></li>\n<li>组合文件类型与关键词：<br><code>filetype:xls \"员工工资\" site:example.com</code></li>\n</ul>\n<h4 id=\"4-利用错误消息\"><a href=\"#4-利用错误消息\" class=\"headerlink\" title=\"4. 利用错误消息\"></a><strong>4. 利用错误消息</strong></h4><ul>\n<li>发现 SQL 注入漏洞：<br><code>\"You have an error in your SQL syntax\"</code></li>\n<li>识别配置错误：<br><code>\"Access denied for user 'root'@'localhost'\"</code></li>\n</ul>\n<hr>\n<h3 id=\"四、防御建议（补充）\"><a href=\"#四、防御建议（补充）\" class=\"headerlink\" title=\"四、防御建议（补充）\"></a><strong>四、防御建议（补充）</strong></h3><ol>\n<li><strong>robots.txt 配置</strong>：禁止爬虫访问敏感路径（如 <code>/admin</code>、<code>/config</code>）。</li>\n<li><strong>文件权限控制</strong>：避免将备份文件（<code>.bak</code>、<code>.sql</code>）存放在 Web 目录。</li>\n<li><strong>错误信息隐藏</strong>：自定义错误页面，避免暴露堆栈跟踪。</li>\n<li><strong>定期搜索自身</strong>：用 <code>site:yourdomain.com</code> 检查公开信息泄露。</li>\n</ol>\n<hr>\n<h3 id=\"五、工具增强\"><a href=\"#五、工具增强\" class=\"headerlink\" title=\"五、工具增强\"></a><strong>五、工具增强</strong></h3><ul>\n<li><strong>Google Dork 自动化</strong>：<ul>\n<li><a href=\"https://www.exploit-db.com/google-hacking-database\">GHDB</a>：直接搜索预定义的漏洞语法。</li>\n<li><a href=\"https://github.com/...\">DorkGenius</a>：自动生成高级 Dork 语句。</li>\n</ul>\n</li>\n<li><strong>监控与告警</strong>：<ul>\n<li>使用 <code>Google Alerts</code> 监控公司关键词（如 <code>site:example.com password</code>）。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"六、合法与道德提醒\"><a href=\"#六、合法与道德提醒\" class=\"headerlink\" title=\"六、合法与道德提醒\"></a><strong>六、合法与道德提醒</strong></h3><ul>\n<li><strong>仅用于授权测试</strong>：渗透前需获得书面许可。</li>\n<li><strong>漏洞报告</strong>：发现漏洞后联系管理员，参考《<a href=\"https://www.rfc-editor.org/rfc/rfc9116\">漏洞披露规范</a>》。</li>\n<li><strong>避免敏感数据</strong>：示例中的关键词均为演示用途，请勿针对真实系统测试。</li>\n</ul>\n<h3 id=\"七、语法解析与示例\"><a href=\"#七、语法解析与示例\" class=\"headerlink\" title=\"七、语法解析与示例\"></a>七、<strong>语法解析与示例</strong></h3><h4 id=\"1-index-of-admin\"><a href=\"#1-index-of-admin\" class=\"headerlink\" title=\"1. index of /admin\"></a><strong>1. <code>index of /admin</code></strong></h4><ul>\n<li><strong>用途</strong>：搜索开放目录列表中的 <code>/admin</code> 目录（常见管理后台路径）。</li>\n<li><strong>风险</strong>：暴露后台登录页面、未授权访问管理界面。</li>\n<li><strong>防御</strong>：禁用目录列表（Apache: <code>Options -Indexes</code>），设置访问权限（如 IP 白名单）。</li>\n</ul>\n<h4 id=\"2-index-of-passwd\"><a href=\"#2-index-of-passwd\" class=\"headerlink\" title=\"2. index of /passwd\"></a><strong>2. <code>index of /passwd</code></strong></h4><ul>\n<li><strong>用途</strong>：查找 Unix/Linux 系统中的 <code>/etc/passwd</code> 文件（用户账户信息）。</li>\n<li><strong>风险</strong>：泄露用户名、UID/GID 等敏感信息（现代系统密码存储在 <code>/etc/shadow</code>）。</li>\n<li><strong>防御</strong>：确保 <code>/etc/passwd</code> 文件权限为 <code>644</code>，禁止 Web 访问系统文件。</li>\n</ul>\n<h4 id=\"3-index-of-password\"><a href=\"#3-index-of-password\" class=\"headerlink\" title=\"3. index of /password\"></a><strong>3. <code>index of /password</code></strong></h4><ul>\n<li><strong>用途</strong>：搜索包含 “password” 关键词的目录或文件（如明文密码文件）。</li>\n<li><strong>风险</strong>：直接获取明文密码或哈希值。</li>\n<li><strong>防御</strong>：避免在代码或文件中明文存储密码，使用环境变量或密钥管理服务。</li>\n</ul>\n<h4 id=\"4-index-of-mail\"><a href=\"#4-index-of-mail\" class=\"headerlink\" title=\"4. index of /mail\"></a><strong>4. <code>index of /mail</code></strong></h4><ul>\n<li><strong>用途</strong>：查找邮件服务器或邮件存储目录（如 <code>/var/mail</code>）。</li>\n<li><strong>风险</strong>：泄露用户邮件内容、账户信息。</li>\n<li><strong>防御</strong>：限制邮件目录的 Web 访问权限，加密存储敏感数据。</li>\n</ul>\n<h4 id=\"5-“index-of-“-passwd\"><a href=\"#5-“index-of-“-passwd\" class=\"headerlink\" title=\"5. “index of /“ +passwd\"></a><strong>5. <code>“index of /“ +passwd</code></strong></h4><ul>\n<li><strong>用途</strong>：在根目录下搜索 <code>passwd</code> 文件。</li>\n<li><strong>示例结果</strong>：可能发现 <code>/etc/passwd</code> 被错误链接到 Web 根目录。</li>\n<li><strong>防御</strong>：检查 Web 目录中是否存在符号链接到系统文件。</li>\n</ul>\n<h4 id=\"6-“index-of-“-password-txt\"><a href=\"#6-“index-of-“-password-txt\" class=\"headerlink\" title=\"6. “index of /“ +password.txt\"></a><strong>6. <code>“index of /“ +password.txt</code></strong></h4><ul>\n<li><strong>用途</strong>：查找 Web 根目录下的 <code>password.txt</code> 文件。</li>\n<li><strong>风险</strong>：明文密码文件可直接下载。</li>\n<li><strong>防御</strong>：删除测试或临时文件，禁用目录列表。</li>\n</ul>\n<h4 id=\"7-“index-of-“-htaccess\"><a href=\"#7-“index-of-“-htaccess\" class=\"headerlink\" title=\"7. “index of /“ +.htaccess\"></a><strong>7. <code>“index of /“ +.htaccess</code></strong></h4><ul>\n<li><strong>用途</strong>：暴露 Apache 服务器的 <code>.htaccess</code> 配置文件。</li>\n<li><strong>风险</strong>：泄露重定向规则、认证凭据（如 <code>AuthUserFile</code> 路径）。</li>\n<li><strong>防御</strong>：限制 <code>.htaccess</code> 文件权限（如 <code>600</code>），避免存储敏感信息。</li>\n</ul>\n<h4 id=\"8-“index-of-root”\"><a href=\"#8-“index-of-root”\" class=\"headerlink\" title=\"8. “index of /root”\"></a><strong>8. <code>“index of /root”</code></strong></h4><ul>\n<li><strong>用途</strong>：搜索 Unix 系统超级用户（root）的主目录。</li>\n<li><strong>风险</strong>：泄露 root 用户的 SSH 密钥、脚本或日志。</li>\n<li><strong>防御</strong>：确保 <code>/root</code> 目录权限为 <code>700</code>，禁止 Web 服务器访问。</li>\n</ul>\n<h4 id=\"9-“index-of-cgi-bin”\"><a href=\"#9-“index-of-cgi-bin”\" class=\"headerlink\" title=\"9. “index of /cgi-bin”\"></a><strong>9. <code>“index of /cgi-bin”</code></strong></h4><ul>\n<li><strong>用途</strong>：查找 CGI 脚本目录（常见于老旧系统）。</li>\n<li><strong>风险</strong>：利用 CGI 漏洞（如 Shellshock）执行远程代码。</li>\n<li><strong>防御</strong>：升级或禁用 CGI 模块，设置严格的脚本权限。</li>\n</ul>\n<h4 id=\"10-“index-of-logs”\"><a href=\"#10-“index-of-logs”\" class=\"headerlink\" title=\"10. “index of /logs”\"></a><strong>10. <code>“index of /logs”</code></strong></h4><ul>\n<li><strong>用途</strong>：暴露日志文件目录（如访问日志、错误日志）。</li>\n<li><strong>风险</strong>：日志中可能包含敏感信息（如 SQL 错误中的数据库密码）。</li>\n<li><strong>防御</strong>：将日志存储在非 Web 目录，定期清理并加密存档。</li>\n</ul>\n<h4 id=\"11-“index-of-config”\"><a href=\"#11-“index-of-config”\" class=\"headerlink\" title=\"11. “index of /config”\"></a><strong>11. <code>“index of /config”</code></strong></h4><ul>\n<li><strong>用途</strong>：查找配置文件目录（如数据库连接信息）。</li>\n<li><strong>风险</strong>：泄露 <code>config.php</code>、<code>settings.ini</code> 等文件。</li>\n<li><strong>防御</strong>：将配置文件移出 Web 目录，使用环境变量注入配置。</li>\n</ul>\n",
            "tags": [
                "google"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/01/17/linux-she-zhi-matplotlib-zhong-wen-zi-ti/",
            "url": "https://0xdadream.github.io/2025/01/17/linux-she-zhi-matplotlib-zhong-wen-zi-ti/",
            "title": "linux设置matplotlib中文字体",
            "date_published": "2025-01-17T04:25:00.000Z",
            "content_html": "<h1 id=\"linux设置matplotlib中文字体\"><a href=\"#linux设置matplotlib中文字体\" class=\"headerlink\" title=\"linux设置matplotlib中文字体\"></a>linux设置matplotlib中文字体</h1><p>在Linux上设置Matplotlib使用中文字体的步骤如下：</p>\n<h3 id=\"步骤-1-安装中文字体\"><a href=\"#步骤-1-安装中文字体\" class=\"headerlink\" title=\"步骤 1: 安装中文字体\"></a>步骤 1: 安装中文字体</h3><p>去<a href=\"https://github.com/StellarCN/scp_zh/blob/master/fonts/SimHei.ttf\">scp_zh/fonts/SimHei.ttf at master · StellarCN/scp_zh</a>下载中文字体</p>\n<h4 id=\"安装SimHei字体\"><a href=\"#安装SimHei字体\" class=\"headerlink\" title=\"安装SimHei字体\"></a>安装SimHei字体</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">import matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport pandas as pd\n\n# 设置中文字体\nrcParams['font.sans-serif'] = ['SimHei']  # 或者使用 'Microsoft YaHei'\nrcParams['axes.unicode_minus'] = False  # 解决负号显示问题\n\n# 示例数据\ndata = {'日期': ['2024-01-01', '2024-01-02', '2024-01-03'],\n        '销售额': [150, 200, 250]}\ndf = pd.DataFrame(data)\n\n# 绘制图表\nplt.plot(df['日期'], df['销售额'])\nplt.title('销售额趋势')\nplt.xlabel('日期')\nplt.ylabel('销售额')\nplt.xticks(rotation=45)\nplt.show()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行命令找到配置目录</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> matplotlib\nmatplotlib<span class=\"token punctuation\">.</span>matplotlib_fname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># xxx/matplotlib/matplotlibrc</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改文件<code>matplotlibrc</code>，找到<code>font.sans-serif: DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif, SimHei</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vim matplotlibrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>SimHei</code>就是我添加的中文字体</p>\n<p>删除缓存</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/.cache/matplotlib\n<span class=\"token function\">rm</span> * <span class=\"token parameter variable\">-r</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"步骤-2-配置Matplotlib使用中文字体\"><a href=\"#步骤-2-配置Matplotlib使用中文字体\" class=\"headerlink\" title=\"步骤 2: 配置Matplotlib使用中文字体\"></a>步骤 2: 配置Matplotlib使用中文字体</h3><p>测试代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> rcParams\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 设置中文字体</span>\nrcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'font.sans-serif'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'SimHei'</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 或者使用 'Microsoft YaHei'</span>\nrcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'axes.unicode_minus'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># 解决负号显示问题</span>\n\n<span class=\"token comment\"># 示例数据</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'日期'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2024-01-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2024-01-02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2024-01-03'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'销售额'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制图表</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'日期'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'销售额'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'销售额趋势'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'日期'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'销售额'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span>rotation<span class=\"token operator\">=</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://0xdadream.github.io/2025/01/12/pandas-shi-yong/",
            "url": "https://0xdadream.github.io/2025/01/12/pandas-shi-yong/",
            "title": "pandas使用",
            "date_published": "2025-01-12T04:25:00.000Z",
            "content_html": "<h1 id=\"pandas使用\"><a href=\"#pandas使用\" class=\"headerlink\" title=\"pandas使用\"></a>pandas使用</h1><p><strong>教程框架：</strong></p>\n<ol>\n<li><strong>Pandas 简介与安装</strong><ul>\n<li>什么是 pandas？</li>\n<li>为什么使用 pandas？</li>\n<li>如何安装 pandas？</li>\n</ul>\n</li>\n<li><strong>Pandas 数据结构：Series</strong><ul>\n<li>Series 的创建</li>\n<li>Series 的索引与切片</li>\n<li>Series 的基本操作（算术、逻辑、函数应用）</li>\n<li>Series 的常用属性和方法</li>\n</ul>\n</li>\n<li><strong>Pandas 数据结构：DataFrame</strong><ul>\n<li>DataFrame 的创建</li>\n<li>DataFrame 的索引与选择数据</li>\n<li>DataFrame 的基本操作<ul>\n<li>添加、删除列</li>\n<li>修改数据</li>\n<li>排序</li>\n</ul>\n</li>\n<li>DataFrame 的常用属性和方法</li>\n<li>数据清洗</li>\n</ul>\n</li>\n<li><strong>Pandas 数据操作</strong><ul>\n<li>数据分组 (GroupBy)</li>\n<li>数据聚合 (Aggregation)</li>\n<li>数据合并 (Merge, Join)</li>\n<li>数据连接 (Concat)</li>\n<li>数据透视表 (Pivot Table)</li>\n</ul>\n</li>\n<li><strong>Pandas 文件读写</strong><ul>\n<li>读取 CSV 文件</li>\n<li>读取 Excel 文件</li>\n<li>读取其他类型文件</li>\n<li>写入文件</li>\n</ul>\n</li>\n<li><strong>Pandas 时间序列数据处理</strong><ul>\n<li>时间戳 (Timestamp)</li>\n<li>时间范围 (Date Range)</li>\n<li>时间重采样 (Resampling)</li>\n</ul>\n</li>\n<li><strong>Pandas 高级应用</strong><ul>\n<li>apply 和 applymap 函数</li>\n<li>窗口函数</li>\n<li>数据可视化</li>\n</ul>\n</li>\n<li><strong>总结与进阶</strong><ul>\n<li>常用技巧</li>\n<li>学习资源</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"1-Pandas-简介与安装\"><a href=\"#1-Pandas-简介与安装\" class=\"headerlink\" title=\"1. Pandas 简介与安装\"></a><strong>1. Pandas 简介与安装</strong></h3><p><strong>1.1 什么是 pandas？</strong></p>\n<p>Pandas 是一个强大的 Python 数据分析库，它提供了高效的数据结构和数据分析工具。Pandas 的核心是两种数据结构：Series 和 DataFrame，它们使得数据处理变得简单快捷。</p>\n<ul>\n<li><strong>Series:</strong> 一维的、带标签的数组，类似于带索引的列表。</li>\n<li><strong>DataFrame:</strong> 二维的、表格型的数据结构，可以看作是 Series 的容器。</li>\n</ul>\n<p><strong>1.2 为什么使用 pandas？</strong></p>\n<ul>\n<li><strong>数据处理能力强:</strong> Pandas 提供了各种数据操作功能，如数据清洗、转换、切片、聚合、合并等。</li>\n<li><strong>高效的数据结构:</strong> Series 和 DataFrame 的设计使得数据操作和分析速度快。</li>\n<li><strong>与 NumPy 集成:</strong> Pandas 基于 NumPy 构建，可以无缝地与 NumPy 数组进行交互。</li>\n<li><strong>文件读写方便:</strong> Pandas 可以轻松读取和写入各种格式的文件，如 CSV、Excel、JSON、SQL 等。</li>\n<li><strong>数据可视化支持:</strong> Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。</li>\n<li><strong>易用性:</strong> Pandas 的 API 设计简洁易懂，上手快。</li>\n</ul>\n<p><strong>1.3 如何安装 pandas？</strong></p>\n<p>推荐使用 pip 来安装 pandas：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">pip install pandas<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你使用的是 Anaconda，pandas 通常会预装，如果没有，也可以用 conda 安装：</p>\n<pre class=\"line-numbers language-Bash\" data-language=\"Bash\"><code class=\"language-Bash\">conda install pandas<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>安装验证:</strong></p>\n<p>打开你的 Python 解释器或 Jupyter Notebook，输入以下代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span>__version__<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果正确打印出 pandas 的版本号，就说明安装成功了。</p>\n<hr>\n<h3 id=\"2-Pandas-数据结构：Series\"><a href=\"#2-Pandas-数据结构：Series\" class=\"headerlink\" title=\"2. Pandas 数据结构：Series\"></a><strong>2. Pandas 数据结构：Series</strong></h3><p><strong>2.1 Series 的创建</strong></p>\n<p>Series 是一种一维的、带有标签（索引）的数据结构。它可以存储各种数据类型，如整数、浮点数、字符串、布尔值等。</p>\n<p><strong>2.1.1 从列表创建 Series</strong></p>\n<p>最简单的创建方式是从 Python 的列表创建：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>    <span class=\"token number\">10</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">20</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">30</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">40</span>\n<span class=\"token number\">4</span>    <span class=\"token number\">50</span>\ndtype: int64\n<span class=\"token operator\">&lt;</span>class <span class=\"token string\">'pandas.core.series.Series'</span><span class=\"token operator\">&gt;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>默认情况下，Series 会自动创建从 0 开始的整数索引。</li>\n<li>dtype: int64 表示数据类型是 64 位整数。</li>\n</ul>\n<p><strong>2.1.2 从 NumPy 数组创建 Series</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\narr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>    <span class=\"token number\">1.1</span>\n<span class=\"token number\">1</span>    <span class=\"token number\">2.2</span>\n<span class=\"token number\">2</span>    <span class=\"token number\">3.3</span>\n<span class=\"token number\">3</span>    <span class=\"token number\">4.4</span>\n<span class=\"token number\">4</span>    <span class=\"token number\">5.5</span>\ndtype: float64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>dtype: float64 表示数据类型是 64 位浮点数。</li>\n</ul>\n<p><strong>2.1.3 从字典创建 Series</strong></p>\n<p>字典的键会成为 Series 的索引，值会成为 Series 的数据：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">}</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a    <span class=\"token number\">100</span>\nb    <span class=\"token number\">200</span>\nc    <span class=\"token number\">300</span>\ndtype: int64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.1.4 自定义索引</strong></p>\n<p>可以在创建 Series 时指定索引：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\nindex <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>index<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">x    <span class=\"token number\">10</span>\ny    <span class=\"token number\">20</span>\nz    <span class=\"token number\">30</span>\ndtype: int64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.2 Series 的索引与切片</strong></p>\n<p>类似于列表和字典，可以使用索引来访问 Series 的元素。</p>\n<p><strong>2.2.1 通过位置索引访问</strong></p>\n<p>使用默认的整数索引：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 b    20</span>\n             <span class=\"token comment\">#      c    30</span>\n             <span class=\"token comment\">#      dtype: int64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.2.2 通过自定义索引访问</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出 10</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 b    20</span>\n                <span class=\"token comment\">#      c    30</span>\n                <span class=\"token comment\">#      d    40</span>\n                <span class=\"token comment\">#      dtype: int64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.3 Series 的基本操作</strong></p>\n<p><strong>2.3.1 算术运算</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ns2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">+</span> s2<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 加法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">*</span> s2<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 乘法</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s2 <span class=\"token operator\">/</span> s1<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 除法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Series 会按照索引对齐进行计算。</p>\n<p><strong>2.3.2 逻辑运算</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 布尔值 Series</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>s <span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 选择大于20的元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.3.3 函数应用</strong></p>\n<p>可以使用 apply() 方法将函数应用于 Series 的每个元素：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token operator\">**</span><span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.4 Series 的常用属性和方法</strong></p>\n<ul>\n<li>values: 返回 Series 的值，以 NumPy 数组的形式。</li>\n<li>index: 返回 Series 的索引。</li>\n<li>dtype: 返回 Series 的数据类型。</li>\n<li>size: 返回 Series 的元素个数。</li>\n<li>unique(): 返回 Series 中唯一的值。</li>\n<li>value_counts(): 返回每个值出现的次数。</li>\n<li>head(n): 返回前 n 个元素。</li>\n<li>tail(n): 返回后 n 个元素。</li>\n<li>sort_values(): 对 Series 的值进行排序。</li>\n</ul>\n<p><strong>示例：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ns <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 输出 [10 20 10 30 20]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 输出 RangeIndex(start=0, stop=5, step=1)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># 输出 int64</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>        <span class=\"token comment\"># 输出 5</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 输出 [10 20 30]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出 10    2</span>\n                         <span class=\"token comment\">#  20    2</span>\n                         <span class=\"token comment\">#  30    1</span>\n                         <span class=\"token comment\"># dtype: int64</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 输出 0    10</span>\n                         <span class=\"token comment\">#      1    20</span>\n                         <span class=\"token comment\">#      dtype: int64</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输出 0    10</span>\n                       <span class=\"token comment\">#      2    10</span>\n                       <span class=\"token comment\">#      1    20</span>\n                       <span class=\"token comment\">#      4    20</span>\n                       <span class=\"token comment\">#      3    30</span>\n                       <span class=\"token comment\">#      dtype: int64</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"3-Pandas-数据结构：DataFrame\"><a href=\"#3-Pandas-数据结构：DataFrame\" class=\"headerlink\" title=\"3. Pandas 数据结构：DataFrame\"></a><strong>3. Pandas 数据结构：DataFrame</strong></h3><p><strong>3.1 DataFrame 的创建</strong></p>\n<p>DataFrame 是一个二维的表格型数据结构，可以看作是 Series 的容器。它由行和列组成，每一列可以是不同的数据类型。</p>\n<p><strong>3.1.1 从字典创建 DataFrame</strong></p>\n<p>字典的键会成为 DataFrame 的列名，值会成为 DataFrame 的列数据：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">name  age      city\n<span class=\"token number\">0</span>    Alice   <span class=\"token number\">25</span>  New York\n<span class=\"token number\">1</span>      Bob   <span class=\"token number\">30</span>    London\n<span class=\"token number\">2</span>  Charlie   <span class=\"token number\">28</span>     Paris<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.1.2 从列表创建 DataFrame</strong></p>\n<p>可以使用列表的列表或 NumPy 数组创建 DataFrame，需要指定列名：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'New York'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">name  age      city\n<span class=\"token number\">0</span>    Alice   <span class=\"token number\">25</span>  New York\n<span class=\"token number\">1</span>      Bob   <span class=\"token number\">30</span>    London\n<span class=\"token number\">2</span>  Charlie   <span class=\"token number\">28</span>     Paris<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.1.3 从 Series 创建 DataFrame</strong></p>\n<p>可以将多个 Series 组合成一个 DataFrame：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\nname <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nage <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncity <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> city<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">name  age      city\n<span class=\"token number\">0</span>    Alice   <span class=\"token number\">25</span>  New York\n<span class=\"token number\">1</span>      Bob   <span class=\"token number\">30</span>    London\n<span class=\"token number\">2</span>  Charlie   <span class=\"token number\">28</span>     Paris<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.2 DataFrame 的索引与选择数据</strong></p>\n<p><strong>3.2.1 选择列</strong></p>\n<p>可以使用列名来选择 DataFrame 的一列或多列：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择 'name' 列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择 'name' 和 'age' 列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.2.2 选择行</strong></p>\n<p>可以使用 loc 和 iloc 来选择行：</p>\n<ul>\n<li>loc：通过行标签（索引）选择行。</li>\n<li>iloc：通过行位置（整数索引）选择行。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 通过标签选择 Alice 这行，按标签</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 通过位置选择 第一行，按位置</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择前两行所有列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 通过标签选择 Alice 到 Bob 行的所有列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.2.3 选择特定元素</strong></p>\n<p>可以使用行和列的标签或位置来选择特定的元素：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择第 0 行 'name' 列的元素</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 选择第 0 行 第 0 列的元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3 DataFrame 的基本操作</strong></p>\n<p><strong>3.3.1 添加列</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 添加 'gender' 列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3.2 删除列</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'gender'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span><span class=\"token string\">'gender'</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删除 'gender' 列，axis=1 表示列</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3.3 修改数据</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">26</span> <span class=\"token comment\"># 修改第 0 行 'age' 列的值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.3.4 排序</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 按 'age' 列降序排序</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.4 DataFrame 的常用属性和方法</strong></p>\n<ul>\n<li>shape: 返回 DataFrame 的形状（行数，列数）。</li>\n<li>index: 返回 DataFrame 的行索引。</li>\n<li>columns: 返回 DataFrame 的列索引。</li>\n<li>dtypes: 返回 DataFrame 每列的数据类型。</li>\n<li>head(n): 返回 DataFrame 的前 n 行。</li>\n<li>tail(n): 返回 DataFrame 的后 n 行。</li>\n<li>info(): 显示 DataFrame 的基本信息，包括列名，数据类型，非空值数量等。</li>\n<li>describe(): 返回 DataFrame 的统计摘要。</li>\n<li>dropna(): 删除包含缺失值的行或列。</li>\n<li>fillna(): 填充缺失值。</li>\n</ul>\n<p><strong>3.5 数据清洗</strong></p>\n<p>数据清洗是数据分析中重要的一步，包括处理缺失值、重复值等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'city'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Paris'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Unknown'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 检测缺失值</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 删除包含缺失值的行</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>drop_duplicates<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 删除重复行</span>\ndf <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 用平均值填充年龄缺失值</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"4-Pandas-数据操作\"><a href=\"#4-Pandas-数据操作\" class=\"headerlink\" title=\"4. Pandas 数据操作\"></a><strong>4. Pandas 数据操作</strong></h3><p><strong>4.1 数据分组 (GroupBy)</strong></p>\n<p>groupby() 方法允许你根据一个或多个列的值将 DataFrame 分组，然后可以对每个组进行聚合操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'category'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\ngrouped <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'category'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 查看分组情况</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每个分组求和</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每个分组求平均值</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.2 数据聚合 (Aggregation)</strong></p>\n<p>聚合操作是对分组后的数据进行汇总计算，如求和、平均值、最大值、最小值等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'category'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ngrouped <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'category'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'max'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'min'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 同时执行多个聚合函数</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>grouped<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>std<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 对指定列执行不同的聚合函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.3 数据合并 (Merge, Join)</strong></p>\n<p>merge() 方法用于将两个 DataFrame 根据共同的列合并在一起，类似于 SQL 的 JOIN 操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndf1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value1'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndf2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value2'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'原始数据'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 内连接(inner join)</span>\nmerged_inner <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'inner'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_inner<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 左连接(left join)</span>\nmerged_left <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'left'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"left join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_left<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 右连接(right join)</span>\nmerged_right <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'right'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"right join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_right<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 外连接(outer join)</span>\nmerged_outer <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">,</span> on<span class=\"token operator\">=</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> how<span class=\"token operator\">=</span><span class=\"token string\">'outer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outer join:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>merged_outer<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.4 数据连接 (Concat)</strong></p>\n<p>concat() 方法用于将两个或多个 DataFrame 沿着指定的轴连接在一起。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndf1 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndf2 <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原始数据:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 垂直连接(默认axis=0)</span>\nconcatenated_vertical <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ignore_index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"垂直连接:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>concatenated_vertical<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'======================='</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 水平连接(axis=1)</span>\nconcatenated_horizontal <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"水平连接:\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>concatenated_horizontal<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.5 数据透视表 (Pivot Table)</strong></p>\n<p>pivot_table() 方法用于创建数据透视表，可以根据指定的列对数据进行重塑和汇总。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'date'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2023-01-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-02'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-03'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-01-03'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'product'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'sales'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">220</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\npivot_df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>pivot_table<span class=\"token punctuation\">(</span>index<span class=\"token operator\">=</span><span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token string\">'product'</span><span class=\"token punctuation\">,</span> values<span class=\"token operator\">=</span><span class=\"token string\">'sales'</span><span class=\"token punctuation\">,</span> aggfunc<span class=\"token operator\">=</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span> fill_value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pivot_df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"5-Pandas-文件读写\"><a href=\"#5-Pandas-文件读写\" class=\"headerlink\" title=\"5. Pandas 文件读写\"></a><strong>5. Pandas 文件读写</strong></h3><p>Pandas 提供了强大的文件读写功能，可以方便地处理各种数据文件。</p>\n<p><strong>5.1 读取 CSV 文件</strong></p>\n<p>CSV (Comma Separated Values) 是一种常见的文本文件格式，用于存储表格数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 读取 CSV 文件</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.csv'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 指定分隔符，如果不是逗号，使用 sep 参数</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">,</span> sep<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取指定列</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.csv'</span><span class=\"token punctuation\">,</span> usecols<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.2 读取 Excel 文件</strong></p>\n<p>Pandas 可以直接读取 Excel 文件（.xls 和 .xlsx）。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 读取 Excel 文件</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'data.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取指定 sheet</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'data.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取指定列</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'data.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">,</span> usecols<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.3 读取其他类型文件</strong></p>\n<p>Pandas 还支持读取其他类型的文件，例如：</p>\n<ul>\n<li><strong>JSON</strong>: pd.read_json()</li>\n<li><strong>HTML</strong>: pd.read_html()</li>\n<li><strong>SQL</strong>: pd.read_sql()</li>\n</ul>\n<p><strong>5.4 写入文件</strong></p>\n<p>可以将 DataFrame 写入到不同的文件格式。</p>\n<p><strong>5.4.1 写入 CSV 文件</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 写入 CSV 文件</span>\ndf<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'output.csv'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># index=False 表示不写入行索引</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.4.2 写入 Excel 文件</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Charlie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 写入 Excel 文件</span>\ndf<span class=\"token punctuation\">.</span>to_excel<span class=\"token punctuation\">(</span><span class=\"token string\">'output.xlsx'</span><span class=\"token punctuation\">,</span> sheet_name<span class=\"token operator\">=</span><span class=\"token string\">'Sheet1'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.4.3 写入其他类型文件</strong></p>\n<ul>\n<li><strong>JSON</strong>: df.to_json()</li>\n<li><strong>HTML</strong>: df.to_html()</li>\n<li><strong>SQL</strong>: df.to_sql()</li>\n</ul>\n<hr>\n<h3 id=\"6-Pandas-时间序列数据处理\"><a href=\"#6-Pandas-时间序列数据处理\" class=\"headerlink\" title=\"6. Pandas 时间序列数据处理\"></a><strong>6. Pandas 时间序列数据处理</strong></h3><p>Pandas 提供了强大的时间序列数据处理能力，可以方便地分析和处理时间序列数据。</p>\n<p><strong>6.1 时间戳 (Timestamp)</strong></p>\n<p>时间戳是表示特定时间点的对象。Pandas 可以使用 pd.Timestamp 创建时间戳。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 创建时间戳</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Timestamp<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-26 12:30:00'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 从字符串创建时间戳</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>to_datetime<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-26'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>6.2 时间范围 (Date Range)</strong></p>\n<p>pd.date_range() 方法可以创建指定时间范围内的一系列时间戳。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># 创建时间范围</span>\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date_range<span class=\"token punctuation\">)</span>\n\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2023-10-10'</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'W'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>date_range<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>periods: 时间戳的数量。</li>\n<li>freq: 时间间隔，如 ‘D’ (天), ‘W’ (周), ‘M’ (月), ‘H’ (小时), ‘T’ (分钟), ‘S’ (秒) 等。</li>\n</ul>\n<p><strong>6.3 时间序列索引</strong></p>\n<p>可以将时间序列数据作为 DataFrame 或 Series 的索引，方便时间序列数据的分析。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token comment\"># 创建时间序列索引</span>\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>date_range<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 使用时间序列索引选择数据</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">[</span><span class=\"token string\">'2023-10-03'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">[</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'2023-10-05'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>6.4 时间重采样 (Resampling)</strong></p>\n<p>resample() 方法可以对时间序列数据进行重采样，例如，将数据从天转换为周或月。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>date_range<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 将日数据重采样为周数据</span>\nweekly_ts <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span><span class=\"token string\">'W'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>weekly_ts<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 将日数据重采样为月数据</span>\nmonthly_ts <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">.</span>resample<span class=\"token punctuation\">(</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>monthly_ts<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>.mean()：计算重采样后的平均值。</li>\n<li>.sum()：计算重采样后的总和。</li>\n<li>.min()：计算重采样后的最小值。</li>\n<li>.max()：计算重采样后的最大值。</li>\n<li>.first()：计算重采样后的第一个值。</li>\n<li>.last()：计算重采样后的最后一个值。</li>\n</ul>\n<p><strong>6.5 时间序列常用方法</strong></p>\n<ul>\n<li>shift()：移动时间序列数据。</li>\n<li>diff()：计算时间序列数据的差分。</li>\n<li>asfreq()：转换为指定频率。</li>\n<li>rolling()：计算滑动窗口统计量。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndate_range <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>date_range<span class=\"token punctuation\">(</span><span class=\"token string\">'2023-10-01'</span><span class=\"token punctuation\">,</span> periods<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> freq<span class=\"token operator\">=</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nts <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>date_range<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 向下移动两个时间单位</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>diff<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计算一阶差分</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>asfreq<span class=\"token punctuation\">(</span><span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span> fill_value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#转换为小时频率</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 计算窗口为 3 的移动平均</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"7-Pandas-高级应用\"><a href=\"#7-Pandas-高级应用\" class=\"headerlink\" title=\"7. Pandas 高级应用\"></a><strong>7. Pandas 高级应用</strong></h3><p><strong>7.1.1 apply() 函数</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对 Series 应用函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对 DataFrame 的行或列应用函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">row_sum</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>row_sum<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每一行应用求和操作</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>row_sum<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对每一列应用求和操作</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>7.1.2 applymap() 函数</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 对 DataFrame 的每个元素应用函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_one</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>applymap<span class=\"token punctuation\">(</span>add_one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>7.2 窗口函数</strong></p>\n<p>窗口函数可以对数据窗口进行计算，例如移动平均、滚动求和等。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 移动平均</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'rolling_mean'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 累加</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'cumsum'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 窗口最大值</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'rolling_max'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 窗口最小值</span>\ndf<span class=\"token punctuation\">[</span><span class=\"token string\">'rolling_min'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rolling<span class=\"token punctuation\">(</span>window<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>7.3 数据可视化</strong></p>\n<p>Pandas 可以与 Matplotlib 等可视化库结合，方便进行数据可视化。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制折线图</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Random Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Index'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制直方图</span>\ndata <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>bins<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Hist Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Frequency'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制散点图</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'x'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Scatter Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制箱线图</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Box Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Value'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 绘制饼图</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\nlabels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\ndf <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">)</span>\ndf<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">.</span>pie<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> autopct<span class=\"token operator\">=</span><span class=\"token string\">'%.2f'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Pie Chart Data Visualization'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"8-总结与进阶\"><a href=\"#8-总结与进阶\" class=\"headerlink\" title=\"8. 总结与进阶\"></a><strong>8. 总结与进阶</strong></h3><p><strong>8.1 常用技巧</strong></p>\n<p>在实际使用 pandas 时，以下一些技巧可能会很有帮助：</p>\n<ul>\n<li><p><strong>链式操作：</strong> 可以将多个操作链接在一起，提高代码的可读性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'data.csv'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 query() 方法：</strong> 可以用更简洁的语法进行数据筛选：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span><span class=\"token string\">'age &gt; 30 and city == \"New York\"'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 isin() 方法：</strong> 可以检查 Series 或 DataFrame 中的元素是否在给定的列表中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'London'</span><span class=\"token punctuation\">]</span>\n    df<span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">'city'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isin<span class=\"token punctuation\">(</span>cities<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 assign() 方法：</strong> 可以添加新的列，同时保留原始 DataFrame：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">(</span>age_plus_ten <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>使用 pipe() 方法：</strong> 可以将 DataFrame 传递给一系列函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">clean_data</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> df<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_age</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> df<span class=\"token punctuation\">.</span>assign<span class=\"token punctuation\">(</span>age_plus_ten <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\ndf<span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>clean_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pipe<span class=\"token punctuation\">(</span>add_age<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>8.2 学习资源</strong></p>\n<ul>\n<li><strong>官方文档：</strong> <a href=\"https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/docs/\">pandas documentation</a><ul>\n<li>这是学习 pandas 最权威的资源，包含了所有函数、方法的详细说明和示例。</li>\n</ul>\n</li>\n<li><strong>在线教程：</strong><ul>\n<li><a href=\"https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/docs/user_guide/10min.html\">10 Minutes to pandas</a>: 一个快速上手 pandas 的教程。</li>\n<li><a href=\"https://www.google.com/url?sa=E&amp;q=https://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html\">Pandas Cookbook</a>: 包含各种常见的数据处理问题的解决方案。</li>\n</ul>\n</li>\n<li><strong>书籍：</strong><ul>\n<li>“Python for Data Analysis” by Wes McKinney： pandas 的作者写的书，是学习 pandas 的经典之作。</li>\n</ul>\n</li>\n<li><strong>实践项目：</strong><ul>\n<li>可以尝试一些 Kaggle 上的数据分析项目，将 pandas 应用到实际问题中。</li>\n</ul>\n</li>\n<li><strong>社区：</strong><ul>\n<li>Stack Overflow：在遇到问题时，可以在 Stack Overflow 上搜索或提问。</li>\n<li>GitHub：pandas 也是一个开源项目，可以在 GitHub 上查看源代码，参与贡献。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "tools"
            ]
        }
    ]
}