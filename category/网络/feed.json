{
    "version": "https://jsonfeed.org/version/1",
    "title": "逐梦 • All posts by \"网络\" category",
    "description": "Welcome to my blog",
    "home_page_url": "https://0xdadream.github.io",
    "items": [
        {
            "id": "https://0xdadream.github.io/2021/04/23/http-xue-xi/",
            "url": "https://0xdadream.github.io/2021/04/23/http-xue-xi/",
            "title": "HTTP学习",
            "date_published": "2021-04-23T01:25:00.000Z",
            "content_html": "<h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><h2 id=\"web协议\"><a href=\"#web协议\" class=\"headerlink\" title=\"web协议\"></a>web协议</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>Web 使用一种名为 HTTP（HyperText Transfer Protocol，超文本传输协议 ）的协议作为规范，完成从客户端到服务器端等一系列运作流程。</p>\n<p>1997 年  1 月公布的  HTTP/1.1 是目前主流的  HTTP 协议版本。</p>\n<h3 id=\"TCP-IP协议簇\"><a href=\"#TCP-IP协议簇\" class=\"headerlink\" title=\"TCP/IP协议簇\"></a>TCP/IP协议簇</h3><p><img src=\"https://images.dadream.eu.org/images/2024/07/cb757b5e4fbd69d9a7870cf73ec5f2c8.png\"></p>\n<h4 id=\"TCP-IP分层\"><a href=\"#TCP-IP分层\" class=\"headerlink\" title=\"TCP/IP分层\"></a>TCP/IP分层</h4><h5 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h5><p>FTP（FileTransfer Protocol，文件传输协议）和 DNS（Domain Name System，域名系统）</p>\n<p>HTTP</p>\n<h5 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h5><p>TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）</p>\n<h5 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h5><p>网络层所起的作用就是在众多的选项内选择一条传输路线</p>\n<h5 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h5><p>用来处理连接网络的硬件部分</p>\n<h4 id=\"TCP-IP-通信传输流\"><a href=\"#TCP-IP-通信传输流\" class=\"headerlink\" title=\"TCP/IP 通信传输流\"></a>TCP/IP 通信传输流</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/81ffdf57755cc7acedb59dfef5c70546.png\"></p>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（protocol）。</p>\n<h3 id=\"IP协议\"><a href=\"#IP协议\" class=\"headerlink\" title=\"IP协议\"></a>IP协议</h3><p>IP（Internet Protocol）网际协议位于网络层</p>\n<p>IP 协议的作用是把各种数据包传送给对方。</p>\n<p>P 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC地址基本上不会更改。</p>\n<h3 id=\"ARP协议\"><a href=\"#ARP协议\" class=\"headerlink\" title=\"ARP协议\"></a>ARP协议</h3><p>ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。</p>\n<h4 id=\"路由选择\"><a href=\"#路由选择\" class=\"headerlink\" title=\"路由选择\"></a>路由选择</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/0c783c5c7eef0356ea5f3a327fb43c70.png\"></p>\n<h3 id=\"TCP协议\"><a href=\"#TCP协议\" class=\"headerlink\" title=\"TCP协议\"></a>TCP协议</h3><p>TCP 位于传输层，提供可靠的字节流服务</p>\n<h4 id=\"tcp三次握手\"><a href=\"#tcp三次握手\" class=\"headerlink\" title=\"tcp三次握手\"></a>tcp三次握手</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/4fd95e6d2b8edcd965ce11295ac0c301.png\"></p>\n<h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的<br>协议。它提供域名到 IP 地址之间的解析服务。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/9b9ebce7681849f430d21d47495b3400.png\"></p>\n<h3 id=\"各协议关系\"><a href=\"#各协议关系\" class=\"headerlink\" title=\"各协议关系\"></a>各协议关系</h3><p><img src=\"https://images.dadream.eu.org/images/2024/07/7e76c47328b109133df3878b6803e24a.png\"></p>\n<h3 id=\"URI\"><a href=\"#URI\" class=\"headerlink\" title=\"URI\"></a>URI</h3><p>URI 是 Uniform Resource Identifier 的缩写。</p>\n<p>URI 用字符串标识某一互联网资源，而 URL表示资源的地点（互联网上所处的位置）</p>\n<h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/48eb2105e992b313cb99eb9cb2a0e897.png\"></p>\n<p>as：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">ftp</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//ftp.is.co.za/rfc/rfc1808.txt</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//www.ietf.org/rfc/rfc2396.txt</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">ldap</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//[2001:db8::7]/c=GB?objectClass?one</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">mailto</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">John.Doe@example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">news</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">comp.infosystems.www.servers.unix</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">tel</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">+1-816-555-1212</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">telnet</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//192.0.2.16:80/</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">urn</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">oasis:names:specification:docbook:dtd:xml:4.1.2</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><h3 id=\"S-B客服端与服务器端的交互\"><a href=\"#S-B客服端与服务器端的交互\" class=\"headerlink\" title=\"S-B客服端与服务器端的交互\"></a>S-B客服端与服务器端的交互</h3><p>在两台计算机之间使用 HTTP 协议通信时，在一条通信线路上必定有一端是客户端，另一端则是服务器端。</p>\n<p>HTTP 是不保存状态的协议</p>\n<h3 id=\"请求-响应\"><a href=\"#请求-响应\" class=\"headerlink\" title=\"请求-响应\"></a>请求-响应</h3><p><img src=\"https://images.dadream.eu.org/images/2024/07/4043823659f06850225215b355d26e70.png\"></p>\n<p>请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/5064a6a828ab020f5558b42c2dfbdf58.png\"></p>\n<p>响应报文</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/7931c23a1e3c807e44a4108e514bb99d.png\"></p>\n<p>URI请求</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/84626c79794c0eb39904acbe02811cb4.png\"></p>\n<h3 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h3><h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p>GET ：获取资源<br>GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器 端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保 持原样返回；如果是像 CGI（Common Gateway Interface，通用网关接 口）那样的程序，则返回经过执行后的输出结果。</p>\n<p>请求：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/index.html</span> <span class=\"token http-version property\">HTTP/1.1</span></span> \n\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">www.hackr.jp</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>响应：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">返回  index.html 的页面资源<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h4><p>POST：传输实体主体<br>POST 方法用来传输实体的主体。<br>虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行 传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。</p>\n<p>请求：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">POST</span> <span class=\"token request-target url\">/submit.cgi</span> <span class=\"token http-version property\">HTTP/1.1</span></span> \n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">www.hackr.jp </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1560（1560字节的数据）</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>响应：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">返回  submit.cgi 接收数据的处理结果 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"PUT\"><a href=\"#PUT\" class=\"headerlink\" title=\"PUT\"></a>PUT</h4><p>PUT：传输文件<br>PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请 求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。 </p>\n<p>请求：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">PUT</span> <span class=\"token request-target url\">/example.html</span> <span class=\"token http-version property\">HTTP/1.1</span></span> \n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">www.hackr.jp </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1560（1560 字节的数据</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>响应：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">响应返回状态码  204 No Content（比如  ：该  html 已存在于服务器上） <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"HEAD\"><a href=\"#HEAD\" class=\"headerlink\" title=\"HEAD\"></a>HEAD</h4><p>HEAD：获得报文首部<br>HEAD 方法和  GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。</p>\n<p>请求：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">HEAD</span> <span class=\"token request-target url\">/index.html</span> <span class=\"token http-version property\">HTTP/1.1</span></span> \n\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">www.hackr.jp </span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>响应：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">返回index.html有关的响应首部 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h4><p>DELETE：删除文件<br>DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按 请求 URI 删除指定的资源。</p>\n<p>请求：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">DELETE</span> <span class=\"token request-target url\">/example.html</span> <span class=\"token http-version property\">HTTP/1.1</span></span> \n\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">www.hackr.jp </span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>响应：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">响应返回状态码  204 No Content（比如  ：该  html 已从该服务器上删除） <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"OPTIONS\"><a href=\"#OPTIONS\" class=\"headerlink\" title=\"OPTIONS\"></a>OPTIONS</h4><p>OPTIONS：询问支持的方法<br>OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。 </p>\n<p>请求：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">OPTIONS * HTTP/1.1 \n\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">www.hackr.jp </span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>响应：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">200</span> <span class=\"token reason-phrase string\">OK </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Allow</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">GET, POST, HEAD, OPTIONS （返回服务器支持的方法） </span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"TRACK\"><a href=\"#TRACK\" class=\"headerlink\" title=\"TRACK\"></a>TRACK</h4><p>TRACE：追踪路径<br>TRACE 方法是让  Web 服务器端将之前的请求通信环回给客户端的方 法。<br>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服 务器端就将该数字减 1，当数值刚好减到 0 时，就停止继续传输，最 后接收到请求的服务器端则返回状态码 200 OK 的响应</p>\n<p>请求：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">TRACE</span> <span class=\"token request-target url\">/</span> <span class=\"token http-version property\">HTTP/1.1</span></span> \n\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">hackr.jp </span></span>\n\n<span class=\"token header\"><span class=\"token header-name keyword\">Max-Forwards</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">2 </span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>响应：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">200</span> <span class=\"token reason-phrase string\">OK </span></span>\n\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">message/http </span></span>\n\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1024 </span></span>\n<span class=\"token request-line\"><span class=\"token method property\">TRACE</span> <span class=\"token request-target url\">/</span> <span class=\"token http-version property\">HTTP/1.1</span></span> \n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">hackr.jp </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Max-Forwards</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">2（返回响应包含请求内容） </span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"CONNECT\"><a href=\"#CONNECT\" class=\"headerlink\" title=\"CONNECT\"></a>CONNECT</h4><p>CONNECT：要求用隧道协议连接代理<br>CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协 议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接 层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容 加 密后经网络隧道传输。<br>CONNECT 方法的格式如下所示。 </p>\n<p>CONNECT 代理服务器名:端口号    HTTP版本 </p>\n<p>请求：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">CONNECT proxy.hackr.jp:8080 HTTP/1.1 \n\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">proxy.hackr.jp </span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>响应：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">200</span> <span class=\"token reason-phrase string\">OK（之后进入网络隧道） </span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/bc16fc0bdc1aef2e1d96c95a7305119b.png\"></p>\n<h3 id=\"持久连接\"><a href=\"#持久连接\" class=\"headerlink\" title=\"持久连接\"></a>持久连接</h3><p>持久连接旨在建立 1 次 TCP 连接后进行多次请求和响应的交互</p>\n<h4 id=\"管线化\"><a href=\"#管线化\" class=\"headerlink\" title=\"管线化\"></a>管线化</h4><p>不等待响应，直接发送下一个请求</p>\n<h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><p><img src=\"https://images.dadream.eu.org/images/2024/07/be4b0058f89df48262095fa3817ef763.png\"><img src=\"https://images.dadream.eu.org/images/2024/07/bafece7685c6f5723d0be0b8d9900781.png\"></p>\n<p>请求：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/image/</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">hackr.jp</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cookie</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">sid=1342077140226724</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>响应：</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">200</span> <span class=\"token reason-phrase string\">OK</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Thu, 12 Jul 2012 07:12:20 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Server</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Apache</span></span>\n＜Set-Cookie: sid=1342077140226724; path=/; expires=Wed,\n10-Oct-12 07:12:20 GMT＞\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/plain; charset=UTF-8</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<hr>\n<h2 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文</h2><h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p><img src=\"https://images.dadream.eu.org/images/2024/07/3cc4a6cf42aa0161d3b83ff598b01724.png\"><img src=\"https://images.dadream.eu.org/images/2024/07/3ad6ac069f66bb198aba64a2803ea8ad.png\"></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/42f1143b5ce8261c3255e62dd8e28d32.png\"></p>\n<h3 id=\"压缩传输\"><a href=\"#压缩传输\" class=\"headerlink\" title=\"压缩传输\"></a>压缩传输</h3><p>常用的内容编码有以下几种：<br>gzip（GNU zip）<br>compress（UNIX 系统的标准压缩）<br>deflate（zlib）<br>identity（不进行编码）</p>\n<h3 id=\"分割发送的分块传输编码\"><a href=\"#分割发送的分块传输编码\" class=\"headerlink\" title=\"分割发送的分块传输编码\"></a>分割发送的分块传输编码</h3><p>分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六 进制来标记块的大小，而实体主体的最后一块会使用“0(CR+LF)”来标记。<br>使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编 码前的实体主体。</p>\n<h3 id=\"发送多种数据的多部分对象集合\"><a href=\"#发送多种数据的多部分对象集合\" class=\"headerlink\" title=\"发送多种数据的多部分对象集合\"></a>发送多种数据的多部分对象集合</h3><ul>\n<li><p>multipart/form-data（文件上传时）</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">multipart/form-data; boundary=AaB03x</span></span>\n--AaB03x\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Disposition</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">form-data; name=\"field1\"</span></span>\nJoe Blow\n--AaB03x\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Disposition</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">form-data; name=\"pics\"; filename=\"file1.txt\"</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/plain</span></span>\n<span class=\"token text-plain\">...（file1.txt的数据）...\n--AaB03x--</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>multipart/byteranges</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">206</span> <span class=\"token reason-phrase string\">Partial Content</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Fri, 13 Jul 2012 02:45:26 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Last-Modified</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Fri, 31 Aug 2007 02:02:20 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">multipart/byteranges; boundary=THIS_STRING_SEPARATES</span></span>\n\n--THIS_STRING_SEPARATES\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/pdf</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes 500-999/8000</span></span>\n...（范围指定的数据）...\n\n--THIS_STRING_SEPARATES\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/pdf</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes 7000-7999/8000</span></span>\n...（范围指定的数据）...\n--THIS_STRING_SEPARATES--<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p>使用 boundary 字符串来划分多部分对象集合指明的各类实体。在boundary 字符串指定的各个实体的起始行之前插入“–”标记（例如：–AaB03x、–THIS_STRING_SEPARATES），而在多部分对象集合对应的字符串的最后插入“–”标记（例如：–AaB03x–、–THIS_STRING_SEPARATES–）作为结束。</p>\n<h3 id=\"获取部分内容的范围请求（分段请求）\"><a href=\"#获取部分内容的范围请求（分段请求）\" class=\"headerlink\" title=\"获取部分内容的范围请求（分段请求）\"></a>获取部分内容的范围请求（分段请求）</h3><p><img src=\"https://images.dadream.eu.org/images/2024/07/702457428b380409f065b3cb6853fd08.png\"></p>\n<p>从一开始到  3000 字节和  5000~7000 字节，8000到之后全部的多重范围</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes=-3000, 5000-7000 ,8000-</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"内容协商\"><a href=\"#内容协商\" class=\"headerlink\" title=\"内容协商\"></a>内容协商</h3><p>内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然 后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字 符集、编码方式等作为判断的基准。</p>\n<p>参照头</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">Accept \nAccept-Charset\nAccept-Encoding \nAccept-Language \nContent-Language<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>内容协商技术</p>\n<ul>\n<li>服务器驱动协商</li>\n<li>客户端驱动协商</li>\n<li>透明协商</li>\n</ul>\n<h2 id=\"HTTP返回状态码\"><a href=\"#HTTP返回状态码\" class=\"headerlink\" title=\"HTTP返回状态码\"></a>HTTP返回状态码</h2><h3 id=\"类别\"><a href=\"#类别\" class=\"headerlink\" title=\"类别\"></a>类别</h3><p><img src=\"https://images.dadream.eu.org/images/2024/07/448efd6d806b88b6d8ae97140bafec53.png\"></p>\n<h4 id=\"2XX\"><a href=\"#2XX\" class=\"headerlink\" title=\"2XX\"></a>2XX</h4><p>2XX 的响应结果表明请求被正常处理了</p>\n<h5 id=\"200OK\"><a href=\"#200OK\" class=\"headerlink\" title=\"200OK\"></a>200OK</h5><p>表示从客户端发来的请求在服务器端被正常处理了，get请求回返回实体，head请求返回实体首部</p>\n<h5 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h5><p>该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。（浏览器不更新页面）</p>\n<h5 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206 Partial Content\"></a>206 Partial Content</h5><p>该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</p>\n<h4 id=\"3XX重定向\"><a href=\"#3XX重定向\" class=\"headerlink\" title=\"3XX重定向\"></a>3XX重定向</h4><p>3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p>\n<h5 id=\"301-Moved-Permanently\"><a href=\"#301-Moved-Permanently\" class=\"headerlink\" title=\"301 Moved Permanently\"></a>301 Moved Permanently</h5><p>永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。也就是说，如果已经把资源对应的 URI保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。</p>\n<h5 id=\"302-Found\"><a href=\"#302-Found\" class=\"headerlink\" title=\"302 Found\"></a>302 Found</h5><p>临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。不更新书签，仍保留产生302的url</p>\n<h5 id=\"303-See-Other\"><a href=\"#303-See-Other\" class=\"headerlink\" title=\"303 See Other\"></a>303 See Other</h5><p>该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET方法定向获取请求的资源。例如，post方法请求时，处理结果希望客服端采用get方法获取资源</p>\n<h5 id=\"304-Not-Modified\"><a href=\"#304-Not-Modified\" class=\"headerlink\" title=\"304 Not Modified\"></a>304 Not Modified</h5><p>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。</p>\n<p>附带条件的请求是指采用 GET方法的请求报文中包含 If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since 中任一首部。</p>\n<h5 id=\"307-Temporary-Redirect\"><a href=\"#307-Temporary-Redirect\" class=\"headerlink\" title=\"307 Temporary Redirect\"></a>307 Temporary Redirect</h5><h4 id=\"4XX-客户端错误\"><a href=\"#4XX-客户端错误\" class=\"headerlink\" title=\"4XX 客户端错误\"></a>4XX 客户端错误</h4><p>4XX 的响应结果表明客户端是发生错误的原因所在。</p>\n<h5 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h5><p>该状态码表示请求报文中存在语法错误。修改报文再发送。和200异曲同工</p>\n<h5 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h5><p>该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。</p>\n<p>返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询（challenge）用户信息。</p>\n<p>首次返回一个认证框，再返回就是认证失败</p>\n<h5 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h5><p>该状态码表明对请求资源的访问被服务器拒绝了。</p>\n<h5 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h5><p>该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p>\n<h4 id=\"5XX-服务器错误\"><a href=\"#5XX-服务器错误\" class=\"headerlink\" title=\"5XX 服务器错误\"></a>5XX 服务器错误</h4><p>5XX 的响应结果表明服务器本身发生错误。</p>\n<h5 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h5><p>该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web应用存在的 bug 或某些临时的故障。</p>\n<h5 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h5><p>该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p>\n<h3 id=\"samll-tips\"><a href=\"#samll-tips\" class=\"headerlink\" title=\"samll_tips\"></a>samll_tips</h3><p>不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。</p>\n<h2 id=\"与-HTTP-协作的-Web-服务器\"><a href=\"#与-HTTP-协作的-Web-服务器\" class=\"headerlink\" title=\"与 HTTP 协作的 Web 服务器\"></a>与 HTTP 协作的 Web 服务器</h2><h3 id=\"用单台虚拟主机实现多个域名\"><a href=\"#用单台虚拟主机实现多个域名\" class=\"headerlink\" title=\"用单台虚拟主机实现多个域名\"></a>用单台虚拟主机实现多个域名</h3><p>一台服务器托管了两个域名，<a href=\"http://www.hacker.com,www.hacker2.com,两个域名托管在一个虚拟机,则dns解析后ip相同,两个域名会访问一个ip.在相同的/\">www.hacker.com,www.hacker2.com，两个域名托管在一个虚拟机，则DNS解析后IP相同，两个域名会访问一个IP。在相同的</a> IP 地址下，由于虚拟主机可以寄存多个不同主机名和域名的 Web 网站，因此在发送 HTTP 请求时，必须在 Host 首部内完整指定主机名或域名的 URI。</p>\n<h3 id=\"通信数据转发程序-：代理、网关、隧道\"><a href=\"#通信数据转发程序-：代理、网关、隧道\" class=\"headerlink\" title=\"通信数据转发程序 ：代理、网关、隧道\"></a>通信数据转发程序 ：代理、网关、隧道</h3><h4 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h4><p>代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。</p>\n<p>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变请求 URI，会直接发送给前方持有资源的目标服务器。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/5cb86cda8dff1fbdc1eb32bde62d73c6.png\"></p>\n<p>每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息</p>\n<h5 id=\"代理方法\"><a href=\"#代理方法\" class=\"headerlink\" title=\"代理方法\"></a>代理方法</h5><p>1.缓存代理</p>\n<p>代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。再次收到相同的资源请求就会返回代理上缓存的资源。</p>\n<p>2.透明代理</p>\n<p>转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。</p>\n<h4 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h4><p>网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。</p>\n<p>网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供非 HTTP 协议服务。<br>利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信线路上加密以确保连接的安全。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/1d46d1ae5f16e09805d3e87e506383c5.png\"></p>\n<h4 id=\"隧道\"><a href=\"#隧道\" class=\"headerlink\" title=\"隧道\"></a>隧道</h4><p>隧道是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。</p>\n<p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。<br>隧道本身不会去解析 HTTP 请求。也就是说，请求保持原样中转给之后的服务器。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/1abf8e9495373ad8e481c44cd93d8968.png\"></p>\n<h3 id=\"保存资源的缓存\"><a href=\"#保存资源的缓存\" class=\"headerlink\" title=\"保存资源的缓存\"></a>保存资源的缓存</h3><p>缓存服务器的优势在于利用缓存可避免多次从源服务器转发资源。因此客户端可就近从缓存服务器上获取资源，而源服务器也不必多次处理相同的请求了。</p>\n<h4 id=\"缓存的有效期限\"><a href=\"#缓存的有效期限\" class=\"headerlink\" title=\"缓存的有效期限\"></a>缓存的有效期限</h4><p>即使存在缓存，也会因为客户端的要求、缓存的有效期等因素，向源服务器确认资源的有效性。若判断缓存失效，缓存服务器将会再次从源服务器上获取“新”资源。</p>\n<h4 id=\"客户端的缓存\"><a href=\"#客户端的缓存\" class=\"headerlink\" title=\"客户端的缓存\"></a>客户端的缓存</h4><p>缓存不仅可以存在于缓存服务器内，还可以存在客户端浏览器中。以Internet Explorer 程序为例，把客户端缓存称为临时网络文件（Temporary Internet File）。<br>浏览器缓存如果有效，就不必再向服务器请求相同的资源了，可以直接从本地磁盘内读取。</p>\n<h3 id=\"HTTP-出现之前的协议\"><a href=\"#HTTP-出现之前的协议\" class=\"headerlink\" title=\"HTTP 出现之前的协议\"></a>HTTP 出现之前的协议</h3><ol>\n<li>FTP（File Transfer Protocol）<br>传输文件时使用的协议。</li>\n<li>NNTP（Network News Transfer Protocol）<br>用于 NetNews 电子会议室内传送消息的协议。。</li>\n<li>Archie<br>搜索 anonymous FTP 公开的文件信息的协议。</li>\n<li>WAIS（Wide Area Information Servers）<br>以关键词检索多个数据库使用的协议。</li>\n<li>Gopher<br>查找与互联网连接的计算机内信息的协议。</li>\n</ol>\n<h2 id=\"HTTP-首部\"><a href=\"#HTTP-首部\" class=\"headerlink\" title=\"HTTP 首部\"></a>HTTP 首部</h2><h3 id=\"HTTP-报文首部\"><a href=\"#HTTP-报文首部\" class=\"headerlink\" title=\"HTTP 报文首部\"></a>HTTP 报文首部</h3><p><img src=\"https://images.dadream.eu.org/images/2024/07/cdd775e3a5788d5f6b3083052c3eb339.png\"></p>\n<p>HTTP 协议的请求和响应报文中必定包含 HTTP 首部。首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。</p>\n<h4 id=\"HTTP-请求报文\"><a href=\"#HTTP-请求报文\" class=\"headerlink\" title=\"HTTP 请求报文\"></a>HTTP 请求报文</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/34f0690cdfd988547a148806ba15ffb5.png\"></p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">hackr.jp</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.9,</span></span>\n*/*; q=0.8\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">ja,en-us;q=0.7,en;q=0.3</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">DNT</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">keep-alive</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">If-Modified-Since</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Fri, 31 Aug 2007 02:02:20 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">If-None-Match</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">\"45bae1-16a-46d776ac\"</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">max-age=0</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"HTTP-响应报文\"><a href=\"#HTTP-响应报文\" class=\"headerlink\" title=\"HTTP 响应报文\"></a>HTTP 响应报文</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/d9a94837fa995200e34533dd7640b88c.png\"></p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">304</span> <span class=\"token reason-phrase string\">Not Modified</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Thu, 07 Jun 2012 07:21:36 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Server</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Apache</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">close</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Etag</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">\"45bae1-16a-46d776ac\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"HTTP-首部字段\"><a href=\"#HTTP-首部字段\" class=\"headerlink\" title=\"HTTP 首部字段\"></a>HTTP 首部字段</h3><h4 id=\"HTTP-首部字段传递重要信息\"><a href=\"#HTTP-首部字段传递重要信息\" class=\"headerlink\" title=\"HTTP 首部字段传递重要信息\"></a>HTTP 首部字段传递重要信息</h4><h4 id=\"HTTP-首部字段结构\"><a href=\"#HTTP-首部字段结构\" class=\"headerlink\" title=\"HTTP 首部字段结构\"></a>HTTP 首部字段结构</h4><p>HTTP 首部字段是由首部字段名和字段值构成的</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">首部字段名: 字段值\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Keep-Alive</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">timeout=15, max=100</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>若 <strong>HTTP</strong> 首部字段重复了会如何</p>\n<p> 不同浏览器解析方式不同，有的是解析前面，有的则是解析后面的</p>\n<h4 id=\"4-种-HTTP-首部字段类型\"><a href=\"#4-种-HTTP-首部字段类型\" class=\"headerlink\" title=\"4 种 HTTP 首部字段类型\"></a><strong>4</strong> 种 <strong>HTTP</strong> 首部字段类型</h4><ol>\n<li>通用首部字段（<strong>General</strong> <strong>Header Fields</strong>）</li>\n</ol>\n<p>请求报文和响应报文两方都会使用的首部。</p>\n<ol start=\"2\">\n<li>请求首部字段（<strong>Request Header Fields</strong>）</li>\n</ol>\n<p>从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</p>\n<ol start=\"3\">\n<li>响应首部字段（<strong>Response Header Fields</strong>）</li>\n</ol>\n<p>从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</p>\n<ol start=\"4\">\n<li>实体首部字段（<strong>Entity Header Fields</strong>）</li>\n</ol>\n<p>针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息</p>\n<h4 id=\"HTTP-1-1-首部字段一览\"><a href=\"#HTTP-1-1-首部字段一览\" class=\"headerlink\" title=\"HTTP/1.1 首部字段一览\"></a>HTTP/1.1 首部字段一览</h4><p>RFC2616 中定义的 47 种首部字段</p>\n<h5 id=\"通用首部字段\"><a href=\"#通用首部字段\" class=\"headerlink\" title=\"通用首部字段\"></a>通用首部字段</h5><table>\n<thead>\n<tr>\n<th align=\"left\">首部字段名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Cache-Control</td>\n<td>控制缓存的行为</td>\n</tr>\n<tr>\n<td align=\"left\">Connection</td>\n<td>逐跳首部、连接的管理</td>\n</tr>\n<tr>\n<td align=\"left\">Date</td>\n<td>创建报文的日期时间</td>\n</tr>\n<tr>\n<td align=\"left\">Pragma</td>\n<td>报文指令</td>\n</tr>\n<tr>\n<td align=\"left\">Trailer</td>\n<td>报文末端的首部一览</td>\n</tr>\n<tr>\n<td align=\"left\">Transfer-Encoding</td>\n<td>指定报文主体的传输编码方式</td>\n</tr>\n<tr>\n<td align=\"left\">Upgrade</td>\n<td>升级为其他协议</td>\n</tr>\n<tr>\n<td align=\"left\">Via</td>\n<td>代理服务器的相关信息</td>\n</tr>\n<tr>\n<td align=\"left\">Warning</td>\n<td>错误通知</td>\n</tr>\n</tbody></table>\n<h5 id=\"请求首部字段\"><a href=\"#请求首部字段\" class=\"headerlink\" title=\"请求首部字段\"></a>请求首部字段</h5><table>\n<thead>\n<tr>\n<th>首部字段名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept</td>\n<td>用户代理可处理的媒体类型</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>优先的字符集</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>优先的内容编码</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>优先的语言（自然语言）</td>\n</tr>\n<tr>\n<td>Authorization</td>\n<td>Web认证信息</td>\n</tr>\n<tr>\n<td>Expect</td>\n<td>期待服务器的特定行为</td>\n</tr>\n<tr>\n<td>From</td>\n<td>用户的电子邮箱地址</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>请求资源所在服务器</td>\n</tr>\n<tr>\n<td>If-Match</td>\n<td>比较实体标记（ETag）</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>比较资源的更新时间</td>\n</tr>\n<tr>\n<td>If-None-Match</td>\n<td>比较实体标记（与 If-Match 相反）</td>\n</tr>\n<tr>\n<td>If-Range</td>\n<td>资源未更新时发送实体 Byte 的范围请求</td>\n</tr>\n<tr>\n<td>If-Unmodified-Since</td>\n<td>比较资源的更新时间（与If-Modified-Since相反）</td>\n</tr>\n<tr>\n<td>Max-Forwards</td>\n<td>最大传输逐跳数</td>\n</tr>\n<tr>\n<td>Proxy-Authorization</td>\n<td>代理服务器要求客户端的认证信息</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>实体的字节范围请求</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>对请求中 URI 的原始获取方</td>\n</tr>\n<tr>\n<td>TE</td>\n<td>传输编码的优先级</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>HTTP  客户端程序的信息</td>\n</tr>\n</tbody></table>\n<h5 id=\"响应首部字段\"><a href=\"#响应首部字段\" class=\"headerlink\" title=\"响应首部字段\"></a>响应首部字段</h5><table>\n<thead>\n<tr>\n<th>首部字段名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Accept-Ranges</td>\n<td>是否接受字节范围请求</td>\n</tr>\n<tr>\n<td>Age</td>\n<td>推算资源创建经过时间</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>资源的匹配信息</td>\n</tr>\n<tr>\n<td>Location</td>\n<td>令客户端重定向至指定URI</td>\n</tr>\n<tr>\n<td>Proxy-Authenticate</td>\n<td>代理服务器对客户端的认证信息</td>\n</tr>\n<tr>\n<td>Retry-After</td>\n<td>对再次发起请求的时机要求</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>HTTP服务器的安装信息</td>\n</tr>\n<tr>\n<td>Vary</td>\n<td>代理服务器缓存的管理信息</td>\n</tr>\n<tr>\n<td>WWW-Authenticate</td>\n<td>服务器对客户端的认证信息</td>\n</tr>\n</tbody></table>\n<h5 id=\"实体首部字段\"><a href=\"#实体首部字段\" class=\"headerlink\" title=\"实体首部字段\"></a>实体首部字段</h5><table>\n<thead>\n<tr>\n<th>首部字段名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Allow</td>\n<td>资源可支持的HTTP方法</td>\n</tr>\n<tr>\n<td>Content-Encoding</td>\n<td>实体主体适用的编码方式</td>\n</tr>\n<tr>\n<td>Content-Language</td>\n<td>实体主体的自然语言</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>实体主体的大小（单位：字节）</td>\n</tr>\n<tr>\n<td>Content-Location</td>\n<td>替代对应资源的URI</td>\n</tr>\n<tr>\n<td>Content-MD5</td>\n<td>实体主体的报文摘要</td>\n</tr>\n<tr>\n<td>Content-Range</td>\n<td>实体主体的位置范围</td>\n</tr>\n<tr>\n<td>Content-Type</td>\n<td>实体主体的媒体类型</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>实体主体过期的日期时间</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>资源的最后修改日期时间</td>\n</tr>\n</tbody></table>\n<h4 id=\"非-HTTP-1-1-首部字段\"><a href=\"#非-HTTP-1-1-首部字段\" class=\"headerlink\" title=\"非 HTTP/1.1 首部字段\"></a>非 <strong>HTTP/1.1</strong> 首部字段</h4><p>RFC4229</p>\n<p>Cookie、Set-Cookie 和 Content-Disposition 等</p>\n<h4 id=\"End-to-end-首部和-Hop-by-hop-首部\"><a href=\"#End-to-end-首部和-Hop-by-hop-首部\" class=\"headerlink\" title=\"End-to-end 首部和 Hop-by-hop 首部\"></a><strong>End-to-end</strong> 首部和 <strong>Hop-by-hop</strong> 首部</h4><h5 id=\"端到端首部（End-to-end-Header）\"><a href=\"#端到端首部（End-to-end-Header）\" class=\"headerlink\" title=\"端到端首部（End-to-end Header）\"></a>端到端首部（<strong>End-to-end Header</strong>）</h5><p>分在此类别中的首部会转发给请求 / 响应对应的最终接收目标，且必须保存在由缓存生成的响应中，另外规定它必须被转发。</p>\n<h5 id=\"逐跳首部（Hop-by-hop-Header）\"><a href=\"#逐跳首部（Hop-by-hop-Header）\" class=\"headerlink\" title=\"逐跳首部（Hop-by-hop Header）\"></a>逐跳首部（<strong>Hop-by-hop Header</strong>）</h5><p>分在此类别中的首部只对单次转发有效，会因通过缓存或代理而不再转发。HTTP/1.1 和之后版本中，如果要使用 hop-by-hop 首部，需提供 Connection 首部字段。</p>\n<p>除了一下8种其他全是端到端首部</p>\n<table>\n<thead>\n<tr>\n<th>Connection</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Keep-Alive</td>\n</tr>\n<tr>\n<td><strong>Proxy-Authenticate</strong></td>\n</tr>\n<tr>\n<td><strong>Proxy-Authorization</strong></td>\n</tr>\n<tr>\n<td><strong>Trailer</strong></td>\n</tr>\n<tr>\n<td>TE</td>\n</tr>\n<tr>\n<td><strong>Transfer-Encoding</strong></td>\n</tr>\n<tr>\n<td><strong>Upgrade</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"HTTP-1-1-通用首部字段\"><a href=\"#HTTP-1-1-通用首部字段\" class=\"headerlink\" title=\"HTTP/1.1 通用首部字段\"></a><strong>HTTP/1.1</strong> 通用首部字段</h3><p>通用首部字段是指，请求报文和响应报文双方都会使用的首部。</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a><strong>Cache-Control</strong></h4><p>首部字段 <strong>Cache-Control</strong> 能够控制缓存的行为</p>\n<p>写法<code>Cache-Control: private, max-age=0, no-cache</code></p>\n<h5 id=\"缓存请求指令\"><a href=\"#缓存请求指令\" class=\"headerlink\" title=\"缓存请求指令\"></a>缓存请求指令</h5><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>no-cache</td>\n<td>无</td>\n<td>强制向源服务器再次验证</td>\n</tr>\n<tr>\n<td>no-store</td>\n<td>无</td>\n<td>不缓存请求或响应的任何内容</td>\n</tr>\n<tr>\n<td>max-age  = [ 秒]</td>\n<td>必需</td>\n<td>响应的最大Age值</td>\n</tr>\n<tr>\n<td>max-stale( = [ 秒])</td>\n<td>可省略</td>\n<td>接收已过期的响应</td>\n</tr>\n<tr>\n<td>min-fresh  = [ 秒]</td>\n<td>必需</td>\n<td>期望在指定时间内的响应仍有效</td>\n</tr>\n<tr>\n<td>no-transform</td>\n<td>无</td>\n<td>代理不可更改媒体类型</td>\n</tr>\n<tr>\n<td>only-if-cached</td>\n<td>无</td>\n<td>从缓存获取资源</td>\n</tr>\n<tr>\n<td>cache-extension</td>\n<td>-</td>\n<td>新指令标记（token）</td>\n</tr>\n</tbody></table>\n<h5 id=\"缓存响应指令\"><a href=\"#缓存响应指令\" class=\"headerlink\" title=\"缓存响应指令\"></a>缓存响应指令</h5><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public</td>\n<td>无</td>\n<td>可向任意方提供响应的缓存</td>\n</tr>\n<tr>\n<td>private</td>\n<td>可省略</td>\n<td>仅向特定用户返回响应</td>\n</tr>\n<tr>\n<td>no-cache</td>\n<td>可省略</td>\n<td>缓存前必须先确认其有效性</td>\n</tr>\n<tr>\n<td>no-store</td>\n<td>无</td>\n<td>不缓存请求或响应的任何内容</td>\n</tr>\n<tr>\n<td>no-transform</td>\n<td>无</td>\n<td>代理不可更改媒体类型</td>\n</tr>\n<tr>\n<td>must-revalidate</td>\n<td>无</td>\n<td>可缓存但必须再向源服务器进行确认</td>\n</tr>\n<tr>\n<td>proxy-revalidate</td>\n<td>无</td>\n<td>要求中间缓存服务器对缓存的响应有效性再进行确认</td>\n</tr>\n<tr>\n<td>max-age = [ 秒]</td>\n<td>必需</td>\n<td>响应的最大Age值</td>\n</tr>\n<tr>\n<td>s-maxage  = [ 秒]</td>\n<td>必需</td>\n<td>公共缓存服务器响应的最大Age值</td>\n</tr>\n<tr>\n<td>cache-extension</td>\n<td>-</td>\n<td>新指令标记（token）</td>\n</tr>\n</tbody></table>\n<h5 id=\"表示是否能缓存的指令\"><a href=\"#表示是否能缓存的指令\" class=\"headerlink\" title=\"表示是否能缓存的指令\"></a>表示是否能缓存的指令</h5><ul>\n<li><p><code>Cache-Control: public</code></p>\n<p>当指定使用 public 指令时，则明确表明其他用户也可利用缓存。</p>\n</li>\n<li><p><code>Cache-Control: private</code></p>\n<p>当指定 private 指令后，响应只以特定的用户作为对象，这与 public指令的行为相反。</p>\n<p>缓存服务器会对该特定用户提供资源缓存的服务，对于其他用户发送过来的请求，代理服务器则不会返回缓存。</p>\n</li>\n<li><p><code>Cache-Control: no-cache</code></p>\n<p>使用 no-cache 指令的目的是为了防止从缓存中返回过期的资源。 </p>\n<p>客户端发送的请求中如果包含 no-cache 指令，则表示客户端将不会接收缓存过的响应。于是，“中间”的缓存服务器必须把客户端请求转发给源服务器。中间缓存服务器不缓存，相当于隧道不对报文做文章。</p>\n</li>\n</ul>\n<ul>\n<li><p><code>Cache-Control: no-cache=Location</code></p>\n<p>由服务器返回的响应中，若报文首部字段 Cache-Control 中对 no-cache 字段名具体指定参数值，那么客户端在接收到这个被指定参数值的首部字段对应的响应报文后，就不能使用缓存。换言之，无参数值的首部字段可以使用缓存。只能在响应指令中指定该参数。</p>\n</li>\n</ul>\n<h5 id=\"控制可执行缓存的对象的指令\"><a href=\"#控制可执行缓存的对象的指令\" class=\"headerlink\" title=\"控制可执行缓存的对象的指令\"></a>控制可执行缓存的对象的指令</h5><ul>\n<li><p><code>Cache-Control: no-store</code></p>\n<p>当使用 no-store 指令时，暗示请求（和对应的响应）或响应中包含机密信息。</p>\n<p>该指令规定缓存不能在本地存储请求或响应的任一部分。</p>\n</li>\n</ul>\n<h5 id=\"指定缓存期限和认证的指令\"><a href=\"#指定缓存期限和认证的指令\" class=\"headerlink\" title=\"指定缓存期限和认证的指令\"></a>指定缓存期限和认证的指令</h5><ul>\n<li><p><code>Cache-Control: s-maxage=604800（单位 ：秒）</code></p>\n<p>s-maxage 指令的功能和 max-age 指令的相同，它们的不同点是 s- maxage 指令只适用于供多位用户使用的公共缓存服务器 。也就是说，对于向同一用户重复返回响应的服务器来说，这个指令没有任何作用。</p>\n<p>当使用 s-maxage 指令后，则直接忽略对 Expires 首部字段及max-age 指令的处理。</p>\n</li>\n<li><p><code>Cache-Control: max-age=604800（单位：秒）</code></p>\n<p>当客户端发送的请求中包含 max-age 指令时，如果判定缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。另外，当指定 max-age 值为 0，那么缓存服务器通常需要将请求转发给源服务器。</p>\n<p>当服务器返回的响应中包含 max-age 指令时，缓存服务器将不对资源的有效性再作确认，而 max-age 数值代表资源保存为缓存的最长时间。</p>\n<p>应用 HTTP/1.1 版本的缓存服务器遇到同时存在 Expires 首部字段的情况时，会优先处理 max-age 指令，而忽略掉 Expires 首部字段。而HTTP/1.0 版本的缓存服务器的情况却相反，max-age 指令会被忽略掉。</p>\n</li>\n<li><p><code>Cache-Control: min-fresh=60（单位：秒）</code></p>\n<p>min-fresh 指令要求缓存服务器返回至少还未过指定时间的缓存资源。</p>\n</li>\n<li><p><code>Cache-Control: max-stale=3600（单位：秒）</code></p>\n<p>使用 max-stale 可指示缓存资源，即使过期也照常接收。</p>\n<p>如果指令未指定参数值，那么无论经过多久，客户端都会接收响应； 如果指令中指定了具体数值，那么即使过期，只要仍处于 max-stale 指定的时间内，仍旧会被客户端接收。</p>\n</li>\n<li><p><code>Cache-Control: only-if-cached</code></p>\n<p>使用 only-if-cached 指令表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回。换言之，该指令要求缓存服务器不重新加载响应，也不会再次确认资源有效性。若发生请求缓存服务器的本地缓存无响应，则返回状态码 504 Gateway Timeout。</p>\n</li>\n<li><p><code>Cache-Control: must-revalidate</code></p>\n<p>使用 must-revalidate 指令，代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效。</p>\n<p>若代理无法连通源服务器再次获取有效资源的话，缓存必须给客户端一条 504（Gateway Timeout）状态码。</p>\n<p>另外，使用 must-revalidate 指令会忽略请求的 max-stale 指令（即使已经在首部使用了 max-stale，也不会再有效果）。</p>\n</li>\n<li><p><code>Cache-Control: proxy-revalidate</code></p>\n<p>proxy-revalidate 指令要求所有的缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性。</p>\n</li>\n<li><p><code>Cache-Control: no-transform</code></p>\n<p>使用 no-transform 指令规定无论是在请求还是响应中，缓存都不能改变实体主体的媒体类型。</p>\n<p>这样做可防止缓存或代理压缩图片等类似操作。</p>\n</li>\n</ul>\n<h5 id=\"Cache-Control-扩展\"><a href=\"#Cache-Control-扩展\" class=\"headerlink\" title=\"Cache-Control 扩展\"></a>Cache-Control 扩展</h5><p><code>Cache-Control: private, community=\"UCI\"</code></p>\n<p>通过 cache-extension 标记（token），可以扩展 Cache-Control 首部字段内的指令。</p>\n<p>如上例，Cache-Control 首部字段本身没有 community 这个指令。借助extension tokens 实现了该指令的添加。如果缓存服务器不能理解community 这个新指令，就会直接忽略。因此，extension tokens 仅对能理解它的缓存服务器来说是有意义的。</p>\n<h4 id=\"Connection\"><a href=\"#Connection\" class=\"headerlink\" title=\"Connection\"></a>Connection</h4><h5 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h5><ul>\n<li><p>控制不再转发给代理的首部字段<code>Connection: 不再转发的首部字段名</code></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/f6aa486e881b027e5f4c0eae92b1bf92.png\"></p>\n</li>\n<li><p>管理持久连接</p>\n<p>HTTP/1.1 之前的 HTTP 版本的默认连接都是非持久连接。为此，如果想在旧版本的 HTTP 协议上维持持续连接，则需要指定Connection 首部字段的值为 Keep-Alive。<code>Connection: Keep-Alive</code></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/fa4c471298769a15944259a15361652e.png\"></p>\n<p>HTTP/1.1 版本的默认连接都是持久连接。为此，客户端会在持久连接上连续发送请求。当服务器端想明确断开连接时，则指定Connection 首部字段的值为 Close。<code>Connection: close</code></p>\n</li>\n</ul>\n<h4 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h4><p>首部字段 Date 表明创建 HTTP 报文的日期和时间。</p>\n<ul>\n<li><p>HTTP/1.1 协议使用在 RFC1123 中规定的日期时间的格式</p>\n<p><code>Date: Tue, 03 Jul 2012 04:40:59 GMT</code></p>\n</li>\n<li><p>之前的 HTTP 协议版本中使用在 RFC850 中定义的格式</p>\n<p><code>Date: Tue, 03-Jul-12 04:40:59 GMT</code></p>\n</li>\n<li><p>C 标准库内的 asctime() 函数的输出格式</p>\n<p><code>Date: Tue Jul 03 04:40:59 2012</code></p>\n</li>\n</ul>\n<h4 id=\"Pragma\"><a href=\"#Pragma\" class=\"headerlink\" title=\"Pragma\"></a>Pragma</h4><p>Pragma 是 HTTP/1.1 之前版本的历史遗留字段，仅作为与 HTTP/1.0的向后兼容而定义。相当于HTTP/1.1之后Cache-Control</p>\n<p><code>Pragma: no-cache</code></p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">no-cache </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Pragma</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">no-cache</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>通常一起用，因为你不能掌握全部中间服务器</p>\n<h4 id=\"Trailer\"><a href=\"#Trailer\" class=\"headerlink\" title=\"Trailer\"></a>Trailer</h4><p>首部字段 Trailer 会事先说明在报文主体后记录了哪些首部字段。该首部字段可应用在 HTTP/1.1 版本分块传输编码时。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">200</span> <span class=\"token reason-phrase string\">OK</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Tue, 03 Jul 2012 04:40:56 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html</span></span>\n<span class=\"token text-html\">...\nTransfer-Encoding: chunked\nTrailer: Expires\n\n...(报文主体)... 0\nExpires: Tue, 28 Sep 2004 23:59:59 GMT</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上用例中，指定首部字段 Trailer 的值为 Expires，在报文主体之后（分块长度 0 之后）出现了首部字段 Expires。</p>\n<h4 id=\"Transfer-Encoding\"><a href=\"#Transfer-Encoding\" class=\"headerlink\" title=\"Transfer-Encoding\"></a>Transfer-Encoding</h4><p>首部字段 Transfer-Encoding 规定了传输报文主体时采用的编码方式。</p>\n<p>HTTP/1.1 的传输编码方式仅对分块传输编码有效。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">200</span> <span class=\"token reason-phrase string\">OK</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Date</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Tue, 03 Jul 2012 04:40:56 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">public, max-age=604800 </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/javascript; charset=utf-8 </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Expires</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Tue, 10 Jul 2012 04:40:56 GMT</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">X-Frame-Options</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">DENY</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">X-XSS-Protection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1; mode=block </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Transfer-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">chunked </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">keep-alive</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Upgrade\"><a href=\"#Upgrade\" class=\"headerlink\" title=\"Upgrade\"></a>Upgrade</h4><p>首部字段 Upgrade 用于检测 HTTP 协议及其他协议是否可使用更高的版本进行通信，其参数值可以用来指定一个完全不同的通信协议。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/c345255e4e1f7c71755193f3e9157b21.png\"></p>\n<p>上图用例中，首部字段 Upgrade 指定的值为 TLS/1.0。请注意此处两个字段首部字段的对应关系，Connection 的值被指定为 Upgrade。Upgrade 首部字段产生作用的 Upgrade 对象仅限于客户端和邻接服务器之间。因此，使用首部字段 Upgrade 时，还需要额外指定Connection:Upgrade。</p>\n<p>对于附有首部字段 Upgrade 的请求，服务器可用 101 Switching Protocols 状态码作为响应返回。</p>\n<h4 id=\"Via\"><a href=\"#Via\" class=\"headerlink\" title=\"Via\"></a>Via</h4><p>使用首部字段 Via 是为了追踪客户端与服务器之间的请求和响应报文的传输路径。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/eb53ad7d905d8029eca3b989b9348508.png\"></p>\n<p>首部字段 Via 不仅用于追踪报文的转发，还可避免请求回环的发生。所以必须在经过代理时附加该首部字段内容。</p>\n<p>1.0是指代理服务器的HTTP版本</p>\n<h4 id=\"Warning\"><a href=\"#Warning\" class=\"headerlink\" title=\"Warning\"></a>Warning</h4><p>HTTP/1.1 的 Warning 首部是从 HTTP/1.0 的响应首部（Retry-After）演变过来的。该首部通常会告知用户一些与缓存相关的问题的警告。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Warning</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">[警告码][警告的主机:端口号]“[警告内容]”([日期时间])</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Warning</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">113 gw.hackr.jp:8080 \"Heuristic expiration\" Tue, 03</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h5 id=\"HTTP-1-1-警告码\"><a href=\"#HTTP-1-1-警告码\" class=\"headerlink\" title=\"HTTP/1.1 警告码\"></a><strong>HTTP/1.1</strong> 警告码</h5><table>\n<thead>\n<tr>\n<th>警告码</th>\n<th>警告内容</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>110</td>\n<td>Response  is stale（响应已过期）</td>\n<td>代理返回已过期的资源</td>\n</tr>\n<tr>\n<td>111</td>\n<td>Revalidation  failed（再验证失败）</td>\n<td>代理再验证资源有效性时失败（服务器无法到达等原因）</td>\n</tr>\n<tr>\n<td>112</td>\n<td>Disconnection operation（断开连接操作）</td>\n<td>代理与互联网连接被故意切断</td>\n</tr>\n<tr>\n<td>113</td>\n<td>Heuristic  expiration（试探性过期）</td>\n<td>响应的使用期超过24小时（有效缓存的设定时间大于24小时的情况下）</td>\n</tr>\n<tr>\n<td>199</td>\n<td>Miscellaneous  warning（杂项警告）</td>\n<td>任意的警告内容</td>\n</tr>\n<tr>\n<td>214</td>\n<td>Transformation  applied（使用了转换）</td>\n<td>代理对内容编码或媒体类型等执行了某些处理时</td>\n</tr>\n<tr>\n<td>299</td>\n<td>Miscellaneous persistent  warning（持久杂项警告）</td>\n<td>任意的警告内容</td>\n</tr>\n</tbody></table>\n<h3 id=\"请求首部字段-1\"><a href=\"#请求首部字段-1\" class=\"headerlink\" title=\"请求首部字段\"></a>请求首部字段</h3><p>请求首部字段是从客户端往服务器端发送请求报文中所使用的字段， 用于补充请求的附加信息、客户端信息、对响应内容相关的优先级等内容。</p>\n<h4 id=\"Accept\"><a href=\"#Accept\" class=\"headerlink\" title=\"Accept\"></a>Accept</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/28a3ddf597307b46dbfd4f5fcaa59bc6.png\"></p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.1</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>文本文件</p>\n<p>text/html, text/plain, text/css … </p>\n<p>application/xhtml+xml, application/xml …</p>\n</li>\n<li><p>图片文件</p>\n<p>image/jpeg, image/gif, image/png …</p>\n</li>\n<li><p>视频文件</p>\n<p>video/mpeg, video/quicktime …</p>\n</li>\n<li><p>应用程序使用的二进制文件</p>\n<p>application/octet-stream, application/zip …</p>\n</li>\n</ul>\n<p>比如，如果浏览器不支持 PNG 图片的显示，那 Accept 就不指定image/png，而指定可处理的 image/gif 和 image/jpeg 等图片类型。</p>\n<p>若想要给显示的媒体类型增加优先级，则使用 q= 来额外表示权重值1，用分（;）进行分隔。权重值 q 的范围是 0~1（可精确到小数点后 3 位），且 1 为最大值。不指定权重 q 值时，默认权重为 q=1.0。</p>\n<h4 id=\"Accept-Charset\"><a href=\"#Accept-Charset\" class=\"headerlink\" title=\"Accept-Charset\"></a>Accept-Charset</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/c4e11a52cebd529f557a2167802d9ffc.png\"></p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Charset</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">iso-8859-5, unicode-1-1;q=0.8</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"Accept-Encoding\"><a href=\"#Accept-Encoding\" class=\"headerlink\" title=\"Accept-Encoding\"></a>Accept-Encoding</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Accept-Encoding 首部字段用来告知服务器用户代理支持的内容编码及内容编码的优先级顺序。可一次性指定多种内容编码。</p>\n<ul>\n<li>gzip</li>\n<li>compress</li>\n<li>deflate</li>\n<li>identity</li>\n</ul>\n<p>也能使用权重q，使用<code>*</code>作为通配符</p>\n<h4 id=\"Accept-Language\"><a href=\"#Accept-Language\" class=\"headerlink\" title=\"Accept-Language\"></a>Accept-Language</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">zh-cn,zh;q=0.7,en-us,en;q=0.3</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Accept-Language 用来告知服务器用户代理能够处理的自然语言集（指中文或英文等），以及自然语言集的相对优先级。可一次指定多种自然语言集。</p>\n<h4 id=\"Authorization\"><a href=\"#Authorization\" class=\"headerlink\" title=\"Authorization\"></a>Authorization</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/b03ee40399dfa19fd529932d4b425bf2.png\"></p>\n<p>首部字段 Authorization 是用来告知服务器，用户代理的认证信息（证书值）。通常，想要通过服务器认证的用户代理会在接收到返回的401 状态码响应后，把首部字段 Authorization 加入请求中。共用缓存在接收到含有 Authorization 首部字段的请求时的操作处理会略有差异。</p>\n<h4 id=\"Expect\"><a href=\"#Expect\" class=\"headerlink\" title=\"Expect\"></a>Expect</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/505b2dc20140f2229009f7b1d50c6003.png\"></p>\n<p>客户端使用首部字段 Expect 来告知服务器，期望出现的某种特定行为。因服务器无法理解客户端的期望作出回应而发生错误时，会返回状态码 417 Expectation Failed。</p>\n<p>客户端可以利用该首部字段，写明所期望的扩展。</p>\n<h4 id=\"From\"><a href=\"#From\" class=\"headerlink\" title=\"From\"></a>From</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/7eab6c8381ea2f0dfc218ee7b8bd0917.png\"></p>\n<p>首部字段 From 用来告知服务器使用用户代理的用户的电子邮件地址。通常，其使用目的就是为了显示搜索引擎等用户代理的负责人的电子邮件联系方式。使用代理时，应尽可能包含 From 首部字段（但可能会因代理不同，将电子邮件地址记录在 User-Agent 首部字段内）。</p>\n<h4 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">www.hackr.jp</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Host 会告知服务器，请求的资源所处的互联网主机名和端口号。Host 首部字段在 HTTP/1.1 规范内是唯一一个必须被包含在请求内的首部字段。</p>\n<p>虚拟主机运行在同一个 <strong>IP</strong> 上，因此使用首部字段 <strong>Host</strong> 加以区分</p>\n<p>若服务器未设定主机名，那直接发送一个空值即可。</p>\n<h4 id=\"If-XXX\"><a href=\"#If-XXX\" class=\"headerlink\" title=\"If-XXX\"></a>If-XXX</h4><p>形如 If-xxx 这种样式的请求首部字段，都可称为条件请求。服务器接收到附带条件的请求后，只有判断指定条件为真时，才会执行请求。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/882524fadb21c8271d082b988d4bc4fe.png\"></p>\n<h4 id=\"If-Match\"><a href=\"#If-Match\" class=\"headerlink\" title=\"If-Match\"></a>If-Match</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">If-Match</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">\"123456\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 If-Match，属附带条件之一，它会告知服务器匹配资源所用的实体标记（ETag）值。</p>\n<p>服务器会比对 If-Match 的字段值和资源的 ETag 值，仅当两者一致时，才会执行请求。反之，则返回状态码 412 Precondition Failed 的响应。</p>\n<p>通配符<code>*</code>跳过匹配</p>\n<h4 id=\"If-Modified-Since\"><a href=\"#If-Modified-Since\" class=\"headerlink\" title=\"If-Modified-Since\"></a>If-Modified-Since</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">If-Modified-Since</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Thu, 15 Apr 2004 00:00:00 GMT</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 If-Modified-Since，属附带条件之一，它会告知服务器若 If- Modified-Since 字段值早于资源的更新时间，则希望能处理该请求。而在指定 If-Modified-Since 字段值的日期时间之后，如果请求的资源都没有过更新，则返回状态码 304 Not Modified 的响应。</p>\n<p>If-Modified-Since 用于确认代理或客户端拥有的本地资源的有效性。获取资源的更新日期时间，可通过确认首部字段 Last-Modified 来确定。</p>\n<h4 id=\"If-None-Match\"><a href=\"#If-None-Match\" class=\"headerlink\" title=\"If-None-Match\"></a>If-None-Match</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/7443e192d3075d7a42155c0632ce4c06.png\"></p>\n<p>它和首部字段 If-Match 作用相反。</p>\n<p>在 GET 或 HEAD 方法中使用首部字段 If-None-Match 可获取最新的资源。因此，这与使用首部字段 If-Modified-Since 时有些类似。</p>\n<h4 id=\"If-Range\"><a href=\"#If-Range\" class=\"headerlink\" title=\"If-Range\"></a>If-Range</h4><p>首部字段 If-Range 属于附带条件之一。它告知服务器若指定的 If- Range 字段值（ETag 值或者时间）和请求资源的 ETag 值或时间相一致时，则作为范围请求处理。反之，则返回全体资源。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/9e0a6505cd35db6f7beb949d933106cc.png\"></p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/d82cef8fcce80a19ce1cbcbc522d76b8.png\"></p>\n<h4 id=\"If-Unmodified-Since\"><a href=\"#If-Unmodified-Since\" class=\"headerlink\" title=\"If-Unmodified-Since\"></a>If-Unmodified-Since</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">If-Unmodified-Since</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Thu, 03 Jul 2012 00:00:00 GMT</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 If-Unmodified-Since 和首部字段 If-Modified-Since 的作用相反。它的作用的是告知服务器，指定的请求资源只有在字段值内指定的日期时间之后，未发生更新的情况下，才能处理请求。如果在指定日期时间后发生了更新，则以状态码 412 Precondition Failed 作为响应返回。</p>\n<h4 id=\"Max-Forwards\"><a href=\"#Max-Forwards\" class=\"headerlink\" title=\"Max-Forwards\"></a>Max-Forwards</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/58c2400eb309d5ef98d5a565925de4b3.png\"></p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Max-Forwards</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">10</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>每次转发数值减 <strong>1</strong>。当数值变 <strong>0</strong> 时返回响应</p>\n<p>通过 TRACE 方法或 OPTIONS 方法，发送包含首部字段 Max- Forwards 的请求时，该字段以十进制整数形式指定可经过的服务器最大数目。</p>\n<h4 id=\"Proxy-Authorization\"><a href=\"#Proxy-Authorization\" class=\"headerlink\" title=\"Proxy-Authorization\"></a>Proxy-Authorization</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Proxy-Authorization</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Basic dGlwOjkpNLAGfFY5</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>接收到从代理服务器发来的认证质询时，客户端会发送包含首部字段Proxy-Authorization 的请求，以告知服务器认证所需要的信息。</p>\n<h4 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes=5001-10000</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对于只需获取部分资源的范围请求，包含首部字段 Range 即可告知服务器资源的指定范围。上面的示例表示请求获取从第 5001 字节至第10000 字节的资源。</p>\n<p>接收到附带 Range 首部字段请求的服务器，会在处理请求之后返回状态码为 206 Partial Content 的响应。无法处理该范围请求时，则会返回状态码 200 OK 的响应及全部资源。</p>\n<h4 id=\"Referer\"><a href=\"#Referer\" class=\"headerlink\" title=\"Referer\"></a>Referer</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Referer</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">http://www.hackr.jp/index.htm</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Referer 会告知服务器请求的原始资源的 URI。</p>\n<h4 id=\"TE\"><a href=\"#TE\" class=\"headerlink\" title=\"TE\"></a>TE</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">TE</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate;q=0.5</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 TE 会告知服务器客户端能够处理响应的传输编码方式及相对优先级。它和首部字段 Accept-Encoding 的功能很相像，但是用于传输编码。</p>\n<p>首部字段 TE 除指定传输编码之外，还可以指定伴随 trailer 字段的分块传输编码的方式。应用后者时，只需把 trailers 赋值给该字段值。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">TE</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">trailers</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"User-Agent\"><a href=\"#User-Agent\" class=\"headerlink\" title=\"User-Agent\"></a>User-Agent</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gec</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 User-Agent 会将创建请求的浏览器和用户代理名称等信息传达给服务器。</p>\n<h3 id=\"响应首部字段-1\"><a href=\"#响应首部字段-1\" class=\"headerlink\" title=\"响应首部字段\"></a>响应首部字段</h3><p>响应首部字段是由服务器端向客户端返回响应报文中所使用的字段， 用于补充响应的附加信息、服务器信息，以及对客户端的附加要求等信息。</p>\n<h4 id=\"Accept-Ranges\"><a href=\"#Accept-Ranges\" class=\"headerlink\" title=\"Accept-Ranges\"></a>Accept-Ranges</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Ranges</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Accept-Ranges 是用来告知客户端服务器是否能处理范围请求，以指定获取服务器端某个部分的资源。</p>\n<p>可指定的字段值有两种，可处理范围请求时指定其为 bytes，反之则指定其为 none。</p>\n<h4 id=\"Age\"><a href=\"#Age\" class=\"headerlink\" title=\"Age\"></a>Age</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Age</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">600</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Age 能告知客户端，源服务器在多久前创建了响应。字段值的单位为秒。</p>\n<p>若创建该响应的服务器是缓存服务器，Age 值是指缓存后的响应再次发起认证到认证完成的时间值。代理创建响应时必须加上首部字段Age。</p>\n<h4 id=\"ETag\"><a href=\"#ETag\" class=\"headerlink\" title=\"ETag\"></a>ETag</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">ETag</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">\"82e22293907ce725faf67773957acd12\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/0e9a820ce5a8a8b4b440975ba2efbed4.png\"></p>\n<p>仅仅是由服务器来分配。</p>\n<h5 id=\"强-ETag-值\"><a href=\"#强-ETag-值\" class=\"headerlink\" title=\"强 ETag 值\"></a>强 <strong>ETag</strong> 值</h5><p>强 ETag 值，不论实体发生多么细微的变化都会改变其值。</p>\n<p><code>ETag: \"usagi-1234\"</code></p>\n<h5 id=\"弱-ETag-值\"><a href=\"#弱-ETag-值\" class=\"headerlink\" title=\"弱 ETag 值\"></a>弱 <strong>ETag</strong> 值</h5><p>弱 ETag 值只用于提示资源是否相同。只有资源发生了根本改变，产生差异时才会改变 ETag 值。这时，会在字段值最开始处附加 W/。</p>\n<p><code>ETag: W/\"usagi-1234\"</code></p>\n<h4 id=\"Location\"><a href=\"#Location\" class=\"headerlink\" title=\"Location\"></a>Location</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/d427319a2e408e1a28ec464f7a19eb32.png\"></p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Location</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">http://www.usagidesign.jp/sample.html</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用首部字段 Location 可以将响应接收方引导至某个与请求 URI 位置不同的资源。</p>\n<p>基本上，该字段会配合 3xx ：Redirection 的响应，提供重定向的URI。</p>\n<h4 id=\"Proxy-Authenticate\"><a href=\"#Proxy-Authenticate\" class=\"headerlink\" title=\"Proxy-Authenticate\"></a>Proxy-Authenticate</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Proxy-Authenticate</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Basic realm=\"Usagidesign Auth\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Proxy-Authenticate 会把由代理服务器所要求的认证信息发送给客户端。</p>\n<h4 id=\"Retry-After\"><a href=\"#Retry-After\" class=\"headerlink\" title=\"Retry-After\"></a>Retry-After</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Retry-After</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">120</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Retry-After 告知客户端应该在多久之后再次发送请求。主要配合状态码 503 Service Unavailable 响应，或 3xx Redirect 响应一起使用。</p>\n<p>字段值可以指定为具体的日期时间（Wed, 04 Jul 2012 06：34：24 GMT 等格式），也可以是创建响应后的秒数。</p>\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Server</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Apache/2.2.6 (Unix) PHP/5.2.5</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Server 告知客户端当前服务器上安装的 HTTP 服务器应用程序的信息。不单单会标出服务器上的软件应用名称，还有可能包括版本号和安装时启用的可选项。</p>\n<h4 id=\"Vary\"><a href=\"#Vary\" class=\"headerlink\" title=\"Vary\"></a>Vary</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Vary</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Accept-Language</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>从代理服务器接收到源服务器返回包含 Vary 指定项的响应之后，若再要进行缓存，仅对请求中含有相同 Vary 指定首部字段的请求返回缓存。即使对相同资源发起请求，但由于 Vary 指定的首部字段不相同，因此必须要从源服务器重新获取资源。</p>\n<h4 id=\"WWW-Authenticate\"><a href=\"#WWW-Authenticate\" class=\"headerlink\" title=\"WWW-Authenticate\"></a>WWW-Authenticate</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">WWW-Authenticate</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Basic realm=\"Usagidesign Auth\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 WWW-Authenticate 用于 HTTP 访问认证。它会告知客户端适用于访问请求 URI 所指定资源的认证方案（Basic 或是 Digest）和带参数提示的质询（challenge）。状态码 401 Unauthorized 响应中， 肯定带有首部字段 WWW-Authenticate。</p>\n<h3 id=\"实体首部字段-1\"><a href=\"#实体首部字段-1\" class=\"headerlink\" title=\"实体首部字段\"></a>实体首部字段</h3><p>实体首部字段是包含在请求报文和响应报文中的实体部分所使用的首部，用于补充内容的更新时间等与实体相关的信息。</p>\n<h4 id=\"Alow\"><a href=\"#Alow\" class=\"headerlink\" title=\"Alow\"></a>Alow</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Allow</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">GET, HEAD</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Allow 用于通知客户端能够支持 Request-URI 指定资源的所有 HTTP 方法。当服务器接收到不支持的 HTTP 方法时，会以状态码405 Method Not Allowed 作为响应返回。与此同时，还会把所有能支持的 HTTP 方法写入首部字段 Allow 后返回。</p>\n<h4 id=\"Content-Encoding\"><a href=\"#Content-Encoding\" class=\"headerlink\" title=\"Content-Encoding\"></a>Content-Encoding</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Content-Encoding 会告知客户端服务器对实体的主体部分选用的内容编码方式。内容编码是指在不丢失实体信息的前提下所进行的压缩。</p>\n<ul>\n<li>gzip</li>\n<li>compress</li>\n<li>deflate</li>\n<li>identity</li>\n</ul>\n<h4 id=\"Content-Languag\"><a href=\"#Content-Languag\" class=\"headerlink\" title=\"Content-Languag\"></a>Content-Languag</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">zh-CN</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Content-Language 会告知客户端，实体主体使用的自然语言（指中文或英文等语言）。</p>\n<h4 id=\"Content-Length\"><a href=\"#Content-Length\" class=\"headerlink\" title=\"Content-Length\"></a>Content-Length</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">15000</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Content-Length 表明了实体主体的大小（单位是字节）。对实体主体进行内容编码传输时，不能再使用 Content-Length 首部字段。</p>\n<h4 id=\"Content-Location\"><a href=\"#Content-Location\" class=\"headerlink\" title=\"Content-Location\"></a>Content-Location</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Location</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">http://www.hackr.jp/index-ja.html</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Content-Location 给出与报文主体部分相对应的 URI。和首部字段Location 不同，Content-Location 表示的是报文主体返回资源对应的 URI。</p>\n<p>比如，对于使用首部字段 Accept-Language 的服务器驱动型请求，当返回的页面内容与实际请求的对象不同时，首部字段 Content-Location 内会写明 URI。</p>\n<h4 id=\"Content-MD5\"><a href=\"#Content-MD5\" class=\"headerlink\" title=\"Content-MD5\"></a>Content-MD5</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-MD5</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">OGFkZDUwNGVhNGY3N2MxMDIwZmQ4NTBmY2IyTY==</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/cae670c7d7ca3bf6ff620ed7cf4fafe2.png\"></p>\n<p>首部字段 Content-MD5 是一串由 MD5 算法生成的值，其目的在于检查报文主体在传输过程中是否保持完整，以及确认传输到达。</p>\n<p>对报文主体执行 MD5 算法获得的 128 位二进制数，再通过 Base64 编码后将结果写入 Content-MD5 字段值。由于 HTTP 首部无法记录二进制值，所以要通过 Base64 编码处理。为确保报文的有效性，作为接收方的客户端会对报文主体再执行一次相同的 MD5 算法。计算出的值与字段值作比较后，即可判断出报文主体的准确性。</p>\n<h4 id=\"Content-Range\"><a href=\"#Content-Range\" class=\"headerlink\" title=\"Content-Range\"></a>Content-Range</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Range</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">bytes 5001-10000/10000</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>针对范围请求，返回响应时使用的首部字段 Content-Range，能告知客户端作为响应返回的实体的哪个部分符合范围请求。字段值以字节为单位，表示当前发送部分及整个实体大小。</p>\n<h4 id=\"Content-Type\"><a href=\"#Content-Type\" class=\"headerlink\" title=\"Content-Type\"></a>Content-Type</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html; charset=UTF-8</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Content-Type 说明了实体主体内对象的媒体类型。和首部字段 Accept 一样，字段值用 type/subtype 形式赋值。</p>\n<h4 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Expires</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Wed, 04 Jul 2012 08:26:05 GMT</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Expires 会将资源失效的日期告知客户端。缓存服务器在接收到含有首部字段 Expires 的响应后，会以缓存来应答请求，在Expires 字段值指定的时间之前，响应的副本会一直被保存。当超过指定的时间后，缓存服务器在请求发送过来时，会转向源服务器请求资源。</p>\n<p>当首部字段 Cache-Control 有指定 max-age 指令时，比起首部字段 Expires，会优先处理 max-age 指令。</p>\n<h4 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Last-Modified</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Wed, 23 May 2012 09:59:55 GMT</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Last-Modified 指明资源最终修改的时间。一般来说，这个值就是 Request-URI 指定资源被修改的时间。但类似使用 CGI 脚本进行动态数据处理时，该值有可能会变成数据最终修改时的时间。</p>\n<h3 id=\"为-Cookie-服务的首部字段\"><a href=\"#为-Cookie-服务的首部字段\" class=\"headerlink\" title=\"为 Cookie 服务的首部字段\"></a>为 <strong>Cookie</strong> 服务的首部字段</h3><p>Cookie 的工作机制是用户识别及状态管理。Web 网站为了管理用户的状态会通过 Web 浏览器，把一些数据临时写入用户的计算机内。接着当用户访问该Web网站时，可通过通信方式取回之前发放的Cookie。</p>\n<p>调用 Cookie 时，由于可校验 Cookie 的有效期，以及发送方的域、路径、协议等信息，所以正规发布的 Cookie 内的数据不会因来自其他Web 站点和攻击者的攻击而泄露。</p>\n<h4 id=\"Cookie-的规格标准文档\"><a href=\"#Cookie-的规格标准文档\" class=\"headerlink\" title=\"Cookie 的规格标准文档\"></a>Cookie 的规格标准文档</h4><ul>\n<li><h6 id=\"RFC2109\"><a href=\"#RFC2109\" class=\"headerlink\" title=\"RFC2109\"></a>RFC2109</h6></li>\n<li><h6 id=\"RFC2965\"><a href=\"#RFC2965\" class=\"headerlink\" title=\"RFC2965\"></a>RFC2965</h6></li>\n<li><h6 id=\"RFC6265\"><a href=\"#RFC6265\" class=\"headerlink\" title=\"RFC6265\"></a>RFC6265</h6></li>\n<li><p>由网景公司颁布的规格标准</p>\n</li>\n</ul>\n<h4 id=\"Cookie-服务的首部字段\"><a href=\"#Cookie-服务的首部字段\" class=\"headerlink\" title=\"Cookie 服务的首部字段\"></a><strong>Cookie</strong> 服务的首部字段</h4><table>\n<thead>\n<tr>\n<th>首部字段名</th>\n<th>说明</th>\n<th>首部类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Set-Cookie</td>\n<td>开始状态管理所使用的Cookie信息</td>\n<td>响应首部字段</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>服务器接收到的Cookie信息</td>\n<td>请求首部字段</td>\n</tr>\n</tbody></table>\n<h4 id=\"Set-Cookie\"><a href=\"#Set-Cookie\" class=\"headerlink\" title=\"Set-Cookie\"></a>Set-Cookie</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Set-Cookie</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">status=enable; expires=Tue, 05 Jul 2011 07:26:31</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>Set-Cookie</strong> 字段的属性</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NAME=VALUE</td>\n<td>赋予 Cookie 的名称和其值（必需项）</td>\n</tr>\n<tr>\n<td>expires=DATE</td>\n<td>Cookie 的有效期（若不明确指定则默认为浏览器关闭前为止）</td>\n</tr>\n<tr>\n<td>path=PATH</td>\n<td>将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）</td>\n</tr>\n<tr>\n<td>domain=域名</td>\n<td>作为 Cookie 适用对象的域名  （若不指定则默认为创建 Cookie  的服务器的域名）</td>\n</tr>\n<tr>\n<td>Secure</td>\n<td>仅在 HTTPS 安全通信时才会发送  Cookie</td>\n</tr>\n<tr>\n<td>HttpOnly</td>\n<td>加以限制，使 Cookie 不能被 JavaScript 脚本访问</td>\n</tr>\n</tbody></table>\n<h6 id=\"expires-属性\"><a href=\"#expires-属性\" class=\"headerlink\" title=\"expires 属性\"></a>expires 属性</h6><p>Cookie 的 expires 属性指定浏览器可发送 Cookie 的有效期。</p>\n<p>当省略 expires 属性时，其有效期仅限于维持浏览器会话（Session） 时间段内。这通常限于浏览器应用程序被关闭之前。</p>\n<p>另外，一旦 Cookie 从服务器端发送至客户端，服务器端就不存在可以显式删除 Cookie 的方法。但可通过覆盖已过期的 Cookie，实现对客户端 Cookie 的实质性删除操作。</p>\n<h5 id=\"path-属性\"><a href=\"#path-属性\" class=\"headerlink\" title=\"path 属性\"></a><strong>path</strong> 属性</h5><p>Cookie 的 path 属性可用于限制指定 Cookie 的发送范围的文件目录。不过另有办法可避开这项限制，看来对其作为安全机制的效果不能抱有期待。</p>\n<h5 id=\"domain-属性\"><a href=\"#domain-属性\" class=\"headerlink\" title=\"domain 属性\"></a><strong>domain</strong> 属性</h5><p>通过 Cookie 的 domain 属性指定的域名可做到与结尾匹配一致。比如，当指定 example.com 后，除 example.com 以外，<a href=\"http://www.example.com/\">www.example.com </a>或www2.example.com 等都可以发送 Cookie。</p>\n<p>因此，除了针对具体指定的多个域名发送 Cookie 之 外，不指定domain 属性显得更安全</p>\n<h5 id=\"secure-属性\"><a href=\"#secure-属性\" class=\"headerlink\" title=\"secure 属性\"></a><strong>secure</strong> 属性</h5><p>Cookie 的 secure 属性用于限制 Web 页面仅在 HTTPS 安全连接时，才可以发送 Cookie。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Set-Cookie</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">name=value; secure</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h6 id=\"HttpOnly-属性\"><a href=\"#HttpOnly-属性\" class=\"headerlink\" title=\"HttpOnly 属性\"></a>HttpOnly 属性</h6><p>Cookie 的 HttpOnly 属性是 Cookie 的扩展功能，它使 JavaScript 脚本无法获得 Cookie。其主要目的为防止跨站脚本攻击（Cross-site scripting，XSS）对 Cookie 的信息窃取。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Set-Cookie</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">name=value; HttpOnly</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Cookie</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">status=enable</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 Cookie 会告知服务器，当客户端想获得 HTTP 状态管理支持时，就会在请求中包含从服务器接收到的 Cookie。接收到多个Cookie 时，同样可以以多个 Cookie 形式发送。</p>\n<h3 id=\"其他首部字段\"><a href=\"#其他首部字段\" class=\"headerlink\" title=\"其他首部字段\"></a>其他首部字段</h3><p>HTTP 首部字段是可以自行扩展的。</p>\n<table>\n<thead>\n<tr>\n<th>X-Frame-Options</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>X-XSS-Protection</td>\n</tr>\n<tr>\n<td>DNT</td>\n</tr>\n<tr>\n<td>P3P</td>\n</tr>\n</tbody></table>\n<h4 id=\"X-Frame-Options\"><a href=\"#X-Frame-Options\" class=\"headerlink\" title=\"X-Frame-Options\"></a>X-Frame-Options</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">X-Frame-Options</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">DENY</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 X-Frame-Options 属于 HTTP 响应首部，用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。其主要目的是为了防止点击劫持（clickjacking）攻击。</p>\n<h5 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h5><ul>\n<li><strong>DENY</strong> ：拒绝</li>\n<li><strong>SAMEORIGIN</strong> ：仅同源域名下的页面（Top-level-browsing- context）匹配时许可。（比如，当指定 <a href=\"http://hackr.jp/sample.html\">http://hackr.jp/sample.html </a>页面为 SAMEORIGIN 时，那么 hackr.jp 上所有页面的 frame 都被允许可加载该页面，而 example.com 等其他域名的页面就不行了）</li>\n</ul>\n<h5 id=\"apache2-conf-的配置实例\"><a href=\"#apache2-conf-的配置实例\" class=\"headerlink\" title=\"apache2.conf 的配置实例\"></a><strong>apache2.conf</strong> 的配置实例</h5><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">&lt;IfModule mod_headers.c&gt;\nHeader append X-FRAME-OPTIONS \"SAMEORIGIN\"\n&lt;/IfModule&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"X-XSS-Protection\"><a href=\"#X-XSS-Protection\" class=\"headerlink\" title=\"X-XSS-Protection\"></a>X-XSS-Protection</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">X-XSS-Protection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 X-XSS-Protection 属于 HTTP 响应首部，它是针对跨站脚本攻击（XSS）的一种对策，用于控制浏览器 XSS 防护机制的开关。</p>\n<ul>\n<li>0：将 XSS 过滤设置成无效状态</li>\n<li>1：将 XSS 过滤设置成有效状态</li>\n</ul>\n<h4 id=\"DNT\"><a href=\"#DNT\" class=\"headerlink\" title=\"DNT\"></a>DNT</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">DNT</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 DNT 属于 HTTP 请求首部，其中 DNT 是 Do Not Track 的简称，意为拒绝个人信息被收集，是表示拒绝被精准广告追踪的一种方法。</p>\n<ul>\n<li>0：同意被追踪</li>\n<li>1：拒绝被追踪</li>\n</ul>\n<h4 id=\"P3P\"><a href=\"#P3P\" class=\"headerlink\" title=\"P3P\"></a>P3P</h4><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">P3P</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">CP=\"CAO DSP LAW CURa ADMa DEVa TAIa PSAa PSDa IVAa IVDa</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>首部字段 P3P 属于 HTTP 相应首部，通过利用 P3P（The Platform for Privacy Preferences，在线隐私偏好平台）技术，可以让 Web 网站上的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的目的。</p>\n<p>要进行 P3P 的设定，需按以下操作步骤进行。</p>\n<p>步骤 <strong>1</strong>：创建 P3P 隐私</p>\n<p>步骤 <strong>2</strong>：创建 P3P 隐私对照文件后，保存命名在 /w3c/p3p.xml</p>\n<p>步骤 <strong>3</strong>：从 P3P 隐私中新建 Compact policies 后，输出到 HTTP 响应中</p>\n<h2 id=\"确保-Web-安全的HTTPS\"><a href=\"#确保-Web-安全的HTTPS\" class=\"headerlink\" title=\"确保 Web 安全的HTTPS\"></a>确保 <strong>Web</strong> 安全的HTTPS</h2><p>在 HTTP 协议中有可能存在信息窃听或身份伪装等安全问题。使用HTTPS 通信机制可以有效地防止这些问题。</p>\n<h3 id=\"HTTP的缺点\"><a href=\"#HTTP的缺点\" class=\"headerlink\" title=\"HTTP的缺点\"></a>HTTP的缺点</h3><ul>\n<li><p>通信使用明文（不加密），内容可能会被窃听</p>\n</li>\n<li><p>不验证通信方的身份，因此有可能遭遇伪装</p>\n</li>\n<li><p>无法证明报文的完整性，所以有可能已遭篡改</p>\n</li>\n</ul>\n<h4 id=\"通信使用明文（不加密），内容可能会被窃听\"><a href=\"#通信使用明文（不加密），内容可能会被窃听\" class=\"headerlink\" title=\"通信使用明文（不加密），内容可能会被窃听\"></a>通信使用明文（不加密），内容可能会被窃听</h4><p>由于 HTTP 本身不具备加密的功能，所以也无法做到对通信整体（使用 HTTP 协议通信的请求和响应的内容）进行加密。即，HTTP 报文使用明文（指未经过加密的报文）方式发送。</p>\n<ul>\n<li><p><strong>TCP/IP</strong> 是可能被窃听的网络</p>\n<p>互联网上的任何角落都存在通信内容被窃听的风险</p>\n<p>即使加密的处理过的通信任会被监听，只是监听者还需要破解报文信息</p>\n</li>\n<li><p>加密处理防止被窃听</p>\n<ul>\n<li><p>通信的加密</p>\n<p>HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或TLS（Transport Layer Security，安全层传输协议）的组合使用， 加密 HTTP 的通信内容。</p>\n</li>\n<li><p>内容的加密</p>\n<p>HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或TLS（Transport Layer Security，安全层传输协议）的组合使用， 加密 HTTP 的通信内容。</p>\n<p>把HTTP 报文里所含的内容进行加密处理。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/ebf75f3e4a4d5757e3628065a63e4971.png\"></p>\n<h4 id=\"不验证通信方的身份就可能遭遇伪装\"><a href=\"#不验证通信方的身份就可能遭遇伪装\" class=\"headerlink\" title=\"不验证通信方的身份就可能遭遇伪装\"></a>不验证通信方的身份就可能遭遇伪装</h4><p>HTTP 协议中的请求和响应不会对通信方进行确认。也就是说存在“服务器是否就是发送请求中 URI 真正指定的主机，返回的响应是否真的返回到实际提出请求的客户端”等类似问题。</p>\n<h5 id=\"任何人都可发起请求\"><a href=\"#任何人都可发起请求\" class=\"headerlink\" title=\"任何人都可发起请求\"></a>任何人都可发起请求</h5><p>HTTP 协议的实现本身非常简单，不论是谁发送过来的请求都会返回响应。</p>\n<ul>\n<li>无法判断发出的请求是否到达理想服务器，伪装服务器</li>\n<li>无法判断响应是理想客服端发来的，伪造客服端</li>\n<li>无法判断对方是否具有访问权限</li>\n<li>无法判断是否会发给理想客户端</li>\n</ul>\n<h5 id=\"查明对手的证书\"><a href=\"#查明对手的证书\" class=\"headerlink\" title=\"查明对手的证书\"></a>查明对手的证书</h5><p>虽然使用 HTTP 协议无法确定通信方，但如果使用 SSL 则可以。SSL 不仅提供加密处理，而且还使用了一种被称为证书的手段， 可用于确定方。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/5b8c38026530678e13e723170dad0f13.png\"></p>\n<h4 id=\"无法证明报文完整性，可能已遭篡改\"><a href=\"#无法证明报文完整性，可能已遭篡改\" class=\"headerlink\" title=\"无法证明报文完整性，可能已遭篡改\"></a>无法证明报文完整性，可能已遭篡改</h4><p>所谓完整性是指信息的准确度。</p>\n<h5 id=\"接收到的内容可能有误\"><a href=\"#接收到的内容可能有误\" class=\"headerlink\" title=\"接收到的内容可能有误\"></a>接收到的内容可能有误</h5><p>在请求或响应送出之后直到对方接收之前的这段时间内，即使请求或响应的内容遭到篡改，也没有办法获悉。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/6b6927be25adafe4f71d33db42272962.png\"></p>\n<h5 id=\"如何防止篡改\"><a href=\"#如何防止篡改\" class=\"headerlink\" title=\"如何防止篡改\"></a>如何防止篡改</h5><p>其中常用的是 MD5 和 SHA-1 等散列值校验的方法， 以及用来确认文件的数字签名方法。这些算法也会被改写。</p>\n<h3 id=\"HTTP-加密-认证-完整性保护-HTTPS\"><a href=\"#HTTP-加密-认证-完整性保护-HTTPS\" class=\"headerlink\" title=\"HTTP+ 加密 + 认证 + 完整性保护**=HTTPS**\"></a><strong>HTTP+</strong> 加密 <strong>+</strong> 认证 <strong>+</strong> 完整性保护**=HTTPS**</h3><h4 id=\"HTTP-加上加密处理和认证以及完整性保护后即是HTTPS\"><a href=\"#HTTP-加上加密处理和认证以及完整性保护后即是HTTPS\" class=\"headerlink\" title=\"HTTP 加上加密处理和认证以及完整性保护后即是HTTPS\"></a><strong>HTTP</strong> 加上加密处理和认证以及完整性保护后即是HTTPS</h4><p>把添加了加密及认证机制的 HTTP 称为 HTTPS（HTTP Secure）。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/e837127d056258e30e3e134a207e6791.png\"></p>\n<h4 id=\"HTTPS-是身披-SSL-外壳的-HTTP\"><a href=\"#HTTPS-是身披-SSL-外壳的-HTTP\" class=\"headerlink\" title=\"HTTPS 是身披 SSL 外壳的 HTTP\"></a><strong>HTTPS</strong> 是身披 <strong>SSL</strong> 外壳的 <strong>HTTP</strong></h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/140c9e47c4065dfc522e3e412df99331.png\"></p>\n<h4 id=\"相互交换密钥的公开密钥加密技术\"><a href=\"#相互交换密钥的公开密钥加密技术\" class=\"headerlink\" title=\"相互交换密钥的公开密钥加密技术\"></a>相互交换密钥的公开密钥加密技术</h4><p>SSL 采用一种叫做公开密钥加密（Public-key cryptography）的加密处理方式。</p>\n<ul>\n<li>共享密钥加密的困境</li>\n<li>使用两把密钥的公开密钥加密</li>\n<li><strong>HTTPS</strong> 采用混合加密机制</li>\n</ul>\n<h4 id=\"证明公开密钥正确性的证书\"><a href=\"#证明公开密钥正确性的证书\" class=\"headerlink\" title=\"证明公开密钥正确性的证书\"></a>证明公开密钥正确性的证书</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/a60a859278525e0944814a22d2dc2c4a.png\"></p>\n<ul>\n<li><p>可证明组织真实性的 <strong>EV SSL</strong> 证书</p>\n<p>证书的一个作用是用来证明作为通信一方的服务器是否规范，另外一个作用是可确认对方服务器背后运营的企业是否真实存在。拥有该特性的证书就是 EV SSL 证书（Extended Validation SSL Certificate）。</p>\n</li>\n<li><p>用以确认客户端的客户端证书</p>\n<p>HTTPS 中还可以使用客户端证书。以客户端证书进行客户端认证，证明服务器正在通信的对方始终是预料之内的客户端，其作用跟服务器证书如出一辙。</p>\n</li>\n<li><p>认证机构信誉第一</p>\n</li>\n<li><p>由自认证机构颁发的证书称为自签名证书</p>\n</li>\n</ul>\n<h4 id=\"HTTPS-的安全通信机制\"><a href=\"#HTTPS-的安全通信机制\" class=\"headerlink\" title=\"HTTPS 的安全通信机制\"></a><strong>HTTPS</strong> 的安全通信机制</h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/8fd4f672653f4ee626fa9d20a1ed5f5c.png\"></p>\n<p>步骤 <strong>1</strong>： 客户端通过发送 Client Hello 报文开始 SSL 通信。报文中包含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</p>\n<p>步骤 <strong>2</strong>： 服务器可进行 SSL 通信时，会以 Server Hello 报文作为应答。和客户端一样，在报文中包含 SSL 版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。</p>\n<p>步骤 <strong>3</strong>： 之后服务器发送 Certificate 报文。报文中包含公开密钥证书。</p>\n<p>步骤 <strong>4</strong>： 最后服务器发送 Server Hello Done 报文通知客户端，最初阶段的 SSL 握手协商部分结束。</p>\n<p>步骤 <strong>5</strong>： SSL 第一次握手结束之后，客户端以 Client Key Exchange 报文作为回应。报文中包含通信加密中使用的一种被称为 Pre-master secret 的随机密码串。该报文已用步骤 3 中的公开密钥进行加密。</p>\n<p>步骤 <strong>6</strong>： 接着客户端继续发送 Change Cipher Spec 报文。该报文会提示服务器，在此报文之后的通信会采用 Pre-master secret 密钥加密。</p>\n<p>步骤 <strong>7</strong>： 客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。</p>\n<p>步骤 <strong>8</strong>： 服务器同样发送 Change Cipher Spec 报文。</p>\n<p>步骤 <strong>9</strong>： 服务器同样发送 Finished 报文。</p>\n<p>步骤 <strong>10</strong>： 服务器和客户端的 Finished 报文交换完毕之后，SSL 连接就算建立完成。当然，通信会受到 SSL 的保护。从此处开始进行应用层协议的通信，即发送 HTTP 请求。</p>\n<p>步骤 <strong>11</strong>： 应用层协议通信，即发送 HTTP 响应。</p>\n<p>步骤 <strong>12</strong>： 最后由客户端断开连接。断开连接时，发送 close_notify 报文。上图做了一些省略，这步之后再发送 TCP FIN 报文来关闭与 TCP 的通信。</p>\n<p>在以上流程中，应用层发送数据时会附加一种叫做 MAC（Message Authentication Code）的报文摘要。MAC 能够查知报文是否遭到篡改，从而保护报文的完整性。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/c4d634280d5777af7ef7eb4b434c7791.png\"></p>\n<p>从仅使用服务器端的公开密钥证书（服务器证书）建立 HTTPS 通信的整个过程</p>\n<h4 id=\"SSL和TLS\"><a href=\"#SSL和TLS\" class=\"headerlink\" title=\"SSL和TLS\"></a>SSL和TLS</h4><p>HTTPS 使用 SSL（Secure Socket Layer） 和 TLS（Transport Layer Security）这两个协议。</p>\n<p>SSL目前主导权已转移到IETF，IETF以SSL3.0为基准，后制定了TLS1.0、TLS1.1、TLS1.2。</p>\n<p>当前主流SSL3.0、TLS1.0</p>\n<h5 id=\"small-tips\"><a href=\"#small-tips\" class=\"headerlink\" title=\"small_tips\"></a>small_tips</h5><ul>\n<li><strong>HTTPS</strong> 比 <strong>HTTP</strong> 要慢 <strong>2</strong> 到 <strong>100</strong> 倍</li>\n</ul>\n<h2 id=\"确认访问用户身份的认证\"><a href=\"#确认访问用户身份的认证\" class=\"headerlink\" title=\"确认访问用户身份的认证\"></a>确认访问用户身份的认证</h2><p>某些 Web 页面只想让特定的人浏览</p>\n<h3 id=\"何为认证\"><a href=\"#何为认证\" class=\"headerlink\" title=\"何为认证\"></a>何为认证</h3><p>为了弄清究竟是谁在访问服务 器，就得让对方的客户端自报家门。</p>\n<h4 id=\"HTTP-1-1-使用的认证方式\"><a href=\"#HTTP-1-1-使用的认证方式\" class=\"headerlink\" title=\"HTTP/1.1 使用的认证方式\"></a>HTTP/1.1 使用的认证方式</h4><ul>\n<li><strong>BASIC</strong> 认证（基本认证）</li>\n<li><strong>DIGEST</strong> 认证（摘要认证）</li>\n<li><strong>SSL</strong> 客户端认证</li>\n<li><strong>FormBase</strong> 认证（基于表单认证）</li>\n<li>Windows 统一认证（Keberos 认证、NTLM 认证）</li>\n</ul>\n<h3 id=\"BASIC-认证（基本认证）\"><a href=\"#BASIC-认证（基本认证）\" class=\"headerlink\" title=\"BASIC 认证（基本认证）\"></a><strong>BASIC</strong> 认证（基本认证）</h3><p><img src=\"https://images.dadream.eu.org/images/2024/07/922d89ad738f1561e68b4dc757c68789.png\"></p>\n<p>BASIC 认证虽然采用 Base64 编码方式，但这不是加密处理。不需要任何附加信息即可对其解码。换言之，在HTTP这种非加密信道通信就会被截获。</p>\n<h3 id=\"DIGEST-认证（摘要认证）\"><a href=\"#DIGEST-认证（摘要认证）\" class=\"headerlink\" title=\"DIGEST 认证（摘要认证）\"></a><strong>DIGEST</strong> 认证（摘要认证）</h3><p>DIGEST 认证同样使用质询 / 响应的方式</p>\n<p>所谓质询响应方式是指，一开始一方会先发送认证要求给另一方，接着使用从另一方那接收到的质询码计算生成响应码。最后将响应码返回给对方进行认证的方式。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/d2892338940c78fc33f6406e7091220c.png\"></p>\n<p>DIGEST 认证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。</p>\n<h3 id=\"SSL-客户端认证\"><a href=\"#SSL-客户端认证\" class=\"headerlink\" title=\"SSL 客户端认证\"></a><strong>SSL</strong> 客户端认证</h3><p>SSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。凭借客户端证书认证，服务器可确认访问是否来自已登录的客户端。</p>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><p>步骤 <strong>1</strong>： 接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证书。</p>\n<p>步骤 <strong>2</strong>： 用户选择将发送的客户端证书后，客户端会把客户端证书信息以 Client Certificate 报文方式发送给服务器。</p>\n<p>步骤 <strong>3</strong>： 服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通信。</p>\n<h4 id=\"SSL-客户端认证采用双因素认证\"><a href=\"#SSL-客户端认证采用双因素认证\" class=\"headerlink\" title=\"SSL 客户端认证采用双因素认证\"></a><strong>SSL</strong> 客户端认证采用双因素认证</h4><p>在多数情况下，SSL 客户端认证不会仅依靠证书完成认证，一般会和基于表单认证组合形成一种双因素认证（Two-factor authentication）来使用。换言之，第一个认证因素的 SSL 客户端证书用来认证客户端计算机， 另一个认证因素的密码则用来确定这是用户本人的行为。</p>\n<h4 id=\"SSL-客户端认证必要的费用（证书）\"><a href=\"#SSL-客户端认证必要的费用（证书）\" class=\"headerlink\" title=\"SSL 客户端认证必要的费用（证书）\"></a><strong>SSL</strong> 客户端认证必要的费用（证书）</h4><h3 id=\"基于表单认证\"><a href=\"#基于表单认证\" class=\"headerlink\" title=\"基于表单认证\"></a>基于表单认证</h3><p>客户端会向服务器上的 Web 应用程序发送登录信息（Credential），按登录信息的验证结果认证。</p>\n<h5 id=\"认证多半为基于表单认证\"><a href=\"#认证多半为基于表单认证\" class=\"headerlink\" title=\"认证多半为基于表单认证\"></a>认证多半为基于表单认证</h5><p><strong>Session</strong> 管理及 <strong>Cookie</strong> 应用</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/2e8062821a51e04c45ae2ac8e7aa8fa1.png\"></p>\n<h2 id=\"基于-HTTP-的功能追加协议\"><a href=\"#基于-HTTP-的功能追加协议\" class=\"headerlink\" title=\"基于 HTTP 的功能追加协议\"></a>基于 <strong>HTTP</strong> 的功能追加协议</h2><h4 id=\"基于-HTTP-的协议\"><a href=\"#基于-HTTP-的协议\" class=\"headerlink\" title=\"基于 HTTP 的协议\"></a>基于 <strong>HTTP</strong> 的协议</h4><h4 id=\"消除-HTTP-瓶颈的-SPDY\"><a href=\"#消除-HTTP-瓶颈的-SPDY\" class=\"headerlink\" title=\"消除 HTTP 瓶颈的 SPDY\"></a>消除 <strong>HTTP</strong> 瓶颈的 <strong>SPDY</strong></h4><h5 id=\"HTTP-瓶颈\"><a href=\"#HTTP-瓶颈\" class=\"headerlink\" title=\"HTTP 瓶颈\"></a><strong>HTTP</strong> 瓶颈</h5><p><img src=\"https://images.dadream.eu.org/images/2024/07/a6c1ddf897e03fc581cd5fd4f7990a4c.png\"></p>\n<ul>\n<li><p>Ajax解决</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/d26bb569fc6c3b4263f786cd14533727.png\"></p>\n</li>\n<li><p><strong>Comet</strong> 解决</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/0bace5d97336e00fd7d4f6932defe557.png\"></p>\n</li>\n<li><p>消除 <strong>HTTP</strong> 瓶颈的 <strong>SPDY</strong></p>\n</li>\n</ul>\n<h4 id=\"SPDY-的设计与功能\"><a href=\"#SPDY-的设计与功能\" class=\"headerlink\" title=\"SPDY 的设计与功能\"></a><strong>SPDY</strong> 的设计与功能</h4><p>SPDY 没有完全改写 HTTP 协议，而是在 TCP/IP 的应用层与运输层之间通过新加会话层的形式运作。同时，考虑到安全性问题，SPDY 规定通信中使用 SSL。</p>\n<p>SPDY 以会话层的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。因此，可照常使用 HTTP 的 GET 和 POST 等方 法、Cookie 以及 HTTP 报文等。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/fb54f1e32d646b366d829a2c9a887ad3.png\"></p>\n<h5 id=\"新功能\"><a href=\"#新功能\" class=\"headerlink\" title=\"新功能\"></a>新功能</h5><ul>\n<li>多路复用流</li>\n<li>赋予请求优先级</li>\n<li>压缩 <strong>HTTP</strong> 首部</li>\n<li>推送功能</li>\n<li>服务器提示功能</li>\n</ul>\n<h4 id=\"SPDY-大体上消除了-Web-瓶颈\"><a href=\"#SPDY-大体上消除了-Web-瓶颈\" class=\"headerlink\" title=\"SPDY 大体上消除了 Web 瓶颈\"></a><strong>SPDY</strong> 大体上消除了 <strong>Web</strong> 瓶颈</h4><h3 id=\"使用浏览器进行全双工通信的WebSocket\"><a href=\"#使用浏览器进行全双工通信的WebSocket\" class=\"headerlink\" title=\"使用浏览器进行全双工通信的WebSocket\"></a>使用浏览器进行全双工通信的<strong>WebSocket</strong></h3><p>WebSocket 网络技术正是为解决这些问题而实现的一套新协议及 API。</p>\n<p> WebSocket 技术主要是为了解决 Ajax 和 Comet 里 XMLHttpRequest 附带的缺陷所引起的问题。</p>\n<h4 id=\"WebSocket-协议\"><a href=\"#WebSocket-协议\" class=\"headerlink\" title=\"WebSocket 协议\"></a>WebSocket 协议</h4><p>一旦 Web 服务器与客户端之间建立起 WebSocket 协议的通信连接， 之后所有的通信都依靠这个专用协议进行。通信过程中可互相发送JSON、XML、HTML 或图片等任意格式的数据。</p>\n<p>由于是建立在 HTTP 基础上的协议，因此连接的发起方仍是客户端， 而一旦确立 WebSocket 通信连接，不论服务器还是客户端，任意一方都可直接向对方发送报文。</p>\n<h5 id=\"新特点\"><a href=\"#新特点\" class=\"headerlink\" title=\"新特点\"></a>新特点</h5><ul>\n<li>推送功能</li>\n<li>减少通信量</li>\n</ul>\n<h4 id=\"实现-WebSocket-通信\"><a href=\"#实现-WebSocket-通信\" class=\"headerlink\" title=\"实现 WebSocket 通信\"></a>实现 WebSocket 通信</h4><p>完成一次握手</p>\n<h5 id=\"握手请求\"><a href=\"#握手请求\" class=\"headerlink\" title=\"握手请求\"></a>握手请求</h5><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">GET /chat  HTTP/1.1 \n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">server.example.com </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Upgrade</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">websocket Connection: Upgrade</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-WebSocket-Key</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">dGhlIHNhbXBsZSBub25jZQ== </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">http://example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-WebSocket-Protocol</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">chat, superchat </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-WebSocket-Version</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">13</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>用到 HTTP 的 Upgrade 首部字段，告知服务器通信协议发生改变。</p>\n<p>Sec-WebSocket-Key 字段内记录着握手过程中必不可少的键值。Sec-WebSocket-Protocol 字段内记录使用的子协议。</p>\n<h5 id=\"握手响应\"><a href=\"#握手响应\" class=\"headerlink\" title=\"握手响应\"></a>握手响应</h5><pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">101</span> <span class=\"token reason-phrase string\">Switching Protocols</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Upgrade</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">websocket </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Upgrade</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-WebSocket-Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">s3pPLMBiTxaQ9kYGzzhZRbK+xOo= </span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-WebSocket-Protocol</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">chat</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Sec-WebSocket-Accept 的字段值是由握手请求中的 Sec-WebSocket-Key 的字段值生成的。</p>\n<p><img src=\"https://images.dadream.eu.org/images/2024/07/1c6be636e6391922df500391f6f0a9d2.png\"></p>\n<h4 id=\"WebSocket-API\"><a href=\"#WebSocket-API\" class=\"headerlink\" title=\"WebSocket API\"></a>WebSocket API</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span>'ws<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>game<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span><span class=\"token number\">12010</span><span class=\"token operator\">/</span> socket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>bufferedAmount <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUpdateData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP/2.0\"></a>HTTP/2.0</h3><h4 id=\"HTTP-2-0特点\"><a href=\"#HTTP-2-0特点\" class=\"headerlink\" title=\"HTTP/2.0特点\"></a>HTTP/2.0特点</h4><table>\n<thead>\n<tr>\n<th>压缩</th>\n<th><strong>SPDY</strong>、<strong>Friendly</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>多路复用</td>\n<td>SPDY</td>\n</tr>\n<tr>\n<td>TLS 义务化</td>\n<td>Speed＋ Mobility</td>\n</tr>\n<tr>\n<td>协商</td>\n<td>Speed＋ Mobility，Friendly</td>\n</tr>\n<tr>\n<td>客户端拉曳（Client Pull）/服务器推送  （Server Push）</td>\n<td>Speed＋ Mobility</td>\n</tr>\n<tr>\n<td>流量控制</td>\n<td>SPDY</td>\n</tr>\n<tr>\n<td>WebSocket</td>\n<td>Speed＋ Mobility</td>\n</tr>\n</tbody></table>\n<p>注：HTTP Speed ＋ Mobility 简写为 Speed ＋ Mobility，Network-Friendly HTTP Upgrade 简写为 Friendly。</p>\n<h3 id=\"Web-服务器管理文件的-WebDAV\"><a href=\"#Web-服务器管理文件的-WebDAV\" class=\"headerlink\" title=\"Web 服务器管理文件的 WebDAV\"></a><strong>Web</strong> 服务器管理文件的 <strong>WebDAV</strong></h3><p>WebDAV（Web-based Distributed Authoring and Versioning，基于万维网的分布式创作和版本控制）是一个可对 Web 服务器上的内容直接进行文件复制、编辑等操作的分布式文件系统。它作为扩展 HTTP/1.1 的协议定义在 RFC4918。</p>\n<p>除了创建、删除文件等基本功能，它还具备文件创建者管理、文件编辑过程中禁止其他用户内容覆盖的加锁功能，以及对文件内容修改的版本控制功能。</p>\n<h4 id=\"扩展-HTTP-1-1-的-WebDAV\"><a href=\"#扩展-HTTP-1-1-的-WebDAV\" class=\"headerlink\" title=\"扩展 HTTP/1.1 的 WebDAV\"></a>扩展 <strong>HTTP/1.1</strong> 的 <strong>WebDAV</strong></h4><p><img src=\"https://images.dadream.eu.org/images/2024/07/0576a601ec5602848bee1800f36f65f3.png\"></p>\n<p>集合（<strong>Collection</strong>）：是一种统一管理多个资源的概念。以集合为单位可进行各种操作。也可实现类似集合的集合这样的叠加。</p>\n<p>资源（<strong>Resource</strong>）：把文件或集合称为资源。</p>\n<p>属性（<strong>Property</strong>）：定义资源的属性。定义以<strong>“</strong>名称 <strong>=</strong> 值<strong>”</strong>的格式执行。</p>\n<p>锁（<strong>Lock</strong>）：把文件设置成无法编辑状态。多人同时编辑时，可防止在同一时间进行内容写入。</p>\n<h4 id=\"WebDAV-内新增的方法及状态码\"><a href=\"#WebDAV-内新增的方法及状态码\" class=\"headerlink\" title=\"WebDAV 内新增的方法及状态码\"></a><strong>WebDAV</strong> 内新增的方法及状态码</h4><p>WebDAV 为实现远程文件管理，向 HTTP/1.1 中追加了以下这些方法。</p>\n<p><strong>PROPFIND</strong> ：获取属性</p>\n<p><strong>PROPPATCH</strong> ：修改属性</p>\n<p><strong>MKCOL</strong> ：创建集合</p>\n<p><strong>COPY</strong> ：复制资源及属性</p>\n<p><strong>MOVE</strong> ：移动资源</p>\n<p><strong>LOCK</strong> ：资源加锁</p>\n<p><strong>UNLOCK</strong> ：资源解锁</p>\n<p>为配合扩展的方法，状态码也随之扩展。</p>\n<p><strong>102 Processing</strong> ：可正常处理请求，但目前是处理中状态</p>\n<p><strong>207 Multi-Status</strong> ：存在多种状态</p>\n<p><strong>422 Unprocessible Entity</strong> ：格式正确，内容有误</p>\n<p><strong>423 Locked</strong> ：资源已被加锁</p>\n<p><strong>424 Failed Dependency</strong> ：处理与某请求关联的请求失败，因此不再维持依赖关系</p>\n<p><strong>507 Isufficient Storage</strong> ：保存空间不足</p>\n<ul>\n<li><p><strong>WebDAV</strong> 的请求实例</p>\n<p>下面是使用 PROPFIND 方法对 <a href=\"http://www.example.com/file\">http://www.example.com/file </a>发起获取属性的请求。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\">PROPFIND /file HTTP/1.1\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">www.example.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/xml; charset=\"utf-8\" Content-Length: 219</span></span>\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;D:propfind xmlns:D=\"DAV:\"&gt;\n&lt;D:prop xmlns:R=\"http://ns.example.com/boxschema/\"&gt;\n&lt;R:bigbox/&gt;\n&lt;R:author/&gt;\n&lt;R:DingALing/&gt;\n&lt;R:Random/&gt;\n&lt;/D:prop&gt;\n&lt;/D:propfind&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>WebDAV</strong> 的响应实例</p>\n<p>下面是针对之前的 PROPFIND 方法，返回<a href=\"http://www.example.com/file\">http://www.example.com/file </a>的属性的响应。</p>\n<pre class=\"line-numbers language-http\" data-language=\"http\"><code class=\"language-http\"><span class=\"token response-status\"><span class=\"token http-version property\">HTTP/1.1</span> <span class=\"token status-code number\">207</span> <span class=\"token reason-phrase string\">Multi-Status</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/xml; charset=\"utf-8\" Content-Length: 831</span></span>\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;\n&lt;D:multistatus xmlns:D=\"DAV:\"&gt;\n&lt;D:response xmlns:R=\"http://ns.example.com/boxschema/\"\n&lt;D:href&gt;http://www.example.com/file&lt;/D:href&gt;\n&lt;D:propstat&gt;\n&lt;D:prop&gt;\n&lt;R:bigbox&gt;\n&lt;R:BoxType&gt;Box type A&lt;/R:BoxType&gt;\n&lt;/R:bigbox&gt;\n&lt;R:author&gt;\n&lt;R:Name&gt;J.J. Johnson&lt;/R:Name&gt;\n&lt;/R:author&gt;\n&lt;/D:prop&gt;\n&lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;\n&lt;/D:propstat&gt;\n&lt;D:propstat&gt;\n&lt;D:prop&gt;&lt;R:DingALing/&gt;&lt;R:Random/&gt;&lt;/D:prop&gt;\n&lt;D:status&gt;HTTP/1.1 403 Forbidden&lt;/D:status&gt;\n&lt;D:responsedescription&gt; The user does not have acc\n&lt;/D:responsedescription&gt;\n&lt;/D:propstat&gt;\n&lt;/D:response&gt;\n&lt;D:responsedescription&gt; There has been an access viola\n&lt;/D:responsedescription&gt;\n&lt;/D:multistatus&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"构建-Web-内容的技术\"><a href=\"#构建-Web-内容的技术\" class=\"headerlink\" title=\"构建 Web 内容的技术\"></a>构建 <strong>Web</strong> 内容的技术</h2><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><h5 id=\"Web-页面几乎全由-HTML-构建\"><a href=\"#Web-页面几乎全由-HTML-构建\" class=\"headerlink\" title=\"Web 页面几乎全由 HTML 构建\"></a><strong>Web</strong> 页面几乎全由 <strong>HTML</strong> 构建</h5><h5 id=\"HTML版本\"><a href=\"#HTML版本\" class=\"headerlink\" title=\"HTML版本\"></a>HTML版本</h5><h5 id=\"设计应用-CSS\"><a href=\"#设计应用-CSS\" class=\"headerlink\" title=\"设计应用 CSS\"></a>设计应用 <strong>CSS</strong></h5><h4 id=\"动态HTML\"><a href=\"#动态HTML\" class=\"headerlink\" title=\"动态HTML\"></a>动态HTML</h4><p>使用客户端脚本语言将静态的 HTML 内容变成动态的技术的总称。</p>\n<h5 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h5><p>DOM 是用以操作 HTML 文档和 XML 文档的 API（Application Programming Interface，应用编程接口）。</p>\n<p>Web应用</p>\n<h4 id=\"通过-Web-提供功能的-Web-应用\"><a href=\"#通过-Web-提供功能的-Web-应用\" class=\"headerlink\" title=\"通过 Web 提供功能的 Web 应用\"></a>通过 <strong>Web</strong> 提供功能的 <strong>Web</strong> 应用</h4><p>由程序创建的内容称为动态内容，而事先准备好的内容称为静态内容。</p>\n<h4 id=\"与-Web-服务器及程序协作的-CGI\"><a href=\"#与-Web-服务器及程序协作的-CGI\" class=\"headerlink\" title=\"与 Web 服务器及程序协作的 CGI\"></a>与 <strong>Web</strong> 服务器及程序协作的 <strong>CGI</strong></h4><p>CGI（Common Gateway Interface，通用网关接口）是指 Web 服务器在接收到客户端发送过来的请求后转发给程序的一组机制。在 CGI 的作用下，程序会对请求内容做出相应的动作，比如创建 HTML 等动态内容。</p>\n<p>使用 CGI 的程序叫做 CGI 程序，通常是用 Perl、PHP、Ruby 和 C 等编程语言编写而成。</p>\n<h4 id=\"因-Java-而普及的-Servlet\"><a href=\"#因-Java-而普及的-Servlet\" class=\"headerlink\" title=\"因 Java 而普及的 Servlet\"></a>因 <strong>Java</strong> 而普及的 <strong>Servlet</strong></h4><p>Servlet 是一种能在服务器上创建动态内容的程序。Servlet 是用 Java 语言实现的一个接口，属于面向企业级 Java（JavaEE，Java Enterprise Edition）的一部分。负载小。</p>\n<h3 id=\"数据发布的格式及语言\"><a href=\"#数据发布的格式及语言\" class=\"headerlink\" title=\"数据发布的格式及语言\"></a>数据发布的格式及语言</h3><h4 id=\"可扩展标记语言\"><a href=\"#可扩展标记语言\" class=\"headerlink\" title=\"可扩展标记语言\"></a>可扩展标记语言</h4><p>XML（eXtensible Markup Language，可扩展标记语言）是一种可按应用目标进行扩展的通用标记语言。旨在通过使用 XML，使互联网数据共享变得更容易。</p>\n<p>XML 和 HTML 都是从标准通用标记语言 SGML（Standard Generalized Markup Language）简化而成。与 HTML 相比，它对数据的记录方式做了特殊处理。</p>\n<h4 id=\"发布更新信息的-RSS-Atom\"><a href=\"#发布更新信息的-RSS-Atom\" class=\"headerlink\" title=\"发布更新信息的 RSS/Atom\"></a>发布更新信息的 <strong>RSS/Atom</strong></h4><p>RSS（简易信息聚合，也叫聚合内容）和 Atom 都是发布新闻或博客日志等更新信息文档的格式的总称。两者都用到了 XML。</p>\n<h4 id=\"JavaScript-衍生的轻量级易用-JSON\"><a href=\"#JavaScript-衍生的轻量级易用-JSON\" class=\"headerlink\" title=\"JavaScript 衍生的轻量级易用 JSON\"></a><strong>JavaScript</strong> 衍生的轻量级易用 <strong>JSON</strong></h4><p>JSON（JavaScript Object Notation）是一种以JavaScript（ECMAScript）的对象表示法为基础的轻量级数据标记语言。</p>\n<h2 id=\"Web-的攻击技术\"><a href=\"#Web-的攻击技术\" class=\"headerlink\" title=\"Web 的攻击技术\"></a><strong>Web</strong> 的攻击技术</h2><h3 id=\"针对-Web-的攻击技术\"><a href=\"#针对-Web-的攻击技术\" class=\"headerlink\" title=\"针对 Web 的攻击技术\"></a>针对 <strong>Web</strong> 的攻击技术</h3><h4 id=\"HTTP-不具备必要的安全功能\"><a href=\"#HTTP-不具备必要的安全功能\" class=\"headerlink\" title=\"HTTP 不具备必要的安全功能\"></a><strong>HTTP</strong> 不具备必要的安全功能</h4><h4 id=\"在客户端即可篡改请求\"><a href=\"#在客户端即可篡改请求\" class=\"headerlink\" title=\"在客户端即可篡改请求\"></a>在客户端即可篡改请求</h4><h4 id=\"针对-Web-应用的攻击模式\"><a href=\"#针对-Web-应用的攻击模式\" class=\"headerlink\" title=\"针对 Web 应用的攻击模式\"></a>针对 <strong>Web</strong> 应用的攻击模式</h4><ul>\n<li>主动攻击</li>\n<li>被动攻击</li>\n<li>以服务器为目标的主动攻击</li>\n<li>以服务器为目标的被动攻</li>\n</ul>\n<h3 id=\"因输出值转义不完全引发的安全漏洞\"><a href=\"#因输出值转义不完全引发的安全漏洞\" class=\"headerlink\" title=\"因输出值转义不完全引发的安全漏洞\"></a>因输出值转义不完全引发的安全漏洞</h3><ul>\n<li>客户端的验证</li>\n<li><strong>Web</strong> 应用端（服务器端）的验证<ul>\n<li>输入值验证</li>\n<li>输出值转义</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"跨站脚本攻击（Cross-Site-Scripting，XSS）\"><a href=\"#跨站脚本攻击（Cross-Site-Scripting，XSS）\" class=\"headerlink\" title=\"跨站脚本攻击（Cross-Site Scripting，XSS）\"></a>跨站脚本攻击（Cross-Site Scripting，XSS）</h4><p>跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击。</p>\n<h4 id=\"SQL-注入（SQL-Injection）\"><a href=\"#SQL-注入（SQL-Injection）\" class=\"headerlink\" title=\"SQL 注入（SQL Injection）\"></a>SQL 注入（SQL Injection）</h4><h4 id=\"OS-命令注入攻击（OS-Command-Injection）\"><a href=\"#OS-命令注入攻击（OS-Command-Injection）\" class=\"headerlink\" title=\"OS 命令注入攻击（OS Command Injection）\"></a>OS 命令注入攻击（OS Command Injection）</h4><h4 id=\"HTTP-首部注入攻击（HTTP-Header-Injection）\"><a href=\"#HTTP-首部注入攻击（HTTP-Header-Injection）\" class=\"headerlink\" title=\"HTTP 首部注入攻击（HTTP Header Injection）\"></a>HTTP 首部注入攻击（HTTP Header Injection）</h4><h4 id=\"邮件首部注入（Mail-Header-Injection）\"><a href=\"#邮件首部注入（Mail-Header-Injection）\" class=\"headerlink\" title=\"邮件首部注入（Mail Header Injection）\"></a>邮件首部注入（Mail Header Injection）</h4><h4 id=\"目录遍历（Directory-Traversal）攻击\"><a href=\"#目录遍历（Directory-Traversal）攻击\" class=\"headerlink\" title=\"目录遍历（Directory Traversal）攻击\"></a>目录遍历（Directory Traversal）攻击</h4><h4 id=\"远程文件包含漏洞（Remote-File-Inclusion）\"><a href=\"#远程文件包含漏洞（Remote-File-Inclusion）\" class=\"headerlink\" title=\"远程文件包含漏洞（Remote File Inclusion）\"></a>远程文件包含漏洞（Remote File Inclusion）</h4><h3 id=\"因设置或设计上的缺陷引发的安全漏洞\"><a href=\"#因设置或设计上的缺陷引发的安全漏洞\" class=\"headerlink\" title=\"因设置或设计上的缺陷引发的安全漏洞\"></a>因设置或设计上的缺陷引发的安全漏洞</h3><h4 id=\"强制浏览（Forced-Browsing）\"><a href=\"#强制浏览（Forced-Browsing）\" class=\"headerlink\" title=\"强制浏览（Forced Browsing）\"></a>强制浏览（Forced Browsing）</h4><p>强制浏览（Forced Browsing）安全漏洞是指，从安置在 Web 服务器的公开目录下的文件中，浏览那些原本非自愿公开的文件。</p>\n<h4 id=\"不正确的错误消息处理（Error-Handling-Vulnerability）\"><a href=\"#不正确的错误消息处理（Error-Handling-Vulnerability）\" class=\"headerlink\" title=\"不正确的错误消息处理（Error Handling Vulnerability）\"></a>不正确的错误消息处理（Error Handling Vulnerability）</h4><p>不正确的错误消息处理（Error Handling Vulnerability）的安全漏洞是指，Web 应用的错误信息内包含对攻击者有用的信息。</p>\n<h4 id=\"开放重定向（Open-Redirect）\"><a href=\"#开放重定向（Open-Redirect）\" class=\"headerlink\" title=\"开放重定向（Open Redirect）\"></a>开放重定向（Open Redirect）</h4><p>开放重定向（Open Redirect）是一种对指定的任意 URL 作重定向跳转的功能。而于此功能相关联的安全漏洞是指，假如指定的重定向 URL 到某个具有恶意的 Web 网站，那么用户就会被诱导至那个 Web 网站。</p>\n<h3 id=\"因会话管理疏忽引发的安全漏洞\"><a href=\"#因会话管理疏忽引发的安全漏洞\" class=\"headerlink\" title=\"因会话管理疏忽引发的安全漏洞\"></a>因会话管理疏忽引发的安全漏洞</h3><h4 id=\"会话劫持（Session-Hijack）\"><a href=\"#会话劫持（Session-Hijack）\" class=\"headerlink\" title=\"会话劫持（Session Hijack）\"></a>会话劫持（Session Hijack）</h4><p>会话劫持（Session Hijack）是指攻击者通过某种手段拿到了用户的会话 ID，并非法使用此会话 ID 伪装成用户，达到攻击的目的。</p>\n<h4 id=\"会话固定攻击\"><a href=\"#会话固定攻击\" class=\"headerlink\" title=\"会话固定攻击\"></a>会话固定攻击</h4><p>对以窃取目标会话 ID 为主动攻击手段的会话劫持而言，会话固定攻击（Session Fixation）攻击会强制用户使用攻击者指定的会话 ID，属于被动攻击。</p>\n<h4 id=\"跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\"><a href=\"#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）\" class=\"headerlink\" title=\"跨站点请求伪造（Cross-Site Request Forgeries，CSRF）\"></a>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）</h4><p>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。</p>\n<h3 id=\"其他安全漏洞\"><a href=\"#其他安全漏洞\" class=\"headerlink\" title=\"其他安全漏洞\"></a>其他安全漏洞</h3><h4 id=\"密码破解攻击（Password-Cracking）\"><a href=\"#密码破解攻击（Password-Cracking）\" class=\"headerlink\" title=\"密码破解攻击（Password Cracking）\"></a>密码破解攻击（Password Cracking）</h4><p>密码破解攻击（Password Cracking）即算出密码，突破认证。</p>\n<h4 id=\"点击劫持（Clickjacking）\"><a href=\"#点击劫持（Clickjacking）\" class=\"headerlink\" title=\"点击劫持（Clickjacking）\"></a>点击劫持（Clickjacking）</h4><p>点击劫持（Clickjacking）是指利用透明的按钮或链接做成陷阱，覆盖在 Web 页面之上。然后诱使用户在不知情的情况下，点击那个链接访问内容的一种攻击手段。这种行为又称为界面伪装（UI Redressing）。</p>\n<h4 id=\"DoS-攻击（Denial-of-Service-attack）\"><a href=\"#DoS-攻击（Denial-of-Service-attack）\" class=\"headerlink\" title=\"DoS 攻击（Denial of Service attack）\"></a>DoS 攻击（Denial of Service attack）</h4><p>DoS 攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对象不仅限于 Web 网站，还包括网络设备及服务器等。</p>\n<h4 id=\"后门程序（Backdoor）\"><a href=\"#后门程序（Backdoor）\" class=\"headerlink\" title=\"后门程序（Backdoor）\"></a>后门程序（Backdoor）</h4><p>后门程序（Backdoor）是指开发设置的隐藏入口，可不按正常步骤使用受限功能。利用后门程序就能够使用原本受限制的功能。</p>\n",
            "tags": [
                "学习"
            ]
        }
    ]
}