<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>逐梦 • Posts by &#34;网络&#34; category</title>
        <link>https://0xdadream.github.io</link>
        <description>Welcome to my blog</description>
        <language>zh-CN</language>
        <pubDate>Sun, 01 Jun 2025 12:25:00 +0800</pubDate>
        <lastBuildDate>Sun, 01 Jun 2025 12:25:00 +0800</lastBuildDate>
        <category>tip</category>
        <category>intel</category>
        <category>cloudflare</category>
        <category>email</category>
        <category>安装</category>
        <category>AI</category>
        <category>tips</category>
        <category>re</category>
        <category>工具</category>
        <category>conda</category>
        <category>Java</category>
        <category>linux</category>
        <category>教程</category>
        <category>环境</category>
        <category>bug</category>
        <category>web</category>
        <category>wp</category>
        <category>攻防世界</category>
        <category>windows</category>
        <category>net</category>
        <category>BUUCTF</category>
        <category>server</category>
        <category>wall</category>
        <category>comfyui</category>
        <category>tools</category>
        <category>powershell</category>
        <category>sql</category>
        <category>代码审计</category>
        <category>漏洞复现</category>
        <category>emby</category>
        <category>python</category>
        <category>google</category>
        <category>git</category>
        <category>学习</category>
        <category>java</category>
        <category>命令</category>
        <category>远程</category>
        <category>php</category>
        <category>文件上传</category>
        <category>命令行</category>
        <category>下载</category>
        <category>区块链</category>
        <category>汇编</category>
        <category>密码学</category>
        <category>mcp</category>
        <category>i春秋</category>
        <category>证书</category>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/06/01/ji-yu-x-ui-yu-cloudflare-da-jian-jie-dian/</guid>
            <title>科学上网节点技术与实践：基于 X-UI 与 Cloudflare 的全面指南</title>
            <link>https://0xdadream.github.io/2025/06/01/ji-yu-x-ui-yu-cloudflare-da-jian-jie-dian/</link>
            <category>教程</category>
            <pubDate>Sun, 01 Jun 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;科学上网节点技术与实践：基于-X-UI-与-Cloudflare-的全面指南&#34;&gt;&lt;a href=&#34;#科学上网节点技术与实践：基于-X-UI-与-Cloudflare-的全面指南&#34; class=&#34;headerlink&#34; title=&#34;科学上网节点技术与实践：基于 X-UI 与 Cloudflare 的全面指南&#34;&gt;&lt;/a&gt;科学上网节点技术与实践：基于 X-UI 与 Cloudflare 的全面指南&lt;/h1&gt;&lt;h2 id=&#34;第一部分：科学上网节点与核心概念概述&#34;&gt;&lt;a href=&#34;#第一部分：科学上网节点与核心概念概述&#34; class=&#34;headerlink&#34; title=&#34;第一部分：科学上网节点与核心概念概述&#34;&gt;&lt;/a&gt;第一部分：科学上网节点与核心概念概述&lt;/h2&gt;&lt;h3 id=&#34;1-1-科学上网概述及其重要性&#34;&gt;&lt;a href=&#34;#1-1-科学上网概述及其重要性&#34; class=&#34;headerlink&#34; title=&#34;1.1 科学上网概述及其重要性&#34;&gt;&lt;/a&gt;1.1 科学上网概述及其重要性&lt;/h3&gt;&lt;p&gt;“科学上网”，通常指通过技术手段绕过互联网审查和地理限制，以访问全球开放信息资源的过程。在当前信息高度互联的时代，获取未经审查的、多元化的信息对于学术研究、技术创新以及文化交流至关重要。然而，常见的网络封锁技术，如IP地址封锁、域名系统 (DNS) 污染和深度包检测 (Deep Packet Inspection, DPI)，对信息的自由流通构成了挑战 。因此，理解和掌握科学上网技术，对于需要无障碍访问全球互联网资源的用户而言，具有实际意义。&lt;/p&gt;
&lt;h3 id=&#34;1-2-核心技术：Xray-与-x-ui-面板&#34;&gt;&lt;a href=&#34;#1-2-核心技术：Xray-与-x-ui-面板&#34; class=&#34;headerlink&#34; title=&#34;1.2 核心技术：Xray 与 x-ui 面板&#34;&gt;&lt;/a&gt;1.2 核心技术：Xray 与 x-ui 面板&lt;/h3&gt;&lt;p&gt;Xray 是一个功能强大且灵活的网络代理核心，被广泛用于构建科学上网节点。它支持多种代理协议和复杂的路由功能，能够有效地帮助用户绕过网络审查 。与 Xray 配合使用的 x-ui (特别是 MHSanaei 维护的 3x-ui 分支) 是一个用户友好的图形化管理面板，它极大地简化了 Xray 节点的配置和管理过程，支持多用户、多协议管理，并提供流量统计、到期时间限制等功能 。&lt;/p&gt;
&lt;h3 id=&#34;1-3-Cloudflare-的角色&#34;&gt;&lt;a href=&#34;#1-3-Cloudflare-的角色&#34; class=&#34;headerlink&#34; title=&#34;1.3 Cloudflare 的角色&#34;&gt;&lt;/a&gt;1.3 Cloudflare 的角色&lt;/h3&gt;&lt;p&gt;Cloudflare 是一家全球性的网络基础设施和安全公司，其提供的服务如内容分发网络 (CDN)、Workers（边缘计算）和 Tunnel（安全隧道）可以被巧妙地用于增强科学上网节点的隐蔽性和稳定性 。通过 Cloudflare，用户可以隐藏其代理服务器的真实IP地址，抵御分布式拒绝服务 (DDoS) 攻击，并在某些情况下改善连接速度和可靠性 。&lt;/p&gt;
&lt;h3 id=&#34;1-4-关键术语解析&#34;&gt;&lt;a href=&#34;#1-4-关键术语解析&#34; class=&#34;headerlink&#34; title=&#34;1.4 关键术语解析&#34;&gt;&lt;/a&gt;1.4 关键术语解析&lt;/h3&gt;&lt;p&gt;理解以下术语对于掌握本教程至关重要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TLS (Transport Layer Security) / SSL (Secure Sockets Layer):&lt;/strong&gt; TLS 及其前身 SSL 是保障网络通信安全和数据完整性的加密协议 。它们通过在客户端和服务器之间建立加密通道，确保数据传输不被窃听或篡改。在科学上网中，TLS 常用于伪装代理流量，使其看起来像正常的 HTTPS 流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CDN (Content Delivery Network):&lt;/strong&gt; 内容分发网络通过在全球部署边缘服务器来缓存网站内容，使用户可以从最近的服务器获取数据，从而提高网站加载速度并减少源服务器负载 。对于代理节点，CDN 可以隐藏源服务器 IP，并可能分散流量特征。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket:&lt;/strong&gt; 一种在单个 TCP 连接上进行全双工通信的协议 。它允许服务器和客户端之间进行持续的、低延迟的双向数据交换。在代理中，WebSocket 常被用作一种传输方式，可以将代理流量封装在标准的 HTTP/HTTPS 端口（如 80 或 443）上传输，从而更好地伪装流量，并兼容 CDN 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC (Google Remote Procedure Call):&lt;/strong&gt; 一个高性能、开源的通用 RPC 框架，使用 HTTP/2 作为传输协议，支持多种语言 。gRPC 因其高效的序列化（Protocol Buffers）和多路复用特性，在代理应用中可以提供较低的延迟和带宽消耗，尤其适合移动端应用。Cloudflare 支持 gRPC 流量的代理 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REALITY:&lt;/strong&gt; Xray 引入的一种新的出站/入站协议特性，旨在通过借用目标网站的 TLS 证书指纹来消除服务器端 TLS 指纹特征，从而增强抗检测能力，同时保持前向保密性 。它允许用户在不购买域名或配置 TLS 服务器的情况下，向审查者呈现一个真实可信的 SNI (Server Name Indication)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XTLS:&lt;/strong&gt; 一种旨在减少 VLESS 和 Trojan 等协议中 TLS 加密层级所带来性能开销的技术 。它通过在特定条件下（如 &lt;code&gt;flow&lt;/code&gt; 设置为 &lt;code&gt;xtls-rprx-vision&lt;/code&gt;）直接处理内层数据，避免了多次 TLS 加解密，从而提升传输效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uTLS (μTLS):&lt;/strong&gt; 一个 TLS 库，允许应用程序模仿不同浏览器或操作系统的 TLS 指纹 。在代理客户端中使用 uTLS 可以帮助伪装连接发起者的真实身份，使其流量特征更接近普通浏览器行为，从而降被识别的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第二部分：代理协议深度解析&#34;&gt;&lt;a href=&#34;#第二部分：代理协议深度解析&#34; class=&#34;headerlink&#34; title=&#34;第二部分：代理协议深度解析&#34;&gt;&lt;/a&gt;第二部分：代理协议深度解析&lt;/h2&gt;&lt;p&gt;本部分将详细探讨几种主流的科学上网代理协议的原理、特性、优缺点及其在 x-ui 中的应用。&lt;/p&gt;
&lt;h3 id=&#34;2-1-Shadowsocks-SS&#34;&gt;&lt;a href=&#34;#2-1-Shadowsocks-SS&#34; class=&#34;headerlink&#34; title=&#34;2.1 Shadowsocks (SS)&#34;&gt;&lt;/a&gt;2.1 Shadowsocks (SS)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原理与工作机制:&lt;/strong&gt; Shadowsocks 是一种基于 SOCKS5 代理的加密传输协议，最初由 clowwindy 于 2012 年为绕过中国的防火长城 (GFW) 而设计 。它通过在客户端和远程服务器之间创建一个加密隧道来工作。客户端将流量通过本地 SOCKS5 代理发送到 Shadowsocks 客户端软件，该软件对流量进行加密后发送到 Shadowsocks 服务器，服务器解密后再将流量转发至目标地址 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全特性:&lt;/strong&gt; Shadowsocks 使用用户选择的加密算法（如 AES-256-GCM, ChaCha20-Poly1305）对数据进行加密 。较新的 Shadowsocks AEAD (Authenticated Encryption with Associated Data) 密码套件（如 2022-blake3-aes-256-gcm）提供了更强的安全性和抗重放攻击能力 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能特点:&lt;/strong&gt; Shadowsocks 以其轻量级和高效率著称，对网络速度影响较小，能够提供较快的浏览和流媒体体验 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混淆能力:&lt;/strong&gt; Shadowsocks 本身并不侧重于复杂的流量混淆，其主要目标是加密。然而，由于其流量模式与标准协议不同，在早期能够有效绕过基于简单规则的检测。随着 DPI 技术的发展，单纯的 Shadowsocks 流量可能被识别。&lt;/li&gt;
&lt;li&gt;优缺点:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点:&lt;/strong&gt; 设置相对简单，速度快，资源占用低，兼容性广（支持 Windows, macOS, Linux, Android, iOS）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点:&lt;/strong&gt; 协议特征相对明显，容易被高级 DPI 检测；不具备传统 VPN 的所有网络流量封装能力，仅代理通过其 SOCKS5 接口的流量 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-ui 中的配置:&lt;/strong&gt; 在 x-ui 中配置 Shadowsocks 时，主要参数包括加密方法、密码、监听端口和传输协议（通常是 TCP 和 UDP）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-2-VMess-Virtual-Mess&#34;&gt;&lt;a href=&#34;#2-2-VMess-Virtual-Mess&#34; class=&#34;headerlink&#34; title=&#34;2.2 VMess (Virtual Mess)&#34;&gt;&lt;/a&gt;2.2 VMess (Virtual Mess)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原理与工作机制:&lt;/strong&gt; VMess 是 V2Ray 项目（Xray 的前身和兼容核心）设计的一种主要代理协议，旨在提供比 Shadowsocks 更强的安全性和混淆性 。它在客户端和服务器之间建立加密连接，并通过动态改变数据包结构来增加流量分析的难度 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全特性:&lt;/strong&gt; VMess 使用对称加密（如 AES-128-GCM）和动态生成的会话 ID。它要求客户端和服务器共享精确的用户 ID (UUID) 和 alterId（用于改变加密方式）进行身份验证和加密 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能特点:&lt;/strong&gt; VMess 由于其加密和动态特性，相比 Shadowsocks 会有一定的性能开销，但通常仍能提供良好的速度 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混淆能力:&lt;/strong&gt; VMess 的设计目标之一就是抗检测。其动态协议特性使得流量难以被简单模式匹配。结合 TLS 和 WebSocket 等传输方式可以进一步增强混淆效果 。&lt;/li&gt;
&lt;li&gt;传输方式:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP:&lt;/strong&gt; 基础的 TCP 传输，可配合 TLS 加密。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket (WS):&lt;/strong&gt; 将 VMess 流量封装在 WebSocket 连接中，通常与 TLS 结合（VMess+WS+TLS），使其看起来像 HTTPS 流量，便于通过 CDN 中转和伪装 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC:&lt;/strong&gt; 将 VMess 流量封装在 gRPC 连接中，利用 HTTP/2 的多路复用特性，可以提供高效的传输，同样可以结合 TLS 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优缺点:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点:&lt;/strong&gt; 安全性高，抗检测能力强于 Shadowsocks，支持多种传输方式，配置灵活 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点:&lt;/strong&gt; 配置相对复杂，性能开销略高于 Shadowsocks 和 VLESS 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-ui 中的配置:&lt;/strong&gt; 在 x-ui 中配置 VMess 时，需要设置用户 UUID、alterId、监听端口、传输方式（TCP, WS, gRPC 等），以及相应的 TLS 设置（域名、证书路径）或 WebSocket 设置（路径、Host）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-3-VLESS-Virtual-Less&#34;&gt;&lt;a href=&#34;#2-3-VLESS-Virtual-Less&#34; class=&#34;headerlink&#34; title=&#34;2.3 VLESS (Virtual Less)&#34;&gt;&lt;/a&gt;2.3 VLESS (Virtual Less)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;原理与工作机制:&lt;/strong&gt; VLESS 是在 VMess 基础上发展而来的一种更轻量级的传输协议，旨在简化协议本身并提高效率 。与 VMess 不同，VLESS 本身不包含加密和身份验证机制，而是依赖于外部传输层（如 TLS）来提供这些功能 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安全特性:&lt;/strong&gt; VLESS 的安全性主要依赖于其底层的传输协议，如 TLS (XTLS) 或 REALITY。当与这些技术结合时，它可以提供非常高的安全性 。VLESS 本身不进行加密，这使得其头部特征更少，更难被检测。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;性能特点:&lt;/strong&gt; 由于其极简设计和无内置加密，VLESS 的性能开销非常低，通常比 VMess 更快，延迟更低，尤其适合对速度要求高的场景 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;混淆能力:&lt;/p&gt;
&lt;p&gt; VLESS 的核心优势在于其简洁性，这使得其流量本身更难被识别。当结合 XTLS 或 REALITY 时，其混淆能力非常出色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;XTLS (XTLS-Vision, XTLS-RPRX-Direct):&lt;/strong&gt; XTLS 是一种专为 VLESS 和 Trojan 设计的 TLS 增强技术，旨在通过优化 TLS 握手和数据传输路径，减少加密层级，从而显著提高性能，同时保持强大的安全性 。&lt;code&gt;xtls-rprx-vision&lt;/code&gt; 是 XTLS 的一种流控模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REALITY:&lt;/strong&gt; 如前所述，REALITY 通过借用真实网站的 TLS 证书指纹来消除服务器端的 TLS 特征，极大地增强了抗检测能力 。VLESS 是 REALITY 的理想搭配协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;传输方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP:&lt;/strong&gt; VLESS 可以直接通过 TCP 传输，通常与 XTLS 或 REALITY 结合使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket (WS):&lt;/strong&gt; VLESS 同样可以封装在 WebSocket 中，并结合 TLS (VLESS+WS+TLS)，以利用 CDN 和伪装流量 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC:&lt;/strong&gt; VLESS 也可以通过 gRPC 传输，并结合 TLS (VLESS+gRPC+TLS)，提供高效的多路复用连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点:&lt;/strong&gt; 性能极高，延迟低，配置相对 VMess 简单（当不考虑复杂的 XTLS/REALITY 时），灵活性强，抗检测能力强（尤其配合 REALITY）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点:&lt;/strong&gt; 依赖外部加密，如果底层传输（如裸 TCP）未加密则不安全；高级配置（如 REALITY）对理解有一定要求 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;x-ui 中的配置:&lt;/strong&gt; 在 x-ui 中配置 VLESS 时，主要设置用户 UUID、监听端口、传输方式（TCP, WS, gRPC），以及流控模式（如 &lt;code&gt;xtls-rprx-vision&lt;/code&gt; for XTLS，或不设置流控用于普通 TLS/WS）。如果使用 TLS，需要配置域名和证书路径。如果使用 REALITY，需要配置 &lt;code&gt;dest&lt;/code&gt;（目标伪装域名:端口）、&lt;code&gt;serverNames&lt;/code&gt;（SNI）、&lt;code&gt;privateKey&lt;/code&gt;、&lt;code&gt;shortIds&lt;/code&gt; 等参数 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-4-Trojan&#34;&gt;&lt;a href=&#34;#2-4-Trojan&#34; class=&#34;headerlink&#34; title=&#34;2.4 Trojan&#34;&gt;&lt;/a&gt;2.4 Trojan&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原理与工作机制:&lt;/strong&gt; Trojan 协议的设计目标是模仿互联网上最常见的 HTTPS 流量，使其难以被检测和干扰 。它通过在服务器上监听一个端口（通常是 443），并处理进来的 TLS 连接。如果连接是合法的 Trojan 请求（通过密码验证），则代理流量；否则，将流量转发到服务器上预设的真实网站（如本地 Nginx 服务），从而使服务器在外部探测下表现得像一个普通的 HTTPS 网站 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全特性:&lt;/strong&gt; Trojan 强制使用 TLS 对所有流量进行加密，确保了传输的机密性和完整性。身份验证通过预共享的密码完成 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能特点:&lt;/strong&gt; 由于其设计直接利用 TLS，避免了额外的封装层，Trojan 通常具有较好的性能，接近于直接的 HTTPS 连接 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混淆能力:&lt;/strong&gt; Trojan 的核心优势在于其出色的混淆能力。它通过完全模拟 HTTPS 行为，包括 TLS 握手和数据传输，使得 DPI 系统很难将其与正常的 HTTPS 流量区分开来 。&lt;/li&gt;
&lt;li&gt;传输方式:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP (over TLS):&lt;/strong&gt; 这是 Trojan 的标准工作方式，直接在 TLS 加密的 TCP 连接上传输代理数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC:&lt;/strong&gt; Trojan 也可以通过 gRPC 传输，并结合 TLS (Trojan+gRPC+TLS)，这可以利用 gRPC 的特性，同时保持 Trojan 的 HTTPS 伪装。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优缺点:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点:&lt;/strong&gt; 伪装性极好，抗检测能力强，性能较好，设置相对简单（相比 VMess 的复杂配置）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点:&lt;/strong&gt; 依赖于有效的 TLS 证书和域名配置；如果密码泄露或配置不当，安全性会受影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-ui 中的配置:&lt;/strong&gt; 在 x-ui 中配置 Trojan 时，需要设置密码、监听端口（通常 443）、域名（用于 TLS 证书）、证书和私钥路径。对于 gRPC 传输，还需要配置 &lt;code&gt;serviceName&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-5-WireGuard&#34;&gt;&lt;a href=&#34;#2-5-WireGuard&#34; class=&#34;headerlink&#34; title=&#34;2.5 WireGuard&#34;&gt;&lt;/a&gt;2.5 WireGuard&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原理与工作机制:&lt;/strong&gt; WireGuard 是一种现代、高性能的 VPN 协议，旨在提供比传统 VPN 协议（如 OpenVPN, IPsec）更简单、更快速、更安全的解决方案 。它使用最先进的密码学技术，通过 UDP 传输数据，并在内核空间运行以提高效率 。WireGuard 通过公钥加密进行身份验证和密钥交换 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全特性:&lt;/strong&gt; WireGuard 使用固定的密码套件，包括 ChaCha20进行对称加密，Poly1305进行消息认证，Curve25519进行椭圆曲线 Diffie-Hellman 密钥交换，BLAKE2s进行哈希 。这种固定的选择减少了因密码套件协商错误导致的安全风险。它还提供完美前向保密。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能特点:&lt;/strong&gt; WireGuard 以其极高的性能和低延迟著称，代码量小（Linux 内核模块约 4000 行代码），易于审计，且资源消耗低，非常适合移动设备和嵌入式系统 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混淆能力:&lt;/strong&gt; WireGuard 本身不以流量混淆为主要设计目标。其流量特征（基于 UDP）相对固定，虽然不像 HTTPS 那样普遍，但在某些网络环境下可能被识别或限制。它不具备像 Trojan 或 VLESS+REALITY 那样的 HTTPS 伪装能力。&lt;/li&gt;
&lt;li&gt;优缺点:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点:&lt;/strong&gt; 速度极快，延迟低，安全性高，配置简单，代码量小，跨平台支持良好 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点:&lt;/strong&gt; 基于 UDP，可能在对 UDP 不友好的网络中表现不佳；协议相对较新，虽然经过广泛审计，但历史积淀不如 OpenVPN；隐私方面，默认配置下服务器会记录对端 IP，需要服务提供商额外处理以保护用户隐私 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-ui 中的配置:&lt;/strong&gt; 3x-ui 面板支持 WireGuard 作为一种入站协议 。配置通常涉及设置监听端口、服务器私钥、客户端公钥、分配给客户端的 IP 地址以及允许的 IP 范围等。x-ui 简化了这个过程，但具体的界面选项需要参考面板本身 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协议资源消耗与演进趋势&#34;&gt;&lt;a href=&#34;#协议资源消耗与演进趋势&#34; class=&#34;headerlink&#34; title=&#34;协议资源消耗与演进趋势&#34;&gt;&lt;/a&gt;协议资源消耗与演进趋势&lt;/h3&gt;&lt;p&gt;在资源消耗方面，一般而言，VLESS 由于其极简设计，通常比 VMess 更轻量，CPU 和内存占用更低 。Shadowsocks 也是一种非常轻量级的协议 。WireGuard 因其内核态实现和高效密码学，资源消耗极低 。Trojan 协议由于直接利用 TLS，其资源消耗主要取决于 TLS 的实现，通常也比较高效。相比之下，VMess 由于其内置的加密和动态特性，可能会有稍高的资源占用。实际的资源消耗会受到并发连接数、流量大小、服务器硬件配置以及具体实现（如 Xray 核心的优化程度）等多种因素影响。根据 Istio（使用 Envoy 代理，与 Xray 角色类似）的数据，代理本身每秒处理 1000 个请求大约消耗 0.2 至 0.5 vCPU 和 40MB 至 60MB 内存 ，这可以作为一个大致的参考，但 Xray 的具体表现会有所不同。&lt;/p&gt;
&lt;p&gt;科学上网协议的演进清晰地反映了审查技术与反审查技术之间的持续博弈。最初的 Shadowsocks 提供了基础的加密代理功能。随着 DPI 技术对 Shadowsocks 特征的识别，V2Ray 项目及其核心协议 VMess 应运而生，提供了更强的混淆和灵活性。然而，VMess 的复杂性也带来了一定的性能开销和配置难度。随后，VLESS 协议以其“更少即是更多”的理念出现，通过剥离内置加密，依赖底层传输（如 TLS/XTLS/REALITY）来保证安全，从而实现了更高的性能和更强的隐蔽性 。XTLS 和 REALITY 等技术的出现，进一步提升了 VLESS 和 Trojan 等协议的性能与抗检测能力，代表了当前协议发展的前沿方向 。这种演进趋势表明，未来的协议发展将更加注重性能、安全性和伪装性的平衡，以及对不断变化的审查策略的适应能力。&lt;/p&gt;
&lt;h2 id=&#34;第三部分：使用-x-ui-与-Cloudflare-搭建节点&#34;&gt;&lt;a href=&#34;#第三部分：使用-x-ui-与-Cloudflare-搭建节点&#34; class=&#34;headerlink&#34; title=&#34;第三部分：使用 x-ui 与 Cloudflare 搭建节点&#34;&gt;&lt;/a&gt;第三部分：使用 x-ui 与 Cloudflare 搭建节点&lt;/h2&gt;&lt;p&gt;本部分将详细指导如何在 VPS 上安装 x-ui 面板，并结合 Cloudflare 服务搭建各类型的科学上网节点。&lt;/p&gt;
&lt;h3 id=&#34;3-1-VPS-与域名准备&#34;&gt;&lt;a href=&#34;#3-1-VPS-与域名准备&#34; class=&#34;headerlink&#34; title=&#34;3.1 VPS 与域名准备&#34;&gt;&lt;/a&gt;3.1 VPS 与域名准备&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;选择 VPS (Virtual Private Server):&lt;ul&gt;
&lt;li&gt;选择一个位于审查区域之外的 VPS 提供商。考虑因素包括服务器位置（影响延迟）、带宽、CPU、内存、价格以及提供商的声誉。建议选择 KVM 虚拟化的 VPS 。&lt;/li&gt;
&lt;li&gt;操作系统推荐选择较新的稳定版 Linux 发行版，如 Ubuntu 20.04/22.04, Debian 10/11, CentOS 7+ (尽管 CentOS 7 即将 EOL) 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注册域名:&lt;ul&gt;
&lt;li&gt;你需要一个域名用于配置 TLS 加密，特别是当使用 WebSocket、gRPC 或 REALITY 等需要域名验证的场景时。可以选择如 Namecheap, Porkbun 等域名注册商 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基础服务器设置:&lt;ul&gt;
&lt;li&gt;通过 SSH 连接到你的 VPS。&lt;/li&gt;
&lt;li&gt;更新系统软件包：&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y&lt;/code&gt; (以 Debian/Ubuntu 为例) 。&lt;/li&gt;
&lt;li&gt;安装必要工具，如 &lt;code&gt;curl&lt;/code&gt; 和 &lt;code&gt;socat&lt;/code&gt;：&lt;code&gt;sudo apt install curl socat -y&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-2-安装-x-ui-面板-MHSanaei-3x-ui&#34;&gt;&lt;a href=&#34;#3-2-安装-x-ui-面板-MHSanaei-3x-ui&#34; class=&#34;headerlink&#34; title=&#34;3.2 安装 x-ui 面板 (MHSanaei/3x-ui)&#34;&gt;&lt;/a&gt;3.2 安装 x-ui 面板 (MHSanaei/3x-ui)&lt;/h3&gt;&lt;p&gt;MHSanaei 的 3x-ui 是一个功能丰富的 Xray 管理面板。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;执行安装脚本:&lt;/p&gt;
&lt;p&gt;通过 SSH 连接到 VPS 后，运行以下命令安装最新版本的 3x-ui ：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh)&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装过程中，脚本可能会提示你设置面板的用户名、密码和访问端口 。如果选择不自定义，可能会随机生成。请务必记录这些信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;访问 x-ui 面板:&lt;/strong&gt; 安装完成后，通过浏览器访问 &lt;code&gt;http://&amp;lt;你的VPS_IP&amp;gt;:&amp;lt;面板端口&amp;gt;&lt;/code&gt; 来打开 x-ui 登录界面 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;初始登录与安全设置:&lt;/strong&gt; 使用安装时设置或脚本生成的用户名和密码登录。首次登录后，强烈建议立即修改默认的用户名和密码，并考虑修改面板的访问端口和一个随机的 URL 根路径（Web Base Path）以增强安全性 。这些设置通常在 x-ui 的“面板设置”中可以找到。可以通过在 VPS 终端运行 &lt;code&gt;x-ui&lt;/code&gt; 命令来访问管理菜单，其中包括重置 Web Base Path 等选项 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-3-SSL-证书管理&#34;&gt;&lt;a href=&#34;#3-3-SSL-证书管理&#34; class=&#34;headerlink&#34; title=&#34;3.3 SSL 证书管理&#34;&gt;&lt;/a&gt;3.3 SSL 证书管理&lt;/h3&gt;&lt;p&gt;为了启用 TLS 加密（对于 HTTPS 伪装和安全至关重要），你需要为你的域名获取 SSL 证书。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用 x-ui 内置的 ACME 功能 (推荐):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保你的域名已正确解析到 VPS 的 IP 地址（A 记录）。&lt;/li&gt;
&lt;li&gt;在 VPS 终端运行 &lt;code&gt;x-ui&lt;/code&gt; 命令，选择“SSL 证书管理” (SSL Certificate Management) 。&lt;/li&gt;
&lt;li&gt;按照提示选择“获取 SSL”(Get SSL)，输入你的域名，脚本会自动尝试通过 Let’s Encrypt 等 ACME 提供商申请证书。&lt;/li&gt;
&lt;li&gt;申请成功后，证书和私钥文件通常会保存在服务器的特定路径（如 &lt;code&gt;/root/.acme.sh/yourdomain.com/&lt;/code&gt; 或由 x-ui 指定的路径），并在 x-ui 面板中配置入站规则时引用这些路径。&lt;/li&gt;
&lt;li&gt;x-ui 通常支持自动续签申请到的证书 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用 Certbot 手动申请 (备选方案):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 VPS 上安装 Certbot ：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo apt install certbot python3-certbot-nginx # (或相应的 Apache 插件)
# 或者更通用的方式
sudo apt install software-properties-common
sudo add-apt-repository ppa:certbot/certbot -y # 可能需要确认
sudo apt update
sudo apt install certbot -y&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;申请证书（以 standalone 模式为例，需要临时占用 80 端口；确保 Cloudflare DNS 记录此时为“DNS Only”）：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo certbot certonly --standalone --agree-tos --register-unsafely-without-email -d yourdomain.com&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 yourdomain.com 替换为你的域名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;成功后，证书和私钥路径通常为 &lt;code&gt;/etc/letsencrypt/live/yourdomain.com/fullchain.pem&lt;/code&gt; 和 &lt;code&gt;/etc/letsencrypt/live/yourdomain.com/privkey.pem&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置自动续签：Certbot 通常会自动创建 systemd timer 或 cron job 来处理续签。可以通过 &lt;code&gt;sudo certbot renew --dry-run&lt;/code&gt; 测试续签。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;使用 Cloudflare 源服务器证书 (Origin Certificate):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Cloudflare 仪表盘的 “SSL/TLS” -&amp;gt; “源服务器” 处创建源证书。Cloudflare 会提供证书和私钥。&lt;/li&gt;
&lt;li&gt;将这些证书和私钥内容上传到你的 VPS，并在 x-ui 中配置入站规则时直接粘贴内容或引用文件路径。&lt;/li&gt;
&lt;li&gt;这种方式下，Cloudflare 与你的源服务器之间的连接是加密的，但客户端到 Cloudflare 的连接仍需由 Cloudflare 提供的边缘证书处理。SSL/TLS 模式需设置为 “Full (Strict)”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;通过 Cloudflare 获取 SSL (x-ui 功能):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你的域名通过 Cloudflare 解析，x-ui 的某些版本提供了通过 Cloudflare API 直接申请 SSL 证书的功能 。&lt;/li&gt;
&lt;li&gt;这需要你的 Cloudflare 注册邮箱和 Global API Key。在 x-ui 命令行菜单中选择“Cloudflare SSL 证书”并按提示操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-4-x-ui-基础节点配置-不使用-Cloudflare-CDN-Tunnel&#34;&gt;&lt;a href=&#34;#3-4-x-ui-基础节点配置-不使用-Cloudflare-CDN-Tunnel&#34; class=&#34;headerlink&#34; title=&#34;3.4 x-ui 基础节点配置 (不使用 Cloudflare CDN/Tunnel)&#34;&gt;&lt;/a&gt;3.4 x-ui 基础节点配置 (不使用 Cloudflare CDN/Tunnel)&lt;/h3&gt;&lt;p&gt;登录 x-ui 面板后，进入“入站列表”(Inbounds) 页面，点击“添加入站”(Add Inbound) 来创建新的代理节点。以下是一些常见协议的配置要点：&lt;/p&gt;
&lt;h4 id=&#34;3-4-1-VLESS-TCP-XTLS-Vision-REALITY&#34;&gt;&lt;a href=&#34;#3-4-1-VLESS-TCP-XTLS-Vision-REALITY&#34; class=&#34;headerlink&#34; title=&#34;3.4.1 VLESS + TCP + XTLS (Vision/REALITY)&#34;&gt;&lt;/a&gt;3.4.1 VLESS + TCP + XTLS (Vision/REALITY)&lt;/h4&gt;&lt;p&gt;这是目前推荐的高性能、高隐蔽性配置之一。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;备注 (Remark):&lt;/strong&gt; 给连接起一个描述性名称，如 &lt;code&gt;VLESS-XTLS-Direct&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议 (Protocol):&lt;/strong&gt; 选择 &lt;code&gt;vless&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监听IP (Listen IP):&lt;/strong&gt; 留空表示监听所有可用 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; 推荐使用 &lt;code&gt;443&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户ID (ID / UUID):&lt;/strong&gt; x-ui 会自动生成一个 UUID，保持默认即可。这是客户端连接的凭证。&lt;/li&gt;
&lt;li&gt;流控 (Flow):&lt;ul&gt;
&lt;li&gt;对于 XTLS Vision: 选择 &lt;code&gt;xtls-rprx-vision&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输 (Transport / Network):&lt;/strong&gt; 选择 &lt;code&gt;tcp&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;TLS 设置:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启用 TLS (Enable TLS):&lt;/strong&gt; &lt;em&gt;不勾选&lt;/em&gt; (因为 XTLS/REALITY 有自己的 TLS 处理机制)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启用 XTLS (Enable XTLS):&lt;/strong&gt; &lt;em&gt;勾选&lt;/em&gt; (如果使用 XTLS Vision)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;REALITY 设置 (如果选择 REALITY 而非 XTLS Vision):&lt;ul&gt;
&lt;li&gt;在 x-ui 面板中，通常 VLESS 协议下会有专门的 REALITY 安全设置区域 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接受代理协议 (Accept Proxy Protocol):&lt;/strong&gt; 可能需要勾选此项或类似选项来启用 REALITY 特有的参数 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标地址 (Dest):&lt;/strong&gt; 填写一个真实存在的、支持 TLSv1.3 和 H2 的境外网站域名和端口，例如 &lt;code&gt;www.microsoft.com:443&lt;/code&gt; 或 &lt;code&gt;dl.google.com:443&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server Names (SNI):&lt;/strong&gt; 填写目标地址对应的域名，例如 &lt;code&gt;www.microsoft.com&lt;/code&gt; 或 &lt;code&gt;dl.google.com&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私钥 (Private Key):&lt;/strong&gt; 点击面板上的“生成新证书”或类似按钮生成 X25519 密钥对，这里填入私钥 1。公钥会自动生成或需要一并记录给客户端。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Short IDs:&lt;/strong&gt; 可以留空或生成一个随机的 Short ID，用于区分客户端 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uTLS 指纹 (uTLS):&lt;/strong&gt; 选择一个浏览器指纹，如 &lt;code&gt;chrome&lt;/code&gt; 或 &lt;code&gt;firefox&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;域名 (Domain name):&lt;/strong&gt; 对于 XTLS Vision（非 REALITY），你需要填写真实申请过 SSL 证书的域名 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书公钥文件路径 (Certificate File Path / Public key file path):&lt;/strong&gt; 填写 SSL 证书的 &lt;code&gt;fullchain.pem&lt;/code&gt; 文件路径 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书私钥文件路径 (Key File Path / Private key file path):&lt;/strong&gt; 填写 SSL 证书的 &lt;code&gt;privkey.pem&lt;/code&gt; 文件路径 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-4-2-VMess-TCP-TLS&#34;&gt;&lt;a href=&#34;#3-4-2-VMess-TCP-TLS&#34; class=&#34;headerlink&#34; title=&#34;3.4.2 VMess + TCP + TLS&#34;&gt;&lt;/a&gt;3.4.2 VMess + TCP + TLS&lt;/h4&gt;&lt;p&gt;这种配置提供了较好的安全性和伪装性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;备注 (Remark):&lt;/strong&gt; 例如 &lt;code&gt;VMess-TCP-TLS&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议 (Protocol):&lt;/strong&gt; 选择 &lt;code&gt;vmess&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监听IP (Listen IP):&lt;/strong&gt; 留空。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; 推荐 &lt;code&gt;443&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户ID (UUID):&lt;/strong&gt; 自动生成，保持默认。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;额外ID (AlterID):&lt;/strong&gt; 设置一个数字，如 &lt;code&gt;0&lt;/code&gt; (较新版本 Xray 中 alterId 作用减弱，可以设为0或较低值)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加密方式 (Security):&lt;/strong&gt; 通常保持默认（如 &lt;code&gt;auto&lt;/code&gt; 或 &lt;code&gt;aes-128-gcm&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输 (Transport / Network):&lt;/strong&gt; 选择 &lt;code&gt;tcp&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;TLS 设置:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启用 TLS (Enable TLS):&lt;/strong&gt; &lt;em&gt;勾选&lt;/em&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;域名 (Domain name):&lt;/strong&gt; 填写你拥有并已申请 SSL 证书的域名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书公钥文件路径 (Certificate File Path):&lt;/strong&gt; 填写 SSL 证书的 &lt;code&gt;fullchain.pem&lt;/code&gt; 文件路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书私钥文件路径 (Key File Path):&lt;/strong&gt; 填写 SSL 证书的 &lt;code&gt;privkey.pem&lt;/code&gt; 文件路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALPN:&lt;/strong&gt; 可以留空或根据需要填写 (如 &lt;code&gt;h2,http/1.1&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-4-3-Trojan-TCP-TLS&#34;&gt;&lt;a href=&#34;#3-4-3-Trojan-TCP-TLS&#34; class=&#34;headerlink&#34; title=&#34;3.4.3 Trojan + TCP + TLS&#34;&gt;&lt;/a&gt;3.4.3 Trojan + TCP + TLS&lt;/h4&gt;&lt;p&gt;Trojan 以其优秀的 HTTPS 伪装著称。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;备注 (Remark):&lt;/strong&gt; 例如 &lt;code&gt;Trojan-TCP-TLS&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议 (Protocol):&lt;/strong&gt; 选择 &lt;code&gt;trojan&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监听IP (Listen IP):&lt;/strong&gt; 留空。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; 必须是 &lt;code&gt;443&lt;/code&gt; 以获得最佳伪装效果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密码 (Password):&lt;/strong&gt; 设置一个强密码，客户端连接时需要使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输 (Transport / Network):&lt;/strong&gt; 选择 &lt;code&gt;tcp&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;TLS 设置:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启用 TLS (Enable TLS):&lt;/strong&gt; &lt;em&gt;勾选&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;域名 (Domain name):&lt;/strong&gt; 填写你拥有并已申请 SSL 证书的域名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书公钥文件路径 (Certificate File Path):&lt;/strong&gt; 填写 SSL 证书的 &lt;code&gt;fullchain.pem&lt;/code&gt; 文件路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书私钥文件路径 (Key File Path):&lt;/strong&gt; 填写 SSL 证书的 &lt;code&gt;privkey.pem&lt;/code&gt; 文件路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALPN:&lt;/strong&gt; 建议填写 &lt;code&gt;h2,http/1.1&lt;/code&gt; 以更好地模拟 HTTPS 流量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fallback (回落):&lt;/strong&gt; 可以配置一个回落地址（如本地运行的 Web 服务器 &lt;code&gt;127.0.0.1:80&lt;/code&gt;），当非 Trojan 协议访问该端口时，流量会被转发到此地址，增强伪装性。x-ui 中可能有相应配置项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-4-4-Shadowsocks-AEAD-Ciphers&#34;&gt;&lt;a href=&#34;#3-4-4-Shadowsocks-AEAD-Ciphers&#34; class=&#34;headerlink&#34; title=&#34;3.4.4 Shadowsocks (AEAD Ciphers)&#34;&gt;&lt;/a&gt;3.4.4 Shadowsocks (AEAD Ciphers)&lt;/h4&gt;&lt;p&gt;简单高效的选择。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;备注 (Remark):&lt;/strong&gt; 例如 &lt;code&gt;SS-AEAD&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议 (Protocol):&lt;/strong&gt; 选择 &lt;code&gt;shadowsocks&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监听IP (Listen IP):&lt;/strong&gt; 留空。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; 选择一个未被占用的端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密码 (Password):&lt;/strong&gt; 设置一个强密码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加密方式 (Encryption / Cipher):&lt;/strong&gt; 强烈推荐使用 AEAD 加密，如 &lt;code&gt;2022-blake3-aes-256-gcm&lt;/code&gt; (如果 x-ui 和客户端支持) 或 &lt;code&gt;aes-256-gcm&lt;/code&gt;, &lt;code&gt;chacha20-ietf-poly1305&lt;/code&gt; 。避免使用旧的非 AEAD 加密方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输 (Network):&lt;/strong&gt; 可以选择 &lt;code&gt;tcp&lt;/code&gt; 或 &lt;code&gt;tcp,udp&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-4-5-WireGuard&#34;&gt;&lt;a href=&#34;#3-4-5-WireGuard&#34; class=&#34;headerlink&#34; title=&#34;3.4.5 WireGuard&#34;&gt;&lt;/a&gt;3.4.5 WireGuard&lt;/h4&gt;&lt;p&gt;3x-ui 支持 WireGuard 作为入站协议 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;备注 (Remark):&lt;/strong&gt; 例如 &lt;code&gt;WireGuard-VPN&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议 (Protocol):&lt;/strong&gt; 选择 &lt;code&gt;wireguard&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监听IP (Listen IP):&lt;/strong&gt; 留空。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; WireGuard 默认使用 UDP 协议，端口通常为 &lt;code&gt;51820&lt;/code&gt;，但可以自定义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私钥 (Private Key):&lt;/strong&gt; 服务器的 WireGuard 私钥。x-ui 可能会自动生成或提供生成按钮。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公钥 (Public Key):&lt;/strong&gt; 服务器的 WireGuard 公钥（由私钥派生）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 地址 (Addresses):&lt;/strong&gt; 分配给 WireGuard 服务器接口的内部 IP 地址和子网掩码，例如 &lt;code&gt;10.0.8.1/24&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MTU:&lt;/strong&gt; 通常保持默认或根据网络情况调整。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS:&lt;/strong&gt; 可以指定推送给客户端的 DNS 服务器。&lt;/li&gt;
&lt;li&gt;对等端 (Peers) / 用户 (Clients):&lt;ul&gt;
&lt;li&gt;为每个客户端生成独立的密钥对（公钥和私钥）。&lt;/li&gt;
&lt;li&gt;在服务器端添加客户端的公钥。&lt;/li&gt;
&lt;li&gt;为客户端分配一个隧道内的 IP 地址（如 &lt;code&gt;10.0.8.2&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;配置 &lt;code&gt;AllowedIPs&lt;/code&gt;：对于客户端，通常设为 &lt;code&gt;0.0.0.0/0, ::/0&lt;/code&gt; 以路由所有流量通过 VPN。在服务器端，对应客户端的 &lt;code&gt;AllowedIPs&lt;/code&gt; 设为其分配的隧道 IP (如 &lt;code&gt;10.0.8.2/32&lt;/code&gt;)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;重要提示:&lt;/strong&gt; 上述 x-ui 面板中的具体选项名称可能因 3x-ui 版本略有不同。请以你实际使用的面板界面为准。配置完成后，务必点击“添加”或“保存”并根据提示重启 Xray 服务使配置生效。&lt;/p&gt;
&lt;h3 id=&#34;3-5-集成-Cloudflare-CDN-适用于-WebSocket-和-gRPC-节点&#34;&gt;&lt;a href=&#34;#3-5-集成-Cloudflare-CDN-适用于-WebSocket-和-gRPC-节点&#34; class=&#34;headerlink&#34; title=&#34;3.5 集成 Cloudflare CDN (适用于 WebSocket 和 gRPC 节点)&#34;&gt;&lt;/a&gt;3.5 集成 Cloudflare CDN (适用于 WebSocket 和 gRPC 节点)&lt;/h3&gt;&lt;p&gt;将 Cloudflare CDN 置于代理服务器之前，可以隐藏源服务器 IP、防御 DDoS 攻击，并可能为特定地区用户加速。这主要适用于基于 WebSocket 或 gRPC 的传输方式，因为它们能更好地兼容 HTTP/HTTPS 流量模式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare DNS 设置:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;登录 Cloudflare 账户，选择你的域名。&lt;/li&gt;
&lt;li&gt;进入 “DNS” 管理页面。&lt;/li&gt;
&lt;li&gt;添加一个 A 记录，将你的域名（或子域名，如 &lt;code&gt;proxy.yourdomain.com&lt;/code&gt;）指向你的 VPS IP 地址 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键步骤 - SSL 证书申请期间:&lt;/strong&gt; 在申请 SSL 证书（无论是通过 x-ui 的 ACME 还是手动用 Certbot）时，必须确保此 DNS 记录的“代理状态”(Proxy status) 为“仅限 DNS”(DNS Only)，即云朵图标为灰色 。这是因为 Let’s Encrypt 等 CA 需要直接验证你的服务器 IP。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键步骤 - 启用 CDN:&lt;/strong&gt; SSL 证书成功获取并配置到 x-ui 后，回到 Cloudflare DNS 设置页面，将该 A 记录的“代理状态”切换为“已代理”(Proxied)，即云朵图标变为橙色。这样流量才会经过 Cloudflare CDN 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare SSL/TLS 模式:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;在 Cloudflare 仪表盘的 “SSL/TLS” -&amp;gt; “概述” (Overview) 页面，将 SSL/TLS 加密模式设置为 &lt;strong&gt;“Full (Strict)”&lt;/strong&gt; (完全（严格）) 。这确保浏览器到 Cloudflare 以及 Cloudflare 到源服务器的连接都是严格加密和验证的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在 Cloudflare 网络设置中启用 WebSocket 和 gRPC:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;在 Cloudflare 仪表盘的 “网络” (Network) 页面：&lt;ul&gt;
&lt;li&gt;确保 “WebSockets” 开关已打开（通常默认开启）。&lt;/li&gt;
&lt;li&gt;如果使用 gRPC 传输，确保 “gRPC” 开关已打开 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC 要求:&lt;/strong&gt; 源服务器上的 gRPC 端点必须监听 443 端口，支持 TLS 和 HTTP/2，并通过 ALPN 广播 HTTP/2。请求的 &lt;code&gt;Content-Type&lt;/code&gt; 头部应为 &lt;code&gt;application/grpc&lt;/code&gt; 或 &lt;code&gt;application/grpc+&amp;lt;message_type&amp;gt;&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-ui 配置 VLESS + WebSocket + TLS + CDN:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;在 x-ui 中添加入站：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议 (Protocol):&lt;/strong&gt; &lt;code&gt;vless&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; 设置一个源服务器上的监听端口，例如 &lt;code&gt;8443&lt;/code&gt; (或其他非 443 端口，因为 443 由 Cloudflare 面向公网)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输 (Transport / Network):&lt;/strong&gt; 选择 &lt;code&gt;ws&lt;/code&gt; (WebSocket) 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路径 (Path):&lt;/strong&gt; 设置一个 WebSocket 路径，例如 &lt;code&gt;/myvlessws&lt;/code&gt;。这个路径需要隐蔽一些，不要使用过于常见的词汇。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host (请求头):&lt;/strong&gt; 填写你在 Cloudflare DNS 中设置并开启代理的域名（如 &lt;code&gt;proxy.yourdomain.com&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;TLS 设置:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启用 TLS (Enable TLS):&lt;/strong&gt; &lt;em&gt;勾选&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;域名 (Domain name):&lt;/strong&gt; 填写你的域名（&lt;code&gt;proxy.yourdomain.com&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书公钥文件路径 (Certificate File Path):&lt;/strong&gt; 填写之前申请的 SSL 证书的 &lt;code&gt;fullchain.pem&lt;/code&gt; 路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书私钥文件路径 (Key File Path):&lt;/strong&gt; 填写 SSL 证书的 &lt;code&gt;privkey.pem&lt;/code&gt; 路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端连接时，地址填 &lt;code&gt;proxy.yourdomain.com&lt;/code&gt;，端口填 &lt;code&gt;443&lt;/code&gt; (Cloudflare 的端口)，传输选 WebSocket，路径填 &lt;code&gt;/myvlessws&lt;/code&gt;，底层传输安全选 TLS，SNI/Host 填 &lt;code&gt;proxy.yourdomain.com&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-ui 配置 VMess + WebSocket + TLS + CDN:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;配置方法与 VLESS+WS+TLS 类似 ：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议 (Protocol):&lt;/strong&gt; &lt;code&gt;vmess&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; 源服务器监听端口，如 &lt;code&gt;8443&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输 (Transport / Network):&lt;/strong&gt; &lt;code&gt;ws&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路径 (Path):&lt;/strong&gt; 例如 &lt;code&gt;/myvmessws&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host (请求头):&lt;/strong&gt; 你的 CDN 域名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS 设置:&lt;/strong&gt; 同上，使用你的域名和证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端连接参数类似，注意协议选择 VMess 并填写 UUID 和 AlterID。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-ui 配置 Trojan + gRPC + TLS + CDN:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议 (Protocol):&lt;/strong&gt; &lt;code&gt;trojan&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; 源服务器监听端口，如 &lt;code&gt;8443&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输 (Transport / Network):&lt;/strong&gt; &lt;code&gt;grpc&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC 服务名称 (serviceName / Service Name):&lt;/strong&gt; 设置一个服务名称，例如 &lt;code&gt;mytrojangrpc&lt;/code&gt;。客户端连接时需要匹配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS 设置:&lt;/strong&gt; 同上，使用你的域名和证书。&lt;/li&gt;
&lt;li&gt;客户端连接时，地址填 CDN 域名，端口 &lt;code&gt;443&lt;/code&gt;，传输选 gRPC，服务名称填 &lt;code&gt;mytrojangrpc&lt;/code&gt;，底层传输安全选 TLS，SNI 填 CDN 域名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare gRPC 注意事项:&lt;/strong&gt; Cloudflare WAF 对 gRPC 内容的检查有限，主要在连接阶段进行头部检查 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-ui 配置 VLESS + gRPC + TLS + CDN:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;配置方法与 Trojan+gRPC+TLS 类似：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;协议 (Protocol):&lt;/strong&gt; &lt;code&gt;vless&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; 源服务器监听端口，如 &lt;code&gt;8443&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输 (Transport / Network):&lt;/strong&gt; &lt;code&gt;grpc&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC 服务名称 (serviceName / Service Name):&lt;/strong&gt; 例如 &lt;code&gt;myvlessgrpc&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS 设置:&lt;/strong&gt; 同上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端连接参数类似。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 Cloudflare CDN 的主要好处是隐藏了源服务器的真实 IP 地址，这对于防止 IP 被直接攻击或封锁至关重要。此外，Cloudflare 的全球网络节点可以为地理位置较远的用户提供一定的访问速度优化（通过缓存静态内容和更优的路由，尽管对于动态代理流量，缓存效果有限）。同时，Cloudflare 也提供了基础的 DDoS 防护。然而，所有流量都经过 Cloudflare 网络，意味着 Cloudflare 有能力检查（在一定程度上，特别是对于未加密或解密后的流量）和记录这些流量，并且其自身也可能因为合规原因对特定类型的流量进行限制或阻断 。这是一个需要在便利性和潜在风险之间进行权衡的因素。&lt;/p&gt;
&lt;h3 id=&#34;3-6-使用-Cloudflare-Workers-作为代理层&#34;&gt;&lt;a href=&#34;#3-6-使用-Cloudflare-Workers-作为代理层&#34; class=&#34;headerlink&#34; title=&#34;3.6 使用 Cloudflare Workers 作为代理层&#34;&gt;&lt;/a&gt;3.6 使用 Cloudflare Workers 作为代理层&lt;/h3&gt;&lt;p&gt;Cloudflare Workers 允许在 Cloudflare 的边缘节点上运行 JavaScript (或其他编译到 WebAssembly 的语言) 代码，可以用来拦截和修改请求/响应，或将请求代理到后端服务。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基本原理:&lt;/strong&gt; 创建一个 Worker 脚本，该脚本接收来自客户端的请求，然后将这些请求转发到你的 Xray 源服务器。对于 WebSocket 流量，Worker 需要特殊处理以正确建立和维持双向连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Worker 脚本示例 (通用 WebSocket 代理):&lt;/p&gt;
&lt;p&gt;以下是一个非常基础的通用 WebSocket 代理 Worker 脚本的逻辑框架。请注意，直接代理任意 Xray 协议流量可能违反 Cloudflare 服务条款 ，且此脚本需要根据实际 Xray 配置（如路径、头部）进行调整。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-JavaScript&#34; data-language=&#34;JavaScript&#34;&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;//addEventListener(&#34;fetch&#34;, event =&amp;gt; {
//  event.respondWith(handleRequest(event.request))
//})
//
//async function handleRequest(request) {
//  const url = new URL(request.url);
//  const upgradeHeader = request.headers.get(&#39;Upgrade&#39;);
//
//  // 后端 Xray 服务器地址和端口，以及预期的 WebSocket 路径
//  const backendHost = &#39;your_vps_ip_or_hidden_domain&#39;; // 不应是 Cloudflare CDN 域名
//  const backendPort = your_xray_ws_listen_port; // Xray WS 入站监听的真实端口
//  const backendPath = &#39;/your_xray_ws_path&#39;; // Xray WS 入站配置的路径
//
//  // 构建后端 URL
//  let backendUrl = `wss://&amp;lt;span class=&#34;math-inline&#34;&amp;gt;\{backendHost\}\:&amp;lt;/span&amp;gt;{backendPort}${backendPath}`;
//  if (url.protocol === &#39;http:&#39;) {
//      backendUrl = `ws://&amp;lt;span class=&#34;math-inline&#34;&amp;gt;\{backendHost\}\:&amp;lt;/span&amp;gt;{backendPort}${backendPath}`;
//  }
//
//  if (upgradeHeader &amp;amp;&amp;amp; upgradeHeader.toLowerCase() === &#39;websocket&#39;) {
//    // 处理 WebSocket 升级请求
//    const [client, server] = Object.values(new WebSocketPair());
//    server.accept();
//
//    try {
//      const wsBackend = new WebSocket(backendUrl, request.headers); // 将原始请求头传给后端
//
//      wsBackend.addEventListener(&#39;open&#39;, () =&amp;gt; {
//        // 后端连接打开
//      });
//
//      wsBackend.addEventListener(&#39;message&#39;, event =&amp;gt; {
//        server.send(event.data); // 从后端收到消息，转发给客户端
//      });
//
//      wsBackend.addEventListener(&#39;close&#39;, event =&amp;gt; {
//        server.close(event.code, event.reason); // 后端关闭，关闭客户端连接
//      });
//
//      wsBackend.addEventListener(&#39;error&#39;, event =&amp;gt; {
//        server.close(1011, &#39;Backend WebSocket error&#39;); // 后端错误
//      });
//
//      server.addEventListener(&#39;message&#39;, event =&amp;gt; {
//        wsBackend.send(event.data); // 从客户端收到消息，转发给后端
//      });
//
//      server.addEventListener(&#39;close&#39;, event =&amp;gt; {
//        wsBackend.close(event.code, event.reason); // 客户端关闭，关闭后端连接
//      });
//
//      server.addEventListener(&#39;error&#39;, event =&amp;gt; {
//        wsBackend.close(1011, &#39;Client WebSocket error&#39;); // 客户端错误
//      });
//
//      return new Response(null, { status: 101, webSocket: client });
//    } catch (e) {
//      return new Response(&#39;WebSocket backend connection failed: &#39; + e.toString(), { status: 502 });
//    }
//  } else {
//    // 对于非 WebSocket 请求，可以直接转发或返回错误
//    // 如果 Xray 配置了 HTTP 回落，这里可以尝试转发 HTTP 请求
//    // url.hostname = backendHost; // 注意：这仅适用于 HTTP 代理，不适用于 Xray 协议本身
//    // url.port = backendPort.toString();
//    // return fetch(new Request(url, request));
//    return new Response(&#39;This Worker is for WebSocket proxying.&#39;, { status: 400 });
//  }
//}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt; 上述脚本是一个高度简化的示例，用于说明概念。实际用于 Xray 的 Worker 脚本可能需要更复杂的逻辑来处理特定的 Xray WebSocket 路径、头部信息（如 Host头部需要正确设置为 Xray 配置中的值）以及可能的认证。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;keivanipchihagh/x-ui&lt;/code&gt; 仓库中可能包含更具体的 Worker 脚本 (scripts/worker.js)，建议参考其实现 。Cloudflare 官方文档也提供了 WebSocket 处理的示例 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署和路由设置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Cloudflare 仪表盘创建 Worker，将上述脚本（或适配后的脚本）粘贴进去并部署 。&lt;/li&gt;
&lt;li&gt;为 Worker 配置一个路由，例如 &lt;code&gt;worker.yourdomain.com/&lt;/code&gt;，这样访问此路径的流量会由 Worker 处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Xray 入站配置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xray 的 WebSocket 入站配置应监听一个本地端口（或可被 Worker 访问的地址），其路径和 Host 设置需要与 Worker 脚本转发时的目标一致。TLS 可以在源服务器上配置，也可以由 Worker 到源服务器的连接处理（如果源服务器配置了 TLS）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点:&lt;/strong&gt; 灵活性高，可以自定义请求处理逻辑，实现更复杂的伪装。IP 地址由 Cloudflare Worker 提供。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点:&lt;/strong&gt; Worker 有执行时间、CPU 时间和内存限制。配置比 CDN 复杂。同样存在 Cloudflare 服务条款的适用问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cloudflare Workers 提供了一种比传统 CDN 更细致的流量控制和伪装能力。例如，Worker 可以根据请求的特定头部或路径，将流量路由到不同的后端 Xray 服务，甚至可以动态修改请求/响应内容以增强混淆。这种可编程性使得 Workers 成为一种强大的工具，但也要求用户具备一定的编程知识。然而，需要强调的是，滥用 Cloudflare 服务（包括 Workers）进行违反其服务条款的活动是被禁止的。&lt;/p&gt;
&lt;h3 id=&#34;3-7-使用-Cloudflare-Tunnel-Argo-Tunnel-代理-TCP-节点&#34;&gt;&lt;a href=&#34;#3-7-使用-Cloudflare-Tunnel-Argo-Tunnel-代理-TCP-节点&#34; class=&#34;headerlink&#34; title=&#34;3.7 使用 Cloudflare Tunnel (Argo Tunnel) 代理 TCP 节点&#34;&gt;&lt;/a&gt;3.7 使用 Cloudflare Tunnel (Argo Tunnel) 代理 TCP 节点&lt;/h3&gt;&lt;p&gt;Cloudflare Tunnel (以前称为 Argo Tunnel) 可以安全地将你的本地服务（包括运行在 VPS 上的 Xray 服务）暴露到互联网，而无需在防火墙上打开入站端口。它通过在你的服务器上运行一个轻量级守护进程 &lt;code&gt;cloudflared&lt;/code&gt;，该进程会与 Cloudflare 的边缘网络建立一个持久的、仅出站的加密连接。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;基本原理:&lt;/strong&gt; &lt;code&gt;cloudflared&lt;/code&gt; 守护进程将本地 Xray 服务（如 VLESS+TCP、Trojan+TCP、Shadowsocks+TCP）的流量通过这个安全隧道发送到 Cloudflare 边缘，Cloudflare 再将公网用户的请求通过隧道转发给你的 Xray 服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装和配置 &lt;code&gt;cloudflared&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在你的 VPS 上下载并安装 &lt;code&gt;cloudflared&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;登录 &lt;code&gt;cloudflared&lt;/code&gt;：&lt;code&gt;cloudflared tunnel login&lt;/code&gt;，这会在浏览器中打开 Cloudflare 登录页面，授权后 &lt;code&gt;cloudflared&lt;/code&gt; 会下载一个证书文件。&lt;/li&gt;
&lt;li&gt;创建隧道：&lt;code&gt;cloudflared tunnel create &amp;lt;your_tunnel_name&amp;gt;&lt;/code&gt;。记下返回的隧道 UUID。&lt;/li&gt;
&lt;li&gt;为隧道创建 DNS 记录（指向公共主机名）：&lt;code&gt;cloudflared tunnel route dns &amp;lt;your_tunnel_name_or_UUID&amp;gt; &amp;lt;proxy.yourdomain.com&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置 &lt;code&gt;cloudflared&lt;/code&gt; 以暴露 TCP 服务:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建一个配置文件（通常是 &lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;~/.cloudflared/config.yml&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 或在 &lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;/etc/cloudflared/&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 目录），内容类似如下 ：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-YAML&#34; data-language=&#34;YAML&#34;&gt;&lt;code class=&#34;language-YAML&#34;&gt;tunnel: &amp;lt;your_tunnel_UUID&amp;gt; # 从 &#39;cloudflared tunnel create&#39; 命令获取
credentials-file: /root/.cloudflared/&amp;lt;your_tunnel_UUID&amp;gt;.json # 证书文件路径

ingress:
  - hostname: proxy.yourdomain.com # 你希望用户连接的公共域名
    service: tcp://localhost:&amp;lt;xray_listen_port&amp;gt; # Xray 服务监听的本地地址和端口
  - service: http_status:404 # 捕获所有其他未匹配的请求&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 &lt;code&gt;&amp;lt;your_tunnel_UUID&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;proxy.yourdomain.com&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;xray_listen_port&amp;gt;&lt;/code&gt;替换为实际值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;运行隧道:&lt;/strong&gt; &lt;code&gt;cloudflared tunnel run &amp;lt;your_tunnel_name_or_UUID&amp;gt;&lt;/code&gt; 或者，将 &lt;code&gt;cloudflared&lt;/code&gt; 安装为系统服务以便开机自启：&lt;code&gt;sudo cloudflared service install&lt;/code&gt; (需要先有配置文件)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Xray 入站配置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xray 的 TCP 类型入站（如 VLESS+TCP, Trojan+TCP, Shadowsocks+TCP）应配置为监听 &lt;code&gt;localhost:&amp;lt;xray_listen_port&amp;gt;&lt;/code&gt;，与 &lt;code&gt;cloudflared&lt;/code&gt; 配置文件中的 &lt;code&gt;service&lt;/code&gt; 地址对应。&lt;/li&gt;
&lt;li&gt;由于 TLS 终结发生在 Cloudflare 边缘，Xray 源服务器上的这些 TCP 入站通常不需要再配置 TLS。客户端连接时，地址填写 &lt;code&gt;proxy.yourdomain.com&lt;/code&gt;，端口为 Cloudflare 支持的端口（如 443，Cloudflare 会处理 TLS）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优缺点与限制:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点:&lt;/strong&gt; 无需公网 IP 或开放防火墙端口即可安全暴露服务，IP 地址由 Cloudflare 提供。&lt;/li&gt;
&lt;li&gt;缺点:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gRPC 限制:&lt;/strong&gt; 通过公共主机名的 Cloudflare Tunnel 目前不支持 gRPC 流量 。gRPC 可以通过隧道的私网路由功能与 WARP 客户端结合使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP 限制:&lt;/strong&gt; 通过公共主机名代理任意 UDP 流量不是标准功能。UDP 通常需要结合 Cloudflare WARP 客户端和私网路由 。对于 WireGuard (UDP)，直接通过 Tunnel 的公共主机名暴露可能不可行或效果不佳。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能:&lt;/strong&gt; 相比直接连接或 CDN，Tunnel 增加了一个 &lt;code&gt;cloudflared&lt;/code&gt; 进程和到 Cloudflare 边缘的额外网络跃点，可能会引入一些延迟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cloudflare Tunnel 为那些不适合通过 CDN（如原始 TCP 协议）或不希望直接暴露服务器 IP 的场景提供了一个有价值的解决方案。它特别适用于隐藏家庭网络或动态 IP 环境下的服务器。然而，用户必须清楚其对 gRPC 和 UDP 等协议在公共主机名模式下的限制。&lt;/p&gt;
&lt;h3 id=&#34;3-8-必备表格：Cloudflare-服务用于代理的对比&#34;&gt;&lt;a href=&#34;#3-8-必备表格：Cloudflare-服务用于代理的对比&#34; class=&#34;headerlink&#34; title=&#34;3.8 必备表格：Cloudflare 服务用于代理的对比&#34;&gt;&lt;/a&gt;3.8 必备表格：Cloudflare 服务用于代理的对比&lt;/h3&gt;&lt;p&gt;为了帮助用户根据自身需求选择最合适的 Cloudflare 服务来增强其 Xray 节点，下表对 Cloudflare CDN、Workers 和 Tunnel 的关键特性进行了对比：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Cloudflare CDN (Orange Cloud DNS)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Cloudflare Workers&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Cloudflare Tunnel (Public Hostname)&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主要优势&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;隐藏源 IP, DDoS 防护, 静态内容缓存, 广泛的 HTTP(S) 兼容性&lt;/td&gt;
&lt;td&gt;高度灵活, 边缘计算, 可自定义请求/响应逻辑, 动态路由, IP 来自 CF&lt;/td&gt;
&lt;td&gt;无需公网 IP/开放端口, 安全暴露本地服务, IP 来自 CF&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;适用协议/传输&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;HTTP, HTTPS, WebSocket, gRPC (有限制)&lt;/td&gt;
&lt;td&gt;HTTP, HTTPS, WebSocket (可编程处理)&lt;/td&gt;
&lt;td&gt;TCP, HTTP, HTTPS (gRPC, UDP 在公共主机名模式下受限)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;IP 隐藏&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;是 (源服务器 IP)&lt;/td&gt;
&lt;td&gt;是 (源服务器 IP, Worker 本身 IP 是 CF 的)&lt;/td&gt;
&lt;td&gt;是 (源服务器 IP)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;TLS 处理&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;浏览器 &amp;lt;-&amp;gt; CF (CF 证书), CF &amp;lt;-&amp;gt; 源服务器 (源服务器证书, 需 Full Strict)&lt;/td&gt;
&lt;td&gt;可自定义 (浏览器 &amp;lt;-&amp;gt; Worker &amp;lt;-&amp;gt; 源)&lt;/td&gt;
&lt;td&gt;浏览器 &amp;lt;-&amp;gt; CF (CF 证书), Tunnel 内部加密, CF &amp;lt;-&amp;gt; 源 (通常无需 TLS)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能影响&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;取决于地理位置和缓存, 可能增加延迟, Argo 可优化&lt;/td&gt;
&lt;td&gt;Worker 执行有开销, 但边缘执行可减少延迟&lt;/td&gt;
&lt;td&gt;增加 &lt;code&gt;cloudflared&lt;/code&gt; 跃点, 可能有额外延迟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;配置复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;较低 (DNS 切换)&lt;/td&gt;
&lt;td&gt;中到高 (需要编写和部署脚本)&lt;/td&gt;
&lt;td&gt;中等 (安装和配置 &lt;code&gt;cloudflared&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主要限制&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对非 HTTP(S) 协议支持不佳, 可能被 WAF/Bot 管理误判&lt;/td&gt;
&lt;td&gt;执行时间/资源限制, 服务条款约束&lt;/td&gt;
&lt;td&gt;gRPC/UDP 在公共主机名模式下支持不佳&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;选择考量:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你的 Xray 节点使用 &lt;strong&gt;WebSocket 或 gRPC&lt;/strong&gt; 传输，并且希望利用 CDN 的 IP 隐藏和 DDoS 防护，&lt;strong&gt;Cloudflare CDN&lt;/strong&gt; 是首选，配置也最简单。&lt;/li&gt;
&lt;li&gt;如果你需要更高级的流量伪装、自定义路由逻辑，或者希望在边缘处理一些逻辑（例如，根据特定条件选择后端），并且不介意编写代码，&lt;strong&gt;Cloudflare Workers&lt;/strong&gt; 提供了极大的灵活性。&lt;/li&gt;
&lt;li&gt;如果你的 Xray 节点使用 &lt;strong&gt;纯 TCP 协议&lt;/strong&gt; (如 VLESS/Trojan/SS over TCP)，或者你的服务器没有公网 IP / 不想开放入站端口，&lt;strong&gt;Cloudflare Tunnel&lt;/strong&gt; 是一个很好的选择，但要注意其对 gRPC 和 UDP 的限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第四部分：安全与优化&#34;&gt;&lt;a href=&#34;#第四部分：安全与优化&#34; class=&#34;headerlink&#34; title=&#34;第四部分：安全与优化&#34;&gt;&lt;/a&gt;第四部分：安全与优化&lt;/h2&gt;&lt;p&gt;搭建和使用科学上网节点时，安全性和性能优化是不可忽视的重要环节。&lt;/p&gt;
&lt;h3 id=&#34;4-1-VPS-服务器安全基础&#34;&gt;&lt;a href=&#34;#4-1-VPS-服务器安全基础&#34; class=&#34;headerlink&#34; title=&#34;4.1 VPS 服务器安全基础&#34;&gt;&lt;/a&gt;4.1 VPS 服务器安全基础&lt;/h3&gt;&lt;p&gt;保护承载 Xray 服务的 VPS 是首要任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防火墙配置 (UFW/iptables):&lt;ul&gt;
&lt;li&gt;UFW (Uncomplicated Firewall) 是一个用户友好的 iptables 前端。启用 UFW 并配置规则可以有效控制服务器的网络访问 。&lt;/li&gt;
&lt;li&gt;基本操作:&lt;ul&gt;
&lt;li&gt;启用 UFW: &lt;code&gt;sudo ufw enable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看状态: &lt;code&gt;sudo ufw status verbose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;允许特定端口: &lt;code&gt;sudo ufw allow &amp;lt;port&amp;gt;/&amp;lt;protocol&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拒绝特定端口: &lt;code&gt;sudo ufw deny &amp;lt;port&amp;gt;/&amp;lt;protocol&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;推荐规则 (详见文末表格):&lt;ul&gt;
&lt;li&gt;默认拒绝所有入站连接: &lt;code&gt;sudo ufw default deny incoming&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认允许所有出站连接: &lt;code&gt;sudo ufw default allow outgoing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;允许 SSH 连接（建议使用非标准端口，并限制来源 IP）: &lt;code&gt;sudo ufw allow from &amp;lt;your_trusted_IP&amp;gt; to any port &amp;lt;ssh_port&amp;gt; proto tcp&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;允许 x-ui 面板访问端口（强烈建议限制来源 IP）: &lt;code&gt;sudo ufw allow from &amp;lt;your_trusted_IP&amp;gt; to any port &amp;lt;xui_panel_port&amp;gt; proto tcp&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;允许代理服务端口（通常是 443/TCP 用于 TLS 节点，以及 WireGuard 的 UDP 端口）: &lt;code&gt;sudo ufw allow 443/tcp&lt;/code&gt;, &lt;code&gt;sudo ufw allow &amp;lt;wireguard_udp_port&amp;gt;/udp&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;如果使用 Certbot 的 HTTP-01 验证，需要临时允许 80/TCP: &lt;code&gt;sudo ufw allow 80/tcp&lt;/code&gt; (验证后可考虑移除或限制)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSH 加固:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;禁用 root 用户密码登录:&lt;/strong&gt; 编辑 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;，设置 &lt;code&gt;PermitRootLogin prohibit-password&lt;/code&gt; (或 &lt;code&gt;no&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用密钥对认证:&lt;/strong&gt; 推荐禁用密码认证 (&lt;code&gt;PasswordAuthentication no&lt;/code&gt;)，仅使用 SSH 密钥对登录 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更改默认 SSH 端口:&lt;/strong&gt; 将默认的 22 端口更改为一个不常用的高位端口，以减少自动扫描攻击 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定期更新:&lt;ul&gt;
&lt;li&gt;保持操作系统和所有已安装软件包的最新状态，以修复已知的安全漏洞：&lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他安全措施:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fail2ban:&lt;/strong&gt; 安装并配置 Fail2ban 可以监控日志文件（如 SSH 登录失败、x-ui 面板登录尝试），并在检测到恶意行为（如暴力破解）时自动封禁来源 IP 。3x-ui 面板本身也集成了 IP 限制功能，需要安装 Fail2ban 配合使用 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;禁用不必要的服务:&lt;/strong&gt; 关闭服务器上所有不需要运行的网络服务，以减少攻击面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;采取多层次的安全措施至关重要。仅仅依赖 Cloudflare 的保护或一个强密码是不够的。VPS 自身的安全（防火墙、SSH加固、及时更新）、x-ui 面板的安全（强密码、HTTPS访问、访问IP限制）以及代理协议自身的安全性（如TLS、REALITY）共同构成了一个纵深防御体系。每一层都针对不同类型的威胁提供防护，从而整体上提升节点的安全性。&lt;/p&gt;
&lt;h3 id=&#34;4-2-Cloudflare-安全设置&#34;&gt;&lt;a href=&#34;#4-2-Cloudflare-安全设置&#34; class=&#34;headerlink&#34; title=&#34;4.2 Cloudflare 安全设置&#34;&gt;&lt;/a&gt;4.2 Cloudflare 安全设置&lt;/h3&gt;&lt;p&gt;Cloudflare 提供了多种安全功能，但在用于代理节点时，某些设置可能需要调整以避免对代理流量的干扰。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WAF 自定义规则 (Web Application Firewall):&lt;ul&gt;
&lt;li&gt;Cloudflare WAF 可能会将某些代理流量模式识别为可疑并进行拦截。如果遇到这种情况，可以尝试在 Cloudflare WAF 设置中创建自定义规则，针对代理节点的特定路径（如 WebSocket 路径）或来源（如果固定）选择“跳过”(Skip) WAF 的部分或全部分析模块 。&lt;/li&gt;
&lt;li&gt;例如，如果 WebSocket 路径是 &lt;code&gt;/secretpath&lt;/code&gt;，可以创建规则：&lt;code&gt;If URI Path equals /secretpath Then Skip (All WAF managed rules, Cloudflare OWASP Core Ruleset)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重要警示:&lt;/strong&gt; Cloudflare 的服务条款明确禁止未经授权使用其网络提供代理或 VPN 服务 68。虽然技术上可以通过 WAF 规则绕过检查，但这并不意味着这种用法符合服务条款。用户应自行承担相关风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页面规则 (Page Rules) (主要用于 WebSocket 优化/绕过):&lt;ul&gt;
&lt;li&gt;对于 WebSocket 连接使用的特定路径，可以考虑设置页面规则 ：&lt;ul&gt;
&lt;li&gt;将“缓存级别”(Cache Level) 设置为“绕过”(Bypass)，因为代理流量通常是动态的，不应被缓存。&lt;/li&gt;
&lt;li&gt;在极端情况下，如果 Cloudflare 的安全级别过高导致连接问题，可以考虑将该路径的“安全级别”(Security Level) 设置为“基本关闭”(Essentially Off) 或“禁用安全性”(Disable Security)。但这样做会降低该路径的安全防护，务必谨慎使用，并尽可能缩小规则匹配范围。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确保 Cloudflare “网络” (Network) 设置中的 “WebSockets” 功能已开启（通常默认开启）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;机器人管理 (Bot Management) 注意事项:&lt;ul&gt;
&lt;li&gt;Cloudflare 的“机器人战斗模式”(Bot Fight Mode) 或“超级机器人战斗模式”(Super Bot Fight Mode) 可能会将代理客户端的连接行为归类为“可能是自动程序”并进行质询或阻止 。&lt;/li&gt;
&lt;li&gt;如果代理连接因此受阻，可能需要禁用机器人战斗模式，或者（如果可能且符合服务条款）创建 WAF 规则来跳过对特定代理主机名或路径的机器人检测。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SSL/TLS 优化器 (SSL/TLS Recommender) 与自动 HTTPS 重写:&lt;ul&gt;
&lt;li&gt;这些功能通常是有益的，但务必确保最终的 SSL/TLS 加密模式保持在 “Full (Strict)” 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP/2 到源站 与 HTTP/3:&lt;ul&gt;
&lt;li&gt;在 Cloudflare “网络” 设置中启用 “HTTP/2 到源站” 通常是推荐的，特别是当源服务器（Xray）也支持 HTTP/2 时（例如使用 gRPC 传输）。HTTP/3 (QUIC) 也可以考虑启用，但要确保 Xray 和客户端都支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cloudflare 的安全功能是一把双刃剑。它们在保护网站免受恶意攻击方面非常有效 7，但其某些启发式检测机制也可能将正常的代理流量误判为可疑活动，从而导致连接问题。因此，用户需要理解这些设置如何工作，并学会在 Cloudflare 仪表盘中进行细致调整，以便在获得 Cloudflare 保护的同时，确保代理服务的顺畅运行。这通常需要在安全性和可用性之间找到一个平衡点。&lt;/p&gt;
&lt;h3 id=&#34;4-3-进阶抗封锁技巧&#34;&gt;&lt;a href=&#34;#4-3-进阶抗封锁技巧&#34; class=&#34;headerlink&#34; title=&#34;4.3 进阶抗封锁技巧&#34;&gt;&lt;/a&gt;4.3 进阶抗封锁技巧&lt;/h3&gt;&lt;p&gt;随着审查技术的不断发展，单一的代理协议和配置可能不足以保证长期稳定。以下是一些进阶的抗封锁思路和技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;域名伪装 (Domain Fronting - 概念性):&lt;/strong&gt; 传统意义上的域名伪装（通过在 TLS ClientHello 中使用一个 SNI，而在 HTTP Host 头中使用另一个域名，并依赖 CDN 的路由行为）在很大程度上已被主流 CDN 提供商（包括 Cloudflare）限制。然而，Cloudflare Workers 可以在一定程度上实现类似效果：Worker 脚本可以接收来自一个“干净”域名的请求，然后根据内部逻辑（如特定路径或头部）将请求转发到实际的、可能被审查的后端代理服务器。这需要精心设计的 Worker 脚本和 Xray 配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用“干净”的 IP 地址和信誉良好的 VPS 提供商:&lt;/strong&gt; 某些 IP 地址段（例如来自大型、知名云服务商的 IP）可能受到更严格的审查或更容易被列入黑名单。选择一些较小众、信誉良好或专门针对此类应用的 VPS 提供商，并获取相对“干净”的 IP 地址，可能有助于提高节点的存活率 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 地址轮换 (高级):&lt;/strong&gt; 这是一项更复杂的技术，通常涉及拥有多个 VPS 或使用支持 IP 轮换的服务。通过定期更换代理服务器的出口 IP 地址，可以降低单个 IP 因长时间暴露而被封锁的风险。&lt;/li&gt;
&lt;li&gt;模仿真实网站流量:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;真实的回落网站:&lt;/strong&gt; 对于 Trojan 或其他配置了回落 (Fallback) 功能的协议，确保回落指向一个真实、内容丰富且在目标审查区域内访问正常的网站。这个网站应该有合法的 TLS 证书。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket 路径与 Host:&lt;/strong&gt; 对于 WebSocket 类型的节点，其连接路径 (Path) 和 Host 头部应尽量模仿正常 Web 应用的 API 请求。避免使用过于简单或可识别的路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS 指纹伪装 (uTLS):&lt;/strong&gt; 许多审查系统会分析 TLS 握手过程中的客户端指纹（Client Hello），以识别可疑的非浏览器流量。Xray 核心及其客户端（如 Nekoray, V2RayNG, ShadowRocket 等）通常支持 uTLS 功能，允许客户端在发起 TLS 连接时模仿特定浏览器（如 Chrome, Firefox）或操作系统的 TLS 指纹 。在客户端配置中启用并选择合适的 uTLS 指纹，是增强伪装性的重要手段。对于 REALITY 协议，服务器端也会参与指纹的伪装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免使用常见代理端口 (有限效果):&lt;/strong&gt; 虽然将代理服务运行在非标准端口（而不是常见的 80, 443, 1080 等）可能避开一些非常初级的端口扫描，但这对于能够进行深度包检测的审查系统来说几乎没有作用。对于基于 TLS 的代理协议（如 VLESS/VMess/Trojan + TLS/WS/gRPC/REALITY），使用标准的 HTTPS 端口 &lt;code&gt;443&lt;/code&gt; 通常是最佳选择，因为它最符合伪装成正常 HTTPS 流量的目的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量分割与分流:&lt;/strong&gt; 不在所有流量上都使用代理。例如，可以使用 PAC 文件、浏览器扩展或客户端的路由规则，仅对需要访问受限资源的域名或 IP 地址启用代理，而国内或其他可直连的流量则直接访问。这不仅可以节省代理服务器的带宽，减少不必要的性能开销，还能降低代理服务器因大量非敏感流量通过而被注意到的风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络审查与反审查技术始终处于动态的“军备竞赛”之中。没有任何一种技术或配置可以保证永久有效。审查方会不断分析和封锁已知的协议特征和服务器 IP，而开发者和用户则会不断寻找新的协议、传输方式和伪装技巧来应对。因此，保持对新技术和封锁动态的关注，并准备好根据需要调整和更新自己的节点配置，是维持科学上网连接稳定的关键。&lt;/p&gt;
&lt;h3 id=&#34;4-4-性能优化与资源消耗考量&#34;&gt;&lt;a href=&#34;#4-4-性能优化与资源消耗考量&#34; class=&#34;headerlink&#34; title=&#34;4.4 性能优化与资源消耗考量&#34;&gt;&lt;/a&gt;4.4 性能优化与资源消耗考量&lt;/h3&gt;&lt;p&gt;节点的性能直接影响用户体验，而资源消耗则关系到 VPS 的成本和承载能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议选择对性能的影响:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VLESS vs VMess:&lt;/strong&gt; VLESS 由于其无内置加密和更简洁的头部设计，通常比 VMess 具有更低的延迟和更高的吞吐量，资源消耗也更少 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WireGuard:&lt;/strong&gt; 以其极高的速度和低资源占用著称，是性能优先场景下的优秀选择，但其基于 UDP，可能受网络环境影响 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shadowsocks:&lt;/strong&gt; 作为一种轻量级协议，性能表现良好，资源占用低 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trojan:&lt;/strong&gt; 性能接近原生 HTTPS，通常表现不错 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传输方式对性能的影响:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP:&lt;/strong&gt; 作为基础传输协议，稳定可靠，但纯 TCP 传输（即使套了 TLS）的特征相对容易被识别。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket (WS):&lt;/strong&gt; 为代理流量增加了额外的 HTTP 头部和 WebSocket 帧封装，会带来一定的性能开销。然而，它是通过 CDN 转发流量的常用方式。Xray 的一些配置（如 VLESS 的回落分流到 WS）据称性能优于传统的 Nginx 反代 WS 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC:&lt;/strong&gt; 基于 HTTP/2，支持多路复用，可以减少连接建立的开销，对移动端和需要频繁短连接的场景友好，性能通常优于 WebSocket。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XTLS:&lt;/strong&gt; 专门为 VLESS 和 Trojan 设计，通过减少 TLS 加密层级来优化性能，理论上可以达到接近或优于裸 TCP+TLS 的性能 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器硬件配置:&lt;/strong&gt; CPU 的核心数和主频、内存大小以及网络带宽都会直接影响 Xray 服务器能处理的并发连接数和总吞吐量。高负载情况下，性能瓶颈可能出现在 CPU（加解密和协议处理）或网络I/O上 47。虽然难以给出精确的 Xray 资源消耗数据，但可以参考类似代理软件（如 Envoy）的指标：每秒处理 1000 个请求（1KB负载）大约需要 0.2-0.5 vCPU 和 40-60MB 内存 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare 引入的延迟:&lt;/strong&gt; 使用 Cloudflare CDN、Workers 或 Tunnel 会在客户端和源服务器之间增加额外的网络跃点，这不可避免地会引入一定的延迟。Cloudflare 的 Argo Smart Routing (付费功能) 声称可以优化路由，减少延迟。对于 WebSocket 流量，Cloudflare 本身对连接的处理也可能影响性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keepalives (连接保持):&lt;/strong&gt; 对于长时间活动的连接，特别是 WebSocket，配置适当的 Keepalive 机制非常重要，可以防止连接因网络中间设备（如 NAT、防火墙）的超时而意外断开 。Xray 和客户端通常都有相关配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;启用 BBR 拥塞控制算法:&lt;/strong&gt; 在 VPS 服务器上启用 TCP BBR 拥塞控制算法，通常可以显著改善高延迟、有一定丢包率网络环境下的 TCP 连接吞吐量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核参数优化:&lt;/strong&gt; 调整 Linux 内核参数，如最大文件描述符数 (&lt;code&gt;ulimit -n&lt;/code&gt;)、TCP 连接队列大小 (&lt;code&gt;net.core.somaxconn&lt;/code&gt;, &lt;code&gt;net.ipv4.tcp_max_syn_backlog&lt;/code&gt;) 等，在高并发场景下可能有助于提升性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;性能并非单一因素决定的，而是协议、传输方式、加密强度、服务器负载、网络路径（包括 Cloudflare 的参与）、客户端与服务器硬件，乃至操作系统内核调优等多种因素综合作用的结果。例如，VLESS+XTLS+REALITY 在直连情况下可能速度最快，但对于与服务器地理位置遥远的用户，VLESS+WS+TLS+CDN 由于 CDN 的边缘节点效应，尽管 WebSocket 自身有开销，却可能带来更好的实际访问体验。因此，优化是一个需要综合考虑并根据具体场景进行调整的过程。&lt;/p&gt;
&lt;h3 id=&#34;必备表格：推荐的-UFW-防火墙规则&#34;&gt;&lt;a href=&#34;#必备表格：推荐的-UFW-防火墙规则&#34; class=&#34;headerlink&#34; title=&#34;必备表格：推荐的 UFW 防火墙规则&#34;&gt;&lt;/a&gt;必备表格：推荐的 UFW 防火墙规则&lt;/h3&gt;&lt;p&gt;以下表格提供了一组针对运行 x-ui 和 Xray 代理服务的 VPS 的推荐 UFW 防火墙规则。请根据你的实际端口配置进行调整。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;规则描述&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;UFW 命令 (示例)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;端口 (示例)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;协议&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;允许来自特定 IP 的 SSH 访问&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sudo ufw allow from 1.2.3.4 to any port 2222 proto tcp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2222&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;将 &lt;code&gt;1.2.3.4&lt;/code&gt; 替换为你的可信管理 IP，&lt;code&gt;2222&lt;/code&gt; 替换为你的 SSH 端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;允许来自特定 IP 的 x-ui 面板访问&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sudo ufw allow from 1.2.3.4 to any port 54321 proto tcp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;54321&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;将 &lt;code&gt;1.2.3.4&lt;/code&gt; 替换为你的可信管理 IP，&lt;code&gt;54321&lt;/code&gt; 替换为你的 x-ui 面板端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;允许 HTTPS/TLS 代理流量 (通用)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sudo ufw allow 443/tcp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;443&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;用于 VLESS/VMess/Trojan 等协议的 TLS, WS+TLS, gRPC+TLS, REALITY。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;允许 HTTP 流量 (SSL 证书验证)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sudo ufw allow 80/tcp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;主要用于 Let’s Encrypt HTTP-01 验证。验证完成后可考虑限制或移除此规则。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;允许 WireGuard 流量&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sudo ufw allow 51820/udp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;51820&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;将 &lt;code&gt;51820&lt;/code&gt; 替换为你的 WireGuard 监听端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;允许 Xray 源服务器监听端口 (如果使用 CDN/Tunnel)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sudo ufw allow 8443/tcp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8443&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;示例端口，用于 CDN/Tunnel 回源。应仅允许来自 Cloudflare IP 段的访问。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;默认拒绝所有其他入站连接&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sudo ufw default deny incoming&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;重要的安全基线。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;默认允许所有出站连接&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sudo ufw default allow outgoing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;允许服务器主动向外发起连接。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;启用 UFW&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sudo ufw enable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;在所有规则配置完成后执行。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在执行 &lt;code&gt;sudo ufw enable&lt;/code&gt; 之前，务必确保已添加允许 SSH 访问的规则，否则可能导致无法远程连接服务器。&lt;/li&gt;
&lt;li&gt;对于通过 CDN 或 Tunnel 回源的端口（如上例中的 8443/TCP），更安全的做法是仅允许来自 Cloudflare IP 地址段的流量访问这些端口。Cloudflare 公布了其 IP 范围列表，可以用于配置更精细的防火墙规则。&lt;/li&gt;
&lt;li&gt;定期审查和更新防火墙规则，确保其符合当前的安全需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;防火墙是服务器安全的第一道防线，正确配置 UFW 对于保护你的 Xray 节点免受未经授权的访问和潜在攻击至关重要 54。上述规则提供了一个基础模板，用户应根据自己的具体服务端口和安全策略进行调整。&lt;/p&gt;
&lt;h2 id=&#34;第五部分：客户端配置与使用&#34;&gt;&lt;a href=&#34;#第五部分：客户端配置与使用&#34; class=&#34;headerlink&#34; title=&#34;第五部分：客户端配置与使用&#34;&gt;&lt;/a&gt;第五部分：客户端配置与使用&lt;/h2&gt;&lt;p&gt;成功搭建节点后，需要在客户端设备上进行相应配置才能连接和使用。&lt;/p&gt;
&lt;h3 id=&#34;5-1-主流客户端介绍&#34;&gt;&lt;a href=&#34;#5-1-主流客户端介绍&#34; class=&#34;headerlink&#34; title=&#34;5.1 主流客户端介绍&#34;&gt;&lt;/a&gt;5.1 主流客户端介绍&lt;/h3&gt;&lt;p&gt;市面上有众多支持 Xray 核心及其协议的客户端软件，覆盖各类操作系统平台。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨平台:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nekoray / Nekobox:&lt;/strong&gt; 支持 Windows, Linux, Android，并有非官方 macOS 版本。功能强大，支持 Shadowsocks (包括 SS-2022), VLESS, VMess, Trojan, XTLS-Reality 等多种协议和特性 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;V2RayNG:&lt;/strong&gt; 基于 Xray 核心，支持 Xray 的所有协议和功能，界面简洁，广受欢迎 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hiddify (FoXray Hiddify):&lt;/strong&gt; 提及与 3X-UI VLESS REALITY 配合使用，可能基于 FoXray 或类似核心 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SagerNet / Matsuri:&lt;/strong&gt; 同样是功能丰富的 Android 客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iOS:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FoXray:&lt;/strong&gt; 基于 Xray 核心，支持 Shadowsocks, VLESS, Socks, VMess, XTLS, REALITY, Trojan 以及 TCP, HTTP/2, WebSocket, mKCP, gRPC, QUIC 等多种传输方式 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ShadowRocket (小火箭):&lt;/strong&gt; 付费应用，功能强大，支持 Shadowsocks (包括 SS-2022), VMess, VLESS, Trojan, TUIC, Hysteria, WireGuard, XTLS-Vision, uTLS 等多种协议和特性 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V2BOX:&lt;/strong&gt; 支持 Xray 核心的免费 iOS 客户端 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Streisand:&lt;/strong&gt; 提及与 3x-ui VLESS 配合使用 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quantumult X / Loon / Surge:&lt;/strong&gt; 均为功能强大的付费网络工具，支持多种代理协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;V2RayN:&lt;/strong&gt; 流行的 Windows 客户端，支持 Xray/V2Ray 核心，界面直观 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nekoray / Nekobox:&lt;/strong&gt; 如上所述，也支持 Windows。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qv2ray:&lt;/strong&gt; (项目已停止维护，但仍有用户使用) 跨平台客户端，基于 Qt。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;macOS:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;V2RayX:&lt;/strong&gt; (项目可能更新较慢) 针对 macOS 的 V2Ray 客户端。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nekoray / Nekobox (非官方):&lt;/strong&gt; 如上所述。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V2BOX:&lt;/strong&gt; 如上所述，也支持 macOS 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ClashX / Clash for Windows (CFW) (macOS 版本):&lt;/strong&gt; 基于 Clash 核心的客户端，支持多种协议，通过配置文件进行管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nekoray / Nekobox:&lt;/strong&gt; 如上所述。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qv2ray:&lt;/strong&gt; (项目已停止维护)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clash (命令行) / Clash Verge (图形界面):&lt;/strong&gt; 基于 Clash 核心。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WireGuard 客户端:&lt;ul&gt;
&lt;li&gt;WireGuard 官方为各主流平台（Windows, macOS, Linux, Android, iOS）均提供了客户端软件 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-2-各协议客户端配置示例&#34;&gt;&lt;a href=&#34;#5-2-各协议客户端配置示例&#34; class=&#34;headerlink&#34; title=&#34;5.2 各协议客户端配置示例&#34;&gt;&lt;/a&gt;5.2 各协议客户端配置示例&lt;/h3&gt;&lt;p&gt;从 x-ui 面板导出配置通常是最便捷的方式，支持通过分享链接、二维码或复制配置信息。如果需要手动配置，以下是一些关键参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通用参数:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;地址 (Address/Server):&lt;/strong&gt; 填写你的服务器域名（如 &lt;code&gt;proxy.yourdomain.com&lt;/code&gt;，如果使用 CDN 或 Worker 域名）或服务器 IP 地址（如果直连）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口 (Port):&lt;/strong&gt; 填写服务器监听的端口。对于 CDN/Worker 后的 TLS 节点，通常是 &lt;code&gt;443&lt;/code&gt;。对于直连节点，填写 x-ui 中设置的监听端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户ID (ID/UUID):&lt;/strong&gt; 对应 VLESS/VMess 协议中 x-ui 生成的 UUID。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密码 (Password):&lt;/strong&gt; 对应 Trojan 或 Shadowsocks 协议中设置的密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VMess 特定参数:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;额外ID (AlterID):&lt;/strong&gt; 对应 x-ui 中设置的 AlterID。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加密方式 (Security/Cipher):&lt;/strong&gt; 客户端选择的加密方式需与服务器端兼容，通常选 &lt;code&gt;auto&lt;/code&gt; 或服务器指定的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VLESS 特定参数:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流控 (Flow):&lt;/strong&gt; 如果服务器端 VLESS 配置了 &lt;code&gt;flow&lt;/code&gt; (如 &lt;code&gt;xtls-rprx-vision&lt;/code&gt;)，客户端需要相应配置。对于 REALITY，此项通常不直接配置，而是通过 REALITY 的特定参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TLS 相关参数 (适用于 VLESS/VMess/Trojan + TLS/XTLS/REALITY):&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传输层安全 (TLS/Security):&lt;/strong&gt; 选择 &lt;code&gt;tls&lt;/code&gt; 或 &lt;code&gt;xtls&lt;/code&gt; 或 &lt;code&gt;reality&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SNI (Server Name Indication) / Peer / Host:&lt;/strong&gt; 填写用于 TLS 握手的域名，通常是你的服务器域名或 CDN/Worker 域名。对于 REALITY，这里填写的是你伪装的目标网站域名 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;允许不安全连接 (Allow Insecure):&lt;/strong&gt; 通常应设为 &lt;code&gt;false&lt;/code&gt; (不勾选)，除非特殊调试目的且了解风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALPN (Application-Layer Protocol Negotiation):&lt;/strong&gt; 客户端可以指定 ALPN，如 &lt;code&gt;h2,http/1.1&lt;/code&gt;，以更好地模拟浏览器行为。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书验证 (Skip Cert Verify):&lt;/strong&gt; 通常不应跳过证书验证。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WebSocket (WS) 特定参数 (适用于 VLESS/VMess/Trojan + WS):&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传输协议 (Network/Transport):&lt;/strong&gt; 选择 &lt;code&gt;ws&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路径 (Path):&lt;/strong&gt; 填写与 x-ui 中 WebSocket 配置一致的路径 (如 &lt;code&gt;/myvlessws&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host (请求头):&lt;/strong&gt; 填写你的服务器域名或 CDN/Worker 域名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gRPC 特定参数 (适用于 VLESS/VMess/Trojan + gRPC):&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传输协议 (Network/Transport):&lt;/strong&gt; 选择 &lt;code&gt;grpc&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC 服务名称 (serviceName):&lt;/strong&gt; 填写与 x-ui 中 gRPC 配置一致的服务名称 (如 &lt;code&gt;mytrojangrpc&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模式 (Mode):&lt;/strong&gt; &lt;code&gt;multi&lt;/code&gt; (多路复用) 模式通常性能更好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;REALITY 特定参数 (VLESS + REALITY):&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;公钥 (PublicKey):&lt;/strong&gt; 填写服务器端 x-ui 生成的 X25519 公钥 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ShortID:&lt;/strong&gt; 填写服务器端配置的 ShortID (可以为空，如果服务器允许) 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SpiderX / Fingerprint:&lt;/strong&gt; 客户端通常会自动选择或允许用户选择一个 TLS 指纹 (uTLS) 来模仿，如 &lt;code&gt;chrome&lt;/code&gt; 或 &lt;code&gt;firefox&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shadowsocks 特定参数:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加密方法 (Cipher/Method):&lt;/strong&gt; 选择与服务器端一致的 AEAD 加密方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WireGuard 特定参数:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;私钥 (PrivateKey):&lt;/strong&gt; 客户端的私钥。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地址 (Address):&lt;/strong&gt; 分配给客户端的隧道内 IP 地址 (如 &lt;code&gt;10.0.8.2/32&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS:&lt;/strong&gt; 可选，指定通过 VPN 使用的 DNS 服务器。&lt;/li&gt;
&lt;li&gt;[Peer] 部分:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;公钥 (PublicKey):&lt;/strong&gt; 服务器的 WireGuard 公钥。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预共享密钥 (PresharedKey):&lt;/strong&gt; 可选，用于增强安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端点 (Endpoint):&lt;/strong&gt; 服务器的公网 IP 地址和 WireGuard 监听端口 (如 &lt;code&gt;your_vps_ip:51820&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;允许的 IP (AllowedIPs):&lt;/strong&gt; 通常设为 &lt;code&gt;0.0.0.0/0, ::/0&lt;/code&gt;，表示所有流量都通过 VPN。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;许多现代客户端，特别是那些支持 Xray 核心的，都允许用户精细调整 TLS 握手行为，例如通过 uTLS 设置来模仿特定浏览器的 TLS 指纹 。这对于增强连接的隐蔽性，特别是在连接到使用 REALITY 或其他高级伪装技术的服务器时，非常重要。用户应在客户端设置中寻找类似“TLS 指纹”、“uTLS”、“Fingerprint”或“SpiderX”的选项，并选择一个常见浏览器的指纹（如 Chrome 或 Firefox），以使代理流量更难与普通网页浏览流量区分开来。&lt;/p&gt;
&lt;h2 id=&#34;结论与展望&#34;&gt;&lt;a href=&#34;#结论与展望&#34; class=&#34;headerlink&#34; title=&#34;结论与展望&#34;&gt;&lt;/a&gt;结论与展望&lt;/h2&gt;&lt;p&gt;本教程详细介绍了多种主流科学上网代理协议的原理、特性，并逐步指导了如何使用 x-ui (MHSanaei 3x-ui) 面板在 VPS 上搭建这些节点，以及如何结合 Cloudflare CDN、Workers 和 Tunnel 服务来增强节点的隐蔽性和可用性。同时，也涵盖了服务器安全、Cloudflare 安全配置、进阶抗封锁技巧、性能优化和客户端配置等关键方面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心结论包括：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;协议多样性与演进:&lt;/strong&gt; 从 Shadowsocks 的简洁高效，到 VMess 的安全灵活，再到 VLESS 的极致性能与 REALITY 的卓越伪装，以及 Trojan 的 HTTPS 模拟和 WireGuard 的现代高速，用户可以根据自身对安全性、性能、抗检测能力和配置复杂度的不同需求选择合适的协议。协议的演进体现了与审查技术持续对抗的趋势。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x-ui 的便捷性:&lt;/strong&gt; x-ui 面板极大地简化了 Xray 节点的部署和管理，使得即便是初学者也能相对容易地配置和维护多种复杂的代理协议。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare 的双重角色:&lt;/strong&gt; Cloudflare 的 CDN、Workers 和 Tunnel 服务为代理节点提供了强大的 IP 隐藏、DDoS 防护和流量中转能力。然而，其安全机制也可能对代理流量造成干扰，需要用户仔细配置 WAF、页面规则和机器人管理等设置。同时，用户需注意 Cloudflare 的服务条款。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全是基础:&lt;/strong&gt; 无论是 VPS 服务器自身的安全加固（防火墙、SSH 安全、系统更新、Fail2ban），还是 x-ui 面板和代理协议的安全配置（强密码、TLS 加密、uTLS 指纹），都是确保节点稳定和用户数据安全不可或缺的环节。分层安全策略是抵御潜在风险的关键。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能与伪装的权衡:&lt;/strong&gt; 极致的性能（如 VLESS+XTLS）和极致的伪装（如 VLESS+REALITY 或 Trojan）往往需要更精细的配置。通过 CDN 或 Tunnel 虽然能隐藏 IP，但也可能引入额外延迟。用户需要在这些因素之间做出权衡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端的重要性:&lt;/strong&gt; 选择功能全面、支持最新协议特性（如 uTLS）的客户端，并正确配置，对于发挥节点的全部潜力至关重要。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;未来展望：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络审查技术和科学上网技术之间的博弈仍将持续。未来可能会出现更智能、更难被检测的审查手段，同时也会催生出更先进、更具适应性的代理协议和混淆技术。对于用户而言，持续学习、关注技术动态、灵活调整配置策略，将是长期维持稳定、安全科学上网能力的关键。&lt;/p&gt;
&lt;p&gt;希望本教程能为读者在理解和实践科学上网技术方面提供有价值的参考。请务必在遵守当地法律法规的前提下使用相关技术。&lt;/p&gt;
&lt;h2 id=&#34;附录&#34;&gt;&lt;a href=&#34;#附录&#34; class=&#34;headerlink&#34; title=&#34;附录&#34;&gt;&lt;/a&gt;附录&lt;/h2&gt;&lt;h3 id=&#34;常见问题解答-FAQ&#34;&gt;&lt;a href=&#34;#常见问题解答-FAQ&#34; class=&#34;headerlink&#34; title=&#34;常见问题解答 (FAQ)&#34;&gt;&lt;/a&gt;常见问题解答 (FAQ)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问：连接节点时遇到问题（如超时、无法连接）怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;答：&lt;/p&gt;
&lt;p&gt; 首先检查：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VPS 服务器是否在线，x-ui 和 Xray 服务是否正常运行 (&lt;code&gt;systemctl status x-ui&lt;/code&gt;, &lt;code&gt;systemctl status xray&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;VPS 防火墙 (UFW) 是否允许了相应的代理端口和 x-ui 面板端口的入站连接。&lt;/li&gt;
&lt;li&gt;x-ui 面板中的入站配置是否正确（协议、端口、ID/密码、域名、证书路径、传输设置等）。&lt;/li&gt;
&lt;li&gt;客户端配置是否与服务器端完全一致。&lt;/li&gt;
&lt;li&gt;域名是否正确解析到 VPS IP（如果直连）或 Cloudflare IP（如果使用 CDN）。&lt;/li&gt;
&lt;li&gt;Cloudflare 相关设置：DNS 代理状态（橙色云朵）、SSL/TLS 模式（应为 Full Strict）、WAF 或机器人管理是否拦截了流量（查看 Cloudflare 事件日志）。&lt;/li&gt;
&lt;li&gt;服务器和客户端的时间是否同步。&lt;/li&gt;
&lt;li&gt;尝试更换客户端或网络环境测试。&lt;/li&gt;
&lt;li&gt;查看 x-ui 和 Xray 的日志（通过 x-ui 面板或服务器命令 &lt;code&gt;journalctl -u xray -f&lt;/code&gt;）获取错误信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问：如何更新 x-ui 面板和 Xray 核心？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;答：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;更新 x-ui 面板 (MHSanaei/3x-ui):&lt;/strong&gt; 通常可以再次运行官方安装脚本 &lt;code&gt;bash &amp;lt;(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh)&lt;/code&gt;，脚本会自动检测已安装版本并进行升级 。也可以在 x-ui 命令行菜单中选择更新选项。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新 Xray 核心:&lt;/strong&gt; 3x-ui 面板通常会捆绑特定版本的 Xray 核心。一些 x-ui 分支可能在面板内提供一键更新 Xray 核心的功能。或者，可以从 Xray-core 的 GitHub Releases 页面下载最新的二进制文件，手动替换 VPS 上 x-ui 使用的 Xray 执行文件（通常位于 &lt;code&gt;/usr/local/x-ui/bin/xray-core&lt;/code&gt; 或类似路径，请先备份旧版）。替换后需要重启 Xray 服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问：我的 VPS IP 地址被封锁了怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;答：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;更换 IP:&lt;/strong&gt; 联系 VPS 提供商更换 IP 地址（可能需要额外费用）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 Cloudflare 隐藏 IP:&lt;/strong&gt; 如果之前是直连，可以尝试将节点配置为通过 Cloudflare CDN、Workers 或 Tunnel 接入，这样暴露给外界的是 Cloudflare 的 IP。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迁移服务器:&lt;/strong&gt; 将 x-ui 数据备份后，在新的 VPS 上重新部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问：Cloudflare 是否允许使用其网络进行代理？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;答：&lt;/strong&gt; Cloudflare 的服务条款（ToS Section 2.8）通常禁止使用其网络（特别是免费计划）作为大规模、未经授权的代理或 VPN 服务出口 68。虽然技术上可以通过 CDN、Workers 或 Tunnel 搭建代理，但如果流量模式被 Cloudflare 识别为滥用，账户或相关域名可能会受到限制。用户应了解并自行承担此风险。使用 Cloudflare WARP 是其官方推荐的个人安全上网方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;问：REALITY 和 XTLS 有什么区别？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;答：&lt;/strong&gt; XTLS 是一种旨在减少 VLESS/Trojan 协议中 TLS 加密层级开销的技术，核心在于优化数据传输路径，提高性能。REALITY 则是一种更侧重于消除服务器端 TLS 指纹、增强抗检测能力的协议特性，它通过“借用”真实网站的 TLS 证书指纹来实现伪装。两者可以独立使用（VLESS+XTLS+TLS 或 VLESS+TCP+REALITY），也可以在某些配置下（如 VLESS over TCP with XTLS-Vision and REALITY）协同工作，但 REALITY 本身通常不与传统的 TLS 证书配置同时用于同一入站。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相关资源链接&#34;&gt;&lt;a href=&#34;#相关资源链接&#34; class=&#34;headerlink&#34; title=&#34;相关资源链接&#34;&gt;&lt;/a&gt;相关资源链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Xray-core GitHub:&lt;/strong&gt;(&lt;a href=&#34;https://github.com/XTLS/Xray-core&#34;&gt;https://github.com/XTLS/Xray-core&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3x-ui (MHSanaei) GitHub:&lt;/strong&gt;(&lt;a href=&#34;https://github.com/MHSanaei/3x-ui&#34;&gt;https://github.com/MHSanaei/3x-ui&lt;/a&gt;) 6&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare 官方文档:&lt;/strong&gt; &lt;a href=&#34;https://developers.cloudflare.com/&#34;&gt;https://developers.cloudflare.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nekoray 客户端:&lt;/strong&gt;(&lt;a href=&#34;https://github.com/MatsuriDayo/nekoray&#34;&gt;https://github.com/MatsuriDayo/nekoray&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V2RayNG 客户端 (Android):&lt;/strong&gt; &lt;a href=&#34;https://github.com/2dust/v2rayNG&#34;&gt;https://github.com/2dust/v2rayNG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ShadowRocket (iOS):&lt;/strong&gt; App Store (付费应用)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FoXray (iOS):&lt;/strong&gt; App Store&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WireGuard 官方网站:&lt;/strong&gt; &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;https://www.wireguard.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/05/31/cloudflare-dai-li-pei-zhi-duan-kou/</guid>
            <title>Cloudflare代理配置端口</title>
            <link>https://0xdadream.github.io/2025/05/31/cloudflare-dai-li-pei-zhi-duan-kou/</link>
            <category>cloudflare</category>
            <pubDate>Sat, 31 May 2025 16:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Cloudflare代理配置端口&#34;&gt;&lt;a href=&#34;#Cloudflare代理配置端口&#34; class=&#34;headerlink&#34; title=&#34;Cloudflare代理配置端口&#34;&gt;&lt;/a&gt;Cloudflare代理配置端口&lt;/h1&gt;&lt;h2 id=&#34;一、前提条件&#34;&gt;&lt;a href=&#34;#一、前提条件&#34; class=&#34;headerlink&#34; title=&#34;一、前提条件&#34;&gt;&lt;/a&gt;一、前提条件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;已有注册好的Cloudflare账号（免费即可）。&lt;/li&gt;
&lt;li&gt;已将你的域名成功接入Cloudflare（DNS已指向Cloudflare的Name Server）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;二、Cloudflare可用端口概述&#34;&gt;&lt;a href=&#34;#二、Cloudflare可用端口概述&#34; class=&#34;headerlink&#34; title=&#34;二、Cloudflare可用端口概述&#34;&gt;&lt;/a&gt;二、Cloudflare可用端口概述&lt;/h2&gt;&lt;p&gt;Cloudflare 仅能代理特定的HTTP和HTTPS端口。常用端口总结如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;协议&lt;/th&gt;
&lt;th&gt;可用端口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td&gt;80, 8080, 8880, 2052, 2082, 2086, 2095&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTPS&lt;/td&gt;
&lt;td&gt;443, 8443, 2053, 2083, 2087, 2096&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如果你的应用需要使用其他端口（如SSH、FTP），则必须使用Cloudflare的Spectrum服务（通常为付费企业版服务）。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;三、具体配置流程&#34;&gt;&lt;a href=&#34;#三、具体配置流程&#34; class=&#34;headerlink&#34; title=&#34;三、具体配置流程&#34;&gt;&lt;/a&gt;三、具体配置流程&lt;/h2&gt;&lt;p&gt;以将服务器的&lt;code&gt;8080&lt;/code&gt;端口通过Cloudflare实现域名访问为例：&lt;/p&gt;
&lt;h3 id=&#34;①-服务器端准备&#34;&gt;&lt;a href=&#34;#①-服务器端准备&#34; class=&#34;headerlink&#34; title=&#34;① 服务器端准备&#34;&gt;&lt;/a&gt;① 服务器端准备&lt;/h3&gt;&lt;p&gt;确保你的服务器端应用正常监听指定端口：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-bash&#34; data-language=&#34;bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;&lt;span class=&#34;token comment&#34;&gt;# 例如：测试8080端口是否开启&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;netstat&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-tunlp&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8080&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;②-Cloudflare-DNS设置&#34;&gt;&lt;a href=&#34;#②-Cloudflare-DNS设置&#34; class=&#34;headerlink&#34; title=&#34;② Cloudflare DNS设置&#34;&gt;&lt;/a&gt;② Cloudflare DNS设置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;登录Cloudflare后台：&lt;a href=&#34;https://dash.cloudflare.com/&#34;&gt;https://dash.cloudflare.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;选择已接入Cloudflare的域名。&lt;/li&gt;
&lt;li&gt;点击菜单栏中的&lt;code&gt;DNS&lt;/code&gt;选项卡。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;添加DNS记录：&#34;&gt;&lt;a href=&#34;#添加DNS记录：&#34; class=&#34;headerlink&#34; title=&#34;添加DNS记录：&#34;&gt;&lt;/a&gt;添加DNS记录：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;点击 &lt;code&gt;Add record&lt;/code&gt;（添加记录）。&lt;/li&gt;
&lt;li&gt;类型选择 &lt;code&gt;A&lt;/code&gt; 或 &lt;code&gt;CNAME&lt;/code&gt;：&lt;ul&gt;
&lt;li&gt;若为IP地址（例如服务器IP），选择&lt;code&gt;A&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;若为其他域名，选择&lt;code&gt;CNAME&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字段&lt;/th&gt;
&lt;th&gt;示例值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;&lt;code&gt;example&lt;/code&gt; （即你希望访问的子域名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IPv4 address&lt;/td&gt;
&lt;td&gt;&lt;code&gt;你的服务器IP&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxy status&lt;/td&gt;
&lt;td&gt;选择橙色云图标（✅代理）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;最终访问域名形式如：&lt;code&gt;example.yourdomain.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;③-服务端口访问说明&#34;&gt;&lt;a href=&#34;#③-服务端口访问说明&#34; class=&#34;headerlink&#34; title=&#34;③ 服务端口访问说明&#34;&gt;&lt;/a&gt;③ 服务端口访问说明&lt;/h3&gt;&lt;p&gt;Cloudflare不会直接显示端口号在URL中。因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你的服务器使用Cloudflare默认支持的端口（如8080），你在访问时&lt;strong&gt;不需要明确指定端口号&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;实际请求如：&lt;code&gt;http://example.yourdomain.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你的服务器上仍然监听的是8080端口，Cloudflare则自动将访问请求代理至此端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例场景&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用户访问URL&lt;/th&gt;
&lt;th&gt;实际服务器监听端口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;http://example.yourdomain.com&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;https://example.yourdomain.com&lt;/code&gt;（HTTPS）&lt;/td&gt;
&lt;td&gt;8443、443等（按需设置）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;四、HTTPS-配置&#34;&gt;&lt;a href=&#34;#四、HTTPS-配置&#34; class=&#34;headerlink&#34; title=&#34;四、HTTPS 配置&#34;&gt;&lt;/a&gt;四、HTTPS 配置&lt;/h2&gt;&lt;p&gt;若你希望使用HTTPS访问：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到Cloudflare后台 → &lt;code&gt;SSL/TLS&lt;/code&gt; 选项：&lt;ul&gt;
&lt;li&gt;推荐设置为&lt;code&gt;Flexible&lt;/code&gt;（最简单）或&lt;code&gt;Full&lt;/code&gt;模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果是&lt;code&gt;Full&lt;/code&gt;模式（推荐）：&lt;ul&gt;
&lt;li&gt;服务器上需要配置SSL证书（可以使用免费的证书如Let’s Encrypt）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;示例-Nginx-配置（Full-模式）：&#34;&gt;&lt;a href=&#34;#示例-Nginx-配置（Full-模式）：&#34; class=&#34;headerlink&#34; title=&#34;示例 Nginx 配置（Full 模式）：&#34;&gt;&lt;/a&gt;示例 Nginx 配置（Full 模式）：&lt;/h3&gt;&lt;pre class=&#34;line-numbers language-nginx&#34; data-language=&#34;nginx&#34;&gt;&lt;code class=&#34;language-nginx&#34;&gt;&lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;server&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8443&lt;/span&gt; ssl&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; 
    &lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;server_name&lt;/span&gt; example.yourdomain.com&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;ssl_certificate&lt;/span&gt;     /path/to/cert.pem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;ssl_certificate_key&lt;/span&gt; /path/to/key.pem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;location&lt;/span&gt; /&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;proxy_pass&lt;/span&gt; http://localhost:8080&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;proxy_set_header&lt;/span&gt; Host &lt;span class=&#34;token variable&#34;&gt;$host&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;proxy_set_header&lt;/span&gt; X-Forwarded-For &lt;span class=&#34;token variable&#34;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token directive&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;proxy_set_header&lt;/span&gt; X-Real-IP &lt;span class=&#34;token variable&#34;&gt;$remote_addr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Cloudflare → 8443（HTTPS）→ Nginx → 8080（HTTP内网服务）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;五、其他非标准端口（如SSH、FTP）支持方法&#34;&gt;&lt;a href=&#34;#五、其他非标准端口（如SSH、FTP）支持方法&#34; class=&#34;headerlink&#34; title=&#34;五、其他非标准端口（如SSH、FTP）支持方法&#34;&gt;&lt;/a&gt;五、其他非标准端口（如SSH、FTP）支持方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;默认Cloudflare免费版不支持SSH、FTP等非HTTP端口代理。&lt;/li&gt;
&lt;li&gt;若有这类需求，可以购买Cloudflare Spectrum服务：&lt;ul&gt;
&lt;li&gt;在Cloudflare后台，进入Spectrum（频谱）服务，选择协议和端口映射到你的服务器IP地址即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;六、常见问题与解决办法&#34;&gt;&lt;a href=&#34;#六、常见问题与解决办法&#34; class=&#34;headerlink&#34; title=&#34;六、常见问题与解决办法&#34;&gt;&lt;/a&gt;六、常见问题与解决办法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;访问失败或返回522错误&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;检查服务器端防火墙是否允许Cloudflare IP段访问服务器端口。&lt;/li&gt;
&lt;li&gt;检查服务器程序是否正常运行，端口是否已开启。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL问题&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;Flexible模式下，无需服务器端SSL证书（Cloudflare自动处理）。&lt;/li&gt;
&lt;li&gt;Full模式必须安装SSL证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2025/05/31/sing-box-da-jian-jie-dian/</guid>
            <title>Sing-box 搭建您的专属科学上网节点实用指南</title>
            <link>https://0xdadream.github.io/2025/05/31/sing-box-da-jian-jie-dian/</link>
            <category>教程</category>
            <pubDate>Sat, 31 May 2025 12:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Sing-box-搭建您的专属“科学上网”节点实用指南&#34;&gt;&lt;a href=&#34;#Sing-box-搭建您的专属“科学上网”节点实用指南&#34; class=&#34;headerlink&#34; title=&#34;Sing-box 搭建您的专属“科学上网”节点实用指南&#34;&gt;&lt;/a&gt;Sing-box 搭建您的专属“科学上网”节点实用指南&lt;/h1&gt;&lt;h2 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&#34;Sing-box-简介：强大的通用代理平台&#34;&gt;&lt;a href=&#34;#Sing-box-简介：强大的通用代理平台&#34; class=&#34;headerlink&#34; title=&#34;Sing-box 简介：强大的通用代理平台&#34;&gt;&lt;/a&gt;Sing-box 简介：强大的通用代理平台&lt;/h3&gt;&lt;p&gt;Sing-box 是一款新兴且功能强大的通用代理平台，被广泛认为是 V2Ray 和 Xray 等成熟工具的有力替代品 。它凭借其卓越的性能、轻量化的设计、对多种代理协议的广泛支持、高度模块化的架构以及积极的社区开发，迅速获得了用户的青睐 。Sing-box 基于 Go 语言开发，并以开源形式发布，这不仅保证了其透明度和安全性，也促进了社区的共同发展和完善 。&lt;/p&gt;
&lt;h3 id=&#34;本教程目标&#34;&gt;&lt;a href=&#34;#本教程目标&#34; class=&#34;headerlink&#34; title=&#34;本教程目标&#34;&gt;&lt;/a&gt;本教程目标&lt;/h3&gt;&lt;p&gt;本教程旨在提供一个从零开始的详尽指南，帮助具备一定技术背景的用户在自己的服务器上成功安装和配置 sing-box，并部署多种当前流行且高效的代理协议。通过本教程，用户将能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择合适的服务器并完成 sing-box 的安装。&lt;/li&gt;
&lt;li&gt;理解 sing-box 的核心概念和配置文件结构。&lt;/li&gt;
&lt;li&gt;配置服务器防火墙，确保代理服务的正常运行。&lt;/li&gt;
&lt;li&gt;详细配置 VLESS (配合 Reality)、Trojan (配合 TLS)、Shadowsocks (2022新加密)、Hysteria2 和 TUIC 等主流代理协议。&lt;/li&gt;
&lt;li&gt;了解客户端的基本配置方法和主流客户端软件。&lt;/li&gt;
&lt;li&gt;初步接触如使用 CDN 隐藏服务器 IP、配置基本路由和故障转移等高级技巧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管本教程力求详尽，但 sing-box 的功能远不止于此。鼓励用户在掌握基础后，进一步查阅其官方文档 ，探索更多高级定制功能，以满足个性化需求。&lt;/p&gt;
&lt;h2 id=&#34;第一章：理解与安装-Sing-box&#34;&gt;&lt;a href=&#34;#第一章：理解与安装-Sing-box&#34; class=&#34;headerlink&#34; title=&#34;第一章：理解与安装 Sing-box&#34;&gt;&lt;/a&gt;第一章：理解与安装 Sing-box&lt;/h2&gt;&lt;h3 id=&#34;1-1-Sing-box-核心概念：构建代理节点的基石&#34;&gt;&lt;a href=&#34;#1-1-Sing-box-核心概念：构建代理节点的基石&#34; class=&#34;headerlink&#34; title=&#34;1.1. Sing-box 核心概念：构建代理节点的基石&#34;&gt;&lt;/a&gt;1.1. Sing-box 核心概念：构建代理节点的基石&lt;/h3&gt;&lt;p&gt;理解 sing-box 的核心组件及其交互方式，是成功配置和高效使用该平台的基础。其模块化设计允许用户灵活组合不同的功能模块，以适应多样化的网络环境和需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;入站连接 (Inbounds):&lt;/strong&gt; 入站连接负责处理从客户端设备（例如您的电脑或手机）传入 sing-box 服务器的连接请求。Sing-box 支持多种入站协议类型，常见的包括 Shadowsocks、Trojan、VLESS、VMess、Hysteria2、TUIC、Naive、ShadowTLS，以及用于创建虚拟网卡的 Tun 和用于透明代理的 Redirect 等 。用户可以根据客户端的支持情况和安全需求选择合适的入站协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;出站连接 (Outbounds):&lt;/strong&gt; 出站连接定义了 sing-box 服务器如何处理经过其的数据流，即如何将数据转发到目标互联网地址或其他代理服务器。常见的出站类型有 Direct（直接连接）、Block（阻止连接）、Shadowsocks、Trojan、VLESS、WireGuard、Hysteria2、TUIC，以及专门用于 DNS 查询的 DNS、用于节点选择的 Selector 和用于故障转移的 URLTest 等 。这种设计使得 sing-box 不仅能作为代理服务器，还能作为客户端连接其他代理，或实现复杂的代理链。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;路由 (Route):&lt;/strong&gt; 路由模块是 sing-box 实现精细化流量控制的核心。用户可以通过定义一系列路由规则，根据流量的目标地址（如 GeoIP 数据库判断的地理位置、Geosite 预设的网站域名集合）、域名、协议类型等多种条件，将特定的流量导向不同的出站连接 。例如，可以配置国内网站直连，国外网站通过代理访问，从而优化访问速度和资源利用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DNS 配置:&lt;/strong&gt; DNS（域名系统）在网络通信中扮演着将域名转换为 IP 地址的关键角色。Sing-box 内建了强大的 DNS 处理能力，允许用户配置自定义 DNS 服务器、设定 DNS 路由规则，并支持如 FakeIP（虚拟 IP）等高级功能，以防止 DNS 泄露，确保域名解析的准确性和安全性 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;配置文件 (&lt;code&gt;config.json&lt;/code&gt;):&lt;/strong&gt; Sing-box 的所有配置均通过一个 JSON 格式的文件进行管理，通常命名为 &lt;code&gt;config.json&lt;/code&gt; 。该文件包含了日志、DNS、入站、出站、路由等所有模块的配置信息。其顶层结构通常如下所示：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;log&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;dns&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;inbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;outbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;route&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;experimental&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;熟悉 JSON 语法并理解各配置项的含义对于手动配置 sing-box至关重要。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sing-box 的架构设计体现了高度的模块化，官方文档 在其配置结构中明确区分了入站、出站和路由等组件。这种设计带来了显著的灵活性，例如支持同时作为客户端和服务器运行 ，以及实现多协议负载均衡 。这意味着用户可以根据具体需求自由组合这些模块，构建从简单的个人代理到复杂的多跳转发网关等各种应用场景，这相较于一些功能固化的工具是一个显著的优势。&lt;/p&gt;
&lt;h3 id=&#34;1-2-选择您的服务器-VPS-：地理位置与操作系统考量&#34;&gt;&lt;a href=&#34;#1-2-选择您的服务器-VPS-：地理位置与操作系统考量&#34; class=&#34;headerlink&#34; title=&#34;1.2. 选择您的服务器 (VPS)：地理位置与操作系统考量&#34;&gt;&lt;/a&gt;1.2. 选择您的服务器 (VPS)：地理位置与操作系统考量&lt;/h3&gt;&lt;p&gt;选择一台合适的虚拟专用服务器（VPS）是搭建稳定高效代理服务的前提。以下是一些关键考量因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;地理位置:&lt;/strong&gt; 服务器的地理位置直接影响到您的访问速度和能否顺畅访问特定区域的内容。应选择距离用户较近且能提供良好国际网络连接的地区。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务商信誉:&lt;/strong&gt; 选择知名且信誉良好的 VPS 服务商，以确保服务的稳定性、可靠的技术支持和合理的资源分配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源需求:&lt;/strong&gt; 根据预期的负载情况，选择合适的 CPU、内存（RAM）和带宽。对于个人使用，通常入门级配置即可满足需求，但如果用户较多或流量较大，则需相应提高配置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统:&lt;/strong&gt; 强烈推荐选用 Linux 发行版，特别是 &lt;strong&gt;Ubuntu 或 Debian&lt;/strong&gt;。这两个发行版拥有庞大的用户社区、丰富的文档资源，并且 sing-box 官方提供了便捷的安装脚本和软件包支持 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;绝大多数关于 sing-box 及类似代理工具的安装指南和社区讨论都集中在 Linux 平台 。这并非偶然，Linux 服务器以其经济高效、命令行环境的强大管理能力以及 &lt;code&gt;systemd&lt;/code&gt; 等标准化服务管理工具 1成为自建代理服务的首选。Sing-box 本身也对 Linux 提供了深度支持，包括一些依赖特定操作系统内核的功能（如 TUN 模式） 。因此，对于追求稳定、文档完善且易于维护的服务器端部署而言，选择 Ubuntu 或 Debian Linux 将是最直接且高效的路径。&lt;/p&gt;
&lt;h3 id=&#34;1-3-在您的服务器上安装-Sing-box-以-Ubuntu-Debian-为例&#34;&gt;&lt;a href=&#34;#1-3-在您的服务器上安装-Sing-box-以-Ubuntu-Debian-为例&#34; class=&#34;headerlink&#34; title=&#34;1.3. 在您的服务器上安装 Sing-box (以 Ubuntu/Debian 为例)&#34;&gt;&lt;/a&gt;1.3. 在您的服务器上安装 Sing-box (以 Ubuntu/Debian 为例)&lt;/h3&gt;&lt;p&gt;Sing-box 提供了多种安装方式，对于 Ubuntu/Debian 系统，推荐使用官方提供的安装脚本，操作简便快捷。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用官方通用安装脚本:&lt;/p&gt;
&lt;p&gt;通过以下命令下载并执行安装脚本，该脚本会自动检测系统并安装最新稳定版的 sing-box：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;curl -fsSL https://sing-box.app/install.sh | sudo bash&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果偏好专门为 Debian/Ubuntu 优化的脚本，可以使用：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;curl -fsSL https://sing-box.app/deb-install.sh | sudo bash&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装特定版本或 Beta 测试版:&lt;/p&gt;
&lt;p&gt;如果需要安装 Beta 版本以体验最新功能，或指定安装某一特定版本，可以在执行脚本时附加参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装最新 Beta 版：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;curl -fsSL https://sing-box.app/install.sh | sudo bash -s -- --beta&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装特定版本 (例如 1.8.0)：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;curl -fsSL https://sing-box.app/install.sh | sudo bash -s -- --version 1.8.0&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 APT 软件源安装 (适用于 Debian/Ubuntu):&lt;/p&gt;
&lt;p&gt;对于希望通过系统包管理器管理 sing-box 的用户，可以添加 SagerNet 的官方 APT 软件源：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo mkdir -p /etc/apt/keyrings &amp;amp;&amp;amp; \
sudo curl -fsSL https://sing-box.app/gpg.key -o /etc/apt/keyrings/sagernet.asc &amp;amp;&amp;amp; \
sudo chmod a+r /etc/apt/keyrings/sagernet.asc &amp;amp;&amp;amp; \
echo &#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/sagernet.asc] https://deb.sagernet.org/ * *&#34; | \
sudo tee /etc/apt/sources.list.d/sagernet.list &amp;gt; /dev/null &amp;amp;&amp;amp; \
sudo apt-get update &amp;amp;&amp;amp; \
sudo apt-get install sing-box&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方式便于后续的更新和维护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他操作系统安装简介:&lt;/p&gt;
&lt;p&gt;尽管本教程主要关注 Linux 服务器，但 sing-box 的命令行版本也支持其他操作系统。例如，macOS 用户可以通过 Homebrew (brew install sing-box) 安装，Windows 用户可以使用 Scoop (scoop install sing-box) 或 Chocolatey (choco install sing-box) 进行安装 。这些主要适用于在本地计算机上使用 sing-box 命令行客户端的场景。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-4-Sing-box-核心命令行工具-CLI&#34;&gt;&lt;a href=&#34;#1-4-Sing-box-核心命令行工具-CLI&#34; class=&#34;headerlink&#34; title=&#34;1.4. Sing-box 核心命令行工具 (CLI)&#34;&gt;&lt;/a&gt;1.4. Sing-box 核心命令行工具 (CLI)&lt;/h3&gt;&lt;p&gt;掌握 sing-box 的命令行工具对于服务器管理、配置调试和自动化操作至关重要。以下是一些最常用的命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sing-box version&lt;/code&gt;: 显示已安装的 sing-box 版本信息，包括构建标签 (build tags) 。构建标签指明了编译时包含了哪些特性，例如 &lt;code&gt;with_reality_server&lt;/code&gt; 表示支持 Reality 协议，&lt;code&gt;with_quic&lt;/code&gt; 表示支持 QUIC 协议。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box run -c /etc/sing-box/config.json&lt;/code&gt;: 使用指定的配置文件启动 sing-box 服务 。默认情况下，sing-box 会查找 &lt;code&gt;/etc/sing-box/config.json&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box check -c /etc/sing-box/config.json&lt;/code&gt;: 校验配置文件的语法和基本逻辑是否正确，这是在启动或重启服务前非常重要的一步 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box format -w -c /etc/sing-box/config.json&lt;/code&gt;: 格式化（美化）JSON 配置文件，使其更易读。&lt;code&gt;-w&lt;/code&gt; 参数表示直接写入修改到原文件 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box generate uuid&lt;/code&gt;: 生成一个标准的 UUID (通用唯一识别码)，常用于 VLESS、VMess 等协议的用户ID配置 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box generate reality-keypair&lt;/code&gt;: 生成一对公私钥，专用于配置 VLESS Reality 协议 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过 &lt;code&gt;systemd&lt;/code&gt; 管理服务 (若已安装为系统服务):&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl start sing-box&lt;/code&gt;: 启动服务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl stop sing-box&lt;/code&gt;: 停止服务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl restart sing-box&lt;/code&gt;: 重启服务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl enable sing-box&lt;/code&gt;: 设置服务开机自启。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl status sing-box&lt;/code&gt;: 查看服务运行状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo journalctl -u sing-box -f --output cat&lt;/code&gt;: 实时查看服务日志（ &lt;code&gt;-f&lt;/code&gt; 表示 follow，&lt;code&gt;--output cat&lt;/code&gt; 以简化格式输出） 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sing-box 提供的一系列命令行工具，覆盖了从运行、配置管理到密钥生成的各个核心环节 。这些工具不仅是手动管理 sing-box 实例的基础，更是实现自动化部署、配置更新等高级操作的基石。例如，&lt;code&gt;generate uuid&lt;/code&gt; 和 &lt;code&gt;generate reality-keypair&lt;/code&gt; 等命令简化了需要特定加密材料的协议的配置过程。同时，通过 &lt;code&gt;systemctl&lt;/code&gt; 与 Linux 标准服务管理体系的集成，确保了 sing-box 服务的稳定可靠运行。因此，即使未来出现更多图形化管理界面，熟练运用这些命令行工具对于任何希望深度掌控和高效运维 sing-box 服务器的管理员来说，都是不可或缺的技能。&lt;/p&gt;
&lt;h3 id=&#34;1-5-config-json-文件结构解析-再探&#34;&gt;&lt;a href=&#34;#1-5-config-json-文件结构解析-再探&#34; class=&#34;headerlink&#34; title=&#34;1.5. config.json 文件结构解析 (再探)&#34;&gt;&lt;/a&gt;1.5. &lt;code&gt;config.json&lt;/code&gt; 文件结构解析 (再探)&lt;/h3&gt;&lt;p&gt;再次强调 &lt;code&gt;config.json&lt;/code&gt; 的核心地位及其主要构成部分，有助于用户在后续章节中更好地理解和修改配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;log&lt;/code&gt;&lt;/strong&gt;: 配置日志记录的级别（如 &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;trace&lt;/code&gt;）、输出位置（默认标准输出，可指定文件路径）以及是否添加时间戳等 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;dns&lt;/code&gt;&lt;/strong&gt;: 管理 DNS 解析行为，包括设置上游 DNS 服务器、DNS 策略（如 IPv4_only）、DNS 规则（如根据域名分流到不同 DNS 服务器）、FakeIP 等 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ntp&lt;/code&gt;&lt;/strong&gt;: 网络时间协议 (NTP) 配置，用于同步服务器时间，确保时间准确性，这对于某些依赖时间戳的加密协议和证书验证非常重要 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;inbounds&lt;/code&gt;&lt;/strong&gt;: 定义一个或多个入站连接处理器。每个入站配置指定了监听的 IP 地址、端口、协议类型（如 VLESS, Trojan）以及该协议所需的用户认证、TLS 等参数 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;outbounds&lt;/code&gt;&lt;/strong&gt;: 定义一个或多个出站连接处理器。每个出站配置指定了连接的目标服务器、端口、协议类型（如 &lt;code&gt;direct&lt;/code&gt; 直连, &lt;code&gt;block&lt;/code&gt; 阻止, 或具体的代理协议）以及相应的认证和传输参数 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;route&lt;/code&gt;&lt;/strong&gt;: 包含路由规则列表。这些规则决定了符合特定条件的入站流量应该被转发到哪个出站连接。规则可以基于域名、IP、地理位置、端口、进程名等多种条件 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;experimental&lt;/code&gt;&lt;/strong&gt;: 用于配置一些实验性功能，例如 Clash API 兼容接口，允许通过 Clash 兼容的控制面板管理 sing-box 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对这些主要部分的理解，将为后续针对不同协议的具体配置打下坚实基础。&lt;/p&gt;
&lt;h2 id=&#34;第二章：准备您的服务器环境&#34;&gt;&lt;a href=&#34;#第二章：准备您的服务器环境&#34; class=&#34;headerlink&#34; title=&#34;第二章：准备您的服务器环境&#34;&gt;&lt;/a&gt;第二章：准备您的服务器环境&lt;/h2&gt;&lt;p&gt;在正式配置 sing-box 代理协议之前，确保服务器环境的安全性与网络通畅性至关重要。&lt;/p&gt;
&lt;h3 id=&#34;2-1-基础服务器安全加固-简述&#34;&gt;&lt;a href=&#34;#2-1-基础服务器安全加固-简述&#34; class=&#34;headerlink&#34; title=&#34;2.1. 基础服务器安全加固 (简述)&#34;&gt;&lt;/a&gt;2.1. 基础服务器安全加固 (简述)&lt;/h3&gt;&lt;p&gt;一台暴露在公网的服务器需要基本的安全防护措施：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统更新:&lt;/p&gt;
&lt;p&gt; 始终保持操作系统及其软件包为最新版本，以修复已知的安全漏洞。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SSH 安全:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用密钥认证:&lt;/strong&gt; 强烈建议禁用密码登录，转而使用 SSH 密钥对进行认证，这能极大提高登录安全性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;禁止 root 登录:&lt;/strong&gt; 修改 SSHD 配置 (&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;)，设置 &lt;code&gt;PermitRootLogin no&lt;/code&gt;，并使用普通用户登录后再通过 &lt;code&gt;sudo&lt;/code&gt; 执行特权命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(可选) 修改 SSH 默认端口:&lt;/strong&gt; 将 SSH 服务从默认的 22 端口迁移到其他非标准端口，可以在一定程度上减少自动化的扫描和爆破尝试，但这更多的是一种“安全靠隐蔽”的次要措施。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本教程不提供详尽的服务器安全指南，以上仅为最基础的建议。用户应根据自身情况参考更专业的安全文档进行加固。&lt;/p&gt;
&lt;h3 id=&#34;2-2-防火墙配置：为代理协议开放端口&#34;&gt;&lt;a href=&#34;#2-2-防火墙配置：为代理协议开放端口&#34; class=&#34;headerlink&#34; title=&#34;2.2. 防火墙配置：为代理协议开放端口&#34;&gt;&lt;/a&gt;2.2. 防火墙配置：为代理协议开放端口&lt;/h3&gt;&lt;p&gt;防火墙是服务器的第一道网络防线，它控制着哪些端口允许外部访问。您必须为计划使用的代理协议开放相应的服务器端口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 Ubuntu/Debian 上使用 UFW (Uncomplicated Firewall):&lt;/p&gt;
&lt;p&gt;UFW 是一个用户友好的防火墙管理工具。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装 UFW (如果尚未安装):&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo apt install ufw&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置默认策略:&lt;/p&gt;
&lt;p&gt; 拒绝所有传入连接，允许所有传出连接。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo ufw default deny incoming
sudo ufw default allow outgoing&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;允许 SSH 连接 (关键步骤):&lt;/p&gt;
&lt;p&gt; 在启用 UFW 之前，务必先允许 SSH 连接，否则您可能会失去对服务器的访问权限。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo ufw allow ssh&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者，如果您修改了 SSH 端口：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo ufw allow &amp;lt;您的_SSH_端口&amp;gt;/tcp&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为代理协议开放端口:&lt;/p&gt;
&lt;p&gt; 根据您选择的协议和配置的端口，使用以下命令开放 TCP 和/或 UDP 端口。例如，如果您计划在 8443 端口上运行一个 TCP 协议，在 9000-9005 端口范围运行一个 UDP 协议：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo ufw allow 8443/tcp
sudo ufw allow 9000:9005/udp&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启用 UFW:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo ufw enable&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;系统会提示操作可能中断现有 SSH 连接，确认即可。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看状态:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo ufw status verbose&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 CentOS/RHEL/Fedora (及部分 Debian/Ubuntu) 上使用 firewalld:&lt;/p&gt;
&lt;p&gt;firewalld 是另一款常用的动态防火墙管理工具。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;查看 &lt;code&gt;firewalld&lt;/code&gt; 状态:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo firewall-cmd --state&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;永久开放端口:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo firewall-cmd --permanent --add-port=&amp;lt;端口号&amp;gt;/tcp
sudo firewall-cmd --permanent --add-port=&amp;lt;端口号&amp;gt;/udp
sudo firewall-cmd --permanent --add-port=&amp;lt;起始端口&amp;gt;-&amp;lt;结束端口&amp;gt;/tcp&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;永久开放服务 (例如 HTTPS，如果协议伪装在 443 端口):&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo firewall-cmd --permanent --add-service=https&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重新加载 &lt;code&gt;firewalld&lt;/code&gt; 配置使其生效:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo firewall-cmd --reload&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看已开放的端口:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo firewall-cmd --list-ports&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;表 2.2.1: 常见代理协议及其默认/推荐端口&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;协议&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;默认/常用端口&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;TCP/UDP&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;VLESS (Reality)&lt;/td&gt;
&lt;td&gt;443, 80, 其他自定义端口&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;常使用 443 端口伪装成 HTTPS。Reality 可灵活使用多种端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trojan (TLS)&lt;/td&gt;
&lt;td&gt;443&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;通常使用 443 端口进行 TLS 加密通信。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shadowsocks&lt;/td&gt;
&lt;td&gt;用户自定义 (如 8388, 443)&lt;/td&gt;
&lt;td&gt;TCP/UDP&lt;/td&gt;
&lt;td&gt;无标准端口；443 端口可用于流量混淆。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hysteria2&lt;/td&gt;
&lt;td&gt;用户自定义&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;基于 QUIC，常使用高位端口或 443/udp。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TUIC&lt;/td&gt;
&lt;td&gt;用户自定义&lt;/td&gt;
&lt;td&gt;UDP&lt;/td&gt;
&lt;td&gt;基于 QUIC，常使用高位端口或 443/udp。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VMess&lt;/td&gt;
&lt;td&gt;用户自定义&lt;/td&gt;
&lt;td&gt;TCP/UDP&lt;/td&gt;
&lt;td&gt;无标准端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ShadowTLS&lt;/td&gt;
&lt;td&gt;443 (外层)&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;包装其他协议，外层连接通常在 443 端口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NaiveProxy&lt;/td&gt;
&lt;td&gt;443, 80&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;模仿标准 Web 流量。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;无论是 UFW  还是 &lt;code&gt;firewalld&lt;/code&gt;，其默认策略通常是拒绝所有未经明确允许的入站连接。这是一种基础且重要的安全实践，旨在最小化服务器的潜在攻击面。因此，用户必须显式地为 SSH（远程管理）和计划运行的代理协议开放端口。忽略或错误配置防火墙，不仅可能导致代理服务无法访问，还可能使服务器暴露于不必要的安全风险之下。因此，防火墙的正确配置是保障代理节点正常运作和安全性的前提条件。&lt;/p&gt;
&lt;h2 id=&#34;第三章：在-Sing-box-中配置热门协议&#34;&gt;&lt;a href=&#34;#第三章：在-Sing-box-中配置热门协议&#34; class=&#34;headerlink&#34; title=&#34;第三章：在 Sing-box 中配置热门协议&#34;&gt;&lt;/a&gt;第三章：在 Sing-box 中配置热门协议&lt;/h2&gt;&lt;p&gt;本章节将详细介绍如何在 sing-box 中配置当前流行且在“科学上网”场景下表现优异的几种代理协议。每个协议的配置都将包含服务器端（入站）和客户端（出站）的 JSON 代码片段，并对关键字段进行解释。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;通用说明：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;每个协议小节都会简要介绍其特性、基于的传输方式（TCP/UDP）、加密和混淆技术，以及其在规避审查方面的有效性。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;所有配置示例均为 sing-box 的 JSON 格式，并附带注释说明。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;会提及配置该协议可能需要的前提条件，如域名、SSL 证书、生成的密钥对等。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-1-VLESS-配合-Reality-和-或-XTLS-Vision&#34;&gt;&lt;a href=&#34;#3-1-VLESS-配合-Reality-和-或-XTLS-Vision&#34; class=&#34;headerlink&#34; title=&#34;3.1. VLESS (配合 Reality 和/或 XTLS-Vision)&#34;&gt;&lt;/a&gt;3.1. VLESS (配合 Reality 和/或 XTLS-Vision)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;协议概述:&lt;/strong&gt; VLESS 以其高性能和灵活性著称。Reality 是一种先进的流量伪装技术，它使得代理服务器在未授权的探测者看来完全像一个真实的、普通的网站（例如 &lt;code&gt;www.microsoft.com&lt;/code&gt;），从而极大地增强了抗审查能力。XTLS-Vision 是一种流控模式，旨在进一步优化性能 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务器 (入站) 配置 (VLESS + Reality):&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;inbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;tls&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;enabled&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;server_name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your.actual.domain.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 你的真实域名，用于申请证书 (如果使用 ACME)&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;reality&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;enabled&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;handshake&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;token property&#34;&gt;&#34;server&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;www.microsoft.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 伪装的目标网站域名&lt;/span&gt;
            &lt;span class=&#34;token property&#34;&gt;&#34;server_port&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;443&lt;/span&gt;
          &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;private_key&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;YOUR_REALITY_PRIVATE_KEY&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 使用 &#39;sing-box generate reality-keypair&#39; 生成&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;short_id&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 1到2个字节的十六进制字符串，例如 &#34;01&#34; 或 &#34;abcd&#34;&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;max_time_difference&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1m&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 允许客户端与服务器的最大时间差&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// 如果不使用 Reality 自签名证书，而是为 your.actual.domain.com 申请真实证书，&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// 则需要配置 ACME 或 certificate_path/key_path&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// &#34;acme&#34;: {&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//   &#34;domain&#34;: &#34;your.actual.domain.com&#34;,&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//   &#34;email&#34;: &#34;your-email@example.com&#34;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// }&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;关键解释:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uuid&lt;/code&gt;: 用户的唯一标识符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.server_name&lt;/code&gt;: 对于 Reality 而言，此处的 &lt;code&gt;server_name&lt;/code&gt; 是您希望 Reality “伪装”成的目标网站的域名，客户端连接时会使用这个 SNI。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reality.handshake.server&lt;/code&gt;: 实际发起 TLS 握手的目标服务器，通常是知名的大型网站，以增加伪装的真实性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reality.private_key&lt;/code&gt;: 通过 &lt;code&gt;sing-box generate reality-keypair&lt;/code&gt; 命令生成的私钥。公钥需要配置在客户端。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reality.short_id&lt;/code&gt;: 一个或多个短ID（1-2字节的十六进制字符串），客户端连接时需要匹配其中一个。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flow: &#34;xtls-rprx-vision&#34;&lt;/code&gt;: VLESS 的一种流处理模式，可提升性能 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;客户端 (出站) 配置 (VLESS + Reality):&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;outbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;关键解释:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tls.server_name&lt;/code&gt;: 客户端在发起 TLS 握手时使用的 SNI，&lt;strong&gt;必须&lt;/strong&gt;与服务器端 &lt;code&gt;reality.handshake.server&lt;/code&gt; 字段中配置的域名完全一致。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.reality.public_key&lt;/code&gt;: 服务器端通过 &lt;code&gt;sing-box generate reality-keypair&lt;/code&gt; 生成的公钥。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.utls.fingerprint&lt;/code&gt;: 模拟特定浏览器的 TLS 指纹，例如 “chrome”, “firefox”, “safari” 等，这有助于使流量看起来更像普通浏览器发出的流量，从而进一步抵抗指纹识别 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reality 技术的出现，是针对日益复杂的网络审查中主动探测和基于 SNI 封锁的有效回应 。传统的代理协议，即使流量加密，其 TLS 握手特征或服务器行为也可能被主动探测识别。同时，审查系统也可能直接封锁指向可疑服务器 IP 的特定 SNI 请求。Reality 通过“借用”一个高信誉、大流量的知名网站（如 &lt;code&gt;www.microsoft.com&lt;/code&gt;）的 TLS 握手信息作为“外壳”，使得 sing-box 服务器在初始连接阶段的行为与该知名网站无法区分，从而有效规避主动探测。在这次“伪装”握手之后，真实的 VLESS 代理流量才通过这对由 &lt;code&gt;private_key&lt;/code&gt; 和 &lt;code&gt;public_key&lt;/code&gt; 保护的加密通道进行传输。这种机制使得 VLESS + Reality 组合在当前环境下拥有极高的隐蔽性和抗封锁能力，是其广受欢迎的主要原因。&lt;/p&gt;
&lt;h3 id=&#34;3-2-Trojan-配合-TLS，可选-WebSocket-传输&#34;&gt;&lt;a href=&#34;#3-2-Trojan-配合-TLS，可选-WebSocket-传输&#34; class=&#34;headerlink&#34; title=&#34;3.2. Trojan (配合 TLS，可选 WebSocket 传输)&#34;&gt;&lt;/a&gt;3.2. Trojan (配合 TLS，可选 WebSocket 传输)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;协议概述:&lt;/strong&gt; Trojan 协议通过模仿 HTTPS 流量的特征，使其在网络传输中难以被识别和区分。它通常需要配合一个真实的域名和有效的 SSL/TLS 证书使用。WebSocket (WS) 作为一种可选的传输层协议，可以将 Trojan 流量进一步封装在标准的 HTTP/HTTPS 连接中，这不仅增强了伪装性，还使得流量可以通过 CDN (内容分发网络) 进行中转，隐藏真实服务器 IP 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务器 (入站) 配置 (Trojan + TLS):&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;inbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;tls&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;enabled&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;server_name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your.domain.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 你的域名&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// 使用 ACME 自动申请和续签证书 (推荐)&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;acme&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;domain&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your.domain.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;email&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your-email@example.com&#34;&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// 或者手动指定证书路径&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// &#34;certificate_path&#34;: &#34;/path/to/your/fullchain.pem&#34;,&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// &#34;key_path&#34;: &#34;/path/to/your/private.key&#34;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;multiplex&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 启用多路复用以提高性能&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;enabled&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;// 如果需要 WebSocket 传输 (例如配合 CDN)&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;// &#34;transport&#34;: {&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;//   &#34;type&#34;: &#34;ws&#34;,&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;//   &#34;path&#34;: &#34;/your-secret-websocket-path&#34; // 自定义 WebSocket 路径&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;// }&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;关键解释:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;users.password&lt;/code&gt;: Trojan 协议的认证密码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.server_name&lt;/code&gt;: 必须是您拥有的、并且 DNS 解析指向您服务器 IP 的域名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.acme&lt;/code&gt;: 推荐使用 ACME 自动管理 TLS 证书，sing-box 支持 Let’s Encrypt 等机构。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multiplex.enabled&lt;/code&gt;: 启用多路复用可以减少连接数，提高并发处理能力 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transport&lt;/code&gt; (可选): 如果配置为 &lt;code&gt;&#34;ws&#34;&lt;/code&gt;，则启用 WebSocket 传输。&lt;code&gt;path&lt;/code&gt; 是 WebSocket 的访问路径，应设置为一个不易被猜到的字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;客户端 (出站) 配置 (Trojan + TLS):&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;outbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;29 (WebSocket 部分参考 39)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键解释:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server&lt;/code&gt;: 连接的服务器地址，推荐使用域名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.server_name&lt;/code&gt;: 客户端进行 TLS 握手时提供的 SNI，必须与服务器证书绑定的域名一致，否则会导致握手失败。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls.utls.fingerprint&lt;/code&gt;: 模拟特定浏览器的 TLS 客户端行为，增强伪装性 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transport.headers.Host&lt;/code&gt; (使用 WS 时): 当通过 CDN 或反向代理连接时，通常需要设置正确的 &lt;code&gt;Host&lt;/code&gt; 头，使其指向您的源服务器域名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trojan 协议的核心设计理念在于其高度的 HTTPS 流量模拟能力 。配置中对 TLS 参数（如 &lt;code&gt;server_name&lt;/code&gt;、&lt;code&gt;certificate_path&lt;/code&gt;、&lt;code&gt;key_path&lt;/code&gt;）的强调，正是为了实现这种逼真的伪装 。一个与 &lt;code&gt;server_name&lt;/code&gt;（即您的域名）匹配的有效 TLS 证书，是构成可信 HTTPS 通信的基础。如果使用自签名证书或 SNI 不匹配，很容易被中间的网络设备识别为异常流量。将 Trojan 服务部署在标准的 HTTPS 端口 443 上，能进一步增强其隐蔽性。因此，选择 Trojan 协议的用户，必须准备好获取一个域名，并为该域名配置有效的 TLS 证书（可以通过 sing-box 内置的 ACME 功能自动申请，或手动配置）。若缺乏这些要素，Trojan 协议主要的伪装特性将大打折扣，其抗审查能力也会显著下降。&lt;/p&gt;
&lt;h3 id=&#34;3-3-Shadowsocks-重点关注-AEAD-2022-系列加密算法&#34;&gt;&lt;a href=&#34;#3-3-Shadowsocks-重点关注-AEAD-2022-系列加密算法&#34; class=&#34;headerlink&#34; title=&#34;3.3. Shadowsocks (重点关注 AEAD 2022 系列加密算法)&#34;&gt;&lt;/a&gt;3.3. Shadowsocks (重点关注 AEAD 2022 系列加密算法)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;协议概述:&lt;/strong&gt; Shadowsocks 是一种轻量级、广泛应用的代理协议。其 2022 系列的 AEAD (Authenticated Encryption with Associated Data) 加密算法，如 &lt;code&gt;2022-blake3-aes-128-gcm&lt;/code&gt;，因其在安全性和抗探测性方面的提升而被官方推荐使用 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务器 (入站) 配置:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;inbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;关键解释:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt;: 选择一个 2022 系列的 AEAD 加密算法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt;: Shadowsocks 的连接密码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multiplex.enabled&lt;/code&gt;: 启用多路复用。对于 Shadowsocks 而言，这不仅能提升性能，还能改善 UDP 流量的传输和隐蔽性 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;客户端 (出站) 配置:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;outbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sing-box 官方文档在介绍 Shadowsocks 时，&lt;em&gt;强烈建议&lt;/em&gt;开启多路复用功能来传输 UDP 流量，并指出“否则很容易受到被动检测” 。究其原因，传统的 Shadowsocks 实现（尤其是较早的加密方式或未启用多路复用的 UDP 传输）存在一些可被深度包检测（DPI）识别的流量特征 。多路复用技术（如 Shadowsocks 常用的 smux）允许在单个 TCP 连接上承载多个逻辑数据流，这不仅改变了流量模式，使其更难与使用连接池的常规网络流量区分开来，还为在 TCP 连接内隧道化 UDP 数据包提供了一种更为健壮和标准化的方式，这在许多受审查的网络环境中比直接转发原始 UDP 包更为可靠。因此，在 sing-box 中配置 Shadowsocks 时，用户应始终启用多路复用，特别是当需要可靠传输 UDP 流量（例如用于 QUIC 协议的应用、WebRTC 或在线游戏）时。忽视此建议将显著增加协议被探测和封锁的风险。&lt;/p&gt;
&lt;h3 id=&#34;3-4-Hysteria2-基于-QUIC，高性能&#34;&gt;&lt;a href=&#34;#3-4-Hysteria2-基于-QUIC，高性能&#34; class=&#34;headerlink&#34; title=&#34;3.4. Hysteria2 (基于 QUIC，高性能)&#34;&gt;&lt;/a&gt;3.4. Hysteria2 (基于 QUIC，高性能)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;协议概述:&lt;/strong&gt; Hysteria2 专为在不稳定和高丢包网络环境下提供高速传输而设计。它基于定制的 QUIC 协议，并采用名为 “Brutal” 的拥塞控制算法，力求在恶劣网络条件下榨干带宽。其流量特征旨在伪装成标准的 HTTP/3 流量 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务器 (入站) 配置:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;inbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;tls&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;enabled&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;server_name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your.domain.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 你的域名&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// 使用 ACME 自动申请证书&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;acme&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;domain&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your.domain.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;email&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your-email@example.com&#34;&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// 或手动指定证书&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// &#34;certificate_path&#34;: &#34;/path/to/your/fullchain.pem&#34;,&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// &#34;key_path&#34;: &#34;/path/to/your/private.key&#34;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;obfs&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 可选的 QUIC 流量混淆&lt;/span&gt;
         &lt;span class=&#34;token property&#34;&gt;&#34;type&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;salamander&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 目前仅支持 salamander&lt;/span&gt;
         &lt;span class=&#34;token property&#34;&gt;&#34;password&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;YOUR_OBFS_PASSWORD&#34;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;关键解释:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;up_mbps&lt;/code&gt;, &lt;code&gt;down_mbps&lt;/code&gt;: 定义服务器的上下行带宽限制。客户端也需要配置相应的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;users.password&lt;/code&gt; (或顶层 &lt;code&gt;password&lt;/code&gt;): Hysteria2 的认证密码。注意 sing-box 不支持官方 Hysteria 客户端的 &lt;code&gt;username:password&lt;/code&gt; 组合作为 &lt;code&gt;userpass&lt;/code&gt; 的别名，需要直接填写组合后的密码 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls&lt;/code&gt;: Hysteria2 依赖 TLS 进行加密和认证，配置方式与 Trojan 类似，需要域名和证书。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obfs&lt;/code&gt; (可选): Salamander 混淆器可以对 QUIC 流量进行额外处理，可能增加抗检测性，但也会带来性能开销 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;客户端 (出站) 配置:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;outbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hysteria2 的核心优势在于其基于 UDP (QUIC) 的特性以及独特的 “Brutal” 拥塞控制算法，这使其在网络质量较差、丢包率高的环境下仍能努力维持高吞吐量 。然而，这也可能成为其潜在的弱点。正如 sing-box 文档所警示的，“基于 UDP 的代理……实际上比基于 TCP 的代理具有更明显的特征” 。尽管 QUIC 对大部分头部信息进行了加密，但在某些严格审查的网络中，大量非标准端口的 UDP 通信本身就可能引起注意。此外，“Brutal”拥塞控制算法为了追求带宽最大化，其产生的流量模式可能与常规 Web 流量所使用的标准 TCP 拥塞控制算法（如 Cubic 或 BBR）有所不同，长期来看存在被指纹识别的风险。因此，用户在选择 Hysteria2 时，应权衡其在恶劣网络下的性能优势与这种潜在的可检测性。&lt;/p&gt;
&lt;h3 id=&#34;3-5-TUIC-基于-QUIC，低延迟&#34;&gt;&lt;a href=&#34;#3-5-TUIC-基于-QUIC，低延迟&#34; class=&#34;headerlink&#34; title=&#34;3.5. TUIC (基于 QUIC，低延迟)&#34;&gt;&lt;/a&gt;3.5. TUIC (基于 QUIC，低延迟)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;协议概述:&lt;/strong&gt; TUIC 是另一款基于 QUIC 的代理协议，其设计重点在于最小化连接握手延迟，并支持 0-RTT 连接建立。它也提供了高效的 UDP 代理能力 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务器 (入站) 配置:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;inbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;congestion_control&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;bbr&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 拥塞控制算法，可选 &#34;cubic&#34;, &#34;new_reno&#34;, &#34;bbr&#34;&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;auth_timeout&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3s&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 认证超时时间&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;heartbeat_interval&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;10s&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 心跳间隔 (sing-box v1.9+ 使用此字段名)&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;tls&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;enabled&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;server_name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your.domain.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;acme&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;domain&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your.domain.com&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;email&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;your-email@example.com&#34;&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// 或手动指定证书&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// &#34;certificate_path&#34;: &#34;/path/to/your/fullchain.pem&#34;,&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// &#34;key_path&#34;: &#34;/path/to/your/private.key&#34;&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;// &#34;zero_rtt_handshake&#34;: false // 服务端通常不建议开启 0-RTT，有安全风险&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(字段名 &lt;code&gt;heartbeat_interval&lt;/code&gt; 对应新版 sing-box，旧版可能为 &lt;code&gt;heartbeat&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键解释:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;users&lt;/code&gt;: 包含 &lt;code&gt;uuid&lt;/code&gt; 和 &lt;code&gt;password&lt;/code&gt; 用于认证。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;congestion_control&lt;/code&gt;: 选择适合网络环境的 QUIC 拥塞控制算法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tls&lt;/code&gt;: 与 Hysteria2 类似，需要域名和证书。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zero_rtt_handshake&lt;/code&gt;: 服务端通常应保持禁用（默认或显式设置为 &lt;code&gt;false&lt;/code&gt;），以避免重放攻击的风险 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;客户端 (出站) 配置:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;outbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// QUIC 通常使用 h3 作为 ALPN&lt;/span&gt;
        &lt;span class=&#34;token property&#34;&gt;&#34;utls&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;enabled&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
          &lt;span class=&#34;token property&#34;&gt;&#34;fingerprint&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;chrome&#34;&lt;/span&gt;
        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;// &#34;insecure&#34;: true, // 如果服务器使用自签名证书且了解风险&lt;/span&gt;
      &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TUIC 协议以其 0-RTT（零往返时间）握手能力作为提升连接速度、降低延迟的一大亮点 。0-RTT 允许客户端在第一个数据包中就携带应用数据，这通过复用先前连接中协商好的会话参数来实现。然而，正如 sing-box 官方入站配置文档所强调的，服务端启用 &lt;code&gt;zero_rtt_handshake&lt;/code&gt; 存在被重放攻击的风险，并引用了 Cloudflare 关于“克隆人攻击”的文章作为佐证 。这种攻击的原理是，如果攻击者捕获了包含 0-RTT 数据的初始数据包，他们可以将这些数据包重放给服务器。由于服务器在处理 0-RTT 数据时无法轻易判断其新鲜度，这可能导致数据被重复处理或引发其他安全问题。尽管 QUIC 协议自身包含一些针对 0-RTT 的重放缓解措施，但并非万无一失。因此，对于注重安全性的应用场景，普遍建议谨慎对待 0-RTT，或避免将其用于非幂等请求。这意味着，尽管 TUIC 的 0-RTT 特性对延迟敏感型应用很有吸引力，用户必须清醒认识到相关的安全风险。为最大化安全性，服务端通常应禁用 0-RTT，即便这会牺牲部分握手延迟的极致优化。客户端仍可尝试发起 0-RTT 连接，但服务器端是否接受应由用户在充分理解并接受潜在风险后决定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表 3.1: 特色协议对比概览&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;特性/协议&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;VLESS (+Reality)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Trojan (+TLS/WSS)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Shadowsocks (2022)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Hysteria2&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;TUIC&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;基础协议&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;TCP (VLESS 本身传输层无关)&lt;/td&gt;
&lt;td&gt;TCP&lt;/td&gt;
&lt;td&gt;TCP (UDP via Mux)&lt;/td&gt;
&lt;td&gt;UDP (QUIC)&lt;/td&gt;
&lt;td&gt;UDP (QUIC)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主要混淆方式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;TLS (Reality 伪装真实网站)&lt;/td&gt;
&lt;td&gt;TLS (模仿 HTTPS)&lt;/td&gt;
&lt;td&gt;加密流, AEAD 加密&lt;/td&gt;
&lt;td&gt;QUIC 加密 (伪装 HTTP/3)&lt;/td&gt;
&lt;td&gt;QUIC 加密&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;隐蔽性 (vs GFW)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;高 (Reality)&lt;/td&gt;
&lt;td&gt;高 (如果配置得当)&lt;/td&gt;
&lt;td&gt;中到高 (2022 + Mux)&lt;/td&gt;
&lt;td&gt;中 (UDP 可能被针对)&lt;/td&gt;
&lt;td&gt;中 (UDP 可能被针对)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;性能表现&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;良好至优秀&lt;/td&gt;
&lt;td&gt;良好&lt;/td&gt;
&lt;td&gt;良好&lt;/td&gt;
&lt;td&gt;优秀 (尤其在恶劣网络)&lt;/td&gt;
&lt;td&gt;优秀 (低延迟)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;配置复杂度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;中 (Reality 增加步骤)&lt;/td&gt;
&lt;td&gt;中 (需域名/证书)&lt;/td&gt;
&lt;td&gt;低到中&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;td&gt;中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;核心优势&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Reality 带来的高隐蔽性&lt;/td&gt;
&lt;td&gt;强大的 HTTPS 模仿能力&lt;/td&gt;
&lt;td&gt;简洁, 广泛支持&lt;/td&gt;
&lt;td&gt;恶劣网络下的高吞吐&lt;/td&gt;
&lt;td&gt;低握手延迟, 0-RTT 选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主要劣势&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Reality 配置可能较复杂&lt;/td&gt;
&lt;td&gt;域名/证书管理&lt;/td&gt;
&lt;td&gt;旧版/不当配置易被检测&lt;/td&gt;
&lt;td&gt;UDP 封锁/限速, “明显特征” 30&lt;/td&gt;
&lt;td&gt;UDP 封锁/限速, 0-RTT 风险&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;第四章：配置您的客户端设备&#34;&gt;&lt;a href=&#34;#第四章：配置您的客户端设备&#34; class=&#34;headerlink&#34; title=&#34;第四章：配置您的客户端设备&#34;&gt;&lt;/a&gt;第四章：配置您的客户端设备&lt;/h2&gt;&lt;p&gt;成功搭建 sing-box 服务器后，下一步是在您的设备上配置客户端以连接并使用该服务。&lt;/p&gt;
&lt;h3 id=&#34;4-1-Sing-box-客户端通用配置原则&#34;&gt;&lt;a href=&#34;#4-1-Sing-box-客户端通用配置原则&#34; class=&#34;headerlink&#34; title=&#34;4.1. Sing-box 客户端通用配置原则&#34;&gt;&lt;/a&gt;4.1. Sing-box 客户端通用配置原则&lt;/h3&gt;&lt;p&gt;无论是使用 sing-box 命令行作为客户端，还是使用图形化客户端，其核心配置逻辑是相似的：客户端的 &lt;code&gt;outbounds&lt;/code&gt;（出站）设置必须与服务器端的 &lt;code&gt;inbounds&lt;/code&gt;（入站）设置相匹配。&lt;/p&gt;
&lt;p&gt;关键匹配参数包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务器地址 (server) 和端口 (server_port):&lt;/strong&gt; 客户端必须正确指向服务器的 IP 地址或域名，以及服务器上相应协议监听的端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户凭证 (UUID/password):&lt;/strong&gt; 对于需要认证的协议（如 VLESS, Trojan, Shadowsocks, Hysteria2, TUIC），客户端配置的 UUID 或密码必须与服务器端为该用户设定的凭证完全一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加密方法 (method/security):&lt;/strong&gt; 客户端选择的加密算法必须是服务器端支持并为该用户启用的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输设置 (transport):&lt;/strong&gt; 如果服务器端使用了特定的传输方式（如 WebSocket 的路径 &lt;code&gt;path&lt;/code&gt;，gRPC 的服务名 &lt;code&gt;serviceName&lt;/code&gt;），客户端必须进行相应的配置。&lt;/li&gt;
&lt;li&gt;TLS 设置 (tls):&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SNI (Server Name Indication):&lt;/strong&gt; 对于使用 TLS 的协议，客户端配置的 &lt;code&gt;server_name&lt;/code&gt; (SNI) 通常需要与服务器证书的域名或 Reality/Trojan 等协议期望的 SNI 一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;证书验证:&lt;/strong&gt; 客户端默认会验证服务器证书的有效性。如果服务器使用自签名证书，客户端需要配置信任该证书或（在了解风险的前提下）设置为不安全连接 (&lt;code&gt;insecure: true&lt;/code&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reality/uTLS:&lt;/strong&gt; 如果服务器端配置了 Reality，客户端必须配置对应的 &lt;code&gt;public_key&lt;/code&gt; 和 &lt;code&gt;short_id&lt;/code&gt;。使用 &lt;code&gt;utls&lt;/code&gt; 模拟浏览器指纹可以增强伪装性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议类型 (type):&lt;/strong&gt; 客户端 &lt;code&gt;outbounds&lt;/code&gt; 中的 &lt;code&gt;type&lt;/code&gt; 字段必须与服务器端 &lt;code&gt;inbounds&lt;/code&gt; 中配置的协议类型相对应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-2-使用-Sing-box-命令行作为客户端-适用于高级用户或连接其他服务器&#34;&gt;&lt;a href=&#34;#4-2-使用-Sing-box-命令行作为客户端-适用于高级用户或连接其他服务器&#34; class=&#34;headerlink&#34; title=&#34;4.2. 使用 Sing-box 命令行作为客户端 (适用于高级用户或连接其他服务器)&#34;&gt;&lt;/a&gt;4.2. 使用 Sing-box 命令行作为客户端 (适用于高级用户或连接其他服务器)&lt;/h3&gt;&lt;p&gt;对于高级用户，或者当您希望将一台设备（如另一台服务器或本地 Linux/macOS 机器）作为连接到主 sing-box 服务器的客户端时，可以直接使用 sing-box 命令行程序。&lt;/p&gt;
&lt;p&gt;以下是一个最小化的客户端 &lt;code&gt;config.json&lt;/code&gt; 示例，它包含日志、DNS、一个连接到 VLESS+Reality 服务器的出站，以及一个本地 SOCKS5 入站，允许本机其他应用程序通过此 sing-box 客户端进行代理：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;log&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;level&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;info&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 日志级别，可根据需要调整为 &#34;debug&#34; 获取更详细信息&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;timestamp&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;dns&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;servers&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;final&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;dns-remote&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 默认所有 DNS 查询走 &#34;dns-remote&#34;&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;strategy&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;ipv4_only&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// DNS 解析策略，可按需选择&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;inbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;outbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;route&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;rules&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;&#34;outbound&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;direct&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token comment&#34;&gt;// { &#34;geosite&#34;: &#34;category-ads-all&#34;, &#34;outbound&#34;: &#34;block&#34; }&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;final&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;proxy&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 默认情况下，所有其他流量都通过名为 &#34;proxy&#34; 的出站&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;auto_detect_interface&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 自动检测出口网络接口，某些情况下需要&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将上述配置保存为 &lt;code&gt;client_config.json&lt;/code&gt;，然后通过 &lt;code&gt;sing-box run -c client_config.json&lt;/code&gt; 运行。之后，将需要代理的应用程序的 SOCKS5 代理设置为 &lt;code&gt;127.0.0.1:1080&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h3 id=&#34;4-3-主流图形化客户端-GUI-概览&#34;&gt;&lt;a href=&#34;#4-3-主流图形化客户端-GUI-概览&#34; class=&#34;headerlink&#34; title=&#34;4.3. 主流图形化客户端 (GUI) 概览&#34;&gt;&lt;/a&gt;4.3. 主流图形化客户端 (GUI) 概览&lt;/h3&gt;&lt;p&gt;对于不习惯命令行的用户，或者希望在日常设备上便捷使用代理，可以选择各种支持 sing-box 内核或其协议的图形化客户端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;桌面端 (Windows/macOS/Linux):&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GUI.for.SingBox (下一代 Clash Verge):&lt;/strong&gt; 这是一款专为 sing-box 设计的图形化配置和管理工具，支持通过 GUI 创建和调整配置，管理配置文件（Profiles），最终生成 sing-box 可用的 &lt;code&gt;config.json&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nekoray / NekoBox:&lt;/strong&gt; 广受欢迎的多协议客户端，支持 sing-box、Xray、Clash 等多种核心，界面友好，易于上手 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hiddify-Next:&lt;/strong&gt; 另一款支持多种协议和 sing-box 的第三方 GUI 客户端 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clash Verge:&lt;/strong&gt; 主要为 Clash 核心设计，但由于其配置范式与 sing-box 有相似之处，且社区活跃，部分衍生项目或新版本可能增强对 sing-box 的兼容性或提供类似体验 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动端:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Android:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sing-box for Android (官方):&lt;/strong&gt; 由 SagerNet 开发的官方 Android 客户端，功能全面，紧跟 sing-box 内核更新 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SagerNet:&lt;/strong&gt; 也是 SagerNet 开发的一款支持多种协议（包括 sing-box 协议）的客户端 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NekoBox for Android:&lt;/strong&gt; Nekoray 的 Android 版本，同样支持 sing-box 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;iOS:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sing-box for Apple (官方):&lt;/strong&gt; 官方 iOS 客户端，提供原生体验 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shadowrocket (“小火箭”):&lt;/strong&gt; 老牌且功能强大的 iOS 网络工具，支持包括 Trojan, VLESS, Shadowsocks, Hysteria2, TUIC 在内的多种 sing-box 兼容协议 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stash:&lt;/strong&gt; 另一款流行的 iOS 代理客户端，以其强大的规则引擎和 sing-box 协议支持闻名 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Egern:&lt;/strong&gt; 支持多种协议，包括 sing-box 的主流协议 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FoXray:&lt;/strong&gt; 也被推荐用于 iOS 设备，支持 VLESS 等协议 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数图形化客户端都支持通过订阅链接（机场服务商提供）自动更新节点信息和配置，或者允许用户手动导入 sing-box 的 JSON 配置文件、单个节点的分享链接或扫描二维码添加节点 。&lt;/p&gt;
&lt;p&gt;近年来，通用型图形化客户端的兴起极大地简化了用户在多协议环境下的使用体验。诸如 Nekoray、GUI.for.SingBox、Hiddify 以及移动端的官方 sing-box 应用、Shadowrocket、Stash 等客户端，其设计目标就是兼容多种代理核心（如 sing-box, Clash, Xray）或 sing-box 所支持的广泛协议集 。这种趋势的背后，是用户往往拥有运行不同协议的服务器，或者需要根据网络状况和特定需求灵活切换协议。为每种协议维护独立的客户端应用显然十分繁琐。通用客户端通过提供统一的用户界面，简化了配置管理（通常通过配置文件或订阅链接实现）和代理切换的流程。Sing-box 作为库或核心的能力 ，也为其被集成到这些第三方 GUI 客户端提供了便利。这意味着用户不再被束缚于单一协议的特定客户端，而是可以选择功能丰富、支持 sing-box 的图形化工具，从而更便捷地管理和使用其“科学上网”服务。&lt;/p&gt;
&lt;h2 id=&#34;第五章：增强您的配置-高级技巧&#34;&gt;&lt;a href=&#34;#第五章：增强您的配置-高级技巧&#34; class=&#34;headerlink&#34; title=&#34;第五章：增强您的配置 (高级技巧)&#34;&gt;&lt;/a&gt;第五章：增强您的配置 (高级技巧)&lt;/h2&gt;&lt;p&gt;在掌握了 sing-box 的基本安装和协议配置之后，可以进一步探索一些高级技巧，以增强代理服务的隐蔽性、稳定性和灵活性。&lt;/p&gt;
&lt;h3 id=&#34;5-1-使用-CDN-隐藏服务器-IP-例如-Cloudflare&#34;&gt;&lt;a href=&#34;#5-1-使用-CDN-隐藏服务器-IP-例如-Cloudflare&#34; class=&#34;headerlink&#34; title=&#34;5.1. 使用 CDN 隐藏服务器 IP (例如 Cloudflare)&#34;&gt;&lt;/a&gt;5.1. 使用 CDN 隐藏服务器 IP (例如 Cloudflare)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;核心概念:&lt;/strong&gt; 将代理服务器的流量通过内容分发网络 (CDN) 如 Cloudflare 进行中转，可以有效隐藏真实服务器的 IP 地址。这使得即使代理服务器的 IP 被直接探测或封锁，只要 CDN 节点可用，服务依然能够访问，从而提高了抗封锁能力 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;工作原理:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将您的域名解析指向 Cloudflare 的服务器（在 Cloudflare DNS 设置中开启橙色云朵代理）。&lt;/li&gt;
&lt;li&gt;Sing-box 服务器配置为监听来自 Cloudflare IP 段的流量。&lt;/li&gt;
&lt;li&gt;客户端连接您的域名（实际上是连接到离客户端最近的 Cloudflare 边缘节点）。&lt;/li&gt;
&lt;li&gt;Cloudflare 接收到流量后，再将其转发到您的源代理服务器。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;必要条件:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个您拥有的域名。&lt;/li&gt;
&lt;li&gt;一个 Cloudflare 账户（免费套餐通常已足够）。&lt;/li&gt;
&lt;li&gt;选择能够被 CDN 可靠代理的协议和传输方式。通常是基于 WebSocket (WS) 并通过 TLS 加密（通常在 443 端口）的协议，例如 Trojan + WS 或 VLESS + WS 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sing-box 配置示例 (客户端 Trojan + WS over CDN):&lt;/p&gt;
&lt;p&gt;服务器端需要配置相应的 Trojan + WebSocket 入站。客户端出站配置如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;outbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：这里的 &lt;code&gt;server&lt;/code&gt; 字段直接使用您的域名，因为 Cloudflare 会处理 IP 解析和转发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务器端注意事项:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器上的 sing-box 需配置为监听 WebSocket 流量，并使用与客户端一致的路径。&lt;/li&gt;
&lt;li&gt;在 Cloudflare 的 DNS 设置中，确保对应域名的代理状态（橙色云朵）已开启。&lt;/li&gt;
&lt;li&gt;Cloudflare 的 SSL/TLS 加密模式建议设置为“完全”或“完全（严格）”，以确保从客户端到 Cloudflare 以及从 Cloudflare 到源服务器的全程加密。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;益处:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显著提高抵抗 IP 直接封锁的能力。&lt;/li&gt;
&lt;li&gt;CDN 的全球节点分布可能（但不一定）为部分用户带来访问延迟的改善（对于动态代理流量，CDN 缓存效果有限，但其路由优化仍有一定作用）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将 CDN 置于代理服务器之前，相当于引入了一个广受信赖的中间层 。这种做法通常与 WebSocket 等能封装在标准 HTTP/HTTPS 请求中的传输协议配合使用。直接连接代理服务器 IP 的方式，一旦该 IP 地址被标记并封锁，服务即告中断。而 CDN 服务商（如 Cloudflare）拥有海量的 IP 地址资源，这些 IP 被大量合法网站共享。大规模封锁这些共享 IP 会造成巨大的“附带伤害”，审查机构对此通常较为谨慎。通过 CDN 传输的、使用 WebSocket 并以 TLS 加密的流量（尤其是在 443 端口），其外观与普通网站的 HTTPS 流量极为相似。CDN 在其边缘节点处理 TLS 握手，然后将流量（可能重新加密）转发至源服务器。这种方式不仅隐藏了真实服务器的 IP，还使得代理流量能够混入海量的、通过 CDN 的合法 HTTPS 流量之中，从而显著提升了抗审查的持久性。这对于在严格审查环境下维持代理服务的长期可用性是一项关键技术。&lt;/p&gt;
&lt;h3 id=&#34;5-2-Sing-box-基础路由：智能分流流量&#34;&gt;&lt;a href=&#34;#5-2-Sing-box-基础路由：智能分流流量&#34; class=&#34;headerlink&#34; title=&#34;5.2. Sing-box 基础路由：智能分流流量&#34;&gt;&lt;/a&gt;5.2. Sing-box 基础路由：智能分流流量&lt;/h3&gt;&lt;p&gt;Sing-box 强大的路由功能允许用户根据多种条件精细控制流量走向，实现国内外分流、广告屏蔽、特定服务加速等目的。路由配置在 &lt;code&gt;config.json&lt;/code&gt; 文件的 &lt;code&gt;route&lt;/code&gt; 块中定义 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;常用规则类型:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;域名匹配:&lt;/strong&gt; &lt;code&gt;domain&lt;/code&gt; (精确匹配), &lt;code&gt;domain_suffix&lt;/code&gt; (域名后缀匹配，如 &lt;code&gt;google.com&lt;/code&gt;), &lt;code&gt;domain_keyword&lt;/code&gt; (域名关键词匹配)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IP 匹配:&lt;/strong&gt; &lt;code&gt;ip_cidr&lt;/code&gt; (IP 地址段匹配), &lt;code&gt;geoip&lt;/code&gt; (基于 IP 的地理位置，如 &lt;code&gt;geoip:cn&lt;/code&gt; 匹配中国大陆 IP) 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预设网站列表:&lt;/strong&gt; &lt;code&gt;geosite&lt;/code&gt; (匹配预定义的网站分类，如 &lt;code&gt;geosite:google&lt;/code&gt; 匹配谷歌相关服务) 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议类型:&lt;/strong&gt; &lt;code&gt;protocol&lt;/code&gt; (如 &lt;code&gt;dns&lt;/code&gt; 专门匹配 DNS 查询流量) 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口:&lt;/strong&gt; &lt;code&gt;port&lt;/code&gt; (匹配目标端口)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程名/包名 (客户端):&lt;/strong&gt; &lt;code&gt;process_name&lt;/code&gt; (Windows/Linux 进程名) 或 &lt;code&gt;package_name&lt;/code&gt; (Android 应用包名)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;简单分流示例 (国内直连，国外代理):&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;route&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;rules&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;final&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;proxy&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 所有未匹配上述规则的流量，默认通过名为 &#34;proxy&#34; 的出站 (即您的主代理出站)&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;&#34;auto_detect_interface&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 建议开启，自动检测网络接口&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;规则集 (&lt;code&gt;rule_set&lt;/code&gt;):&lt;/strong&gt; 为了方便管理大量的域名或 IP 列表，可以使用 &lt;code&gt;rule_set&lt;/code&gt; 功能，引用预先编译好的规则文件（通常是 &lt;code&gt;.srs&lt;/code&gt; 或 &lt;code&gt;.db&lt;/code&gt; 格式）。这些规则集可以从远程 URL 下载更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-3-实现故障转移与基础负载均衡-URLTest-和-Selector&#34;&gt;&lt;a href=&#34;#5-3-实现故障转移与基础负载均衡-URLTest-和-Selector&#34; class=&#34;headerlink&#34; title=&#34;5.3. 实现故障转移与基础负载均衡 (URLTest 和 Selector)&#34;&gt;&lt;/a&gt;5.3. 实现故障转移与基础负载均衡 (URLTest 和 Selector)&lt;/h3&gt;&lt;p&gt;为了提高代理连接的稳定性和可用性，sing-box 提供了 &lt;code&gt;URLTest&lt;/code&gt; 和 &lt;code&gt;Selector&lt;/code&gt; 两种特殊的出站类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;URLTest 出站 (自动选择最佳节点):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;用途:&lt;/strong&gt; &lt;code&gt;URLTest&lt;/code&gt; 会定期测试一组预定义的出站代理节点，并自动选择其中延迟最低（或最先成功响应）的节点作为当前使用的出站9。这主要用于实现故障自动切换 (failover) 和基于延迟的简单负载均衡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关键字段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;outbounds&lt;/code&gt;: 一个包含多个代理出站标签（tag）的列表，&lt;code&gt;URLTest&lt;/code&gt; 将对这些出站进行测试。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: 用于测试的 URL，例如 &lt;code&gt;http://www.gstatic.com/generate_204&lt;/code&gt; (谷歌提供的用于测试网络连通性的 URL，返回 HTTP 204 No Content)。如果为空，sing-box 有默认测试地址。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interval&lt;/code&gt;: 测试间隔时间，例如 &lt;code&gt;&#34;5m&#34;&lt;/code&gt; 表示每 5 分钟测试一次。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tolerance&lt;/code&gt;: 延迟容忍度（毫秒），用于判断节点是否可用或切换的阈值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;示例:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-json&#34; data-language=&#34;json&#34;&gt;&lt;code class=&#34;language-json&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;token property&#34;&gt;&#34;outbounds&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 参与测试的代理出站标签列表&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;url&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://www.gstatic.com/generate_204&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;interval&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;5m&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 每5分钟测试一次&lt;/span&gt;
      &lt;span class=&#34;token property&#34;&gt;&#34;tolerance&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 延迟容忍度 100ms&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，在路由规则中（例如 route.final）使用 “auto-proxy-selector”作为出站。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Selector 出站 (手动选择节点):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;用途:&lt;/strong&gt; &lt;code&gt;Selector&lt;/code&gt; 允许用户从一个预定义的出站列表中手动选择一个当前使用的出站。这种选择通常通过外部 API (例如 sing-box 的 Clash API 兼容接口) 进行控制，图形化客户端常利用此功能提供节点切换界面 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关键字段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;outbounds&lt;/code&gt;: 一个包含多个出站标签（可以是具体代理，也可以是 &lt;code&gt;direct&lt;/code&gt; 或其他 &lt;code&gt;URLTest&lt;/code&gt; 组）的列表。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt;: 默认选中的出站标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;示例:&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-JSON&#34; data-language=&#34;JSON&#34;&gt;&lt;code class=&#34;language-JSON&#34;&gt;{
  &#34;outbounds&#34;:, // 可供选择的出站列表
      &#34;default&#34;: &#34;proxy-vless&#34; // 默认选择 &#34;proxy-vless&#34;
    }
  ]
}&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样，可以在路由规则中使用 “manual-proxy-selector”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;URLTest&lt;/code&gt; 和 &lt;code&gt;Selector&lt;/code&gt; 为 sing-box 提供了强大的流量管理能力。&lt;code&gt;URLTest&lt;/code&gt; 通过自动化的健康检查和延迟测试 ，确保了连接的韧性：当某个代理节点失效或表现不佳时，它能自动切换到其他可用节点，从而在无需用户干预的情况下维持“科学上网”的通畅。这对于故障转移至关重要。另一方面，&lt;code&gt;Selector&lt;/code&gt; 则赋予用户明确的控制权 ，允许用户根据特定需求（如访问特定区域的地理限制内容，或临时切换到直连）主动选择出口。Clash API 的支持使得图形化客户端能够方便地集成这种手动选择功能。实际应用中，一种常见的模式是将多个 &lt;code&gt;URLTest&lt;/code&gt; 分组（例如，一组美国服务器，一组日本服务器），然后使用一个 &lt;code&gt;Selector&lt;/code&gt; 在这些分组或单个优质代理之间进行选择。这种组合既满足了自动化故障恢复的需求，也兼顾了用户的主动偏好。&lt;/p&gt;
&lt;h2 id=&#34;第六章：故障排除与日常维护&#34;&gt;&lt;a href=&#34;#第六章：故障排除与日常维护&#34; class=&#34;headerlink&#34; title=&#34;第六章：故障排除与日常维护&#34;&gt;&lt;/a&gt;第六章：故障排除与日常维护&lt;/h2&gt;&lt;p&gt;即使配置无误，有时也可能遇到连接问题。了解如何排查故障和进行日常维护，是确保代理服务长期稳定运行的关键。&lt;/p&gt;
&lt;h3 id=&#34;6-1-“芝麻开门”：通过-Sing-box-日志寻找线索&#34;&gt;&lt;a href=&#34;#6-1-“芝麻开门”：通过-Sing-box-日志寻找线索&#34; class=&#34;headerlink&#34; title=&#34;6.1. “芝麻开门”：通过 Sing-box 日志寻找线索&#34;&gt;&lt;/a&gt;6.1. “芝麻开门”：通过 Sing-box 日志寻找线索&lt;/h3&gt;&lt;p&gt;日志是排查问题的第一手资料。当遇到连接失败、速度缓慢或其他异常行为时，首先应该查看 sing-box 的日志。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;服务器端日志:&lt;/strong&gt; 如果 sing-box 作为系统服务运行 (通过 &lt;code&gt;systemd&lt;/code&gt; 管理)，可以使用以下命令查看实时日志：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sudo journalctl -u sing-box -f --output cat&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果直接通过 sing-box run 命令在前台运行，日志会直接输出到终端，或者根据 config.json 中 log.output 的设置输出到指定文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;客户端日志:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果使用 sing-box 命令行作为客户端，日志同样会输出到终端或配置文件中指定的位置。&lt;/li&gt;
&lt;li&gt;图形化客户端通常内置了日志查看器，方便用户查阅。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;关注日志中的关键信息:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;错误信息 (Error messages):&lt;/strong&gt; 明确指示问题的发生，如连接超时、认证失败、证书错误等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;警告信息 (Warning messages):&lt;/strong&gt; 可能提示潜在问题或配置不当。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接尝试与结果:&lt;/strong&gt; 可以看到客户端的连接请求、使用的协议、目标地址等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由决策:&lt;/strong&gt; 对于复杂的路由配置，日志可以显示流量是如何根据规则被导向特定出站的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;日志级别 (&lt;code&gt;log.level&lt;/code&gt;):&lt;/strong&gt; 在 &lt;code&gt;config.json&lt;/code&gt; 中，可以将 &lt;code&gt;log.level&lt;/code&gt; 设置为 &lt;code&gt;&#34;debug&#34;&lt;/code&gt; 甚至 &lt;code&gt;&#34;trace&#34;&lt;/code&gt; 以获取更详细的诊断信息，但在正常运行时建议使用 &lt;code&gt;&#34;info&#34;&lt;/code&gt; 或 &lt;code&gt;&#34;warn&#34;&lt;/code&gt; 以避免日志过于庞大 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-2-配置检查：使用-sing-box-check-进行预检&#34;&gt;&lt;a href=&#34;#6-2-配置检查：使用-sing-box-check-进行预检&#34; class=&#34;headerlink&#34; title=&#34;6.2. 配置检查：使用 sing-box check 进行预检&#34;&gt;&lt;/a&gt;6.2. 配置检查：使用 &lt;code&gt;sing-box check&lt;/code&gt; 进行预检&lt;/h3&gt;&lt;p&gt;在修改 &lt;code&gt;config.json&lt;/code&gt; 文件后，启动或重启 sing-box 服务之前，务必使用 &lt;code&gt;sing-box check&lt;/code&gt; 命令校验配置文件的有效性：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-Bash&#34; data-language=&#34;Bash&#34;&gt;&lt;code class=&#34;language-Bash&#34;&gt;sing-box check -c /path/to/your/config.json&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该命令会检查 JSON 语法是否正确、字段名和值是否符合 sing-box 的规范。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sing-box check&lt;/code&gt; 命令是配置管理流程中不可或缺的“预飞检查”环节 。JSON 格式对逗号、括号、引号等符号要求严格，而 sing-box 的配置项众多且可能存在嵌套，手动编辑时很容易出现笔误或使用了不正确的字段名。如果直接运行一个有错误的配置文件，可能导致 sing-box 服务启动失败、意外崩溃或行为异常。例如，某些 GitHub issue 中报告的崩溃问题，部分可能源于配置不当（提到的一个与 tun 配置相关的崩溃，如果涉及到需要 root 权限的资源访问，&lt;code&gt;check&lt;/code&gt; 命令在尝试校验时或许能提前发现权限问题或配置冲突）。因此，在每次修改配置文件后、重启服务前，执行 &lt;code&gt;sing-box check&lt;/code&gt;，可以及时发现并修正这些低级错误，从而节省大量的排错时间和避免不必要的服务中断。&lt;/p&gt;
&lt;h3 id=&#34;6-3-常见连接问题及其解决方案&#34;&gt;&lt;a href=&#34;#6-3-常见连接问题及其解决方案&#34; class=&#34;headerlink&#34; title=&#34;6.3. 常见连接问题及其解决方案&#34;&gt;&lt;/a&gt;6.3. 常见连接问题及其解决方案&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;防火墙阻挡端口:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;症状:&lt;/strong&gt; 客户端无法连接到服务器的指定端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排查:&lt;/strong&gt; 仔细检查服务器的防火墙规则 (UFW, firewalld)，确保已为 sing-box 使用的协议和端口正确开放了 TCP 和/或 UDP 流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端配置错误:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;症状:&lt;/strong&gt; 连接失败，日志提示认证错误、地址错误等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排查:&lt;/strong&gt; 逐项核对客户端配置中的服务器地址、端口、用户ID (UUID)、密码、加密方法、传输参数（如 WebSocket 路径）、TLS SNI 等，确保与服务器端的入站配置完全一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS 相关错误 (适用于 VLESS, Trojan, Hysteria2, TUIC 等):&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SNI 不匹配:&lt;/strong&gt; 客户端 &lt;code&gt;tls.server_name&lt;/code&gt; 与服务器证书或 Reality/Trojan 期望的 SNI 不符。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器证书无效/过期:&lt;/strong&gt; 检查服务器证书状态，及时续签或修复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端无法验证服务器证书:&lt;/strong&gt; 如果服务器使用自签名证书，客户端需要导入该证书或（不推荐，但可用于测试）设置 &lt;code&gt;insecure: true&lt;/code&gt;。对于 Reality，确保客户端的 &lt;code&gt;tls.server_name&lt;/code&gt; 与服务器 &lt;code&gt;reality.handshake.server&lt;/code&gt; 一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS 解析问题:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;症状:&lt;/strong&gt; 可以连接代理，但无法访问网站，或特定网站无法打开。&lt;/li&gt;
&lt;li&gt;排查:&lt;ul&gt;
&lt;li&gt;检查客户端和服务器 &lt;code&gt;dns&lt;/code&gt; 配置块。&lt;/li&gt;
&lt;li&gt;确保代理服务器自身能够正常解析外部域名（可在服务器上用 &lt;code&gt;ping&lt;/code&gt; 或 &lt;code&gt;nslookup&lt;/code&gt; 测试）。&lt;/li&gt;
&lt;li&gt;客户端 DNS 是否正确通过代理或指定 DNS 服务器解析，避免 DNS 泄露。&lt;/li&gt;
&lt;li&gt;因 IPv6 偏好设置导致的 DNS 解析问题，提示注意 DNS 策略配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reality 握手失败:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;症状:&lt;/strong&gt; VLESS+Reality 连接失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排查:&lt;/strong&gt; 确认客户端的 &lt;code&gt;public_key&lt;/code&gt;、&lt;code&gt;short_id&lt;/code&gt; 与服务器端的 &lt;code&gt;private_key&lt;/code&gt;、&lt;code&gt;short_id&lt;/code&gt; 对应且正确。确认客户端 &lt;code&gt;tls.server_name&lt;/code&gt; 与服务器端 &lt;code&gt;reality.handshake.server&lt;/code&gt; 配置的域名一致。检查伪装的目标网站 (&lt;code&gt;reality.handshake.server&lt;/code&gt;) 是否可访问且其 TLS 证书有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络不可达 (“network is unreachable”):&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;症状:&lt;/strong&gt; 日志中出现此类错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排查:&lt;/strong&gt; 服务器可能已宕机，服务器 IP 可能被 ISP 封锁，或者存在网络路由问题。检查服务器状态和网络连通性 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间同步问题:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;症状:&lt;/strong&gt; 某些协议（特别是依赖 TLS 和证书的）连接失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排查:&lt;/strong&gt; 确保客户端和服务器的时间基本同步。在服务器上配置并启用 NTP 服务（sing-box 配置中也有 &lt;code&gt;ntp&lt;/code&gt; 模块）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器资源耗尽:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;症状:&lt;/strong&gt; 连接不稳定，速度极慢，服务频繁重启。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排查:&lt;/strong&gt; 登录服务器检查 CPU、内存、带宽使用情况。如果资源不足，考虑升级 VPS 配置或优化 sing-box 配置（如限制并发连接数）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sing-box 进程崩溃 (panic):&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;症状:&lt;/strong&gt; 服务意外停止，日志中出现 &lt;code&gt;panic:&lt;/code&gt; 开头的错误信息和堆栈跟踪。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排查:&lt;/strong&gt; &lt;code&gt;panic&lt;/code&gt; 通常指示程序内部错误（bug）、不兼容的配置、或严重的资源问题 24。仔细阅读 &lt;code&gt;panic&lt;/code&gt; 信息和相关的上下文日志。如果怀疑是 sing-box 的 bug，可以附上详细的日志、可复现的配置和操作步骤，到 sing-box 的 GitHub Issues 页面报告。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-4-保持更新：维护-Sing-box-及配置的有效性&#34;&gt;&lt;a href=&#34;#6-4-保持更新：维护-Sing-box-及配置的有效性&#34; class=&#34;headerlink&#34; title=&#34;6.4. 保持更新：维护 Sing-box 及配置的有效性&#34;&gt;&lt;/a&gt;6.4. 保持更新：维护 Sing-box 及配置的有效性&lt;/h3&gt;&lt;p&gt;网络审查技术和代理协议本身都在不断发展和演变。为了保持代理服务的有效性和安全性，需要进行持续的维护：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定期更新 Sing-box:&lt;/strong&gt; 关注 SagerNet/sing-box 的 GitHub Releases 页面，及时将 sing-box 程序更新到最新的稳定版本。新版本通常包含 bug 修复、性能优化、安全更新以及对新特性或协议的支持。可以通过重新运行安装脚本或使用系统的包管理器进行更新。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关注社区动态:&lt;/strong&gt; 留意 sing-box 的 GitHub Issues 、官方文档更新以及相关的技术社区和论坛。这些渠道通常会讨论最新的审查手段、协议的有效性变化以及新的规避策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新路由规则集:&lt;/strong&gt; 如果在路由配置中使用了 GeoIP、Geosite 等远程规则集，应确保这些规则集能够定期更新，以保证分流的准确性。部分客户端或辅助工具可能提供自动更新规则集的功能 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;&lt;a href=&#34;#结论&#34; class=&#34;headerlink&#34; title=&#34;结论&#34;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;Sing-box 作为一个强大且灵活的通用代理平台，为用户提供了构建自定义“科学上网”节点的坚实基础。通过本教程的指引，用户应能掌握从服务器准备、sing-box 安装、核心协议配置到客户端设置的完整流程。无论是追求极致隐蔽性的 VLESS+Reality、模仿 HTTPS 的 Trojan，还是经典高效的 Shadowsocks，亦或是面向特定网络优化的 Hysteria2 和 TUIC，sing-box 都能提供良好的支持。&lt;/p&gt;
&lt;p&gt;然而，需要强调的是，网络审查与规避技术之间的博弈是一个持续动态的过程。今天有效的协议或配置，明天可能就会面临新的挑战。因此，保持学习的热情，关注技术前沿，并根据实际情况灵活调整策略，是确保长期顺畅访问互联网的关键。&lt;/p&gt;
&lt;p&gt;最后，请负责任地使用本教程提供的知识和工具，遵守当地法律法规，并将其用于促进信息自由交流和个人学习研究等正当目的。&lt;/p&gt;
&lt;h2 id=&#34;附录&#34;&gt;&lt;a href=&#34;#附录&#34; class=&#34;headerlink&#34; title=&#34;附录&#34;&gt;&lt;/a&gt;附录&lt;/h2&gt;&lt;h3 id=&#34;A-1-Sing-box-常用命令行-CLI-命令参考&#34;&gt;&lt;a href=&#34;#A-1-Sing-box-常用命令行-CLI-命令参考&#34; class=&#34;headerlink&#34; title=&#34;A.1. Sing-box 常用命令行 (CLI) 命令参考&#34;&gt;&lt;/a&gt;A.1. Sing-box 常用命令行 (CLI) 命令参考&lt;/h3&gt;&lt;p&gt;尽管 sing-box 的命令行参数和子命令的官方集中文档尚不完善，但通过分析其源码、社区讨论和实际使用，可以总结出以下常用命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;核心操作:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;sing-box run [options]
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;
  : 运行 sing-box 实例。

  - `-c, --config &amp;lt;path&amp;gt;`: 指定一个或多个配置文件路径（JSON 或 SJSON 格式）。可以指定目录，sing-box 会加载目录内所有 `.json` 文件 22。
  - `-D, --directory &amp;lt;path&amp;gt;`: 指定配置文件目录，与 `-c` 配合使用。
  - `--disable-color`: 禁用彩色日志输出。

- ```
  sing-box check [options]&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

: 检查配置文件的有效性。

- `-c, --config &amp;lt;path&amp;gt;`: 同 `run` 命令。
- `-D, --directory &amp;lt;path&amp;gt;`: 同 `run` 命令。
- `--format`: 检查后自动格式化配置文件。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;sing-box format [options]
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;
  : 格式化（美化）配置文件。

  - `-c, --config &amp;lt;path&amp;gt;`: 指定输入配置文件。
  - `-D, --directory &amp;lt;path&amp;gt;`: 指定配置文件目录。
  - `-w, --write`: 将格式化后的内容写回原文件 5。
  - `-o, --output &amp;lt;path&amp;gt;`: 将格式化后的内容输出到指定文件。

- ```
  sing-box version&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

: 显示版本信息，包括构建标签 。



- `-n, --name`: 只显示版本名称。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;密钥生成:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sing-box generate uuid&lt;/code&gt;: 生成一个 UUID 11。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box generate reality-keypair&lt;/code&gt;: 生成 Reality 公私钥对 11。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box generate rand &amp;lt;length&amp;gt;&lt;/code&gt;: 生成指定长度的随机字符串（可用于密码）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;其他 (可能存在或特定构建中包含):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sing-box geoip export &amp;lt;path&amp;gt;&lt;/code&gt;: 导出 GeoIP 数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box geosite export &amp;lt;path&amp;gt;&lt;/code&gt;: 导出 Geosite 数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box rule-set compile&lt;/code&gt;: 编译规则集。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sing-box rule-set merge&lt;/code&gt;: 合并规则集。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;通过 &lt;code&gt;systemd&lt;/code&gt; 进行服务管理 (Linux):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl start sing-box&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl stop sing-box&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl restart sing-box&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl enable sing-box&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl disable sing-box&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl status sing-box&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo journalctl -u sing-box -f --output cat&lt;/code&gt; 11&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前关于 sing-box 命令行工具的详细信息较为分散，可见于 GitHub issue 讨论 24、博客文章 19、官方文档的特定子页面 5 以及 Go 语言的源代码文件 22。尚无一个统一、详尽的“man page”式参考手册。上述列表整合了目前已知的主要命令及其功能，对于习惯使用命令行的用户而言，这是一个实用的快速参考。最准确和完整的参数列表，理论上可以通过 &lt;code&gt;sing-box --help&lt;/code&gt; 或 &lt;code&gt;sing-box &amp;lt;subcommand&amp;gt; --help&lt;/code&gt; 获取，但具体输出内容未在本次研究资料中直接提供。&lt;/p&gt;
&lt;h3 id=&#34;A-2-关键术语解释&#34;&gt;&lt;a href=&#34;#A-2-关键术语解释&#34; class=&#34;headerlink&#34; title=&#34;A.2. 关键术语解释&#34;&gt;&lt;/a&gt;A.2. 关键术语解释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CDN (Content Delivery Network, 内容分发网络):&lt;/strong&gt; 一组分布在不同地理位置的服务器，用于缓存和加速网站内容的传递。在代理场景中，可用于隐藏源服务器 IP。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DPI (Deep Packet Inspection, 深度包检测):&lt;/strong&gt; 一种网络数据包过滤技术，通过检查数据包的内容来识别协议类型、应用或特定数据模式，常用于网络审查。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GFW (Great Firewall, 防火长城):&lt;/strong&gt; 指中国大陆用于互联网审查和内容过滤的一系列技术和行政手段的俗称。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GeoIP:&lt;/strong&gt; 基于 IP 地址确定其地理位置的技术或数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Geosite:&lt;/strong&gt; 预定义的网站域名分类列表，常用于路由规则中对特定类型的网站进行分流。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inbound (入站):&lt;/strong&gt; Sing-box 中处理传入连接的配置模块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outbound (出站):&lt;/strong&gt; Sing-box 中处理传出连接的配置模块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiplexing (多路复用):&lt;/strong&gt; 在单个网络连接（通常是 TCP 连接）上承载多个独立的逻辑数据流的技术，可以提高连接效率和并发性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QUIC (Quick UDP Internet Connections):&lt;/strong&gt; 一种基于 UDP 的新型传输层网络协议，旨在提供比 TCP 更低的延迟和更好的拥塞控制，是 HTTP/3 的基础。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reality:&lt;/strong&gt; 一种 VLESS 协议的扩展，通过模拟真实网站的 TLS 握手来增强代理服务器的隐蔽性，抵抗主动探测。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SNI (Server Name Indication):&lt;/strong&gt; TLS 协议的一个扩展，允许客户端在 TLS 握手初期就告知服务器其希望连接的域名，使得同一 IP 地址可以托管多个 HTTPS 网站。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS (Transport Layer Security, 传输层安全协议):&lt;/strong&gt; 用于在两个通信应用程序之间提供私密性和数据完整性的加密协议，是 HTTPS 的基础。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP (User Datagram Protocol, 用户数据报协议):&lt;/strong&gt; 一种无连接的传输层协议，提供快速但不可靠的数据传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UUID (Universally Unique Identifier, 通用唯一识别码):&lt;/strong&gt; 一个128位的数字，用于在计算机系统中唯一地标识信息。在代理协议中常用作用户ID。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebSocket (WS):&lt;/strong&gt; 一种在单个 TCP 连接上进行全双工通信的协议，常用于 Web 应用。在代理中，可将流量封装在类似 HTTP 的连接中，便于穿透防火墙或通过 CDN。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XTLS-Vision:&lt;/strong&gt; VLESS 协议的一种流控模式，旨在减少加密开销，提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;A-3-进一步学习资源&#34;&gt;&lt;a href=&#34;#A-3-进一步学习资源&#34; class=&#34;headerlink&#34; title=&#34;A.3. 进一步学习资源&#34;&gt;&lt;/a&gt;A.3. 进一步学习资源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sing-box 官方文档:&lt;/strong&gt; &lt;a href=&#34;https://sing-box.sagernet.org/&#34;&gt;https://sing-box.sagernet.org/&lt;/a&gt; 5&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sing-box GitHub 仓库:&lt;/strong&gt;(&lt;a href=&#34;https://github.com/SagerNet/sing-box&#34;&gt;https://github.com/SagerNet/sing-box&lt;/a&gt;) 7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GUI.for.SingBox (图形化客户端):&lt;/strong&gt;(&lt;a href=&#34;https://github.com/GUI-for-Cores/GUI.for.SingBox&#34;&gt;https://github.com/GUI-for-Cores/GUI.for.SingBox&lt;/a&gt;) 56&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nekoray / NekoBox (图形化客户端):&lt;/strong&gt;(&lt;a href=&#34;https://github.com/MatsuriDayo/nekoray&#34;&gt;https://github.com/MatsuriDayo/nekoray&lt;/a&gt;) (原版，新版可搜索 NekoBox)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hiddify-Next (图形化客户端):&lt;/strong&gt; &lt;a href=&#34;https://github.com/hiddify/hiddify-next&#34;&gt;https://github.com/hiddify/hiddify-next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://0xdadream.github.io/2021/04/23/http-xue-xi/</guid>
            <title>HTTP学习</title>
            <link>https://0xdadream.github.io/2021/04/23/http-xue-xi/</link>
            <category>学习</category>
            <pubDate>Fri, 23 Apr 2021 09:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;HTTP&#34;&gt;&lt;a href=&#34;#HTTP&#34; class=&#34;headerlink&#34; title=&#34;HTTP&#34;&gt;&lt;/a&gt;HTTP&lt;/h1&gt;&lt;h2 id=&#34;web协议&#34;&gt;&lt;a href=&#34;#web协议&#34; class=&#34;headerlink&#34; title=&#34;web协议&#34;&gt;&lt;/a&gt;web协议&lt;/h2&gt;&lt;h3 id=&#34;定义&#34;&gt;&lt;a href=&#34;#定义&#34; class=&#34;headerlink&#34; title=&#34;定义&#34;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;Web 使用一种名为 HTTP（HyperText Transfer Protocol，超文本传输协议 ）的协议作为规范，完成从客户端到服务器端等一系列运作流程。&lt;/p&gt;
&lt;p&gt;1997 年  1 月公布的  HTTP/1.1 是目前主流的  HTTP 协议版本。&lt;/p&gt;
&lt;h3 id=&#34;TCP-IP协议簇&#34;&gt;&lt;a href=&#34;#TCP-IP协议簇&#34; class=&#34;headerlink&#34; title=&#34;TCP/IP协议簇&#34;&gt;&lt;/a&gt;TCP/IP协议簇&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/cb757b5e4fbd69d9a7870cf73ec5f2c8.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;TCP-IP分层&#34;&gt;&lt;a href=&#34;#TCP-IP分层&#34; class=&#34;headerlink&#34; title=&#34;TCP/IP分层&#34;&gt;&lt;/a&gt;TCP/IP分层&lt;/h4&gt;&lt;h5 id=&#34;应用层&#34;&gt;&lt;a href=&#34;#应用层&#34; class=&#34;headerlink&#34; title=&#34;应用层&#34;&gt;&lt;/a&gt;应用层&lt;/h5&gt;&lt;p&gt;FTP（FileTransfer Protocol，文件传输协议）和 DNS（Domain Name System，域名系统）&lt;/p&gt;
&lt;p&gt;HTTP&lt;/p&gt;
&lt;h5 id=&#34;传输层&#34;&gt;&lt;a href=&#34;#传输层&#34; class=&#34;headerlink&#34; title=&#34;传输层&#34;&gt;&lt;/a&gt;传输层&lt;/h5&gt;&lt;p&gt;TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）&lt;/p&gt;
&lt;h5 id=&#34;网络层&#34;&gt;&lt;a href=&#34;#网络层&#34; class=&#34;headerlink&#34; title=&#34;网络层&#34;&gt;&lt;/a&gt;网络层&lt;/h5&gt;&lt;p&gt;网络层所起的作用就是在众多的选项内选择一条传输路线&lt;/p&gt;
&lt;h5 id=&#34;物理层&#34;&gt;&lt;a href=&#34;#物理层&#34; class=&#34;headerlink&#34; title=&#34;物理层&#34;&gt;&lt;/a&gt;物理层&lt;/h5&gt;&lt;p&gt;用来处理连接网络的硬件部分&lt;/p&gt;
&lt;h4 id=&#34;TCP-IP-通信传输流&#34;&gt;&lt;a href=&#34;#TCP-IP-通信传输流&#34; class=&#34;headerlink&#34; title=&#34;TCP/IP 通信传输流&#34;&gt;&lt;/a&gt;TCP/IP 通信传输流&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/81ffdf57755cc7acedb59dfef5c70546.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;协议&#34;&gt;&lt;a href=&#34;#协议&#34; class=&#34;headerlink&#34; title=&#34;协议&#34;&gt;&lt;/a&gt;协议&lt;/h3&gt;&lt;p&gt;不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（protocol）。&lt;/p&gt;
&lt;h3 id=&#34;IP协议&#34;&gt;&lt;a href=&#34;#IP协议&#34; class=&#34;headerlink&#34; title=&#34;IP协议&#34;&gt;&lt;/a&gt;IP协议&lt;/h3&gt;&lt;p&gt;IP（Internet Protocol）网际协议位于网络层&lt;/p&gt;
&lt;p&gt;IP 协议的作用是把各种数据包传送给对方。&lt;/p&gt;
&lt;p&gt;P 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC地址基本上不会更改。&lt;/p&gt;
&lt;h3 id=&#34;ARP协议&#34;&gt;&lt;a href=&#34;#ARP协议&#34; class=&#34;headerlink&#34; title=&#34;ARP协议&#34;&gt;&lt;/a&gt;ARP协议&lt;/h3&gt;&lt;p&gt;ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。&lt;/p&gt;
&lt;h4 id=&#34;路由选择&#34;&gt;&lt;a href=&#34;#路由选择&#34; class=&#34;headerlink&#34; title=&#34;路由选择&#34;&gt;&lt;/a&gt;路由选择&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/0c783c5c7eef0356ea5f3a327fb43c70.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;TCP协议&#34;&gt;&lt;a href=&#34;#TCP协议&#34; class=&#34;headerlink&#34; title=&#34;TCP协议&#34;&gt;&lt;/a&gt;TCP协议&lt;/h3&gt;&lt;p&gt;TCP 位于传输层，提供可靠的字节流服务&lt;/p&gt;
&lt;h4 id=&#34;tcp三次握手&#34;&gt;&lt;a href=&#34;#tcp三次握手&#34; class=&#34;headerlink&#34; title=&#34;tcp三次握手&#34;&gt;&lt;/a&gt;tcp三次握手&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/4fd95e6d2b8edcd965ce11295ac0c301.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;DNS&#34;&gt;&lt;a href=&#34;#DNS&#34; class=&#34;headerlink&#34; title=&#34;DNS&#34;&gt;&lt;/a&gt;DNS&lt;/h3&gt;&lt;p&gt;DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的&lt;br&gt;协议。它提供域名到 IP 地址之间的解析服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/9b9ebce7681849f430d21d47495b3400.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;各协议关系&#34;&gt;&lt;a href=&#34;#各协议关系&#34; class=&#34;headerlink&#34; title=&#34;各协议关系&#34;&gt;&lt;/a&gt;各协议关系&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/7e76c47328b109133df3878b6803e24a.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;URI&#34;&gt;&lt;a href=&#34;#URI&#34; class=&#34;headerlink&#34; title=&#34;URI&#34;&gt;&lt;/a&gt;URI&lt;/h3&gt;&lt;p&gt;URI 是 Uniform Resource Identifier 的缩写。&lt;/p&gt;
&lt;p&gt;URI 用字符串标识某一互联网资源，而 URL表示资源的地点（互联网上所处的位置）&lt;/p&gt;
&lt;h4 id=&#34;格式&#34;&gt;&lt;a href=&#34;#格式&#34; class=&#34;headerlink&#34; title=&#34;格式&#34;&gt;&lt;/a&gt;格式&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/48eb2105e992b313cb99eb9cb2a0e897.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;as：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;ftp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;//ftp.is.co.za/rfc/rfc1808.txt&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;//www.ietf.org/rfc/rfc2396.txt&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;ldap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;//[2001:db8::7]/c=GB?objectClass?one&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;mailto&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;John.Doe@example.com&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;news&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;comp.infosystems.www.servers.unix&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;tel&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;+1-816-555-1212&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;telnet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;//192.0.2.16:80/&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;urn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token header-value&#34;&gt;oasis:names:specification:docbook:dtd:xml:4.1.2&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;hr&gt;
&lt;h2 id=&#34;HTTP协议&#34;&gt;&lt;a href=&#34;#HTTP协议&#34; class=&#34;headerlink&#34; title=&#34;HTTP协议&#34;&gt;&lt;/a&gt;HTTP协议&lt;/h2&gt;&lt;h3 id=&#34;S-B客服端与服务器端的交互&#34;&gt;&lt;a href=&#34;#S-B客服端与服务器端的交互&#34; class=&#34;headerlink&#34; title=&#34;S-B客服端与服务器端的交互&#34;&gt;&lt;/a&gt;S-B客服端与服务器端的交互&lt;/h3&gt;&lt;p&gt;在两台计算机之间使用 HTTP 协议通信时，在一条通信线路上必定有一端是客户端，另一端则是服务器端。&lt;/p&gt;
&lt;p&gt;HTTP 是不保存状态的协议&lt;/p&gt;
&lt;h3 id=&#34;请求-响应&#34;&gt;&lt;a href=&#34;#请求-响应&#34; class=&#34;headerlink&#34; title=&#34;请求-响应&#34;&gt;&lt;/a&gt;请求-响应&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/4043823659f06850225215b355d26e70.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/5064a6a828ab020f5558b42c2dfbdf58.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;响应报文&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/7931c23a1e3c807e44a4108e514bb99d.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;URI请求&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/84626c79794c0eb39904acbe02811cb4.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;请求方法&#34;&gt;&lt;a href=&#34;#请求方法&#34; class=&#34;headerlink&#34; title=&#34;请求方法&#34;&gt;&lt;/a&gt;请求方法&lt;/h3&gt;&lt;h4 id=&#34;GET&#34;&gt;&lt;a href=&#34;#GET&#34; class=&#34;headerlink&#34; title=&#34;GET&#34;&gt;&lt;/a&gt;GET&lt;/h4&gt;&lt;p&gt;GET ：获取资源&lt;br&gt;GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器 端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保 持原样返回；如果是像 CGI（Common Gateway Interface，通用网关接 口）那样的程序，则返回经过执行后的输出结果。&lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/index.html&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; 

&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;www.hackr.jp&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;返回  index.html 的页面资源&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&#34;POST&#34;&gt;&lt;a href=&#34;#POST&#34; class=&#34;headerlink&#34; title=&#34;POST&#34;&gt;&lt;/a&gt;POST&lt;/h4&gt;&lt;p&gt;POST：传输实体主体&lt;br&gt;POST 方法用来传输实体的主体。&lt;br&gt;虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行 传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。&lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/submit.cgi&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; 
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;www.hackr.jp &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;1560（1560字节的数据）&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;返回  submit.cgi 接收数据的处理结果 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&#34;PUT&#34;&gt;&lt;a href=&#34;#PUT&#34; class=&#34;headerlink&#34; title=&#34;PUT&#34;&gt;&lt;/a&gt;PUT&lt;/h4&gt;&lt;p&gt;PUT：传输文件&lt;br&gt;PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请 求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。 &lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/example.html&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; 
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;www.hackr.jp &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/html &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;1560（1560 字节的数据&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;响应返回状态码  204 No Content（比如  ：该  html 已存在于服务器上） &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&#34;HEAD&#34;&gt;&lt;a href=&#34;#HEAD&#34; class=&#34;headerlink&#34; title=&#34;HEAD&#34;&gt;&lt;/a&gt;HEAD&lt;/h4&gt;&lt;p&gt;HEAD：获得报文首部&lt;br&gt;HEAD 方法和  GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。&lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;HEAD&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/index.html&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; 

&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;www.hackr.jp &lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;返回index.html有关的响应首部 &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&#34;DELETE&#34;&gt;&lt;a href=&#34;#DELETE&#34; class=&#34;headerlink&#34; title=&#34;DELETE&#34;&gt;&lt;/a&gt;DELETE&lt;/h4&gt;&lt;p&gt;DELETE：删除文件&lt;br&gt;DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按 请求 URI 删除指定的资源。&lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;DELETE&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/example.html&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; 

&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;www.hackr.jp &lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;响应返回状态码  204 No Content（比如  ：该  html 已从该服务器上删除） &lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&#34;OPTIONS&#34;&gt;&lt;a href=&#34;#OPTIONS&#34; class=&#34;headerlink&#34; title=&#34;OPTIONS&#34;&gt;&lt;/a&gt;OPTIONS&lt;/h4&gt;&lt;p&gt;OPTIONS：询问支持的方法&lt;br&gt;OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。 &lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;OPTIONS * HTTP/1.1 

&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;www.hackr.jp &lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;OK &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Allow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;GET, POST, HEAD, OPTIONS （返回服务器支持的方法） &lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;





&lt;h4 id=&#34;TRACK&#34;&gt;&lt;a href=&#34;#TRACK&#34; class=&#34;headerlink&#34; title=&#34;TRACK&#34;&gt;&lt;/a&gt;TRACK&lt;/h4&gt;&lt;p&gt;TRACE：追踪路径&lt;br&gt;TRACE 方法是让  Web 服务器端将之前的请求通信环回给客户端的方 法。&lt;br&gt;发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服 务器端就将该数字减 1，当数值刚好减到 0 时，就停止继续传输，最 后接收到请求的服务器端则返回状态码 200 OK 的响应&lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;TRACE&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; 

&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;hackr.jp &lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Max-Forwards&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;2 &lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;OK &lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;message/http &lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;1024 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;TRACE&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt; 
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;hackr.jp &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Max-Forwards&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;2（返回响应包含请求内容） &lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;h4 id=&#34;CONNECT&#34;&gt;&lt;a href=&#34;#CONNECT&#34; class=&#34;headerlink&#34; title=&#34;CONNECT&#34;&gt;&lt;/a&gt;CONNECT&lt;/h4&gt;&lt;p&gt;CONNECT：要求用隧道协议连接代理&lt;br&gt;CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协 议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接 层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容 加 密后经网络隧道传输。&lt;br&gt;CONNECT 方法的格式如下所示。 &lt;/p&gt;
&lt;p&gt;CONNECT 代理服务器名:端口号    HTTP版本 &lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;CONNECT proxy.hackr.jp:8080 HTTP/1.1 

&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;proxy.hackr.jp &lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;OK（之后进入网络隧道） &lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/bc16fc0bdc1aef2e1d96c95a7305119b.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;持久连接&#34;&gt;&lt;a href=&#34;#持久连接&#34; class=&#34;headerlink&#34; title=&#34;持久连接&#34;&gt;&lt;/a&gt;持久连接&lt;/h3&gt;&lt;p&gt;持久连接旨在建立 1 次 TCP 连接后进行多次请求和响应的交互&lt;/p&gt;
&lt;h4 id=&#34;管线化&#34;&gt;&lt;a href=&#34;#管线化&#34; class=&#34;headerlink&#34; title=&#34;管线化&#34;&gt;&lt;/a&gt;管线化&lt;/h4&gt;&lt;p&gt;不等待响应，直接发送下一个请求&lt;/p&gt;
&lt;h3 id=&#34;cookie&#34;&gt;&lt;a href=&#34;#cookie&#34; class=&#34;headerlink&#34; title=&#34;cookie&#34;&gt;&lt;/a&gt;cookie&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/be4b0058f89df48262095fa3817ef763.png&#34;&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/bafece7685c6f5723d0be0b8d9900781.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;请求：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/image/&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;hackr.jp&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;sid=1342077140226724&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;OK&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Thu, 12 Jul 2012 07:12:20 GMT&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Apache&lt;/span&gt;&lt;/span&gt;
＜Set-Cookie: sid=1342077140226724; path=/; expires=Wed,
10-Oct-12 07:12:20 GMT＞
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/plain; charset=UTF-8&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;





&lt;hr&gt;
&lt;h2 id=&#34;HTTP报文&#34;&gt;&lt;a href=&#34;#HTTP报文&#34; class=&#34;headerlink&#34; title=&#34;HTTP报文&#34;&gt;&lt;/a&gt;HTTP报文&lt;/h2&gt;&lt;h3 id=&#34;结构&#34;&gt;&lt;a href=&#34;#结构&#34; class=&#34;headerlink&#34; title=&#34;结构&#34;&gt;&lt;/a&gt;结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/3cc4a6cf42aa0161d3b83ff598b01724.png&#34;&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/3ad6ac069f66bb198aba64a2803ea8ad.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/42f1143b5ce8261c3255e62dd8e28d32.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;压缩传输&#34;&gt;&lt;a href=&#34;#压缩传输&#34; class=&#34;headerlink&#34; title=&#34;压缩传输&#34;&gt;&lt;/a&gt;压缩传输&lt;/h3&gt;&lt;p&gt;常用的内容编码有以下几种：&lt;br&gt;gzip（GNU zip）&lt;br&gt;compress（UNIX 系统的标准压缩）&lt;br&gt;deflate（zlib）&lt;br&gt;identity（不进行编码）&lt;/p&gt;
&lt;h3 id=&#34;分割发送的分块传输编码&#34;&gt;&lt;a href=&#34;#分割发送的分块传输编码&#34; class=&#34;headerlink&#34; title=&#34;分割发送的分块传输编码&#34;&gt;&lt;/a&gt;分割发送的分块传输编码&lt;/h3&gt;&lt;p&gt;分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六 进制来标记块的大小，而实体主体的最后一块会使用“0(CR+LF)”来标记。&lt;br&gt;使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编 码前的实体主体。&lt;/p&gt;
&lt;h3 id=&#34;发送多种数据的多部分对象集合&#34;&gt;&lt;a href=&#34;#发送多种数据的多部分对象集合&#34; class=&#34;headerlink&#34; title=&#34;发送多种数据的多部分对象集合&#34;&gt;&lt;/a&gt;发送多种数据的多部分对象集合&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;multipart/form-data（文件上传时）&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;multipart/form-data; boundary=AaB03x&lt;/span&gt;&lt;/span&gt;
--AaB03x
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Disposition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;form-data; name=&#34;field1&#34;&lt;/span&gt;&lt;/span&gt;
Joe Blow
--AaB03x
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Disposition&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;form-data; name=&#34;pics&#34;; filename=&#34;file1.txt&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/plain&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token text-plain&#34;&gt;...（file1.txt的数据）...
--AaB03x--&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;multipart/byteranges&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;206&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;Partial Content&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Fri, 13 Jul 2012 02:45:26 GMT&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Last-Modified&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Fri, 31 Aug 2007 02:02:20 GMT&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;multipart/byteranges; boundary=THIS_STRING_SEPARATES&lt;/span&gt;&lt;/span&gt;

--THIS_STRING_SEPARATES
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;application/pdf&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes 500-999/8000&lt;/span&gt;&lt;/span&gt;
...（范围指定的数据）...

--THIS_STRING_SEPARATES
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;application/pdf&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes 7000-7999/8000&lt;/span&gt;&lt;/span&gt;
...（范围指定的数据）...
--THIS_STRING_SEPARATES--&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 boundary 字符串来划分多部分对象集合指明的各类实体。在boundary 字符串指定的各个实体的起始行之前插入“–”标记（例如：–AaB03x、–THIS_STRING_SEPARATES），而在多部分对象集合对应的字符串的最后插入“–”标记（例如：–AaB03x–、–THIS_STRING_SEPARATES–）作为结束。&lt;/p&gt;
&lt;h3 id=&#34;获取部分内容的范围请求（分段请求）&#34;&gt;&lt;a href=&#34;#获取部分内容的范围请求（分段请求）&#34; class=&#34;headerlink&#34; title=&#34;获取部分内容的范围请求（分段请求）&#34;&gt;&lt;/a&gt;获取部分内容的范围请求（分段请求）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/702457428b380409f065b3cb6853fd08.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;从一开始到  3000 字节和  5000~7000 字节，8000到之后全部的多重范围&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes=-3000, 5000-7000 ,8000-&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;内容协商&#34;&gt;&lt;a href=&#34;#内容协商&#34; class=&#34;headerlink&#34; title=&#34;内容协商&#34;&gt;&lt;/a&gt;内容协商&lt;/h3&gt;&lt;p&gt;内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然 后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字 符集、编码方式等作为判断的基准。&lt;/p&gt;
&lt;p&gt;参照头&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;Accept 
Accept-Charset
Accept-Encoding 
Accept-Language 
Content-Language&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容协商技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器驱动协商&lt;/li&gt;
&lt;li&gt;客户端驱动协商&lt;/li&gt;
&lt;li&gt;透明协商&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HTTP返回状态码&#34;&gt;&lt;a href=&#34;#HTTP返回状态码&#34; class=&#34;headerlink&#34; title=&#34;HTTP返回状态码&#34;&gt;&lt;/a&gt;HTTP返回状态码&lt;/h2&gt;&lt;h3 id=&#34;类别&#34;&gt;&lt;a href=&#34;#类别&#34; class=&#34;headerlink&#34; title=&#34;类别&#34;&gt;&lt;/a&gt;类别&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/448efd6d806b88b6d8ae97140bafec53.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2XX&#34;&gt;&lt;a href=&#34;#2XX&#34; class=&#34;headerlink&#34; title=&#34;2XX&#34;&gt;&lt;/a&gt;2XX&lt;/h4&gt;&lt;p&gt;2XX 的响应结果表明请求被正常处理了&lt;/p&gt;
&lt;h5 id=&#34;200OK&#34;&gt;&lt;a href=&#34;#200OK&#34; class=&#34;headerlink&#34; title=&#34;200OK&#34;&gt;&lt;/a&gt;200OK&lt;/h5&gt;&lt;p&gt;表示从客户端发来的请求在服务器端被正常处理了，get请求回返回实体，head请求返回实体首部&lt;/p&gt;
&lt;h5 id=&#34;204-No-Content&#34;&gt;&lt;a href=&#34;#204-No-Content&#34; class=&#34;headerlink&#34; title=&#34;204 No Content&#34;&gt;&lt;/a&gt;204 No Content&lt;/h5&gt;&lt;p&gt;该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。（浏览器不更新页面）&lt;/p&gt;
&lt;h5 id=&#34;206-Partial-Content&#34;&gt;&lt;a href=&#34;#206-Partial-Content&#34; class=&#34;headerlink&#34; title=&#34;206 Partial Content&#34;&gt;&lt;/a&gt;206 Partial Content&lt;/h5&gt;&lt;p&gt;该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。&lt;/p&gt;
&lt;h4 id=&#34;3XX重定向&#34;&gt;&lt;a href=&#34;#3XX重定向&#34; class=&#34;headerlink&#34; title=&#34;3XX重定向&#34;&gt;&lt;/a&gt;3XX重定向&lt;/h4&gt;&lt;p&gt;3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。&lt;/p&gt;
&lt;h5 id=&#34;301-Moved-Permanently&#34;&gt;&lt;a href=&#34;#301-Moved-Permanently&#34; class=&#34;headerlink&#34; title=&#34;301 Moved Permanently&#34;&gt;&lt;/a&gt;301 Moved Permanently&lt;/h5&gt;&lt;p&gt;永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。也就是说，如果已经把资源对应的 URI保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。&lt;/p&gt;
&lt;h5 id=&#34;302-Found&#34;&gt;&lt;a href=&#34;#302-Found&#34; class=&#34;headerlink&#34; title=&#34;302 Found&#34;&gt;&lt;/a&gt;302 Found&lt;/h5&gt;&lt;p&gt;临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。不更新书签，仍保留产生302的url&lt;/p&gt;
&lt;h5 id=&#34;303-See-Other&#34;&gt;&lt;a href=&#34;#303-See-Other&#34; class=&#34;headerlink&#34; title=&#34;303 See Other&#34;&gt;&lt;/a&gt;303 See Other&lt;/h5&gt;&lt;p&gt;该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET方法定向获取请求的资源。例如，post方法请求时，处理结果希望客服端采用get方法获取资源&lt;/p&gt;
&lt;h5 id=&#34;304-Not-Modified&#34;&gt;&lt;a href=&#34;#304-Not-Modified&#34; class=&#34;headerlink&#34; title=&#34;304 Not Modified&#34;&gt;&lt;/a&gt;304 Not Modified&lt;/h5&gt;&lt;p&gt;该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。&lt;/p&gt;
&lt;p&gt;附带条件的请求是指采用 GET方法的请求报文中包含 If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since 中任一首部。&lt;/p&gt;
&lt;h5 id=&#34;307-Temporary-Redirect&#34;&gt;&lt;a href=&#34;#307-Temporary-Redirect&#34; class=&#34;headerlink&#34; title=&#34;307 Temporary Redirect&#34;&gt;&lt;/a&gt;307 Temporary Redirect&lt;/h5&gt;&lt;h4 id=&#34;4XX-客户端错误&#34;&gt;&lt;a href=&#34;#4XX-客户端错误&#34; class=&#34;headerlink&#34; title=&#34;4XX 客户端错误&#34;&gt;&lt;/a&gt;4XX 客户端错误&lt;/h4&gt;&lt;p&gt;4XX 的响应结果表明客户端是发生错误的原因所在。&lt;/p&gt;
&lt;h5 id=&#34;400-Bad-Request&#34;&gt;&lt;a href=&#34;#400-Bad-Request&#34; class=&#34;headerlink&#34; title=&#34;400 Bad Request&#34;&gt;&lt;/a&gt;400 Bad Request&lt;/h5&gt;&lt;p&gt;该状态码表示请求报文中存在语法错误。修改报文再发送。和200异曲同工&lt;/p&gt;
&lt;h5 id=&#34;401-Unauthorized&#34;&gt;&lt;a href=&#34;#401-Unauthorized&#34; class=&#34;headerlink&#34; title=&#34;401 Unauthorized&#34;&gt;&lt;/a&gt;401 Unauthorized&lt;/h5&gt;&lt;p&gt;该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。&lt;/p&gt;
&lt;p&gt;返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询（challenge）用户信息。&lt;/p&gt;
&lt;p&gt;首次返回一个认证框，再返回就是认证失败&lt;/p&gt;
&lt;h5 id=&#34;403-Forbidden&#34;&gt;&lt;a href=&#34;#403-Forbidden&#34; class=&#34;headerlink&#34; title=&#34;403 Forbidden&#34;&gt;&lt;/a&gt;403 Forbidden&lt;/h5&gt;&lt;p&gt;该状态码表明对请求资源的访问被服务器拒绝了。&lt;/p&gt;
&lt;h5 id=&#34;404-Not-Found&#34;&gt;&lt;a href=&#34;#404-Not-Found&#34; class=&#34;headerlink&#34; title=&#34;404 Not Found&#34;&gt;&lt;/a&gt;404 Not Found&lt;/h5&gt;&lt;p&gt;该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。&lt;/p&gt;
&lt;h4 id=&#34;5XX-服务器错误&#34;&gt;&lt;a href=&#34;#5XX-服务器错误&#34; class=&#34;headerlink&#34; title=&#34;5XX 服务器错误&#34;&gt;&lt;/a&gt;5XX 服务器错误&lt;/h4&gt;&lt;p&gt;5XX 的响应结果表明服务器本身发生错误。&lt;/p&gt;
&lt;h5 id=&#34;500-Internal-Server-Error&#34;&gt;&lt;a href=&#34;#500-Internal-Server-Error&#34; class=&#34;headerlink&#34; title=&#34;500 Internal Server Error&#34;&gt;&lt;/a&gt;500 Internal Server Error&lt;/h5&gt;&lt;p&gt;该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web应用存在的 bug 或某些临时的故障。&lt;/p&gt;
&lt;h5 id=&#34;503-Service-Unavailable&#34;&gt;&lt;a href=&#34;#503-Service-Unavailable&#34; class=&#34;headerlink&#34; title=&#34;503 Service Unavailable&#34;&gt;&lt;/a&gt;503 Service Unavailable&lt;/h5&gt;&lt;p&gt;该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。&lt;/p&gt;
&lt;h3 id=&#34;samll-tips&#34;&gt;&lt;a href=&#34;#samll-tips&#34; class=&#34;headerlink&#34; title=&#34;samll_tips&#34;&gt;&lt;/a&gt;samll_tips&lt;/h3&gt;&lt;p&gt;不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。&lt;/p&gt;
&lt;h2 id=&#34;与-HTTP-协作的-Web-服务器&#34;&gt;&lt;a href=&#34;#与-HTTP-协作的-Web-服务器&#34; class=&#34;headerlink&#34; title=&#34;与 HTTP 协作的 Web 服务器&#34;&gt;&lt;/a&gt;与 HTTP 协作的 Web 服务器&lt;/h2&gt;&lt;h3 id=&#34;用单台虚拟主机实现多个域名&#34;&gt;&lt;a href=&#34;#用单台虚拟主机实现多个域名&#34; class=&#34;headerlink&#34; title=&#34;用单台虚拟主机实现多个域名&#34;&gt;&lt;/a&gt;用单台虚拟主机实现多个域名&lt;/h3&gt;&lt;p&gt;一台服务器托管了两个域名，&lt;a href=&#34;http://www.hacker.com,www.hacker2.com,两个域名托管在一个虚拟机,则dns解析后ip相同,两个域名会访问一个ip.在相同的/&#34;&gt;www.hacker.com,www.hacker2.com，两个域名托管在一个虚拟机，则DNS解析后IP相同，两个域名会访问一个IP。在相同的&lt;/a&gt; IP 地址下，由于虚拟主机可以寄存多个不同主机名和域名的 Web 网站，因此在发送 HTTP 请求时，必须在 Host 首部内完整指定主机名或域名的 URI。&lt;/p&gt;
&lt;h3 id=&#34;通信数据转发程序-：代理、网关、隧道&#34;&gt;&lt;a href=&#34;#通信数据转发程序-：代理、网关、隧道&#34; class=&#34;headerlink&#34; title=&#34;通信数据转发程序 ：代理、网关、隧道&#34;&gt;&lt;/a&gt;通信数据转发程序 ：代理、网关、隧道&lt;/h3&gt;&lt;h4 id=&#34;代理&#34;&gt;&lt;a href=&#34;#代理&#34; class=&#34;headerlink&#34; title=&#34;代理&#34;&gt;&lt;/a&gt;代理&lt;/h4&gt;&lt;p&gt;代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。&lt;/p&gt;
&lt;p&gt;代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变请求 URI，会直接发送给前方持有资源的目标服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/5cb86cda8dff1fbdc1eb32bde62d73c6.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息&lt;/p&gt;
&lt;h5 id=&#34;代理方法&#34;&gt;&lt;a href=&#34;#代理方法&#34; class=&#34;headerlink&#34; title=&#34;代理方法&#34;&gt;&lt;/a&gt;代理方法&lt;/h5&gt;&lt;p&gt;1.缓存代理&lt;/p&gt;
&lt;p&gt;代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。再次收到相同的资源请求就会返回代理上缓存的资源。&lt;/p&gt;
&lt;p&gt;2.透明代理&lt;/p&gt;
&lt;p&gt;转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。&lt;/p&gt;
&lt;h4 id=&#34;网关&#34;&gt;&lt;a href=&#34;#网关&#34; class=&#34;headerlink&#34; title=&#34;网关&#34;&gt;&lt;/a&gt;网关&lt;/h4&gt;&lt;p&gt;网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。&lt;/p&gt;
&lt;p&gt;网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供非 HTTP 协议服务。&lt;br&gt;利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信线路上加密以确保连接的安全。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/1d46d1ae5f16e09805d3e87e506383c5.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;隧道&#34;&gt;&lt;a href=&#34;#隧道&#34; class=&#34;headerlink&#34; title=&#34;隧道&#34;&gt;&lt;/a&gt;隧道&lt;/h4&gt;&lt;p&gt;隧道是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。&lt;/p&gt;
&lt;p&gt;隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。&lt;br&gt;隧道本身不会去解析 HTTP 请求。也就是说，请求保持原样中转给之后的服务器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/1abf8e9495373ad8e481c44cd93d8968.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;保存资源的缓存&#34;&gt;&lt;a href=&#34;#保存资源的缓存&#34; class=&#34;headerlink&#34; title=&#34;保存资源的缓存&#34;&gt;&lt;/a&gt;保存资源的缓存&lt;/h3&gt;&lt;p&gt;缓存服务器的优势在于利用缓存可避免多次从源服务器转发资源。因此客户端可就近从缓存服务器上获取资源，而源服务器也不必多次处理相同的请求了。&lt;/p&gt;
&lt;h4 id=&#34;缓存的有效期限&#34;&gt;&lt;a href=&#34;#缓存的有效期限&#34; class=&#34;headerlink&#34; title=&#34;缓存的有效期限&#34;&gt;&lt;/a&gt;缓存的有效期限&lt;/h4&gt;&lt;p&gt;即使存在缓存，也会因为客户端的要求、缓存的有效期等因素，向源服务器确认资源的有效性。若判断缓存失效，缓存服务器将会再次从源服务器上获取“新”资源。&lt;/p&gt;
&lt;h4 id=&#34;客户端的缓存&#34;&gt;&lt;a href=&#34;#客户端的缓存&#34; class=&#34;headerlink&#34; title=&#34;客户端的缓存&#34;&gt;&lt;/a&gt;客户端的缓存&lt;/h4&gt;&lt;p&gt;缓存不仅可以存在于缓存服务器内，还可以存在客户端浏览器中。以Internet Explorer 程序为例，把客户端缓存称为临时网络文件（Temporary Internet File）。&lt;br&gt;浏览器缓存如果有效，就不必再向服务器请求相同的资源了，可以直接从本地磁盘内读取。&lt;/p&gt;
&lt;h3 id=&#34;HTTP-出现之前的协议&#34;&gt;&lt;a href=&#34;#HTTP-出现之前的协议&#34; class=&#34;headerlink&#34; title=&#34;HTTP 出现之前的协议&#34;&gt;&lt;/a&gt;HTTP 出现之前的协议&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;FTP（File Transfer Protocol）&lt;br&gt;传输文件时使用的协议。&lt;/li&gt;
&lt;li&gt;NNTP（Network News Transfer Protocol）&lt;br&gt;用于 NetNews 电子会议室内传送消息的协议。。&lt;/li&gt;
&lt;li&gt;Archie&lt;br&gt;搜索 anonymous FTP 公开的文件信息的协议。&lt;/li&gt;
&lt;li&gt;WAIS（Wide Area Information Servers）&lt;br&gt;以关键词检索多个数据库使用的协议。&lt;/li&gt;
&lt;li&gt;Gopher&lt;br&gt;查找与互联网连接的计算机内信息的协议。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;HTTP-首部&#34;&gt;&lt;a href=&#34;#HTTP-首部&#34; class=&#34;headerlink&#34; title=&#34;HTTP 首部&#34;&gt;&lt;/a&gt;HTTP 首部&lt;/h2&gt;&lt;h3 id=&#34;HTTP-报文首部&#34;&gt;&lt;a href=&#34;#HTTP-报文首部&#34; class=&#34;headerlink&#34; title=&#34;HTTP 报文首部&#34;&gt;&lt;/a&gt;HTTP 报文首部&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/cdd775e3a5788d5f6b3083052c3eb339.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;HTTP 协议的请求和响应报文中必定包含 HTTP 首部。首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。&lt;/p&gt;
&lt;h4 id=&#34;HTTP-请求报文&#34;&gt;&lt;a href=&#34;#HTTP-请求报文&#34; class=&#34;headerlink&#34; title=&#34;HTTP 请求报文&#34;&gt;&lt;/a&gt;HTTP 请求报文&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/34f0690cdfd988547a148806ba15ffb5.png&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token request-line&#34;&gt;&lt;span class=&#34;token method property&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;token request-target url&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;hackr.jp&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;User-Agent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/html,application/xhtml+xml,application/xml;q=0.9,&lt;/span&gt;&lt;/span&gt;
*/*; q=0.8
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept-Language&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;ja,en-us;q=0.7,en;q=0.3&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept-Encoding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;gzip, deflate&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;DNT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;keep-alive&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;If-Modified-Since&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Fri, 31 Aug 2007 02:02:20 GMT&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;If-None-Match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;&#34;45bae1-16a-46d776ac&#34;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Cache-Control&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;max-age=0&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;HTTP-响应报文&#34;&gt;&lt;a href=&#34;#HTTP-响应报文&#34; class=&#34;headerlink&#34; title=&#34;HTTP 响应报文&#34;&gt;&lt;/a&gt;HTTP 响应报文&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/d9a94837fa995200e34533dd7640b88c.png&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;304&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;Not Modified&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Thu, 07 Jun 2012 07:21:36 GMT&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Apache&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;close&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Etag&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;&#34;45bae1-16a-46d776ac&#34;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;HTTP-首部字段&#34;&gt;&lt;a href=&#34;#HTTP-首部字段&#34; class=&#34;headerlink&#34; title=&#34;HTTP 首部字段&#34;&gt;&lt;/a&gt;HTTP 首部字段&lt;/h3&gt;&lt;h4 id=&#34;HTTP-首部字段传递重要信息&#34;&gt;&lt;a href=&#34;#HTTP-首部字段传递重要信息&#34; class=&#34;headerlink&#34; title=&#34;HTTP 首部字段传递重要信息&#34;&gt;&lt;/a&gt;HTTP 首部字段传递重要信息&lt;/h4&gt;&lt;h4 id=&#34;HTTP-首部字段结构&#34;&gt;&lt;a href=&#34;#HTTP-首部字段结构&#34; class=&#34;headerlink&#34; title=&#34;HTTP 首部字段结构&#34;&gt;&lt;/a&gt;HTTP 首部字段结构&lt;/h4&gt;&lt;p&gt;HTTP 首部字段是由首部字段名和字段值构成的&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;首部字段名: 字段值
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/html&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Keep-Alive&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;timeout=15, max=100&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若 &lt;strong&gt;HTTP&lt;/strong&gt; 首部字段重复了会如何&lt;/p&gt;
&lt;p&gt; 不同浏览器解析方式不同，有的是解析前面，有的则是解析后面的&lt;/p&gt;
&lt;h4 id=&#34;4-种-HTTP-首部字段类型&#34;&gt;&lt;a href=&#34;#4-种-HTTP-首部字段类型&#34; class=&#34;headerlink&#34; title=&#34;4 种 HTTP 首部字段类型&#34;&gt;&lt;/a&gt;&lt;strong&gt;4&lt;/strong&gt; 种 &lt;strong&gt;HTTP&lt;/strong&gt; 首部字段类型&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;通用首部字段（&lt;strong&gt;General&lt;/strong&gt; &lt;strong&gt;Header Fields&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;请求报文和响应报文两方都会使用的首部。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;请求首部字段（&lt;strong&gt;Request Header Fields&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;响应首部字段（&lt;strong&gt;Response Header Fields&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;实体首部字段（&lt;strong&gt;Entity Header Fields&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息&lt;/p&gt;
&lt;h4 id=&#34;HTTP-1-1-首部字段一览&#34;&gt;&lt;a href=&#34;#HTTP-1-1-首部字段一览&#34; class=&#34;headerlink&#34; title=&#34;HTTP/1.1 首部字段一览&#34;&gt;&lt;/a&gt;HTTP/1.1 首部字段一览&lt;/h4&gt;&lt;p&gt;RFC2616 中定义的 47 种首部字段&lt;/p&gt;
&lt;h5 id=&#34;通用首部字段&#34;&gt;&lt;a href=&#34;#通用首部字段&#34; class=&#34;headerlink&#34; title=&#34;通用首部字段&#34;&gt;&lt;/a&gt;通用首部字段&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Cache-Control&lt;/td&gt;
&lt;td&gt;控制缓存的行为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Connection&lt;/td&gt;
&lt;td&gt;逐跳首部、连接的管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Date&lt;/td&gt;
&lt;td&gt;创建报文的日期时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Pragma&lt;/td&gt;
&lt;td&gt;报文指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Trailer&lt;/td&gt;
&lt;td&gt;报文末端的首部一览&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Transfer-Encoding&lt;/td&gt;
&lt;td&gt;指定报文主体的传输编码方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Upgrade&lt;/td&gt;
&lt;td&gt;升级为其他协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Via&lt;/td&gt;
&lt;td&gt;代理服务器的相关信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt;
&lt;td&gt;错误通知&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h5 id=&#34;请求首部字段&#34;&gt;&lt;a href=&#34;#请求首部字段&#34; class=&#34;headerlink&#34; title=&#34;请求首部字段&#34;&gt;&lt;/a&gt;请求首部字段&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Accept&lt;/td&gt;
&lt;td&gt;用户代理可处理的媒体类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Charset&lt;/td&gt;
&lt;td&gt;优先的字符集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Encoding&lt;/td&gt;
&lt;td&gt;优先的内容编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accept-Language&lt;/td&gt;
&lt;td&gt;优先的语言（自然语言）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Authorization&lt;/td&gt;
&lt;td&gt;Web认证信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Expect&lt;/td&gt;
&lt;td&gt;期待服务器的特定行为&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;From&lt;/td&gt;
&lt;td&gt;用户的电子邮箱地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;请求资源所在服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Match&lt;/td&gt;
&lt;td&gt;比较实体标记（ETag）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Modified-Since&lt;/td&gt;
&lt;td&gt;比较资源的更新时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-None-Match&lt;/td&gt;
&lt;td&gt;比较实体标记（与 If-Match 相反）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Range&lt;/td&gt;
&lt;td&gt;资源未更新时发送实体 Byte 的范围请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If-Unmodified-Since&lt;/td&gt;
&lt;td&gt;比较资源的更新时间（与If-Modified-Since相反）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max-Forwards&lt;/td&gt;
&lt;td&gt;最大传输逐跳数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxy-Authorization&lt;/td&gt;
&lt;td&gt;代理服务器要求客户端的认证信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Range&lt;/td&gt;
&lt;td&gt;实体的字节范围请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Referer&lt;/td&gt;
&lt;td&gt;对请求中 URI 的原始获取方&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TE&lt;/td&gt;
&lt;td&gt;传输编码的优先级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User-Agent&lt;/td&gt;
&lt;td&gt;HTTP  客户端程序的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h5 id=&#34;响应首部字段&#34;&gt;&lt;a href=&#34;#响应首部字段&#34; class=&#34;headerlink&#34; title=&#34;响应首部字段&#34;&gt;&lt;/a&gt;响应首部字段&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Accept-Ranges&lt;/td&gt;
&lt;td&gt;是否接受字节范围请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Age&lt;/td&gt;
&lt;td&gt;推算资源创建经过时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETag&lt;/td&gt;
&lt;td&gt;资源的匹配信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;令客户端重定向至指定URI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Proxy-Authenticate&lt;/td&gt;
&lt;td&gt;代理服务器对客户端的认证信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Retry-After&lt;/td&gt;
&lt;td&gt;对再次发起请求的时机要求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;HTTP服务器的安装信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vary&lt;/td&gt;
&lt;td&gt;代理服务器缓存的管理信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WWW-Authenticate&lt;/td&gt;
&lt;td&gt;服务器对客户端的认证信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h5 id=&#34;实体首部字段&#34;&gt;&lt;a href=&#34;#实体首部字段&#34; class=&#34;headerlink&#34; title=&#34;实体首部字段&#34;&gt;&lt;/a&gt;实体首部字段&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Allow&lt;/td&gt;
&lt;td&gt;资源可支持的HTTP方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Encoding&lt;/td&gt;
&lt;td&gt;实体主体适用的编码方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Language&lt;/td&gt;
&lt;td&gt;实体主体的自然语言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Length&lt;/td&gt;
&lt;td&gt;实体主体的大小（单位：字节）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Location&lt;/td&gt;
&lt;td&gt;替代对应资源的URI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-MD5&lt;/td&gt;
&lt;td&gt;实体主体的报文摘要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Range&lt;/td&gt;
&lt;td&gt;实体主体的位置范围&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content-Type&lt;/td&gt;
&lt;td&gt;实体主体的媒体类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Expires&lt;/td&gt;
&lt;td&gt;实体主体过期的日期时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Last-Modified&lt;/td&gt;
&lt;td&gt;资源的最后修改日期时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;非-HTTP-1-1-首部字段&#34;&gt;&lt;a href=&#34;#非-HTTP-1-1-首部字段&#34; class=&#34;headerlink&#34; title=&#34;非 HTTP/1.1 首部字段&#34;&gt;&lt;/a&gt;非 &lt;strong&gt;HTTP/1.1&lt;/strong&gt; 首部字段&lt;/h4&gt;&lt;p&gt;RFC4229&lt;/p&gt;
&lt;p&gt;Cookie、Set-Cookie 和 Content-Disposition 等&lt;/p&gt;
&lt;h4 id=&#34;End-to-end-首部和-Hop-by-hop-首部&#34;&gt;&lt;a href=&#34;#End-to-end-首部和-Hop-by-hop-首部&#34; class=&#34;headerlink&#34; title=&#34;End-to-end 首部和 Hop-by-hop 首部&#34;&gt;&lt;/a&gt;&lt;strong&gt;End-to-end&lt;/strong&gt; 首部和 &lt;strong&gt;Hop-by-hop&lt;/strong&gt; 首部&lt;/h4&gt;&lt;h5 id=&#34;端到端首部（End-to-end-Header）&#34;&gt;&lt;a href=&#34;#端到端首部（End-to-end-Header）&#34; class=&#34;headerlink&#34; title=&#34;端到端首部（End-to-end Header）&#34;&gt;&lt;/a&gt;端到端首部（&lt;strong&gt;End-to-end Header&lt;/strong&gt;）&lt;/h5&gt;&lt;p&gt;分在此类别中的首部会转发给请求 / 响应对应的最终接收目标，且必须保存在由缓存生成的响应中，另外规定它必须被转发。&lt;/p&gt;
&lt;h5 id=&#34;逐跳首部（Hop-by-hop-Header）&#34;&gt;&lt;a href=&#34;#逐跳首部（Hop-by-hop-Header）&#34; class=&#34;headerlink&#34; title=&#34;逐跳首部（Hop-by-hop Header）&#34;&gt;&lt;/a&gt;逐跳首部（&lt;strong&gt;Hop-by-hop Header&lt;/strong&gt;）&lt;/h5&gt;&lt;p&gt;分在此类别中的首部只对单次转发有效，会因通过缓存或代理而不再转发。HTTP/1.1 和之后版本中，如果要使用 hop-by-hop 首部，需提供 Connection 首部字段。&lt;/p&gt;
&lt;p&gt;除了一下8种其他全是端到端首部&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Connection&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Keep-Alive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Proxy-Authenticate&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Proxy-Authorization&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Trailer&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Transfer-Encoding&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Upgrade&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;HTTP-1-1-通用首部字段&#34;&gt;&lt;a href=&#34;#HTTP-1-1-通用首部字段&#34; class=&#34;headerlink&#34; title=&#34;HTTP/1.1 通用首部字段&#34;&gt;&lt;/a&gt;&lt;strong&gt;HTTP/1.1&lt;/strong&gt; 通用首部字段&lt;/h3&gt;&lt;p&gt;通用首部字段是指，请求报文和响应报文双方都会使用的首部。&lt;/p&gt;
&lt;h4 id=&#34;Cache-Control&#34;&gt;&lt;a href=&#34;#Cache-Control&#34; class=&#34;headerlink&#34; title=&#34;Cache-Control&#34;&gt;&lt;/a&gt;&lt;strong&gt;Cache-Control&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;首部字段 &lt;strong&gt;Cache-Control&lt;/strong&gt; 能够控制缓存的行为&lt;/p&gt;
&lt;p&gt;写法&lt;code&gt;Cache-Control: private, max-age=0, no-cache&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;缓存请求指令&#34;&gt;&lt;a href=&#34;#缓存请求指令&#34; class=&#34;headerlink&#34; title=&#34;缓存请求指令&#34;&gt;&lt;/a&gt;缓存请求指令&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;no-cache&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;强制向源服务器再次验证&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;no-store&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;不缓存请求或响应的任何内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max-age  = [ 秒]&lt;/td&gt;
&lt;td&gt;必需&lt;/td&gt;
&lt;td&gt;响应的最大Age值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max-stale( = [ 秒])&lt;/td&gt;
&lt;td&gt;可省略&lt;/td&gt;
&lt;td&gt;接收已过期的响应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min-fresh  = [ 秒]&lt;/td&gt;
&lt;td&gt;必需&lt;/td&gt;
&lt;td&gt;期望在指定时间内的响应仍有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;no-transform&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;代理不可更改媒体类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;only-if-cached&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;从缓存获取资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cache-extension&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;新指令标记（token）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h5 id=&#34;缓存响应指令&#34;&gt;&lt;a href=&#34;#缓存响应指令&#34; class=&#34;headerlink&#34; title=&#34;缓存响应指令&#34;&gt;&lt;/a&gt;缓存响应指令&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;可向任意方提供响应的缓存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;可省略&lt;/td&gt;
&lt;td&gt;仅向特定用户返回响应&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;no-cache&lt;/td&gt;
&lt;td&gt;可省略&lt;/td&gt;
&lt;td&gt;缓存前必须先确认其有效性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;no-store&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;不缓存请求或响应的任何内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;no-transform&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;代理不可更改媒体类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;must-revalidate&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;可缓存但必须再向源服务器进行确认&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;proxy-revalidate&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;要求中间缓存服务器对缓存的响应有效性再进行确认&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max-age = [ 秒]&lt;/td&gt;
&lt;td&gt;必需&lt;/td&gt;
&lt;td&gt;响应的最大Age值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s-maxage  = [ 秒]&lt;/td&gt;
&lt;td&gt;必需&lt;/td&gt;
&lt;td&gt;公共缓存服务器响应的最大Age值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cache-extension&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;新指令标记（token）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h5 id=&#34;表示是否能缓存的指令&#34;&gt;&lt;a href=&#34;#表示是否能缓存的指令&#34; class=&#34;headerlink&#34; title=&#34;表示是否能缓存的指令&#34;&gt;&lt;/a&gt;表示是否能缓存的指令&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: public&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当指定使用 public 指令时，则明确表明其他用户也可利用缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当指定 private 指令后，响应只以特定的用户作为对象，这与 public指令的行为相反。&lt;/p&gt;
&lt;p&gt;缓存服务器会对该特定用户提供资源缓存的服务，对于其他用户发送过来的请求，代理服务器则不会返回缓存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 no-cache 指令的目的是为了防止从缓存中返回过期的资源。 &lt;/p&gt;
&lt;p&gt;客户端发送的请求中如果包含 no-cache 指令，则表示客户端将不会接收缓存过的响应。于是，“中间”的缓存服务器必须把客户端请求转发给源服务器。中间缓存服务器不缓存，相当于隧道不对报文做文章。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-cache=Location&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由服务器返回的响应中，若报文首部字段 Cache-Control 中对 no-cache 字段名具体指定参数值，那么客户端在接收到这个被指定参数值的首部字段对应的响应报文后，就不能使用缓存。换言之，无参数值的首部字段可以使用缓存。只能在响应指令中指定该参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;控制可执行缓存的对象的指令&#34;&gt;&lt;a href=&#34;#控制可执行缓存的对象的指令&#34; class=&#34;headerlink&#34; title=&#34;控制可执行缓存的对象的指令&#34;&gt;&lt;/a&gt;控制可执行缓存的对象的指令&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-store&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当使用 no-store 指令时，暗示请求（和对应的响应）或响应中包含机密信息。&lt;/p&gt;
&lt;p&gt;该指令规定缓存不能在本地存储请求或响应的任一部分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;指定缓存期限和认证的指令&#34;&gt;&lt;a href=&#34;#指定缓存期限和认证的指令&#34; class=&#34;headerlink&#34; title=&#34;指定缓存期限和认证的指令&#34;&gt;&lt;/a&gt;指定缓存期限和认证的指令&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: s-maxage=604800（单位 ：秒）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;s-maxage 指令的功能和 max-age 指令的相同，它们的不同点是 s- maxage 指令只适用于供多位用户使用的公共缓存服务器 。也就是说，对于向同一用户重复返回响应的服务器来说，这个指令没有任何作用。&lt;/p&gt;
&lt;p&gt;当使用 s-maxage 指令后，则直接忽略对 Expires 首部字段及max-age 指令的处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: max-age=604800（单位：秒）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当客户端发送的请求中包含 max-age 指令时，如果判定缓存资源的缓存时间数值比指定时间的数值更小，那么客户端就接收缓存的资源。另外，当指定 max-age 值为 0，那么缓存服务器通常需要将请求转发给源服务器。&lt;/p&gt;
&lt;p&gt;当服务器返回的响应中包含 max-age 指令时，缓存服务器将不对资源的有效性再作确认，而 max-age 数值代表资源保存为缓存的最长时间。&lt;/p&gt;
&lt;p&gt;应用 HTTP/1.1 版本的缓存服务器遇到同时存在 Expires 首部字段的情况时，会优先处理 max-age 指令，而忽略掉 Expires 首部字段。而HTTP/1.0 版本的缓存服务器的情况却相反，max-age 指令会被忽略掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: min-fresh=60（单位：秒）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;min-fresh 指令要求缓存服务器返回至少还未过指定时间的缓存资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: max-stale=3600（单位：秒）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 max-stale 可指示缓存资源，即使过期也照常接收。&lt;/p&gt;
&lt;p&gt;如果指令未指定参数值，那么无论经过多久，客户端都会接收响应； 如果指令中指定了具体数值，那么即使过期，只要仍处于 max-stale 指定的时间内，仍旧会被客户端接收。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: only-if-cached&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 only-if-cached 指令表示客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回。换言之，该指令要求缓存服务器不重新加载响应，也不会再次确认资源有效性。若发生请求缓存服务器的本地缓存无响应，则返回状态码 504 Gateway Timeout。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: must-revalidate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 must-revalidate 指令，代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效。&lt;/p&gt;
&lt;p&gt;若代理无法连通源服务器再次获取有效资源的话，缓存必须给客户端一条 504（Gateway Timeout）状态码。&lt;/p&gt;
&lt;p&gt;另外，使用 must-revalidate 指令会忽略请求的 max-stale 指令（即使已经在首部使用了 max-stale，也不会再有效果）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: proxy-revalidate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;proxy-revalidate 指令要求所有的缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Cache-Control: no-transform&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 no-transform 指令规定无论是在请求还是响应中，缓存都不能改变实体主体的媒体类型。&lt;/p&gt;
&lt;p&gt;这样做可防止缓存或代理压缩图片等类似操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;Cache-Control-扩展&#34;&gt;&lt;a href=&#34;#Cache-Control-扩展&#34; class=&#34;headerlink&#34; title=&#34;Cache-Control 扩展&#34;&gt;&lt;/a&gt;Cache-Control 扩展&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Cache-Control: private, community=&#34;UCI&#34;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过 cache-extension 标记（token），可以扩展 Cache-Control 首部字段内的指令。&lt;/p&gt;
&lt;p&gt;如上例，Cache-Control 首部字段本身没有 community 这个指令。借助extension tokens 实现了该指令的添加。如果缓存服务器不能理解community 这个新指令，就会直接忽略。因此，extension tokens 仅对能理解它的缓存服务器来说是有意义的。&lt;/p&gt;
&lt;h4 id=&#34;Connection&#34;&gt;&lt;a href=&#34;#Connection&#34; class=&#34;headerlink&#34; title=&#34;Connection&#34;&gt;&lt;/a&gt;Connection&lt;/h4&gt;&lt;h5 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;控制不再转发给代理的首部字段&lt;code&gt;Connection: 不再转发的首部字段名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/f6aa486e881b027e5f4c0eae92b1bf92.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;管理持久连接&lt;/p&gt;
&lt;p&gt;HTTP/1.1 之前的 HTTP 版本的默认连接都是非持久连接。为此，如果想在旧版本的 HTTP 协议上维持持续连接，则需要指定Connection 首部字段的值为 Keep-Alive。&lt;code&gt;Connection: Keep-Alive&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/fa4c471298769a15944259a15361652e.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;HTTP/1.1 版本的默认连接都是持久连接。为此，客户端会在持久连接上连续发送请求。当服务器端想明确断开连接时，则指定Connection 首部字段的值为 Close。&lt;code&gt;Connection: close&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Date&#34;&gt;&lt;a href=&#34;#Date&#34; class=&#34;headerlink&#34; title=&#34;Date&#34;&gt;&lt;/a&gt;Date&lt;/h4&gt;&lt;p&gt;首部字段 Date 表明创建 HTTP 报文的日期和时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTTP/1.1 协议使用在 RFC1123 中规定的日期时间的格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Date: Tue, 03 Jul 2012 04:40:59 GMT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;之前的 HTTP 协议版本中使用在 RFC850 中定义的格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Date: Tue, 03-Jul-12 04:40:59 GMT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C 标准库内的 asctime() 函数的输出格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Date: Tue Jul 03 04:40:59 2012&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Pragma&#34;&gt;&lt;a href=&#34;#Pragma&#34; class=&#34;headerlink&#34; title=&#34;Pragma&#34;&gt;&lt;/a&gt;Pragma&lt;/h4&gt;&lt;p&gt;Pragma 是 HTTP/1.1 之前版本的历史遗留字段，仅作为与 HTTP/1.0的向后兼容而定义。相当于HTTP/1.1之后Cache-Control&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pragma: no-cache&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Cache-Control&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;no-cache &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Pragma&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;no-cache&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通常一起用，因为你不能掌握全部中间服务器&lt;/p&gt;
&lt;h4 id=&#34;Trailer&#34;&gt;&lt;a href=&#34;#Trailer&#34; class=&#34;headerlink&#34; title=&#34;Trailer&#34;&gt;&lt;/a&gt;Trailer&lt;/h4&gt;&lt;p&gt;首部字段 Trailer 会事先说明在报文主体后记录了哪些首部字段。该首部字段可应用在 HTTP/1.1 版本分块传输编码时。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;OK&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Tue, 03 Jul 2012 04:40:56 GMT&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/html&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token text-html&#34;&gt;...
Transfer-Encoding: chunked
Trailer: Expires

...(报文主体)... 0
Expires: Tue, 28 Sep 2004 23:59:59 GMT&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上用例中，指定首部字段 Trailer 的值为 Expires，在报文主体之后（分块长度 0 之后）出现了首部字段 Expires。&lt;/p&gt;
&lt;h4 id=&#34;Transfer-Encoding&#34;&gt;&lt;a href=&#34;#Transfer-Encoding&#34; class=&#34;headerlink&#34; title=&#34;Transfer-Encoding&#34;&gt;&lt;/a&gt;Transfer-Encoding&lt;/h4&gt;&lt;p&gt;首部字段 Transfer-Encoding 规定了传输报文主体时采用的编码方式。&lt;/p&gt;
&lt;p&gt;HTTP/1.1 的传输编码方式仅对分块传输编码有效。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;OK&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Tue, 03 Jul 2012 04:40:56 GMT&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Cache-Control&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;public, max-age=604800 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/javascript; charset=utf-8 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Expires&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Tue, 10 Jul 2012 04:40:56 GMT&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;X-Frame-Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;DENY&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;X-XSS-Protection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;1; mode=block &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Encoding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;gzip &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Transfer-Encoding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;chunked &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;keep-alive&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;Upgrade&#34;&gt;&lt;a href=&#34;#Upgrade&#34; class=&#34;headerlink&#34; title=&#34;Upgrade&#34;&gt;&lt;/a&gt;Upgrade&lt;/h4&gt;&lt;p&gt;首部字段 Upgrade 用于检测 HTTP 协议及其他协议是否可使用更高的版本进行通信，其参数值可以用来指定一个完全不同的通信协议。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/c345255e4e1f7c71755193f3e9157b21.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图用例中，首部字段 Upgrade 指定的值为 TLS/1.0。请注意此处两个字段首部字段的对应关系，Connection 的值被指定为 Upgrade。Upgrade 首部字段产生作用的 Upgrade 对象仅限于客户端和邻接服务器之间。因此，使用首部字段 Upgrade 时，还需要额外指定Connection:Upgrade。&lt;/p&gt;
&lt;p&gt;对于附有首部字段 Upgrade 的请求，服务器可用 101 Switching Protocols 状态码作为响应返回。&lt;/p&gt;
&lt;h4 id=&#34;Via&#34;&gt;&lt;a href=&#34;#Via&#34; class=&#34;headerlink&#34; title=&#34;Via&#34;&gt;&lt;/a&gt;Via&lt;/h4&gt;&lt;p&gt;使用首部字段 Via 是为了追踪客户端与服务器之间的请求和响应报文的传输路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/eb53ad7d905d8029eca3b989b9348508.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;首部字段 Via 不仅用于追踪报文的转发，还可避免请求回环的发生。所以必须在经过代理时附加该首部字段内容。&lt;/p&gt;
&lt;p&gt;1.0是指代理服务器的HTTP版本&lt;/p&gt;
&lt;h4 id=&#34;Warning&#34;&gt;&lt;a href=&#34;#Warning&#34; class=&#34;headerlink&#34; title=&#34;Warning&#34;&gt;&lt;/a&gt;Warning&lt;/h4&gt;&lt;p&gt;HTTP/1.1 的 Warning 首部是从 HTTP/1.0 的响应首部（Retry-After）演变过来的。该首部通常会告知用户一些与缓存相关的问题的警告。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Warning&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;[警告码][警告的主机:端口号]“[警告内容]”([日期时间])&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Warning&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;113 gw.hackr.jp:8080 &#34;Heuristic expiration&#34; Tue, 03&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;HTTP-1-1-警告码&#34;&gt;&lt;a href=&#34;#HTTP-1-1-警告码&#34; class=&#34;headerlink&#34; title=&#34;HTTP/1.1 警告码&#34;&gt;&lt;/a&gt;&lt;strong&gt;HTTP/1.1&lt;/strong&gt; 警告码&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;警告码&lt;/th&gt;
&lt;th&gt;警告内容&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;Response  is stale（响应已过期）&lt;/td&gt;
&lt;td&gt;代理返回已过期的资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;111&lt;/td&gt;
&lt;td&gt;Revalidation  failed（再验证失败）&lt;/td&gt;
&lt;td&gt;代理再验证资源有效性时失败（服务器无法到达等原因）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;112&lt;/td&gt;
&lt;td&gt;Disconnection operation（断开连接操作）&lt;/td&gt;
&lt;td&gt;代理与互联网连接被故意切断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;113&lt;/td&gt;
&lt;td&gt;Heuristic  expiration（试探性过期）&lt;/td&gt;
&lt;td&gt;响应的使用期超过24小时（有效缓存的设定时间大于24小时的情况下）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;199&lt;/td&gt;
&lt;td&gt;Miscellaneous  warning（杂项警告）&lt;/td&gt;
&lt;td&gt;任意的警告内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;214&lt;/td&gt;
&lt;td&gt;Transformation  applied（使用了转换）&lt;/td&gt;
&lt;td&gt;代理对内容编码或媒体类型等执行了某些处理时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;299&lt;/td&gt;
&lt;td&gt;Miscellaneous persistent  warning（持久杂项警告）&lt;/td&gt;
&lt;td&gt;任意的警告内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;请求首部字段-1&#34;&gt;&lt;a href=&#34;#请求首部字段-1&#34; class=&#34;headerlink&#34; title=&#34;请求首部字段&#34;&gt;&lt;/a&gt;请求首部字段&lt;/h3&gt;&lt;p&gt;请求首部字段是从客户端往服务器端发送请求报文中所使用的字段， 用于补充请求的附加信息、客户端信息、对响应内容相关的优先级等内容。&lt;/p&gt;
&lt;h4 id=&#34;Accept&#34;&gt;&lt;a href=&#34;#Accept&#34; class=&#34;headerlink&#34; title=&#34;Accept&#34;&gt;&lt;/a&gt;Accept&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/28a3ddf597307b46dbfd4f5fcaa59bc6.png&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/html,application/xhtml+xml,application/xml;q=0.1&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文本文件&lt;/p&gt;
&lt;p&gt;text/html, text/plain, text/css … &lt;/p&gt;
&lt;p&gt;application/xhtml+xml, application/xml …&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片文件&lt;/p&gt;
&lt;p&gt;image/jpeg, image/gif, image/png …&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;视频文件&lt;/p&gt;
&lt;p&gt;video/mpeg, video/quicktime …&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用程序使用的二进制文件&lt;/p&gt;
&lt;p&gt;application/octet-stream, application/zip …&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，如果浏览器不支持 PNG 图片的显示，那 Accept 就不指定image/png，而指定可处理的 image/gif 和 image/jpeg 等图片类型。&lt;/p&gt;
&lt;p&gt;若想要给显示的媒体类型增加优先级，则使用 q= 来额外表示权重值1，用分（;）进行分隔。权重值 q 的范围是 0~1（可精确到小数点后 3 位），且 1 为最大值。不指定权重 q 值时，默认权重为 q=1.0。&lt;/p&gt;
&lt;h4 id=&#34;Accept-Charset&#34;&gt;&lt;a href=&#34;#Accept-Charset&#34; class=&#34;headerlink&#34; title=&#34;Accept-Charset&#34;&gt;&lt;/a&gt;Accept-Charset&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/c4e11a52cebd529f557a2167802d9ffc.png&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept-Charset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;iso-8859-5, unicode-1-1;q=0.8&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;Accept-Encoding&#34;&gt;&lt;a href=&#34;#Accept-Encoding&#34; class=&#34;headerlink&#34; title=&#34;Accept-Encoding&#34;&gt;&lt;/a&gt;Accept-Encoding&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept-Encoding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;gzip, deflate&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Accept-Encoding 首部字段用来告知服务器用户代理支持的内容编码及内容编码的优先级顺序。可一次性指定多种内容编码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gzip&lt;/li&gt;
&lt;li&gt;compress&lt;/li&gt;
&lt;li&gt;deflate&lt;/li&gt;
&lt;li&gt;identity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也能使用权重q，使用&lt;code&gt;*&lt;/code&gt;作为通配符&lt;/p&gt;
&lt;h4 id=&#34;Accept-Language&#34;&gt;&lt;a href=&#34;#Accept-Language&#34; class=&#34;headerlink&#34; title=&#34;Accept-Language&#34;&gt;&lt;/a&gt;Accept-Language&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept-Language&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;zh-cn,zh;q=0.7,en-us,en;q=0.3&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Accept-Language 用来告知服务器用户代理能够处理的自然语言集（指中文或英文等），以及自然语言集的相对优先级。可一次指定多种自然语言集。&lt;/p&gt;
&lt;h4 id=&#34;Authorization&#34;&gt;&lt;a href=&#34;#Authorization&#34; class=&#34;headerlink&#34; title=&#34;Authorization&#34;&gt;&lt;/a&gt;Authorization&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/b03ee40399dfa19fd529932d4b425bf2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;首部字段 Authorization 是用来告知服务器，用户代理的认证信息（证书值）。通常，想要通过服务器认证的用户代理会在接收到返回的401 状态码响应后，把首部字段 Authorization 加入请求中。共用缓存在接收到含有 Authorization 首部字段的请求时的操作处理会略有差异。&lt;/p&gt;
&lt;h4 id=&#34;Expect&#34;&gt;&lt;a href=&#34;#Expect&#34; class=&#34;headerlink&#34; title=&#34;Expect&#34;&gt;&lt;/a&gt;Expect&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/505b2dc20140f2229009f7b1d50c6003.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;客户端使用首部字段 Expect 来告知服务器，期望出现的某种特定行为。因服务器无法理解客户端的期望作出回应而发生错误时，会返回状态码 417 Expectation Failed。&lt;/p&gt;
&lt;p&gt;客户端可以利用该首部字段，写明所期望的扩展。&lt;/p&gt;
&lt;h4 id=&#34;From&#34;&gt;&lt;a href=&#34;#From&#34; class=&#34;headerlink&#34; title=&#34;From&#34;&gt;&lt;/a&gt;From&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/7eab6c8381ea2f0dfc218ee7b8bd0917.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;首部字段 From 用来告知服务器使用用户代理的用户的电子邮件地址。通常，其使用目的就是为了显示搜索引擎等用户代理的负责人的电子邮件联系方式。使用代理时，应尽可能包含 From 首部字段（但可能会因代理不同，将电子邮件地址记录在 User-Agent 首部字段内）。&lt;/p&gt;
&lt;h4 id=&#34;Host&#34;&gt;&lt;a href=&#34;#Host&#34; class=&#34;headerlink&#34; title=&#34;Host&#34;&gt;&lt;/a&gt;Host&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;www.hackr.jp&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Host 会告知服务器，请求的资源所处的互联网主机名和端口号。Host 首部字段在 HTTP/1.1 规范内是唯一一个必须被包含在请求内的首部字段。&lt;/p&gt;
&lt;p&gt;虚拟主机运行在同一个 &lt;strong&gt;IP&lt;/strong&gt; 上，因此使用首部字段 &lt;strong&gt;Host&lt;/strong&gt; 加以区分&lt;/p&gt;
&lt;p&gt;若服务器未设定主机名，那直接发送一个空值即可。&lt;/p&gt;
&lt;h4 id=&#34;If-XXX&#34;&gt;&lt;a href=&#34;#If-XXX&#34; class=&#34;headerlink&#34; title=&#34;If-XXX&#34;&gt;&lt;/a&gt;If-XXX&lt;/h4&gt;&lt;p&gt;形如 If-xxx 这种样式的请求首部字段，都可称为条件请求。服务器接收到附带条件的请求后，只有判断指定条件为真时，才会执行请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/882524fadb21c8271d082b988d4bc4fe.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;If-Match&#34;&gt;&lt;a href=&#34;#If-Match&#34; class=&#34;headerlink&#34; title=&#34;If-Match&#34;&gt;&lt;/a&gt;If-Match&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;If-Match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;&#34;123456&#34;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 If-Match，属附带条件之一，它会告知服务器匹配资源所用的实体标记（ETag）值。&lt;/p&gt;
&lt;p&gt;服务器会比对 If-Match 的字段值和资源的 ETag 值，仅当两者一致时，才会执行请求。反之，则返回状态码 412 Precondition Failed 的响应。&lt;/p&gt;
&lt;p&gt;通配符&lt;code&gt;*&lt;/code&gt;跳过匹配&lt;/p&gt;
&lt;h4 id=&#34;If-Modified-Since&#34;&gt;&lt;a href=&#34;#If-Modified-Since&#34; class=&#34;headerlink&#34; title=&#34;If-Modified-Since&#34;&gt;&lt;/a&gt;If-Modified-Since&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;If-Modified-Since&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Thu, 15 Apr 2004 00:00:00 GMT&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 If-Modified-Since，属附带条件之一，它会告知服务器若 If- Modified-Since 字段值早于资源的更新时间，则希望能处理该请求。而在指定 If-Modified-Since 字段值的日期时间之后，如果请求的资源都没有过更新，则返回状态码 304 Not Modified 的响应。&lt;/p&gt;
&lt;p&gt;If-Modified-Since 用于确认代理或客户端拥有的本地资源的有效性。获取资源的更新日期时间，可通过确认首部字段 Last-Modified 来确定。&lt;/p&gt;
&lt;h4 id=&#34;If-None-Match&#34;&gt;&lt;a href=&#34;#If-None-Match&#34; class=&#34;headerlink&#34; title=&#34;If-None-Match&#34;&gt;&lt;/a&gt;If-None-Match&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/7443e192d3075d7a42155c0632ce4c06.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;它和首部字段 If-Match 作用相反。&lt;/p&gt;
&lt;p&gt;在 GET 或 HEAD 方法中使用首部字段 If-None-Match 可获取最新的资源。因此，这与使用首部字段 If-Modified-Since 时有些类似。&lt;/p&gt;
&lt;h4 id=&#34;If-Range&#34;&gt;&lt;a href=&#34;#If-Range&#34; class=&#34;headerlink&#34; title=&#34;If-Range&#34;&gt;&lt;/a&gt;If-Range&lt;/h4&gt;&lt;p&gt;首部字段 If-Range 属于附带条件之一。它告知服务器若指定的 If- Range 字段值（ETag 值或者时间）和请求资源的 ETag 值或时间相一致时，则作为范围请求处理。反之，则返回全体资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/9e0a6505cd35db6f7beb949d933106cc.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/d82cef8fcce80a19ce1cbcbc522d76b8.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;If-Unmodified-Since&#34;&gt;&lt;a href=&#34;#If-Unmodified-Since&#34; class=&#34;headerlink&#34; title=&#34;If-Unmodified-Since&#34;&gt;&lt;/a&gt;If-Unmodified-Since&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;If-Unmodified-Since&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Thu, 03 Jul 2012 00:00:00 GMT&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 If-Unmodified-Since 和首部字段 If-Modified-Since 的作用相反。它的作用的是告知服务器，指定的请求资源只有在字段值内指定的日期时间之后，未发生更新的情况下，才能处理请求。如果在指定日期时间后发生了更新，则以状态码 412 Precondition Failed 作为响应返回。&lt;/p&gt;
&lt;h4 id=&#34;Max-Forwards&#34;&gt;&lt;a href=&#34;#Max-Forwards&#34; class=&#34;headerlink&#34; title=&#34;Max-Forwards&#34;&gt;&lt;/a&gt;Max-Forwards&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/58c2400eb309d5ef98d5a565925de4b3.png&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Max-Forwards&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每次转发数值减 &lt;strong&gt;1&lt;/strong&gt;。当数值变 &lt;strong&gt;0&lt;/strong&gt; 时返回响应&lt;/p&gt;
&lt;p&gt;通过 TRACE 方法或 OPTIONS 方法，发送包含首部字段 Max- Forwards 的请求时，该字段以十进制整数形式指定可经过的服务器最大数目。&lt;/p&gt;
&lt;h4 id=&#34;Proxy-Authorization&#34;&gt;&lt;a href=&#34;#Proxy-Authorization&#34; class=&#34;headerlink&#34; title=&#34;Proxy-Authorization&#34;&gt;&lt;/a&gt;Proxy-Authorization&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Proxy-Authorization&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Basic dGlwOjkpNLAGfFY5&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接收到从代理服务器发来的认证质询时，客户端会发送包含首部字段Proxy-Authorization 的请求，以告知服务器认证所需要的信息。&lt;/p&gt;
&lt;h4 id=&#34;Range&#34;&gt;&lt;a href=&#34;#Range&#34; class=&#34;headerlink&#34; title=&#34;Range&#34;&gt;&lt;/a&gt;Range&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes=5001-10000&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于只需获取部分资源的范围请求，包含首部字段 Range 即可告知服务器资源的指定范围。上面的示例表示请求获取从第 5001 字节至第10000 字节的资源。&lt;/p&gt;
&lt;p&gt;接收到附带 Range 首部字段请求的服务器，会在处理请求之后返回状态码为 206 Partial Content 的响应。无法处理该范围请求时，则会返回状态码 200 OK 的响应及全部资源。&lt;/p&gt;
&lt;h4 id=&#34;Referer&#34;&gt;&lt;a href=&#34;#Referer&#34; class=&#34;headerlink&#34; title=&#34;Referer&#34;&gt;&lt;/a&gt;Referer&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Referer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;http://www.hackr.jp/index.htm&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Referer 会告知服务器请求的原始资源的 URI。&lt;/p&gt;
&lt;h4 id=&#34;TE&#34;&gt;&lt;a href=&#34;#TE&#34; class=&#34;headerlink&#34; title=&#34;TE&#34;&gt;&lt;/a&gt;TE&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;TE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;gzip, deflate;q=0.5&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 TE 会告知服务器客户端能够处理响应的传输编码方式及相对优先级。它和首部字段 Accept-Encoding 的功能很相像，但是用于传输编码。&lt;/p&gt;
&lt;p&gt;首部字段 TE 除指定传输编码之外，还可以指定伴随 trailer 字段的分块传输编码的方式。应用后者时，只需把 trailers 赋值给该字段值。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;TE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;trailers&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;User-Agent&#34;&gt;&lt;a href=&#34;#User-Agent&#34; class=&#34;headerlink&#34; title=&#34;User-Agent&#34;&gt;&lt;/a&gt;User-Agent&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;User-Agent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gec&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 User-Agent 会将创建请求的浏览器和用户代理名称等信息传达给服务器。&lt;/p&gt;
&lt;h3 id=&#34;响应首部字段-1&#34;&gt;&lt;a href=&#34;#响应首部字段-1&#34; class=&#34;headerlink&#34; title=&#34;响应首部字段&#34;&gt;&lt;/a&gt;响应首部字段&lt;/h3&gt;&lt;p&gt;响应首部字段是由服务器端向客户端返回响应报文中所使用的字段， 用于补充响应的附加信息、服务器信息，以及对客户端的附加要求等信息。&lt;/p&gt;
&lt;h4 id=&#34;Accept-Ranges&#34;&gt;&lt;a href=&#34;#Accept-Ranges&#34; class=&#34;headerlink&#34; title=&#34;Accept-Ranges&#34;&gt;&lt;/a&gt;Accept-Ranges&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Accept-Ranges&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Accept-Ranges 是用来告知客户端服务器是否能处理范围请求，以指定获取服务器端某个部分的资源。&lt;/p&gt;
&lt;p&gt;可指定的字段值有两种，可处理范围请求时指定其为 bytes，反之则指定其为 none。&lt;/p&gt;
&lt;h4 id=&#34;Age&#34;&gt;&lt;a href=&#34;#Age&#34; class=&#34;headerlink&#34; title=&#34;Age&#34;&gt;&lt;/a&gt;Age&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Age&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;600&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Age 能告知客户端，源服务器在多久前创建了响应。字段值的单位为秒。&lt;/p&gt;
&lt;p&gt;若创建该响应的服务器是缓存服务器，Age 值是指缓存后的响应再次发起认证到认证完成的时间值。代理创建响应时必须加上首部字段Age。&lt;/p&gt;
&lt;h4 id=&#34;ETag&#34;&gt;&lt;a href=&#34;#ETag&#34; class=&#34;headerlink&#34; title=&#34;ETag&#34;&gt;&lt;/a&gt;ETag&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;ETag&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;&#34;82e22293907ce725faf67773957acd12&#34;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/0e9a820ce5a8a8b4b440975ba2efbed4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;仅仅是由服务器来分配。&lt;/p&gt;
&lt;h5 id=&#34;强-ETag-值&#34;&gt;&lt;a href=&#34;#强-ETag-值&#34; class=&#34;headerlink&#34; title=&#34;强 ETag 值&#34;&gt;&lt;/a&gt;强 &lt;strong&gt;ETag&lt;/strong&gt; 值&lt;/h5&gt;&lt;p&gt;强 ETag 值，不论实体发生多么细微的变化都会改变其值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ETag: &#34;usagi-1234&#34;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;弱-ETag-值&#34;&gt;&lt;a href=&#34;#弱-ETag-值&#34; class=&#34;headerlink&#34; title=&#34;弱 ETag 值&#34;&gt;&lt;/a&gt;弱 &lt;strong&gt;ETag&lt;/strong&gt; 值&lt;/h5&gt;&lt;p&gt;弱 ETag 值只用于提示资源是否相同。只有资源发生了根本改变，产生差异时才会改变 ETag 值。这时，会在字段值最开始处附加 W/。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ETag: W/&#34;usagi-1234&#34;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;Location&#34;&gt;&lt;a href=&#34;#Location&#34; class=&#34;headerlink&#34; title=&#34;Location&#34;&gt;&lt;/a&gt;Location&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/d427319a2e408e1a28ec464f7a19eb32.png&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Location&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;http://www.usagidesign.jp/sample.html&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用首部字段 Location 可以将响应接收方引导至某个与请求 URI 位置不同的资源。&lt;/p&gt;
&lt;p&gt;基本上，该字段会配合 3xx ：Redirection 的响应，提供重定向的URI。&lt;/p&gt;
&lt;h4 id=&#34;Proxy-Authenticate&#34;&gt;&lt;a href=&#34;#Proxy-Authenticate&#34; class=&#34;headerlink&#34; title=&#34;Proxy-Authenticate&#34;&gt;&lt;/a&gt;Proxy-Authenticate&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Proxy-Authenticate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Basic realm=&#34;Usagidesign Auth&#34;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Proxy-Authenticate 会把由代理服务器所要求的认证信息发送给客户端。&lt;/p&gt;
&lt;h4 id=&#34;Retry-After&#34;&gt;&lt;a href=&#34;#Retry-After&#34; class=&#34;headerlink&#34; title=&#34;Retry-After&#34;&gt;&lt;/a&gt;Retry-After&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Retry-After&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;120&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Retry-After 告知客户端应该在多久之后再次发送请求。主要配合状态码 503 Service Unavailable 响应，或 3xx Redirect 响应一起使用。&lt;/p&gt;
&lt;p&gt;字段值可以指定为具体的日期时间（Wed, 04 Jul 2012 06：34：24 GMT 等格式），也可以是创建响应后的秒数。&lt;/p&gt;
&lt;h4 id=&#34;Server&#34;&gt;&lt;a href=&#34;#Server&#34; class=&#34;headerlink&#34; title=&#34;Server&#34;&gt;&lt;/a&gt;Server&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Apache/2.2.6 (Unix) PHP/5.2.5&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Server 告知客户端当前服务器上安装的 HTTP 服务器应用程序的信息。不单单会标出服务器上的软件应用名称，还有可能包括版本号和安装时启用的可选项。&lt;/p&gt;
&lt;h4 id=&#34;Vary&#34;&gt;&lt;a href=&#34;#Vary&#34; class=&#34;headerlink&#34; title=&#34;Vary&#34;&gt;&lt;/a&gt;Vary&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Vary&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Accept-Language&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从代理服务器接收到源服务器返回包含 Vary 指定项的响应之后，若再要进行缓存，仅对请求中含有相同 Vary 指定首部字段的请求返回缓存。即使对相同资源发起请求，但由于 Vary 指定的首部字段不相同，因此必须要从源服务器重新获取资源。&lt;/p&gt;
&lt;h4 id=&#34;WWW-Authenticate&#34;&gt;&lt;a href=&#34;#WWW-Authenticate&#34; class=&#34;headerlink&#34; title=&#34;WWW-Authenticate&#34;&gt;&lt;/a&gt;WWW-Authenticate&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;WWW-Authenticate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Basic realm=&#34;Usagidesign Auth&#34;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 WWW-Authenticate 用于 HTTP 访问认证。它会告知客户端适用于访问请求 URI 所指定资源的认证方案（Basic 或是 Digest）和带参数提示的质询（challenge）。状态码 401 Unauthorized 响应中， 肯定带有首部字段 WWW-Authenticate。&lt;/p&gt;
&lt;h3 id=&#34;实体首部字段-1&#34;&gt;&lt;a href=&#34;#实体首部字段-1&#34; class=&#34;headerlink&#34; title=&#34;实体首部字段&#34;&gt;&lt;/a&gt;实体首部字段&lt;/h3&gt;&lt;p&gt;实体首部字段是包含在请求报文和响应报文中的实体部分所使用的首部，用于补充内容的更新时间等与实体相关的信息。&lt;/p&gt;
&lt;h4 id=&#34;Alow&#34;&gt;&lt;a href=&#34;#Alow&#34; class=&#34;headerlink&#34; title=&#34;Alow&#34;&gt;&lt;/a&gt;Alow&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Allow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;GET, HEAD&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Allow 用于通知客户端能够支持 Request-URI 指定资源的所有 HTTP 方法。当服务器接收到不支持的 HTTP 方法时，会以状态码405 Method Not Allowed 作为响应返回。与此同时，还会把所有能支持的 HTTP 方法写入首部字段 Allow 后返回。&lt;/p&gt;
&lt;h4 id=&#34;Content-Encoding&#34;&gt;&lt;a href=&#34;#Content-Encoding&#34; class=&#34;headerlink&#34; title=&#34;Content-Encoding&#34;&gt;&lt;/a&gt;Content-Encoding&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Encoding&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;gzip&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Content-Encoding 会告知客户端服务器对实体的主体部分选用的内容编码方式。内容编码是指在不丢失实体信息的前提下所进行的压缩。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gzip&lt;/li&gt;
&lt;li&gt;compress&lt;/li&gt;
&lt;li&gt;deflate&lt;/li&gt;
&lt;li&gt;identity&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Content-Languag&#34;&gt;&lt;a href=&#34;#Content-Languag&#34; class=&#34;headerlink&#34; title=&#34;Content-Languag&#34;&gt;&lt;/a&gt;Content-Languag&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Language&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;zh-CN&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Content-Language 会告知客户端，实体主体使用的自然语言（指中文或英文等语言）。&lt;/p&gt;
&lt;h4 id=&#34;Content-Length&#34;&gt;&lt;a href=&#34;#Content-Length&#34; class=&#34;headerlink&#34; title=&#34;Content-Length&#34;&gt;&lt;/a&gt;Content-Length&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;15000&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Content-Length 表明了实体主体的大小（单位是字节）。对实体主体进行内容编码传输时，不能再使用 Content-Length 首部字段。&lt;/p&gt;
&lt;h4 id=&#34;Content-Location&#34;&gt;&lt;a href=&#34;#Content-Location&#34; class=&#34;headerlink&#34; title=&#34;Content-Location&#34;&gt;&lt;/a&gt;Content-Location&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Location&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;http://www.hackr.jp/index-ja.html&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Content-Location 给出与报文主体部分相对应的 URI。和首部字段Location 不同，Content-Location 表示的是报文主体返回资源对应的 URI。&lt;/p&gt;
&lt;p&gt;比如，对于使用首部字段 Accept-Language 的服务器驱动型请求，当返回的页面内容与实际请求的对象不同时，首部字段 Content-Location 内会写明 URI。&lt;/p&gt;
&lt;h4 id=&#34;Content-MD5&#34;&gt;&lt;a href=&#34;#Content-MD5&#34; class=&#34;headerlink&#34; title=&#34;Content-MD5&#34;&gt;&lt;/a&gt;Content-MD5&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-MD5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;OGFkZDUwNGVhNGY3N2MxMDIwZmQ4NTBmY2IyTY==&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/cae670c7d7ca3bf6ff620ed7cf4fafe2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;首部字段 Content-MD5 是一串由 MD5 算法生成的值，其目的在于检查报文主体在传输过程中是否保持完整，以及确认传输到达。&lt;/p&gt;
&lt;p&gt;对报文主体执行 MD5 算法获得的 128 位二进制数，再通过 Base64 编码后将结果写入 Content-MD5 字段值。由于 HTTP 首部无法记录二进制值，所以要通过 Base64 编码处理。为确保报文的有效性，作为接收方的客户端会对报文主体再执行一次相同的 MD5 算法。计算出的值与字段值作比较后，即可判断出报文主体的准确性。&lt;/p&gt;
&lt;h4 id=&#34;Content-Range&#34;&gt;&lt;a href=&#34;#Content-Range&#34; class=&#34;headerlink&#34; title=&#34;Content-Range&#34;&gt;&lt;/a&gt;Content-Range&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;bytes 5001-10000/10000&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;针对范围请求，返回响应时使用的首部字段 Content-Range，能告知客户端作为响应返回的实体的哪个部分符合范围请求。字段值以字节为单位，表示当前发送部分及整个实体大小。&lt;/p&gt;
&lt;h4 id=&#34;Content-Type&#34;&gt;&lt;a href=&#34;#Content-Type&#34; class=&#34;headerlink&#34; title=&#34;Content-Type&#34;&gt;&lt;/a&gt;Content-Type&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;text/html; charset=UTF-8&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Content-Type 说明了实体主体内对象的媒体类型。和首部字段 Accept 一样，字段值用 type/subtype 形式赋值。&lt;/p&gt;
&lt;h4 id=&#34;Expires&#34;&gt;&lt;a href=&#34;#Expires&#34; class=&#34;headerlink&#34; title=&#34;Expires&#34;&gt;&lt;/a&gt;Expires&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Expires&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Wed, 04 Jul 2012 08:26:05 GMT&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Expires 会将资源失效的日期告知客户端。缓存服务器在接收到含有首部字段 Expires 的响应后，会以缓存来应答请求，在Expires 字段值指定的时间之前，响应的副本会一直被保存。当超过指定的时间后，缓存服务器在请求发送过来时，会转向源服务器请求资源。&lt;/p&gt;
&lt;p&gt;当首部字段 Cache-Control 有指定 max-age 指令时，比起首部字段 Expires，会优先处理 max-age 指令。&lt;/p&gt;
&lt;h4 id=&#34;Last-Modified&#34;&gt;&lt;a href=&#34;#Last-Modified&#34; class=&#34;headerlink&#34; title=&#34;Last-Modified&#34;&gt;&lt;/a&gt;Last-Modified&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Last-Modified&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Wed, 23 May 2012 09:59:55 GMT&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Last-Modified 指明资源最终修改的时间。一般来说，这个值就是 Request-URI 指定资源被修改的时间。但类似使用 CGI 脚本进行动态数据处理时，该值有可能会变成数据最终修改时的时间。&lt;/p&gt;
&lt;h3 id=&#34;为-Cookie-服务的首部字段&#34;&gt;&lt;a href=&#34;#为-Cookie-服务的首部字段&#34; class=&#34;headerlink&#34; title=&#34;为 Cookie 服务的首部字段&#34;&gt;&lt;/a&gt;为 &lt;strong&gt;Cookie&lt;/strong&gt; 服务的首部字段&lt;/h3&gt;&lt;p&gt;Cookie 的工作机制是用户识别及状态管理。Web 网站为了管理用户的状态会通过 Web 浏览器，把一些数据临时写入用户的计算机内。接着当用户访问该Web网站时，可通过通信方式取回之前发放的Cookie。&lt;/p&gt;
&lt;p&gt;调用 Cookie 时，由于可校验 Cookie 的有效期，以及发送方的域、路径、协议等信息，所以正规发布的 Cookie 内的数据不会因来自其他Web 站点和攻击者的攻击而泄露。&lt;/p&gt;
&lt;h4 id=&#34;Cookie-的规格标准文档&#34;&gt;&lt;a href=&#34;#Cookie-的规格标准文档&#34; class=&#34;headerlink&#34; title=&#34;Cookie 的规格标准文档&#34;&gt;&lt;/a&gt;Cookie 的规格标准文档&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;h6 id=&#34;RFC2109&#34;&gt;&lt;a href=&#34;#RFC2109&#34; class=&#34;headerlink&#34; title=&#34;RFC2109&#34;&gt;&lt;/a&gt;RFC2109&lt;/h6&gt;&lt;/li&gt;
&lt;li&gt;&lt;h6 id=&#34;RFC2965&#34;&gt;&lt;a href=&#34;#RFC2965&#34; class=&#34;headerlink&#34; title=&#34;RFC2965&#34;&gt;&lt;/a&gt;RFC2965&lt;/h6&gt;&lt;/li&gt;
&lt;li&gt;&lt;h6 id=&#34;RFC6265&#34;&gt;&lt;a href=&#34;#RFC6265&#34; class=&#34;headerlink&#34; title=&#34;RFC6265&#34;&gt;&lt;/a&gt;RFC6265&lt;/h6&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由网景公司颁布的规格标准&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Cookie-服务的首部字段&#34;&gt;&lt;a href=&#34;#Cookie-服务的首部字段&#34; class=&#34;headerlink&#34; title=&#34;Cookie 服务的首部字段&#34;&gt;&lt;/a&gt;&lt;strong&gt;Cookie&lt;/strong&gt; 服务的首部字段&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;首部字段名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;首部类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Set-Cookie&lt;/td&gt;
&lt;td&gt;开始状态管理所使用的Cookie信息&lt;/td&gt;
&lt;td&gt;响应首部字段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cookie&lt;/td&gt;
&lt;td&gt;服务器接收到的Cookie信息&lt;/td&gt;
&lt;td&gt;请求首部字段&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;Set-Cookie&#34;&gt;&lt;a href=&#34;#Set-Cookie&#34; class=&#34;headerlink&#34; title=&#34;Set-Cookie&#34;&gt;&lt;/a&gt;Set-Cookie&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;status=enable; expires=Tue, 05 Jul 2011 07:26:31&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Set-Cookie&lt;/strong&gt; 字段的属性&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;NAME=VALUE&lt;/td&gt;
&lt;td&gt;赋予 Cookie 的名称和其值（必需项）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expires=DATE&lt;/td&gt;
&lt;td&gt;Cookie 的有效期（若不明确指定则默认为浏览器关闭前为止）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;path=PATH&lt;/td&gt;
&lt;td&gt;将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;domain=域名&lt;/td&gt;
&lt;td&gt;作为 Cookie 适用对象的域名  （若不指定则默认为创建 Cookie  的服务器的域名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Secure&lt;/td&gt;
&lt;td&gt;仅在 HTTPS 安全通信时才会发送  Cookie&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HttpOnly&lt;/td&gt;
&lt;td&gt;加以限制，使 Cookie 不能被 JavaScript 脚本访问&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h6 id=&#34;expires-属性&#34;&gt;&lt;a href=&#34;#expires-属性&#34; class=&#34;headerlink&#34; title=&#34;expires 属性&#34;&gt;&lt;/a&gt;expires 属性&lt;/h6&gt;&lt;p&gt;Cookie 的 expires 属性指定浏览器可发送 Cookie 的有效期。&lt;/p&gt;
&lt;p&gt;当省略 expires 属性时，其有效期仅限于维持浏览器会话（Session） 时间段内。这通常限于浏览器应用程序被关闭之前。&lt;/p&gt;
&lt;p&gt;另外，一旦 Cookie 从服务器端发送至客户端，服务器端就不存在可以显式删除 Cookie 的方法。但可通过覆盖已过期的 Cookie，实现对客户端 Cookie 的实质性删除操作。&lt;/p&gt;
&lt;h5 id=&#34;path-属性&#34;&gt;&lt;a href=&#34;#path-属性&#34; class=&#34;headerlink&#34; title=&#34;path 属性&#34;&gt;&lt;/a&gt;&lt;strong&gt;path&lt;/strong&gt; 属性&lt;/h5&gt;&lt;p&gt;Cookie 的 path 属性可用于限制指定 Cookie 的发送范围的文件目录。不过另有办法可避开这项限制，看来对其作为安全机制的效果不能抱有期待。&lt;/p&gt;
&lt;h5 id=&#34;domain-属性&#34;&gt;&lt;a href=&#34;#domain-属性&#34; class=&#34;headerlink&#34; title=&#34;domain 属性&#34;&gt;&lt;/a&gt;&lt;strong&gt;domain&lt;/strong&gt; 属性&lt;/h5&gt;&lt;p&gt;通过 Cookie 的 domain 属性指定的域名可做到与结尾匹配一致。比如，当指定 example.com 后，除 example.com 以外，&lt;a href=&#34;http://www.example.com/&#34;&gt;www.example.com &lt;/a&gt;或www2.example.com 等都可以发送 Cookie。&lt;/p&gt;
&lt;p&gt;因此，除了针对具体指定的多个域名发送 Cookie 之 外，不指定domain 属性显得更安全&lt;/p&gt;
&lt;h5 id=&#34;secure-属性&#34;&gt;&lt;a href=&#34;#secure-属性&#34; class=&#34;headerlink&#34; title=&#34;secure 属性&#34;&gt;&lt;/a&gt;&lt;strong&gt;secure&lt;/strong&gt; 属性&lt;/h5&gt;&lt;p&gt;Cookie 的 secure 属性用于限制 Web 页面仅在 HTTPS 安全连接时，才可以发送 Cookie。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;name=value; secure&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;HttpOnly-属性&#34;&gt;&lt;a href=&#34;#HttpOnly-属性&#34; class=&#34;headerlink&#34; title=&#34;HttpOnly 属性&#34;&gt;&lt;/a&gt;HttpOnly 属性&lt;/h6&gt;&lt;p&gt;Cookie 的 HttpOnly 属性是 Cookie 的扩展功能，它使 JavaScript 脚本无法获得 Cookie。其主要目的为防止跨站脚本攻击（Cross-site scripting，XSS）对 Cookie 的信息窃取。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;name=value; HttpOnly&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;Cookie&#34;&gt;&lt;a href=&#34;#Cookie&#34; class=&#34;headerlink&#34; title=&#34;Cookie&#34;&gt;&lt;/a&gt;Cookie&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;status=enable&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 Cookie 会告知服务器，当客户端想获得 HTTP 状态管理支持时，就会在请求中包含从服务器接收到的 Cookie。接收到多个Cookie 时，同样可以以多个 Cookie 形式发送。&lt;/p&gt;
&lt;h3 id=&#34;其他首部字段&#34;&gt;&lt;a href=&#34;#其他首部字段&#34; class=&#34;headerlink&#34; title=&#34;其他首部字段&#34;&gt;&lt;/a&gt;其他首部字段&lt;/h3&gt;&lt;p&gt;HTTP 首部字段是可以自行扩展的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;X-Frame-Options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;X-XSS-Protection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DNT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3P&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;X-Frame-Options&#34;&gt;&lt;a href=&#34;#X-Frame-Options&#34; class=&#34;headerlink&#34; title=&#34;X-Frame-Options&#34;&gt;&lt;/a&gt;X-Frame-Options&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;X-Frame-Options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;DENY&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 X-Frame-Options 属于 HTTP 响应首部，用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。其主要目的是为了防止点击劫持（clickjacking）攻击。&lt;/p&gt;
&lt;h5 id=&#34;字段&#34;&gt;&lt;a href=&#34;#字段&#34; class=&#34;headerlink&#34; title=&#34;字段&#34;&gt;&lt;/a&gt;字段&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DENY&lt;/strong&gt; ：拒绝&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SAMEORIGIN&lt;/strong&gt; ：仅同源域名下的页面（Top-level-browsing- context）匹配时许可。（比如，当指定 &lt;a href=&#34;http://hackr.jp/sample.html&#34;&gt;http://hackr.jp/sample.html &lt;/a&gt;页面为 SAMEORIGIN 时，那么 hackr.jp 上所有页面的 frame 都被允许可加载该页面，而 example.com 等其他域名的页面就不行了）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;apache2-conf-的配置实例&#34;&gt;&lt;a href=&#34;#apache2-conf-的配置实例&#34; class=&#34;headerlink&#34; title=&#34;apache2.conf 的配置实例&#34;&gt;&lt;/a&gt;&lt;strong&gt;apache2.conf&lt;/strong&gt; 的配置实例&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&amp;lt;IfModule mod_headers.c&amp;gt;
Header append X-FRAME-OPTIONS &#34;SAMEORIGIN&#34;
&amp;lt;/IfModule&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;X-XSS-Protection&#34;&gt;&lt;a href=&#34;#X-XSS-Protection&#34; class=&#34;headerlink&#34; title=&#34;X-XSS-Protection&#34;&gt;&lt;/a&gt;X-XSS-Protection&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;X-XSS-Protection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 X-XSS-Protection 属于 HTTP 响应首部，它是针对跨站脚本攻击（XSS）的一种对策，用于控制浏览器 XSS 防护机制的开关。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0：将 XSS 过滤设置成无效状态&lt;/li&gt;
&lt;li&gt;1：将 XSS 过滤设置成有效状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;DNT&#34;&gt;&lt;a href=&#34;#DNT&#34; class=&#34;headerlink&#34; title=&#34;DNT&#34;&gt;&lt;/a&gt;DNT&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;DNT&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 DNT 属于 HTTP 请求首部，其中 DNT 是 Do Not Track 的简称，意为拒绝个人信息被收集，是表示拒绝被精准广告追踪的一种方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0：同意被追踪&lt;/li&gt;
&lt;li&gt;1：拒绝被追踪&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;P3P&#34;&gt;&lt;a href=&#34;#P3P&#34; class=&#34;headerlink&#34; title=&#34;P3P&#34;&gt;&lt;/a&gt;P3P&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;P3P&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;CP=&#34;CAO DSP LAW CURa ADMa DEVa TAIa PSAa PSDa IVAa IVDa&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首部字段 P3P 属于 HTTP 相应首部，通过利用 P3P（The Platform for Privacy Preferences，在线隐私偏好平台）技术，可以让 Web 网站上的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的目的。&lt;/p&gt;
&lt;p&gt;要进行 P3P 的设定，需按以下操作步骤进行。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;1&lt;/strong&gt;：创建 P3P 隐私&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;2&lt;/strong&gt;：创建 P3P 隐私对照文件后，保存命名在 /w3c/p3p.xml&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;3&lt;/strong&gt;：从 P3P 隐私中新建 Compact policies 后，输出到 HTTP 响应中&lt;/p&gt;
&lt;h2 id=&#34;确保-Web-安全的HTTPS&#34;&gt;&lt;a href=&#34;#确保-Web-安全的HTTPS&#34; class=&#34;headerlink&#34; title=&#34;确保 Web 安全的HTTPS&#34;&gt;&lt;/a&gt;确保 &lt;strong&gt;Web&lt;/strong&gt; 安全的HTTPS&lt;/h2&gt;&lt;p&gt;在 HTTP 协议中有可能存在信息窃听或身份伪装等安全问题。使用HTTPS 通信机制可以有效地防止这些问题。&lt;/p&gt;
&lt;h3 id=&#34;HTTP的缺点&#34;&gt;&lt;a href=&#34;#HTTP的缺点&#34; class=&#34;headerlink&#34; title=&#34;HTTP的缺点&#34;&gt;&lt;/a&gt;HTTP的缺点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通信使用明文（不加密），内容可能会被窃听&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不验证通信方的身份，因此有可能遭遇伪装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无法证明报文的完整性，所以有可能已遭篡改&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;通信使用明文（不加密），内容可能会被窃听&#34;&gt;&lt;a href=&#34;#通信使用明文（不加密），内容可能会被窃听&#34; class=&#34;headerlink&#34; title=&#34;通信使用明文（不加密），内容可能会被窃听&#34;&gt;&lt;/a&gt;通信使用明文（不加密），内容可能会被窃听&lt;/h4&gt;&lt;p&gt;由于 HTTP 本身不具备加密的功能，所以也无法做到对通信整体（使用 HTTP 协议通信的请求和响应的内容）进行加密。即，HTTP 报文使用明文（指未经过加密的报文）方式发送。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TCP/IP&lt;/strong&gt; 是可能被窃听的网络&lt;/p&gt;
&lt;p&gt;互联网上的任何角落都存在通信内容被窃听的风险&lt;/p&gt;
&lt;p&gt;即使加密的处理过的通信任会被监听，只是监听者还需要破解报文信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加密处理防止被窃听&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通信的加密&lt;/p&gt;
&lt;p&gt;HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或TLS（Transport Layer Security，安全层传输协议）的组合使用， 加密 HTTP 的通信内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内容的加密&lt;/p&gt;
&lt;p&gt;HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或TLS（Transport Layer Security，安全层传输协议）的组合使用， 加密 HTTP 的通信内容。&lt;/p&gt;
&lt;p&gt;把HTTP 报文里所含的内容进行加密处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/ebf75f3e4a4d5757e3628065a63e4971.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;不验证通信方的身份就可能遭遇伪装&#34;&gt;&lt;a href=&#34;#不验证通信方的身份就可能遭遇伪装&#34; class=&#34;headerlink&#34; title=&#34;不验证通信方的身份就可能遭遇伪装&#34;&gt;&lt;/a&gt;不验证通信方的身份就可能遭遇伪装&lt;/h4&gt;&lt;p&gt;HTTP 协议中的请求和响应不会对通信方进行确认。也就是说存在“服务器是否就是发送请求中 URI 真正指定的主机，返回的响应是否真的返回到实际提出请求的客户端”等类似问题。&lt;/p&gt;
&lt;h5 id=&#34;任何人都可发起请求&#34;&gt;&lt;a href=&#34;#任何人都可发起请求&#34; class=&#34;headerlink&#34; title=&#34;任何人都可发起请求&#34;&gt;&lt;/a&gt;任何人都可发起请求&lt;/h5&gt;&lt;p&gt;HTTP 协议的实现本身非常简单，不论是谁发送过来的请求都会返回响应。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法判断发出的请求是否到达理想服务器，伪装服务器&lt;/li&gt;
&lt;li&gt;无法判断响应是理想客服端发来的，伪造客服端&lt;/li&gt;
&lt;li&gt;无法判断对方是否具有访问权限&lt;/li&gt;
&lt;li&gt;无法判断是否会发给理想客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;查明对手的证书&#34;&gt;&lt;a href=&#34;#查明对手的证书&#34; class=&#34;headerlink&#34; title=&#34;查明对手的证书&#34;&gt;&lt;/a&gt;查明对手的证书&lt;/h5&gt;&lt;p&gt;虽然使用 HTTP 协议无法确定通信方，但如果使用 SSL 则可以。SSL 不仅提供加密处理，而且还使用了一种被称为证书的手段， 可用于确定方。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/5b8c38026530678e13e723170dad0f13.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;无法证明报文完整性，可能已遭篡改&#34;&gt;&lt;a href=&#34;#无法证明报文完整性，可能已遭篡改&#34; class=&#34;headerlink&#34; title=&#34;无法证明报文完整性，可能已遭篡改&#34;&gt;&lt;/a&gt;无法证明报文完整性，可能已遭篡改&lt;/h4&gt;&lt;p&gt;所谓完整性是指信息的准确度。&lt;/p&gt;
&lt;h5 id=&#34;接收到的内容可能有误&#34;&gt;&lt;a href=&#34;#接收到的内容可能有误&#34; class=&#34;headerlink&#34; title=&#34;接收到的内容可能有误&#34;&gt;&lt;/a&gt;接收到的内容可能有误&lt;/h5&gt;&lt;p&gt;在请求或响应送出之后直到对方接收之前的这段时间内，即使请求或响应的内容遭到篡改，也没有办法获悉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/6b6927be25adafe4f71d33db42272962.png&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;如何防止篡改&#34;&gt;&lt;a href=&#34;#如何防止篡改&#34; class=&#34;headerlink&#34; title=&#34;如何防止篡改&#34;&gt;&lt;/a&gt;如何防止篡改&lt;/h5&gt;&lt;p&gt;其中常用的是 MD5 和 SHA-1 等散列值校验的方法， 以及用来确认文件的数字签名方法。这些算法也会被改写。&lt;/p&gt;
&lt;h3 id=&#34;HTTP-加密-认证-完整性保护-HTTPS&#34;&gt;&lt;a href=&#34;#HTTP-加密-认证-完整性保护-HTTPS&#34; class=&#34;headerlink&#34; title=&#34;HTTP+ 加密 + 认证 + 完整性保护**=HTTPS**&#34;&gt;&lt;/a&gt;&lt;strong&gt;HTTP+&lt;/strong&gt; 加密 &lt;strong&gt;+&lt;/strong&gt; 认证 &lt;strong&gt;+&lt;/strong&gt; 完整性保护**=HTTPS**&lt;/h3&gt;&lt;h4 id=&#34;HTTP-加上加密处理和认证以及完整性保护后即是HTTPS&#34;&gt;&lt;a href=&#34;#HTTP-加上加密处理和认证以及完整性保护后即是HTTPS&#34; class=&#34;headerlink&#34; title=&#34;HTTP 加上加密处理和认证以及完整性保护后即是HTTPS&#34;&gt;&lt;/a&gt;&lt;strong&gt;HTTP&lt;/strong&gt; 加上加密处理和认证以及完整性保护后即是HTTPS&lt;/h4&gt;&lt;p&gt;把添加了加密及认证机制的 HTTP 称为 HTTPS（HTTP Secure）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/e837127d056258e30e3e134a207e6791.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;HTTPS-是身披-SSL-外壳的-HTTP&#34;&gt;&lt;a href=&#34;#HTTPS-是身披-SSL-外壳的-HTTP&#34; class=&#34;headerlink&#34; title=&#34;HTTPS 是身披 SSL 外壳的 HTTP&#34;&gt;&lt;/a&gt;&lt;strong&gt;HTTPS&lt;/strong&gt; 是身披 &lt;strong&gt;SSL&lt;/strong&gt; 外壳的 &lt;strong&gt;HTTP&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/140c9e47c4065dfc522e3e412df99331.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;相互交换密钥的公开密钥加密技术&#34;&gt;&lt;a href=&#34;#相互交换密钥的公开密钥加密技术&#34; class=&#34;headerlink&#34; title=&#34;相互交换密钥的公开密钥加密技术&#34;&gt;&lt;/a&gt;相互交换密钥的公开密钥加密技术&lt;/h4&gt;&lt;p&gt;SSL 采用一种叫做公开密钥加密（Public-key cryptography）的加密处理方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享密钥加密的困境&lt;/li&gt;
&lt;li&gt;使用两把密钥的公开密钥加密&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTPS&lt;/strong&gt; 采用混合加密机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;证明公开密钥正确性的证书&#34;&gt;&lt;a href=&#34;#证明公开密钥正确性的证书&#34; class=&#34;headerlink&#34; title=&#34;证明公开密钥正确性的证书&#34;&gt;&lt;/a&gt;证明公开密钥正确性的证书&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/a60a859278525e0944814a22d2dc2c4a.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可证明组织真实性的 &lt;strong&gt;EV SSL&lt;/strong&gt; 证书&lt;/p&gt;
&lt;p&gt;证书的一个作用是用来证明作为通信一方的服务器是否规范，另外一个作用是可确认对方服务器背后运营的企业是否真实存在。拥有该特性的证书就是 EV SSL 证书（Extended Validation SSL Certificate）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用以确认客户端的客户端证书&lt;/p&gt;
&lt;p&gt;HTTPS 中还可以使用客户端证书。以客户端证书进行客户端认证，证明服务器正在通信的对方始终是预料之内的客户端，其作用跟服务器证书如出一辙。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;认证机构信誉第一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由自认证机构颁发的证书称为自签名证书&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;HTTPS-的安全通信机制&#34;&gt;&lt;a href=&#34;#HTTPS-的安全通信机制&#34; class=&#34;headerlink&#34; title=&#34;HTTPS 的安全通信机制&#34;&gt;&lt;/a&gt;&lt;strong&gt;HTTPS&lt;/strong&gt; 的安全通信机制&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/8fd4f672653f4ee626fa9d20a1ed5f5c.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;1&lt;/strong&gt;： 客户端通过发送 Client Hello 报文开始 SSL 通信。报文中包含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;2&lt;/strong&gt;： 服务器可进行 SSL 通信时，会以 Server Hello 报文作为应答。和客户端一样，在报文中包含 SSL 版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;3&lt;/strong&gt;： 之后服务器发送 Certificate 报文。报文中包含公开密钥证书。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;4&lt;/strong&gt;： 最后服务器发送 Server Hello Done 报文通知客户端，最初阶段的 SSL 握手协商部分结束。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;5&lt;/strong&gt;： SSL 第一次握手结束之后，客户端以 Client Key Exchange 报文作为回应。报文中包含通信加密中使用的一种被称为 Pre-master secret 的随机密码串。该报文已用步骤 3 中的公开密钥进行加密。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;6&lt;/strong&gt;： 接着客户端继续发送 Change Cipher Spec 报文。该报文会提示服务器，在此报文之后的通信会采用 Pre-master secret 密钥加密。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;7&lt;/strong&gt;： 客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;8&lt;/strong&gt;： 服务器同样发送 Change Cipher Spec 报文。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;9&lt;/strong&gt;： 服务器同样发送 Finished 报文。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;10&lt;/strong&gt;： 服务器和客户端的 Finished 报文交换完毕之后，SSL 连接就算建立完成。当然，通信会受到 SSL 的保护。从此处开始进行应用层协议的通信，即发送 HTTP 请求。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;11&lt;/strong&gt;： 应用层协议通信，即发送 HTTP 响应。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;12&lt;/strong&gt;： 最后由客户端断开连接。断开连接时，发送 close_notify 报文。上图做了一些省略，这步之后再发送 TCP FIN 报文来关闭与 TCP 的通信。&lt;/p&gt;
&lt;p&gt;在以上流程中，应用层发送数据时会附加一种叫做 MAC（Message Authentication Code）的报文摘要。MAC 能够查知报文是否遭到篡改，从而保护报文的完整性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/c4d634280d5777af7ef7eb4b434c7791.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;从仅使用服务器端的公开密钥证书（服务器证书）建立 HTTPS 通信的整个过程&lt;/p&gt;
&lt;h4 id=&#34;SSL和TLS&#34;&gt;&lt;a href=&#34;#SSL和TLS&#34; class=&#34;headerlink&#34; title=&#34;SSL和TLS&#34;&gt;&lt;/a&gt;SSL和TLS&lt;/h4&gt;&lt;p&gt;HTTPS 使用 SSL（Secure Socket Layer） 和 TLS（Transport Layer Security）这两个协议。&lt;/p&gt;
&lt;p&gt;SSL目前主导权已转移到IETF，IETF以SSL3.0为基准，后制定了TLS1.0、TLS1.1、TLS1.2。&lt;/p&gt;
&lt;p&gt;当前主流SSL3.0、TLS1.0&lt;/p&gt;
&lt;h5 id=&#34;small-tips&#34;&gt;&lt;a href=&#34;#small-tips&#34; class=&#34;headerlink&#34; title=&#34;small_tips&#34;&gt;&lt;/a&gt;small_tips&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTPS&lt;/strong&gt; 比 &lt;strong&gt;HTTP&lt;/strong&gt; 要慢 &lt;strong&gt;2&lt;/strong&gt; 到 &lt;strong&gt;100&lt;/strong&gt; 倍&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;确认访问用户身份的认证&#34;&gt;&lt;a href=&#34;#确认访问用户身份的认证&#34; class=&#34;headerlink&#34; title=&#34;确认访问用户身份的认证&#34;&gt;&lt;/a&gt;确认访问用户身份的认证&lt;/h2&gt;&lt;p&gt;某些 Web 页面只想让特定的人浏览&lt;/p&gt;
&lt;h3 id=&#34;何为认证&#34;&gt;&lt;a href=&#34;#何为认证&#34; class=&#34;headerlink&#34; title=&#34;何为认证&#34;&gt;&lt;/a&gt;何为认证&lt;/h3&gt;&lt;p&gt;为了弄清究竟是谁在访问服务 器，就得让对方的客户端自报家门。&lt;/p&gt;
&lt;h4 id=&#34;HTTP-1-1-使用的认证方式&#34;&gt;&lt;a href=&#34;#HTTP-1-1-使用的认证方式&#34; class=&#34;headerlink&#34; title=&#34;HTTP/1.1 使用的认证方式&#34;&gt;&lt;/a&gt;HTTP/1.1 使用的认证方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BASIC&lt;/strong&gt; 认证（基本认证）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DIGEST&lt;/strong&gt; 认证（摘要认证）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL&lt;/strong&gt; 客户端认证&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FormBase&lt;/strong&gt; 认证（基于表单认证）&lt;/li&gt;
&lt;li&gt;Windows 统一认证（Keberos 认证、NTLM 认证）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;BASIC-认证（基本认证）&#34;&gt;&lt;a href=&#34;#BASIC-认证（基本认证）&#34; class=&#34;headerlink&#34; title=&#34;BASIC 认证（基本认证）&#34;&gt;&lt;/a&gt;&lt;strong&gt;BASIC&lt;/strong&gt; 认证（基本认证）&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/922d89ad738f1561e68b4dc757c68789.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;BASIC 认证虽然采用 Base64 编码方式，但这不是加密处理。不需要任何附加信息即可对其解码。换言之，在HTTP这种非加密信道通信就会被截获。&lt;/p&gt;
&lt;h3 id=&#34;DIGEST-认证（摘要认证）&#34;&gt;&lt;a href=&#34;#DIGEST-认证（摘要认证）&#34; class=&#34;headerlink&#34; title=&#34;DIGEST 认证（摘要认证）&#34;&gt;&lt;/a&gt;&lt;strong&gt;DIGEST&lt;/strong&gt; 认证（摘要认证）&lt;/h3&gt;&lt;p&gt;DIGEST 认证同样使用质询 / 响应的方式&lt;/p&gt;
&lt;p&gt;所谓质询响应方式是指，一开始一方会先发送认证要求给另一方，接着使用从另一方那接收到的质询码计算生成响应码。最后将响应码返回给对方进行认证的方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/d2892338940c78fc33f6406e7091220c.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;DIGEST 认证提供防止密码被窃听的保护机制，但并不存在防止用户伪装的保护机制。&lt;/p&gt;
&lt;h3 id=&#34;SSL-客户端认证&#34;&gt;&lt;a href=&#34;#SSL-客户端认证&#34; class=&#34;headerlink&#34; title=&#34;SSL 客户端认证&#34;&gt;&lt;/a&gt;&lt;strong&gt;SSL&lt;/strong&gt; 客户端认证&lt;/h3&gt;&lt;p&gt;SSL 客户端认证是借由 HTTPS 的客户端证书完成认证的方式。凭借客户端证书认证，服务器可确认访问是否来自已登录的客户端。&lt;/p&gt;
&lt;h4 id=&#34;步骤&#34;&gt;&lt;a href=&#34;#步骤&#34; class=&#34;headerlink&#34; title=&#34;步骤&#34;&gt;&lt;/a&gt;步骤&lt;/h4&gt;&lt;p&gt;步骤 &lt;strong&gt;1&lt;/strong&gt;： 接收到需要认证资源的请求，服务器会发送 Certificate Request 报文，要求客户端提供客户端证书。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;2&lt;/strong&gt;： 用户选择将发送的客户端证书后，客户端会把客户端证书信息以 Client Certificate 报文方式发送给服务器。&lt;/p&gt;
&lt;p&gt;步骤 &lt;strong&gt;3&lt;/strong&gt;： 服务器验证客户端证书验证通过后方可领取证书内客户端的公开密钥，然后开始 HTTPS 加密通信。&lt;/p&gt;
&lt;h4 id=&#34;SSL-客户端认证采用双因素认证&#34;&gt;&lt;a href=&#34;#SSL-客户端认证采用双因素认证&#34; class=&#34;headerlink&#34; title=&#34;SSL 客户端认证采用双因素认证&#34;&gt;&lt;/a&gt;&lt;strong&gt;SSL&lt;/strong&gt; 客户端认证采用双因素认证&lt;/h4&gt;&lt;p&gt;在多数情况下，SSL 客户端认证不会仅依靠证书完成认证，一般会和基于表单认证组合形成一种双因素认证（Two-factor authentication）来使用。换言之，第一个认证因素的 SSL 客户端证书用来认证客户端计算机， 另一个认证因素的密码则用来确定这是用户本人的行为。&lt;/p&gt;
&lt;h4 id=&#34;SSL-客户端认证必要的费用（证书）&#34;&gt;&lt;a href=&#34;#SSL-客户端认证必要的费用（证书）&#34; class=&#34;headerlink&#34; title=&#34;SSL 客户端认证必要的费用（证书）&#34;&gt;&lt;/a&gt;&lt;strong&gt;SSL&lt;/strong&gt; 客户端认证必要的费用（证书）&lt;/h4&gt;&lt;h3 id=&#34;基于表单认证&#34;&gt;&lt;a href=&#34;#基于表单认证&#34; class=&#34;headerlink&#34; title=&#34;基于表单认证&#34;&gt;&lt;/a&gt;基于表单认证&lt;/h3&gt;&lt;p&gt;客户端会向服务器上的 Web 应用程序发送登录信息（Credential），按登录信息的验证结果认证。&lt;/p&gt;
&lt;h5 id=&#34;认证多半为基于表单认证&#34;&gt;&lt;a href=&#34;#认证多半为基于表单认证&#34; class=&#34;headerlink&#34; title=&#34;认证多半为基于表单认证&#34;&gt;&lt;/a&gt;认证多半为基于表单认证&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Session&lt;/strong&gt; 管理及 &lt;strong&gt;Cookie&lt;/strong&gt; 应用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/2e8062821a51e04c45ae2ac8e7aa8fa1.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;基于-HTTP-的功能追加协议&#34;&gt;&lt;a href=&#34;#基于-HTTP-的功能追加协议&#34; class=&#34;headerlink&#34; title=&#34;基于 HTTP 的功能追加协议&#34;&gt;&lt;/a&gt;基于 &lt;strong&gt;HTTP&lt;/strong&gt; 的功能追加协议&lt;/h2&gt;&lt;h4 id=&#34;基于-HTTP-的协议&#34;&gt;&lt;a href=&#34;#基于-HTTP-的协议&#34; class=&#34;headerlink&#34; title=&#34;基于 HTTP 的协议&#34;&gt;&lt;/a&gt;基于 &lt;strong&gt;HTTP&lt;/strong&gt; 的协议&lt;/h4&gt;&lt;h4 id=&#34;消除-HTTP-瓶颈的-SPDY&#34;&gt;&lt;a href=&#34;#消除-HTTP-瓶颈的-SPDY&#34; class=&#34;headerlink&#34; title=&#34;消除 HTTP 瓶颈的 SPDY&#34;&gt;&lt;/a&gt;消除 &lt;strong&gt;HTTP&lt;/strong&gt; 瓶颈的 &lt;strong&gt;SPDY&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;HTTP-瓶颈&#34;&gt;&lt;a href=&#34;#HTTP-瓶颈&#34; class=&#34;headerlink&#34; title=&#34;HTTP 瓶颈&#34;&gt;&lt;/a&gt;&lt;strong&gt;HTTP&lt;/strong&gt; 瓶颈&lt;/h5&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/a6c1ddf897e03fc581cd5fd4f7990a4c.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ajax解决&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/d26bb569fc6c3b4263f786cd14533727.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Comet&lt;/strong&gt; 解决&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/0bace5d97336e00fd7d4f6932defe557.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消除 &lt;strong&gt;HTTP&lt;/strong&gt; 瓶颈的 &lt;strong&gt;SPDY&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;SPDY-的设计与功能&#34;&gt;&lt;a href=&#34;#SPDY-的设计与功能&#34; class=&#34;headerlink&#34; title=&#34;SPDY 的设计与功能&#34;&gt;&lt;/a&gt;&lt;strong&gt;SPDY&lt;/strong&gt; 的设计与功能&lt;/h4&gt;&lt;p&gt;SPDY 没有完全改写 HTTP 协议，而是在 TCP/IP 的应用层与运输层之间通过新加会话层的形式运作。同时，考虑到安全性问题，SPDY 规定通信中使用 SSL。&lt;/p&gt;
&lt;p&gt;SPDY 以会话层的形式加入，控制对数据的流动，但还是采用 HTTP 建立通信连接。因此，可照常使用 HTTP 的 GET 和 POST 等方 法、Cookie 以及 HTTP 报文等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/fb54f1e32d646b366d829a2c9a887ad3.png&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;新功能&#34;&gt;&lt;a href=&#34;#新功能&#34; class=&#34;headerlink&#34; title=&#34;新功能&#34;&gt;&lt;/a&gt;新功能&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;多路复用流&lt;/li&gt;
&lt;li&gt;赋予请求优先级&lt;/li&gt;
&lt;li&gt;压缩 &lt;strong&gt;HTTP&lt;/strong&gt; 首部&lt;/li&gt;
&lt;li&gt;推送功能&lt;/li&gt;
&lt;li&gt;服务器提示功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;SPDY-大体上消除了-Web-瓶颈&#34;&gt;&lt;a href=&#34;#SPDY-大体上消除了-Web-瓶颈&#34; class=&#34;headerlink&#34; title=&#34;SPDY 大体上消除了 Web 瓶颈&#34;&gt;&lt;/a&gt;&lt;strong&gt;SPDY&lt;/strong&gt; 大体上消除了 &lt;strong&gt;Web&lt;/strong&gt; 瓶颈&lt;/h4&gt;&lt;h3 id=&#34;使用浏览器进行全双工通信的WebSocket&#34;&gt;&lt;a href=&#34;#使用浏览器进行全双工通信的WebSocket&#34; class=&#34;headerlink&#34; title=&#34;使用浏览器进行全双工通信的WebSocket&#34;&gt;&lt;/a&gt;使用浏览器进行全双工通信的&lt;strong&gt;WebSocket&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;WebSocket 网络技术正是为解决这些问题而实现的一套新协议及 API。&lt;/p&gt;
&lt;p&gt; WebSocket 技术主要是为了解决 Ajax 和 Comet 里 XMLHttpRequest 附带的缺陷所引起的问题。&lt;/p&gt;
&lt;h4 id=&#34;WebSocket-协议&#34;&gt;&lt;a href=&#34;#WebSocket-协议&#34; class=&#34;headerlink&#34; title=&#34;WebSocket 协议&#34;&gt;&lt;/a&gt;WebSocket 协议&lt;/h4&gt;&lt;p&gt;一旦 Web 服务器与客户端之间建立起 WebSocket 协议的通信连接， 之后所有的通信都依靠这个专用协议进行。通信过程中可互相发送JSON、XML、HTML 或图片等任意格式的数据。&lt;/p&gt;
&lt;p&gt;由于是建立在 HTTP 基础上的协议，因此连接的发起方仍是客户端， 而一旦确立 WebSocket 通信连接，不论服务器还是客户端，任意一方都可直接向对方发送报文。&lt;/p&gt;
&lt;h5 id=&#34;新特点&#34;&gt;&lt;a href=&#34;#新特点&#34; class=&#34;headerlink&#34; title=&#34;新特点&#34;&gt;&lt;/a&gt;新特点&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;推送功能&lt;/li&gt;
&lt;li&gt;减少通信量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实现-WebSocket-通信&#34;&gt;&lt;a href=&#34;#实现-WebSocket-通信&#34; class=&#34;headerlink&#34; title=&#34;实现 WebSocket 通信&#34;&gt;&lt;/a&gt;实现 WebSocket 通信&lt;/h4&gt;&lt;p&gt;完成一次握手&lt;/p&gt;
&lt;h5 id=&#34;握手请求&#34;&gt;&lt;a href=&#34;#握手请求&#34; class=&#34;headerlink&#34; title=&#34;握手请求&#34;&gt;&lt;/a&gt;握手请求&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;GET /chat  HTTP/1.1 
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;server.example.com &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Upgrade&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;websocket Connection: Upgrade&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Sec-WebSocket-Key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;dGhlIHNhbXBsZSBub25jZQ== &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Origin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;http://example.com&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Sec-WebSocket-Protocol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;chat, superchat &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Sec-WebSocket-Version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用到 HTTP 的 Upgrade 首部字段，告知服务器通信协议发生改变。&lt;/p&gt;
&lt;p&gt;Sec-WebSocket-Key 字段内记录着握手过程中必不可少的键值。Sec-WebSocket-Protocol 字段内记录使用的子协议。&lt;/p&gt;
&lt;h5 id=&#34;握手响应&#34;&gt;&lt;a href=&#34;#握手响应&#34; class=&#34;headerlink&#34; title=&#34;握手响应&#34;&gt;&lt;/a&gt;握手响应&lt;/h5&gt;&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;101&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;Switching Protocols&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Upgrade&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;websocket &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;Upgrade&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Sec-WebSocket-Accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;s3pPLMBiTxaQ9kYGzzhZRbK+xOo= &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Sec-WebSocket-Protocol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;chat&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sec-WebSocket-Accept 的字段值是由握手请求中的 Sec-WebSocket-Key 的字段值生成的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/1c6be636e6391922df500391f6f0a9d2.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;WebSocket-API&#34;&gt;&lt;a href=&#34;#WebSocket-API&#34; class=&#34;headerlink&#34; title=&#34;WebSocket API&#34;&gt;&lt;/a&gt;WebSocket API&lt;/h4&gt;&lt;pre class=&#34;line-numbers language-javascript&#34; data-language=&#34;javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;WebSocket&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&#39;ws&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;game&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;example&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;com&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12010&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onopen&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;setInterval&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bufferedAmount &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getUpdateData&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;HTTP-2-0&#34;&gt;&lt;a href=&#34;#HTTP-2-0&#34; class=&#34;headerlink&#34; title=&#34;HTTP/2.0&#34;&gt;&lt;/a&gt;HTTP/2.0&lt;/h3&gt;&lt;h4 id=&#34;HTTP-2-0特点&#34;&gt;&lt;a href=&#34;#HTTP-2-0特点&#34; class=&#34;headerlink&#34; title=&#34;HTTP/2.0特点&#34;&gt;&lt;/a&gt;HTTP/2.0特点&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;压缩&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;SPDY&lt;/strong&gt;、&lt;strong&gt;Friendly&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;多路复用&lt;/td&gt;
&lt;td&gt;SPDY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TLS 义务化&lt;/td&gt;
&lt;td&gt;Speed＋ Mobility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;协商&lt;/td&gt;
&lt;td&gt;Speed＋ Mobility，Friendly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;客户端拉曳（Client Pull）/服务器推送  （Server Push）&lt;/td&gt;
&lt;td&gt;Speed＋ Mobility&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;流量控制&lt;/td&gt;
&lt;td&gt;SPDY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WebSocket&lt;/td&gt;
&lt;td&gt;Speed＋ Mobility&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;注：HTTP Speed ＋ Mobility 简写为 Speed ＋ Mobility，Network-Friendly HTTP Upgrade 简写为 Friendly。&lt;/p&gt;
&lt;h3 id=&#34;Web-服务器管理文件的-WebDAV&#34;&gt;&lt;a href=&#34;#Web-服务器管理文件的-WebDAV&#34; class=&#34;headerlink&#34; title=&#34;Web 服务器管理文件的 WebDAV&#34;&gt;&lt;/a&gt;&lt;strong&gt;Web&lt;/strong&gt; 服务器管理文件的 &lt;strong&gt;WebDAV&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;WebDAV（Web-based Distributed Authoring and Versioning，基于万维网的分布式创作和版本控制）是一个可对 Web 服务器上的内容直接进行文件复制、编辑等操作的分布式文件系统。它作为扩展 HTTP/1.1 的协议定义在 RFC4918。&lt;/p&gt;
&lt;p&gt;除了创建、删除文件等基本功能，它还具备文件创建者管理、文件编辑过程中禁止其他用户内容覆盖的加锁功能，以及对文件内容修改的版本控制功能。&lt;/p&gt;
&lt;h4 id=&#34;扩展-HTTP-1-1-的-WebDAV&#34;&gt;&lt;a href=&#34;#扩展-HTTP-1-1-的-WebDAV&#34; class=&#34;headerlink&#34; title=&#34;扩展 HTTP/1.1 的 WebDAV&#34;&gt;&lt;/a&gt;扩展 &lt;strong&gt;HTTP/1.1&lt;/strong&gt; 的 &lt;strong&gt;WebDAV&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://images.dadream.eu.org/images/2024/07/0576a601ec5602848bee1800f36f65f3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;集合（&lt;strong&gt;Collection&lt;/strong&gt;）：是一种统一管理多个资源的概念。以集合为单位可进行各种操作。也可实现类似集合的集合这样的叠加。&lt;/p&gt;
&lt;p&gt;资源（&lt;strong&gt;Resource&lt;/strong&gt;）：把文件或集合称为资源。&lt;/p&gt;
&lt;p&gt;属性（&lt;strong&gt;Property&lt;/strong&gt;）：定义资源的属性。定义以&lt;strong&gt;“&lt;/strong&gt;名称 &lt;strong&gt;=&lt;/strong&gt; 值&lt;strong&gt;”&lt;/strong&gt;的格式执行。&lt;/p&gt;
&lt;p&gt;锁（&lt;strong&gt;Lock&lt;/strong&gt;）：把文件设置成无法编辑状态。多人同时编辑时，可防止在同一时间进行内容写入。&lt;/p&gt;
&lt;h4 id=&#34;WebDAV-内新增的方法及状态码&#34;&gt;&lt;a href=&#34;#WebDAV-内新增的方法及状态码&#34; class=&#34;headerlink&#34; title=&#34;WebDAV 内新增的方法及状态码&#34;&gt;&lt;/a&gt;&lt;strong&gt;WebDAV&lt;/strong&gt; 内新增的方法及状态码&lt;/h4&gt;&lt;p&gt;WebDAV 为实现远程文件管理，向 HTTP/1.1 中追加了以下这些方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROPFIND&lt;/strong&gt; ：获取属性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PROPPATCH&lt;/strong&gt; ：修改属性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MKCOL&lt;/strong&gt; ：创建集合&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt; ：复制资源及属性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MOVE&lt;/strong&gt; ：移动资源&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LOCK&lt;/strong&gt; ：资源加锁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UNLOCK&lt;/strong&gt; ：资源解锁&lt;/p&gt;
&lt;p&gt;为配合扩展的方法，状态码也随之扩展。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;102 Processing&lt;/strong&gt; ：可正常处理请求，但目前是处理中状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;207 Multi-Status&lt;/strong&gt; ：存在多种状态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;422 Unprocessible Entity&lt;/strong&gt; ：格式正确，内容有误&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;423 Locked&lt;/strong&gt; ：资源已被加锁&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;424 Failed Dependency&lt;/strong&gt; ：处理与某请求关联的请求失败，因此不再维持依赖关系&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;507 Isufficient Storage&lt;/strong&gt; ：保存空间不足&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;WebDAV&lt;/strong&gt; 的请求实例&lt;/p&gt;
&lt;p&gt;下面是使用 PROPFIND 方法对 &lt;a href=&#34;http://www.example.com/file&#34;&gt;http://www.example.com/file &lt;/a&gt;发起获取属性的请求。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;PROPFIND /file HTTP/1.1
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;www.example.com&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;application/xml; charset=&#34;utf-8&#34; Content-Length: 219&lt;/span&gt;&lt;/span&gt;

&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt;
&amp;lt;D:propfind xmlns:D=&#34;DAV:&#34;&amp;gt;
&amp;lt;D:prop xmlns:R=&#34;http://ns.example.com/boxschema/&#34;&amp;gt;
&amp;lt;R:bigbox/&amp;gt;
&amp;lt;R:author/&amp;gt;
&amp;lt;R:DingALing/&amp;gt;
&amp;lt;R:Random/&amp;gt;
&amp;lt;/D:prop&amp;gt;
&amp;lt;/D:propfind&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;WebDAV&lt;/strong&gt; 的响应实例&lt;/p&gt;
&lt;p&gt;下面是针对之前的 PROPFIND 方法，返回&lt;a href=&#34;http://www.example.com/file&#34;&gt;http://www.example.com/file &lt;/a&gt;的属性的响应。&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-http&#34; data-language=&#34;http&#34;&gt;&lt;code class=&#34;language-http&#34;&gt;&lt;span class=&#34;token response-status&#34;&gt;&lt;span class=&#34;token http-version property&#34;&gt;HTTP/1.1&lt;/span&gt; &lt;span class=&#34;token status-code number&#34;&gt;207&lt;/span&gt; &lt;span class=&#34;token reason-phrase string&#34;&gt;Multi-Status&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token header&#34;&gt;&lt;span class=&#34;token header-name keyword&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token header-value&#34;&gt;application/xml; charset=&#34;utf-8&#34; Content-Length: 831&lt;/span&gt;&lt;/span&gt;

&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&amp;gt;
&amp;lt;D:multistatus xmlns:D=&#34;DAV:&#34;&amp;gt;
&amp;lt;D:response xmlns:R=&#34;http://ns.example.com/boxschema/&#34;
&amp;lt;D:href&amp;gt;http://www.example.com/file&amp;lt;/D:href&amp;gt;
&amp;lt;D:propstat&amp;gt;
&amp;lt;D:prop&amp;gt;
&amp;lt;R:bigbox&amp;gt;
&amp;lt;R:BoxType&amp;gt;Box type A&amp;lt;/R:BoxType&amp;gt;
&amp;lt;/R:bigbox&amp;gt;
&amp;lt;R:author&amp;gt;
&amp;lt;R:Name&amp;gt;J.J. Johnson&amp;lt;/R:Name&amp;gt;
&amp;lt;/R:author&amp;gt;
&amp;lt;/D:prop&amp;gt;
&amp;lt;D:status&amp;gt;HTTP/1.1 200 OK&amp;lt;/D:status&amp;gt;
&amp;lt;/D:propstat&amp;gt;
&amp;lt;D:propstat&amp;gt;
&amp;lt;D:prop&amp;gt;&amp;lt;R:DingALing/&amp;gt;&amp;lt;R:Random/&amp;gt;&amp;lt;/D:prop&amp;gt;
&amp;lt;D:status&amp;gt;HTTP/1.1 403 Forbidden&amp;lt;/D:status&amp;gt;
&amp;lt;D:responsedescription&amp;gt; The user does not have acc
&amp;lt;/D:responsedescription&amp;gt;
&amp;lt;/D:propstat&amp;gt;
&amp;lt;/D:response&amp;gt;
&amp;lt;D:responsedescription&amp;gt; There has been an access viola
&amp;lt;/D:responsedescription&amp;gt;
&amp;lt;/D:multistatus&amp;gt;&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;构建-Web-内容的技术&#34;&gt;&lt;a href=&#34;#构建-Web-内容的技术&#34; class=&#34;headerlink&#34; title=&#34;构建 Web 内容的技术&#34;&gt;&lt;/a&gt;构建 &lt;strong&gt;Web&lt;/strong&gt; 内容的技术&lt;/h2&gt;&lt;h3 id=&#34;HTML&#34;&gt;&lt;a href=&#34;#HTML&#34; class=&#34;headerlink&#34; title=&#34;HTML&#34;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;h5 id=&#34;Web-页面几乎全由-HTML-构建&#34;&gt;&lt;a href=&#34;#Web-页面几乎全由-HTML-构建&#34; class=&#34;headerlink&#34; title=&#34;Web 页面几乎全由 HTML 构建&#34;&gt;&lt;/a&gt;&lt;strong&gt;Web&lt;/strong&gt; 页面几乎全由 &lt;strong&gt;HTML&lt;/strong&gt; 构建&lt;/h5&gt;&lt;h5 id=&#34;HTML版本&#34;&gt;&lt;a href=&#34;#HTML版本&#34; class=&#34;headerlink&#34; title=&#34;HTML版本&#34;&gt;&lt;/a&gt;HTML版本&lt;/h5&gt;&lt;h5 id=&#34;设计应用-CSS&#34;&gt;&lt;a href=&#34;#设计应用-CSS&#34; class=&#34;headerlink&#34; title=&#34;设计应用 CSS&#34;&gt;&lt;/a&gt;设计应用 &lt;strong&gt;CSS&lt;/strong&gt;&lt;/h5&gt;&lt;h4 id=&#34;动态HTML&#34;&gt;&lt;a href=&#34;#动态HTML&#34; class=&#34;headerlink&#34; title=&#34;动态HTML&#34;&gt;&lt;/a&gt;动态HTML&lt;/h4&gt;&lt;p&gt;使用客户端脚本语言将静态的 HTML 内容变成动态的技术的总称。&lt;/p&gt;
&lt;h5 id=&#34;DOM&#34;&gt;&lt;a href=&#34;#DOM&#34; class=&#34;headerlink&#34; title=&#34;DOM&#34;&gt;&lt;/a&gt;DOM&lt;/h5&gt;&lt;p&gt;DOM 是用以操作 HTML 文档和 XML 文档的 API（Application Programming Interface，应用编程接口）。&lt;/p&gt;
&lt;p&gt;Web应用&lt;/p&gt;
&lt;h4 id=&#34;通过-Web-提供功能的-Web-应用&#34;&gt;&lt;a href=&#34;#通过-Web-提供功能的-Web-应用&#34; class=&#34;headerlink&#34; title=&#34;通过 Web 提供功能的 Web 应用&#34;&gt;&lt;/a&gt;通过 &lt;strong&gt;Web&lt;/strong&gt; 提供功能的 &lt;strong&gt;Web&lt;/strong&gt; 应用&lt;/h4&gt;&lt;p&gt;由程序创建的内容称为动态内容，而事先准备好的内容称为静态内容。&lt;/p&gt;
&lt;h4 id=&#34;与-Web-服务器及程序协作的-CGI&#34;&gt;&lt;a href=&#34;#与-Web-服务器及程序协作的-CGI&#34; class=&#34;headerlink&#34; title=&#34;与 Web 服务器及程序协作的 CGI&#34;&gt;&lt;/a&gt;与 &lt;strong&gt;Web&lt;/strong&gt; 服务器及程序协作的 &lt;strong&gt;CGI&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;CGI（Common Gateway Interface，通用网关接口）是指 Web 服务器在接收到客户端发送过来的请求后转发给程序的一组机制。在 CGI 的作用下，程序会对请求内容做出相应的动作，比如创建 HTML 等动态内容。&lt;/p&gt;
&lt;p&gt;使用 CGI 的程序叫做 CGI 程序，通常是用 Perl、PHP、Ruby 和 C 等编程语言编写而成。&lt;/p&gt;
&lt;h4 id=&#34;因-Java-而普及的-Servlet&#34;&gt;&lt;a href=&#34;#因-Java-而普及的-Servlet&#34; class=&#34;headerlink&#34; title=&#34;因 Java 而普及的 Servlet&#34;&gt;&lt;/a&gt;因 &lt;strong&gt;Java&lt;/strong&gt; 而普及的 &lt;strong&gt;Servlet&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Servlet 是一种能在服务器上创建动态内容的程序。Servlet 是用 Java 语言实现的一个接口，属于面向企业级 Java（JavaEE，Java Enterprise Edition）的一部分。负载小。&lt;/p&gt;
&lt;h3 id=&#34;数据发布的格式及语言&#34;&gt;&lt;a href=&#34;#数据发布的格式及语言&#34; class=&#34;headerlink&#34; title=&#34;数据发布的格式及语言&#34;&gt;&lt;/a&gt;数据发布的格式及语言&lt;/h3&gt;&lt;h4 id=&#34;可扩展标记语言&#34;&gt;&lt;a href=&#34;#可扩展标记语言&#34; class=&#34;headerlink&#34; title=&#34;可扩展标记语言&#34;&gt;&lt;/a&gt;可扩展标记语言&lt;/h4&gt;&lt;p&gt;XML（eXtensible Markup Language，可扩展标记语言）是一种可按应用目标进行扩展的通用标记语言。旨在通过使用 XML，使互联网数据共享变得更容易。&lt;/p&gt;
&lt;p&gt;XML 和 HTML 都是从标准通用标记语言 SGML（Standard Generalized Markup Language）简化而成。与 HTML 相比，它对数据的记录方式做了特殊处理。&lt;/p&gt;
&lt;h4 id=&#34;发布更新信息的-RSS-Atom&#34;&gt;&lt;a href=&#34;#发布更新信息的-RSS-Atom&#34; class=&#34;headerlink&#34; title=&#34;发布更新信息的 RSS/Atom&#34;&gt;&lt;/a&gt;发布更新信息的 &lt;strong&gt;RSS/Atom&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;RSS（简易信息聚合，也叫聚合内容）和 Atom 都是发布新闻或博客日志等更新信息文档的格式的总称。两者都用到了 XML。&lt;/p&gt;
&lt;h4 id=&#34;JavaScript-衍生的轻量级易用-JSON&#34;&gt;&lt;a href=&#34;#JavaScript-衍生的轻量级易用-JSON&#34; class=&#34;headerlink&#34; title=&#34;JavaScript 衍生的轻量级易用 JSON&#34;&gt;&lt;/a&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 衍生的轻量级易用 &lt;strong&gt;JSON&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;JSON（JavaScript Object Notation）是一种以JavaScript（ECMAScript）的对象表示法为基础的轻量级数据标记语言。&lt;/p&gt;
&lt;h2 id=&#34;Web-的攻击技术&#34;&gt;&lt;a href=&#34;#Web-的攻击技术&#34; class=&#34;headerlink&#34; title=&#34;Web 的攻击技术&#34;&gt;&lt;/a&gt;&lt;strong&gt;Web&lt;/strong&gt; 的攻击技术&lt;/h2&gt;&lt;h3 id=&#34;针对-Web-的攻击技术&#34;&gt;&lt;a href=&#34;#针对-Web-的攻击技术&#34; class=&#34;headerlink&#34; title=&#34;针对 Web 的攻击技术&#34;&gt;&lt;/a&gt;针对 &lt;strong&gt;Web&lt;/strong&gt; 的攻击技术&lt;/h3&gt;&lt;h4 id=&#34;HTTP-不具备必要的安全功能&#34;&gt;&lt;a href=&#34;#HTTP-不具备必要的安全功能&#34; class=&#34;headerlink&#34; title=&#34;HTTP 不具备必要的安全功能&#34;&gt;&lt;/a&gt;&lt;strong&gt;HTTP&lt;/strong&gt; 不具备必要的安全功能&lt;/h4&gt;&lt;h4 id=&#34;在客户端即可篡改请求&#34;&gt;&lt;a href=&#34;#在客户端即可篡改请求&#34; class=&#34;headerlink&#34; title=&#34;在客户端即可篡改请求&#34;&gt;&lt;/a&gt;在客户端即可篡改请求&lt;/h4&gt;&lt;h4 id=&#34;针对-Web-应用的攻击模式&#34;&gt;&lt;a href=&#34;#针对-Web-应用的攻击模式&#34; class=&#34;headerlink&#34; title=&#34;针对 Web 应用的攻击模式&#34;&gt;&lt;/a&gt;针对 &lt;strong&gt;Web&lt;/strong&gt; 应用的攻击模式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;主动攻击&lt;/li&gt;
&lt;li&gt;被动攻击&lt;/li&gt;
&lt;li&gt;以服务器为目标的主动攻击&lt;/li&gt;
&lt;li&gt;以服务器为目标的被动攻&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;因输出值转义不完全引发的安全漏洞&#34;&gt;&lt;a href=&#34;#因输出值转义不完全引发的安全漏洞&#34; class=&#34;headerlink&#34; title=&#34;因输出值转义不完全引发的安全漏洞&#34;&gt;&lt;/a&gt;因输出值转义不完全引发的安全漏洞&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端的验证&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt; 应用端（服务器端）的验证&lt;ul&gt;
&lt;li&gt;输入值验证&lt;/li&gt;
&lt;li&gt;输出值转义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;跨站脚本攻击（Cross-Site-Scripting，XSS）&#34;&gt;&lt;a href=&#34;#跨站脚本攻击（Cross-Site-Scripting，XSS）&#34; class=&#34;headerlink&#34; title=&#34;跨站脚本攻击（Cross-Site Scripting，XSS）&#34;&gt;&lt;/a&gt;跨站脚本攻击（Cross-Site Scripting，XSS）&lt;/h4&gt;&lt;p&gt;跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击。&lt;/p&gt;
&lt;h4 id=&#34;SQL-注入（SQL-Injection）&#34;&gt;&lt;a href=&#34;#SQL-注入（SQL-Injection）&#34; class=&#34;headerlink&#34; title=&#34;SQL 注入（SQL Injection）&#34;&gt;&lt;/a&gt;SQL 注入（SQL Injection）&lt;/h4&gt;&lt;h4 id=&#34;OS-命令注入攻击（OS-Command-Injection）&#34;&gt;&lt;a href=&#34;#OS-命令注入攻击（OS-Command-Injection）&#34; class=&#34;headerlink&#34; title=&#34;OS 命令注入攻击（OS Command Injection）&#34;&gt;&lt;/a&gt;OS 命令注入攻击（OS Command Injection）&lt;/h4&gt;&lt;h4 id=&#34;HTTP-首部注入攻击（HTTP-Header-Injection）&#34;&gt;&lt;a href=&#34;#HTTP-首部注入攻击（HTTP-Header-Injection）&#34; class=&#34;headerlink&#34; title=&#34;HTTP 首部注入攻击（HTTP Header Injection）&#34;&gt;&lt;/a&gt;HTTP 首部注入攻击（HTTP Header Injection）&lt;/h4&gt;&lt;h4 id=&#34;邮件首部注入（Mail-Header-Injection）&#34;&gt;&lt;a href=&#34;#邮件首部注入（Mail-Header-Injection）&#34; class=&#34;headerlink&#34; title=&#34;邮件首部注入（Mail Header Injection）&#34;&gt;&lt;/a&gt;邮件首部注入（Mail Header Injection）&lt;/h4&gt;&lt;h4 id=&#34;目录遍历（Directory-Traversal）攻击&#34;&gt;&lt;a href=&#34;#目录遍历（Directory-Traversal）攻击&#34; class=&#34;headerlink&#34; title=&#34;目录遍历（Directory Traversal）攻击&#34;&gt;&lt;/a&gt;目录遍历（Directory Traversal）攻击&lt;/h4&gt;&lt;h4 id=&#34;远程文件包含漏洞（Remote-File-Inclusion）&#34;&gt;&lt;a href=&#34;#远程文件包含漏洞（Remote-File-Inclusion）&#34; class=&#34;headerlink&#34; title=&#34;远程文件包含漏洞（Remote File Inclusion）&#34;&gt;&lt;/a&gt;远程文件包含漏洞（Remote File Inclusion）&lt;/h4&gt;&lt;h3 id=&#34;因设置或设计上的缺陷引发的安全漏洞&#34;&gt;&lt;a href=&#34;#因设置或设计上的缺陷引发的安全漏洞&#34; class=&#34;headerlink&#34; title=&#34;因设置或设计上的缺陷引发的安全漏洞&#34;&gt;&lt;/a&gt;因设置或设计上的缺陷引发的安全漏洞&lt;/h3&gt;&lt;h4 id=&#34;强制浏览（Forced-Browsing）&#34;&gt;&lt;a href=&#34;#强制浏览（Forced-Browsing）&#34; class=&#34;headerlink&#34; title=&#34;强制浏览（Forced Browsing）&#34;&gt;&lt;/a&gt;强制浏览（Forced Browsing）&lt;/h4&gt;&lt;p&gt;强制浏览（Forced Browsing）安全漏洞是指，从安置在 Web 服务器的公开目录下的文件中，浏览那些原本非自愿公开的文件。&lt;/p&gt;
&lt;h4 id=&#34;不正确的错误消息处理（Error-Handling-Vulnerability）&#34;&gt;&lt;a href=&#34;#不正确的错误消息处理（Error-Handling-Vulnerability）&#34; class=&#34;headerlink&#34; title=&#34;不正确的错误消息处理（Error Handling Vulnerability）&#34;&gt;&lt;/a&gt;不正确的错误消息处理（Error Handling Vulnerability）&lt;/h4&gt;&lt;p&gt;不正确的错误消息处理（Error Handling Vulnerability）的安全漏洞是指，Web 应用的错误信息内包含对攻击者有用的信息。&lt;/p&gt;
&lt;h4 id=&#34;开放重定向（Open-Redirect）&#34;&gt;&lt;a href=&#34;#开放重定向（Open-Redirect）&#34; class=&#34;headerlink&#34; title=&#34;开放重定向（Open Redirect）&#34;&gt;&lt;/a&gt;开放重定向（Open Redirect）&lt;/h4&gt;&lt;p&gt;开放重定向（Open Redirect）是一种对指定的任意 URL 作重定向跳转的功能。而于此功能相关联的安全漏洞是指，假如指定的重定向 URL 到某个具有恶意的 Web 网站，那么用户就会被诱导至那个 Web 网站。&lt;/p&gt;
&lt;h3 id=&#34;因会话管理疏忽引发的安全漏洞&#34;&gt;&lt;a href=&#34;#因会话管理疏忽引发的安全漏洞&#34; class=&#34;headerlink&#34; title=&#34;因会话管理疏忽引发的安全漏洞&#34;&gt;&lt;/a&gt;因会话管理疏忽引发的安全漏洞&lt;/h3&gt;&lt;h4 id=&#34;会话劫持（Session-Hijack）&#34;&gt;&lt;a href=&#34;#会话劫持（Session-Hijack）&#34; class=&#34;headerlink&#34; title=&#34;会话劫持（Session Hijack）&#34;&gt;&lt;/a&gt;会话劫持（Session Hijack）&lt;/h4&gt;&lt;p&gt;会话劫持（Session Hijack）是指攻击者通过某种手段拿到了用户的会话 ID，并非法使用此会话 ID 伪装成用户，达到攻击的目的。&lt;/p&gt;
&lt;h4 id=&#34;会话固定攻击&#34;&gt;&lt;a href=&#34;#会话固定攻击&#34; class=&#34;headerlink&#34; title=&#34;会话固定攻击&#34;&gt;&lt;/a&gt;会话固定攻击&lt;/h4&gt;&lt;p&gt;对以窃取目标会话 ID 为主动攻击手段的会话劫持而言，会话固定攻击（Session Fixation）攻击会强制用户使用攻击者指定的会话 ID，属于被动攻击。&lt;/p&gt;
&lt;h4 id=&#34;跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）&#34;&gt;&lt;a href=&#34;#跨站点请求伪造（Cross-Site-Request-Forgeries，CSRF）&#34; class=&#34;headerlink&#34; title=&#34;跨站点请求伪造（Cross-Site Request Forgeries，CSRF）&#34;&gt;&lt;/a&gt;跨站点请求伪造（Cross-Site Request Forgeries，CSRF）&lt;/h4&gt;&lt;p&gt;跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。&lt;/p&gt;
&lt;h3 id=&#34;其他安全漏洞&#34;&gt;&lt;a href=&#34;#其他安全漏洞&#34; class=&#34;headerlink&#34; title=&#34;其他安全漏洞&#34;&gt;&lt;/a&gt;其他安全漏洞&lt;/h3&gt;&lt;h4 id=&#34;密码破解攻击（Password-Cracking）&#34;&gt;&lt;a href=&#34;#密码破解攻击（Password-Cracking）&#34; class=&#34;headerlink&#34; title=&#34;密码破解攻击（Password Cracking）&#34;&gt;&lt;/a&gt;密码破解攻击（Password Cracking）&lt;/h4&gt;&lt;p&gt;密码破解攻击（Password Cracking）即算出密码，突破认证。&lt;/p&gt;
&lt;h4 id=&#34;点击劫持（Clickjacking）&#34;&gt;&lt;a href=&#34;#点击劫持（Clickjacking）&#34; class=&#34;headerlink&#34; title=&#34;点击劫持（Clickjacking）&#34;&gt;&lt;/a&gt;点击劫持（Clickjacking）&lt;/h4&gt;&lt;p&gt;点击劫持（Clickjacking）是指利用透明的按钮或链接做成陷阱，覆盖在 Web 页面之上。然后诱使用户在不知情的情况下，点击那个链接访问内容的一种攻击手段。这种行为又称为界面伪装（UI Redressing）。&lt;/p&gt;
&lt;h4 id=&#34;DoS-攻击（Denial-of-Service-attack）&#34;&gt;&lt;a href=&#34;#DoS-攻击（Denial-of-Service-attack）&#34; class=&#34;headerlink&#34; title=&#34;DoS 攻击（Denial of Service attack）&#34;&gt;&lt;/a&gt;DoS 攻击（Denial of Service attack）&lt;/h4&gt;&lt;p&gt;DoS 攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对象不仅限于 Web 网站，还包括网络设备及服务器等。&lt;/p&gt;
&lt;h4 id=&#34;后门程序（Backdoor）&#34;&gt;&lt;a href=&#34;#后门程序（Backdoor）&#34; class=&#34;headerlink&#34; title=&#34;后门程序（Backdoor）&#34;&gt;&lt;/a&gt;后门程序（Backdoor）&lt;/h4&gt;&lt;p&gt;后门程序（Backdoor）是指开发设置的隐藏入口，可不按正常步骤使用受限功能。利用后门程序就能够使用原本受限制的功能。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
